/*
faust2webaduio

Primarily written by Myles Borins
During the Spring 2013 offering of Music 420b with Julius Smith
A bit during the Summer of 2013 with the help of Joshua Kit Clayton
And finally a sprint during the late fall of 2013 to get everything working
A Special thanks to Yann Orlarey and StÃ©phane Letz

faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
Choose the license that best suits your project. The text of the MIT and GPL
licenses are at the root directory.

*/

/*global webkitAudioContext, Module, HEAPF32, HEAP32, Pointer_stringify, ALLOC_STACK, intArrayFromString, allocate*/

var faust = faust || {};

(function () {

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 276472;
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } });
var ___fsmu8;
var ___dso_handle;
var ___dso_handle=___dso_handle=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,48,39,0,0,8,3,0,0,146,1,0,0,178,0,0,0,152,1,0,0,218,0,0,0,114,0,0,0,0,1,0,0,36,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,64,39,0,0,8,3,0,0,254,2,0,0,178,0,0,0,152,1,0,0,218,0,0,0,68,2,0,0,30,1,0,0,170,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZNSt13runtime_errorC1EPKc;
var __ZNSt13runtime_errorD1Ev;
var __ZNSt12length_errorD1Ev;
var __ZNSt3__16localeC1Ev;
var __ZNSt3__16localeC1ERKS0_;
var __ZNSt3__16localeD1Ev;
var __ZNSt8bad_castC1Ev;
var __ZNSt8bad_castD1Ev;
/* memory initializer */ allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,118,111,108,117,109,101,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,100,66,0,0,0,0,0,0,102,114,101,113,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,72,122,0,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,116,114,117,101,0,0,0,0,58,32,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,117,110,105,116,0,0,0,0,67,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,37,46,48,76,102,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,79,115,99,105,108,108,97,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,72,33,0,0,72,0,0,0,80,1,0,0,160,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,33,0,0,44,2,0,0,184,1,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,33,0,0,204,0,0,0,36,3,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,33,0,0,12,1,0,0,16,0,0,0,158,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,33,0,0,12,1,0,0,42,0,0,0,158,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,33,0,0,192,1,0,0,236,0,0,0,134,0,0,0,234,1,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,33,0,0,22,3,0,0,248,1,0,0,134,0,0,0,232,2,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,33,0,0,182,1,0,0,252,1,0,0,134,0,0,0,238,1,0,0,6,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,28,3,0,0,132,1,0,0,134,0,0,0,220,1,0,0,56,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,34,0,0,14,3,0,0,8,1,0,0,134,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,34,0,0,180,1,0,0,64,1,0,0,134,0,0,0,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,34,0,0,100,0,0,0,66,1,0,0,134,0,0,0,172,2,0,0,20,0,0,0,254,1,0,0,32,0,0,0,216,0,0,0,174,2,0,0,242,0,0,0,248,255,255,255,224,34,0,0,130,0,0,0,52,0,0,0,196,0,0,0,86,0,0,0,8,0,0,0,182,0,0,0,204,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,35,0,0,250,2,0,0,188,2,0,0,134,0,0,0,126,0,0,0,146,0,0,0,206,2,0,0,144,1,0,0,180,0,0,0,14,0,0,0,144,2,0,0,248,255,255,255,8,35,0,0,118,1,0,0,92,2,0,0,146,2,0,0,196,2,0,0,54,2,0,0,2,1,0,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,35,0,0,226,0,0,0,8,2,0,0,134,0,0,0,24,1,0,0,240,0,0,0,132,0,0,0,122,1,0,0,204,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,35,0,0,174,0,0,0,190,0,0,0,134,0,0,0,250,0,0,0,246,1,0,0,144,0,0,0,228,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,35,0,0,0,3,0,0,2,0,0,0,134,0,0,0,158,1,0,0,16,3,0,0,74,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,35,0,0,128,0,0,0,140,2,0,0,134,0,0,0,186,2,0,0,224,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,35,0,0,160,2,0,0,74,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,35,0,0,68,0,0,0,130,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,35,0,0,12,0,0,0,198,1,0,0,134,0,0,0,112,0,0,0,98,0,0,0,90,0,0,0,96,0,0,0,88,0,0,0,108,0,0,0,106,0,0,0,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,35,0,0,20,1,0,0,40,0,0,0,134,0,0,0,38,2,0,0,42,2,0,0,30,2,0,0,40,2,0,0,18,1,0,0,34,2,0,0,32,2,0,0,202,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,102,0,0,0,54,0,0,0,134,0,0,0,104,2,0,0,100,2,0,0,90,2,0,0,94,2,0,0,242,1,0,0,98,2,0,0,88,2,0,0,110,2,0,0,108,2,0,0,106,2,0,0,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,36,0,0,150,0,0,0,4,0,0,0,134,0,0,0,246,2,0,0,230,2,0,0,224,2,0,0,154,1,0,0,202,2,0,0,228,2,0,0,222,2,0,0,240,2,0,0,238,2,0,0,236,2,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,36,0,0,214,0,0,0,4,1,0,0,134,0,0,0,102,1,0,0,26,2,0,0,68,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,36,0,0,66,0,0,0,206,1,0,0,134,0,0,0,20,2,0,0,132,2,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,36,0,0,24,0,0,0,240,1,0,0,134,0,0,0,82,0,0,0,230,1,0,0,224,1,0,0,170,2,0,0,78,2,0,0,156,2,0,0,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,36,0,0,214,1,0,0,114,1,0,0,134,0,0,0,212,2,0,0,18,3,0,0,48,2,0,0,32,1,0,0,50,0,0,0,52,2,0,0,36,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,36,0,0,214,1,0,0,44,0,0,0,134,0,0,0,10,1,0,0,124,0,0,0,246,0,0,0,70,2,0,0,76,1,0,0,176,1,0,0,242,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,36,0,0,214,1,0,0,40,1,0,0,134,0,0,0,28,2,0,0,200,1,0,0,130,2,0,0,172,0,0,0,148,1,0,0,128,1,0,0,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,36,0,0,214,1,0,0,80,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,36,0,0,164,0,0,0,168,1,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,36,0,0,214,1,0,0,230,0,0,0,134,0,0,0,136,1,0,0,202,0,0,0,94,1,0,0,10,3,0,0,206,0,0,0,58,2,0,0,12,2,0,0,62,0,0,0,136,0,0,0,150,2,0,0,50,1,0,0,208,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,37,0,0,34,3,0,0,94,0,0,0,134,0,0,0,168,0,0,0,58,0,0,0,108,1,0,0,142,2,0,0,158,0,0,0,112,1,0,0,186,1,0,0,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,37,0,0,194,0,0,0,176,2,0,0,172,1,0,0,66,2,0,0,86,1,0,0,114,2,0,0,120,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,37,0,0,214,1,0,0,238,0,0,0,134,0,0,0,28,2,0,0,200,1,0,0,130,2,0,0,172,0,0,0,148,1,0,0,128,1,0,0,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,37,0,0,214,1,0,0,188,1,0,0,134,0,0,0,28,2,0,0,200,1,0,0,130,2,0,0,172,0,0,0,148,1,0,0,128,1,0,0,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,37,0,0,98,1,0,0,214,2,0,0,210,0,0,0,156,1,0,0,14,1,0,0,64,2,0,0,14,2,0,0,82,2,0,0,134,2,0,0,166,0,0,0,152,0,0,0,142,0,0,0,30,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,37,0,0,18,0,0,0,82,1,0,0,10,2,0,0,198,2,0,0,194,2,0,0,22,2,0,0,26,1,0,0,250,1,0,0,104,1,0,0,36,0,0,0,64,0,0,0,216,2,0,0,90,1,0,0,222,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,160,37,0,0,118,2,0,0,126,2,0,0,252,255,255,255,252,255,255,255,160,37,0,0,140,1,0,0,96,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,184,37,0,0,162,2,0,0,218,2,0,0,252,255,255,255,252,255,255,255,184,37,0,0,62,1,0,0,60,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,208,37,0,0,244,0,0,0,38,3,0,0,248,255,255,255,248,255,255,255,208,37,0,0,216,1,0,0,210,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,232,37,0,0,58,1,0,0,86,2,0,0,248,255,255,255,248,255,255,255,232,37,0,0,124,1,0,0,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,76,2,0,0,218,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,38,0,0,2,3,0,0,192,2,0,0,198,0,0,0,156,1,0,0,14,1,0,0,64,2,0,0,52,1,0,0,82,2,0,0,134,2,0,0,166,0,0,0,152,0,0,0,142,0,0,0,102,2,0,0,220,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,38,0,0,162,1,0,0,212,1,0,0,70,1,0,0,198,2,0,0,194,2,0,0,22,2,0,0,16,2,0,0,250,1,0,0,104,1,0,0,36,0,0,0,64,0,0,0,216,2,0,0,244,2,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,38,0,0,178,2,0,0,138,1,0,0,134,0,0,0,116,1,0,0,152,2,0,0,22,1,0,0,12,3,0,0,60,0,0,0,42,1,0,0,38,1,0,0,228,0,0,0,110,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,38,0,0,54,1,0,0,160,0,0,0,134,0,0,0,128,2,0,0,10,0,0,0,80,2,0,0,184,2,0,0,200,2,0,0,254,0,0,0,138,2,0,0,208,1,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,38,0,0,190,2,0,0,78,1,0,0,134,0,0,0,110,0,0,0,72,1,0,0,74,0,0,0,84,1,0,0,208,2,0,0,210,1,0,0,50,2,0,0,232,1,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,38,0,0,222,0,0,0,196,1,0,0,134,0,0,0,84,2,0,0,112,2,0,0,34,1,0,0,148,2,0,0,6,1,0,0,212,0,0,0,174,1,0,0,122,2,0,0,116,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,248,0,0,0,38,0,0,0,100,1,0,0,156,1,0,0,14,1,0,0,64,2,0,0,14,2,0,0,82,2,0,0,134,2,0,0,126,1,0,0,226,1,0,0,186,0,0,0,30,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,39,0,0,30,0,0,0,166,2,0,0,24,2,0,0,198,2,0,0,194,2,0,0,22,2,0,0,26,1,0,0,250,1,0,0,104,1,0,0,62,2,0,0,140,0,0,0,34,0,0,0,90,1,0,0,222,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,39,0,0,8,3,0,0,46,2,0,0,178,0,0,0,152,1,0,0,218,0,0,0,70,0,0,0,154,2,0,0,44,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,39,0,0,4,3,0,0,56,1,0,0,226,2,0,0,22,0,0,0,164,1,0,0,176,0,0,0,236,1,0,0,72,2,0,0,4,2,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,39,0,0,28,1,0,0,2,2,0,0,252,2,0,0,118,0,0,0,78,0,0,0,26,0,0,0,60,1,0,0,24,3,0,0,84,0,0,0,162,0,0,0,156,0,0,0,244,1,0,0,122,0,0,0,20,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,39,0,0,182,2,0,0,252,0,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,39,0,0,124,2,0,0,180,2,0,0,226,2,0,0,22,0,0,0,164,1,0,0,176,0,0,0,236,1,0,0,72,2,0,0,4,2,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,39,0,0,234,2,0,0,164,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,6,2,0,0,120,0,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,56,79,115,99,95,119,114,97,112,0,0,0,0,0,0,0,52,74,83,85,73,0,0,0,51,100,115,112,0,0,0,0,51,79,115,99,0,0,0,0,50,85,73,0,0,0,0,0,0,0,0,0,96,21,0,0,0,0,0,0,112,21,0,0,0,0,0,0,128,21,0,0,64,33,0,0,0,0,0,0,0,0,0,0,144,21,0,0,64,33,0,0,0,0,0,0,0,0,0,0,160,21,0,0,64,33,0,0,0,0,0,0,0,0,0,0,184,21,0,0,136,33,0,0,0,0,0,0,0,0,0,0,208,21,0,0,64,33,0,0,0,0,0,0,0,0,0,0,224,21,0,0,8,20,0,0,248,21,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,72,38,0,0,0,0,0,0,8,20,0,0,64,22,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,80,38,0,0,0,0,0,0,8,20,0,0,136,22,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,88,38,0,0,0,0,0,0,8,20,0,0,208,22,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,96,38,0,0,0,0,0,0,0,0,0,0,24,23,0,0,144,35,0,0,0,0,0,0,0,0,0,0,72,23,0,0,144,35,0,0,0,0,0,0,8,20,0,0,120,23,0,0,0,0,0,0,1,0,0,0,136,37,0,0,0,0,0,0,8,20,0,0,144,23,0,0,0,0,0,0,1,0,0,0,136,37,0,0,0,0,0,0,8,20,0,0,168,23,0,0,0,0,0,0,1,0,0,0,144,37,0,0,0,0,0,0,8,20,0,0,192,23,0,0,0,0,0,0,1,0,0,0,144,37,0,0,0,0,0,0,8,20,0,0,216,23,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,248,38,0,0,0,8,0,0,8,20,0,0,32,24,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,248,38,0,0,0,8,0,0,8,20,0,0,104,24,0,0,0,0,0,0,3,0,0,0,200,36,0,0,2,0,0,0,152,33,0,0,2,0,0,0,40,37,0,0,0,8,0,0,8,20,0,0,176,24,0,0,0,0,0,0,3,0,0,0,200,36,0,0,2,0,0,0,152,33,0,0,2,0,0,0,48,37,0,0,0,8,0,0,0,0,0,0,248,24,0,0,200,36,0,0,0,0,0,0,0,0,0,0,16,25,0,0,200,36,0,0,0,0,0,0,8,20,0,0,40,25,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,152,37,0,0,2,0,0,0,8,20,0,0,64,25,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,152,37,0,0,2,0,0,0,0,0,0,0,88,25,0,0,0,0,0,0,112,25,0,0,0,38,0,0,0,0,0,0,8,20,0,0,144,25,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,64,34,0,0,0,0,0,0,8,20,0,0,216,25,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,88,34,0,0,0,0,0,0,8,20,0,0,32,26,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,112,34,0,0,0,0,0,0,8,20,0,0,104,26,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,136,34,0,0,0,0,0,0,0,0,0,0,176,26,0,0,200,36,0,0,0,0,0,0,0,0,0,0,200,26,0,0,200,36,0,0,0,0,0,0,8,20,0,0,224,26,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,16,38,0,0,2,0,0,0,8,20,0,0,8,27,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,16,38,0,0,2,0,0,0,8,20,0,0,48,27,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,16,38,0,0,2,0,0,0,8,20,0,0,88,27,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,16,38,0,0,2,0,0,0,0,0,0,0,128,27,0,0,128,37,0,0,0,0,0,0,0,0,0,0,152,27,0,0,200,36,0,0,0,0,0,0,8,20,0,0,176,27,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,240,38,0,0,2,0,0,0,8,20,0,0,200,27,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,240,38,0,0,2,0,0,0,0,0,0,0,224,27,0,0,0,0,0,0,8,28,0,0,0,0,0,0,48,28,0,0,24,38,0,0,0,0,0,0,0,0,0,0,80,28,0,0,168,36,0,0,0,0,0,0,0,0,0,0,120,28,0,0,168,36,0,0,0,0,0,0,0,0,0,0,160,28,0,0,0,0,0,0,216,28,0,0,0,0,0,0,16,29,0,0,0,0,0,0,48,29,0,0,0,0,0,0,80,29,0,0,0,0,0,0,112,29,0,0,0,0,0,0,144,29,0,0,8,20,0,0,168,29,0,0,0,0,0,0,1,0,0,0,32,34,0,0,3,244,255,255,8,20,0,0,216,29,0,0,0,0,0,0,1,0,0,0,48,34,0,0,3,244,255,255,8,20,0,0,8,30,0,0,0,0,0,0,1,0,0,0,32,34,0,0,3,244,255,255,8,20,0,0,56,30,0,0,0,0,0,0,1,0,0,0,48,34,0,0,3,244,255,255,0,0,0,0,104,30,0,0,104,33,0,0,0,0,0,0,0,0,0,0,128,30,0,0,0,0,0,0,152,30,0,0,120,37,0,0,0,0,0,0,0,0,0,0,176,30,0,0,104,37,0,0,0,0,0,0,0,0,0,0,208,30,0,0,112,37,0,0,0,0,0,0,0,0,0,0,240,30,0,0,0,0,0,0,16,31,0,0,0,0,0,0,48,31,0,0,0,0,0,0,80,31,0,0,8,20,0,0,112,31,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,232,38,0,0,2,0,0,0,8,20,0,0,144,31,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,232,38,0,0,2,0,0,0,8,20,0,0,176,31,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,232,38,0,0,2,0,0,0,8,20,0,0,208,31,0,0,0,0,0,0,2,0,0,0,200,36,0,0,2,0,0,0,232,38,0,0,2,0,0,0,0,0,0,0,240,31,0,0,0,0,0,0,8,32,0,0,0,0,0,0,32,32,0,0,0,0,0,0,56,32,0,0,104,37,0,0,0,0,0,0,0,0,0,0,80,32,0,0,112,37,0,0,0,0,0,0,0,0,0,0,104,32,0,0,64,39,0,0,0,0,0,0,0,0,0,0,144,32,0,0,64,39,0,0,0,0,0,0,0,0,0,0,184,32,0,0,80,39,0,0,0,0,0,0,0,0,0,0,224,32,0,0,56,33,0,0,0,0,0,0,0,0,0,0,8,33,0,0,136,39,0,0,0,0,0,0,0,0,0,0,24,33,0,0,152,39,0,0,0,0,0,0,0,0,0,0,32,33,0,0,0,0,0,0,40,33,0,0,128,39,0,0,0,0,0,0,0,0,0,0,48,33,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((8504 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8512 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8520 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8536 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8552 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8568 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8584 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8600 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((8736 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((8752 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9008 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9024 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9104 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9112 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9256 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9272 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9416 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9432 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9512 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9520 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9528 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9544 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9560 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9576 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9584 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9592 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9600 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9608 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9616 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9624 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9728 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9744 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9752 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9768 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9784 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((9800 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9808 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9816 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9824 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9960 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9968 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9976 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((9984 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10000 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10016 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10032 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10048 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10064 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10080 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10096 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10112 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((10120 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((10136 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
  function ___gxx_personality_v0() {
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function _fmin(x, y) {
      return isNaN(x) ? y : isNaN(y) ? x : Math.min(x, y);
    }
  function _fmax(x, y) {
      return isNaN(x) ? y : isNaN(y) ? x : Math.max(x, y);
    }
  var _powf=Math_pow;
  var _floorf=Math_floor;
  var _sinf=Math_sin;
  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_release() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  var _llvm_memset_p0i8_i64=_memset;
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function ___errno_location() {
      return ___errno_state;
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function ___cxa_guard_abort() {}
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _catopen() { throw 'TODO: ' + aborter }
  function _catgets() { throw 'TODO: ' + aborter }
  function _catclose() { throw 'TODO: ' + aborter }
  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }
  function _freelocale(locale) {
      _free(locale);
    }
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  var _llvm_va_start=undefined;
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZN3Osc13getNumOutputsEv,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZN4JSUI8closeBoxEv,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt11logic_errorD2Ev,0,__ZN4JSUI15openVerticalBoxEPKc,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZN4JSUI17addVerticalSliderEPKcPfffff,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZN3Osc12instanceInitEi,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castC2Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZN4JSUI17openHorizontalBoxEPKc,0,__ZN2UI7declareEPfPKcS2_,0,__ZN4JSUI19addVerticalBargraphEPKcPfff,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZN4JSUI11addNumEntryEPKcPfffff,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZN4JSUI19addHorizontalSliderEPKcPfffff,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZNSt3__18numpunctIcED2Ev,0,__ZN3Osc4initEi,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZN3dspD0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZN4JSUID1Ev,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNSt3__16localeC2ERKS0_,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZN8Osc_wrapD0Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZN4JSUI9addButtonEPKcPf,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNSt8bad_castD2Ev,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__16localeD2Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZN3Osc18buildUserInterfaceEP2UI,0,__ZNSt13runtime_errorC2EPKc,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZN3Osc7computeEiPPfS1_,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZN4JSUI21addHorizontalBargraphEPKcPfff,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZN4JSUID0Ev,0,__ZN3Osc13getOutputRateEi,0,___cxa_pure_virtual,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZN3Osc12getInputRateEi,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZN3OscD1Ev,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt11logic_error4whatEv,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZN2UID0Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNSt3__16localeC2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZN3OscD0Ev,0,__ZN3dspD1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZN3Osc12getNumInputsEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZN2UID1Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN4JSUI10openTabBoxEPKc,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZN8Osc_wrapD1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZN4JSUI7declareEPfPKcS2_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN4JSUI14addCheckButtonEPKcPf,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0];
// EMSCRIPTEN_START_FUNCS
function __Z10newOscSIG0v(){
 var label=0;
 var $call=__Znwj(8);
 var $0=$call;
 var $1=$0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0;
 return $0;
}
function __Z13deleteOscSIG0P7OscSIG0($dsp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dsp_addr;
 $dsp_addr=$dsp;
 var $0=$dsp_addr;
 var $isnull=($0|0)==0;
 if($isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $1=$0;
 __ZdlPv($1);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3OscD1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN3OscD2Ev($this1);
 return;
}
function _OSC_constructor($samplingFreq){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i4_i;
 var $__i2_i_i=sp;
 var $this_addr_i5_i;
 var $agg_tmp2_i=(sp)+(8);
 var $this_addr_i_i_i_i;
 var $__p_addr_i_i_i_i;
 var $this_addr_i2_i_i;
 var $__p_addr_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $agg_tmp_i=(sp)+(16);
 var $samplingFreq_addr;
 var $n;
 var $exn_slot;
 var $ehselector_slot;
 var $ref_tmp=(sp)+(24);
 $samplingFreq_addr=$samplingFreq;
 var $call=__Znwj(40);
 var $0=$call;
 var $1=$0;
 _memset($1, 0, 40)|0;
 (function() { try { __THREW__ = 0; return __ZN8Osc_wrapC1Ev($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 $n=$0;
 var $call1=__Znwj(20);
 var $2=$call1;
 (function() { try { __THREW__ = 0; return __ZN4JSUIC1Ev($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $3=$n;
 var $ui=(($3+36)|0);
 HEAP32[(($ui)>>2)]=$2;
 var $4=$n;
 var $5=$4;
 var $6=$5;
 var $vtable=HEAP32[(($6)>>2)];
 var $vfn=(($vtable+20)|0);
 var $7=HEAP32[(($vfn)>>2)];
 var $8=$samplingFreq_addr;
 FUNCTION_TABLE[$7]($5,$8);
 var $9=$n;
 var $10=$9;
 var $11=$10;
 var $vtable4=HEAP32[(($11)>>2)];
 var $vfn5=(($vtable4+16)|0);
 var $12=HEAP32[(($vfn5)>>2)];
 var $13=$n;
 var $ui6=(($13+36)|0);
 var $14=HEAP32[(($ui6)>>2)];
 var $15=$14;
 FUNCTION_TABLE[$12]($10,$15);
 var $16=$n;
 var $ui7=(($16+36)|0);
 var $17=HEAP32[(($ui7)>>2)];
 var $iter=(($17+16)|0);
 var $18=$n;
 var $ui8=(($18+36)|0);
 var $19=HEAP32[(($ui8)>>2)];
 var $uiMap=(($19+4)|0);
 $this_addr_i=$uiMap;
 var $this1_i=$this_addr_i;
 var $__tree__i=(($this1_i)|0);
 $this_addr_i_i=$__tree__i;
 var $this1_i_i=$this_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__begin_node__i_i_i=(($this1_i_i_i)|0);
 var $20=HEAP32[(($__begin_node__i_i_i)>>2)];
 $this_addr_i2_i_i=$agg_tmp_i;
 $__p_addr_i_i_i=$20;
 var $this1_i3_i_i=$this_addr_i2_i_i;
 var $21=$__p_addr_i_i_i;
 $this_addr_i_i_i_i=$this1_i3_i_i;
 $__p_addr_i_i_i_i=$21;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__ptr__i_i_i_i=(($this1_i_i_i_i)|0);
 var $22=$__p_addr_i_i_i_i;
 HEAP32[(($__ptr__i_i_i_i)>>2)]=$22;
 var $tmp_i=$agg_tmp2_i;
 var $tmp3_i=$agg_tmp_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
 $this_addr_i5_i=$ref_tmp;
 var $this1_i6_i=$this_addr_i5_i;
 var $tmp_i_i=$__i2_i_i;
 var $tmp3_i_i=$agg_tmp2_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp3_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp3_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp3_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp3_i_i)+(3))|0)];
 $this_addr_i_i4_i=$this1_i6_i;
 var $this1_i_i7_i=$this_addr_i_i4_i;
 var $__i__i_i_i=(($this1_i_i7_i)|0);
 var $23=$__i__i_i_i;
 var $24=$__i2_i_i;
 assert(4 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];
 var $25=$iter;
 var $26=$ref_tmp;
 assert(4 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];
 var $27=$n;
 var $28=$27;
 STACKTOP=sp;return $28;
 case 4: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 $exn_slot=$30;
 var $31=$29$1;
 $ehselector_slot=$31;
 __ZdlPv($call);
 label=6;break;
 case 5: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=$32$0;
 $exn_slot=$33;
 var $34=$32$1;
 $ehselector_slot=$34;
 __ZdlPv($call1);
 label=6;break;
 case 6: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val9$0=$lpad_val$0;
 var $lpad_val9$1=$sel;
 ___resumeException($lpad_val9$0)
  default: assert(0, "bad label: " + label);
 }
}
Module["_OSC_constructor"] = _OSC_constructor;
function __ZN8Osc_wrapC1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN8Osc_wrapC2Ev($this1);
 return;
}
function __ZN4JSUIC1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN4JSUIC2Ev($this1);
 return;
}
function _OSC_getNumParams($n){
 var label=0;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $n_addr;
 $n_addr=$n;
 var $0=$n_addr;
 var $ui=(($0+36)|0);
 var $1=HEAP32[(($ui)>>2)];
 var $uiMap=(($1+4)|0);
 $this_addr_i=$uiMap;
 var $this1_i=$this_addr_i;
 var $__tree__i=(($this1_i)|0);
 $this_addr_i_i=$__tree__i;
 var $this1_i_i=$this_addr_i_i;
 var $__pair3__i_i=(($this1_i_i+8)|0);
 $this_addr_i_i_i=$__pair3__i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $2=$this1_i_i_i;
 $this_addr_i_i_i_i=$2;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__first__i_i_i_i=(($this1_i_i_i_i)|0);
 var $3=HEAP32[(($__first__i_i_i_i)>>2)];
 return $3;
}
Module["_OSC_getNumParams"] = _OSC_getNumParams;
function _OSC_getNextParam($n,$key){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_addr_i_i_i65;
 var $this_addr_i_i_i13_i_i_i;
 var $this_addr_i_i14_i_i_i;
 var $this_addr_i15_i_i_i;
 var $__x_addr_i_i_i_i_i_i;
 var $__r_addr_i_i_i_i_i;
 var $this_addr_i_i_i4_i_i_i;
 var $this_addr_i_i5_i_i_i;
 var $this_addr_i6_i_i_i;
 var $this_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i66;
 var $this_addr_i_i_i_i67;
 var $this_addr_i_i_i68;
 var $this_addr_i_i69;
 var $this_addr_i70;
 var $__x_addr_i_i_i53;
 var $__r_addr_i_i54;
 var $__x_addr_i_i_i_i55;
 var $__r_addr_i_i_i56;
 var $this_addr_i_i57;
 var $this_addr_i58;
 var $this_addr_i_i_i47;
 var $this_addr_i_i48;
 var $this_addr_i49;
 var $_addr_i;
 var $this_addr_i_i4_i23;
 var $__i2_i_i24=sp;
 var $this_addr_i5_i25;
 var $agg_tmp2_i26=(sp)+(8);
 var $this_addr_i_i2_i_i;
 var $__p_addr_i_i_i_i27;
 var $this_addr_i3_i_i;
 var $__p_addr_i_i_i28;
 var $__x_addr_i_i_i_i_i;
 var $__r_addr_i_i_i_i;
 var $this_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i29;
 var $this_addr_i_i_i30;
 var $this_addr_i_i31;
 var $this_addr_i32;
 var $agg_tmp_i33=(sp)+(16);
 var $__x_addr_i_i;
 var $__y_addr_i_i;
 var $__x_addr_i;
 var $__y_addr_i;
 var $this_addr_i_i4_i;
 var $__i2_i_i=(sp)+(24);
 var $this_addr_i5_i;
 var $agg_tmp2_i=(sp)+(32);
 var $this_addr_i_i_i_i;
 var $__p_addr_i_i_i_i;
 var $this_addr_i2_i_i;
 var $__p_addr_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i17;
 var $this_addr_i18;
 var $agg_tmp_i=(sp)+(40);
 var $__x_addr_i_i_i;
 var $__r_addr_i_i;
 var $__x_addr_i_i_i_i;
 var $__r_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $n_addr;
 var $key_addr;
 var $valPtr;
 var $tmp=(sp)+(48);
 var $ref_tmp=(sp)+(56);
 var $ref_tmp14=(sp)+(64);
 $n_addr=$n;
 $key_addr=$key;
 var $0=$n_addr;
 var $ui=(($0+36)|0);
 var $1=HEAP32[(($ui)>>2)];
 var $iter=(($1+16)|0);
 $this_addr_i=$iter;
 var $this1_i=$this_addr_i;
 var $__i__i=(($this1_i)|0);
 $this_addr_i_i=$__i__i;
 var $this1_i_i=$this_addr_i_i;
 var $__ptr__i_i=(($this1_i_i)|0);
 var $2=HEAP32[(($__ptr__i_i)>>2)];
 var $__value__i_i=(($2+16)|0);
 $__r_addr_i_i_i=$__value__i_i;
 var $3=$__r_addr_i_i_i;
 $__x_addr_i_i_i_i=$3;
 var $4=$__x_addr_i_i_i_i;
 var $5=$4;
 var $6=$5;
 var $__cc_i=(($6)|0);
 $__r_addr_i_i=$__cc_i;
 var $7=$__r_addr_i_i;
 $__x_addr_i_i_i=$7;
 var $8=$__x_addr_i_i_i;
 var $9=$8;
 var $10=$9;
 var $second=(($10+12)|0);
 var $11=HEAP32[(($second)>>2)];
 $valPtr=$11;
 var $12=$key_addr;
 var $13=$n_addr;
 var $ui1=(($13+36)|0);
 var $14=HEAP32[(($ui1)>>2)];
 var $iter2=(($14+16)|0);
 $this_addr_i58=$iter2;
 var $this1_i59=$this_addr_i58;
 var $__i__i60=(($this1_i59)|0);
 $this_addr_i_i57=$__i__i60;
 var $this1_i_i61=$this_addr_i_i57;
 var $__ptr__i_i62=(($this1_i_i61)|0);
 var $15=HEAP32[(($__ptr__i_i62)>>2)];
 var $__value__i_i63=(($15+16)|0);
 $__r_addr_i_i_i56=$__value__i_i63;
 var $16=$__r_addr_i_i_i56;
 $__x_addr_i_i_i_i55=$16;
 var $17=$__x_addr_i_i_i_i55;
 var $18=$17;
 var $19=$18;
 var $__cc_i64=(($19)|0);
 $__r_addr_i_i54=$__cc_i64;
 var $20=$__r_addr_i_i54;
 $__x_addr_i_i_i53=$20;
 var $21=$__x_addr_i_i_i53;
 var $22=$21;
 var $23=$22;
 var $first=(($23)|0);
 $this_addr_i70=$first;
 var $this1_i71=$this_addr_i70;
 $this_addr_i_i69=$this1_i71;
 var $this1_i_i72=$this_addr_i_i69;
 $this_addr_i_i_i68=$this1_i_i72;
 var $this1_i_i_i73=$this_addr_i_i_i68;
 $this_addr_i_i_i_i67=$this1_i_i_i73;
 var $this1_i_i_i_i74=$this_addr_i_i_i_i67;
 var $__r__i_i_i_i=(($this1_i_i_i_i74)|0);
 $this_addr_i_i_i_i_i66=$__r__i_i_i_i;
 var $this1_i_i_i_i_i75=$this_addr_i_i_i_i_i66;
 var $24=$this1_i_i_i_i_i75;
 $this_addr_i_i_i_i_i_i=$24;
 var $this1_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i;
 var $__first__i_i_i_i_i_i=(($this1_i_i_i_i_i_i)|0);
 var $25=(($__first__i_i_i_i_i_i)|0);
 var $__s_i_i_i_i=$25;
 var $26=(($__s_i_i_i_i)|0);
 var $__size__i_i_i_i=$26;
 var $27=HEAP8[($__size__i_i_i_i)];
 var $conv_i_i_i_i=($27&255);
 var $and_i_i_i_i=$conv_i_i_i_i&1;
 var $tobool_i_i_i_i=($and_i_i_i_i|0)!=0;
 if($tobool_i_i_i_i){label=2;break;}else{label=3;break;}
 case 2: 
 $this_addr_i15_i_i_i=$this1_i_i_i73;
 var $this1_i16_i_i_i=$this_addr_i15_i_i_i;
 var $__r__i17_i_i_i=(($this1_i16_i_i_i)|0);
 $this_addr_i_i14_i_i_i=$__r__i17_i_i_i;
 var $this1_i_i18_i_i_i=$this_addr_i_i14_i_i_i;
 var $28=$this1_i_i18_i_i_i;
 $this_addr_i_i_i13_i_i_i=$28;
 var $this1_i_i_i19_i_i_i=$this_addr_i_i_i13_i_i_i;
 var $__first__i_i_i20_i_i_i=(($this1_i_i_i19_i_i_i)|0);
 var $29=(($__first__i_i_i20_i_i_i)|0);
 var $__l_i_i_i_i=$29;
 var $__data__i21_i_i_i=(($__l_i_i_i_i+8)|0);
 var $30=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$30;label=4;break;
 case 3: 
 $this_addr_i6_i_i_i=$this1_i_i_i73;
 var $this1_i7_i_i_i=$this_addr_i6_i_i_i;
 var $__r__i8_i_i_i=(($this1_i7_i_i_i)|0);
 $this_addr_i_i5_i_i_i=$__r__i8_i_i_i;
 var $this1_i_i9_i_i_i=$this_addr_i_i5_i_i_i;
 var $31=$this1_i_i9_i_i_i;
 $this_addr_i_i_i4_i_i_i=$31;
 var $this1_i_i_i10_i_i_i=$this_addr_i_i_i4_i_i_i;
 var $__first__i_i_i11_i_i_i=(($this1_i_i_i10_i_i_i)|0);
 var $32=(($__first__i_i_i11_i_i_i)|0);
 var $__s_i12_i_i_i=$32;
 var $__data__i_i_i_i=(($__s_i12_i_i_i+1)|0);
 var $arrayidx_i_i_i_i=(($__data__i_i_i_i)|0);
 $__r_addr_i_i_i_i_i=$arrayidx_i_i_i_i;
 var $33=$__r_addr_i_i_i_i_i;
 $__x_addr_i_i_i_i_i_i=$33;
 var $34=$__x_addr_i_i_i_i_i_i;
 var $cond_i_i_i=$34;label=4;break;
 case 4: 
 var $cond_i_i_i;
 $__p_addr_i_i_i65=$cond_i_i_i;
 var $35=$__p_addr_i_i_i65;
 var $call5=_strcpy($12,$35);
 var $36=$n_addr;
 var $ui6=(($36+36)|0);
 var $37=HEAP32[(($ui6)>>2)];
 var $iter7=(($37+16)|0);
 $this_addr_i49=$iter7;
 $_addr_i=0;
 var $this1_i50=$this_addr_i49;
 var $38=$tmp;
 var $39=$this1_i50;
 assert(4 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];
 $this_addr_i_i48=$this1_i50;
 var $this1_i_i51=$this_addr_i_i48;
 var $__i__i_i=(($this1_i_i51)|0);
 $this_addr_i_i_i47=$__i__i_i;
 var $this1_i_i_i52=$this_addr_i_i_i47;
 var $__ptr__i_i_i=(($this1_i_i_i52)|0);
 var $40=HEAP32[(($__ptr__i_i_i)>>2)];
 var $41=$40;
 var $call_i_i_i=__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($41);
 var $42=$call_i_i_i;
 var $__ptr_2_i_i_i=(($this1_i_i_i52)|0);
 HEAP32[(($__ptr_2_i_i_i)>>2)]=$42;
 var $43=$n_addr;
 var $ui8=(($43+36)|0);
 var $44=HEAP32[(($ui8)>>2)];
 var $iter9=(($44+16)|0);
 var $45=$n_addr;
 var $ui10=(($45+36)|0);
 var $46=HEAP32[(($ui10)>>2)];
 var $uiMap=(($46+4)|0);
 $this_addr_i32=$uiMap;
 var $this1_i34=$this_addr_i32;
 var $__tree__i35=(($this1_i34)|0);
 $this_addr_i_i31=$__tree__i35;
 var $this1_i_i36=$this_addr_i_i31;
 $this_addr_i_i_i30=$this1_i_i36;
 var $this1_i_i_i37=$this_addr_i_i_i30;
 var $__pair1__i_i_i=(($this1_i_i_i37+4)|0);
 $this_addr_i_i_i_i29=$__pair1__i_i_i;
 var $this1_i_i_i_i38=$this_addr_i_i_i_i29;
 var $47=$this1_i_i_i_i38;
 $this_addr_i_i_i_i_i=$47;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 var $__first__i_i_i_i_i=(($this1_i_i_i_i_i)|0);
 $__r_addr_i_i_i_i=$__first__i_i_i_i_i;
 var $48=$__r_addr_i_i_i_i;
 $__x_addr_i_i_i_i_i=$48;
 var $49=$__x_addr_i_i_i_i_i;
 var $50=$49;
 var $51=$50;
 var $52=$51;
 $this_addr_i3_i_i=$agg_tmp_i33;
 $__p_addr_i_i_i28=$52;
 var $this1_i4_i_i=$this_addr_i3_i_i;
 var $53=$__p_addr_i_i_i28;
 $this_addr_i_i2_i_i=$this1_i4_i_i;
 $__p_addr_i_i_i_i27=$53;
 var $this1_i_i5_i_i=$this_addr_i_i2_i_i;
 var $__ptr__i_i_i_i39=(($this1_i_i5_i_i)|0);
 var $54=$__p_addr_i_i_i_i27;
 HEAP32[(($__ptr__i_i_i_i39)>>2)]=$54;
 var $tmp_i40=$agg_tmp2_i26;
 var $tmp3_i41=$agg_tmp_i33;
 assert(4 % 1 === 0);HEAP8[($tmp_i40)]=HEAP8[($tmp3_i41)];HEAP8[((($tmp_i40)+(1))|0)]=HEAP8[((($tmp3_i41)+(1))|0)];HEAP8[((($tmp_i40)+(2))|0)]=HEAP8[((($tmp3_i41)+(2))|0)];HEAP8[((($tmp_i40)+(3))|0)]=HEAP8[((($tmp3_i41)+(3))|0)];
 $this_addr_i5_i25=$ref_tmp;
 var $this1_i6_i42=$this_addr_i5_i25;
 var $tmp_i_i43=$__i2_i_i24;
 var $tmp3_i_i44=$agg_tmp2_i26;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i43)]=HEAP8[($tmp3_i_i44)];HEAP8[((($tmp_i_i43)+(1))|0)]=HEAP8[((($tmp3_i_i44)+(1))|0)];HEAP8[((($tmp_i_i43)+(2))|0)]=HEAP8[((($tmp3_i_i44)+(2))|0)];HEAP8[((($tmp_i_i43)+(3))|0)]=HEAP8[((($tmp3_i_i44)+(3))|0)];
 $this_addr_i_i4_i23=$this1_i6_i42;
 var $this1_i_i7_i45=$this_addr_i_i4_i23;
 var $__i__i_i_i46=(($this1_i_i7_i45)|0);
 var $55=$__i__i_i_i46;
 var $56=$__i2_i_i24;
 assert(4 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];
 $__x_addr_i=$iter9;
 $__y_addr_i=$ref_tmp;
 var $57=$__x_addr_i;
 var $__i__i21=(($57)|0);
 var $58=$__y_addr_i;
 var $__i_1_i=(($58)|0);
 $__x_addr_i_i=$__i__i21;
 $__y_addr_i_i=$__i_1_i;
 var $59=$__x_addr_i_i;
 var $__ptr__i_i22=(($59)|0);
 var $60=HEAP32[(($__ptr__i_i22)>>2)];
 var $61=$__y_addr_i_i;
 var $__ptr_1_i_i=(($61)|0);
 var $62=HEAP32[(($__ptr_1_i_i)>>2)];
 var $cmp_i_i=($60|0)==($62|0);
 if($cmp_i_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $63=$n_addr;
 var $ui12=(($63+36)|0);
 var $64=HEAP32[(($ui12)>>2)];
 var $iter13=(($64+16)|0);
 var $65=$n_addr;
 var $ui15=(($65+36)|0);
 var $66=HEAP32[(($ui15)>>2)];
 var $uiMap16=(($66+4)|0);
 $this_addr_i18=$uiMap16;
 var $this1_i19=$this_addr_i18;
 var $__tree__i=(($this1_i19)|0);
 $this_addr_i_i17=$__tree__i;
 var $this1_i_i20=$this_addr_i_i17;
 $this_addr_i_i_i=$this1_i_i20;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__begin_node__i_i_i=(($this1_i_i_i)|0);
 var $67=HEAP32[(($__begin_node__i_i_i)>>2)];
 $this_addr_i2_i_i=$agg_tmp_i;
 $__p_addr_i_i_i=$67;
 var $this1_i3_i_i=$this_addr_i2_i_i;
 var $68=$__p_addr_i_i_i;
 $this_addr_i_i_i_i=$this1_i3_i_i;
 $__p_addr_i_i_i_i=$68;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__ptr__i_i_i_i=(($this1_i_i_i_i)|0);
 var $69=$__p_addr_i_i_i_i;
 HEAP32[(($__ptr__i_i_i_i)>>2)]=$69;
 var $tmp_i=$agg_tmp2_i;
 var $tmp3_i=$agg_tmp_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
 $this_addr_i5_i=$ref_tmp14;
 var $this1_i6_i=$this_addr_i5_i;
 var $tmp_i_i=$__i2_i_i;
 var $tmp3_i_i=$agg_tmp2_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp3_i_i)];HEAP8[((($tmp_i_i)+(1))|0)]=HEAP8[((($tmp3_i_i)+(1))|0)];HEAP8[((($tmp_i_i)+(2))|0)]=HEAP8[((($tmp3_i_i)+(2))|0)];HEAP8[((($tmp_i_i)+(3))|0)]=HEAP8[((($tmp3_i_i)+(3))|0)];
 $this_addr_i_i4_i=$this1_i6_i;
 var $this1_i_i7_i=$this_addr_i_i4_i;
 var $__i__i_i_i=(($this1_i_i7_i)|0);
 var $70=$__i__i_i_i;
 var $71=$__i2_i_i;
 assert(4 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($71)>>2)];
 var $72=$iter13;
 var $73=$ref_tmp14;
 assert(4 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];
 label=6;break;
 case 6: 
 var $74=$valPtr;
 STACKTOP=sp;return $74;
  default: assert(0, "bad label: " + label);
 }
}
Module["_OSC_getNextParam"] = _OSC_getNextParam;
function _OSC_compute($n,$count,$inputs,$outputs){
 var label=0;
 var $n_addr;
 var $count_addr;
 var $inputs_addr;
 var $outputs_addr;
 $n_addr=$n;
 $count_addr=$count;
 $inputs_addr=$inputs;
 $outputs_addr=$outputs;
 var $0=$n_addr;
 var $1=$0;
 var $2=$1;
 var $vtable=HEAP32[(($2)>>2)];
 var $vfn=(($vtable+24)|0);
 var $3=HEAP32[(($vfn)>>2)];
 var $4=$count_addr;
 var $5=$inputs_addr;
 var $6=$outputs_addr;
 FUNCTION_TABLE[$3]($1,$4,$5,$6);
 return 1;
}
Module["_OSC_compute"] = _OSC_compute;
function _OSC_getNumInputs($n){
 var label=0;
 var $n_addr;
 $n_addr=$n;
 var $0=$n_addr;
 var $1=$0;
 var $2=$1;
 var $vtable=HEAP32[(($2)>>2)];
 var $vfn=(($vtable+8)|0);
 var $3=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$3]($1);
 return $call;
}
Module["_OSC_getNumInputs"] = _OSC_getNumInputs;
function _OSC_getNumOutputs($n){
 var label=0;
 var $n_addr;
 $n_addr=$n;
 var $0=$n_addr;
 var $1=$0;
 var $2=$1;
 var $vtable=HEAP32[(($2)>>2)];
 var $vfn=(($vtable+12)|0);
 var $3=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$3]($1);
 return $call;
}
Module["_OSC_getNumOutputs"] = _OSC_getNumOutputs;
function _OSC_destructor($n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $n_addr;
 $n_addr=$n;
 var $0=$n_addr;
 var $isnull=($0|0)==0;
 if($isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $1=$0;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+4)|0);
 var $2=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$2]($0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_OSC_destructor"] = _OSC_destructor;
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i;
 var $this_addr_i_i6;
 var $this_addr_i_i_i_i;
 var $_addr_i_i_i_i;
 var $this_addr_i_i_i7;
 var $_addr_i_i_i8;
 var $__x_addr_i9;
 var $tmp_i=sp;
 var $exn_slot_i;
 var $ehselector_slot_i;
 var $__x_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $retval;
 var $__x_addr;
 var $tmp=(sp)+(8);
 var $exn_slot;
 var $ehselector_slot;
 $__x_addr=$__x;
 var $0=$__x_addr;
 var $__right_=(($0+4)|0);
 var $1=HEAP32[(($__right_)>>2)];
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $2=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$2;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 label=2;break;
 case 2: 
 $this_addr_i=$tmp;
 var $this1_i=$this_addr_i;
 label=3;break;
 case 3: 
 var $cmp=($1|0)!=0;
 if($cmp){label=4;break;}else{label=10;break;}
 case 4: 
 var $3=$__x_addr;
 var $__right_2=(($3+4)|0);
 var $4=HEAP32[(($__right_2)>>2)];
 $__x_addr_i9=$4;
 label=5;break;
 case 5: 
 var $5=$__x_addr_i9;
 var $6=$5;
 var $__left__i10=(($6)|0);
 var $7=HEAP32[(($__left__i10)>>2)];
 $this_addr_i_i_i7=$tmp_i;
 $_addr_i_i_i8=-1;
 var $this1_i_i_i11=$this_addr_i_i_i7;
 var $8=$_addr_i_i_i8;
 $this_addr_i_i_i_i=$this1_i_i_i11;
 $_addr_i_i_i_i=$8;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__lx_i_i_i_i=(($this1_i_i_i_i)|0);
 HEAP32[(($__lx_i_i_i_i)>>2)]=0;
 $this_addr_i_i6=$tmp_i;
 var $this1_i_i12=$this_addr_i_i6;
 var $cmp_i13=($7|0)!=0;
 if($cmp_i13){label=6;break;}else{label=7;break;}
 case 6: 
 var $9=$__x_addr_i9;
 var $10=$9;
 var $__left_2_i=(($10)|0);
 var $11=HEAP32[(($__left_2_i)>>2)];
 $__x_addr_i9=$11;
 label=5;break;
 case 7: 
 var $12=$__x_addr_i9;
 $retval=$12;
 label=14;break;
 case 8: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=$13$0;
 $exn_slot=$14;
 var $15=$13$1;
 $ehselector_slot=$15;
 label=9;break;
 case 9: 
 var $exn=$exn_slot;
 ___cxa_call_unexpected($exn);
 throw "Reached an unreachable!";
 case 10: 
 label=11;break;
 case 11: 
 var $16=$__x_addr;
 $__x_addr_i=$16;
 var $17=$__x_addr_i;
 var $18=$__x_addr_i;
 var $__parent__i=(($18+8)|0);
 var $19=HEAP32[(($__parent__i)>>2)];
 var $20=$19;
 var $__left__i=(($20)|0);
 var $21=HEAP32[(($__left__i)>>2)];
 var $cmp_i=($17|0)==($21|0);
 var $lnot=$cmp_i^1;
 if($lnot){label=12;break;}else{label=13;break;}
 case 12: 
 var $22=$__x_addr;
 var $__parent_=(($22+8)|0);
 var $23=HEAP32[(($__parent_)>>2)];
 $__x_addr=$23;
 label=11;break;
 case 13: 
 var $24=$__x_addr;
 var $__parent_5=(($24+8)|0);
 var $25=HEAP32[(($__parent_5)>>2)];
 $retval=$25;
 label=14;break;
 case 14: 
 var $26=$retval;
 STACKTOP=sp;return $26;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4JSUIC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i_i_i4;
 var $this_addr_i_i_i5;
 var $this_addr_i_i6;
 var $this_addr_i7;
 var $this_addr_i_i_i_i;
 var $c2_i_i_i=sp;
 var $this_addr_i_i_i;
 var $agg_tmp2_i_i=(sp)+(8);
 var $this_addr_i_i;
 var $__comp_addr_i_i;
 var $ref_tmp_i_i=(sp)+(16);
 var $agg_tmp_i_i=(sp)+(24);
 var $this_addr_i;
 var $__comp_addr_i;
 var $this_addr;
 var $ref_tmp=(sp)+(32);
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 __ZN2UIC2Ev($0);
 var $1=$this1;
 HEAP32[(($1)>>2)]=5232;
 var $uiMap=(($this1+4)|0);
 $this_addr_i=$uiMap;
 $__comp_addr_i=$ref_tmp;
 var $this1_i=$this_addr_i;
 var $2=$__comp_addr_i;
 $this_addr_i_i=$this1_i;
 $__comp_addr_i_i=$2;
 var $this1_i_i=$this_addr_i_i;
 var $__tree__i_i=(($this1_i_i)|0);
 var $3=$__comp_addr_i_i;
 var $tmp_i_i=$agg_tmp2_i_i;
 var $tmp3_i_i=$agg_tmp_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp3_i_i)];
 $this_addr_i_i_i=$ref_tmp_i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $tmp_i_i_i=$c2_i_i_i;
 var $tmp3_i_i_i=$agg_tmp2_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp3_i_i_i)];
 $this_addr_i_i_i_i=$this1_i_i_i;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $4=$this1_i_i_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_($__tree__i_i,$ref_tmp_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=4;break; }
 case 2: 
 label=3;break;
 case 3: 
 var $iter=(($this1+16)|0);
 $this_addr_i7=$iter;
 var $this1_i8=$this_addr_i7;
 $this_addr_i_i6=$this1_i8;
 var $this1_i_i9=$this_addr_i_i6;
 var $__i__i_i=(($this1_i_i9)|0);
 $this_addr_i_i_i5=$__i__i_i;
 var $this1_i_i_i10=$this_addr_i_i_i5;
 $this_addr_i_i_i_i4=$this1_i_i_i10;
 var $this1_i_i_i_i11=$this_addr_i_i_i_i4;
 STACKTOP=sp;return;
 case 4: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $6=$5$0;
 $exn_slot=$6;
 var $7=$5$1;
 $ehselector_slot=$7;
 var $8=$this1;
 (function() { try { __THREW__ = 0; return __ZN2UID2Ev($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val3$0=$lpad_val$0;
 var $lpad_val3$1=$sel;
 ___resumeException($lpad_val3$0)
 case 7: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2UIC2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 HEAP32[(($0)>>2)]=5408;
 return;
}
function __ZN2UID2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUID1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN4JSUID2Ev($this1);
 return;
}
function __ZN4JSUID0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 (function() { try { __THREW__ = 0; return __ZN4JSUID1Ev($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $0=$this1;
 __ZdlPv($0);
 return;
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $2=$1$0;
 $exn_slot=$2;
 var $3=$1$1;
 $ehselector_slot=$3;
 var $4=$this1;
 __ZdlPv($4);
 label=4;break;
 case 4: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val2$0=$lpad_val$0;
 var $lpad_val2$1=$sel;
 ___resumeException($lpad_val2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN4JSUI10openTabBoxEPKc($this,$label){
 var label=0;
 var $this_addr;
 var $label_addr;
 $this_addr=$this;
 $label_addr=$label;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI17openHorizontalBoxEPKc($this,$label){
 var label=0;
 var $this_addr;
 var $label_addr;
 $this_addr=$this;
 $label_addr=$label;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI15openVerticalBoxEPKc($this,$label){
 var label=0;
 var $this_addr;
 var $label_addr;
 $this_addr=$this;
 $label_addr=$label;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI8closeBoxEv($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI9addButtonEPKcPf($this,$label,$zone){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 var $this1=$this_addr;
 var $0=$label_addr;
 var $1=$zone_addr;
 __ZN4JSUI9insertMapEPKcPf($this1,$0,$1);
 return;
}
function __ZN4JSUI14addCheckButtonEPKcPf($this,$label,$zone){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 var $this1=$this_addr;
 var $0=$label_addr;
 var $1=$zone_addr;
 __ZN4JSUI9insertMapEPKcPf($this1,$0,$1);
 return;
}
function __ZN4JSUI17addVerticalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 var $init_addr;
 var $fmin_addr;
 var $fmax_addr;
 var $step_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 $init_addr=$init;
 $fmin_addr=$fmin;
 $fmax_addr=$fmax;
 $step_addr=$step;
 var $this1=$this_addr;
 var $0=$label_addr;
 var $1=$zone_addr;
 __ZN4JSUI9insertMapEPKcPf($this1,$0,$1);
 return;
}
function __ZN4JSUI19addHorizontalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 var $init_addr;
 var $fmin_addr;
 var $fmax_addr;
 var $step_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 $init_addr=$init;
 $fmin_addr=$fmin;
 $fmax_addr=$fmax;
 $step_addr=$step;
 var $this1=$this_addr;
 var $0=$label_addr;
 var $1=$zone_addr;
 __ZN4JSUI9insertMapEPKcPf($this1,$0,$1);
 return;
}
function __ZN4JSUI11addNumEntryEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 var $init_addr;
 var $fmin_addr;
 var $fmax_addr;
 var $step_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 $init_addr=$init;
 $fmin_addr=$fmin;
 $fmax_addr=$fmax;
 $step_addr=$step;
 var $this1=$this_addr;
 var $0=$label_addr;
 var $1=$zone_addr;
 __ZN4JSUI9insertMapEPKcPf($this1,$0,$1);
 return;
}
function __ZN4JSUI21addHorizontalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 var $fmin_addr;
 var $fmax_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 $fmin_addr=$fmin;
 $fmax_addr=$fmax;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI19addVerticalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax){
 var label=0;
 var $this_addr;
 var $label_addr;
 var $zone_addr;
 var $fmin_addr;
 var $fmax_addr;
 $this_addr=$this;
 $label_addr=$label;
 $zone_addr=$zone;
 $fmin_addr=$fmin;
 $fmax_addr=$fmax;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI7declareEPfPKcS2_($this,$zone,$key,$val){
 var label=0;
 var $this_addr;
 var $zone_addr;
 var $key_addr;
 var $val_addr;
 $this_addr=$this;
 $zone_addr=$zone;
 $key_addr=$key;
 $val_addr=$val;
 var $this1=$this_addr;
 return;
}
function __ZN4JSUI9insertMapEPKcPf($this,$label,$zone){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i_i_i6_i;
 var $__i2_i_i_i_i=sp;
 var $this_addr_i_i_i7_i;
 var $agg_tmp4_i_i_i=(sp)+(8);
 var $this_addr_i_i8_i;
 var $__p_addr_i_i_i;
 var $agg_tmp_i_i_i=(sp)+(16);
 var $this_addr_i9_i;
 var $__p_addr_i_i25;
 var $this_addr_i_i_i_i_i26;
 var $__p_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i27;
 var $__p_addr_i_i_i_i;
 var $this_addr_i_i_i28;
 var $__a0_addr_i_i_i;
 var $this_addr_i_i29;
 var $__a0_addr_i_i;
 var $this_addr_i30;
 var $__v_addr_i;
 var $ref_tmp_i=(sp)+(24);
 var $ref_tmp2_i=(sp)+(32);
 var $exn_slot_i;
 var $ehselector_slot_i;
 var $this_addr_i_i19;
 var $__p_addr_i_i;
 var $this_addr_i20;
 var $__p_addr_i;
 var $this_addr_i_i15;
 var $__x_addr_i_i;
 var $__y_addr_i_i;
 var $this_addr_i16;
 var $__x_addr_i;
 var $__y_addr_i;
 var $__s_addr_i_i_i;
 var $this_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $__s_addr_i_i;
 var $this_addr_i;
 var $__s_addr_i;
 var $this_addr;
 var $label_addr;
 var $zone_addr=(sp)+(48);
 var $ref_tmp=(sp)+(56);
 var $ref_tmp2=(sp)+(72);
 var $ref_tmp3=(sp)+(88);
 var $exn_slot;
 var $ehselector_slot;
 var $tmp=(sp)+(104);
 $this_addr=$this;
 $label_addr=$label;
 HEAP32[(($zone_addr)>>2)]=$zone;
 var $this1=$this_addr;
 var $uiMap=(($this1+4)|0);
 var $0=$label_addr;
 $this_addr_i=$ref_tmp3;
 $__s_addr_i=$0;
 var $this1_i=$this_addr_i;
 var $1=$__s_addr_i;
 $this_addr_i_i=$this1_i;
 $__s_addr_i_i=$1;
 var $this1_i_i=$this_addr_i_i;
 var $2=$this1_i_i;
 var $__r__i_i=(($this1_i_i)|0);
 $this_addr_i_i_i=$__r__i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 $this_addr_i_i_i_i=$this1_i_i_i;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $3=$this1_i_i_i_i;
 $this_addr_i_i_i_i_i=$3;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 var $4=$this1_i_i_i_i_i;
 $this_addr_i_i_i_i_i_i=$4;
 var $this1_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i;
 var $__first__i_i_i_i_i=(($this1_i_i_i_i_i)|0);
 var $5=$__s_addr_i_i;
 var $6=$__s_addr_i_i;
 $__s_addr_i_i_i=$6;
 var $7=$__s_addr_i_i_i;
 var $call_i_i_i=_strlen($7);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this1_i_i,$5,$call_i_i_i);
 $this_addr_i16=$ref_tmp2;
 $__x_addr_i=$ref_tmp3;
 $__y_addr_i=$zone_addr;
 var $this1_i17=$this_addr_i16;
 var $8=$__y_addr_i;
 var $9=$__x_addr_i;
 $this_addr_i_i15=$this1_i17;
 $__x_addr_i_i=$9;
 $__y_addr_i_i=$8;
 var $this1_i_i18=$this_addr_i_i15;
 var $first_i_i=(($this1_i_i18)|0);
 var $10=$__x_addr_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($first_i_i,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=15;break; }
 case 2: 
 var $second_i_i=(($this1_i_i18+12)|0);
 var $11=$__y_addr_i_i;
 var $12=HEAP32[(($11)>>2)];
 HEAP32[(($second_i_i)>>2)]=$12;
 label=3;break;
 case 3: 
 $this_addr_i20=$ref_tmp;
 $__p_addr_i=$ref_tmp2;
 var $this1_i21=$this_addr_i20;
 var $13=$__p_addr_i;
 $this_addr_i_i19=$this1_i21;
 $__p_addr_i_i=$13;
 var $this1_i_i22=$this_addr_i_i19;
 var $first_i_i23=(($this1_i_i22)|0);
 var $14=$__p_addr_i_i;
 var $first2_i_i=(($14)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($first_i_i23,$first2_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=16;break; }
 case 4: 
 var $second_i_i24=(($this1_i_i22+12)|0);
 var $15=$__p_addr_i_i;
 var $second3_i_i=(($15+12)|0);
 var $16=HEAP32[(($second3_i_i)>>2)];
 HEAP32[(($second_i_i24)>>2)]=$16;
 label=5;break;
 case 5: 
 $this_addr_i30=$uiMap;
 $__v_addr_i=$ref_tmp;
 var $this1_i31=$this_addr_i30;
 var $__tree__i=(($this1_i31)|0);
 var $17=$__v_addr_i;
 $this_addr_i_i29=$ref_tmp2_i;
 $__a0_addr_i_i=$17;
 var $this1_i_i32=$this_addr_i_i29;
 var $18=$__a0_addr_i_i;
 $this_addr_i_i_i28=$this1_i_i32;
 $__a0_addr_i_i_i=$18;
 var $this1_i_i_i33=$this_addr_i_i_i28;
 var $__cc_i_i_i=(($this1_i_i_i33)|0);
 var $19=$__a0_addr_i_i_i;
 $this_addr_i_i_i_i27=$__cc_i_i_i;
 $__p_addr_i_i_i_i=$19;
 var $this1_i_i_i_i34=$this_addr_i_i_i_i27;
 var $20=$__p_addr_i_i_i_i;
 $this_addr_i_i_i_i_i26=$this1_i_i_i_i34;
 $__p_addr_i_i_i_i_i=$20;
 var $this1_i_i_i_i_i35=$this_addr_i_i_i_i_i26;
 var $first_i_i_i_i_i=(($this1_i_i_i_i_i35)|0);
 var $21=$__p_addr_i_i_i_i_i;
 var $first2_i_i_i_i_i=(($21)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($first_i_i_i_i_i,$first2_i_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 var $second_i_i_i_i_i=(($this1_i_i_i_i_i35+12)|0);
 var $22=$__p_addr_i_i_i_i_i;
 var $second3_i_i_i_i_i=(($22+12)|0);
 var $23=HEAP32[(($second3_i_i_i_i_i)>>2)];
 HEAP32[(($second_i_i_i_i_i)>>2)]=$23;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_($ref_tmp_i,$__tree__i,$ref_tmp2_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 $this_addr_i9_i=$tmp;
 $__p_addr_i_i25=$ref_tmp_i;
 var $this1_i10_i=$this_addr_i9_i;
 var $24=$__p_addr_i_i25;
 $this_addr_i_i8_i=$this1_i10_i;
 $__p_addr_i_i_i=$24;
 var $this1_i_i11_i=$this_addr_i_i8_i;
 var $first_i_i_i=(($this1_i_i11_i)|0);
 var $25=$__p_addr_i_i_i;
 var $first2_i_i_i=(($25)|0);
 var $26=$agg_tmp_i_i_i;
 var $27=$first2_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];
 var $tmp_i_i_i=$agg_tmp4_i_i_i;
 var $tmp5_i_i_i=$agg_tmp_i_i_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i)]=HEAP8[($tmp5_i_i_i)];HEAP8[((($tmp_i_i_i)+(1))|0)]=HEAP8[((($tmp5_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i)+(2))|0)]=HEAP8[((($tmp5_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i)+(3))|0)]=HEAP8[((($tmp5_i_i_i)+(3))|0)];
 $this_addr_i_i_i7_i=$first_i_i_i;
 var $this1_i_i_i12_i=$this_addr_i_i_i7_i;
 var $tmp_i_i_i_i=$__i2_i_i_i_i;
 var $tmp3_i_i_i_i=$agg_tmp4_i_i_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i_i_i)]=HEAP8[($tmp3_i_i_i_i)];HEAP8[((($tmp_i_i_i_i)+(1))|0)]=HEAP8[((($tmp3_i_i_i_i)+(1))|0)];HEAP8[((($tmp_i_i_i_i)+(2))|0)]=HEAP8[((($tmp3_i_i_i_i)+(2))|0)];HEAP8[((($tmp_i_i_i_i)+(3))|0)]=HEAP8[((($tmp3_i_i_i_i)+(3))|0)];
 $this_addr_i_i_i_i6_i=$this1_i_i_i12_i;
 var $this1_i_i_i_i13_i=$this_addr_i_i_i_i6_i;
 var $__i__i_i_i_i_i=(($this1_i_i_i_i13_i)|0);
 var $28=$__i__i_i_i_i_i;
 var $29=$__i2_i_i_i_i;
 assert(4 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];
 var $second_i_i_i=(($this1_i_i11_i+4)|0);
 var $30=$__p_addr_i_i_i;
 var $second3_i_i_i=(($30+4)|0);
 var $31=HEAP8[($second3_i_i_i)];
 var $tobool_i_i_i=(($31)&1);
 var $frombool_i_i_i=($tobool_i_i_i&1);
 HEAP8[($second_i_i_i)]=$frombool_i_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp2_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=17;break; }
 case 8: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=$32$0;
 $exn_slot_i=$33;
 var $34=$32$1;
 $ehselector_slot_i=$34;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp2_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $exn_i=$exn_slot_i;
 var $sel_i=$ehselector_slot_i;
 var $lpad_val_i$0=$exn_i;
 var $lpad_val_i$1=0;
 var $lpad_val5_i$0=$lpad_val_i$0;
 var $lpad_val5_i$1=$sel_i;
 var $eh_lpad_body$1=$lpad_val5_i$1;var $eh_lpad_body$0=$lpad_val5_i$0;label=18;break;
 case 10: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1,0); var $35$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 11: 
 label=12;break;
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=16;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp3);
 STACKTOP=sp;return;
 case 15: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1); var $36$1 = tempRet0;
 var $37=$36$0;
 $exn_slot=$37;
 var $38=$36$1;
 $ehselector_slot=$38;
 label=22;break;
 case 16: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 var $40=$39$0;
 $exn_slot=$40;
 var $41=$39$1;
 $ehselector_slot=$41;
 label=20;break;
 case 17: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 var $eh_lpad_body$1=$42$1;var $eh_lpad_body$0=$42$0;label=18;break;
 case 18: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $43=$eh_lpad_body$0;
 $exn_slot=$43;
 var $44=$eh_lpad_body$1;
 $ehselector_slot=$44;
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=25;break; }
 case 19: 
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($ref_tmp2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=25;break; }
 case 21: 
 label=22;break;
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=25;break; }
 case 23: 
 label=24;break;
 case 24: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val14$0=$lpad_val$0;
 var $lpad_val14$1=$sel;
 ___resumeException($lpad_val14$0)
 case 25: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1,0); var $45$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this1);
 return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this1);
 return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $first=(($this1)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($first);
 return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $first=(($this1)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($first);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i13_i_i_i197;
 var $this_addr_i14_i_i_i198;
 var $this_addr_i_i8_i_i_i199;
 var $this_addr_i9_i_i_i200;
 var $_addr_i_i7_i_i_i_i201;
 var $__p_addr_i_i8_i_i_i_i202;
 var $agg_tmp1_i_i_i_i_i203=sp;
 var $__a_addr_i9_i_i_i_i204;
 var $__p_addr_i10_i_i_i_i205;
 var $agg_tmp_i_i_i_i_i206=(sp)+(8);
 var $ref_tmp_i_i_i_i_i207=(sp)+(16);
 var $this_addr_i_i_i_i_i_i208;
 var $__p_addr_i_i_i_i_i_i209;
 var $_addr_i_i_i_i_i_i210;
 var $__a_addr_i_i_i_i_i211;
 var $__p_addr_i_i_i_i_i212;
 var $__n_addr_i_i_i_i_i213;
 var $__x_addr_i_i_i_i_i214;
 var $this_addr_i6_i_i_i215;
 var $__p_addr_i_i_i_i216;
 var $exn_slot_i_i_i_i217;
 var $ehselector_slot_i_i_i_i218;
 var $this_addr_i_i_i_i_i219;
 var $this_addr_i_i_i_i220;
 var $this_addr_i_i_i221;
 var $__p_addr_i_i_i222;
 var $__tmp_i_i_i223;
 var $this_addr_i_i224;
 var $this_addr_i225;
 var $this_addr_i_i4_i;
 var $this_addr_i5_i;
 var $this_addr_i_i_i189;
 var $this_addr_i_i190;
 var $this_addr_i191;
 var $__t_i;
 var $this_addr_i_i_i183;
 var $this_addr_i_i184;
 var $this_addr_i185;
 var $this_addr_i_i13_i_i_i117;
 var $this_addr_i14_i_i_i118;
 var $this_addr_i_i8_i_i_i119;
 var $this_addr_i9_i_i_i120;
 var $_addr_i_i7_i_i_i_i121;
 var $__p_addr_i_i8_i_i_i_i122;
 var $agg_tmp1_i_i_i_i_i123=(sp)+(24);
 var $__a_addr_i9_i_i_i_i124;
 var $__p_addr_i10_i_i_i_i125;
 var $agg_tmp_i_i_i_i_i126=(sp)+(32);
 var $ref_tmp_i_i_i_i_i127=(sp)+(40);
 var $this_addr_i_i_i_i_i_i128;
 var $__p_addr_i_i_i_i_i_i129;
 var $_addr_i_i_i_i_i_i130;
 var $__a_addr_i_i_i_i_i131;
 var $__p_addr_i_i_i_i_i132;
 var $__n_addr_i_i_i_i_i133;
 var $__x_addr_i_i_i_i_i134;
 var $this_addr_i6_i_i_i135;
 var $__p_addr_i_i_i_i136;
 var $exn_slot_i_i_i_i137;
 var $ehselector_slot_i_i_i_i138;
 var $this_addr_i_i_i_i_i139;
 var $this_addr_i_i_i_i140;
 var $this_addr_i_i_i141;
 var $__p_addr_i_i_i142;
 var $__tmp_i_i_i143;
 var $this_addr_i_i144;
 var $this_addr_i145;
 var $this_addr_i_i13_i_i_i51;
 var $this_addr_i14_i_i_i52;
 var $this_addr_i_i8_i_i_i53;
 var $this_addr_i9_i_i_i54;
 var $_addr_i_i7_i_i_i_i55;
 var $__p_addr_i_i8_i_i_i_i56;
 var $agg_tmp1_i_i_i_i_i57=(sp)+(48);
 var $__a_addr_i9_i_i_i_i58;
 var $__p_addr_i10_i_i_i_i59;
 var $agg_tmp_i_i_i_i_i60=(sp)+(56);
 var $ref_tmp_i_i_i_i_i61=(sp)+(64);
 var $this_addr_i_i_i_i_i_i62;
 var $__p_addr_i_i_i_i_i_i63;
 var $_addr_i_i_i_i_i_i64;
 var $__a_addr_i_i_i_i_i65;
 var $__p_addr_i_i_i_i_i66;
 var $__n_addr_i_i_i_i_i67;
 var $__x_addr_i_i_i_i_i68;
 var $this_addr_i6_i_i_i69;
 var $__p_addr_i_i_i_i70;
 var $exn_slot_i_i_i_i71;
 var $ehselector_slot_i_i_i_i72;
 var $this_addr_i_i_i_i_i73;
 var $this_addr_i_i_i_i74;
 var $this_addr_i_i_i75;
 var $__p_addr_i_i_i76;
 var $__tmp_i_i_i77;
 var $this_addr_i_i78;
 var $this_addr_i79;
 var $this_addr_i_i4_i_i_i;
 var $this_addr_i5_i_i_i;
 var $this_addr_i_i_i21_i_i;
 var $this_addr_i_i22_i_i;
 var $this_addr_i23_i_i;
 var $__t_i_i_i;
 var $this_addr_i17_i_i;
 var $this_addr_i_i_i10_i_i;
 var $this_addr_i_i11_i_i;
 var $this_addr_i12_i_i;
 var $__t_addr_i_i_i35;
 var $__t_addr_i5_i_i_i_i;
 var $__t_addr_i3_i_i_i_i_i;
 var $__t_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i36;
 var $__t1_addr_i_i_i_i_i=(sp)+(72);
 var $agg_tmp3_i_i_i_i=(sp)+(80);
 var $__t_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i37;
 var $__t1_addr_i_i_i_i=(sp)+(88);
 var $agg_tmp_i_i_i_i=(sp)+(96);
 var $__t22_i_i_i=(sp)+(104);
 var $this_addr_i8_i_i;
 var $__t1_addr_i_i_i;
 var $agg_tmp6_i_i=(sp)+(112);
 var $this_addr_i_i_i38;
 var $this_addr_i_i39;
 var $agg_tmp_i_i=(sp)+(120);
 var $__u2_i=(sp)+(128);
 var $this_addr_i40;
 var $agg_tmp32=(sp)+(136);
 var $this_addr_i_i_i26;
 var $__t_addr_i_i_i;
 var $this_addr_i_i27;
 var $__t_addr_i_i;
 var $this_addr_i28;
 var $this_addr_i24;
 var $this_addr_i_i13_i_i_i;
 var $this_addr_i14_i_i_i;
 var $this_addr_i_i8_i_i_i;
 var $this_addr_i9_i_i_i;
 var $_addr_i_i7_i_i_i_i;
 var $__p_addr_i_i8_i_i_i_i;
 var $agg_tmp1_i_i_i_i_i=(sp)+(144);
 var $__a_addr_i9_i_i_i_i;
 var $__p_addr_i10_i_i_i_i;
 var $agg_tmp_i_i_i_i_i=(sp)+(152);
 var $ref_tmp_i_i_i_i_i=(sp)+(160);
 var $this_addr_i_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i_i;
 var $_addr_i_i_i_i_i_i;
 var $__a_addr_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i;
 var $__n_addr_i_i_i_i_i;
 var $__x_addr_i_i_i_i_i;
 var $this_addr_i6_i_i_i;
 var $__p_addr_i_i_i_i;
 var $exn_slot_i_i_i_i;
 var $ehselector_slot_i_i_i_i;
 var $this_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i18;
 var $__p_addr_i_i_i;
 var $__tmp_i_i_i;
 var $this_addr_i_i19;
 var $this_addr_i20;
 var $this_addr_i_i14;
 var $__p_addr_i_i;
 var $this_addr_i15;
 var $__p_addr_i;
 var $this_addr_i_i12;
 var $__x_addr_i_i;
 var $__y_addr_i_i;
 var $this_addr_i;
 var $__x_addr_i;
 var $__y_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $this_addr;
 var $__v_addr;
 var $__parent=(sp)+(168);
 var $__child;
 var $__r;
 var $__inserted=(sp)+(176);
 var $tmp=(sp)+(184);
 var $__h=(sp)+(192);
 var $agg_tmp=(sp)+(208);
 var $temp_lvalue=(sp)+(216);
 var $exn_slot;
 var $ehselector_slot;
 var $ref_tmp=(sp)+(232);
 $this_addr=$this;
 $__v_addr=$__v;
 var $this1=$this_addr;
 var $0=$__v_addr;
 var $call=__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this1,$__parent,$0);
 $__child=$call;
 var $1=$__child;
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 $__r=$3;
 HEAP8[($__inserted)]=0;
 var $4=$__child;
 var $5=HEAP32[(($4)>>2)];
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $6=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$6;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 $this_addr_i24=$tmp;
 var $this1_i25=$this_addr_i24;
 var $cmp=($5|0)==0;
 if($cmp){label=2;break;}else{label=42;break;}
 case 2: 
 var $7=$__v_addr;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($temp_lvalue,$this1,$7);
 $this_addr_i28=$temp_lvalue;
 var $this1_i29=$this_addr_i28;
 $this_addr_i_i27=$agg_tmp;
 $__t_addr_i_i=$this1_i29;
 var $this1_i_i30=$this_addr_i_i27;
 var $8=$__t_addr_i_i;
 $this_addr_i_i_i26=$this1_i_i30;
 $__t_addr_i_i_i=$8;
 var $this1_i_i_i31=$this_addr_i_i_i26;
 var $9=(($this1_i_i_i31)|0);
 var $10=$__t_addr_i_i_i;
 HEAP32[(($9)>>2)]=$10;
 label=3;break;
 case 3: 
 var $tmp33=$agg_tmp32;
 var $tmp34=$agg_tmp;
 assert(4 % 1 === 0);HEAP8[($tmp33)]=HEAP8[($tmp34)];HEAP8[((($tmp33)+(1))|0)]=HEAP8[((($tmp34)+(1))|0)];HEAP8[((($tmp33)+(2))|0)]=HEAP8[((($tmp34)+(2))|0)];HEAP8[((($tmp33)+(3))|0)]=HEAP8[((($tmp34)+(3))|0)];
 $this_addr_i40=$__h;
 var $this1_i41=$this_addr_i40;
 var $tmp_i=$__u2_i;
 var $tmp3_i=$agg_tmp32;
 assert(4 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp3_i)];HEAP8[((($tmp_i)+(1))|0)]=HEAP8[((($tmp3_i)+(1))|0)];HEAP8[((($tmp_i)+(2))|0)]=HEAP8[((($tmp3_i)+(2))|0)];HEAP8[((($tmp_i)+(3))|0)]=HEAP8[((($tmp3_i)+(3))|0)];
 $this_addr_i_i39=$this1_i41;
 var $this1_i_i42=$this_addr_i_i39;
 var $__ptr__i_i43=(($this1_i_i42)|0);
 $this_addr_i_i_i38=$__u2_i;
 var $this1_i_i_i44=$this_addr_i_i_i38;
 var $t__i_i_i=(($this1_i_i_i44)|0);
 var $ref_i_i_i=HEAP32[(($t__i_i_i)>>2)];
 $this_addr_i23_i_i=$ref_i_i_i;
 var $this1_i24_i_i=$this_addr_i23_i_i;
 var $__ptr__i25_i_i=(($this1_i24_i_i)|0);
 $this_addr_i_i22_i_i=$__ptr__i25_i_i;
 var $this1_i_i26_i_i=$this_addr_i_i22_i_i;
 var $11=$this1_i_i26_i_i;
 $this_addr_i_i_i21_i_i=$11;
 var $this1_i_i_i27_i_i=$this_addr_i_i_i21_i_i;
 var $__first__i_i_i28_i_i=(($this1_i_i_i27_i_i)|0);
 var $12=HEAP32[(($__first__i_i_i28_i_i)>>2)];
 $__t_i_i_i=$12;
 var $__ptr_2_i_i_i45=(($this1_i24_i_i)|0);
 $this_addr_i5_i_i_i=$__ptr_2_i_i_i45;
 var $this1_i6_i_i_i=$this_addr_i5_i_i_i;
 var $13=$this1_i6_i_i_i;
 $this_addr_i_i4_i_i_i=$13;
 var $this1_i_i7_i_i_i=$this_addr_i_i4_i_i_i;
 var $__first__i_i8_i_i_i=(($this1_i_i7_i_i_i)|0);
 HEAP32[(($__first__i_i8_i_i_i)>>2)]=0;
 var $14=$__t_i_i_i;
 $this_addr_i17_i_i=$__u2_i;
 var $this1_i18_i_i=$this_addr_i17_i_i;
 var $t__i19_i_i=(($this1_i18_i_i)|0);
 var $ref_i20_i_i=HEAP32[(($t__i19_i_i)>>2)];
 $this_addr_i12_i_i=$ref_i20_i_i;
 var $this1_i13_i_i=$this_addr_i12_i_i;
 var $__ptr__i_i_i46=(($this1_i13_i_i)|0);
 $this_addr_i_i11_i_i=$__ptr__i_i_i46;
 var $this1_i_i14_i_i=$this_addr_i_i11_i_i;
 var $15=$this1_i_i14_i_i;
 $this_addr_i_i_i10_i_i=$15;
 var $this1_i_i_i15_i_i=$this_addr_i_i_i10_i_i;
 var $__second__i_i_i16_i_i=(($this1_i_i_i15_i_i+4)|0);
 $__t_addr_i_i_i35=$__second__i_i_i16_i_i;
 var $16=$__t_addr_i_i_i35;
 var $17=$agg_tmp_i_i;
 var $18=$16;
 assert(8 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
 var $tmp_i_i=$agg_tmp6_i_i;
 var $tmp7_i_i=$agg_tmp_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp7_i_i, 8)|0);
 $this_addr_i8_i_i=$__ptr__i_i43;
 $__t1_addr_i_i_i=$14;
 var $this1_i9_i_i=$this_addr_i8_i_i;
 var $19=$__t1_addr_i_i_i;
 var $tmp_i_i_i=$__t22_i_i_i;
 var $tmp3_i_i_i=$agg_tmp6_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp3_i_i_i, 8)|0);
 $this_addr_i_i_i_i37=$this1_i9_i_i;
 HEAP32[(($__t1_addr_i_i_i_i)>>2)]=$19;
 var $this1_i_i_i_i47=$this_addr_i_i_i_i37;
 var $20=$this1_i_i_i_i47;
 $__t_addr_i_i_i_i_i=$__t1_addr_i_i_i_i;
 var $21=$__t_addr_i_i_i_i_i;
 var $22=HEAP32[(($21)>>2)];
 $__t_addr_i5_i_i_i_i=$__t22_i_i_i;
 var $23=$__t_addr_i5_i_i_i_i;
 var $24=$agg_tmp_i_i_i_i;
 var $25=$23;
 assert(8 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];
 var $tmp_i_i_i_i=$agg_tmp3_i_i_i_i;
 var $tmp4_i_i_i_i=$agg_tmp_i_i_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp4_i_i_i_i, 8)|0);
 $this_addr_i_i_i_i_i36=$20;
 HEAP32[(($__t1_addr_i_i_i_i_i)>>2)]=$22;
 var $this1_i_i_i_i_i48=$this_addr_i_i_i_i_i36;
 var $__first__i_i_i_i_i49=(($this1_i_i_i_i_i48)|0);
 $__t_addr_i_i_i_i_i_i=$__t1_addr_i_i_i_i_i;
 var $26=$__t_addr_i_i_i_i_i_i;
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($__first__i_i_i_i_i49)>>2)]=$27;
 var $__second__i_i_i_i_i50=(($this1_i_i_i_i_i48+4)|0);
 $__t_addr_i3_i_i_i_i_i=$agg_tmp3_i_i_i_i;
 var $28=$__t_addr_i3_i_i_i_i_i;
 var $29=$__second__i_i_i_i_i50;
 var $30=$28;
 assert(8 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
 label=4;break;
 case 4: 
 $this_addr_i145=$temp_lvalue;
 var $this1_i146=$this_addr_i145;
 $this_addr_i_i144=$this1_i146;
 var $this1_i_i147=$this_addr_i_i144;
 $this_addr_i_i_i141=$this1_i_i147;
 $__p_addr_i_i_i142=0;
 var $this1_i_i_i148=$this_addr_i_i_i141;
 var $__ptr__i_i_i149=(($this1_i_i_i148)|0);
 $this_addr_i_i_i_i140=$__ptr__i_i_i149;
 var $this1_i_i_i_i150=$this_addr_i_i_i_i140;
 var $31=$this1_i_i_i_i150;
 $this_addr_i_i_i_i_i139=$31;
 var $this1_i_i_i_i_i151=$this_addr_i_i_i_i_i139;
 var $__first__i_i_i_i_i152=(($this1_i_i_i_i_i151)|0);
 var $32=HEAP32[(($__first__i_i_i_i_i152)>>2)];
 $__tmp_i_i_i143=$32;
 var $33=$__p_addr_i_i_i142;
 var $__ptr_2_i_i_i153=(($this1_i_i_i148)|0);
 $this_addr_i9_i_i_i120=$__ptr_2_i_i_i153;
 var $this1_i10_i_i_i154=$this_addr_i9_i_i_i120;
 var $34=$this1_i10_i_i_i154;
 $this_addr_i_i8_i_i_i119=$34;
 var $this1_i_i11_i_i_i155=$this_addr_i_i8_i_i_i119;
 var $__first__i_i12_i_i_i156=(($this1_i_i11_i_i_i155)|0);
 HEAP32[(($__first__i_i12_i_i_i156)>>2)]=$33;
 var $35=$__tmp_i_i_i143;
 var $tobool_i_i_i157=($35|0)!=0;
 if($tobool_i_i_i157){label=5;break;}else{label=12;break;}
 case 5: 
 var $__ptr_4_i_i_i158=(($this1_i_i_i148)|0);
 $this_addr_i14_i_i_i118=$__ptr_4_i_i_i158;
 var $this1_i15_i_i_i159=$this_addr_i14_i_i_i118;
 var $36=$this1_i15_i_i_i159;
 $this_addr_i_i13_i_i_i117=$36;
 var $this1_i_i16_i_i_i160=$this_addr_i_i13_i_i_i117;
 var $__second__i_i_i_i_i161=(($this1_i_i16_i_i_i160+4)|0);
 var $37=$__tmp_i_i_i143;
 $this_addr_i6_i_i_i135=$__second__i_i_i_i_i161;
 $__p_addr_i_i_i_i136=$37;
 var $this1_i7_i_i_i162=$this_addr_i6_i_i_i135;
 var $__value_constructed_i_i_i_i163=(($this1_i7_i_i_i162+4)|0);
 var $38=HEAP8[($__value_constructed_i_i_i_i163)];
 var $tobool_i_i_i_i164=(($38)&1);
 if($tobool_i_i_i_i164){label=6;break;}else{label=9;break;}
 case 6: 
 var $__na__i_i_i_i166=(($this1_i7_i_i_i162)|0);
 var $ref_i_i_i_i167=HEAP32[(($__na__i_i_i_i166)>>2)];
 var $39=$__p_addr_i_i_i_i136;
 var $__value__i_i_i_i168=(($39+16)|0);
 $__x_addr_i_i_i_i_i134=$__value__i_i_i_i168;
 var $40=$__x_addr_i_i_i_i_i134;
 var $41=$40;
 var $42=$41;
 $__a_addr_i9_i_i_i_i124=$ref_i_i_i_i167;
 $__p_addr_i10_i_i_i_i125=$42;
 var $43=$ref_tmp_i_i_i_i_i127;
 var $44=$__a_addr_i9_i_i_i_i124;
 var $45=$__p_addr_i10_i_i_i_i125;
 var $tmp_i_i_i_i_i169=$agg_tmp1_i_i_i_i_i123;
 var $tmp2_i_i_i_i_i170=$agg_tmp_i_i_i_i_i126;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i169)]=HEAP8[($tmp2_i_i_i_i_i170)];
 $_addr_i_i7_i_i_i_i121=$44;
 $__p_addr_i_i8_i_i_i_i122=$45;
 var $46=$__p_addr_i_i8_i_i_i_i122;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 label=9;break;
 case 8: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1); var $47$1 = tempRet0;
 var $48=$47$0;
 $exn_slot_i_i_i_i137=$48;
 var $49=$47$1;
 $ehselector_slot_i_i_i_i138=$49;
 var $exn_i_i_i_i173=$exn_slot_i_i_i_i137;
 ___cxa_call_unexpected($exn_i_i_i_i173);
 throw "Reached an unreachable!";
 case 9: 
 var $50=$__p_addr_i_i_i_i136;
 var $tobool2_i_i_i_i175=($50|0)!=0;
 if($tobool2_i_i_i_i175){label=10;break;}else{label=11;break;}
 case 10: 
 var $__na_4_i_i_i_i177=(($this1_i7_i_i_i162)|0);
 var $ref5_i_i_i_i178=HEAP32[(($__na_4_i_i_i_i177)>>2)];
 var $51=$__p_addr_i_i_i_i136;
 $__a_addr_i_i_i_i_i131=$ref5_i_i_i_i178;
 $__p_addr_i_i_i_i_i132=$51;
 $__n_addr_i_i_i_i_i133=1;
 var $52=$__a_addr_i_i_i_i_i131;
 var $53=$__p_addr_i_i_i_i_i132;
 var $54=$__n_addr_i_i_i_i_i133;
 $this_addr_i_i_i_i_i_i128=$52;
 $__p_addr_i_i_i_i_i_i129=$53;
 $_addr_i_i_i_i_i_i130=$54;
 var $this1_i_i_i_i_i_i179=$this_addr_i_i_i_i_i_i128;
 var $55=$__p_addr_i_i_i_i_i_i129;
 var $56=$55;
 __ZdlPv($56);
 label=11;break;
 case 11: 
 label=12;break;
 case 12: 
 var $57=HEAP32[(($__parent)>>2)];
 var $58=$__child;
 $this_addr_i185=$__h;
 var $this1_i186=$this_addr_i185;
 var $__ptr__i=(($this1_i186)|0);
 $this_addr_i_i184=$__ptr__i;
 var $this1_i_i187=$this_addr_i_i184;
 var $59=$this1_i_i187;
 $this_addr_i_i_i183=$59;
 var $this1_i_i_i188=$this_addr_i_i_i183;
 var $__first__i_i_i=(($this1_i_i_i188)|0);
 var $60=HEAP32[(($__first__i_i_i)>>2)];
 var $61=$60;
 (function() { try { __THREW__ = 0; return __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($this1,$57,$58,$61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 $this_addr_i191=$__h;
 var $this1_i192=$this_addr_i191;
 var $__ptr__i193=(($this1_i192)|0);
 $this_addr_i_i190=$__ptr__i193;
 var $this1_i_i194=$this_addr_i_i190;
 var $62=$this1_i_i194;
 $this_addr_i_i_i189=$62;
 var $this1_i_i_i195=$this_addr_i_i_i189;
 var $__first__i_i_i196=(($this1_i_i_i195)|0);
 var $63=HEAP32[(($__first__i_i_i196)>>2)];
 $__t_i=$63;
 var $__ptr_2_i=(($this1_i192)|0);
 $this_addr_i5_i=$__ptr_2_i;
 var $this1_i6_i=$this_addr_i5_i;
 var $64=$this1_i6_i;
 $this_addr_i_i4_i=$64;
 var $this1_i_i7_i=$this_addr_i_i4_i;
 var $__first__i_i8_i=(($this1_i_i7_i)|0);
 HEAP32[(($__first__i_i8_i)>>2)]=0;
 var $65=$__t_i;
 $__r=$65;
 HEAP8[($__inserted)]=1;
 $this_addr_i225=$__h;
 var $this1_i226=$this_addr_i225;
 $this_addr_i_i224=$this1_i226;
 var $this1_i_i227=$this_addr_i_i224;
 $this_addr_i_i_i221=$this1_i_i227;
 $__p_addr_i_i_i222=0;
 var $this1_i_i_i228=$this_addr_i_i_i221;
 var $__ptr__i_i_i229=(($this1_i_i_i228)|0);
 $this_addr_i_i_i_i220=$__ptr__i_i_i229;
 var $this1_i_i_i_i230=$this_addr_i_i_i_i220;
 var $66=$this1_i_i_i_i230;
 $this_addr_i_i_i_i_i219=$66;
 var $this1_i_i_i_i_i231=$this_addr_i_i_i_i_i219;
 var $__first__i_i_i_i_i232=(($this1_i_i_i_i_i231)|0);
 var $67=HEAP32[(($__first__i_i_i_i_i232)>>2)];
 $__tmp_i_i_i223=$67;
 var $68=$__p_addr_i_i_i222;
 var $__ptr_2_i_i_i233=(($this1_i_i_i228)|0);
 $this_addr_i9_i_i_i200=$__ptr_2_i_i_i233;
 var $this1_i10_i_i_i234=$this_addr_i9_i_i_i200;
 var $69=$this1_i10_i_i_i234;
 $this_addr_i_i8_i_i_i199=$69;
 var $this1_i_i11_i_i_i235=$this_addr_i_i8_i_i_i199;
 var $__first__i_i12_i_i_i236=(($this1_i_i11_i_i_i235)|0);
 HEAP32[(($__first__i_i12_i_i_i236)>>2)]=$68;
 var $70=$__tmp_i_i_i223;
 var $tobool_i_i_i237=($70|0)!=0;
 if($tobool_i_i_i237){label=14;break;}else{label=21;break;}
 case 14: 
 var $__ptr_4_i_i_i238=(($this1_i_i_i228)|0);
 $this_addr_i14_i_i_i198=$__ptr_4_i_i_i238;
 var $this1_i15_i_i_i239=$this_addr_i14_i_i_i198;
 var $71=$this1_i15_i_i_i239;
 $this_addr_i_i13_i_i_i197=$71;
 var $this1_i_i16_i_i_i240=$this_addr_i_i13_i_i_i197;
 var $__second__i_i_i_i_i241=(($this1_i_i16_i_i_i240+4)|0);
 var $72=$__tmp_i_i_i223;
 $this_addr_i6_i_i_i215=$__second__i_i_i_i_i241;
 $__p_addr_i_i_i_i216=$72;
 var $this1_i7_i_i_i242=$this_addr_i6_i_i_i215;
 var $__value_constructed_i_i_i_i243=(($this1_i7_i_i_i242+4)|0);
 var $73=HEAP8[($__value_constructed_i_i_i_i243)];
 var $tobool_i_i_i_i244=(($73)&1);
 if($tobool_i_i_i_i244){label=15;break;}else{label=18;break;}
 case 15: 
 var $__na__i_i_i_i246=(($this1_i7_i_i_i242)|0);
 var $ref_i_i_i_i247=HEAP32[(($__na__i_i_i_i246)>>2)];
 var $74=$__p_addr_i_i_i_i216;
 var $__value__i_i_i_i248=(($74+16)|0);
 $__x_addr_i_i_i_i_i214=$__value__i_i_i_i248;
 var $75=$__x_addr_i_i_i_i_i214;
 var $76=$75;
 var $77=$76;
 $__a_addr_i9_i_i_i_i204=$ref_i_i_i_i247;
 $__p_addr_i10_i_i_i_i205=$77;
 var $78=$ref_tmp_i_i_i_i_i207;
 var $79=$__a_addr_i9_i_i_i_i204;
 var $80=$__p_addr_i10_i_i_i_i205;
 var $tmp_i_i_i_i_i249=$agg_tmp1_i_i_i_i_i203;
 var $tmp2_i_i_i_i_i250=$agg_tmp_i_i_i_i_i206;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i249)]=HEAP8[($tmp2_i_i_i_i_i250)];
 $_addr_i_i7_i_i_i_i201=$79;
 $__p_addr_i_i8_i_i_i_i202=$80;
 var $81=$__p_addr_i_i8_i_i_i_i202;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 label=18;break;
 case 17: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1); var $82$1 = tempRet0;
 var $83=$82$0;
 $exn_slot_i_i_i_i217=$83;
 var $84=$82$1;
 $ehselector_slot_i_i_i_i218=$84;
 var $exn_i_i_i_i253=$exn_slot_i_i_i_i217;
 ___cxa_call_unexpected($exn_i_i_i_i253);
 throw "Reached an unreachable!";
 case 18: 
 var $85=$__p_addr_i_i_i_i216;
 var $tobool2_i_i_i_i255=($85|0)!=0;
 if($tobool2_i_i_i_i255){label=19;break;}else{label=20;break;}
 case 19: 
 var $__na_4_i_i_i_i257=(($this1_i7_i_i_i242)|0);
 var $ref5_i_i_i_i258=HEAP32[(($__na_4_i_i_i_i257)>>2)];
 var $86=$__p_addr_i_i_i_i216;
 $__a_addr_i_i_i_i_i211=$ref5_i_i_i_i258;
 $__p_addr_i_i_i_i_i212=$86;
 $__n_addr_i_i_i_i_i213=1;
 var $87=$__a_addr_i_i_i_i_i211;
 var $88=$__p_addr_i_i_i_i_i212;
 var $89=$__n_addr_i_i_i_i_i213;
 $this_addr_i_i_i_i_i_i208=$87;
 $__p_addr_i_i_i_i_i_i209=$88;
 $_addr_i_i_i_i_i_i210=$89;
 var $this1_i_i_i_i_i_i259=$this_addr_i_i_i_i_i_i208;
 var $90=$__p_addr_i_i_i_i_i_i209;
 var $91=$90;
 __ZdlPv($91);
 label=20;break;
 case 20: 
 label=21;break;
 case 21: 
 label=42;break;
 case 22: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $93=$92$0;
 $exn_slot=$93;
 var $94=$92$1;
 $ehselector_slot=$94;
 $this_addr_i79=$temp_lvalue;
 var $this1_i80=$this_addr_i79;
 $this_addr_i_i78=$this1_i80;
 var $this1_i_i81=$this_addr_i_i78;
 $this_addr_i_i_i75=$this1_i_i81;
 $__p_addr_i_i_i76=0;
 var $this1_i_i_i82=$this_addr_i_i_i75;
 var $__ptr__i_i_i83=(($this1_i_i_i82)|0);
 $this_addr_i_i_i_i74=$__ptr__i_i_i83;
 var $this1_i_i_i_i84=$this_addr_i_i_i_i74;
 var $95=$this1_i_i_i_i84;
 $this_addr_i_i_i_i_i73=$95;
 var $this1_i_i_i_i_i85=$this_addr_i_i_i_i_i73;
 var $__first__i_i_i_i_i86=(($this1_i_i_i_i_i85)|0);
 var $96=HEAP32[(($__first__i_i_i_i_i86)>>2)];
 $__tmp_i_i_i77=$96;
 var $97=$__p_addr_i_i_i76;
 var $__ptr_2_i_i_i87=(($this1_i_i_i82)|0);
 $this_addr_i9_i_i_i54=$__ptr_2_i_i_i87;
 var $this1_i10_i_i_i88=$this_addr_i9_i_i_i54;
 var $98=$this1_i10_i_i_i88;
 $this_addr_i_i8_i_i_i53=$98;
 var $this1_i_i11_i_i_i89=$this_addr_i_i8_i_i_i53;
 var $__first__i_i12_i_i_i90=(($this1_i_i11_i_i_i89)|0);
 HEAP32[(($__first__i_i12_i_i_i90)>>2)]=$97;
 var $99=$__tmp_i_i_i77;
 var $tobool_i_i_i91=($99|0)!=0;
 if($tobool_i_i_i91){label=23;break;}else{label=30;break;}
 case 23: 
 var $__ptr_4_i_i_i92=(($this1_i_i_i82)|0);
 $this_addr_i14_i_i_i52=$__ptr_4_i_i_i92;
 var $this1_i15_i_i_i93=$this_addr_i14_i_i_i52;
 var $100=$this1_i15_i_i_i93;
 $this_addr_i_i13_i_i_i51=$100;
 var $this1_i_i16_i_i_i94=$this_addr_i_i13_i_i_i51;
 var $__second__i_i_i_i_i95=(($this1_i_i16_i_i_i94+4)|0);
 var $101=$__tmp_i_i_i77;
 $this_addr_i6_i_i_i69=$__second__i_i_i_i_i95;
 $__p_addr_i_i_i_i70=$101;
 var $this1_i7_i_i_i96=$this_addr_i6_i_i_i69;
 var $__value_constructed_i_i_i_i97=(($this1_i7_i_i_i96+4)|0);
 var $102=HEAP8[($__value_constructed_i_i_i_i97)];
 var $tobool_i_i_i_i98=(($102)&1);
 if($tobool_i_i_i_i98){label=24;break;}else{label=27;break;}
 case 24: 
 var $__na__i_i_i_i100=(($this1_i7_i_i_i96)|0);
 var $ref_i_i_i_i101=HEAP32[(($__na__i_i_i_i100)>>2)];
 var $103=$__p_addr_i_i_i_i70;
 var $__value__i_i_i_i102=(($103+16)|0);
 $__x_addr_i_i_i_i_i68=$__value__i_i_i_i102;
 var $104=$__x_addr_i_i_i_i_i68;
 var $105=$104;
 var $106=$105;
 $__a_addr_i9_i_i_i_i58=$ref_i_i_i_i101;
 $__p_addr_i10_i_i_i_i59=$106;
 var $107=$ref_tmp_i_i_i_i_i61;
 var $108=$__a_addr_i9_i_i_i_i58;
 var $109=$__p_addr_i10_i_i_i_i59;
 var $tmp_i_i_i_i_i103=$agg_tmp1_i_i_i_i_i57;
 var $tmp2_i_i_i_i_i104=$agg_tmp_i_i_i_i_i60;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i103)]=HEAP8[($tmp2_i_i_i_i_i104)];
 $_addr_i_i7_i_i_i_i55=$108;
 $__p_addr_i_i8_i_i_i_i56=$109;
 var $110=$__p_addr_i_i8_i_i_i_i56;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=26;break; }
 case 25: 
 label=27;break;
 case 26: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1,0); var $111$1 = tempRet0;
 var $112=$111$0;
 $exn_slot_i_i_i_i71=$112;
 var $113=$111$1;
 $ehselector_slot_i_i_i_i72=$113;
 var $exn_i_i_i_i107=$exn_slot_i_i_i_i71;
 ___cxa_call_unexpected($exn_i_i_i_i107);
 throw "Reached an unreachable!";
 case 27: 
 var $114=$__p_addr_i_i_i_i70;
 var $tobool2_i_i_i_i109=($114|0)!=0;
 if($tobool2_i_i_i_i109){label=28;break;}else{label=29;break;}
 case 28: 
 var $__na_4_i_i_i_i111=(($this1_i7_i_i_i96)|0);
 var $ref5_i_i_i_i112=HEAP32[(($__na_4_i_i_i_i111)>>2)];
 var $115=$__p_addr_i_i_i_i70;
 $__a_addr_i_i_i_i_i65=$ref5_i_i_i_i112;
 $__p_addr_i_i_i_i_i66=$115;
 $__n_addr_i_i_i_i_i67=1;
 var $116=$__a_addr_i_i_i_i_i65;
 var $117=$__p_addr_i_i_i_i_i66;
 var $118=$__n_addr_i_i_i_i_i67;
 $this_addr_i_i_i_i_i_i62=$116;
 $__p_addr_i_i_i_i_i_i63=$117;
 $_addr_i_i_i_i_i_i64=$118;
 var $this1_i_i_i_i_i_i113=$this_addr_i_i_i_i_i_i62;
 var $119=$__p_addr_i_i_i_i_i_i63;
 var $120=$119;
 __ZdlPv($120);
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=43;break;
 case 32: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1); var $121$1 = tempRet0;
 var $122=$121$0;
 $exn_slot=$122;
 var $123=$121$1;
 $ehselector_slot=$123;
 $this_addr_i20=$__h;
 var $this1_i21=$this_addr_i20;
 $this_addr_i_i19=$this1_i21;
 var $this1_i_i22=$this_addr_i_i19;
 $this_addr_i_i_i18=$this1_i_i22;
 $__p_addr_i_i_i=0;
 var $this1_i_i_i23=$this_addr_i_i_i18;
 var $__ptr__i_i_i=(($this1_i_i_i23)|0);
 $this_addr_i_i_i_i=$__ptr__i_i_i;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $124=$this1_i_i_i_i;
 $this_addr_i_i_i_i_i=$124;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 var $__first__i_i_i_i_i=(($this1_i_i_i_i_i)|0);
 var $125=HEAP32[(($__first__i_i_i_i_i)>>2)];
 $__tmp_i_i_i=$125;
 var $126=$__p_addr_i_i_i;
 var $__ptr_2_i_i_i=(($this1_i_i_i23)|0);
 $this_addr_i9_i_i_i=$__ptr_2_i_i_i;
 var $this1_i10_i_i_i=$this_addr_i9_i_i_i;
 var $127=$this1_i10_i_i_i;
 $this_addr_i_i8_i_i_i=$127;
 var $this1_i_i11_i_i_i=$this_addr_i_i8_i_i_i;
 var $__first__i_i12_i_i_i=(($this1_i_i11_i_i_i)|0);
 HEAP32[(($__first__i_i12_i_i_i)>>2)]=$126;
 var $128=$__tmp_i_i_i;
 var $tobool_i_i_i=($128|0)!=0;
 if($tobool_i_i_i){label=33;break;}else{label=40;break;}
 case 33: 
 var $__ptr_4_i_i_i=(($this1_i_i_i23)|0);
 $this_addr_i14_i_i_i=$__ptr_4_i_i_i;
 var $this1_i15_i_i_i=$this_addr_i14_i_i_i;
 var $129=$this1_i15_i_i_i;
 $this_addr_i_i13_i_i_i=$129;
 var $this1_i_i16_i_i_i=$this_addr_i_i13_i_i_i;
 var $__second__i_i_i_i_i=(($this1_i_i16_i_i_i+4)|0);
 var $130=$__tmp_i_i_i;
 $this_addr_i6_i_i_i=$__second__i_i_i_i_i;
 $__p_addr_i_i_i_i=$130;
 var $this1_i7_i_i_i=$this_addr_i6_i_i_i;
 var $__value_constructed_i_i_i_i=(($this1_i7_i_i_i+4)|0);
 var $131=HEAP8[($__value_constructed_i_i_i_i)];
 var $tobool_i_i_i_i=(($131)&1);
 if($tobool_i_i_i_i){label=34;break;}else{label=37;break;}
 case 34: 
 var $__na__i_i_i_i=(($this1_i7_i_i_i)|0);
 var $ref_i_i_i_i=HEAP32[(($__na__i_i_i_i)>>2)];
 var $132=$__p_addr_i_i_i_i;
 var $__value__i_i_i_i=(($132+16)|0);
 $__x_addr_i_i_i_i_i=$__value__i_i_i_i;
 var $133=$__x_addr_i_i_i_i_i;
 var $134=$133;
 var $135=$134;
 $__a_addr_i9_i_i_i_i=$ref_i_i_i_i;
 $__p_addr_i10_i_i_i_i=$135;
 var $136=$ref_tmp_i_i_i_i_i;
 var $137=$__a_addr_i9_i_i_i_i;
 var $138=$__p_addr_i10_i_i_i_i;
 var $tmp_i_i_i_i_i=$agg_tmp1_i_i_i_i_i;
 var $tmp2_i_i_i_i_i=$agg_tmp_i_i_i_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp2_i_i_i_i_i)];
 $_addr_i_i7_i_i_i_i=$137;
 $__p_addr_i_i8_i_i_i_i=$138;
 var $139=$__p_addr_i_i8_i_i_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=36;break; }
 case 35: 
 label=37;break;
 case 36: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1,0); var $140$1 = tempRet0;
 var $141=$140$0;
 $exn_slot_i_i_i_i=$141;
 var $142=$140$1;
 $ehselector_slot_i_i_i_i=$142;
 var $exn_i_i_i_i=$exn_slot_i_i_i_i;
 ___cxa_call_unexpected($exn_i_i_i_i);
 throw "Reached an unreachable!";
 case 37: 
 var $143=$__p_addr_i_i_i_i;
 var $tobool2_i_i_i_i=($143|0)!=0;
 if($tobool2_i_i_i_i){label=38;break;}else{label=39;break;}
 case 38: 
 var $__na_4_i_i_i_i=(($this1_i7_i_i_i)|0);
 var $ref5_i_i_i_i=HEAP32[(($__na_4_i_i_i_i)>>2)];
 var $144=$__p_addr_i_i_i_i;
 $__a_addr_i_i_i_i_i=$ref5_i_i_i_i;
 $__p_addr_i_i_i_i_i=$144;
 $__n_addr_i_i_i_i_i=1;
 var $145=$__a_addr_i_i_i_i_i;
 var $146=$__p_addr_i_i_i_i_i;
 var $147=$__n_addr_i_i_i_i_i;
 $this_addr_i_i_i_i_i_i=$145;
 $__p_addr_i_i_i_i_i_i=$146;
 $_addr_i_i_i_i_i_i=$147;
 var $this1_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i;
 var $148=$__p_addr_i_i_i_i_i_i;
 var $149=$148;
 __ZdlPv($149);
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 label=41;break;
 case 41: 
 label=43;break;
 case 42: 
 var $150=$__r;
 $this_addr_i15=$ref_tmp;
 $__p_addr_i=$150;
 var $this1_i16=$this_addr_i15;
 var $151=$__p_addr_i;
 $this_addr_i_i14=$this1_i16;
 $__p_addr_i_i=$151;
 var $this1_i_i17=$this_addr_i_i14;
 var $__ptr__i_i=(($this1_i_i17)|0);
 var $152=$__p_addr_i_i;
 HEAP32[(($__ptr__i_i)>>2)]=$152;
 $this_addr_i=$agg_result;
 $__x_addr_i=$ref_tmp;
 $__y_addr_i=$__inserted;
 var $this1_i=$this_addr_i;
 var $153=$__y_addr_i;
 var $154=$__x_addr_i;
 $this_addr_i_i12=$this1_i;
 $__x_addr_i_i=$154;
 $__y_addr_i_i=$153;
 var $this1_i_i13=$this_addr_i_i12;
 var $first_i_i=(($this1_i_i13)|0);
 var $155=$__x_addr_i_i;
 var $156=$first_i_i;
 var $157=$155;
 assert(4 % 1 === 0);HEAP32[(($156)>>2)]=HEAP32[(($157)>>2)];
 var $second_i_i=(($this1_i_i13+4)|0);
 var $158=$__y_addr_i_i;
 var $159=HEAP8[($158)];
 var $tobool_i_i=(($159)&1);
 var $frombool_i_i=($tobool_i_i&1);
 HEAP8[($second_i_i)]=$frombool_i_i;
 STACKTOP=sp;return;
 case 43: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val11$0=$lpad_val$0;
 var $lpad_val11$1=$sel;
 ___resumeException($lpad_val11$0)
 case 44: 
 var $160$0 = ___cxa_find_matching_catch(-1, -1,0); var $160$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this1);
 return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $__cc=(($this1)|0);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($__cc);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this,$__parent,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i_i303;
 var $this_addr_i_i304;
 var $this_addr_i305;
 var $__p_addr_i_i68_i_i_i_i73;
 var $this_addr_i_i_i13_i_i69_i_i_i_i74;
 var $this_addr_i_i14_i_i70_i_i_i_i75;
 var $this_addr_i15_i_i71_i_i_i_i76;
 var $__x_addr_i_i_i_i_i72_i_i_i_i77;
 var $__r_addr_i_i_i_i73_i_i_i_i78;
 var $this_addr_i_i_i4_i_i74_i_i_i_i79;
 var $this_addr_i_i5_i_i75_i_i_i_i80;
 var $this_addr_i6_i_i76_i_i_i_i81;
 var $this_addr_i_i_i_i_i77_i_i_i_i82;
 var $this_addr_i_i_i_i78_i_i_i_i83;
 var $this_addr_i_i_i79_i_i_i_i84;
 var $this_addr_i_i80_i_i_i_i85;
 var $this_addr_i81_i_i_i_i86;
 var $__p_addr_i_i_i_i_i_i87;
 var $this_addr_i_i_i13_i_i_i_i_i_i88;
 var $this_addr_i_i14_i_i_i_i_i_i89;
 var $this_addr_i15_i_i_i_i_i_i90;
 var $__x_addr_i_i_i_i_i_i_i_i_i91;
 var $__r_addr_i_i_i_i_i_i_i_i92;
 var $this_addr_i_i_i4_i_i_i_i_i_i93;
 var $this_addr_i_i5_i_i_i_i_i_i94;
 var $this_addr_i6_i_i_i_i_i_i95;
 var $this_addr_i_i_i_i_i_i_i_i_i96;
 var $this_addr_i_i_i_i58_i_i_i_i97;
 var $this_addr_i_i_i59_i_i_i_i98;
 var $this_addr_i_i60_i_i_i_i99;
 var $this_addr_i61_i_i_i_i100;
 var $this_addr_i_i_i56_i_i_i_i101;
 var $__x_addr_i_i_i_i_i_i_i102;
 var $__y_addr_i_i_i_i_i_i_i103;
 var $__a_addr_i_i_i_i_i_i104;
 var $__b_addr_i_i_i_i_i_i105;
 var $agg_tmp1_i_i_i_i_i106=sp;
 var $__a_addr_i_i_i_i_i107;
 var $__b_addr_i_i_i_i_i108;
 var $agg_tmp_i_i_i_i_i109=(sp)+(8);
 var $this_addr_i_i_i15_i15_i_i_i_i110;
 var $this_addr_i_i16_i16_i_i_i_i111;
 var $this_addr_i17_i17_i_i_i_i112;
 var $this_addr_i_i_i4_i18_i_i_i_i113;
 var $this_addr_i_i5_i19_i_i_i_i114;
 var $this_addr_i6_i20_i_i_i_i115;
 var $this_addr_i_i_i_i21_i_i_i_i116;
 var $this_addr_i_i_i22_i_i_i_i117;
 var $this_addr_i_i23_i_i_i_i118;
 var $this_addr_i24_i_i_i_i119;
 var $__s1_addr_i_i_i_i_i120;
 var $__s2_addr_i_i_i_i_i121;
 var $__n_addr_i_i_i_i_i122;
 var $this_addr_i_i_i15_i_i_i_i_i123;
 var $this_addr_i_i16_i_i_i_i_i124;
 var $this_addr_i17_i_i_i_i_i125;
 var $this_addr_i_i_i4_i_i_i_i_i126;
 var $this_addr_i_i5_i_i_i_i_i127;
 var $this_addr_i6_i_i_i_i_i128;
 var $this_addr_i_i_i_i_i_i_i_i129;
 var $this_addr_i_i_i_i_i_i_i130;
 var $this_addr_i_i_i_i_i_i131;
 var $this_addr_i_i_i_i_i132;
 var $retval_i_i_i_i133;
 var $this_addr_i_i_i_i134;
 var $__str_addr_i_i_i_i135;
 var $__lhs_sz_i_i_i_i136=(sp)+(16);
 var $__rhs_sz_i_i_i_i137=(sp)+(24);
 var $__result_i_i_i_i138;
 var $exn_slot_i_i_i_i139;
 var $ehselector_slot_i_i_i_i140;
 var $__lhs_addr_i_i_i141;
 var $__rhs_addr_i_i_i142;
 var $this_addr_i_i143;
 var $__x_addr_i_i144;
 var $__y_addr_i_i145;
 var $this_addr_i146;
 var $__x_addr_i147;
 var $__y_addr_i148;
 var $this_addr_i_i_i66;
 var $_addr_i_i_i67;
 var $this_addr_i_i68;
 var $_addr_i_i69;
 var $this_addr_i64;
 var $this_addr_i_i_i58;
 var $this_addr_i_i59;
 var $this_addr_i60;
 var $this_addr_i56;
 var $this_addr_i_i_i49;
 var $_addr_i_i_i50;
 var $this_addr_i_i51;
 var $_addr_i_i52;
 var $__p_addr_i_i68_i_i_i_i;
 var $this_addr_i_i_i13_i_i69_i_i_i_i;
 var $this_addr_i_i14_i_i70_i_i_i_i;
 var $this_addr_i15_i_i71_i_i_i_i;
 var $__x_addr_i_i_i_i_i72_i_i_i_i;
 var $__r_addr_i_i_i_i73_i_i_i_i;
 var $this_addr_i_i_i4_i_i74_i_i_i_i;
 var $this_addr_i_i5_i_i75_i_i_i_i;
 var $this_addr_i6_i_i76_i_i_i_i;
 var $this_addr_i_i_i_i_i77_i_i_i_i;
 var $this_addr_i_i_i_i78_i_i_i_i;
 var $this_addr_i_i_i79_i_i_i_i;
 var $this_addr_i_i80_i_i_i_i;
 var $this_addr_i81_i_i_i_i;
 var $__p_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i13_i_i_i_i_i_i;
 var $this_addr_i_i14_i_i_i_i_i_i;
 var $this_addr_i15_i_i_i_i_i_i;
 var $__x_addr_i_i_i_i_i_i_i_i_i;
 var $__r_addr_i_i_i_i_i_i_i_i;
 var $this_addr_i_i_i4_i_i_i_i_i_i;
 var $this_addr_i_i5_i_i_i_i_i_i;
 var $this_addr_i6_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i_i_i_i_i;
 var $this_addr_i_i_i_i58_i_i_i_i;
 var $this_addr_i_i_i59_i_i_i_i;
 var $this_addr_i_i60_i_i_i_i;
 var $this_addr_i61_i_i_i_i;
 var $this_addr_i_i_i56_i_i_i_i;
 var $__x_addr_i_i_i_i_i_i_i;
 var $__y_addr_i_i_i_i_i_i_i;
 var $__a_addr_i_i_i_i_i_i;
 var $__b_addr_i_i_i_i_i_i;
 var $agg_tmp1_i_i_i_i_i=(sp)+(32);
 var $__a_addr_i_i_i_i_i;
 var $__b_addr_i_i_i_i_i;
 var $agg_tmp_i_i_i_i_i=(sp)+(40);
 var $this_addr_i_i_i15_i15_i_i_i_i;
 var $this_addr_i_i16_i16_i_i_i_i;
 var $this_addr_i17_i17_i_i_i_i;
 var $this_addr_i_i_i4_i18_i_i_i_i;
 var $this_addr_i_i5_i19_i_i_i_i;
 var $this_addr_i6_i20_i_i_i_i;
 var $this_addr_i_i_i_i21_i_i_i_i;
 var $this_addr_i_i_i22_i_i_i_i;
 var $this_addr_i_i23_i_i_i_i;
 var $this_addr_i24_i_i_i_i;
 var $__s1_addr_i_i_i_i_i;
 var $__s2_addr_i_i_i_i_i;
 var $__n_addr_i_i_i_i_i;
 var $this_addr_i_i_i15_i_i_i_i_i;
 var $this_addr_i_i16_i_i_i_i_i;
 var $this_addr_i17_i_i_i_i_i;
 var $this_addr_i_i_i4_i_i_i_i_i;
 var $this_addr_i_i5_i_i_i_i_i;
 var $this_addr_i6_i_i_i_i_i;
 var $this_addr_i_i_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i;
 var $retval_i_i_i_i;
 var $this_addr_i_i_i_i43;
 var $__str_addr_i_i_i_i;
 var $__lhs_sz_i_i_i_i=(sp)+(48);
 var $__rhs_sz_i_i_i_i=(sp)+(56);
 var $__result_i_i_i_i;
 var $exn_slot_i_i_i_i;
 var $ehselector_slot_i_i_i_i;
 var $__lhs_addr_i_i_i;
 var $__rhs_addr_i_i_i;
 var $this_addr_i_i44;
 var $__x_addr_i_i;
 var $__y_addr_i_i;
 var $this_addr_i45;
 var $__x_addr_i;
 var $__y_addr_i;
 var $this_addr_i_i_i39;
 var $_addr_i_i_i;
 var $this_addr_i_i40;
 var $_addr_i_i;
 var $this_addr_i37;
 var $__x_addr_i_i_i;
 var $__r_addr_i_i;
 var $this_addr_i_i_i31;
 var $this_addr_i_i32;
 var $this_addr_i33;
 var $__x_addr_i_i_i_i;
 var $__r_addr_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $retval;
 var $this_addr;
 var $__parent_addr;
 var $__v_addr;
 var $__nd;
 var $tmp=(sp)+(64);
 var $tmp6=(sp)+(72);
 var $tmp17=(sp)+(80);
 $this_addr=$this;
 $__parent_addr=$__parent;
 $__v_addr=$__v;
 var $this1=$this_addr;
 $this_addr_i=$this1;
 var $this1_i=$this_addr_i;
 $this_addr_i_i=$this1_i;
 var $this1_i_i=$this_addr_i_i;
 var $__pair1__i_i=(($this1_i_i+4)|0);
 $this_addr_i_i_i=$__pair1__i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $0=$this1_i_i_i;
 $this_addr_i_i_i_i=$0;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__first__i_i_i_i=(($this1_i_i_i_i)|0);
 $__r_addr_i_i_i=$__first__i_i_i_i;
 var $1=$__r_addr_i_i_i;
 $__x_addr_i_i_i_i=$1;
 var $2=$__x_addr_i_i_i_i;
 var $3=$2;
 var $4=$3;
 var $5=$4;
 var $6=$5;
 var $__left__i=(($6)|0);
 var $7=HEAP32[(($__left__i)>>2)];
 var $8=$7;
 $__nd=$8;
 var $9=$__nd;
 $this_addr_i_i51=$tmp;
 $_addr_i_i52=-1;
 var $this1_i_i53=$this_addr_i_i51;
 var $10=$_addr_i_i52;
 $this_addr_i_i_i49=$this1_i_i53;
 $_addr_i_i_i50=$10;
 var $this1_i_i_i54=$this_addr_i_i_i49;
 var $__lx_i_i_i55=(($this1_i_i_i54)|0);
 HEAP32[(($__lx_i_i_i55)>>2)]=0;
 $this_addr_i56=$tmp;
 var $this1_i57=$this_addr_i56;
 var $cmp=($9|0)!=0;
 if($cmp){label=2;break;}else{label=64;break;}
 case 2: 
 label=3;break;
 case 3: 
 $this_addr_i305=$this1;
 var $this1_i306=$this_addr_i305;
 var $__pair3__i307=(($this1_i306+8)|0);
 $this_addr_i_i304=$__pair3__i307;
 var $this1_i_i308=$this_addr_i_i304;
 var $11=$this1_i_i308;
 $this_addr_i_i_i303=$11;
 var $this1_i_i_i309=$this_addr_i_i_i303;
 var $12=$this1_i_i_i309;
 var $13=$__v_addr;
 var $14=$__nd;
 var $__value_=(($14+16)|0);
 $this_addr_i146=$12;
 $__x_addr_i147=$13;
 $__y_addr_i148=$__value_;
 var $this1_i149=$this_addr_i146;
 var $15=$this1_i149;
 var $16=$__x_addr_i147;
 var $__cc_i150=(($16)|0);
 var $first_i151=(($__cc_i150)|0);
 var $17=$__y_addr_i148;
 var $__cc2_i152=(($17)|0);
 var $first3_i153=(($__cc2_i152)|0);
 $this_addr_i_i143=$15;
 $__x_addr_i_i144=$first_i151;
 $__y_addr_i_i145=$first3_i153;
 var $this1_i_i154=$this_addr_i_i143;
 var $18=$__x_addr_i_i144;
 var $19=$__y_addr_i_i145;
 $__lhs_addr_i_i_i141=$18;
 $__rhs_addr_i_i_i142=$19;
 var $20=$__lhs_addr_i_i_i141;
 var $21=$__rhs_addr_i_i_i142;
 $this_addr_i_i_i_i134=$20;
 $__str_addr_i_i_i_i135=$21;
 var $this1_i_i_i_i155=$this_addr_i_i_i_i134;
 $this_addr_i_i_i_i_i132=$this1_i_i_i_i155;
 var $this1_i_i_i_i_i156=$this_addr_i_i_i_i_i132;
 $this_addr_i_i_i_i_i_i131=$this1_i_i_i_i_i156;
 var $this1_i_i_i_i_i_i157=$this_addr_i_i_i_i_i_i131;
 var $__r__i_i_i_i_i_i158=(($this1_i_i_i_i_i_i157)|0);
 $this_addr_i_i_i_i_i_i_i130=$__r__i_i_i_i_i_i158;
 var $this1_i_i_i_i_i_i_i159=$this_addr_i_i_i_i_i_i_i130;
 var $22=$this1_i_i_i_i_i_i_i159;
 $this_addr_i_i_i_i_i_i_i_i129=$22;
 var $this1_i_i_i_i_i_i_i_i160=$this_addr_i_i_i_i_i_i_i_i129;
 var $__first__i_i_i_i_i_i_i_i161=(($this1_i_i_i_i_i_i_i_i160)|0);
 var $23=(($__first__i_i_i_i_i_i_i_i161)|0);
 var $__s_i_i_i_i_i_i162=$23;
 var $24=(($__s_i_i_i_i_i_i162)|0);
 var $__size__i_i_i_i_i_i163=$24;
 var $25=HEAP8[($__size__i_i_i_i_i_i163)];
 var $conv_i_i_i_i_i_i164=($25&255);
 var $and_i_i_i_i_i_i165=$conv_i_i_i_i_i_i164&1;
 var $tobool_i_i_i_i_i_i166=($and_i_i_i_i_i_i165|0)!=0;
 if($tobool_i_i_i_i_i_i166){label=4;break;}else{label=5;break;}
 case 4: 
 $this_addr_i17_i_i_i_i_i125=$this1_i_i_i_i_i156;
 var $this1_i18_i_i_i_i_i167=$this_addr_i17_i_i_i_i_i125;
 var $__r__i19_i_i_i_i_i168=(($this1_i18_i_i_i_i_i167)|0);
 $this_addr_i_i16_i_i_i_i_i124=$__r__i19_i_i_i_i_i168;
 var $this1_i_i20_i_i_i_i_i169=$this_addr_i_i16_i_i_i_i_i124;
 var $26=$this1_i_i20_i_i_i_i_i169;
 $this_addr_i_i_i15_i_i_i_i_i123=$26;
 var $this1_i_i_i21_i_i_i_i_i170=$this_addr_i_i_i15_i_i_i_i_i123;
 var $__first__i_i_i22_i_i_i_i_i171=(($this1_i_i_i21_i_i_i_i_i170)|0);
 var $27=(($__first__i_i_i22_i_i_i_i_i171)|0);
 var $__l_i_i_i_i_i_i172=$27;
 var $__size__i23_i_i_i_i_i173=(($__l_i_i_i_i_i_i172+4)|0);
 var $28=HEAP32[(($__size__i23_i_i_i_i_i173)>>2)];
 var $cond_i_i_i_i_i185=$28;label=6;break;
 case 5: 
 $this_addr_i6_i_i_i_i_i128=$this1_i_i_i_i_i156;
 var $this1_i7_i_i_i_i_i175=$this_addr_i6_i_i_i_i_i128;
 var $__r__i8_i_i_i_i_i176=(($this1_i7_i_i_i_i_i175)|0);
 $this_addr_i_i5_i_i_i_i_i127=$__r__i8_i_i_i_i_i176;
 var $this1_i_i9_i_i_i_i_i177=$this_addr_i_i5_i_i_i_i_i127;
 var $29=$this1_i_i9_i_i_i_i_i177;
 $this_addr_i_i_i4_i_i_i_i_i126=$29;
 var $this1_i_i_i10_i_i_i_i_i178=$this_addr_i_i_i4_i_i_i_i_i126;
 var $__first__i_i_i11_i_i_i_i_i179=(($this1_i_i_i10_i_i_i_i_i178)|0);
 var $30=(($__first__i_i_i11_i_i_i_i_i179)|0);
 var $__s_i12_i_i_i_i_i180=$30;
 var $31=(($__s_i12_i_i_i_i_i180)|0);
 var $__size__i13_i_i_i_i_i181=$31;
 var $32=HEAP8[($__size__i13_i_i_i_i_i181)];
 var $conv_i14_i_i_i_i_i182=($32&255);
 var $shr_i_i_i_i_i_i183=$conv_i14_i_i_i_i_i182>>1;
 var $cond_i_i_i_i_i185=$shr_i_i_i_i_i_i183;label=6;break;
 case 6: 
 var $cond_i_i_i_i_i185;
 HEAP32[(($__lhs_sz_i_i_i_i136)>>2)]=$cond_i_i_i_i_i185;
 var $33=$__str_addr_i_i_i_i135;
 $this_addr_i24_i_i_i_i119=$33;
 var $this1_i25_i_i_i_i186=$this_addr_i24_i_i_i_i119;
 $this_addr_i_i23_i_i_i_i118=$this1_i25_i_i_i_i186;
 var $this1_i_i26_i_i_i_i187=$this_addr_i_i23_i_i_i_i118;
 var $__r__i_i27_i_i_i_i188=(($this1_i_i26_i_i_i_i187)|0);
 $this_addr_i_i_i22_i_i_i_i117=$__r__i_i27_i_i_i_i188;
 var $this1_i_i_i28_i_i_i_i189=$this_addr_i_i_i22_i_i_i_i117;
 var $34=$this1_i_i_i28_i_i_i_i189;
 $this_addr_i_i_i_i21_i_i_i_i116=$34;
 var $this1_i_i_i_i29_i_i_i_i190=$this_addr_i_i_i_i21_i_i_i_i116;
 var $__first__i_i_i_i30_i_i_i_i191=(($this1_i_i_i_i29_i_i_i_i190)|0);
 var $35=(($__first__i_i_i_i30_i_i_i_i191)|0);
 var $__s_i_i31_i_i_i_i192=$35;
 var $36=(($__s_i_i31_i_i_i_i192)|0);
 var $__size__i_i32_i_i_i_i193=$36;
 var $37=HEAP8[($__size__i_i32_i_i_i_i193)];
 var $conv_i_i33_i_i_i_i194=($37&255);
 var $and_i_i34_i_i_i_i195=$conv_i_i33_i_i_i_i194&1;
 var $tobool_i_i35_i_i_i_i196=($and_i_i34_i_i_i_i195|0)!=0;
 if($tobool_i_i35_i_i_i_i196){label=7;break;}else{label=8;break;}
 case 7: 
 $this_addr_i17_i17_i_i_i_i112=$this1_i25_i_i_i_i186;
 var $this1_i18_i36_i_i_i_i198=$this_addr_i17_i17_i_i_i_i112;
 var $__r__i19_i37_i_i_i_i199=(($this1_i18_i36_i_i_i_i198)|0);
 $this_addr_i_i16_i16_i_i_i_i111=$__r__i19_i37_i_i_i_i199;
 var $this1_i_i20_i38_i_i_i_i200=$this_addr_i_i16_i16_i_i_i_i111;
 var $38=$this1_i_i20_i38_i_i_i_i200;
 $this_addr_i_i_i15_i15_i_i_i_i110=$38;
 var $this1_i_i_i21_i39_i_i_i_i201=$this_addr_i_i_i15_i15_i_i_i_i110;
 var $__first__i_i_i22_i40_i_i_i_i202=(($this1_i_i_i21_i39_i_i_i_i201)|0);
 var $39=(($__first__i_i_i22_i40_i_i_i_i202)|0);
 var $__l_i_i41_i_i_i_i203=$39;
 var $__size__i23_i42_i_i_i_i204=(($__l_i_i41_i_i_i_i203+4)|0);
 var $40=HEAP32[(($__size__i23_i42_i_i_i_i204)>>2)];
 var $cond_i54_i_i_i_i216=$40;label=9;break;
 case 8: 
 $this_addr_i6_i20_i_i_i_i115=$this1_i25_i_i_i_i186;
 var $this1_i7_i44_i_i_i_i206=$this_addr_i6_i20_i_i_i_i115;
 var $__r__i8_i45_i_i_i_i207=(($this1_i7_i44_i_i_i_i206)|0);
 $this_addr_i_i5_i19_i_i_i_i114=$__r__i8_i45_i_i_i_i207;
 var $this1_i_i9_i46_i_i_i_i208=$this_addr_i_i5_i19_i_i_i_i114;
 var $41=$this1_i_i9_i46_i_i_i_i208;
 $this_addr_i_i_i4_i18_i_i_i_i113=$41;
 var $this1_i_i_i10_i47_i_i_i_i209=$this_addr_i_i_i4_i18_i_i_i_i113;
 var $__first__i_i_i11_i48_i_i_i_i210=(($this1_i_i_i10_i47_i_i_i_i209)|0);
 var $42=(($__first__i_i_i11_i48_i_i_i_i210)|0);
 var $__s_i12_i49_i_i_i_i211=$42;
 var $43=(($__s_i12_i49_i_i_i_i211)|0);
 var $__size__i13_i50_i_i_i_i212=$43;
 var $44=HEAP8[($__size__i13_i50_i_i_i_i212)];
 var $conv_i14_i51_i_i_i_i213=($44&255);
 var $shr_i_i52_i_i_i_i214=$conv_i14_i51_i_i_i_i213>>1;
 var $cond_i54_i_i_i_i216=$shr_i_i52_i_i_i_i214;label=9;break;
 case 9: 
 var $cond_i54_i_i_i_i216;
 HEAP32[(($__rhs_sz_i_i_i_i137)>>2)]=$cond_i54_i_i_i_i216;
 $this_addr_i81_i_i_i_i86=$this1_i_i_i_i155;
 var $this1_i82_i_i_i_i217=$this_addr_i81_i_i_i_i86;
 $this_addr_i_i80_i_i_i_i85=$this1_i82_i_i_i_i217;
 var $this1_i_i83_i_i_i_i218=$this_addr_i_i80_i_i_i_i85;
 $this_addr_i_i_i79_i_i_i_i84=$this1_i_i83_i_i_i_i218;
 var $this1_i_i_i84_i_i_i_i219=$this_addr_i_i_i79_i_i_i_i84;
 var $__r__i_i_i85_i_i_i_i220=(($this1_i_i_i84_i_i_i_i219)|0);
 $this_addr_i_i_i_i78_i_i_i_i83=$__r__i_i_i85_i_i_i_i220;
 var $this1_i_i_i_i86_i_i_i_i221=$this_addr_i_i_i_i78_i_i_i_i83;
 var $45=$this1_i_i_i_i86_i_i_i_i221;
 $this_addr_i_i_i_i_i77_i_i_i_i82=$45;
 var $this1_i_i_i_i_i87_i_i_i_i222=$this_addr_i_i_i_i_i77_i_i_i_i82;
 var $__first__i_i_i_i_i88_i_i_i_i223=(($this1_i_i_i_i_i87_i_i_i_i222)|0);
 var $46=(($__first__i_i_i_i_i88_i_i_i_i223)|0);
 var $__s_i_i_i89_i_i_i_i224=$46;
 var $47=(($__s_i_i_i89_i_i_i_i224)|0);
 var $__size__i_i_i90_i_i_i_i225=$47;
 var $48=HEAP8[($__size__i_i_i90_i_i_i_i225)];
 var $conv_i_i_i91_i_i_i_i226=($48&255);
 var $and_i_i_i92_i_i_i_i227=$conv_i_i_i91_i_i_i_i226&1;
 var $tobool_i_i_i93_i_i_i_i228=($and_i_i_i92_i_i_i_i227|0)!=0;
 if($tobool_i_i_i93_i_i_i_i228){label=10;break;}else{label=11;break;}
 case 10: 
 $this_addr_i15_i_i71_i_i_i_i76=$this1_i_i83_i_i_i_i218;
 var $this1_i16_i_i94_i_i_i_i230=$this_addr_i15_i_i71_i_i_i_i76;
 var $__r__i17_i_i95_i_i_i_i231=(($this1_i16_i_i94_i_i_i_i230)|0);
 $this_addr_i_i14_i_i70_i_i_i_i75=$__r__i17_i_i95_i_i_i_i231;
 var $this1_i_i18_i_i96_i_i_i_i232=$this_addr_i_i14_i_i70_i_i_i_i75;
 var $49=$this1_i_i18_i_i96_i_i_i_i232;
 $this_addr_i_i_i13_i_i69_i_i_i_i74=$49;
 var $this1_i_i_i19_i_i97_i_i_i_i233=$this_addr_i_i_i13_i_i69_i_i_i_i74;
 var $__first__i_i_i20_i_i98_i_i_i_i234=(($this1_i_i_i19_i_i97_i_i_i_i233)|0);
 var $50=(($__first__i_i_i20_i_i98_i_i_i_i234)|0);
 var $__l_i_i_i99_i_i_i_i235=$50;
 var $__data__i21_i_i100_i_i_i_i236=(($__l_i_i_i99_i_i_i_i235+8)|0);
 var $51=HEAP32[(($__data__i21_i_i100_i_i_i_i236)>>2)];
 var $cond_i_i111_i_i_i_i247=$51;label=12;break;
 case 11: 
 $this_addr_i6_i_i76_i_i_i_i81=$this1_i_i83_i_i_i_i218;
 var $this1_i7_i_i102_i_i_i_i238=$this_addr_i6_i_i76_i_i_i_i81;
 var $__r__i8_i_i103_i_i_i_i239=(($this1_i7_i_i102_i_i_i_i238)|0);
 $this_addr_i_i5_i_i75_i_i_i_i80=$__r__i8_i_i103_i_i_i_i239;
 var $this1_i_i9_i_i104_i_i_i_i240=$this_addr_i_i5_i_i75_i_i_i_i80;
 var $52=$this1_i_i9_i_i104_i_i_i_i240;
 $this_addr_i_i_i4_i_i74_i_i_i_i79=$52;
 var $this1_i_i_i10_i_i105_i_i_i_i241=$this_addr_i_i_i4_i_i74_i_i_i_i79;
 var $__first__i_i_i11_i_i106_i_i_i_i242=(($this1_i_i_i10_i_i105_i_i_i_i241)|0);
 var $53=(($__first__i_i_i11_i_i106_i_i_i_i242)|0);
 var $__s_i12_i_i107_i_i_i_i243=$53;
 var $__data__i_i_i108_i_i_i_i244=(($__s_i12_i_i107_i_i_i_i243+1)|0);
 var $arrayidx_i_i_i109_i_i_i_i245=(($__data__i_i_i108_i_i_i_i244)|0);
 $__r_addr_i_i_i_i73_i_i_i_i78=$arrayidx_i_i_i109_i_i_i_i245;
 var $54=$__r_addr_i_i_i_i73_i_i_i_i78;
 $__x_addr_i_i_i_i_i72_i_i_i_i77=$54;
 var $55=$__x_addr_i_i_i_i_i72_i_i_i_i77;
 var $cond_i_i111_i_i_i_i247=$55;label=12;break;
 case 12: 
 var $cond_i_i111_i_i_i_i247;
 $__p_addr_i_i68_i_i_i_i73=$cond_i_i111_i_i_i_i247;
 var $56=$__p_addr_i_i68_i_i_i_i73;
 var $57=$__str_addr_i_i_i_i135;
 $this_addr_i61_i_i_i_i100=$57;
 var $this1_i62_i_i_i_i248=$this_addr_i61_i_i_i_i100;
 $this_addr_i_i60_i_i_i_i99=$this1_i62_i_i_i_i248;
 var $this1_i_i63_i_i_i_i249=$this_addr_i_i60_i_i_i_i99;
 $this_addr_i_i_i59_i_i_i_i98=$this1_i_i63_i_i_i_i249;
 var $this1_i_i_i64_i_i_i_i250=$this_addr_i_i_i59_i_i_i_i98;
 var $__r__i_i_i_i_i_i_i251=(($this1_i_i_i64_i_i_i_i250)|0);
 $this_addr_i_i_i_i58_i_i_i_i97=$__r__i_i_i_i_i_i_i251;
 var $this1_i_i_i_i65_i_i_i_i252=$this_addr_i_i_i_i58_i_i_i_i97;
 var $58=$this1_i_i_i_i65_i_i_i_i252;
 $this_addr_i_i_i_i_i_i_i_i_i96=$58;
 var $this1_i_i_i_i_i_i_i_i_i253=$this_addr_i_i_i_i_i_i_i_i_i96;
 var $__first__i_i_i_i_i_i_i_i_i254=(($this1_i_i_i_i_i_i_i_i_i253)|0);
 var $59=(($__first__i_i_i_i_i_i_i_i_i254)|0);
 var $__s_i_i_i_i_i_i_i255=$59;
 var $60=(($__s_i_i_i_i_i_i_i255)|0);
 var $__size__i_i_i_i_i_i_i256=$60;
 var $61=HEAP8[($__size__i_i_i_i_i_i_i256)];
 var $conv_i_i_i_i_i_i_i257=($61&255);
 var $and_i_i_i_i_i_i_i258=$conv_i_i_i_i_i_i_i257&1;
 var $tobool_i_i_i_i_i_i_i259=($and_i_i_i_i_i_i_i258|0)!=0;
 if($tobool_i_i_i_i_i_i_i259){label=13;break;}else{label=14;break;}
 case 13: 
 $this_addr_i15_i_i_i_i_i_i90=$this1_i_i63_i_i_i_i249;
 var $this1_i16_i_i_i_i_i_i261=$this_addr_i15_i_i_i_i_i_i90;
 var $__r__i17_i_i_i_i_i_i262=(($this1_i16_i_i_i_i_i_i261)|0);
 $this_addr_i_i14_i_i_i_i_i_i89=$__r__i17_i_i_i_i_i_i262;
 var $this1_i_i18_i_i_i_i_i_i263=$this_addr_i_i14_i_i_i_i_i_i89;
 var $62=$this1_i_i18_i_i_i_i_i_i263;
 $this_addr_i_i_i13_i_i_i_i_i_i88=$62;
 var $this1_i_i_i19_i_i_i_i_i_i264=$this_addr_i_i_i13_i_i_i_i_i_i88;
 var $__first__i_i_i20_i_i_i_i_i_i265=(($this1_i_i_i19_i_i_i_i_i_i264)|0);
 var $63=(($__first__i_i_i20_i_i_i_i_i_i265)|0);
 var $__l_i_i_i_i_i_i_i266=$63;
 var $__data__i21_i_i_i_i_i_i267=(($__l_i_i_i_i_i_i_i266+8)|0);
 var $64=HEAP32[(($__data__i21_i_i_i_i_i_i267)>>2)];
 var $cond_i_i_i_i_i_i278=$64;label=15;break;
 case 14: 
 $this_addr_i6_i_i_i_i_i_i95=$this1_i_i63_i_i_i_i249;
 var $this1_i7_i_i_i_i_i_i269=$this_addr_i6_i_i_i_i_i_i95;
 var $__r__i8_i_i_i_i_i_i270=(($this1_i7_i_i_i_i_i_i269)|0);
 $this_addr_i_i5_i_i_i_i_i_i94=$__r__i8_i_i_i_i_i_i270;
 var $this1_i_i9_i_i_i_i_i_i271=$this_addr_i_i5_i_i_i_i_i_i94;
 var $65=$this1_i_i9_i_i_i_i_i_i271;
 $this_addr_i_i_i4_i_i_i_i_i_i93=$65;
 var $this1_i_i_i10_i_i_i_i_i_i272=$this_addr_i_i_i4_i_i_i_i_i_i93;
 var $__first__i_i_i11_i_i_i_i_i_i273=(($this1_i_i_i10_i_i_i_i_i_i272)|0);
 var $66=(($__first__i_i_i11_i_i_i_i_i_i273)|0);
 var $__s_i12_i_i_i_i_i_i274=$66;
 var $__data__i_i_i_i_i_i_i275=(($__s_i12_i_i_i_i_i_i274+1)|0);
 var $arrayidx_i_i_i_i_i_i_i276=(($__data__i_i_i_i_i_i_i275)|0);
 $__r_addr_i_i_i_i_i_i_i_i92=$arrayidx_i_i_i_i_i_i_i276;
 var $67=$__r_addr_i_i_i_i_i_i_i_i92;
 $__x_addr_i_i_i_i_i_i_i_i_i91=$67;
 var $68=$__x_addr_i_i_i_i_i_i_i_i_i91;
 var $cond_i_i_i_i_i_i278=$68;label=15;break;
 case 15: 
 var $cond_i_i_i_i_i_i278;
 $__p_addr_i_i_i_i_i_i87=$cond_i_i_i_i_i_i278;
 var $69=$__p_addr_i_i_i_i_i_i87;
 $__a_addr_i_i_i_i_i107=$__lhs_sz_i_i_i_i136;
 $__b_addr_i_i_i_i_i108=$__rhs_sz_i_i_i_i137;
 var $70=$__a_addr_i_i_i_i_i107;
 var $71=$__b_addr_i_i_i_i_i108;
 var $tmp_i_i_i_i_i279=$agg_tmp1_i_i_i_i_i106;
 var $tmp2_i_i_i_i_i280=$agg_tmp_i_i_i_i_i109;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i279)]=HEAP8[($tmp2_i_i_i_i_i280)];
 $__a_addr_i_i_i_i_i_i104=$70;
 $__b_addr_i_i_i_i_i_i105=$71;
 var $72=$__b_addr_i_i_i_i_i_i105;
 var $73=$__a_addr_i_i_i_i_i_i104;
 $this_addr_i_i_i56_i_i_i_i101=$agg_tmp1_i_i_i_i_i106;
 $__x_addr_i_i_i_i_i_i_i102=$72;
 $__y_addr_i_i_i_i_i_i_i103=$73;
 var $this1_i_i_i57_i_i_i_i281=$this_addr_i_i_i56_i_i_i_i101;
 var $74=$__x_addr_i_i_i_i_i_i_i102;
 var $75=HEAP32[(($74)>>2)];
 var $76=$__y_addr_i_i_i_i_i_i_i103;
 var $77=HEAP32[(($76)>>2)];
 var $cmp_i_i_i_i_i_i_i282=($75>>>0)<($77>>>0);
 if($cmp_i_i_i_i_i_i_i282){label=16;break;}else{label=17;break;}
 case 16: 
 var $78=$__b_addr_i_i_i_i_i_i105;
 var $cond_lvalue_i_i_i_i_i_i286=$78;label=18;break;
 case 17: 
 var $79=$__a_addr_i_i_i_i_i_i104;
 var $cond_lvalue_i_i_i_i_i_i286=$79;label=18;break;
 case 18: 
 var $cond_lvalue_i_i_i_i_i_i286;
 var $80=HEAP32[(($cond_lvalue_i_i_i_i_i_i286)>>2)];
 $__s1_addr_i_i_i_i_i120=$56;
 $__s2_addr_i_i_i_i_i121=$69;
 $__n_addr_i_i_i_i_i122=$80;
 var $81=$__s1_addr_i_i_i_i_i120;
 var $82=$__s2_addr_i_i_i_i_i121;
 var $83=$__n_addr_i_i_i_i_i122;
 var $call_i14_i_i_i_i287=(function() { try { __THREW__ = 0; return _memcmp($81,$82,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=21;break; }
 case 19: 
 $__result_i_i_i_i138=$call_i14_i_i_i_i287;
 var $84=$__result_i_i_i_i138;
 var $cmp_i_i_i_i289=($84|0)!=0;
 if($cmp_i_i_i_i289){label=20;break;}else{label=22;break;}
 case 20: 
 var $85=$__result_i_i_i_i138;
 $retval_i_i_i_i133=$85;
 label=27;break;
 case 21: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=$86$0;
 $exn_slot_i_i_i_i139=$87;
 var $88=$86$1;
 $ehselector_slot_i_i_i_i140=$88;
 var $exn_i_i_i_i292=$exn_slot_i_i_i_i139;
 ___cxa_call_unexpected($exn_i_i_i_i292);
 throw "Reached an unreachable!";
 case 22: 
 var $89=HEAP32[(($__lhs_sz_i_i_i_i136)>>2)];
 var $90=HEAP32[(($__rhs_sz_i_i_i_i137)>>2)];
 var $cmp8_i_i_i_i294=($89>>>0)<($90>>>0);
 if($cmp8_i_i_i_i294){label=23;break;}else{label=24;break;}
 case 23: 
 $retval_i_i_i_i133=-1;
 label=27;break;
 case 24: 
 var $91=HEAP32[(($__lhs_sz_i_i_i_i136)>>2)];
 var $92=HEAP32[(($__rhs_sz_i_i_i_i137)>>2)];
 var $cmp11_i_i_i_i297=($91>>>0)>($92>>>0);
 if($cmp11_i_i_i_i297){label=25;break;}else{label=26;break;}
 case 25: 
 $retval_i_i_i_i133=1;
 label=27;break;
 case 26: 
 $retval_i_i_i_i133=0;
 label=27;break;
 case 27: 
 var $93=$retval_i_i_i_i133;
 var $cmp_i_i_i301=($93|0)<0;
 if($cmp_i_i_i301){label=28;break;}else{label=32;break;}
 case 28: 
 var $94=$__nd;
 var $95=$94;
 var $__left_=(($95)|0);
 var $96=HEAP32[(($__left_)>>2)];
 $this_addr_i_i68=$tmp6;
 $_addr_i_i69=-1;
 var $this1_i_i70=$this_addr_i_i68;
 var $97=$_addr_i_i69;
 $this_addr_i_i_i66=$this1_i_i70;
 $_addr_i_i_i67=$97;
 var $this1_i_i_i71=$this_addr_i_i_i66;
 var $__lx_i_i_i72=(($this1_i_i_i71)|0);
 HEAP32[(($__lx_i_i_i72)>>2)]=0;
 $this_addr_i64=$tmp6;
 var $this1_i65=$this_addr_i64;
 var $cmp8=($96|0)!=0;
 if($cmp8){label=29;break;}else{label=30;break;}
 case 29: 
 var $98=$__nd;
 var $99=$98;
 var $__left_10=(($99)|0);
 var $100=HEAP32[(($__left_10)>>2)];
 var $101=$100;
 $__nd=$101;
 label=31;break;
 case 30: 
 var $102=$__nd;
 var $103=$102;
 var $104=$__parent_addr;
 HEAP32[(($104)>>2)]=$103;
 var $105=$__parent_addr;
 var $106=HEAP32[(($105)>>2)];
 var $107=$106;
 var $__left_11=(($107)|0);
 $retval=$__left_11;
 label=65;break;
 case 31: 
 label=63;break;
 case 32: 
 $this_addr_i60=$this1;
 var $this1_i61=$this_addr_i60;
 var $__pair3__i=(($this1_i61+8)|0);
 $this_addr_i_i59=$__pair3__i;
 var $this1_i_i62=$this_addr_i_i59;
 var $108=$this1_i_i62;
 $this_addr_i_i_i58=$108;
 var $this1_i_i_i63=$this_addr_i_i_i58;
 var $109=$this1_i_i_i63;
 var $110=$__nd;
 var $__value_14=(($110+16)|0);
 var $111=$__v_addr;
 $this_addr_i45=$109;
 $__x_addr_i=$__value_14;
 $__y_addr_i=$111;
 var $this1_i46=$this_addr_i45;
 var $112=$this1_i46;
 var $113=$__x_addr_i;
 var $__cc_i=(($113)|0);
 var $first_i=(($__cc_i)|0);
 var $114=$__y_addr_i;
 var $__cc2_i=(($114)|0);
 var $first3_i=(($__cc2_i)|0);
 $this_addr_i_i44=$112;
 $__x_addr_i_i=$first_i;
 $__y_addr_i_i=$first3_i;
 var $this1_i_i47=$this_addr_i_i44;
 var $115=$__x_addr_i_i;
 var $116=$__y_addr_i_i;
 $__lhs_addr_i_i_i=$115;
 $__rhs_addr_i_i_i=$116;
 var $117=$__lhs_addr_i_i_i;
 var $118=$__rhs_addr_i_i_i;
 $this_addr_i_i_i_i43=$117;
 $__str_addr_i_i_i_i=$118;
 var $this1_i_i_i_i48=$this_addr_i_i_i_i43;
 $this_addr_i_i_i_i_i=$this1_i_i_i_i48;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 $this_addr_i_i_i_i_i_i=$this1_i_i_i_i_i;
 var $this1_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i;
 var $__r__i_i_i_i_i_i=(($this1_i_i_i_i_i_i)|0);
 $this_addr_i_i_i_i_i_i_i=$__r__i_i_i_i_i_i;
 var $this1_i_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i_i;
 var $119=$this1_i_i_i_i_i_i_i;
 $this_addr_i_i_i_i_i_i_i_i=$119;
 var $this1_i_i_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i_i_i;
 var $__first__i_i_i_i_i_i_i_i=(($this1_i_i_i_i_i_i_i_i)|0);
 var $120=(($__first__i_i_i_i_i_i_i_i)|0);
 var $__s_i_i_i_i_i_i=$120;
 var $121=(($__s_i_i_i_i_i_i)|0);
 var $__size__i_i_i_i_i_i=$121;
 var $122=HEAP8[($__size__i_i_i_i_i_i)];
 var $conv_i_i_i_i_i_i=($122&255);
 var $and_i_i_i_i_i_i=$conv_i_i_i_i_i_i&1;
 var $tobool_i_i_i_i_i_i=($and_i_i_i_i_i_i|0)!=0;
 if($tobool_i_i_i_i_i_i){label=33;break;}else{label=34;break;}
 case 33: 
 $this_addr_i17_i_i_i_i_i=$this1_i_i_i_i_i;
 var $this1_i18_i_i_i_i_i=$this_addr_i17_i_i_i_i_i;
 var $__r__i19_i_i_i_i_i=(($this1_i18_i_i_i_i_i)|0);
 $this_addr_i_i16_i_i_i_i_i=$__r__i19_i_i_i_i_i;
 var $this1_i_i20_i_i_i_i_i=$this_addr_i_i16_i_i_i_i_i;
 var $123=$this1_i_i20_i_i_i_i_i;
 $this_addr_i_i_i15_i_i_i_i_i=$123;
 var $this1_i_i_i21_i_i_i_i_i=$this_addr_i_i_i15_i_i_i_i_i;
 var $__first__i_i_i22_i_i_i_i_i=(($this1_i_i_i21_i_i_i_i_i)|0);
 var $124=(($__first__i_i_i22_i_i_i_i_i)|0);
 var $__l_i_i_i_i_i_i=$124;
 var $__size__i23_i_i_i_i_i=(($__l_i_i_i_i_i_i+4)|0);
 var $125=HEAP32[(($__size__i23_i_i_i_i_i)>>2)];
 var $cond_i_i_i_i_i=$125;label=35;break;
 case 34: 
 $this_addr_i6_i_i_i_i_i=$this1_i_i_i_i_i;
 var $this1_i7_i_i_i_i_i=$this_addr_i6_i_i_i_i_i;
 var $__r__i8_i_i_i_i_i=(($this1_i7_i_i_i_i_i)|0);
 $this_addr_i_i5_i_i_i_i_i=$__r__i8_i_i_i_i_i;
 var $this1_i_i9_i_i_i_i_i=$this_addr_i_i5_i_i_i_i_i;
 var $126=$this1_i_i9_i_i_i_i_i;
 $this_addr_i_i_i4_i_i_i_i_i=$126;
 var $this1_i_i_i10_i_i_i_i_i=$this_addr_i_i_i4_i_i_i_i_i;
 var $__first__i_i_i11_i_i_i_i_i=(($this1_i_i_i10_i_i_i_i_i)|0);
 var $127=(($__first__i_i_i11_i_i_i_i_i)|0);
 var $__s_i12_i_i_i_i_i=$127;
 var $128=(($__s_i12_i_i_i_i_i)|0);
 var $__size__i13_i_i_i_i_i=$128;
 var $129=HEAP8[($__size__i13_i_i_i_i_i)];
 var $conv_i14_i_i_i_i_i=($129&255);
 var $shr_i_i_i_i_i_i=$conv_i14_i_i_i_i_i>>1;
 var $cond_i_i_i_i_i=$shr_i_i_i_i_i_i;label=35;break;
 case 35: 
 var $cond_i_i_i_i_i;
 HEAP32[(($__lhs_sz_i_i_i_i)>>2)]=$cond_i_i_i_i_i;
 var $130=$__str_addr_i_i_i_i;
 $this_addr_i24_i_i_i_i=$130;
 var $this1_i25_i_i_i_i=$this_addr_i24_i_i_i_i;
 $this_addr_i_i23_i_i_i_i=$this1_i25_i_i_i_i;
 var $this1_i_i26_i_i_i_i=$this_addr_i_i23_i_i_i_i;
 var $__r__i_i27_i_i_i_i=(($this1_i_i26_i_i_i_i)|0);
 $this_addr_i_i_i22_i_i_i_i=$__r__i_i27_i_i_i_i;
 var $this1_i_i_i28_i_i_i_i=$this_addr_i_i_i22_i_i_i_i;
 var $131=$this1_i_i_i28_i_i_i_i;
 $this_addr_i_i_i_i21_i_i_i_i=$131;
 var $this1_i_i_i_i29_i_i_i_i=$this_addr_i_i_i_i21_i_i_i_i;
 var $__first__i_i_i_i30_i_i_i_i=(($this1_i_i_i_i29_i_i_i_i)|0);
 var $132=(($__first__i_i_i_i30_i_i_i_i)|0);
 var $__s_i_i31_i_i_i_i=$132;
 var $133=(($__s_i_i31_i_i_i_i)|0);
 var $__size__i_i32_i_i_i_i=$133;
 var $134=HEAP8[($__size__i_i32_i_i_i_i)];
 var $conv_i_i33_i_i_i_i=($134&255);
 var $and_i_i34_i_i_i_i=$conv_i_i33_i_i_i_i&1;
 var $tobool_i_i35_i_i_i_i=($and_i_i34_i_i_i_i|0)!=0;
 if($tobool_i_i35_i_i_i_i){label=36;break;}else{label=37;break;}
 case 36: 
 $this_addr_i17_i17_i_i_i_i=$this1_i25_i_i_i_i;
 var $this1_i18_i36_i_i_i_i=$this_addr_i17_i17_i_i_i_i;
 var $__r__i19_i37_i_i_i_i=(($this1_i18_i36_i_i_i_i)|0);
 $this_addr_i_i16_i16_i_i_i_i=$__r__i19_i37_i_i_i_i;
 var $this1_i_i20_i38_i_i_i_i=$this_addr_i_i16_i16_i_i_i_i;
 var $135=$this1_i_i20_i38_i_i_i_i;
 $this_addr_i_i_i15_i15_i_i_i_i=$135;
 var $this1_i_i_i21_i39_i_i_i_i=$this_addr_i_i_i15_i15_i_i_i_i;
 var $__first__i_i_i22_i40_i_i_i_i=(($this1_i_i_i21_i39_i_i_i_i)|0);
 var $136=(($__first__i_i_i22_i40_i_i_i_i)|0);
 var $__l_i_i41_i_i_i_i=$136;
 var $__size__i23_i42_i_i_i_i=(($__l_i_i41_i_i_i_i+4)|0);
 var $137=HEAP32[(($__size__i23_i42_i_i_i_i)>>2)];
 var $cond_i54_i_i_i_i=$137;label=38;break;
 case 37: 
 $this_addr_i6_i20_i_i_i_i=$this1_i25_i_i_i_i;
 var $this1_i7_i44_i_i_i_i=$this_addr_i6_i20_i_i_i_i;
 var $__r__i8_i45_i_i_i_i=(($this1_i7_i44_i_i_i_i)|0);
 $this_addr_i_i5_i19_i_i_i_i=$__r__i8_i45_i_i_i_i;
 var $this1_i_i9_i46_i_i_i_i=$this_addr_i_i5_i19_i_i_i_i;
 var $138=$this1_i_i9_i46_i_i_i_i;
 $this_addr_i_i_i4_i18_i_i_i_i=$138;
 var $this1_i_i_i10_i47_i_i_i_i=$this_addr_i_i_i4_i18_i_i_i_i;
 var $__first__i_i_i11_i48_i_i_i_i=(($this1_i_i_i10_i47_i_i_i_i)|0);
 var $139=(($__first__i_i_i11_i48_i_i_i_i)|0);
 var $__s_i12_i49_i_i_i_i=$139;
 var $140=(($__s_i12_i49_i_i_i_i)|0);
 var $__size__i13_i50_i_i_i_i=$140;
 var $141=HEAP8[($__size__i13_i50_i_i_i_i)];
 var $conv_i14_i51_i_i_i_i=($141&255);
 var $shr_i_i52_i_i_i_i=$conv_i14_i51_i_i_i_i>>1;
 var $cond_i54_i_i_i_i=$shr_i_i52_i_i_i_i;label=38;break;
 case 38: 
 var $cond_i54_i_i_i_i;
 HEAP32[(($__rhs_sz_i_i_i_i)>>2)]=$cond_i54_i_i_i_i;
 $this_addr_i81_i_i_i_i=$this1_i_i_i_i48;
 var $this1_i82_i_i_i_i=$this_addr_i81_i_i_i_i;
 $this_addr_i_i80_i_i_i_i=$this1_i82_i_i_i_i;
 var $this1_i_i83_i_i_i_i=$this_addr_i_i80_i_i_i_i;
 $this_addr_i_i_i79_i_i_i_i=$this1_i_i83_i_i_i_i;
 var $this1_i_i_i84_i_i_i_i=$this_addr_i_i_i79_i_i_i_i;
 var $__r__i_i_i85_i_i_i_i=(($this1_i_i_i84_i_i_i_i)|0);
 $this_addr_i_i_i_i78_i_i_i_i=$__r__i_i_i85_i_i_i_i;
 var $this1_i_i_i_i86_i_i_i_i=$this_addr_i_i_i_i78_i_i_i_i;
 var $142=$this1_i_i_i_i86_i_i_i_i;
 $this_addr_i_i_i_i_i77_i_i_i_i=$142;
 var $this1_i_i_i_i_i87_i_i_i_i=$this_addr_i_i_i_i_i77_i_i_i_i;
 var $__first__i_i_i_i_i88_i_i_i_i=(($this1_i_i_i_i_i87_i_i_i_i)|0);
 var $143=(($__first__i_i_i_i_i88_i_i_i_i)|0);
 var $__s_i_i_i89_i_i_i_i=$143;
 var $144=(($__s_i_i_i89_i_i_i_i)|0);
 var $__size__i_i_i90_i_i_i_i=$144;
 var $145=HEAP8[($__size__i_i_i90_i_i_i_i)];
 var $conv_i_i_i91_i_i_i_i=($145&255);
 var $and_i_i_i92_i_i_i_i=$conv_i_i_i91_i_i_i_i&1;
 var $tobool_i_i_i93_i_i_i_i=($and_i_i_i92_i_i_i_i|0)!=0;
 if($tobool_i_i_i93_i_i_i_i){label=39;break;}else{label=40;break;}
 case 39: 
 $this_addr_i15_i_i71_i_i_i_i=$this1_i_i83_i_i_i_i;
 var $this1_i16_i_i94_i_i_i_i=$this_addr_i15_i_i71_i_i_i_i;
 var $__r__i17_i_i95_i_i_i_i=(($this1_i16_i_i94_i_i_i_i)|0);
 $this_addr_i_i14_i_i70_i_i_i_i=$__r__i17_i_i95_i_i_i_i;
 var $this1_i_i18_i_i96_i_i_i_i=$this_addr_i_i14_i_i70_i_i_i_i;
 var $146=$this1_i_i18_i_i96_i_i_i_i;
 $this_addr_i_i_i13_i_i69_i_i_i_i=$146;
 var $this1_i_i_i19_i_i97_i_i_i_i=$this_addr_i_i_i13_i_i69_i_i_i_i;
 var $__first__i_i_i20_i_i98_i_i_i_i=(($this1_i_i_i19_i_i97_i_i_i_i)|0);
 var $147=(($__first__i_i_i20_i_i98_i_i_i_i)|0);
 var $__l_i_i_i99_i_i_i_i=$147;
 var $__data__i21_i_i100_i_i_i_i=(($__l_i_i_i99_i_i_i_i+8)|0);
 var $148=HEAP32[(($__data__i21_i_i100_i_i_i_i)>>2)];
 var $cond_i_i111_i_i_i_i=$148;label=41;break;
 case 40: 
 $this_addr_i6_i_i76_i_i_i_i=$this1_i_i83_i_i_i_i;
 var $this1_i7_i_i102_i_i_i_i=$this_addr_i6_i_i76_i_i_i_i;
 var $__r__i8_i_i103_i_i_i_i=(($this1_i7_i_i102_i_i_i_i)|0);
 $this_addr_i_i5_i_i75_i_i_i_i=$__r__i8_i_i103_i_i_i_i;
 var $this1_i_i9_i_i104_i_i_i_i=$this_addr_i_i5_i_i75_i_i_i_i;
 var $149=$this1_i_i9_i_i104_i_i_i_i;
 $this_addr_i_i_i4_i_i74_i_i_i_i=$149;
 var $this1_i_i_i10_i_i105_i_i_i_i=$this_addr_i_i_i4_i_i74_i_i_i_i;
 var $__first__i_i_i11_i_i106_i_i_i_i=(($this1_i_i_i10_i_i105_i_i_i_i)|0);
 var $150=(($__first__i_i_i11_i_i106_i_i_i_i)|0);
 var $__s_i12_i_i107_i_i_i_i=$150;
 var $__data__i_i_i108_i_i_i_i=(($__s_i12_i_i107_i_i_i_i+1)|0);
 var $arrayidx_i_i_i109_i_i_i_i=(($__data__i_i_i108_i_i_i_i)|0);
 $__r_addr_i_i_i_i73_i_i_i_i=$arrayidx_i_i_i109_i_i_i_i;
 var $151=$__r_addr_i_i_i_i73_i_i_i_i;
 $__x_addr_i_i_i_i_i72_i_i_i_i=$151;
 var $152=$__x_addr_i_i_i_i_i72_i_i_i_i;
 var $cond_i_i111_i_i_i_i=$152;label=41;break;
 case 41: 
 var $cond_i_i111_i_i_i_i;
 $__p_addr_i_i68_i_i_i_i=$cond_i_i111_i_i_i_i;
 var $153=$__p_addr_i_i68_i_i_i_i;
 var $154=$__str_addr_i_i_i_i;
 $this_addr_i61_i_i_i_i=$154;
 var $this1_i62_i_i_i_i=$this_addr_i61_i_i_i_i;
 $this_addr_i_i60_i_i_i_i=$this1_i62_i_i_i_i;
 var $this1_i_i63_i_i_i_i=$this_addr_i_i60_i_i_i_i;
 $this_addr_i_i_i59_i_i_i_i=$this1_i_i63_i_i_i_i;
 var $this1_i_i_i64_i_i_i_i=$this_addr_i_i_i59_i_i_i_i;
 var $__r__i_i_i_i_i_i_i=(($this1_i_i_i64_i_i_i_i)|0);
 $this_addr_i_i_i_i58_i_i_i_i=$__r__i_i_i_i_i_i_i;
 var $this1_i_i_i_i65_i_i_i_i=$this_addr_i_i_i_i58_i_i_i_i;
 var $155=$this1_i_i_i_i65_i_i_i_i;
 $this_addr_i_i_i_i_i_i_i_i_i=$155;
 var $this1_i_i_i_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i_i_i_i;
 var $__first__i_i_i_i_i_i_i_i_i=(($this1_i_i_i_i_i_i_i_i_i)|0);
 var $156=(($__first__i_i_i_i_i_i_i_i_i)|0);
 var $__s_i_i_i_i_i_i_i=$156;
 var $157=(($__s_i_i_i_i_i_i_i)|0);
 var $__size__i_i_i_i_i_i_i=$157;
 var $158=HEAP8[($__size__i_i_i_i_i_i_i)];
 var $conv_i_i_i_i_i_i_i=($158&255);
 var $and_i_i_i_i_i_i_i=$conv_i_i_i_i_i_i_i&1;
 var $tobool_i_i_i_i_i_i_i=($and_i_i_i_i_i_i_i|0)!=0;
 if($tobool_i_i_i_i_i_i_i){label=42;break;}else{label=43;break;}
 case 42: 
 $this_addr_i15_i_i_i_i_i_i=$this1_i_i63_i_i_i_i;
 var $this1_i16_i_i_i_i_i_i=$this_addr_i15_i_i_i_i_i_i;
 var $__r__i17_i_i_i_i_i_i=(($this1_i16_i_i_i_i_i_i)|0);
 $this_addr_i_i14_i_i_i_i_i_i=$__r__i17_i_i_i_i_i_i;
 var $this1_i_i18_i_i_i_i_i_i=$this_addr_i_i14_i_i_i_i_i_i;
 var $159=$this1_i_i18_i_i_i_i_i_i;
 $this_addr_i_i_i13_i_i_i_i_i_i=$159;
 var $this1_i_i_i19_i_i_i_i_i_i=$this_addr_i_i_i13_i_i_i_i_i_i;
 var $__first__i_i_i20_i_i_i_i_i_i=(($this1_i_i_i19_i_i_i_i_i_i)|0);
 var $160=(($__first__i_i_i20_i_i_i_i_i_i)|0);
 var $__l_i_i_i_i_i_i_i=$160;
 var $__data__i21_i_i_i_i_i_i=(($__l_i_i_i_i_i_i_i+8)|0);
 var $161=HEAP32[(($__data__i21_i_i_i_i_i_i)>>2)];
 var $cond_i_i_i_i_i_i=$161;label=44;break;
 case 43: 
 $this_addr_i6_i_i_i_i_i_i=$this1_i_i63_i_i_i_i;
 var $this1_i7_i_i_i_i_i_i=$this_addr_i6_i_i_i_i_i_i;
 var $__r__i8_i_i_i_i_i_i=(($this1_i7_i_i_i_i_i_i)|0);
 $this_addr_i_i5_i_i_i_i_i_i=$__r__i8_i_i_i_i_i_i;
 var $this1_i_i9_i_i_i_i_i_i=$this_addr_i_i5_i_i_i_i_i_i;
 var $162=$this1_i_i9_i_i_i_i_i_i;
 $this_addr_i_i_i4_i_i_i_i_i_i=$162;
 var $this1_i_i_i10_i_i_i_i_i_i=$this_addr_i_i_i4_i_i_i_i_i_i;
 var $__first__i_i_i11_i_i_i_i_i_i=(($this1_i_i_i10_i_i_i_i_i_i)|0);
 var $163=(($__first__i_i_i11_i_i_i_i_i_i)|0);
 var $__s_i12_i_i_i_i_i_i=$163;
 var $__data__i_i_i_i_i_i_i=(($__s_i12_i_i_i_i_i_i+1)|0);
 var $arrayidx_i_i_i_i_i_i_i=(($__data__i_i_i_i_i_i_i)|0);
 $__r_addr_i_i_i_i_i_i_i_i=$arrayidx_i_i_i_i_i_i_i;
 var $164=$__r_addr_i_i_i_i_i_i_i_i;
 $__x_addr_i_i_i_i_i_i_i_i_i=$164;
 var $165=$__x_addr_i_i_i_i_i_i_i_i_i;
 var $cond_i_i_i_i_i_i=$165;label=44;break;
 case 44: 
 var $cond_i_i_i_i_i_i;
 $__p_addr_i_i_i_i_i_i=$cond_i_i_i_i_i_i;
 var $166=$__p_addr_i_i_i_i_i_i;
 $__a_addr_i_i_i_i_i=$__lhs_sz_i_i_i_i;
 $__b_addr_i_i_i_i_i=$__rhs_sz_i_i_i_i;
 var $167=$__a_addr_i_i_i_i_i;
 var $168=$__b_addr_i_i_i_i_i;
 var $tmp_i_i_i_i_i=$agg_tmp1_i_i_i_i_i;
 var $tmp2_i_i_i_i_i=$agg_tmp_i_i_i_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp2_i_i_i_i_i)];
 $__a_addr_i_i_i_i_i_i=$167;
 $__b_addr_i_i_i_i_i_i=$168;
 var $169=$__b_addr_i_i_i_i_i_i;
 var $170=$__a_addr_i_i_i_i_i_i;
 $this_addr_i_i_i56_i_i_i_i=$agg_tmp1_i_i_i_i_i;
 $__x_addr_i_i_i_i_i_i_i=$169;
 $__y_addr_i_i_i_i_i_i_i=$170;
 var $this1_i_i_i57_i_i_i_i=$this_addr_i_i_i56_i_i_i_i;
 var $171=$__x_addr_i_i_i_i_i_i_i;
 var $172=HEAP32[(($171)>>2)];
 var $173=$__y_addr_i_i_i_i_i_i_i;
 var $174=HEAP32[(($173)>>2)];
 var $cmp_i_i_i_i_i_i_i=($172>>>0)<($174>>>0);
 if($cmp_i_i_i_i_i_i_i){label=45;break;}else{label=46;break;}
 case 45: 
 var $175=$__b_addr_i_i_i_i_i_i;
 var $cond_lvalue_i_i_i_i_i_i=$175;label=47;break;
 case 46: 
 var $176=$__a_addr_i_i_i_i_i_i;
 var $cond_lvalue_i_i_i_i_i_i=$176;label=47;break;
 case 47: 
 var $cond_lvalue_i_i_i_i_i_i;
 var $177=HEAP32[(($cond_lvalue_i_i_i_i_i_i)>>2)];
 $__s1_addr_i_i_i_i_i=$153;
 $__s2_addr_i_i_i_i_i=$166;
 $__n_addr_i_i_i_i_i=$177;
 var $178=$__s1_addr_i_i_i_i_i;
 var $179=$__s2_addr_i_i_i_i_i;
 var $180=$__n_addr_i_i_i_i_i;
 var $call_i14_i_i_i_i=(function() { try { __THREW__ = 0; return _memcmp($178,$179,$180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=50;break; }
 case 48: 
 $__result_i_i_i_i=$call_i14_i_i_i_i;
 var $181=$__result_i_i_i_i;
 var $cmp_i_i_i_i=($181|0)!=0;
 if($cmp_i_i_i_i){label=49;break;}else{label=51;break;}
 case 49: 
 var $182=$__result_i_i_i_i;
 $retval_i_i_i_i=$182;
 label=56;break;
 case 50: 
 var $183$0 = ___cxa_find_matching_catch(-1, -1); var $183$1 = tempRet0;
 var $184=$183$0;
 $exn_slot_i_i_i_i=$184;
 var $185=$183$1;
 $ehselector_slot_i_i_i_i=$185;
 var $exn_i_i_i_i=$exn_slot_i_i_i_i;
 ___cxa_call_unexpected($exn_i_i_i_i);
 throw "Reached an unreachable!";
 case 51: 
 var $186=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $187=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $cmp8_i_i_i_i=($186>>>0)<($187>>>0);
 if($cmp8_i_i_i_i){label=52;break;}else{label=53;break;}
 case 52: 
 $retval_i_i_i_i=-1;
 label=56;break;
 case 53: 
 var $188=HEAP32[(($__lhs_sz_i_i_i_i)>>2)];
 var $189=HEAP32[(($__rhs_sz_i_i_i_i)>>2)];
 var $cmp11_i_i_i_i=($188>>>0)>($189>>>0);
 if($cmp11_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 $retval_i_i_i_i=1;
 label=56;break;
 case 55: 
 $retval_i_i_i_i=0;
 label=56;break;
 case 56: 
 var $190=$retval_i_i_i_i;
 var $cmp_i_i_i=($190|0)<0;
 if($cmp_i_i_i){label=57;break;}else{label=61;break;}
 case 57: 
 var $191=$__nd;
 var $192=$191;
 var $__right_=(($192+4)|0);
 var $193=HEAP32[(($__right_)>>2)];
 $this_addr_i_i40=$tmp17;
 $_addr_i_i=-1;
 var $this1_i_i41=$this_addr_i_i40;
 var $194=$_addr_i_i;
 $this_addr_i_i_i39=$this1_i_i41;
 $_addr_i_i_i=$194;
 var $this1_i_i_i42=$this_addr_i_i_i39;
 var $__lx_i_i_i=(($this1_i_i_i42)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 $this_addr_i37=$tmp17;
 var $this1_i38=$this_addr_i37;
 var $cmp19=($193|0)!=0;
 if($cmp19){label=58;break;}else{label=59;break;}
 case 58: 
 var $195=$__nd;
 var $196=$195;
 var $__right_21=(($196+4)|0);
 var $197=HEAP32[(($__right_21)>>2)];
 var $198=$197;
 $__nd=$198;
 label=60;break;
 case 59: 
 var $199=$__nd;
 var $200=$199;
 var $201=$__parent_addr;
 HEAP32[(($201)>>2)]=$200;
 var $202=$__parent_addr;
 var $203=HEAP32[(($202)>>2)];
 var $__right_23=(($203+4)|0);
 $retval=$__right_23;
 label=65;break;
 case 60: 
 label=62;break;
 case 61: 
 var $204=$__nd;
 var $205=$204;
 var $206=$__parent_addr;
 HEAP32[(($206)>>2)]=$205;
 var $207=$__parent_addr;
 $retval=$207;
 label=65;break;
 case 62: 
 label=63;break;
 case 63: 
 label=3;break;
 case 64: 
 $this_addr_i33=$this1;
 var $this1_i34=$this_addr_i33;
 var $__pair1__i=(($this1_i34+4)|0);
 $this_addr_i_i32=$__pair1__i;
 var $this1_i_i35=$this_addr_i_i32;
 var $208=$this1_i_i35;
 $this_addr_i_i_i31=$208;
 var $this1_i_i_i36=$this_addr_i_i_i31;
 var $__first__i_i_i=(($this1_i_i_i36)|0);
 $__r_addr_i_i=$__first__i_i_i;
 var $209=$__r_addr_i_i;
 $__x_addr_i_i_i=$209;
 var $210=$__x_addr_i_i_i;
 var $211=$210;
 var $212=$211;
 var $213=$212;
 var $214=$213;
 var $215=$__parent_addr;
 HEAP32[(($215)>>2)]=$214;
 var $216=$__parent_addr;
 var $217=HEAP32[(($216)>>2)];
 var $218=$217;
 var $__left_30=(($218)|0);
 $retval=$__left_30;
 label=65;break;
 case 65: 
 var $219=$retval;
 STACKTOP=sp;return $219;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($agg_result,$this,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+520)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i13_i_i_i255;
 var $this_addr_i14_i_i_i256;
 var $this_addr_i_i8_i_i_i257;
 var $this_addr_i9_i_i_i258;
 var $_addr_i_i7_i_i_i_i259;
 var $__p_addr_i_i8_i_i_i_i260;
 var $agg_tmp1_i_i_i_i_i261=sp;
 var $__a_addr_i9_i_i_i_i262;
 var $__p_addr_i10_i_i_i_i263;
 var $agg_tmp_i_i_i_i_i264=(sp)+(8);
 var $ref_tmp_i_i_i_i_i265=(sp)+(16);
 var $this_addr_i_i_i_i_i_i266;
 var $__p_addr_i_i_i_i_i_i267;
 var $_addr_i_i_i_i_i_i268;
 var $__a_addr_i_i_i_i_i269;
 var $__p_addr_i_i_i_i_i270;
 var $__n_addr_i_i_i_i_i271;
 var $__x_addr_i_i_i_i_i272;
 var $this_addr_i6_i_i_i273;
 var $__p_addr_i_i_i_i274;
 var $exn_slot_i_i_i_i275;
 var $ehselector_slot_i_i_i_i276;
 var $this_addr_i_i_i_i_i277;
 var $this_addr_i_i_i_i278;
 var $this_addr_i_i_i279;
 var $__p_addr_i_i_i280;
 var $__tmp_i_i_i281;
 var $this_addr_i_i282;
 var $this_addr_i283;
 var $this_addr_i_i13_i_i_i189;
 var $this_addr_i14_i_i_i190;
 var $this_addr_i_i8_i_i_i191;
 var $this_addr_i9_i_i_i192;
 var $_addr_i_i7_i_i_i_i193;
 var $__p_addr_i_i8_i_i_i_i194;
 var $agg_tmp1_i_i_i_i_i195=(sp)+(24);
 var $__a_addr_i9_i_i_i_i196;
 var $__p_addr_i10_i_i_i_i197;
 var $agg_tmp_i_i_i_i_i198=(sp)+(32);
 var $ref_tmp_i_i_i_i_i199=(sp)+(40);
 var $this_addr_i_i_i_i_i_i200;
 var $__p_addr_i_i_i_i_i_i201;
 var $_addr_i_i_i_i_i_i202;
 var $__a_addr_i_i_i_i_i203;
 var $__p_addr_i_i_i_i_i204;
 var $__n_addr_i_i_i_i_i205;
 var $__x_addr_i_i_i_i_i206;
 var $this_addr_i6_i_i_i207;
 var $__p_addr_i_i_i_i208;
 var $exn_slot_i_i_i_i209;
 var $ehselector_slot_i_i_i_i210;
 var $this_addr_i_i_i_i_i211;
 var $this_addr_i_i_i_i212;
 var $this_addr_i_i_i213;
 var $__p_addr_i_i_i214;
 var $__tmp_i_i_i215;
 var $this_addr_i_i216;
 var $this_addr_i217;
 var $this_addr_i_i4_i_i_i;
 var $this_addr_i5_i_i_i;
 var $this_addr_i_i_i21_i_i;
 var $this_addr_i_i22_i_i;
 var $this_addr_i23_i_i;
 var $__t_i_i_i;
 var $this_addr_i17_i_i;
 var $this_addr_i_i_i10_i_i;
 var $this_addr_i_i11_i_i;
 var $this_addr_i12_i_i;
 var $__t_addr_i_i_i155;
 var $__t_addr_i5_i_i_i_i156;
 var $__t_addr_i3_i_i_i_i_i157;
 var $__t_addr_i_i_i_i_i_i158;
 var $this_addr_i_i_i_i_i159;
 var $__t1_addr_i_i_i_i_i160=(sp)+(48);
 var $agg_tmp3_i_i_i_i161=(sp)+(56);
 var $__t_addr_i_i_i_i_i162;
 var $this_addr_i_i_i_i163;
 var $__t1_addr_i_i_i_i164=(sp)+(64);
 var $agg_tmp_i_i_i_i165=(sp)+(72);
 var $__t22_i_i_i166=(sp)+(80);
 var $this_addr_i8_i_i;
 var $__t1_addr_i_i_i167;
 var $agg_tmp6_i_i=(sp)+(88);
 var $this_addr_i_i_i168;
 var $this_addr_i_i169;
 var $agg_tmp_i_i170=(sp)+(96);
 var $__u2_i=(sp)+(104);
 var $this_addr_i171;
 var $agg_tmp6152=(sp)+(112);
 var $this_addr_i_i_i144;
 var $__t_addr_i_i_i145;
 var $this_addr_i_i146;
 var $__t_addr_i_i147;
 var $this_addr_i148;
 var $this_addr_i_i13_i_i_i102_i;
 var $this_addr_i14_i_i_i103_i;
 var $this_addr_i_i8_i_i_i104_i;
 var $this_addr_i9_i_i_i105_i;
 var $_addr_i_i7_i_i_i_i106_i;
 var $__p_addr_i_i8_i_i_i_i107_i;
 var $agg_tmp1_i_i_i_i_i108_i=(sp)+(120);
 var $__a_addr_i9_i_i_i_i109_i;
 var $__p_addr_i10_i_i_i_i110_i;
 var $agg_tmp_i_i_i_i_i111_i=(sp)+(128);
 var $ref_tmp_i_i_i_i_i112_i=(sp)+(136);
 var $this_addr_i_i_i_i_i_i113_i;
 var $__p_addr_i_i_i_i_i_i114_i;
 var $_addr_i_i_i_i_i_i115_i;
 var $__a_addr_i_i_i_i_i116_i;
 var $__p_addr_i_i_i_i_i117_i;
 var $__n_addr_i_i_i_i_i118_i;
 var $__x_addr_i_i_i_i_i119_i;
 var $this_addr_i6_i_i_i120_i;
 var $__p_addr_i_i_i_i121_i;
 var $exn_slot_i_i_i_i122_i;
 var $ehselector_slot_i_i_i_i123_i;
 var $this_addr_i_i_i_i_i124_i;
 var $this_addr_i_i_i_i125_i;
 var $this_addr_i_i_i126_i;
 var $__p_addr_i_i_i127_i;
 var $__tmp_i_i_i128_i;
 var $this_addr_i_i129_i;
 var $this_addr_i130_i;
 var $this_addr_i_i4_i_i_i36_i;
 var $this_addr_i5_i_i_i37_i;
 var $this_addr_i_i_i21_i_i38_i;
 var $this_addr_i_i22_i_i39_i;
 var $this_addr_i23_i_i40_i;
 var $__t_i_i_i41_i;
 var $this_addr_i17_i_i42_i;
 var $this_addr_i_i_i10_i_i43_i;
 var $this_addr_i_i11_i_i44_i;
 var $this_addr_i12_i_i45_i;
 var $__t_addr_i_i_i46_i;
 var $__t_addr_i5_i_i_i_i47_i;
 var $__t_addr_i3_i_i_i_i_i48_i;
 var $__t_addr_i_i_i_i_i_i49_i;
 var $this_addr_i_i_i_i_i50_i;
 var $__t1_addr_i_i_i_i_i51_i=(sp)+(144);
 var $agg_tmp3_i_i_i_i52_i=(sp)+(152);
 var $__t_addr_i_i_i_i_i53_i;
 var $this_addr_i_i_i_i54_i;
 var $__t1_addr_i_i_i_i55_i=(sp)+(160);
 var $agg_tmp_i_i_i_i56_i=(sp)+(168);
 var $__t22_i_i_i57_i=(sp)+(176);
 var $this_addr_i8_i_i58_i;
 var $__t1_addr_i_i_i59_i;
 var $agg_tmp6_i_i60_i=(sp)+(184);
 var $this_addr_i_i_i61_i;
 var $this_addr_i_i62_i;
 var $agg_tmp_i_i63_i=(sp)+(192);
 var $__u2_i64_i=(sp)+(200);
 var $this_addr_i65_i;
 var $agg_tmp33_i=(sp)+(208);
 var $this_addr_i_i_i25_i;
 var $__t_addr_i_i_i26_i;
 var $this_addr_i_i27_i;
 var $__t_addr_i_i28_i;
 var $this_addr_i29_i;
 var $this_addr_i_i4_i_i_i_i;
 var $this_addr_i5_i_i_i_i;
 var $this_addr_i_i_i21_i_i_i;
 var $this_addr_i_i22_i_i_i;
 var $this_addr_i23_i_i_i;
 var $__t_i_i_i_i;
 var $this_addr_i17_i_i_i;
 var $this_addr_i_i_i10_i_i_i;
 var $this_addr_i_i11_i_i_i;
 var $this_addr_i12_i_i_i;
 var $__t_addr_i_i_i_i;
 var $__t_addr_i5_i_i_i_i_i;
 var $__t_addr_i3_i_i_i_i_i_i;
 var $__t_addr_i_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i11_i;
 var $__t1_addr_i_i_i_i_i_i=(sp)+(216);
 var $agg_tmp3_i_i_i_i_i=(sp)+(224);
 var $__t_addr_i_i_i_i_i_i122;
 var $this_addr_i_i_i_i12_i;
 var $__t1_addr_i_i_i_i_i123=(sp)+(232);
 var $agg_tmp_i_i_i_i_i124=(sp)+(240);
 var $__t22_i_i_i_i=(sp)+(248);
 var $this_addr_i8_i_i_i;
 var $__t1_addr_i_i_i_i125;
 var $agg_tmp6_i_i_i=(sp)+(256);
 var $this_addr_i_i_i13_i;
 var $this_addr_i_i14_i;
 var $agg_tmp_i_i_i=(sp)+(264);
 var $__u2_i_i=(sp)+(272);
 var $this_addr_i15_i;
 var $agg_tmp19_i=(sp)+(280);
 var $this_addr_i_i13_i_i_i_i;
 var $this_addr_i14_i_i_i_i;
 var $this_addr_i_i8_i_i_i_i;
 var $this_addr_i9_i_i_i_i;
 var $_addr_i_i7_i_i_i_i_i;
 var $__p_addr_i_i8_i_i_i_i_i;
 var $agg_tmp1_i_i_i_i_i_i=(sp)+(288);
 var $__a_addr_i9_i_i_i_i_i;
 var $__p_addr_i10_i_i_i_i_i;
 var $agg_tmp_i_i_i_i_i_i=(sp)+(296);
 var $ref_tmp_i_i_i_i_i_i=(sp)+(304);
 var $this_addr_i_i_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i_i_i;
 var $_addr_i_i_i_i_i_i_i;
 var $__a_addr_i_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i_i126;
 var $__n_addr_i_i_i_i_i_i;
 var $__x_addr_i_i_i_i_i_i;
 var $this_addr_i6_i_i_i_i;
 var $__p_addr_i_i_i_i_i127;
 var $exn_slot_i_i_i_i_i;
 var $ehselector_slot_i_i_i_i_i;
 var $this_addr_i_i_i_i_i_i128;
 var $this_addr_i_i_i_i_i129;
 var $this_addr_i_i_i_i130;
 var $__p_addr_i_i_i_i131;
 var $__tmp_i_i_i_i;
 var $this_addr_i_i5_i;
 var $this_addr_i6_i;
 var $this_addr_i_i_i132;
 var $__t_addr_i_i_i133;
 var $this_addr_i_i134;
 var $__t_addr_i_i;
 var $__t_addr_i;
 var $agg_tmp_i=(sp)+(312);
 var $temp_lvalue_i=(sp)+(320);
 var $agg_tmp1_i=(sp)+(336);
 var $exn_slot_i;
 var $ehselector_slot_i;
 var $this_addr_i_i_i115;
 var $this_addr_i_i116;
 var $this_addr_i117;
 var $__a_addr_i113;
 var $__p_addr_i114;
 var $__a0_addr_i;
 var $__x_addr_i;
 var $this_addr_i_i13_i_i_i47;
 var $this_addr_i14_i_i_i48;
 var $this_addr_i_i8_i_i_i49;
 var $this_addr_i9_i_i_i50;
 var $_addr_i_i7_i_i_i_i51;
 var $__p_addr_i_i8_i_i_i_i52;
 var $agg_tmp1_i_i_i_i_i53=(sp)+(344);
 var $__a_addr_i9_i_i_i_i54;
 var $__p_addr_i10_i_i_i_i55;
 var $agg_tmp_i_i_i_i_i56=(sp)+(352);
 var $ref_tmp_i_i_i_i_i57=(sp)+(360);
 var $this_addr_i_i_i_i_i_i58;
 var $__p_addr_i_i_i_i_i_i59;
 var $_addr_i_i_i_i_i_i60;
 var $__a_addr_i_i_i_i_i61;
 var $__p_addr_i_i_i_i_i62;
 var $__n_addr_i_i_i_i_i63;
 var $__x_addr_i_i_i_i_i64;
 var $this_addr_i6_i_i_i65;
 var $__p_addr_i_i_i_i66;
 var $exn_slot_i_i_i_i67;
 var $ehselector_slot_i_i_i_i68;
 var $this_addr_i_i_i_i_i69;
 var $this_addr_i_i_i_i70;
 var $this_addr_i_i_i71;
 var $__p_addr_i_i_i72;
 var $__tmp_i_i_i73;
 var $this_addr_i_i74;
 var $this_addr_i75;
 var $this_addr_i_i_i41;
 var $this_addr_i_i42;
 var $this_addr_i43;
 var $__t_addr_i5_i_i;
 var $__t_addr_i5_i_i_i_i;
 var $__t_addr_i3_i_i_i_i_i;
 var $__t_addr_i_i_i_i_i_i;
 var $this_addr_i_i_i_i_i29;
 var $__t1_addr_i_i_i_i_i=(sp)+(368);
 var $agg_tmp3_i_i_i_i=(sp)+(376);
 var $__t_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i30;
 var $__t1_addr_i_i_i_i=(sp)+(384);
 var $agg_tmp_i_i_i_i=(sp)+(392);
 var $__t22_i_i_i=(sp)+(400);
 var $this_addr_i_i_i31;
 var $__t1_addr_i_i_i;
 var $agg_tmp3_i_i=(sp)+(408);
 var $__t_addr_i_i_i;
 var $this_addr_i_i32;
 var $__p_addr_i_i=(sp)+(416);
 var $agg_tmp_i_i=(sp)+(424);
 var $__d2_i=(sp)+(432);
 var $this_addr_i33;
 var $__p_addr_i;
 var $agg_tmp27=(sp)+(440);
 var $this_addr_i_i23;
 var $__na_addr_i_i;
 var $this_addr_i24;
 var $__na_addr_i;
 var $this_addr_i_i21;
 var $__n_addr_i_i;
 var $_addr_i_i;
 var $__a_addr_i;
 var $__n_addr_i;
 var $this_addr_i_i13_i_i_i;
 var $this_addr_i14_i_i_i;
 var $this_addr_i_i8_i_i_i;
 var $this_addr_i9_i_i_i;
 var $_addr_i_i7_i_i_i_i;
 var $__p_addr_i_i8_i_i_i_i;
 var $agg_tmp1_i_i_i_i_i=(sp)+(448);
 var $__a_addr_i9_i_i_i_i;
 var $__p_addr_i10_i_i_i_i;
 var $agg_tmp_i_i_i_i_i=(sp)+(456);
 var $ref_tmp_i_i_i_i_i=(sp)+(464);
 var $this_addr_i_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i_i;
 var $_addr_i_i_i_i_i_i;
 var $__a_addr_i_i_i_i_i;
 var $__p_addr_i_i_i_i_i;
 var $__n_addr_i_i_i_i_i;
 var $__x_addr_i_i_i_i_i;
 var $this_addr_i6_i_i_i;
 var $__p_addr_i_i_i_i;
 var $exn_slot_i_i_i_i;
 var $ehselector_slot_i_i_i_i;
 var $this_addr_i_i_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i15;
 var $__p_addr_i_i_i;
 var $__tmp_i_i_i;
 var $this_addr_i_i16;
 var $this_addr_i17;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $this_addr;
 var $__v_addr;
 var $__na;
 var $__h=(sp)+(472);
 var $agg_tmp=(sp)+(488);
 var $exn_slot;
 var $ehselector_slot;
 var $agg_tmp6=(sp)+(496);
 var $temp_lvalue=(sp)+(504);
 var $cleanup_dest_slot;
 $this_addr=$this;
 $__v_addr=$__v;
 var $this1=$this_addr;
 $this_addr_i=$this1;
 var $this1_i=$this_addr_i;
 var $__pair1__i=(($this1_i+4)|0);
 $this_addr_i_i=$__pair1__i;
 var $this1_i_i=$this_addr_i_i;
 var $0=$this1_i_i;
 $this_addr_i_i_i=$0;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $1=$this1_i_i_i;
 $__na=$1;
 var $2=$__na;
 $__a_addr_i=$2;
 $__n_addr_i=1;
 var $3=$__a_addr_i;
 var $4=$__n_addr_i;
 $this_addr_i_i21=$3;
 $__n_addr_i_i=$4;
 $_addr_i_i=0;
 var $this1_i_i22=$this_addr_i_i21;
 var $5=$__n_addr_i_i;
 var $mul_i_i=($5<<5);
 var $call_i_i=__Znwj($mul_i_i);
 var $6=$call_i_i;
 var $7=$__na;
 $this_addr_i24=$agg_tmp;
 $__na_addr_i=$7;
 var $this1_i25=$this_addr_i24;
 var $8=$__na_addr_i;
 $this_addr_i_i23=$this1_i25;
 $__na_addr_i_i=$8;
 var $this1_i_i26=$this_addr_i_i23;
 var $9=(($this1_i_i26)|0);
 var $10=$__na_addr_i_i;
 HEAP32[(($9)>>2)]=$10;
 var $__value_constructed_i_i=(($this1_i_i26+4)|0);
 HEAP8[($__value_constructed_i_i)]=0;
 var $tmp=$agg_tmp27;
 var $tmp28=$agg_tmp;
 assert(8 % 1 === 0);(_memcpy($tmp, $tmp28, 8)|0);
 $this_addr_i33=$__h;
 $__p_addr_i=$6;
 var $this1_i34=$this_addr_i33;
 var $11=$__p_addr_i;
 var $tmp_i=$__d2_i;
 var $tmp3_i=$agg_tmp27;
 assert(8 % 1 === 0);(_memcpy($tmp_i, $tmp3_i, 8)|0);
 $this_addr_i_i32=$this1_i34;
 HEAP32[(($__p_addr_i_i)>>2)]=$11;
 var $this1_i_i35=$this_addr_i_i32;
 var $__ptr__i_i=(($this1_i_i35)|0);
 $__t_addr_i_i_i=$__p_addr_i_i;
 var $12=$__t_addr_i_i_i;
 var $13=HEAP32[(($12)>>2)];
 $__t_addr_i5_i_i=$__d2_i;
 var $14=$__t_addr_i5_i_i;
 var $15=$agg_tmp_i_i;
 var $16=$14;
 assert(8 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];
 var $tmp_i_i=$agg_tmp3_i_i;
 var $tmp4_i_i=$agg_tmp_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i, $tmp4_i_i, 8)|0);
 $this_addr_i_i_i31=$__ptr__i_i;
 $__t1_addr_i_i_i=$13;
 var $this1_i_i_i36=$this_addr_i_i_i31;
 var $17=$__t1_addr_i_i_i;
 var $tmp_i_i_i=$__t22_i_i_i;
 var $tmp3_i_i_i=$agg_tmp3_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i, $tmp3_i_i_i, 8)|0);
 $this_addr_i_i_i_i30=$this1_i_i_i36;
 HEAP32[(($__t1_addr_i_i_i_i)>>2)]=$17;
 var $this1_i_i_i_i37=$this_addr_i_i_i_i30;
 var $18=$this1_i_i_i_i37;
 $__t_addr_i_i_i_i_i=$__t1_addr_i_i_i_i;
 var $19=$__t_addr_i_i_i_i_i;
 var $20=HEAP32[(($19)>>2)];
 $__t_addr_i5_i_i_i_i=$__t22_i_i_i;
 var $21=$__t_addr_i5_i_i_i_i;
 var $22=$agg_tmp_i_i_i_i;
 var $23=$21;
 assert(8 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
 var $tmp_i_i_i_i=$agg_tmp3_i_i_i_i;
 var $tmp4_i_i_i_i=$agg_tmp_i_i_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i, $tmp4_i_i_i_i, 8)|0);
 $this_addr_i_i_i_i_i29=$18;
 HEAP32[(($__t1_addr_i_i_i_i_i)>>2)]=$20;
 var $this1_i_i_i_i_i38=$this_addr_i_i_i_i_i29;
 var $__first__i_i_i_i_i39=(($this1_i_i_i_i_i38)|0);
 $__t_addr_i_i_i_i_i_i=$__t1_addr_i_i_i_i_i;
 var $24=$__t_addr_i_i_i_i_i_i;
 var $25=HEAP32[(($24)>>2)];
 HEAP32[(($__first__i_i_i_i_i39)>>2)]=$25;
 var $__second__i_i_i_i_i40=(($this1_i_i_i_i_i38+4)|0);
 $__t_addr_i3_i_i_i_i_i=$agg_tmp3_i_i_i_i;
 var $26=$__t_addr_i3_i_i_i_i_i;
 var $27=$__second__i_i_i_i_i40;
 var $28=$26;
 assert(8 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];
 var $29=$__na;
 $this_addr_i43=$__h;
 var $this1_i44=$this_addr_i43;
 var $__ptr__i=(($this1_i44)|0);
 $this_addr_i_i42=$__ptr__i;
 var $this1_i_i45=$this_addr_i_i42;
 var $30=$this1_i_i45;
 $this_addr_i_i_i41=$30;
 var $this1_i_i_i46=$this_addr_i_i_i41;
 var $__first__i_i_i=(($this1_i_i_i46)|0);
 var $31=HEAP32[(($__first__i_i_i)>>2)];
 var $__value_=(($31+16)|0);
 $__x_addr_i=$__value_;
 var $32=$__x_addr_i;
 var $33=$32;
 var $34=$33;
 var $35=$__v_addr;
 $__a_addr_i113=$29;
 $__p_addr_i114=$34;
 $__a0_addr_i=$35;
 var $36=$__p_addr_i114;
 var $37=$36;
 var $new_isnull_i=($37|0)==0;
 if($new_isnull_i){var $40=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $38=$37;
 var $39=$__a0_addr_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_($38,$39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=34;break; }
 case 3: 
 var $40=$38;label=4;break;
 case 4: 
 var $40;
 label=5;break;
 case 5: 
 $this_addr_i117=$__h;
 var $this1_i118=$this_addr_i117;
 var $__ptr__i119=(($this1_i118)|0);
 $this_addr_i_i116=$__ptr__i119;
 var $this1_i_i120=$this_addr_i_i116;
 var $41=$this1_i_i120;
 $this_addr_i_i_i115=$41;
 var $this1_i_i_i121=$this_addr_i_i_i115;
 var $__second__i_i_i=(($this1_i_i_i121+4)|0);
 var $__value_constructed=(($__second__i_i_i+4)|0);
 HEAP8[($__value_constructed)]=1;
 $__t_addr_i=$__h;
 var $42=$__t_addr_i;
 $this_addr_i_i134=$agg_tmp1_i;
 $__t_addr_i_i=$42;
 var $this1_i_i135=$this_addr_i_i134;
 var $43=$__t_addr_i_i;
 $this_addr_i_i_i132=$this1_i_i135;
 $__t_addr_i_i_i133=$43;
 var $this1_i_i_i136=$this_addr_i_i_i132;
 var $44=(($this1_i_i_i136)|0);
 var $45=$__t_addr_i_i_i133;
 HEAP32[(($44)>>2)]=$45;
 var $tmp_i137=$agg_tmp19_i;
 var $tmp10_i=$agg_tmp1_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i137)]=HEAP8[($tmp10_i)];HEAP8[((($tmp_i137)+(1))|0)]=HEAP8[((($tmp10_i)+(1))|0)];HEAP8[((($tmp_i137)+(2))|0)]=HEAP8[((($tmp10_i)+(2))|0)];HEAP8[((($tmp_i137)+(3))|0)]=HEAP8[((($tmp10_i)+(3))|0)];
 $this_addr_i15_i=$temp_lvalue_i;
 var $this1_i16_i=$this_addr_i15_i;
 var $tmp_i_i138=$__u2_i_i;
 var $tmp3_i_i=$agg_tmp19_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i_i138)]=HEAP8[($tmp3_i_i)];HEAP8[((($tmp_i_i138)+(1))|0)]=HEAP8[((($tmp3_i_i)+(1))|0)];HEAP8[((($tmp_i_i138)+(2))|0)]=HEAP8[((($tmp3_i_i)+(2))|0)];HEAP8[((($tmp_i_i138)+(3))|0)]=HEAP8[((($tmp3_i_i)+(3))|0)];
 $this_addr_i_i14_i=$this1_i16_i;
 var $this1_i_i17_i=$this_addr_i_i14_i;
 var $__ptr__i_i_i139=(($this1_i_i17_i)|0);
 $this_addr_i_i_i13_i=$__u2_i_i;
 var $this1_i_i_i18_i=$this_addr_i_i_i13_i;
 var $t__i_i_i_i=(($this1_i_i_i18_i)|0);
 var $ref_i_i_i_i140=HEAP32[(($t__i_i_i_i)>>2)];
 $this_addr_i23_i_i_i=$ref_i_i_i_i140;
 var $this1_i24_i_i_i=$this_addr_i23_i_i_i;
 var $__ptr__i25_i_i_i=(($this1_i24_i_i_i)|0);
 $this_addr_i_i22_i_i_i=$__ptr__i25_i_i_i;
 var $this1_i_i26_i_i_i=$this_addr_i_i22_i_i_i;
 var $46=$this1_i_i26_i_i_i;
 $this_addr_i_i_i21_i_i_i=$46;
 var $this1_i_i_i27_i_i_i=$this_addr_i_i_i21_i_i_i;
 var $__first__i_i_i28_i_i_i=(($this1_i_i_i27_i_i_i)|0);
 var $47=HEAP32[(($__first__i_i_i28_i_i_i)>>2)];
 $__t_i_i_i_i=$47;
 var $__ptr_2_i_i_i19_i=(($this1_i24_i_i_i)|0);
 $this_addr_i5_i_i_i_i=$__ptr_2_i_i_i19_i;
 var $this1_i6_i_i_i_i=$this_addr_i5_i_i_i_i;
 var $48=$this1_i6_i_i_i_i;
 $this_addr_i_i4_i_i_i_i=$48;
 var $this1_i_i7_i_i_i_i=$this_addr_i_i4_i_i_i_i;
 var $__first__i_i8_i_i_i_i=(($this1_i_i7_i_i_i_i)|0);
 HEAP32[(($__first__i_i8_i_i_i_i)>>2)]=0;
 var $49=$__t_i_i_i_i;
 $this_addr_i17_i_i_i=$__u2_i_i;
 var $this1_i18_i_i_i=$this_addr_i17_i_i_i;
 var $t__i19_i_i_i=(($this1_i18_i_i_i)|0);
 var $ref_i20_i_i_i=HEAP32[(($t__i19_i_i_i)>>2)];
 $this_addr_i12_i_i_i=$ref_i20_i_i_i;
 var $this1_i13_i_i_i=$this_addr_i12_i_i_i;
 var $__ptr__i_i_i20_i=(($this1_i13_i_i_i)|0);
 $this_addr_i_i11_i_i_i=$__ptr__i_i_i20_i;
 var $this1_i_i14_i_i_i=$this_addr_i_i11_i_i_i;
 var $50=$this1_i_i14_i_i_i;
 $this_addr_i_i_i10_i_i_i=$50;
 var $this1_i_i_i15_i_i_i=$this_addr_i_i_i10_i_i_i;
 var $__second__i_i_i16_i_i_i=(($this1_i_i_i15_i_i_i+4)|0);
 $__t_addr_i_i_i_i=$__second__i_i_i16_i_i_i;
 var $51=$__t_addr_i_i_i_i;
 var $52=$agg_tmp_i_i_i;
 var $53=$51;
 assert(8 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];
 var $tmp_i_i_i141=$agg_tmp6_i_i_i;
 var $tmp7_i_i_i=$agg_tmp_i_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i141, $tmp7_i_i_i, 8)|0);
 $this_addr_i8_i_i_i=$__ptr__i_i_i139;
 $__t1_addr_i_i_i_i125=$49;
 var $this1_i9_i_i_i=$this_addr_i8_i_i_i;
 var $54=$__t1_addr_i_i_i_i125;
 var $tmp_i_i_i_i142=$__t22_i_i_i_i;
 var $tmp3_i_i_i_i=$agg_tmp6_i_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i142, $tmp3_i_i_i_i, 8)|0);
 $this_addr_i_i_i_i12_i=$this1_i9_i_i_i;
 HEAP32[(($__t1_addr_i_i_i_i_i123)>>2)]=$54;
 var $this1_i_i_i_i21_i=$this_addr_i_i_i_i12_i;
 var $55=$this1_i_i_i_i21_i;
 $__t_addr_i_i_i_i_i_i122=$__t1_addr_i_i_i_i_i123;
 var $56=$__t_addr_i_i_i_i_i_i122;
 var $57=HEAP32[(($56)>>2)];
 $__t_addr_i5_i_i_i_i_i=$__t22_i_i_i_i;
 var $58=$__t_addr_i5_i_i_i_i_i;
 var $59=$agg_tmp_i_i_i_i_i124;
 var $60=$58;
 assert(8 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];
 var $tmp_i_i_i_i_i143=$agg_tmp3_i_i_i_i_i;
 var $tmp4_i_i_i_i_i=$agg_tmp_i_i_i_i_i124;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i_i143, $tmp4_i_i_i_i_i, 8)|0);
 $this_addr_i_i_i_i_i11_i=$55;
 HEAP32[(($__t1_addr_i_i_i_i_i_i)>>2)]=$57;
 var $this1_i_i_i_i_i22_i=$this_addr_i_i_i_i_i11_i;
 var $__first__i_i_i_i_i23_i=(($this1_i_i_i_i_i22_i)|0);
 $__t_addr_i_i_i_i_i_i_i=$__t1_addr_i_i_i_i_i_i;
 var $61=$__t_addr_i_i_i_i_i_i_i;
 var $62=HEAP32[(($61)>>2)];
 HEAP32[(($__first__i_i_i_i_i23_i)>>2)]=$62;
 var $__second__i_i_i_i_i24_i=(($this1_i_i_i_i_i22_i+4)|0);
 $__t_addr_i3_i_i_i_i_i_i=$agg_tmp3_i_i_i_i_i;
 var $63=$__t_addr_i3_i_i_i_i_i_i;
 var $64=$__second__i_i_i_i_i24_i;
 var $65=$63;
 assert(8 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];
 $this_addr_i29_i=$temp_lvalue_i;
 var $this1_i30_i=$this_addr_i29_i;
 $this_addr_i_i27_i=$agg_tmp_i;
 $__t_addr_i_i28_i=$this1_i30_i;
 var $this1_i_i31_i=$this_addr_i_i27_i;
 var $66=$__t_addr_i_i28_i;
 $this_addr_i_i_i25_i=$this1_i_i31_i;
 $__t_addr_i_i_i26_i=$66;
 var $this1_i_i_i32_i=$this_addr_i_i_i25_i;
 var $67=(($this1_i_i_i32_i)|0);
 var $68=$__t_addr_i_i_i26_i;
 HEAP32[(($67)>>2)]=$68;
 var $tmp34_i=$agg_tmp33_i;
 var $tmp35_i=$agg_tmp_i;
 assert(4 % 1 === 0);HEAP8[($tmp34_i)]=HEAP8[($tmp35_i)];HEAP8[((($tmp34_i)+(1))|0)]=HEAP8[((($tmp35_i)+(1))|0)];HEAP8[((($tmp34_i)+(2))|0)]=HEAP8[((($tmp35_i)+(2))|0)];HEAP8[((($tmp34_i)+(3))|0)]=HEAP8[((($tmp35_i)+(3))|0)];
 $this_addr_i65_i=$temp_lvalue;
 var $this1_i66_i=$this_addr_i65_i;
 var $tmp_i67_i=$__u2_i64_i;
 var $tmp3_i68_i=$agg_tmp33_i;
 assert(4 % 1 === 0);HEAP8[($tmp_i67_i)]=HEAP8[($tmp3_i68_i)];HEAP8[((($tmp_i67_i)+(1))|0)]=HEAP8[((($tmp3_i68_i)+(1))|0)];HEAP8[((($tmp_i67_i)+(2))|0)]=HEAP8[((($tmp3_i68_i)+(2))|0)];HEAP8[((($tmp_i67_i)+(3))|0)]=HEAP8[((($tmp3_i68_i)+(3))|0)];
 $this_addr_i_i62_i=$this1_i66_i;
 var $this1_i_i69_i=$this_addr_i_i62_i;
 var $__ptr__i_i70_i=(($this1_i_i69_i)|0);
 $this_addr_i_i_i61_i=$__u2_i64_i;
 var $this1_i_i_i71_i=$this_addr_i_i_i61_i;
 var $t__i_i_i72_i=(($this1_i_i_i71_i)|0);
 var $ref_i_i_i73_i=HEAP32[(($t__i_i_i72_i)>>2)];
 $this_addr_i23_i_i40_i=$ref_i_i_i73_i;
 var $this1_i24_i_i74_i=$this_addr_i23_i_i40_i;
 var $__ptr__i25_i_i75_i=(($this1_i24_i_i74_i)|0);
 $this_addr_i_i22_i_i39_i=$__ptr__i25_i_i75_i;
 var $this1_i_i26_i_i76_i=$this_addr_i_i22_i_i39_i;
 var $69=$this1_i_i26_i_i76_i;
 $this_addr_i_i_i21_i_i38_i=$69;
 var $this1_i_i_i27_i_i77_i=$this_addr_i_i_i21_i_i38_i;
 var $__first__i_i_i28_i_i78_i=(($this1_i_i_i27_i_i77_i)|0);
 var $70=HEAP32[(($__first__i_i_i28_i_i78_i)>>2)];
 $__t_i_i_i41_i=$70;
 var $__ptr_2_i_i_i79_i=(($this1_i24_i_i74_i)|0);
 $this_addr_i5_i_i_i37_i=$__ptr_2_i_i_i79_i;
 var $this1_i6_i_i_i80_i=$this_addr_i5_i_i_i37_i;
 var $71=$this1_i6_i_i_i80_i;
 $this_addr_i_i4_i_i_i36_i=$71;
 var $this1_i_i7_i_i_i81_i=$this_addr_i_i4_i_i_i36_i;
 var $__first__i_i8_i_i_i82_i=(($this1_i_i7_i_i_i81_i)|0);
 HEAP32[(($__first__i_i8_i_i_i82_i)>>2)]=0;
 var $72=$__t_i_i_i41_i;
 $this_addr_i17_i_i42_i=$__u2_i64_i;
 var $this1_i18_i_i83_i=$this_addr_i17_i_i42_i;
 var $t__i19_i_i84_i=(($this1_i18_i_i83_i)|0);
 var $ref_i20_i_i85_i=HEAP32[(($t__i19_i_i84_i)>>2)];
 $this_addr_i12_i_i45_i=$ref_i20_i_i85_i;
 var $this1_i13_i_i86_i=$this_addr_i12_i_i45_i;
 var $__ptr__i_i_i87_i=(($this1_i13_i_i86_i)|0);
 $this_addr_i_i11_i_i44_i=$__ptr__i_i_i87_i;
 var $this1_i_i14_i_i88_i=$this_addr_i_i11_i_i44_i;
 var $73=$this1_i_i14_i_i88_i;
 $this_addr_i_i_i10_i_i43_i=$73;
 var $this1_i_i_i15_i_i89_i=$this_addr_i_i_i10_i_i43_i;
 var $__second__i_i_i16_i_i90_i=(($this1_i_i_i15_i_i89_i+4)|0);
 $__t_addr_i_i_i46_i=$__second__i_i_i16_i_i90_i;
 var $74=$__t_addr_i_i_i46_i;
 var $75=$agg_tmp_i_i63_i;
 var $76=$74;
 assert(8 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];
 var $tmp_i_i91_i=$agg_tmp6_i_i60_i;
 var $tmp7_i_i92_i=$agg_tmp_i_i63_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i91_i, $tmp7_i_i92_i, 8)|0);
 $this_addr_i8_i_i58_i=$__ptr__i_i70_i;
 $__t1_addr_i_i_i59_i=$72;
 var $this1_i9_i_i93_i=$this_addr_i8_i_i58_i;
 var $77=$__t1_addr_i_i_i59_i;
 var $tmp_i_i_i94_i=$__t22_i_i_i57_i;
 var $tmp3_i_i_i95_i=$agg_tmp6_i_i60_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i94_i, $tmp3_i_i_i95_i, 8)|0);
 $this_addr_i_i_i_i54_i=$this1_i9_i_i93_i;
 HEAP32[(($__t1_addr_i_i_i_i55_i)>>2)]=$77;
 var $this1_i_i_i_i96_i=$this_addr_i_i_i_i54_i;
 var $78=$this1_i_i_i_i96_i;
 $__t_addr_i_i_i_i_i53_i=$__t1_addr_i_i_i_i55_i;
 var $79=$__t_addr_i_i_i_i_i53_i;
 var $80=HEAP32[(($79)>>2)];
 $__t_addr_i5_i_i_i_i47_i=$__t22_i_i_i57_i;
 var $81=$__t_addr_i5_i_i_i_i47_i;
 var $82=$agg_tmp_i_i_i_i56_i;
 var $83=$81;
 assert(8 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];
 var $tmp_i_i_i_i97_i=$agg_tmp3_i_i_i_i52_i;
 var $tmp4_i_i_i_i98_i=$agg_tmp_i_i_i_i56_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i97_i, $tmp4_i_i_i_i98_i, 8)|0);
 $this_addr_i_i_i_i_i50_i=$78;
 HEAP32[(($__t1_addr_i_i_i_i_i51_i)>>2)]=$80;
 var $this1_i_i_i_i_i99_i=$this_addr_i_i_i_i_i50_i;
 var $__first__i_i_i_i_i100_i=(($this1_i_i_i_i_i99_i)|0);
 $__t_addr_i_i_i_i_i_i49_i=$__t1_addr_i_i_i_i_i51_i;
 var $84=$__t_addr_i_i_i_i_i_i49_i;
 var $85=HEAP32[(($84)>>2)];
 HEAP32[(($__first__i_i_i_i_i100_i)>>2)]=$85;
 var $__second__i_i_i_i_i101_i=(($this1_i_i_i_i_i99_i+4)|0);
 $__t_addr_i3_i_i_i_i_i48_i=$agg_tmp3_i_i_i_i52_i;
 var $86=$__t_addr_i3_i_i_i_i_i48_i;
 var $87=$__second__i_i_i_i_i101_i;
 var $88=$86;
 assert(8 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];
 $this_addr_i130_i=$temp_lvalue_i;
 var $this1_i131_i=$this_addr_i130_i;
 $this_addr_i_i129_i=$this1_i131_i;
 var $this1_i_i132_i=$this_addr_i_i129_i;
 $this_addr_i_i_i126_i=$this1_i_i132_i;
 $__p_addr_i_i_i127_i=0;
 var $this1_i_i_i133_i=$this_addr_i_i_i126_i;
 var $__ptr__i_i_i134_i=(($this1_i_i_i133_i)|0);
 $this_addr_i_i_i_i125_i=$__ptr__i_i_i134_i;
 var $this1_i_i_i_i135_i=$this_addr_i_i_i_i125_i;
 var $89=$this1_i_i_i_i135_i;
 $this_addr_i_i_i_i_i124_i=$89;
 var $this1_i_i_i_i_i136_i=$this_addr_i_i_i_i_i124_i;
 var $__first__i_i_i_i_i137_i=(($this1_i_i_i_i_i136_i)|0);
 var $90=HEAP32[(($__first__i_i_i_i_i137_i)>>2)];
 $__tmp_i_i_i128_i=$90;
 var $91=$__p_addr_i_i_i127_i;
 var $__ptr_2_i_i_i138_i=(($this1_i_i_i133_i)|0);
 $this_addr_i9_i_i_i105_i=$__ptr_2_i_i_i138_i;
 var $this1_i10_i_i_i139_i=$this_addr_i9_i_i_i105_i;
 var $92=$this1_i10_i_i_i139_i;
 $this_addr_i_i8_i_i_i104_i=$92;
 var $this1_i_i11_i_i_i140_i=$this_addr_i_i8_i_i_i104_i;
 var $__first__i_i12_i_i_i141_i=(($this1_i_i11_i_i_i140_i)|0);
 HEAP32[(($__first__i_i12_i_i_i141_i)>>2)]=$91;
 var $93=$__tmp_i_i_i128_i;
 var $tobool_i_i_i142_i=($93|0)!=0;
 if($tobool_i_i_i142_i){label=6;break;}else{label=13;break;}
 case 6: 
 var $__ptr_4_i_i_i143_i=(($this1_i_i_i133_i)|0);
 $this_addr_i14_i_i_i103_i=$__ptr_4_i_i_i143_i;
 var $this1_i15_i_i_i144_i=$this_addr_i14_i_i_i103_i;
 var $94=$this1_i15_i_i_i144_i;
 $this_addr_i_i13_i_i_i102_i=$94;
 var $this1_i_i16_i_i_i145_i=$this_addr_i_i13_i_i_i102_i;
 var $__second__i_i_i_i_i146_i=(($this1_i_i16_i_i_i145_i+4)|0);
 var $95=$__tmp_i_i_i128_i;
 $this_addr_i6_i_i_i120_i=$__second__i_i_i_i_i146_i;
 $__p_addr_i_i_i_i121_i=$95;
 var $this1_i7_i_i_i147_i=$this_addr_i6_i_i_i120_i;
 var $__value_constructed_i_i_i_i148_i=(($this1_i7_i_i_i147_i+4)|0);
 var $96=HEAP8[($__value_constructed_i_i_i_i148_i)];
 var $tobool_i_i_i_i149_i=(($96)&1);
 if($tobool_i_i_i_i149_i){label=7;break;}else{label=10;break;}
 case 7: 
 var $__na__i_i_i_i151_i=(($this1_i7_i_i_i147_i)|0);
 var $ref_i_i_i_i152_i=HEAP32[(($__na__i_i_i_i151_i)>>2)];
 var $97=$__p_addr_i_i_i_i121_i;
 var $__value__i_i_i_i153_i=(($97+16)|0);
 $__x_addr_i_i_i_i_i119_i=$__value__i_i_i_i153_i;
 var $98=$__x_addr_i_i_i_i_i119_i;
 var $99=$98;
 var $100=$99;
 $__a_addr_i9_i_i_i_i109_i=$ref_i_i_i_i152_i;
 $__p_addr_i10_i_i_i_i110_i=$100;
 var $101=$ref_tmp_i_i_i_i_i112_i;
 var $102=$__a_addr_i9_i_i_i_i109_i;
 var $103=$__p_addr_i10_i_i_i_i110_i;
 var $tmp_i_i_i_i_i154_i=$agg_tmp1_i_i_i_i_i108_i;
 var $tmp2_i_i_i_i_i155_i=$agg_tmp_i_i_i_i_i111_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i154_i)]=HEAP8[($tmp2_i_i_i_i_i155_i)];
 $_addr_i_i7_i_i_i_i106_i=$102;
 $__p_addr_i_i8_i_i_i_i107_i=$103;
 var $104=$__p_addr_i_i8_i_i_i_i107_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 label=10;break;
 case 9: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 $exn_slot_i_i_i_i122_i=$106;
 var $107=$105$1;
 $ehselector_slot_i_i_i_i123_i=$107;
 var $exn_i_i_i_i158_i=$exn_slot_i_i_i_i122_i;
 ___cxa_call_unexpected($exn_i_i_i_i158_i);
 throw "Reached an unreachable!";
 case 10: 
 var $108=$__p_addr_i_i_i_i121_i;
 var $tobool2_i_i_i_i160_i=($108|0)!=0;
 if($tobool2_i_i_i_i160_i){label=11;break;}else{label=12;break;}
 case 11: 
 var $__na_4_i_i_i_i162_i=(($this1_i7_i_i_i147_i)|0);
 var $ref5_i_i_i_i163_i=HEAP32[(($__na_4_i_i_i_i162_i)>>2)];
 var $109=$__p_addr_i_i_i_i121_i;
 $__a_addr_i_i_i_i_i116_i=$ref5_i_i_i_i163_i;
 $__p_addr_i_i_i_i_i117_i=$109;
 $__n_addr_i_i_i_i_i118_i=1;
 var $110=$__a_addr_i_i_i_i_i116_i;
 var $111=$__p_addr_i_i_i_i_i117_i;
 var $112=$__n_addr_i_i_i_i_i118_i;
 $this_addr_i_i_i_i_i_i113_i=$110;
 $__p_addr_i_i_i_i_i_i114_i=$111;
 $_addr_i_i_i_i_i_i115_i=$112;
 var $this1_i_i_i_i_i_i164_i=$this_addr_i_i_i_i_i_i113_i;
 var $113=$__p_addr_i_i_i_i_i_i114_i;
 var $114=$113;
 __ZdlPv($114);
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 label=14;break;
 case 14: 
 $this_addr_i148=$temp_lvalue;
 var $this1_i149=$this_addr_i148;
 $this_addr_i_i146=$agg_tmp6;
 $__t_addr_i_i147=$this1_i149;
 var $this1_i_i150=$this_addr_i_i146;
 var $115=$__t_addr_i_i147;
 $this_addr_i_i_i144=$this1_i_i150;
 $__t_addr_i_i_i145=$115;
 var $this1_i_i_i151=$this_addr_i_i_i144;
 var $116=(($this1_i_i_i151)|0);
 var $117=$__t_addr_i_i_i145;
 HEAP32[(($116)>>2)]=$117;
 label=15;break;
 case 15: 
 var $tmp153=$agg_tmp6152;
 var $tmp154=$agg_tmp6;
 assert(4 % 1 === 0);HEAP8[($tmp153)]=HEAP8[($tmp154)];HEAP8[((($tmp153)+(1))|0)]=HEAP8[((($tmp154)+(1))|0)];HEAP8[((($tmp153)+(2))|0)]=HEAP8[((($tmp154)+(2))|0)];HEAP8[((($tmp153)+(3))|0)]=HEAP8[((($tmp154)+(3))|0)];
 $this_addr_i171=$agg_result;
 var $this1_i172=$this_addr_i171;
 var $tmp_i173=$__u2_i;
 var $tmp3_i174=$agg_tmp6152;
 assert(4 % 1 === 0);HEAP8[($tmp_i173)]=HEAP8[($tmp3_i174)];HEAP8[((($tmp_i173)+(1))|0)]=HEAP8[((($tmp3_i174)+(1))|0)];HEAP8[((($tmp_i173)+(2))|0)]=HEAP8[((($tmp3_i174)+(2))|0)];HEAP8[((($tmp_i173)+(3))|0)]=HEAP8[((($tmp3_i174)+(3))|0)];
 $this_addr_i_i169=$this1_i172;
 var $this1_i_i175=$this_addr_i_i169;
 var $__ptr__i_i176=(($this1_i_i175)|0);
 $this_addr_i_i_i168=$__u2_i;
 var $this1_i_i_i177=$this_addr_i_i_i168;
 var $t__i_i_i=(($this1_i_i_i177)|0);
 var $ref_i_i_i=HEAP32[(($t__i_i_i)>>2)];
 $this_addr_i23_i_i=$ref_i_i_i;
 var $this1_i24_i_i=$this_addr_i23_i_i;
 var $__ptr__i25_i_i=(($this1_i24_i_i)|0);
 $this_addr_i_i22_i_i=$__ptr__i25_i_i;
 var $this1_i_i26_i_i=$this_addr_i_i22_i_i;
 var $118=$this1_i_i26_i_i;
 $this_addr_i_i_i21_i_i=$118;
 var $this1_i_i_i27_i_i=$this_addr_i_i_i21_i_i;
 var $__first__i_i_i28_i_i=(($this1_i_i_i27_i_i)|0);
 var $119=HEAP32[(($__first__i_i_i28_i_i)>>2)];
 $__t_i_i_i=$119;
 var $__ptr_2_i_i_i178=(($this1_i24_i_i)|0);
 $this_addr_i5_i_i_i=$__ptr_2_i_i_i178;
 var $this1_i6_i_i_i=$this_addr_i5_i_i_i;
 var $120=$this1_i6_i_i_i;
 $this_addr_i_i4_i_i_i=$120;
 var $this1_i_i7_i_i_i=$this_addr_i_i4_i_i_i;
 var $__first__i_i8_i_i_i=(($this1_i_i7_i_i_i)|0);
 HEAP32[(($__first__i_i8_i_i_i)>>2)]=0;
 var $121=$__t_i_i_i;
 $this_addr_i17_i_i=$__u2_i;
 var $this1_i18_i_i=$this_addr_i17_i_i;
 var $t__i19_i_i=(($this1_i18_i_i)|0);
 var $ref_i20_i_i=HEAP32[(($t__i19_i_i)>>2)];
 $this_addr_i12_i_i=$ref_i20_i_i;
 var $this1_i13_i_i=$this_addr_i12_i_i;
 var $__ptr__i_i_i179=(($this1_i13_i_i)|0);
 $this_addr_i_i11_i_i=$__ptr__i_i_i179;
 var $this1_i_i14_i_i=$this_addr_i_i11_i_i;
 var $122=$this1_i_i14_i_i;
 $this_addr_i_i_i10_i_i=$122;
 var $this1_i_i_i15_i_i=$this_addr_i_i_i10_i_i;
 var $__second__i_i_i16_i_i=(($this1_i_i_i15_i_i+4)|0);
 $__t_addr_i_i_i155=$__second__i_i_i16_i_i;
 var $123=$__t_addr_i_i_i155;
 var $124=$agg_tmp_i_i170;
 var $125=$123;
 assert(8 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];
 var $tmp_i_i180=$agg_tmp6_i_i;
 var $tmp7_i_i=$agg_tmp_i_i170;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i180, $tmp7_i_i, 8)|0);
 $this_addr_i8_i_i=$__ptr__i_i176;
 $__t1_addr_i_i_i167=$121;
 var $this1_i9_i_i=$this_addr_i8_i_i;
 var $126=$__t1_addr_i_i_i167;
 var $tmp_i_i_i181=$__t22_i_i_i166;
 var $tmp3_i_i_i182=$agg_tmp6_i_i;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i181, $tmp3_i_i_i182, 8)|0);
 $this_addr_i_i_i_i163=$this1_i9_i_i;
 HEAP32[(($__t1_addr_i_i_i_i164)>>2)]=$126;
 var $this1_i_i_i_i183=$this_addr_i_i_i_i163;
 var $127=$this1_i_i_i_i183;
 $__t_addr_i_i_i_i_i162=$__t1_addr_i_i_i_i164;
 var $128=$__t_addr_i_i_i_i_i162;
 var $129=HEAP32[(($128)>>2)];
 $__t_addr_i5_i_i_i_i156=$__t22_i_i_i166;
 var $130=$__t_addr_i5_i_i_i_i156;
 var $131=$agg_tmp_i_i_i_i165;
 var $132=$130;
 assert(8 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];
 var $tmp_i_i_i_i184=$agg_tmp3_i_i_i_i161;
 var $tmp4_i_i_i_i185=$agg_tmp_i_i_i_i165;
 assert(8 % 1 === 0);(_memcpy($tmp_i_i_i_i184, $tmp4_i_i_i_i185, 8)|0);
 $this_addr_i_i_i_i_i159=$127;
 HEAP32[(($__t1_addr_i_i_i_i_i160)>>2)]=$129;
 var $this1_i_i_i_i_i186=$this_addr_i_i_i_i_i159;
 var $__first__i_i_i_i_i187=(($this1_i_i_i_i_i186)|0);
 $__t_addr_i_i_i_i_i_i158=$__t1_addr_i_i_i_i_i160;
 var $133=$__t_addr_i_i_i_i_i_i158;
 var $134=HEAP32[(($133)>>2)];
 HEAP32[(($__first__i_i_i_i_i187)>>2)]=$134;
 var $__second__i_i_i_i_i188=(($this1_i_i_i_i_i186+4)|0);
 $__t_addr_i3_i_i_i_i_i157=$agg_tmp3_i_i_i_i161;
 var $135=$__t_addr_i3_i_i_i_i_i157;
 var $136=$__second__i_i_i_i_i188;
 var $137=$135;
 assert(8 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];
 label=16;break;
 case 16: 
 $this_addr_i217=$temp_lvalue;
 var $this1_i218=$this_addr_i217;
 $this_addr_i_i216=$this1_i218;
 var $this1_i_i219=$this_addr_i_i216;
 $this_addr_i_i_i213=$this1_i_i219;
 $__p_addr_i_i_i214=0;
 var $this1_i_i_i220=$this_addr_i_i_i213;
 var $__ptr__i_i_i221=(($this1_i_i_i220)|0);
 $this_addr_i_i_i_i212=$__ptr__i_i_i221;
 var $this1_i_i_i_i222=$this_addr_i_i_i_i212;
 var $138=$this1_i_i_i_i222;
 $this_addr_i_i_i_i_i211=$138;
 var $this1_i_i_i_i_i223=$this_addr_i_i_i_i_i211;
 var $__first__i_i_i_i_i224=(($this1_i_i_i_i_i223)|0);
 var $139=HEAP32[(($__first__i_i_i_i_i224)>>2)];
 $__tmp_i_i_i215=$139;
 var $140=$__p_addr_i_i_i214;
 var $__ptr_2_i_i_i225=(($this1_i_i_i220)|0);
 $this_addr_i9_i_i_i192=$__ptr_2_i_i_i225;
 var $this1_i10_i_i_i226=$this_addr_i9_i_i_i192;
 var $141=$this1_i10_i_i_i226;
 $this_addr_i_i8_i_i_i191=$141;
 var $this1_i_i11_i_i_i227=$this_addr_i_i8_i_i_i191;
 var $__first__i_i12_i_i_i228=(($this1_i_i11_i_i_i227)|0);
 HEAP32[(($__first__i_i12_i_i_i228)>>2)]=$140;
 var $142=$__tmp_i_i_i215;
 var $tobool_i_i_i229=($142|0)!=0;
 if($tobool_i_i_i229){label=17;break;}else{label=24;break;}
 case 17: 
 var $__ptr_4_i_i_i230=(($this1_i_i_i220)|0);
 $this_addr_i14_i_i_i190=$__ptr_4_i_i_i230;
 var $this1_i15_i_i_i231=$this_addr_i14_i_i_i190;
 var $143=$this1_i15_i_i_i231;
 $this_addr_i_i13_i_i_i189=$143;
 var $this1_i_i16_i_i_i232=$this_addr_i_i13_i_i_i189;
 var $__second__i_i_i_i_i233=(($this1_i_i16_i_i_i232+4)|0);
 var $144=$__tmp_i_i_i215;
 $this_addr_i6_i_i_i207=$__second__i_i_i_i_i233;
 $__p_addr_i_i_i_i208=$144;
 var $this1_i7_i_i_i234=$this_addr_i6_i_i_i207;
 var $__value_constructed_i_i_i_i235=(($this1_i7_i_i_i234+4)|0);
 var $145=HEAP8[($__value_constructed_i_i_i_i235)];
 var $tobool_i_i_i_i236=(($145)&1);
 if($tobool_i_i_i_i236){label=18;break;}else{label=21;break;}
 case 18: 
 var $__na__i_i_i_i238=(($this1_i7_i_i_i234)|0);
 var $ref_i_i_i_i239=HEAP32[(($__na__i_i_i_i238)>>2)];
 var $146=$__p_addr_i_i_i_i208;
 var $__value__i_i_i_i240=(($146+16)|0);
 $__x_addr_i_i_i_i_i206=$__value__i_i_i_i240;
 var $147=$__x_addr_i_i_i_i_i206;
 var $148=$147;
 var $149=$148;
 $__a_addr_i9_i_i_i_i196=$ref_i_i_i_i239;
 $__p_addr_i10_i_i_i_i197=$149;
 var $150=$ref_tmp_i_i_i_i_i199;
 var $151=$__a_addr_i9_i_i_i_i196;
 var $152=$__p_addr_i10_i_i_i_i197;
 var $tmp_i_i_i_i_i241=$agg_tmp1_i_i_i_i_i195;
 var $tmp2_i_i_i_i_i242=$agg_tmp_i_i_i_i_i198;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i241)]=HEAP8[($tmp2_i_i_i_i_i242)];
 $_addr_i_i7_i_i_i_i193=$151;
 $__p_addr_i_i8_i_i_i_i194=$152;
 var $153=$__p_addr_i_i8_i_i_i_i194;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=20;break; }
 case 19: 
 label=21;break;
 case 20: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1); var $154$1 = tempRet0;
 var $155=$154$0;
 $exn_slot_i_i_i_i209=$155;
 var $156=$154$1;
 $ehselector_slot_i_i_i_i210=$156;
 var $exn_i_i_i_i245=$exn_slot_i_i_i_i209;
 ___cxa_call_unexpected($exn_i_i_i_i245);
 throw "Reached an unreachable!";
 case 21: 
 var $157=$__p_addr_i_i_i_i208;
 var $tobool2_i_i_i_i247=($157|0)!=0;
 if($tobool2_i_i_i_i247){label=22;break;}else{label=23;break;}
 case 22: 
 var $__na_4_i_i_i_i249=(($this1_i7_i_i_i234)|0);
 var $ref5_i_i_i_i250=HEAP32[(($__na_4_i_i_i_i249)>>2)];
 var $158=$__p_addr_i_i_i_i208;
 $__a_addr_i_i_i_i_i203=$ref5_i_i_i_i250;
 $__p_addr_i_i_i_i_i204=$158;
 $__n_addr_i_i_i_i_i205=1;
 var $159=$__a_addr_i_i_i_i_i203;
 var $160=$__p_addr_i_i_i_i_i204;
 var $161=$__n_addr_i_i_i_i_i205;
 $this_addr_i_i_i_i_i_i200=$159;
 $__p_addr_i_i_i_i_i_i201=$160;
 $_addr_i_i_i_i_i_i202=$161;
 var $this1_i_i_i_i_i_i251=$this_addr_i_i_i_i_i_i200;
 var $162=$__p_addr_i_i_i_i_i_i201;
 var $163=$162;
 __ZdlPv($163);
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 label=25;break;
 case 25: 
 $cleanup_dest_slot=1;
 $this_addr_i283=$__h;
 var $this1_i284=$this_addr_i283;
 $this_addr_i_i282=$this1_i284;
 var $this1_i_i285=$this_addr_i_i282;
 $this_addr_i_i_i279=$this1_i_i285;
 $__p_addr_i_i_i280=0;
 var $this1_i_i_i286=$this_addr_i_i_i279;
 var $__ptr__i_i_i287=(($this1_i_i_i286)|0);
 $this_addr_i_i_i_i278=$__ptr__i_i_i287;
 var $this1_i_i_i_i288=$this_addr_i_i_i_i278;
 var $164=$this1_i_i_i_i288;
 $this_addr_i_i_i_i_i277=$164;
 var $this1_i_i_i_i_i289=$this_addr_i_i_i_i_i277;
 var $__first__i_i_i_i_i290=(($this1_i_i_i_i_i289)|0);
 var $165=HEAP32[(($__first__i_i_i_i_i290)>>2)];
 $__tmp_i_i_i281=$165;
 var $166=$__p_addr_i_i_i280;
 var $__ptr_2_i_i_i291=(($this1_i_i_i286)|0);
 $this_addr_i9_i_i_i258=$__ptr_2_i_i_i291;
 var $this1_i10_i_i_i292=$this_addr_i9_i_i_i258;
 var $167=$this1_i10_i_i_i292;
 $this_addr_i_i8_i_i_i257=$167;
 var $this1_i_i11_i_i_i293=$this_addr_i_i8_i_i_i257;
 var $__first__i_i12_i_i_i294=(($this1_i_i11_i_i_i293)|0);
 HEAP32[(($__first__i_i12_i_i_i294)>>2)]=$166;
 var $168=$__tmp_i_i_i281;
 var $tobool_i_i_i295=($168|0)!=0;
 if($tobool_i_i_i295){label=26;break;}else{label=33;break;}
 case 26: 
 var $__ptr_4_i_i_i296=(($this1_i_i_i286)|0);
 $this_addr_i14_i_i_i256=$__ptr_4_i_i_i296;
 var $this1_i15_i_i_i297=$this_addr_i14_i_i_i256;
 var $169=$this1_i15_i_i_i297;
 $this_addr_i_i13_i_i_i255=$169;
 var $this1_i_i16_i_i_i298=$this_addr_i_i13_i_i_i255;
 var $__second__i_i_i_i_i299=(($this1_i_i16_i_i_i298+4)|0);
 var $170=$__tmp_i_i_i281;
 $this_addr_i6_i_i_i273=$__second__i_i_i_i_i299;
 $__p_addr_i_i_i_i274=$170;
 var $this1_i7_i_i_i300=$this_addr_i6_i_i_i273;
 var $__value_constructed_i_i_i_i301=(($this1_i7_i_i_i300+4)|0);
 var $171=HEAP8[($__value_constructed_i_i_i_i301)];
 var $tobool_i_i_i_i302=(($171)&1);
 if($tobool_i_i_i_i302){label=27;break;}else{label=30;break;}
 case 27: 
 var $__na__i_i_i_i304=(($this1_i7_i_i_i300)|0);
 var $ref_i_i_i_i305=HEAP32[(($__na__i_i_i_i304)>>2)];
 var $172=$__p_addr_i_i_i_i274;
 var $__value__i_i_i_i306=(($172+16)|0);
 $__x_addr_i_i_i_i_i272=$__value__i_i_i_i306;
 var $173=$__x_addr_i_i_i_i_i272;
 var $174=$173;
 var $175=$174;
 $__a_addr_i9_i_i_i_i262=$ref_i_i_i_i305;
 $__p_addr_i10_i_i_i_i263=$175;
 var $176=$ref_tmp_i_i_i_i_i265;
 var $177=$__a_addr_i9_i_i_i_i262;
 var $178=$__p_addr_i10_i_i_i_i263;
 var $tmp_i_i_i_i_i307=$agg_tmp1_i_i_i_i_i261;
 var $tmp2_i_i_i_i_i308=$agg_tmp_i_i_i_i_i264;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i307)]=HEAP8[($tmp2_i_i_i_i_i308)];
 $_addr_i_i7_i_i_i_i259=$177;
 $__p_addr_i_i8_i_i_i_i260=$178;
 var $179=$__p_addr_i_i8_i_i_i_i260;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 label=30;break;
 case 29: 
 var $180$0 = ___cxa_find_matching_catch(-1, -1); var $180$1 = tempRet0;
 var $181=$180$0;
 $exn_slot_i_i_i_i275=$181;
 var $182=$180$1;
 $ehselector_slot_i_i_i_i276=$182;
 var $exn_i_i_i_i311=$exn_slot_i_i_i_i275;
 ___cxa_call_unexpected($exn_i_i_i_i311);
 throw "Reached an unreachable!";
 case 30: 
 var $183=$__p_addr_i_i_i_i274;
 var $tobool2_i_i_i_i313=($183|0)!=0;
 if($tobool2_i_i_i_i313){label=31;break;}else{label=32;break;}
 case 31: 
 var $__na_4_i_i_i_i315=(($this1_i7_i_i_i300)|0);
 var $ref5_i_i_i_i316=HEAP32[(($__na_4_i_i_i_i315)>>2)];
 var $184=$__p_addr_i_i_i_i274;
 $__a_addr_i_i_i_i_i269=$ref5_i_i_i_i316;
 $__p_addr_i_i_i_i_i270=$184;
 $__n_addr_i_i_i_i_i271=1;
 var $185=$__a_addr_i_i_i_i_i269;
 var $186=$__p_addr_i_i_i_i_i270;
 var $187=$__n_addr_i_i_i_i_i271;
 $this_addr_i_i_i_i_i_i266=$185;
 $__p_addr_i_i_i_i_i_i267=$186;
 $_addr_i_i_i_i_i_i268=$187;
 var $this1_i_i_i_i_i_i317=$this_addr_i_i_i_i_i_i266;
 var $188=$__p_addr_i_i_i_i_i_i267;
 var $189=$188;
 __ZdlPv($189);
 label=32;break;
 case 32: 
 label=33;break;
 case 33: 
 STACKTOP=sp;return;
 case 34: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1); var $190$1 = tempRet0;
 var $191=$190$0;
 $exn_slot=$191;
 var $192=$190$1;
 $ehselector_slot=$192;
 label=45;break;
 case 35: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1); var $193$1 = tempRet0;
 var $194=$193$0;
 $exn_slot=$194;
 var $195=$193$1;
 $ehselector_slot=$195;
 $this_addr_i75=$temp_lvalue;
 var $this1_i76=$this_addr_i75;
 $this_addr_i_i74=$this1_i76;
 var $this1_i_i77=$this_addr_i_i74;
 $this_addr_i_i_i71=$this1_i_i77;
 $__p_addr_i_i_i72=0;
 var $this1_i_i_i78=$this_addr_i_i_i71;
 var $__ptr__i_i_i79=(($this1_i_i_i78)|0);
 $this_addr_i_i_i_i70=$__ptr__i_i_i79;
 var $this1_i_i_i_i80=$this_addr_i_i_i_i70;
 var $196=$this1_i_i_i_i80;
 $this_addr_i_i_i_i_i69=$196;
 var $this1_i_i_i_i_i81=$this_addr_i_i_i_i_i69;
 var $__first__i_i_i_i_i82=(($this1_i_i_i_i_i81)|0);
 var $197=HEAP32[(($__first__i_i_i_i_i82)>>2)];
 $__tmp_i_i_i73=$197;
 var $198=$__p_addr_i_i_i72;
 var $__ptr_2_i_i_i83=(($this1_i_i_i78)|0);
 $this_addr_i9_i_i_i50=$__ptr_2_i_i_i83;
 var $this1_i10_i_i_i84=$this_addr_i9_i_i_i50;
 var $199=$this1_i10_i_i_i84;
 $this_addr_i_i8_i_i_i49=$199;
 var $this1_i_i11_i_i_i85=$this_addr_i_i8_i_i_i49;
 var $__first__i_i12_i_i_i86=(($this1_i_i11_i_i_i85)|0);
 HEAP32[(($__first__i_i12_i_i_i86)>>2)]=$198;
 var $200=$__tmp_i_i_i73;
 var $tobool_i_i_i87=($200|0)!=0;
 if($tobool_i_i_i87){label=36;break;}else{label=43;break;}
 case 36: 
 var $__ptr_4_i_i_i88=(($this1_i_i_i78)|0);
 $this_addr_i14_i_i_i48=$__ptr_4_i_i_i88;
 var $this1_i15_i_i_i89=$this_addr_i14_i_i_i48;
 var $201=$this1_i15_i_i_i89;
 $this_addr_i_i13_i_i_i47=$201;
 var $this1_i_i16_i_i_i90=$this_addr_i_i13_i_i_i47;
 var $__second__i_i_i_i_i91=(($this1_i_i16_i_i_i90+4)|0);
 var $202=$__tmp_i_i_i73;
 $this_addr_i6_i_i_i65=$__second__i_i_i_i_i91;
 $__p_addr_i_i_i_i66=$202;
 var $this1_i7_i_i_i92=$this_addr_i6_i_i_i65;
 var $__value_constructed_i_i_i_i93=(($this1_i7_i_i_i92+4)|0);
 var $203=HEAP8[($__value_constructed_i_i_i_i93)];
 var $tobool_i_i_i_i94=(($203)&1);
 if($tobool_i_i_i_i94){label=37;break;}else{label=40;break;}
 case 37: 
 var $__na__i_i_i_i96=(($this1_i7_i_i_i92)|0);
 var $ref_i_i_i_i97=HEAP32[(($__na__i_i_i_i96)>>2)];
 var $204=$__p_addr_i_i_i_i66;
 var $__value__i_i_i_i98=(($204+16)|0);
 $__x_addr_i_i_i_i_i64=$__value__i_i_i_i98;
 var $205=$__x_addr_i_i_i_i_i64;
 var $206=$205;
 var $207=$206;
 $__a_addr_i9_i_i_i_i54=$ref_i_i_i_i97;
 $__p_addr_i10_i_i_i_i55=$207;
 var $208=$ref_tmp_i_i_i_i_i57;
 var $209=$__a_addr_i9_i_i_i_i54;
 var $210=$__p_addr_i10_i_i_i_i55;
 var $tmp_i_i_i_i_i99=$agg_tmp1_i_i_i_i_i53;
 var $tmp2_i_i_i_i_i100=$agg_tmp_i_i_i_i_i56;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i99)]=HEAP8[($tmp2_i_i_i_i_i100)];
 $_addr_i_i7_i_i_i_i51=$209;
 $__p_addr_i_i8_i_i_i_i52=$210;
 var $211=$__p_addr_i_i8_i_i_i_i52;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 label=40;break;
 case 39: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1,0); var $212$1 = tempRet0;
 var $213=$212$0;
 $exn_slot_i_i_i_i67=$213;
 var $214=$212$1;
 $ehselector_slot_i_i_i_i68=$214;
 var $exn_i_i_i_i103=$exn_slot_i_i_i_i67;
 ___cxa_call_unexpected($exn_i_i_i_i103);
 throw "Reached an unreachable!";
 case 40: 
 var $215=$__p_addr_i_i_i_i66;
 var $tobool2_i_i_i_i105=($215|0)!=0;
 if($tobool2_i_i_i_i105){label=41;break;}else{label=42;break;}
 case 41: 
 var $__na_4_i_i_i_i107=(($this1_i7_i_i_i92)|0);
 var $ref5_i_i_i_i108=HEAP32[(($__na_4_i_i_i_i107)>>2)];
 var $216=$__p_addr_i_i_i_i66;
 $__a_addr_i_i_i_i_i61=$ref5_i_i_i_i108;
 $__p_addr_i_i_i_i_i62=$216;
 $__n_addr_i_i_i_i_i63=1;
 var $217=$__a_addr_i_i_i_i_i61;
 var $218=$__p_addr_i_i_i_i_i62;
 var $219=$__n_addr_i_i_i_i_i63;
 $this_addr_i_i_i_i_i_i58=$217;
 $__p_addr_i_i_i_i_i_i59=$218;
 $_addr_i_i_i_i_i_i60=$219;
 var $this1_i_i_i_i_i_i109=$this_addr_i_i_i_i_i_i58;
 var $220=$__p_addr_i_i_i_i_i_i59;
 var $221=$220;
 __ZdlPv($221);
 label=42;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 $this_addr_i17=$__h;
 var $this1_i18=$this_addr_i17;
 $this_addr_i_i16=$this1_i18;
 var $this1_i_i19=$this_addr_i_i16;
 $this_addr_i_i_i15=$this1_i_i19;
 $__p_addr_i_i_i=0;
 var $this1_i_i_i20=$this_addr_i_i_i15;
 var $__ptr__i_i_i=(($this1_i_i_i20)|0);
 $this_addr_i_i_i_i=$__ptr__i_i_i;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $222=$this1_i_i_i_i;
 $this_addr_i_i_i_i_i=$222;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 var $__first__i_i_i_i_i=(($this1_i_i_i_i_i)|0);
 var $223=HEAP32[(($__first__i_i_i_i_i)>>2)];
 $__tmp_i_i_i=$223;
 var $224=$__p_addr_i_i_i;
 var $__ptr_2_i_i_i=(($this1_i_i_i20)|0);
 $this_addr_i9_i_i_i=$__ptr_2_i_i_i;
 var $this1_i10_i_i_i=$this_addr_i9_i_i_i;
 var $225=$this1_i10_i_i_i;
 $this_addr_i_i8_i_i_i=$225;
 var $this1_i_i11_i_i_i=$this_addr_i_i8_i_i_i;
 var $__first__i_i12_i_i_i=(($this1_i_i11_i_i_i)|0);
 HEAP32[(($__first__i_i12_i_i_i)>>2)]=$224;
 var $226=$__tmp_i_i_i;
 var $tobool_i_i_i=($226|0)!=0;
 if($tobool_i_i_i){label=46;break;}else{label=53;break;}
 case 46: 
 var $__ptr_4_i_i_i=(($this1_i_i_i20)|0);
 $this_addr_i14_i_i_i=$__ptr_4_i_i_i;
 var $this1_i15_i_i_i=$this_addr_i14_i_i_i;
 var $227=$this1_i15_i_i_i;
 $this_addr_i_i13_i_i_i=$227;
 var $this1_i_i16_i_i_i=$this_addr_i_i13_i_i_i;
 var $__second__i_i_i_i_i=(($this1_i_i16_i_i_i+4)|0);
 var $228=$__tmp_i_i_i;
 $this_addr_i6_i_i_i=$__second__i_i_i_i_i;
 $__p_addr_i_i_i_i=$228;
 var $this1_i7_i_i_i=$this_addr_i6_i_i_i;
 var $__value_constructed_i_i_i_i=(($this1_i7_i_i_i+4)|0);
 var $229=HEAP8[($__value_constructed_i_i_i_i)];
 var $tobool_i_i_i_i=(($229)&1);
 if($tobool_i_i_i_i){label=47;break;}else{label=50;break;}
 case 47: 
 var $__na__i_i_i_i=(($this1_i7_i_i_i)|0);
 var $ref_i_i_i_i=HEAP32[(($__na__i_i_i_i)>>2)];
 var $230=$__p_addr_i_i_i_i;
 var $__value__i_i_i_i=(($230+16)|0);
 $__x_addr_i_i_i_i_i=$__value__i_i_i_i;
 var $231=$__x_addr_i_i_i_i_i;
 var $232=$231;
 var $233=$232;
 $__a_addr_i9_i_i_i_i=$ref_i_i_i_i;
 $__p_addr_i10_i_i_i_i=$233;
 var $234=$ref_tmp_i_i_i_i_i;
 var $235=$__a_addr_i9_i_i_i_i;
 var $236=$__p_addr_i10_i_i_i_i;
 var $tmp_i_i_i_i_i=$agg_tmp1_i_i_i_i_i;
 var $tmp2_i_i_i_i_i=$agg_tmp_i_i_i_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i_i_i_i)]=HEAP8[($tmp2_i_i_i_i_i)];
 $_addr_i_i7_i_i_i_i=$235;
 $__p_addr_i_i8_i_i_i_i=$236;
 var $237=$__p_addr_i_i8_i_i_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($237) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=49;break; }
 case 48: 
 label=50;break;
 case 49: 
 var $238$0 = ___cxa_find_matching_catch(-1, -1,0); var $238$1 = tempRet0;
 var $239=$238$0;
 $exn_slot_i_i_i_i=$239;
 var $240=$238$1;
 $ehselector_slot_i_i_i_i=$240;
 var $exn_i_i_i_i=$exn_slot_i_i_i_i;
 ___cxa_call_unexpected($exn_i_i_i_i);
 throw "Reached an unreachable!";
 case 50: 
 var $241=$__p_addr_i_i_i_i;
 var $tobool2_i_i_i_i=($241|0)!=0;
 if($tobool2_i_i_i_i){label=51;break;}else{label=52;break;}
 case 51: 
 var $__na_4_i_i_i_i=(($this1_i7_i_i_i)|0);
 var $ref5_i_i_i_i=HEAP32[(($__na_4_i_i_i_i)>>2)];
 var $242=$__p_addr_i_i_i_i;
 $__a_addr_i_i_i_i_i=$ref5_i_i_i_i;
 $__p_addr_i_i_i_i_i=$242;
 $__n_addr_i_i_i_i_i=1;
 var $243=$__a_addr_i_i_i_i_i;
 var $244=$__p_addr_i_i_i_i_i;
 var $245=$__n_addr_i_i_i_i_i;
 $this_addr_i_i_i_i_i_i=$243;
 $__p_addr_i_i_i_i_i_i=$244;
 $_addr_i_i_i_i_i_i=$245;
 var $this1_i_i_i_i_i_i=$this_addr_i_i_i_i_i_i;
 var $246=$__p_addr_i_i_i_i_i_i;
 var $247=$246;
 __ZdlPv($247);
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val14$0=$lpad_val$0;
 var $lpad_val14$1=$sel;
 ___resumeException($lpad_val14$0)
 case 56: 
 var $248$0 = ___cxa_find_matching_catch(-1, -1,0); var $248$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($this,$__parent,$__child,$__new_node){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i_i_i46;
 var $_addr_i_i_i47;
 var $this_addr_i_i48;
 var $_addr_i_i49;
 var $this_addr_i44;
 var $this_addr_i41;
 var $this_addr_i_i_i34;
 var $_addr_i_i_i35;
 var $this_addr_i_i36;
 var $_addr_i_i37;
 var $this_addr_i32;
 var $this_addr_i29;
 var $this_addr_i27;
 var $__x_addr_i_i_i;
 var $__r_addr_i_i;
 var $this_addr_i_i_i20;
 var $this_addr_i_i21;
 var $this_addr_i22;
 var $this_addr_i18;
 var $this_addr_i_i_i14;
 var $this_addr_i_i15;
 var $this_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $this_addr;
 var $__parent_addr;
 var $__child_addr;
 var $__new_node_addr;
 var $tmp=sp;
 var $tmp2=(sp)+(8);
 var $tmp6=(sp)+(16);
 $this_addr=$this;
 $__parent_addr=$__parent;
 $__child_addr=$__child;
 $__new_node_addr=$__new_node;
 var $this1=$this_addr;
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $0=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$0;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 $this_addr_i18=$tmp;
 var $this1_i19=$this_addr_i18;
 var $1=$__new_node_addr;
 var $2=$1;
 var $__left_=(($2)|0);
 HEAP32[(($__left_)>>2)]=0;
 $this_addr_i_i48=$tmp2;
 $_addr_i_i49=-1;
 var $this1_i_i50=$this_addr_i_i48;
 var $3=$_addr_i_i49;
 $this_addr_i_i_i46=$this1_i_i50;
 $_addr_i_i_i47=$3;
 var $this1_i_i_i51=$this_addr_i_i_i46;
 var $__lx_i_i_i52=(($this1_i_i_i51)|0);
 HEAP32[(($__lx_i_i_i52)>>2)]=0;
 $this_addr_i44=$tmp2;
 var $this1_i45=$this_addr_i44;
 var $4=$__new_node_addr;
 var $__right_=(($4+4)|0);
 HEAP32[(($__right_)>>2)]=0;
 var $5=$__parent_addr;
 var $6=$__new_node_addr;
 var $__parent_=(($6+8)|0);
 HEAP32[(($__parent_)>>2)]=$5;
 var $7=$__new_node_addr;
 var $8=$__child_addr;
 HEAP32[(($8)>>2)]=$7;
 $this_addr_i41=$this1;
 var $this1_i42=$this_addr_i41;
 var $__begin_node__i43=(($this1_i42)|0);
 var $9=HEAP32[(($__begin_node__i43)>>2)];
 var $10=$9;
 var $__left_5=(($10)|0);
 var $11=HEAP32[(($__left_5)>>2)];
 $this_addr_i_i36=$tmp6;
 $_addr_i_i37=-1;
 var $this1_i_i38=$this_addr_i_i36;
 var $12=$_addr_i_i37;
 $this_addr_i_i_i34=$this1_i_i38;
 $_addr_i_i_i35=$12;
 var $this1_i_i_i39=$this_addr_i_i_i34;
 var $__lx_i_i_i40=(($this1_i_i_i39)|0);
 HEAP32[(($__lx_i_i_i40)>>2)]=0;
 $this_addr_i32=$tmp6;
 var $this1_i33=$this_addr_i32;
 var $cmp=($11|0)!=0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 $this_addr_i29=$this1;
 var $this1_i30=$this_addr_i29;
 var $__begin_node__i31=(($this1_i30)|0);
 var $13=HEAP32[(($__begin_node__i31)>>2)];
 var $14=$13;
 var $__left_9=(($14)|0);
 var $15=HEAP32[(($__left_9)>>2)];
 var $16=$15;
 $this_addr_i27=$this1;
 var $this1_i28=$this_addr_i27;
 var $__begin_node__i=(($this1_i28)|0);
 HEAP32[(($__begin_node__i)>>2)]=$16;
 label=3;break;
 case 3: 
 $this_addr_i22=$this1;
 var $this1_i23=$this_addr_i22;
 var $__pair1__i=(($this1_i23+4)|0);
 $this_addr_i_i21=$__pair1__i;
 var $this1_i_i24=$this_addr_i_i21;
 var $17=$this1_i_i24;
 $this_addr_i_i_i20=$17;
 var $this1_i_i_i25=$this_addr_i_i_i20;
 var $__first__i_i_i26=(($this1_i_i_i25)|0);
 $__r_addr_i_i=$__first__i_i_i26;
 var $18=$__r_addr_i_i;
 $__x_addr_i_i_i=$18;
 var $19=$__x_addr_i_i_i;
 var $20=$19;
 var $21=$20;
 var $22=$21;
 var $23=$22;
 var $__left_12=(($23)|0);
 var $24=HEAP32[(($__left_12)>>2)];
 var $25=$__child_addr;
 var $26=HEAP32[(($25)>>2)];
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($24,$26);
 $this_addr_i=$this1;
 var $this1_i=$this_addr_i;
 var $__pair3__i=(($this1_i+8)|0);
 $this_addr_i_i15=$__pair3__i;
 var $this1_i_i16=$this_addr_i_i15;
 var $27=$this1_i_i16;
 $this_addr_i_i_i14=$27;
 var $this1_i_i_i17=$this_addr_i_i_i14;
 var $__first__i_i_i=(($this1_i_i_i17)|0);
 var $28=HEAP32[(($__first__i_i_i)>>2)];
 var $inc=((($28)+(1))|0);
 HEAP32[(($__first__i_i_i)>>2)]=$inc;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__x_addr_i72;
 var $this_addr_i_i_i65;
 var $_addr_i_i_i66;
 var $this_addr_i_i67;
 var $_addr_i_i68;
 var $this_addr_i63;
 var $__x_addr_i59;
 var $this_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $__x_addr_i;
 var $__root_addr;
 var $__x_addr;
 var $__y;
 var $tmp=sp;
 var $exn_slot;
 var $ehselector_slot;
 var $__y29;
 var $tmp32=(sp)+(8);
 $__root_addr=$__root;
 $__x_addr=$__x;
 var $0=$__x_addr;
 var $1=$__root_addr;
 var $cmp=($0|0)==($1|0);
 var $2=$__x_addr;
 var $__is_black_=(($2+12)|0);
 var $frombool=($cmp&1);
 HEAP8[($__is_black_)]=$frombool;
 label=2;break;
 case 2: 
 var $3=$__x_addr;
 var $4=$__root_addr;
 var $cmp1=($3|0)!=($4|0);
 if($cmp1){label=3;break;}else{var $8=0;label=4;break;}
 case 3: 
 var $5=$__x_addr;
 var $__parent_=(($5+8)|0);
 var $6=HEAP32[(($__parent_)>>2)];
 var $__is_black_2=(($6+12)|0);
 var $7=HEAP8[($__is_black_2)];
 var $tobool=(($7)&1);
 var $lnot=$tobool^1;
 var $8=$lnot;label=4;break;
 case 4: 
 var $8;
 if($8){label=5;break;}else{label=27;break;}
 case 5: 
 var $9=$__x_addr;
 var $__parent_3=(($9+8)|0);
 var $10=HEAP32[(($__parent_3)>>2)];
 $__x_addr_i=$10;
 var $11=$__x_addr_i;
 var $12=$__x_addr_i;
 var $__parent__i=(($12+8)|0);
 var $13=HEAP32[(($__parent__i)>>2)];
 var $14=$13;
 var $__left__i=(($14)|0);
 var $15=HEAP32[(($__left__i)>>2)];
 var $cmp_i=($11|0)==($15|0);
 if($cmp_i){label=6;break;}else{label=17;break;}
 case 6: 
 var $16=$__x_addr;
 var $__parent_4=(($16+8)|0);
 var $17=HEAP32[(($__parent_4)>>2)];
 var $__parent_5=(($17+8)|0);
 var $18=HEAP32[(($__parent_5)>>2)];
 var $__right_=(($18+4)|0);
 var $19=HEAP32[(($__right_)>>2)];
 $__y=$19;
 var $20=$__y;
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $21=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$21;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 label=7;break;
 case 7: 
 $this_addr_i=$tmp;
 var $this1_i=$this_addr_i;
 label=8;break;
 case 8: 
 var $cmp8=($20|0)!=0;
 if($cmp8){label=9;break;}else{label=13;break;}
 case 9: 
 var $22=$__y;
 var $__is_black_9=(($22+12)|0);
 var $23=HEAP8[($__is_black_9)];
 var $tobool10=(($23)&1);
 if($tobool10){label=13;break;}else{label=10;break;}
 case 10: 
 var $24=$__x_addr;
 var $__parent_12=(($24+8)|0);
 var $25=HEAP32[(($__parent_12)>>2)];
 $__x_addr=$25;
 var $26=$__x_addr;
 var $__is_black_13=(($26+12)|0);
 HEAP8[($__is_black_13)]=1;
 var $27=$__x_addr;
 var $__parent_14=(($27+8)|0);
 var $28=HEAP32[(($__parent_14)>>2)];
 $__x_addr=$28;
 var $29=$__x_addr;
 var $30=$__root_addr;
 var $cmp15=($29|0)==($30|0);
 var $31=$__x_addr;
 var $__is_black_16=(($31+12)|0);
 var $frombool17=($cmp15&1);
 HEAP8[($__is_black_16)]=$frombool17;
 var $32=$__y;
 var $__is_black_18=(($32+12)|0);
 HEAP8[($__is_black_18)]=1;
 label=16;break;
 case 11: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=$33$0;
 $exn_slot=$34;
 var $35=$33$1;
 $ehselector_slot=$35;
 label=12;break;
 case 12: 
 var $exn=$exn_slot;
 ___cxa_call_unexpected($exn);
 throw "Reached an unreachable!";
 case 13: 
 var $36=$__x_addr;
 $__x_addr_i72=$36;
 var $37=$__x_addr_i72;
 var $38=$__x_addr_i72;
 var $__parent__i73=(($38+8)|0);
 var $39=HEAP32[(($__parent__i73)>>2)];
 var $40=$39;
 var $__left__i74=(($40)|0);
 var $41=HEAP32[(($__left__i74)>>2)];
 var $cmp_i75=($37|0)==($41|0);
 if($cmp_i75){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=$__x_addr;
 var $__parent_21=(($42+8)|0);
 var $43=HEAP32[(($__parent_21)>>2)];
 $__x_addr=$43;
 var $44=$__x_addr;
 __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($44);
 label=15;break;
 case 15: 
 var $45=$__x_addr;
 var $__parent_22=(($45+8)|0);
 var $46=HEAP32[(($__parent_22)>>2)];
 $__x_addr=$46;
 var $47=$__x_addr;
 var $__is_black_23=(($47+12)|0);
 HEAP8[($__is_black_23)]=1;
 var $48=$__x_addr;
 var $__parent_24=(($48+8)|0);
 var $49=HEAP32[(($__parent_24)>>2)];
 $__x_addr=$49;
 var $50=$__x_addr;
 var $__is_black_25=(($50+12)|0);
 HEAP8[($__is_black_25)]=0;
 var $51=$__x_addr;
 __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($51);
 label=27;break;
 case 16: 
 label=26;break;
 case 17: 
 var $52=$__x_addr;
 var $__parent_30=(($52+8)|0);
 var $53=HEAP32[(($__parent_30)>>2)];
 var $__parent_31=(($53+8)|0);
 var $54=HEAP32[(($__parent_31)>>2)];
 var $55=$54;
 var $__left_=(($55)|0);
 var $56=HEAP32[(($__left_)>>2)];
 $__y29=$56;
 var $57=$__y29;
 $this_addr_i_i67=$tmp32;
 $_addr_i_i68=-1;
 var $this1_i_i69=$this_addr_i_i67;
 var $58=$_addr_i_i68;
 $this_addr_i_i_i65=$this1_i_i69;
 $_addr_i_i_i66=$58;
 var $this1_i_i_i70=$this_addr_i_i_i65;
 var $__lx_i_i_i71=(($this1_i_i_i70)|0);
 HEAP32[(($__lx_i_i_i71)>>2)]=0;
 label=18;break;
 case 18: 
 $this_addr_i63=$tmp32;
 var $this1_i64=$this_addr_i63;
 label=19;break;
 case 19: 
 var $cmp36=($57|0)!=0;
 if($cmp36){label=20;break;}else{label=22;break;}
 case 20: 
 var $59=$__y29;
 var $__is_black_38=(($59+12)|0);
 var $60=HEAP8[($__is_black_38)];
 var $tobool39=(($60)&1);
 if($tobool39){label=22;break;}else{label=21;break;}
 case 21: 
 var $61=$__x_addr;
 var $__parent_41=(($61+8)|0);
 var $62=HEAP32[(($__parent_41)>>2)];
 $__x_addr=$62;
 var $63=$__x_addr;
 var $__is_black_42=(($63+12)|0);
 HEAP8[($__is_black_42)]=1;
 var $64=$__x_addr;
 var $__parent_43=(($64+8)|0);
 var $65=HEAP32[(($__parent_43)>>2)];
 $__x_addr=$65;
 var $66=$__x_addr;
 var $67=$__root_addr;
 var $cmp44=($66|0)==($67|0);
 var $68=$__x_addr;
 var $__is_black_45=(($68+12)|0);
 var $frombool46=($cmp44&1);
 HEAP8[($__is_black_45)]=$frombool46;
 var $69=$__y29;
 var $__is_black_47=(($69+12)|0);
 HEAP8[($__is_black_47)]=1;
 label=25;break;
 case 22: 
 var $70=$__x_addr;
 $__x_addr_i59=$70;
 var $71=$__x_addr_i59;
 var $72=$__x_addr_i59;
 var $__parent__i60=(($72+8)|0);
 var $73=HEAP32[(($__parent__i60)>>2)];
 var $74=$73;
 var $__left__i61=(($74)|0);
 var $75=HEAP32[(($__left__i61)>>2)];
 var $cmp_i62=($71|0)==($75|0);
 if($cmp_i62){label=23;break;}else{label=24;break;}
 case 23: 
 var $76=$__x_addr;
 var $__parent_51=(($76+8)|0);
 var $77=HEAP32[(($__parent_51)>>2)];
 $__x_addr=$77;
 var $78=$__x_addr;
 __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($78);
 label=24;break;
 case 24: 
 var $79=$__x_addr;
 var $__parent_53=(($79+8)|0);
 var $80=HEAP32[(($__parent_53)>>2)];
 $__x_addr=$80;
 var $81=$__x_addr;
 var $__is_black_54=(($81+12)|0);
 HEAP8[($__is_black_54)]=1;
 var $82=$__x_addr;
 var $__parent_55=(($82+8)|0);
 var $83=HEAP32[(($__parent_55)>>2)];
 $__x_addr=$83;
 var $84=$__x_addr;
 var $__is_black_56=(($84+12)|0);
 HEAP8[($__is_black_56)]=0;
 var $85=$__x_addr;
 __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($85);
 label=27;break;
 case 25: 
 label=26;break;
 case 26: 
 label=2;break;
 case 27: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i;
 var $__x_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $__x_addr;
 var $__y;
 var $tmp=sp;
 var $exn_slot;
 var $ehselector_slot;
 $__x_addr=$__x;
 var $0=$__x_addr;
 var $__right_=(($0+4)|0);
 var $1=HEAP32[(($__right_)>>2)];
 $__y=$1;
 var $2=$__y;
 var $3=$2;
 var $__left_=(($3)|0);
 var $4=HEAP32[(($__left_)>>2)];
 var $5=$__x_addr;
 var $__right_1=(($5+4)|0);
 HEAP32[(($__right_1)>>2)]=$4;
 var $6=$__x_addr;
 var $__right_2=(($6+4)|0);
 var $7=HEAP32[(($__right_2)>>2)];
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $8=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$8;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 label=2;break;
 case 2: 
 $this_addr_i=$tmp;
 var $this1_i=$this_addr_i;
 label=3;break;
 case 3: 
 var $cmp=($7|0)!=0;
 if($cmp){label=4;break;}else{label=7;break;}
 case 4: 
 var $9=$__x_addr;
 var $10=$__x_addr;
 var $__right_4=(($10+4)|0);
 var $11=HEAP32[(($__right_4)>>2)];
 var $__parent_=(($11+8)|0);
 HEAP32[(($__parent_)>>2)]=$9;
 label=7;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=$12$0;
 $exn_slot=$13;
 var $14=$12$1;
 $ehselector_slot=$14;
 label=6;break;
 case 6: 
 var $exn=$exn_slot;
 ___cxa_call_unexpected($exn);
 throw "Reached an unreachable!";
 case 7: 
 var $15=$__x_addr;
 var $__parent_5=(($15+8)|0);
 var $16=HEAP32[(($__parent_5)>>2)];
 var $17=$__y;
 var $__parent_6=(($17+8)|0);
 HEAP32[(($__parent_6)>>2)]=$16;
 var $18=$__x_addr;
 $__x_addr_i=$18;
 var $19=$__x_addr_i;
 var $20=$__x_addr_i;
 var $__parent__i=(($20+8)|0);
 var $21=HEAP32[(($__parent__i)>>2)];
 var $22=$21;
 var $__left__i=(($22)|0);
 var $23=HEAP32[(($__left__i)>>2)];
 var $cmp_i=($19|0)==($23|0);
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $24=$__y;
 var $25=$__x_addr;
 var $__parent_9=(($25+8)|0);
 var $26=HEAP32[(($__parent_9)>>2)];
 var $27=$26;
 var $__left_10=(($27)|0);
 HEAP32[(($__left_10)>>2)]=$24;
 label=10;break;
 case 9: 
 var $28=$__y;
 var $29=$__x_addr;
 var $__parent_11=(($29+8)|0);
 var $30=HEAP32[(($__parent_11)>>2)];
 var $__right_12=(($30+4)|0);
 HEAP32[(($__right_12)>>2)]=$28;
 label=10;break;
 case 10: 
 var $31=$__x_addr;
 var $32=$__y;
 var $33=$32;
 var $__left_14=(($33)|0);
 HEAP32[(($__left_14)>>2)]=$31;
 var $34=$__y;
 var $35=$__x_addr;
 var $__parent_15=(($35+8)|0);
 HEAP32[(($__parent_15)>>2)]=$34;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr_i;
 var $__x_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $__x_addr;
 var $__y;
 var $tmp=sp;
 var $exn_slot;
 var $ehselector_slot;
 $__x_addr=$__x;
 var $0=$__x_addr;
 var $1=$0;
 var $__left_=(($1)|0);
 var $2=HEAP32[(($__left_)>>2)];
 $__y=$2;
 var $3=$__y;
 var $__right_=(($3+4)|0);
 var $4=HEAP32[(($__right_)>>2)];
 var $5=$__x_addr;
 var $6=$5;
 var $__left_1=(($6)|0);
 HEAP32[(($__left_1)>>2)]=$4;
 var $7=$__x_addr;
 var $8=$7;
 var $__left_2=(($8)|0);
 var $9=HEAP32[(($__left_2)>>2)];
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $10=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$10;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 label=2;break;
 case 2: 
 $this_addr_i=$tmp;
 var $this1_i=$this_addr_i;
 label=3;break;
 case 3: 
 var $cmp=($9|0)!=0;
 if($cmp){label=4;break;}else{label=7;break;}
 case 4: 
 var $11=$__x_addr;
 var $12=$__x_addr;
 var $13=$12;
 var $__left_4=(($13)|0);
 var $14=HEAP32[(($__left_4)>>2)];
 var $__parent_=(($14+8)|0);
 HEAP32[(($__parent_)>>2)]=$11;
 label=7;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $16=$15$0;
 $exn_slot=$16;
 var $17=$15$1;
 $ehselector_slot=$17;
 label=6;break;
 case 6: 
 var $exn=$exn_slot;
 ___cxa_call_unexpected($exn);
 throw "Reached an unreachable!";
 case 7: 
 var $18=$__x_addr;
 var $__parent_5=(($18+8)|0);
 var $19=HEAP32[(($__parent_5)>>2)];
 var $20=$__y;
 var $__parent_6=(($20+8)|0);
 HEAP32[(($__parent_6)>>2)]=$19;
 var $21=$__x_addr;
 $__x_addr_i=$21;
 var $22=$__x_addr_i;
 var $23=$__x_addr_i;
 var $__parent__i=(($23+8)|0);
 var $24=HEAP32[(($__parent__i)>>2)];
 var $25=$24;
 var $__left__i=(($25)|0);
 var $26=HEAP32[(($__left__i)>>2)];
 var $cmp_i=($22|0)==($26|0);
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $27=$__y;
 var $28=$__x_addr;
 var $__parent_9=(($28+8)|0);
 var $29=HEAP32[(($__parent_9)>>2)];
 var $30=$29;
 var $__left_10=(($30)|0);
 HEAP32[(($__left_10)>>2)]=$27;
 label=10;break;
 case 9: 
 var $31=$__y;
 var $32=$__x_addr;
 var $__parent_11=(($32+8)|0);
 var $33=HEAP32[(($__parent_11)>>2)];
 var $__right_12=(($33+4)|0);
 HEAP32[(($__right_12)>>2)]=$31;
 label=10;break;
 case 10: 
 var $34=$__x_addr;
 var $35=$__y;
 var $__right_14=(($35+4)|0);
 HEAP32[(($__right_14)>>2)]=$34;
 var $36=$__y;
 var $37=$__x_addr;
 var $__parent_15=(($37+8)|0);
 HEAP32[(($__parent_15)>>2)]=$36;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_($this,$0){
 var label=0;
 var $this_addr;
 var $_addr;
 $this_addr=$this;
 $_addr=$0;
 var $this1=$this_addr;
 var $1=$_addr;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($this1,$1);
 return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($this,$0){
 var label=0;
 var $this_addr_i_i;
 var $__p_addr_i_i;
 var $this_addr_i;
 var $__p_addr_i;
 var $this_addr;
 var $_addr;
 $this_addr=$this;
 $_addr=$0;
 var $this1=$this_addr;
 var $__cc=(($this1)|0);
 var $1=$_addr;
 var $__cc2=(($1)|0);
 $this_addr_i=$__cc;
 $__p_addr_i=$__cc2;
 var $this1_i=$this_addr_i;
 var $2=$__p_addr_i;
 $this_addr_i_i=$this1_i;
 $__p_addr_i_i=$2;
 var $this1_i_i=$this_addr_i_i;
 var $first_i_i=(($this1_i_i)|0);
 var $3=$__p_addr_i_i;
 var $first2_i_i=(($3)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($first_i_i,$first2_i_i);
 var $second_i_i=(($this1_i_i+12)|0);
 var $4=$__p_addr_i_i;
 var $second3_i_i=(($4+12)|0);
 var $5=HEAP32[(($second3_i_i)>>2)];
 HEAP32[(($second_i_i)>>2)]=$5;
 return;
}
function __ZN4JSUID2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 HEAP32[(($0)>>2)]=5232;
 var $uiMap=(($this1+4)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev($uiMap) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $1=$this1;
 __ZN2UID2Ev($1);
 return;
 case 3: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 var $3=$2$0;
 $exn_slot=$3;
 var $4=$2$1;
 $ehselector_slot=$4;
 var $5=$this1;
 (function() { try { __THREW__ = 0; return __ZN2UID2Ev($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 label=5;break;
 case 5: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val3$0=$lpad_val$0;
 var $lpad_val3$1=$sel;
 ___resumeException($lpad_val3$0)
 case 6: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($this1);
 return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $__tree_=(($this1)|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($__tree_);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($this1);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($this){
 var label=0;
 var $__x_addr_i_i_i_i;
 var $__r_addr_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 $this_addr_i=$this1;
 var $this1_i=$this_addr_i;
 $this_addr_i_i=$this1_i;
 var $this1_i_i=$this_addr_i_i;
 var $__pair1__i_i=(($this1_i_i+4)|0);
 $this_addr_i_i_i=$__pair1__i_i;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $0=$this1_i_i_i;
 $this_addr_i_i_i_i=$0;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__first__i_i_i_i=(($this1_i_i_i_i)|0);
 $__r_addr_i_i_i=$__first__i_i_i_i;
 var $1=$__r_addr_i_i_i;
 $__x_addr_i_i_i_i=$1;
 var $2=$__x_addr_i_i_i_i;
 var $3=$2;
 var $4=$3;
 var $5=$4;
 var $6=$5;
 var $__left__i=(($6)|0);
 var $7=HEAP32[(($__left__i)>>2)];
 var $8=$7;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this1,$8);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$__nd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__x_addr_i;
 var $this_addr_i_i_i14;
 var $this_addr_i_i15;
 var $this_addr_i16;
 var $_addr_i_i10;
 var $__p_addr_i_i11;
 var $agg_tmp1_i=sp;
 var $__a_addr_i12;
 var $__p_addr_i13;
 var $agg_tmp_i=(sp)+(8);
 var $ref_tmp_i=(sp)+(16);
 var $this_addr_i_i7;
 var $__p_addr_i_i;
 var $_addr_i_i8;
 var $__a_addr_i;
 var $__p_addr_i;
 var $__n_addr_i;
 var $this_addr_i;
 var $this_addr_i_i_i;
 var $_addr_i_i_i;
 var $this_addr_i_i;
 var $_addr_i_i;
 var $this_addr;
 var $__nd_addr;
 var $tmp=(sp)+(24);
 var $exn_slot;
 var $ehselector_slot;
 var $__na;
 $this_addr=$this;
 $__nd_addr=$__nd;
 var $this1=$this_addr;
 var $0=$__nd_addr;
 $this_addr_i_i=$tmp;
 $_addr_i_i=-1;
 var $this1_i_i=$this_addr_i_i;
 var $1=$_addr_i_i;
 $this_addr_i_i_i=$this1_i_i;
 $_addr_i_i_i=$1;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $__lx_i_i_i=(($this1_i_i_i)|0);
 HEAP32[(($__lx_i_i_i)>>2)]=0;
 label=2;break;
 case 2: 
 $this_addr_i=$tmp;
 var $this1_i=$this_addr_i;
 label=3;break;
 case 3: 
 var $cmp=($0|0)!=0;
 if($cmp){label=4;break;}else{label=9;break;}
 case 4: 
 var $2=$__nd_addr;
 var $3=$2;
 var $__left_=(($3)|0);
 var $4=HEAP32[(($__left_)>>2)];
 var $5=$4;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this1,$5);
 var $6=$__nd_addr;
 var $7=$6;
 var $__right_=(($7+4)|0);
 var $8=HEAP32[(($__right_)>>2)];
 var $9=$8;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this1,$9);
 $this_addr_i16=$this1;
 var $this1_i17=$this_addr_i16;
 var $__pair1__i=(($this1_i17+4)|0);
 $this_addr_i_i15=$__pair1__i;
 var $this1_i_i18=$this_addr_i_i15;
 var $10=$this1_i_i18;
 $this_addr_i_i_i14=$10;
 var $this1_i_i_i19=$this_addr_i_i_i14;
 var $11=$this1_i_i_i19;
 $__na=$11;
 var $12=$__na;
 var $13=$__nd_addr;
 var $__value_=(($13+16)|0);
 $__x_addr_i=$__value_;
 var $14=$__x_addr_i;
 var $15=$14;
 var $16=$15;
 $__a_addr_i12=$12;
 $__p_addr_i13=$16;
 var $17=$ref_tmp_i;
 var $18=$__a_addr_i12;
 var $19=$__p_addr_i13;
 var $tmp_i=$agg_tmp1_i;
 var $tmp2_i=$agg_tmp_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp2_i)];
 $_addr_i_i10=$18;
 $__p_addr_i_i11=$19;
 var $20=$__p_addr_i_i11;
 (function() { try { __THREW__ = 0; return __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 label=6;break;
 case 6: 
 var $21=$__na;
 var $22=$__nd_addr;
 $__a_addr_i=$21;
 $__p_addr_i=$22;
 $__n_addr_i=1;
 var $23=$__a_addr_i;
 var $24=$__p_addr_i;
 var $25=$__n_addr_i;
 $this_addr_i_i7=$23;
 $__p_addr_i_i=$24;
 $_addr_i_i8=$25;
 var $this1_i_i9=$this_addr_i_i7;
 var $26=$__p_addr_i_i;
 var $27=$26;
 __ZdlPv($27);
 label=9;break;
 case 7: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 $exn_slot=$29;
 var $30=$28$1;
 $ehselector_slot=$30;
 label=8;break;
 case 8: 
 var $exn=$exn_slot;
 ___cxa_call_unexpected($exn);
 throw "Reached an unreachable!";
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_($this,$__comp){
 var label=0;
 var $this_addr;
 var $__comp_addr;
 $this_addr=$this;
 $__comp_addr=$__comp;
 var $this1=$this_addr;
 var $0=$__comp_addr;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($this1,$0);
 return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($this,$__comp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__t_addr_i5_i_i;
 var $__t_addr_i3_i_i_i;
 var $__t_addr_i_i_i_i;
 var $this_addr_i_i_i14;
 var $__t1_addr_i_i_i=sp;
 var $agg_tmp3_i_i=(sp)+(8);
 var $__t_addr_i_i_i;
 var $this_addr_i_i15;
 var $__t1_addr_i_i=(sp)+(16);
 var $agg_tmp_i_i=(sp)+(24);
 var $__t22_i=(sp)+(32);
 var $this_addr_i16;
 var $__t1_addr_i;
 var $agg_tmp12=(sp)+(40);
 var $__x_addr_i_i_i;
 var $__r_addr_i_i;
 var $this_addr_i_i_i5;
 var $this_addr_i_i6;
 var $this_addr_i7;
 var $this_addr_i3;
 var $this_addr_i_i_i_i_i;
 var $this_addr_i2_i_i_i;
 var $this_addr_i_i_i_i;
 var $this_addr_i_i_i;
 var $this_addr_i_i;
 var $this_addr_i;
 var $this_addr;
 var $__comp_addr;
 var $agg_tmp=(sp)+(48);
 $this_addr=$this;
 $__comp_addr=$__comp;
 var $this1=$this_addr;
 var $__pair1_=(($this1+4)|0);
 $this_addr_i=$__pair1_;
 var $this1_i=$this_addr_i;
 $this_addr_i_i=$this1_i;
 var $this1_i_i=$this_addr_i_i;
 var $0=$this1_i_i;
 $this_addr_i_i_i=$0;
 var $this1_i_i_i=$this_addr_i_i_i;
 var $1=$this1_i_i_i;
 $this_addr_i_i_i_i=$1;
 var $this1_i_i_i_i=$this_addr_i_i_i_i;
 var $__first__i_i_i=(($this1_i_i_i)|0);
 $this_addr_i2_i_i_i=$__first__i_i_i;
 var $this1_i3_i_i_i=$this_addr_i2_i_i_i;
 $this_addr_i_i_i_i_i=$this1_i3_i_i_i;
 var $this1_i_i_i_i_i=$this_addr_i_i_i_i_i;
 var $__left__i_i_i_i_i=(($this1_i_i_i_i_i)|0);
 HEAP32[(($__left__i_i_i_i_i)>>2)]=0;
 var $__pair3_=(($this1+8)|0);
 var $2=$__comp_addr;
 var $tmp=$agg_tmp12;
 var $tmp13=$agg_tmp;
 assert(1 % 1 === 0);HEAP8[($tmp)]=HEAP8[($tmp13)];
 $this_addr_i16=$__pair3_;
 $__t1_addr_i=0;
 var $this1_i17=$this_addr_i16;
 var $3=$__t1_addr_i;
 var $tmp_i=$__t22_i;
 var $tmp3_i=$agg_tmp12;
 assert(1 % 1 === 0);HEAP8[($tmp_i)]=HEAP8[($tmp3_i)];
 $this_addr_i_i15=$this1_i17;
 HEAP32[(($__t1_addr_i_i)>>2)]=$3;
 var $this1_i_i18=$this_addr_i_i15;
 var $4=$this1_i_i18;
 $__t_addr_i_i_i=$__t1_addr_i_i;
 var $5=$__t_addr_i_i_i;
 var $6=HEAP32[(($5)>>2)];
 $__t_addr_i5_i_i=$__t22_i;
 var $7=$__t_addr_i5_i_i;
 var $tmp_i_i=$agg_tmp3_i_i;
 var $tmp4_i_i=$agg_tmp_i_i;
 assert(1 % 1 === 0);HEAP8[($tmp_i_i)]=HEAP8[($tmp4_i_i)];
 $this_addr_i_i_i14=$4;
 HEAP32[(($__t1_addr_i_i_i)>>2)]=$6;
 var $this1_i_i_i19=$this_addr_i_i_i14;
 var $8=$this1_i_i_i19;
 $__t_addr_i_i_i_i=$agg_tmp3_i_i;
 var $9=$__t_addr_i_i_i_i;
 var $__first__i_i_i20=(($this1_i_i_i19)|0);
 $__t_addr_i3_i_i_i=$__t1_addr_i_i_i;
 var $10=$__t_addr_i3_i_i_i;
 var $11=HEAP32[(($10)>>2)];
 HEAP32[(($__first__i_i_i20)>>2)]=$11;
 $this_addr_i7=$this1;
 var $this1_i8=$this_addr_i7;
 var $__pair1__i=(($this1_i8+4)|0);
 $this_addr_i_i6=$__pair1__i;
 var $this1_i_i9=$this_addr_i_i6;
 var $12=$this1_i_i9;
 $this_addr_i_i_i5=$12;
 var $this1_i_i_i10=$this_addr_i_i_i5;
 var $__first__i_i_i11=(($this1_i_i_i10)|0);
 $__r_addr_i_i=$__first__i_i_i11;
 var $13=$__r_addr_i_i;
 $__x_addr_i_i_i=$13;
 var $14=$__x_addr_i_i_i;
 var $15=$14;
 var $16=$15;
 var $17=$16;
 $this_addr_i3=$this1;
 var $this1_i4=$this_addr_i3;
 var $__begin_node__i=(($this1_i4)|0);
 HEAP32[(($__begin_node__i)>>2)]=$17;
 STACKTOP=sp;return;
}
function __ZN2UID1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN2UID2Ev($this1);
 return;
}
function __ZN2UID0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 (function() { try { __THREW__ = 0; return __ZN2UID1Ev($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $0=$this1;
 __ZdlPv($0);
 return;
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $2=$1$0;
 $exn_slot=$2;
 var $3=$1$1;
 $ehselector_slot=$3;
 var $4=$this1;
 __ZdlPv($4);
 label=4;break;
 case 4: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val2$0=$lpad_val$0;
 var $lpad_val2$1=$sel;
 ___resumeException($lpad_val2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN2UI7declareEPfPKcS2_($this,$zone,$key,$val){
 var label=0;
 var $this_addr;
 var $zone_addr;
 var $key_addr;
 var $val_addr;
 $this_addr=$this;
 $zone_addr=$zone;
 $key_addr=$key;
 $val_addr=$val;
 var $this1=$this_addr;
 return;
}
function __ZN8Osc_wrapC2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 __ZN3OscC2Ev($0);
 var $1=$this1;
 HEAP32[(($1)>>2)]=5176;
 return;
}
function __ZN3OscC2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 __ZN3dspC2Ev($0);
 var $1=$this1;
 HEAP32[(($1)>>2)]=5352;
 return;
}
function __ZN8Osc_wrapD1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN8Osc_wrapD2Ev($this1);
 return;
}
function __ZN8Osc_wrapD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 (function() { try { __THREW__ = 0; return __ZN8Osc_wrapD1Ev($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $0=$this1;
 __ZdlPv($0);
 return;
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $2=$1$0;
 $exn_slot=$2;
 var $3=$1$1;
 $ehselector_slot=$3;
 var $4=$this1;
 __ZdlPv($4);
 label=4;break;
 case 4: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val2$0=$lpad_val$0;
 var $lpad_val2$1=$sel;
 ___resumeException($lpad_val2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3Osc12getNumInputsEv($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 return 0;
}
function __ZN3Osc13getNumOutputsEv($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 return 1;
}
function __ZN3Osc18buildUserInterfaceEP2UI($this,$interface){
 var label=0;
 var $this_addr;
 var $interface_addr;
 $this_addr=$this;
 $interface_addr=$interface;
 var $this1=$this_addr;
 var $0=$interface_addr;
 var $1=$0;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+16)|0);
 var $2=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$2]($0,2024);
 var $3=$interface_addr;
 var $4=$3;
 var $vtable2=HEAP32[(($4)>>2)];
 var $vfn3=(($vtable2+52)|0);
 var $5=HEAP32[(($vfn3)>>2)];
 var $fhslider1=(($this1+32)|0);
 FUNCTION_TABLE[$5]($3,$fhslider1,1376,1256);
 var $6=$interface_addr;
 var $7=$6;
 var $vtable4=HEAP32[(($7)>>2)];
 var $vfn5=(($vtable4+36)|0);
 var $8=HEAP32[(($vfn5)>>2)];
 var $fhslider16=(($this1+32)|0);
 FUNCTION_TABLE[$8]($6,920,$fhslider16,220,20,24000,1);
 var $9=$interface_addr;
 var $10=$9;
 var $vtable7=HEAP32[(($10)>>2)];
 var $vfn8=(($vtable7+52)|0);
 var $11=HEAP32[(($vfn8)>>2)];
 var $fhslider0=(($this1+20)|0);
 FUNCTION_TABLE[$11]($9,$fhslider0,1376,912);
 var $12=$interface_addr;
 var $13=$12;
 var $vtable9=HEAP32[(($13)>>2)];
 var $vfn10=(($vtable9+36)|0);
 var $14=HEAP32[(($vfn10)>>2)];
 var $fhslider011=(($this1+20)|0);
 FUNCTION_TABLE[$14]($12,760,$fhslider011,0,-96,0,0.10000000149011612);
 var $15=$interface_addr;
 var $16=$15;
 var $vtable12=HEAP32[(($16)>>2)];
 var $vfn13=(($vtable12+20)|0);
 var $17=HEAP32[(($vfn13)>>2)];
 FUNCTION_TABLE[$17]($15);
 return;
}
function __ZN3Osc4initEi($this,$samplingFreq){
 var label=0;
 var $this_addr;
 var $samplingFreq_addr;
 $this_addr=$this;
 $samplingFreq_addr=$samplingFreq;
 var $this1=$this_addr;
 var $0=$samplingFreq_addr;
 __ZN3Osc9classInitEi($0);
 var $1=$this1;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+36)|0);
 var $2=HEAP32[(($vfn)>>2)];
 var $3=$samplingFreq_addr;
 FUNCTION_TABLE[$2]($this1,$3);
 return;
}
function __ZN3Osc7computeEiPPfS1_($this,$count,$inputs,$outputs){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $count_addr;
 var $inputs_addr;
 var $outputs_addr;
 var $output0;
 var $fSlow0;
 var $fSlow1;
 var $i;
 var $fTemp0;
 $this_addr=$this;
 $count_addr=$count;
 $inputs_addr=$inputs;
 $outputs_addr=$outputs;
 var $this1=$this_addr;
 var $0=$outputs_addr;
 var $arrayidx=(($0)|0);
 var $1=HEAP32[(($arrayidx)>>2)];
 $output0=$1;
 var $fhslider0=(($this1+20)|0);
 var $2=HEAPF32[(($fhslider0)>>2)];
 var $mul=((0.05000000074505806))*($2);
 var $call=Math_pow(10,$mul);
 var $mul2=((0.0010000000474974513))*($call);
 $fSlow0=$mul2;
 var $fConst0=(($this1+28)|0);
 var $3=HEAPF32[(($fConst0)>>2)];
 var $fhslider1=(($this1+32)|0);
 var $4=HEAPF32[(($fhslider1)>>2)];
 var $mul3=($3)*($4);
 $fSlow1=$mul3;
 $i=0;
 label=2;break;
 case 2: 
 var $5=$i;
 var $6=$count_addr;
 var $cmp=($5|0)<($6|0);
 if($cmp){label=3;break;}else{label=5;break;}
 case 3: 
 var $fRec0=(($this1+12)|0);
 var $arrayidx4=(($fRec0+4)|0);
 var $7=HEAPF32[(($arrayidx4)>>2)];
 var $mul5=((0.9990000128746033))*($7);
 var $8=$fSlow0;
 var $add=($mul5)+($8);
 var $fRec06=(($this1+12)|0);
 var $arrayidx7=(($fRec06)|0);
 HEAPF32[(($arrayidx7)>>2)]=$add;
 var $fRec2=(($this1+4)|0);
 var $arrayidx8=(($fRec2+4)|0);
 var $9=HEAPF32[(($arrayidx8)>>2)];
 var $10=$fSlow1;
 var $add9=($9)+($10);
 $fTemp0=$add9;
 var $11=$fTemp0;
 var $12=$fTemp0;
 var $call10=Math_floor($12);
 var $sub=($11)-($call10);
 var $fRec211=(($this1+4)|0);
 var $arrayidx12=(($fRec211)|0);
 HEAPF32[(($arrayidx12)>>2)]=$sub;
 var $fRec013=(($this1+12)|0);
 var $arrayidx14=(($fRec013)|0);
 var $13=HEAPF32[(($arrayidx14)>>2)];
 var $fRec215=(($this1+4)|0);
 var $arrayidx16=(($fRec215)|0);
 var $14=HEAPF32[(($arrayidx16)>>2)];
 var $mul17=($14)*(65536);
 var $conv=(($mul17)&-1);
 var $arrayidx18=((14144+($conv<<2))|0);
 var $15=HEAPF32[(($arrayidx18)>>2)];
 var $mul19=($13)*($15);
 var $16=$i;
 var $17=$output0;
 var $arrayidx20=(($17+($16<<2))|0);
 HEAPF32[(($arrayidx20)>>2)]=$mul19;
 var $fRec021=(($this1+12)|0);
 var $arrayidx22=(($fRec021)|0);
 var $18=HEAPF32[(($arrayidx22)>>2)];
 var $fRec023=(($this1+12)|0);
 var $arrayidx24=(($fRec023+4)|0);
 HEAPF32[(($arrayidx24)>>2)]=$18;
 var $fRec225=(($this1+4)|0);
 var $arrayidx26=(($fRec225)|0);
 var $19=HEAPF32[(($arrayidx26)>>2)];
 var $fRec227=(($this1+4)|0);
 var $arrayidx28=(($fRec227+4)|0);
 HEAPF32[(($arrayidx28)>>2)]=$19;
 label=4;break;
 case 4: 
 var $20=$i;
 var $add29=((($20)+(1))|0);
 $i=$add29;
 label=2;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3Osc12getInputRateEi($this,$channel){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $channel_addr;
 var $rate;
 $this_addr=$this;
 $channel_addr=$channel;
 var $this1=$this_addr;
 var $0=$channel_addr;
 label=2;break;
 case 2: 
 $rate=-1;
 label=3;break;
 case 3: 
 var $1=$rate;
 return $1;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3Osc13getOutputRateEi($this,$channel){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $channel_addr;
 var $rate;
 $this_addr=$this;
 $channel_addr=$channel;
 var $this1=$this_addr;
 var $0=$channel_addr;
 if(($0|0)==0){ label=2;break;}else{label=3;break;}
 case 2: 
 $rate=1;
 label=4;break;
 case 3: 
 $rate=-1;
 label=4;break;
 case 4: 
 var $1=$rate;
 return $1;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3Osc12instanceInitEi($this,$samplingFreq){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $samplingFreq_addr;
 var $i;
 var $i5;
 $this_addr=$this;
 $samplingFreq_addr=$samplingFreq;
 var $this1=$this_addr;
 var $0=$samplingFreq_addr;
 var $fSamplingFreq=(($this1+24)|0);
 HEAP32[(($fSamplingFreq)>>2)]=$0;
 var $fhslider0=(($this1+20)|0);
 HEAPF32[(($fhslider0)>>2)]=0;
 $i=0;
 label=2;break;
 case 2: 
 var $1=$i;
 var $cmp=($1|0)<2;
 if($cmp){label=3;break;}else{label=5;break;}
 case 3: 
 var $2=$i;
 var $fRec0=(($this1+12)|0);
 var $arrayidx=(($fRec0+($2<<2))|0);
 HEAPF32[(($arrayidx)>>2)]=0;
 label=4;break;
 case 4: 
 var $3=$i;
 var $add=((($3)+(1))|0);
 $i=$add;
 label=2;break;
 case 5: 
 var $fSamplingFreq2=(($this1+24)|0);
 var $4=HEAP32[(($fSamplingFreq2)>>2)];
 var $conv=($4|0);
 var $call=_fmax(1,$conv);
 var $call3=_fmin(192000,$call);
 var $conv4=$call3;
 var $div=(1)/($conv4);
 var $fConst0=(($this1+28)|0);
 HEAPF32[(($fConst0)>>2)]=$div;
 var $fhslider1=(($this1+32)|0);
 HEAPF32[(($fhslider1)>>2)]=220;
 $i5=0;
 label=6;break;
 case 6: 
 var $5=$i5;
 var $cmp7=($5|0)<2;
 if($cmp7){label=7;break;}else{label=9;break;}
 case 7: 
 var $6=$i5;
 var $fRec2=(($this1+4)|0);
 var $arrayidx9=(($fRec2+($6<<2))|0);
 HEAPF32[(($arrayidx9)>>2)]=0;
 label=8;break;
 case 8: 
 var $7=$i5;
 var $add11=((($7)+(1))|0);
 $i5=$add11;
 label=6;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3Osc9classInitEi($samplingFreq){
 var label=0;
 var $samplingFreq_addr;
 var $sig0;
 $samplingFreq_addr=$samplingFreq;
 var $call=__Z10newOscSIG0v();
 $sig0=$call;
 var $0=$sig0;
 var $1=$samplingFreq_addr;
 __ZN7OscSIG019instanceInitOscSIG0Ei($0,$1);
 var $2=$sig0;
 __ZN7OscSIG011fillOscSIG0EiPf($2,65536,14144);
 var $3=$sig0;
 __Z13deleteOscSIG0P7OscSIG0($3);
 return;
}
function __ZN7OscSIG019instanceInitOscSIG0Ei($this,$samplingFreq){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $samplingFreq_addr;
 var $i;
 $this_addr=$this;
 $samplingFreq_addr=$samplingFreq;
 var $this1=$this_addr;
 $i=0;
 label=2;break;
 case 2: 
 var $0=$i;
 var $cmp=($0|0)<2;
 if($cmp){label=3;break;}else{label=5;break;}
 case 3: 
 var $1=$i;
 var $iRec1=(($this1)|0);
 var $arrayidx=(($iRec1+($1<<2))|0);
 HEAP32[(($arrayidx)>>2)]=0;
 label=4;break;
 case 4: 
 var $2=$i;
 var $add=((($2)+(1))|0);
 $i=$add;
 label=2;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN7OscSIG011fillOscSIG0EiPf($this,$count,$output){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $count_addr;
 var $output_addr;
 var $i;
 $this_addr=$this;
 $count_addr=$count;
 $output_addr=$output;
 var $this1=$this_addr;
 $i=0;
 label=2;break;
 case 2: 
 var $0=$i;
 var $1=$count_addr;
 var $cmp=($0|0)<($1|0);
 if($cmp){label=3;break;}else{label=5;break;}
 case 3: 
 var $iRec1=(($this1)|0);
 var $arrayidx=(($iRec1+4)|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $add=((($2)+(1))|0);
 var $iRec12=(($this1)|0);
 var $arrayidx3=(($iRec12)|0);
 HEAP32[(($arrayidx3)>>2)]=$add;
 var $iRec14=(($this1)|0);
 var $arrayidx5=(($iRec14)|0);
 var $3=HEAP32[(($arrayidx5)>>2)];
 var $sub=((($3)-(1))|0);
 var $conv=($sub|0);
 var $mul=((0.0000958738019107841))*($conv);
 var $call=Math_sin($mul);
 var $4=$i;
 var $5=$output_addr;
 var $arrayidx6=(($5+($4<<2))|0);
 HEAPF32[(($arrayidx6)>>2)]=$call;
 var $iRec17=(($this1)|0);
 var $arrayidx8=(($iRec17)|0);
 var $6=HEAP32[(($arrayidx8)>>2)];
 var $iRec19=(($this1)|0);
 var $arrayidx10=(($iRec19+4)|0);
 HEAP32[(($arrayidx10)>>2)]=$6;
 label=4;break;
 case 4: 
 var $7=$i;
 var $add11=((($7)+(1))|0);
 $i=$add11;
 label=2;break;
 case 5: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN8Osc_wrapD2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 __ZN3OscD2Ev($0);
 return;
}
function __ZN3OscD2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 __ZN3dspD2Ev($0);
 return;
}
function __ZN3dspD2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 return;
}
function __ZN3dspC2Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 var $0=$this1;
 HEAP32[(($0)>>2)]=5304;
 return;
}
function __ZN3OscD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 (function() { try { __THREW__ = 0; return __ZN3OscD1Ev($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $0=$this1;
 __ZdlPv($0);
 return;
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $2=$1$0;
 $exn_slot=$2;
 var $3=$1$1;
 $ehselector_slot=$3;
 var $4=$this1;
 __ZdlPv($4);
 label=4;break;
 case 4: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val2$0=$lpad_val$0;
 var $lpad_val2$1=$sel;
 ___resumeException($lpad_val2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN3dspD1Ev($this){
 var label=0;
 var $this_addr;
 $this_addr=$this;
 var $this1=$this_addr;
 __ZN3dspD2Ev($this1);
 return;
}
function __ZN3dspD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $this_addr;
 var $exn_slot;
 var $ehselector_slot;
 $this_addr=$this;
 var $this1=$this_addr;
 (function() { try { __THREW__ = 0; return __ZN3dspD1Ev($this1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $0=$this1;
 __ZdlPv($0);
 return;
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $2=$1$0;
 $exn_slot=$2;
 var $3=$1$1;
 $ehselector_slot=$3;
 var $4=$this1;
 __ZdlPv($4);
 label=4;break;
 case 4: 
 var $exn=$exn_slot;
 var $sel=$ehselector_slot;
 var $lpad_val$0=$exn;
 var $lpad_val$1=0;
 var $lpad_val2$0=$lpad_val$0;
 var $lpad_val2$1=$sel;
 ___resumeException($lpad_val2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ref_tmp_i_i32=sp;
 var $ref_tmp_i_i25=(sp)+(8);
 var $ref_tmp_i_i17=(sp)+(16);
 var $ref_tmp_i_i=(sp)+(24);
 var $0=HEAP32[((_stdin)>>2)];
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(13016,$0,13144);
 HEAP32[((14008)>>2)]=4508;
 HEAP32[((14016)>>2)]=4528;
 HEAP32[((14012)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(14016,13016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=2;break; }
 case 2: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(14016);
 ___resumeException($1$0)
 case 3: 
 HEAP32[((14088)>>2)]=0;
 HEAP32[((14092)>>2)]=-1;
 var $2=HEAP32[((_stdout)>>2)];
 var $3=$ref_tmp_i_i;
 HEAP32[((12920)>>2)]=4288;
 __ZNSt3__16localeC2Ev(12924);
 HEAP32[((12928)>>2)]=0; HEAP32[((12932)>>2)]=0; HEAP32[((12936)>>2)]=0; HEAP32[((12940)>>2)]=0; HEAP32[((12944)>>2)]=0; HEAP32[((12948)>>2)]=0;
 HEAP32[((12920)>>2)]=4656;
 HEAP32[((12952)>>2)]=$2;
 __ZNSt3__16localeC2ERKS0_($ref_tmp_i_i,12924);
 var $call_i7_i_i=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp_i_i,13344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i);
 HEAP32[((12920)>>2)]=4288;
 __ZNSt3__16localeD2Ev(12924);
 ___resumeException($4$0)
 case 5: 
 var $5=$call_i7_i_i;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i);
 HEAP32[((12956)>>2)]=$5;
 HEAP32[((12960)>>2)]=13152;
 var $6=$call_i7_i_i;
 var $vtable_i_i_i=HEAP32[(($6)>>2)];
 var $vfn_i_i_i=(($vtable_i_i_i+28)|0);
 var $7=HEAP32[(($vfn_i_i_i)>>2)];
 var $call_i_i_i=FUNCTION_TABLE[$7]($5);
 var $frombool_i_i=($call_i_i_i&1);
 HEAP8[(12964)]=$frombool_i_i;
 HEAP32[((13744)>>2)]=4412;
 HEAP32[((13748)>>2)]=4432;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13748,12920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13748);
 ___resumeException($8$0)
 case 7: 
 HEAP32[((13820)>>2)]=0;
 HEAP32[((13824)>>2)]=-1;
 var $9=HEAP32[((_stderr)>>2)];
 var $10=$ref_tmp_i_i17;
 HEAP32[((12968)>>2)]=4288;
 __ZNSt3__16localeC2Ev(12972);
 HEAP32[((12976)>>2)]=0; HEAP32[((12980)>>2)]=0; HEAP32[((12984)>>2)]=0; HEAP32[((12988)>>2)]=0; HEAP32[((12992)>>2)]=0; HEAP32[((12996)>>2)]=0;
 HEAP32[((12968)>>2)]=4656;
 HEAP32[((13000)>>2)]=$9;
 __ZNSt3__16localeC2ERKS0_($ref_tmp_i_i17,12972);
 var $call_i7_i_i18=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp_i_i17,13344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i17);
 HEAP32[((12968)>>2)]=4288;
 __ZNSt3__16localeD2Ev(12972);
 ___resumeException($11$0)
 case 9: 
 var $12=$call_i7_i_i18;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i17);
 HEAP32[((13004)>>2)]=$12;
 HEAP32[((13008)>>2)]=13160;
 var $13=$call_i7_i_i18;
 var $vtable_i_i_i20=HEAP32[(($13)>>2)];
 var $vfn_i_i_i21=(($vtable_i_i_i20+28)|0);
 var $14=HEAP32[(($vfn_i_i_i21)>>2)];
 var $call_i_i_i22=FUNCTION_TABLE[$14]($12);
 var $frombool_i_i23=($call_i_i_i22&1);
 HEAP8[(13012)]=$frombool_i_i23;
 HEAP32[((13920)>>2)]=4412;
 HEAP32[((13924)>>2)]=4432;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13924,12968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=10;break; }
 case 10: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13924);
 ___resumeException($15$0)
 case 11: 
 HEAP32[((13996)>>2)]=0;
 HEAP32[((14000)>>2)]=-1;
 var $vtable=HEAP32[((13920)>>2)];
 var $vbase_offset_ptr=((($vtable)-(12))|0);
 var $16=$vbase_offset_ptr;
 var $vbase_offset=HEAP32[(($16)>>2)];
 var $add_ptr_sum=((($vbase_offset)+(24))|0);
 var $__rdbuf__i_i=((13920+$add_ptr_sum)|0);
 var $17=$__rdbuf__i_i;
 var $18=HEAP32[(($17)>>2)];
 HEAP32[((13832)>>2)]=4412;
 HEAP32[((13836)>>2)]=4432;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13836,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13836);
 ___resumeException($19$0)
 case 13: 
 HEAP32[((13908)>>2)]=0;
 HEAP32[((13912)>>2)]=-1;
 var $vtable14=HEAP32[((14008)>>2)];
 var $vbase_offset_ptr15=((($vtable14)-(12))|0);
 var $20=$vbase_offset_ptr15;
 var $vbase_offset16=HEAP32[(($20)>>2)];
 var $add_ptr17_sum=((($vbase_offset16)+(72))|0);
 var $__tie__i=((14008+$add_ptr17_sum)|0);
 var $21=$__tie__i;
 HEAP32[(($21)>>2)]=13744;
 var $vtable19=HEAP32[((13920)>>2)];
 var $vbase_offset_ptr20=((($vtable19)-(12))|0);
 var $22=$vbase_offset_ptr20;
 var $vbase_offset21=HEAP32[(($22)>>2)];
 var $add_ptr22_sum=((($vbase_offset21)+(4))|0);
 var $__fmtflags__i_i=((13920+$add_ptr22_sum)|0);
 var $23=$__fmtflags__i_i;
 var $24=HEAP32[(($23)>>2)];
 var $or_i_i=$24|8192;
 HEAP32[(($23)>>2)]=$or_i_i;
 var $vtable24=HEAP32[((13920)>>2)];
 var $vbase_offset_ptr25=((($vtable24)-(12))|0);
 var $25=$vbase_offset_ptr25;
 var $vbase_offset26=HEAP32[(($25)>>2)];
 var $add_ptr27_sum=((($vbase_offset26)+(72))|0);
 var $__tie__i149=((13920+$add_ptr27_sum)|0);
 var $26=$__tie__i149;
 HEAP32[(($26)>>2)]=13744;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(12864,$0,13168);
 HEAP32[((13656)>>2)]=4460;
 HEAP32[((13664)>>2)]=4480;
 HEAP32[((13660)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13664,12864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13664);
 ___resumeException($27$0)
 case 15: 
 HEAP32[((13736)>>2)]=0;
 HEAP32[((13740)>>2)]=-1;
 var $28=$ref_tmp_i_i25;
 HEAP32[((12768)>>2)]=4216;
 __ZNSt3__16localeC2Ev(12772);
 HEAP32[((12776)>>2)]=0; HEAP32[((12780)>>2)]=0; HEAP32[((12784)>>2)]=0; HEAP32[((12788)>>2)]=0; HEAP32[((12792)>>2)]=0; HEAP32[((12796)>>2)]=0;
 HEAP32[((12768)>>2)]=4584;
 HEAP32[((12800)>>2)]=$2;
 __ZNSt3__16localeC2ERKS0_($ref_tmp_i_i25,12772);
 var $call_i7_i_i26=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp_i_i25,13336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i25);
 HEAP32[((12768)>>2)]=4216;
 __ZNSt3__16localeD2Ev(12772);
 ___resumeException($29$0)
 case 17: 
 var $30=$call_i7_i_i26;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i25);
 HEAP32[((12804)>>2)]=$30;
 HEAP32[((12808)>>2)]=13176;
 var $31=$call_i7_i_i26;
 var $vtable_i_i_i28=HEAP32[(($31)>>2)];
 var $vfn_i_i_i29=(($vtable_i_i_i28+28)|0);
 var $32=HEAP32[(($vfn_i_i_i29)>>2)];
 var $call_i_i_i30=FUNCTION_TABLE[$32]($30);
 var $frombool_i_i31=($call_i_i_i30&1);
 HEAP8[(12812)]=$frombool_i_i31;
 HEAP32[((13376)>>2)]=4364;
 HEAP32[((13380)>>2)]=4384;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13380,12768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13380);
 ___resumeException($33$0)
 case 19: 
 HEAP32[((13452)>>2)]=0;
 HEAP32[((13456)>>2)]=-1;
 var $34=$ref_tmp_i_i32;
 HEAP32[((12816)>>2)]=4216;
 __ZNSt3__16localeC2Ev(12820);
 HEAP32[((12824)>>2)]=0; HEAP32[((12828)>>2)]=0; HEAP32[((12832)>>2)]=0; HEAP32[((12836)>>2)]=0; HEAP32[((12840)>>2)]=0; HEAP32[((12844)>>2)]=0;
 HEAP32[((12816)>>2)]=4584;
 HEAP32[((12848)>>2)]=$9;
 __ZNSt3__16localeC2ERKS0_($ref_tmp_i_i32,12820);
 var $call_i7_i_i33=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp_i_i32,13336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i32);
 HEAP32[((12816)>>2)]=4216;
 __ZNSt3__16localeD2Ev(12820);
 ___resumeException($35$0)
 case 21: 
 var $36=$call_i7_i_i33;
 __ZNSt3__16localeD2Ev($ref_tmp_i_i32);
 HEAP32[((12852)>>2)]=$36;
 HEAP32[((12856)>>2)]=13184;
 var $37=$call_i7_i_i33;
 var $vtable_i_i_i35=HEAP32[(($37)>>2)];
 var $vfn_i_i_i36=(($vtable_i_i_i35+28)|0);
 var $38=HEAP32[(($vfn_i_i_i36)>>2)];
 var $call_i_i_i37=FUNCTION_TABLE[$38]($36);
 var $frombool_i_i38=($call_i_i_i37&1);
 HEAP8[(12860)]=$frombool_i_i38;
 HEAP32[((13552)>>2)]=4364;
 HEAP32[((13556)>>2)]=4384;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13556,12816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13556);
 ___resumeException($39$0)
 case 23: 
 HEAP32[((13628)>>2)]=0;
 HEAP32[((13632)>>2)]=-1;
 var $vtable42=HEAP32[((13552)>>2)];
 var $vbase_offset_ptr43=((($vtable42)-(12))|0);
 var $40=$vbase_offset_ptr43;
 var $vbase_offset44=HEAP32[(($40)>>2)];
 var $add_ptr45_sum=((($vbase_offset44)+(24))|0);
 var $__rdbuf__i_i229=((13552+$add_ptr45_sum)|0);
 var $41=$__rdbuf__i_i229;
 var $42=HEAP32[(($41)>>2)];
 HEAP32[((13464)>>2)]=4364;
 HEAP32[((13468)>>2)]=4384;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base4initEPv(13468,$42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1); var $43$1 = tempRet0;
 __ZNSt3__18ios_baseD2Ev(13468);
 ___resumeException($43$0)
 case 25: 
 HEAP32[((13540)>>2)]=0;
 HEAP32[((13544)>>2)]=-1;
 var $vtable48=HEAP32[((13656)>>2)];
 var $vbase_offset_ptr49=((($vtable48)-(12))|0);
 var $44=$vbase_offset_ptr49;
 var $vbase_offset50=HEAP32[(($44)>>2)];
 var $add_ptr51_sum=((($vbase_offset50)+(72))|0);
 var $__tie__i259=((13656+$add_ptr51_sum)|0);
 var $45=$__tie__i259;
 HEAP32[(($45)>>2)]=13376;
 var $vtable53=HEAP32[((13552)>>2)];
 var $vbase_offset_ptr54=((($vtable53)-(12))|0);
 var $46=$vbase_offset_ptr54;
 var $vbase_offset55=HEAP32[(($46)>>2)];
 var $add_ptr56_sum=((($vbase_offset55)+(4))|0);
 var $__fmtflags__i_i266=((13552+$add_ptr56_sum)|0);
 var $47=$__fmtflags__i_i266;
 var $48=HEAP32[(($47)>>2)];
 var $or_i_i268=$48|8192;
 HEAP32[(($47)>>2)]=$or_i_i268;
 var $vtable58=HEAP32[((13552)>>2)];
 var $vbase_offset_ptr59=((($vtable58)-(12))|0);
 var $49=$vbase_offset_ptr59;
 var $vbase_offset60=HEAP32[(($49)>>2)];
 var $add_ptr61_sum=((($vbase_offset60)+(72))|0);
 var $__tie__i273=((13552+$add_ptr61_sum)|0);
 var $50=$__tie__i273;
 HEAP32[(($50)>>2)]=13376;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $call3=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(13832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $call5=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $call7=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(13464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i_i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+24)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($this);
 var $call_i=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13336);
 var $2=$call_i;
 var $__cv_=(($this+36)|0);
 HEAP32[(($__cv_)>>2)]=$2;
 var $3=$call_i;
 var $vtable_i=HEAP32[(($3)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $4=HEAP32[(($vfn_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$4]($2);
 var $__always_noconv_=(($this+44)|0);
 var $frombool=($call_i5&1);
 HEAP8[($__always_noconv_)]=$frombool;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $__cv_=(($this+36)|0);
 var $__st_=(($this+40)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr=(($__extbuf+8)|0);
 var $sub_ptr_rhs_cast=$__extbuf;
 var $__file_=(($this+32)|0);
 label=2;break;
 case 2: 
 var $0=HEAP32[(($__cv_)>>2)];
 var $1=HEAP32[(($__st_)>>2)];
 var $2=$0;
 var $vtable_i=HEAP32[(($2)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $3=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$3]($0,$1,$arraydecay,$add_ptr,$__extbe);
 var $4=HEAP32[(($__extbe)>>2)];
 var $sub_ptr_lhs_cast=$4;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $5=HEAP32[(($__file_)>>2)];
 var $call5=_fwrite($arraydecay,1,$sub_ptr_sub,$5);
 var $cmp=($call5|0)==($sub_ptr_sub|0);
 if($cmp){label=3;break;}else{var $retval_0=-1;label=5;break;}
 case 3: 
 if(($call_i|0)==1){ label=2;break;}else if(($call_i|0)==2){ var $retval_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $6=HEAP32[(($__file_)>>2)];
 var $call11=_fflush($6);
 var $not_tobool=($call11|0)!=0;
 var $_=(($not_tobool<<31)>>31);
 var $retval_0=$_;label=5;break;
 case 5: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__always_noconv_=(($this+44)|0);
 var $0=HEAP8[($__always_noconv_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=2;break;}else{label=3;break;}
 case 2: 
 var $2=$this;
 var $cmp6=($__n|0)>0;
 if($cmp6){var $__s_addr_07=$__s;var $__i_08=0;label=4;break;}else{var $retval_0=0;label=6;break;}
 case 3: 
 var $3=$__s;
 var $__file_=(($this+32)|0);
 var $4=HEAP32[(($__file_)>>2)];
 var $call=_fwrite($3,4,$__n,$4);
 var $retval_0=$call;label=6;break;
 case 4: 
 var $__i_08;
 var $__s_addr_07;
 var $vtable=HEAP32[(($2)>>2)];
 var $vfn=(($vtable+52)|0);
 var $5=HEAP32[(($vfn)>>2)];
 var $6=HEAP32[(($__s_addr_07)>>2)];
 var $call3=FUNCTION_TABLE[$5]($this,$6);
 var $cmp5=($call3|0)==-1;
 if($cmp5){var $retval_0=$__i_08;label=6;break;}else{label=5;break;}
 case 5: 
 var $inc=((($__i_08)+(1))|0);
 var $incdec_ptr=(($__s_addr_07+4)|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__s_addr_07=$incdec_ptr;var $__i_08=$inc;label=4;break;}else{var $retval_0=$inc;label=6;break;}
 case 6: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $cmp_i=($__c|0)==-1;
 if($cmp_i){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $__always_noconv_=(($this+44)|0);
 var $0=HEAP8[($__always_noconv_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=4;break;}else{label=3;break;}
 case 3: 
 var $2=$__1buf;
 var $__file_=(($this+32)|0);
 var $3=HEAP32[(($__file_)>>2)];
 var $call5=_fwrite($2,4,1,$3);
 var $cmp=($call5|0)==1;
 if($cmp){label=11;break;}else{var $retval_0=-1;label=12;break;}
 case 4: 
 var $arraydecay=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$arraydecay;
 var $add_ptr=(($__1buf+4)|0);
 var $__cv_=(($this+36)|0);
 var $__st_=(($this+40)|0);
 var $add_ptr10=(($__extbuf+8)|0);
 var $sub_ptr_rhs_cast=$__extbuf;
 var $__file_30=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $4=HEAP32[(($__cv_)>>2)];
 var $5=HEAP32[(($__st_)>>2)];
 var $6=$4;
 var $vtable_i=HEAP32[(($6)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $7=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$7]($4,$5,$pbase_0,$add_ptr,$__e,$arraydecay,$add_ptr10,$__extbe);
 var $8=HEAP32[(($__e)>>2)];
 var $cmp12=($8|0)==($pbase_0|0);
 if($cmp12){var $retval_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $cmp16=($call_i|0)==3;
 if($cmp16){label=7;break;}else{label=8;break;}
 case 7: 
 var $9=$pbase_0;
 var $10=HEAP32[(($__file_30)>>2)];
 var $call19=_fwrite($9,1,1,$10);
 var $cmp20=($call19|0)==1;
 if($cmp20){label=11;break;}else{var $retval_0=-1;label=12;break;}
 case 8: 
 var $cmp26=($call_i|0)==1;
 var $11=($call_i>>>0)<2;
 if($11){label=9;break;}else{var $retval_0=-1;label=12;break;}
 case 9: 
 var $12=HEAP32[(($__extbe)>>2)];
 var $sub_ptr_lhs_cast=$12;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $13=HEAP32[(($__file_30)>>2)];
 var $call31=_fwrite($arraydecay,1,$sub_ptr_sub,$13);
 var $cmp32=($call31|0)==($sub_ptr_sub|0);
 if($cmp32){label=10;break;}else{var $retval_0=-1;label=12;break;}
 case 10: 
 var $14=HEAP32[(($__e)>>2)];
 var $_pbase_0=($cmp26?$14:$pbase_0);
 if($cmp26){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $cond_i=($cmp_i?0:$__c);
 var $retval_0=$cond_i;label=12;break;
 case 12: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ref_tmp=sp;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i1=(($this+4)|0);
 __ZNSt3__16localeC2Ev($__loc__i1);
 var $__binp__i=(($this+8)|0);
 var $1=$__binp__i;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0; HEAP32[((($1)+(20))>>2)]=0;
 HEAP32[(($0)>>2)]=4984;
 var $__file_=(($this+32)|0);
 HEAP32[(($__file_)>>2)]=$__fp;
 var $__st_=(($this+40)|0);
 HEAP32[(($__st_)>>2)]=$__st;
 var $__last_consumed_=(($this+48)|0);
 HEAP32[(($__last_consumed_)>>2)]=-1;
 var $__last_consumed_is_next_=(($this+52)|0);
 HEAP8[($__last_consumed_is_next_)]=0;
 __ZNSt3__16localeC2ERKS0_($ref_tmp,$__loc__i1);
 var $call_i_i3=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp,13336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $2=$call_i_i3;
 var $__cv__i=(($this+36)|0);
 HEAP32[(($__cv__i)>>2)]=$2;
 var $3=$call_i_i3;
 var $vtable_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i=(($vtable_i_i+24)|0);
 var $4=HEAP32[(($vfn_i_i)>>2)];
 var $call_i7_i=FUNCTION_TABLE[$4]($2);
 var $__encoding__i=(($this+44)|0);
 HEAP32[(($__encoding__i)>>2)]=$call_i7_i;
 var $5=HEAP32[(($__cv__i)>>2)];
 var $6=$5;
 var $vtable_i10_i=HEAP32[(($6)>>2)];
 var $vfn_i11_i=(($vtable_i10_i+28)|0);
 var $7=HEAP32[(($vfn_i11_i)>>2)];
 var $call_i12_i=FUNCTION_TABLE[$7]($5);
 var $__always_noconv__i=(($this+53)|0);
 var $frombool_i=($call_i12_i&1);
 HEAP8[($__always_noconv__i)]=$frombool_i;
 var $8=HEAP32[(($__encoding__i)>>2)];
 var $cmp_i=($8|0)>8;
 if($cmp_i){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($ref_tmp);
 STACKTOP=sp;return;
 case 5: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp);
 HEAP32[(($0)>>2)]=4216;
 __ZNSt3__16localeD2Ev($__loc__i1);
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i_i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call_i=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13336);
 var $0=$call_i;
 var $__cv_=(($this+36)|0);
 HEAP32[(($__cv_)>>2)]=$0;
 var $1=$call_i;
 var $vtable_i=HEAP32[(($1)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $2=HEAP32[(($vfn_i)>>2)];
 var $call_i7=FUNCTION_TABLE[$2]($0);
 var $__encoding_=(($this+44)|0);
 HEAP32[(($__encoding_)>>2)]=$call_i7;
 var $3=HEAP32[(($__cv_)>>2)];
 var $4=$3;
 var $vtable_i10=HEAP32[(($4)>>2)];
 var $vfn_i11=(($vtable_i10+28)|0);
 var $5=HEAP32[(($vfn_i11)>>2)];
 var $call_i12=FUNCTION_TABLE[$5]($3);
 var $__always_noconv_=(($this+53)|0);
 var $frombool=($call_i12&1);
 HEAP8[($__always_noconv_)]=$frombool;
 var $6=HEAP32[(($__encoding_)>>2)];
 var $cmp=($6|0)>8;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(184);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;
 var $call=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $call;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;
 var $call=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $call;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $cmp_i=($__c|0)==-1;
 var $__last_consumed_is_next_=(($this+52)|0);
 var $0=HEAP8[($__last_consumed_is_next_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)!=0;
 if($cmp_i){label=2;break;}else{label=4;break;}
 case 2: 
 if($tobool){var $retval_0=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $__last_consumed_=(($this+48)|0);
 var $2=HEAP32[(($__last_consumed_)>>2)];
 var $lnot=($2|0)!=-1;
 var $frombool=($lnot&1);
 HEAP8[($__last_consumed_is_next_)]=$frombool;
 var $retval_0=$2;label=11;break;
 case 4: 
 var $__last_consumed_12=(($this+48)|0);
 if($tobool){label=5;break;}else{label=10;break;}
 case 5: 
 var $3=HEAP32[(($__last_consumed_12)>>2)];
 HEAP32[(($__ci)>>2)]=$3;
 var $__cv_=(($this+36)|0);
 var $4=HEAP32[(($__cv_)>>2)];
 var $__st_=(($this+40)|0);
 var $5=HEAP32[(($__st_)>>2)];
 var $add_ptr=(($__ci+4)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr15=(($__extbuf+8)|0);
 var $6=$4;
 var $vtable_i=HEAP32[(($6)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $7=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$7]($4,$5,$__ci,$add_ptr,$__inxt,$arraydecay,$add_ptr15,$__enxt);
 if(($call_i|0)==2|($call_i|0)==1){ var $retval_0=-1;label=11;break;}else if(($call_i|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $8=HEAP32[(($__last_consumed_12)>>2)];
 var $conv=(($8)&255);
 HEAP8[($arraydecay)]=$conv;
 var $add_ptr20=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$add_ptr20;
 label=7;break;
 case 7: 
 var $__file_=(($this+32)|0);
 label=8;break;
 case 8: 
 var $9=HEAP32[(($__enxt)>>2)];
 var $cmp=($9>>>0)>($arraydecay>>>0);
 if($cmp){label=9;break;}else{label=10;break;}
 case 9: 
 var $incdec_ptr=((($9)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$incdec_ptr;
 var $10=HEAP8[($incdec_ptr)];
 var $conv24=(($10<<24)>>24);
 var $11=HEAP32[(($__file_)>>2)];
 var $call25=_ungetc($conv24,$11);
 var $cmp26=($call25|0)==-1;
 if($cmp26){var $retval_0=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($__last_consumed_12)>>2)]=$__c;
 HEAP8[($__last_consumed_is_next_)]=1;
 var $retval_0=$__c;label=11;break;
 case 11: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $__last_consumed_is_next_=(($this+52)|0);
 var $0=HEAP8[($__last_consumed_is_next_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $__last_consumed_=(($this+48)|0);
 var $2=HEAP32[(($__last_consumed_)>>2)];
 if($__consume){label=3;break;}else{var $retval_0=$2;label=22;break;}
 case 3: 
 HEAP32[(($__last_consumed_)>>2)]=-1;
 HEAP8[($__last_consumed_is_next_)]=0;
 var $retval_0=$2;label=22;break;
 case 4: 
 var $__encoding_=(($this+44)|0);
 var $3=HEAP32[(($__encoding_)>>2)];
 var $cmp_i_i_i=($3|0)>1;
 var $_sroa_speculated=($cmp_i_i_i?$3:1);
 var $cmp24=($_sroa_speculated|0)>0;
 if($cmp24){label=5;break;}else{label=8;break;}
 case 5: 
 var $__file_=(($this+32)|0);
 var $__i_025=0;label=6;break;
 case 6: 
 var $__i_025;
 var $4=HEAP32[(($__file_)>>2)];
 var $call8=_fgetc($4);
 var $cmp9=($call8|0)==-1;
 if($cmp9){var $retval_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $conv=(($call8)&255);
 var $arrayidx=(($__extbuf+$__i_025)|0);
 HEAP8[($arrayidx)]=$conv;
 var $inc=((($__i_025)+(1))|0);
 var $cmp=($inc|0)<($_sroa_speculated|0);
 if($cmp){var $__i_025=$inc;label=6;break;}else{label=8;break;}
 case 8: 
 var $__always_noconv_=(($this+53)|0);
 var $5=HEAP8[($__always_noconv_)];
 var $6=$5&1;
 var $tobool13=(($6<<24)>>24)==0;
 if($tobool13){label=9;break;}else{label=10;break;}
 case 9: 
 var $__st_=(($this+40)|0);
 var $__cv_=(($this+36)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr19=(($__1buf+4)|0);
 var $__file_28=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $arrayidx15=(($__extbuf)|0);
 var $7=HEAP8[($arrayidx15)];
 var $conv16=(($7<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$conv16;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $8=HEAP32[(($__st_)>>2)];
 var $9=$8;
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11=HEAP32[(($__cv_)>>2)];
 var $add_ptr=(($__extbuf+$__nread_0)|0);
 var $12=$11;
 var $vtable_i=HEAP32[(($12)>>2)];
 var $vfn_i=(($vtable_i+16)|0);
 var $13=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$13]($11,$8,$arraydecay,$add_ptr,$__enxt,$__1buf,$add_ptr19,$__inxt);
 if(($call_i|0)==1){ label=12;break;}else if(($call_i|0)==3){ label=14;break;}else if(($call_i|0)==2){ var $retval_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $14=HEAP32[(($__st_)>>2)];
 var $15=$14;
 var $st$2$0=(($15)|0);
 HEAP32[(($st$2$0)>>2)]=$10$0;
 var $st$3$1=(($15+4)|0);
 HEAP32[(($st$3$1)>>2)]=$10$1;
 var $cmp23=($__nread_0|0)==8;
 if($cmp23){var $retval_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $16=HEAP32[(($__file_28)>>2)];
 var $call29=_fgetc($16);
 var $cmp30=($call29|0)==-1;
 if($cmp30){var $retval_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $17=HEAP8[($arraydecay)];
 var $conv41=(($17<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$conv41;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $conv34=(($call29)&255);
 HEAP8[($add_ptr)]=$conv34;
 var $inc36=((($__nread_0)+(1))|0);
 var $__nread_0=$inc36;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $__file_53=(($this+32)|0);
 var $__i46_0=$__nread_2;label=18;break;
 case 18: 
 var $__i46_0;
 var $cmp48=($__i46_0|0)>0;
 if($cmp48){label=19;break;}else{label=21;break;}
 case 19: 
 var $dec=((($__i46_0)-(1))|0);
 var $arrayidx50=(($__extbuf+$dec)|0);
 var $18=HEAP8[($arrayidx50)];
 var $conv51=(($18<<24)>>24);
 var $19=HEAP32[(($__file_53)>>2)];
 var $call54=_ungetc($conv51,$19);
 var $cmp55=($call54|0)==-1;
 if($cmp55){var $retval_0=-1;label=22;break;}else{var $__i46_0=$dec;label=18;break;}
 case 20: 
 var $20=HEAP32[(($__1buf)>>2)];
 var $__last_consumed_62=(($this+48)|0);
 HEAP32[(($__last_consumed_62)>>2)]=$20;
 var $retval_0=$20;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $retval_0=$_pre;label=22;break;
 case 22: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i_i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+24)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($this);
 var $call_i=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13344);
 var $2=$call_i;
 var $__cv_=(($this+36)|0);
 HEAP32[(($__cv_)>>2)]=$2;
 var $3=$call_i;
 var $vtable_i=HEAP32[(($3)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $4=HEAP32[(($vfn_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$4]($2);
 var $__always_noconv_=(($this+44)|0);
 var $frombool=($call_i5&1);
 HEAP8[($__always_noconv_)]=$frombool;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $__cv_=(($this+36)|0);
 var $__st_=(($this+40)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr=(($__extbuf+8)|0);
 var $sub_ptr_rhs_cast=$__extbuf;
 var $__file_=(($this+32)|0);
 label=2;break;
 case 2: 
 var $0=HEAP32[(($__cv_)>>2)];
 var $1=HEAP32[(($__st_)>>2)];
 var $2=$0;
 var $vtable_i=HEAP32[(($2)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $3=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$3]($0,$1,$arraydecay,$add_ptr,$__extbe);
 var $4=HEAP32[(($__extbe)>>2)];
 var $sub_ptr_lhs_cast=$4;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $5=HEAP32[(($__file_)>>2)];
 var $call5=_fwrite($arraydecay,1,$sub_ptr_sub,$5);
 var $cmp=($call5|0)==($sub_ptr_sub|0);
 if($cmp){label=3;break;}else{var $retval_0=-1;label=5;break;}
 case 3: 
 if(($call_i|0)==1){ label=2;break;}else if(($call_i|0)==2){ var $retval_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $6=HEAP32[(($__file_)>>2)];
 var $call11=_fflush($6);
 var $not_tobool=($call11|0)!=0;
 var $_=(($not_tobool<<31)>>31);
 var $retval_0=$_;label=5;break;
 case 5: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__always_noconv_=(($this+44)|0);
 var $0=HEAP8[($__always_noconv_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=2;break;}else{label=3;break;}
 case 2: 
 var $2=$this;
 var $cmp6=($__n|0)>0;
 if($cmp6){var $__s_addr_07=$__s;var $__i_08=0;label=4;break;}else{var $retval_0=0;label=6;break;}
 case 3: 
 var $__file_=(($this+32)|0);
 var $3=HEAP32[(($__file_)>>2)];
 var $call=_fwrite($__s,1,$__n,$3);
 var $retval_0=$call;label=6;break;
 case 4: 
 var $__i_08;
 var $__s_addr_07;
 var $vtable=HEAP32[(($2)>>2)];
 var $vfn=(($vtable+52)|0);
 var $4=HEAP32[(($vfn)>>2)];
 var $5=HEAP8[($__s_addr_07)];
 var $conv_i=($5&255);
 var $call3=FUNCTION_TABLE[$4]($this,$conv_i);
 var $cmp5=($call3|0)==-1;
 if($cmp5){var $retval_0=$__i_08;label=6;break;}else{label=5;break;}
 case 5: 
 var $inc=((($__i_08)+(1))|0);
 var $incdec_ptr=(($__s_addr_07+1)|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__s_addr_07=$incdec_ptr;var $__i_08=$inc;label=4;break;}else{var $retval_0=$inc;label=6;break;}
 case 6: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $cmp_i=($__c|0)==-1;
 if($cmp_i){label=11;break;}else{label=2;break;}
 case 2: 
 var $conv_i=(($__c)&255);
 HEAP8[($__1buf)]=$conv_i;
 var $__always_noconv_=(($this+44)|0);
 var $0=HEAP8[($__always_noconv_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=4;break;}else{label=3;break;}
 case 3: 
 var $__file_=(($this+32)|0);
 var $2=HEAP32[(($__file_)>>2)];
 var $call5=_fwrite($__1buf,1,1,$2);
 var $cmp=($call5|0)==1;
 if($cmp){label=11;break;}else{var $retval_0=-1;label=12;break;}
 case 4: 
 var $arraydecay=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$arraydecay;
 var $add_ptr=(($__1buf+1)|0);
 var $__cv_=(($this+36)|0);
 var $__st_=(($this+40)|0);
 var $add_ptr10=(($__extbuf+8)|0);
 var $sub_ptr_rhs_cast=$__extbuf;
 var $__file_30=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $3=HEAP32[(($__cv_)>>2)];
 var $4=HEAP32[(($__st_)>>2)];
 var $5=$3;
 var $vtable_i=HEAP32[(($5)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $6=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$6]($3,$4,$pbase_0,$add_ptr,$__e,$arraydecay,$add_ptr10,$__extbe);
 var $7=HEAP32[(($__e)>>2)];
 var $cmp12=($7|0)==($pbase_0|0);
 if($cmp12){var $retval_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $cmp16=($call_i|0)==3;
 if($cmp16){label=7;break;}else{label=8;break;}
 case 7: 
 var $8=HEAP32[(($__file_30)>>2)];
 var $call19=_fwrite($pbase_0,1,1,$8);
 var $cmp20=($call19|0)==1;
 if($cmp20){label=11;break;}else{var $retval_0=-1;label=12;break;}
 case 8: 
 var $cmp26=($call_i|0)==1;
 var $9=($call_i>>>0)<2;
 if($9){label=9;break;}else{var $retval_0=-1;label=12;break;}
 case 9: 
 var $10=HEAP32[(($__extbe)>>2)];
 var $sub_ptr_lhs_cast=$10;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $11=HEAP32[(($__file_30)>>2)];
 var $call31=_fwrite($arraydecay,1,$sub_ptr_sub,$11);
 var $cmp32=($call31|0)==($sub_ptr_sub|0);
 if($cmp32){label=10;break;}else{var $retval_0=-1;label=12;break;}
 case 10: 
 var $12=HEAP32[(($__e)>>2)];
 var $_pbase_0=($cmp26?$12:$pbase_0);
 if($cmp26){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $cond_i=($cmp_i?0:$__c);
 var $retval_0=$cond_i;label=12;break;
 case 12: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ref_tmp=sp;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i1=(($this+4)|0);
 __ZNSt3__16localeC2Ev($__loc__i1);
 var $__binp__i=(($this+8)|0);
 var $1=$__binp__i;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0; HEAP32[((($1)+(20))>>2)]=0;
 HEAP32[(($0)>>2)]=5056;
 var $__file_=(($this+32)|0);
 HEAP32[(($__file_)>>2)]=$__fp;
 var $__st_=(($this+40)|0);
 HEAP32[(($__st_)>>2)]=$__st;
 var $__last_consumed_=(($this+48)|0);
 HEAP32[(($__last_consumed_)>>2)]=-1;
 var $__last_consumed_is_next_=(($this+52)|0);
 HEAP8[($__last_consumed_is_next_)]=0;
 __ZNSt3__16localeC2ERKS0_($ref_tmp,$__loc__i1);
 var $call_i_i3=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($ref_tmp,13344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $2=$call_i_i3;
 var $__cv__i=(($this+36)|0);
 HEAP32[(($__cv__i)>>2)]=$2;
 var $3=$call_i_i3;
 var $vtable_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i=(($vtable_i_i+24)|0);
 var $4=HEAP32[(($vfn_i_i)>>2)];
 var $call_i7_i=FUNCTION_TABLE[$4]($2);
 var $__encoding__i=(($this+44)|0);
 HEAP32[(($__encoding__i)>>2)]=$call_i7_i;
 var $5=HEAP32[(($__cv__i)>>2)];
 var $6=$5;
 var $vtable_i10_i=HEAP32[(($6)>>2)];
 var $vfn_i11_i=(($vtable_i10_i+28)|0);
 var $7=HEAP32[(($vfn_i11_i)>>2)];
 var $call_i12_i=FUNCTION_TABLE[$7]($5);
 var $__always_noconv__i=(($this+53)|0);
 var $frombool_i=($call_i12_i&1);
 HEAP8[($__always_noconv__i)]=$frombool_i;
 var $8=HEAP32[(($__encoding__i)>>2)];
 var $cmp_i=($8|0)>8;
 if($cmp_i){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 __ZNSt3__16localeD2Ev($ref_tmp);
 STACKTOP=sp;return;
 case 5: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 __ZNSt3__16localeD2Ev($ref_tmp);
 HEAP32[(($0)>>2)]=4288;
 __ZNSt3__16localeD2Ev($__loc__i1);
 ___resumeException($9$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i_i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call_i=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,13344);
 var $0=$call_i;
 var $__cv_=(($this+36)|0);
 HEAP32[(($__cv_)>>2)]=$0;
 var $1=$call_i;
 var $vtable_i=HEAP32[(($1)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $2=HEAP32[(($vfn_i)>>2)];
 var $call_i7=FUNCTION_TABLE[$2]($0);
 var $__encoding_=(($this+44)|0);
 HEAP32[(($__encoding_)>>2)]=$call_i7;
 var $3=HEAP32[(($__cv_)>>2)];
 var $4=$3;
 var $vtable_i10=HEAP32[(($4)>>2)];
 var $vfn_i11=(($vtable_i10+28)|0);
 var $5=HEAP32[(($vfn_i11)>>2)];
 var $call_i12=FUNCTION_TABLE[$5]($3);
 var $__always_noconv_=(($this+53)|0);
 var $frombool=($call_i12&1);
 HEAP8[($__always_noconv_)]=$frombool;
 var $6=HEAP32[(($__encoding_)>>2)];
 var $cmp=($6|0)>8;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(184);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;
 var $call=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $call;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;
 var $call=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $call;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $cmp_i=($__c|0)==-1;
 var $__last_consumed_is_next_=(($this+52)|0);
 var $0=HEAP8[($__last_consumed_is_next_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)!=0;
 if($cmp_i){label=2;break;}else{label=4;break;}
 case 2: 
 if($tobool){var $retval_0=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $__last_consumed_=(($this+48)|0);
 var $2=HEAP32[(($__last_consumed_)>>2)];
 var $lnot=($2|0)!=-1;
 var $frombool=($lnot&1);
 HEAP8[($__last_consumed_is_next_)]=$frombool;
 var $retval_0=$2;label=11;break;
 case 4: 
 var $__last_consumed_12=(($this+48)|0);
 if($tobool){label=5;break;}else{label=10;break;}
 case 5: 
 var $3=HEAP32[(($__last_consumed_12)>>2)];
 var $conv_i=(($3)&255);
 HEAP8[($__ci)]=$conv_i;
 var $__cv_=(($this+36)|0);
 var $4=HEAP32[(($__cv_)>>2)];
 var $__st_=(($this+40)|0);
 var $5=HEAP32[(($__st_)>>2)];
 var $add_ptr=(($__ci+1)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr15=(($__extbuf+8)|0);
 var $6=$4;
 var $vtable_i=HEAP32[(($6)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $7=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$7]($4,$5,$__ci,$add_ptr,$__inxt,$arraydecay,$add_ptr15,$__enxt);
 if(($call_i|0)==2|($call_i|0)==1){ var $retval_0=-1;label=11;break;}else if(($call_i|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $8=HEAP32[(($__last_consumed_12)>>2)];
 var $conv=(($8)&255);
 HEAP8[($arraydecay)]=$conv;
 var $add_ptr20=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$add_ptr20;
 label=7;break;
 case 7: 
 var $__file_=(($this+32)|0);
 label=8;break;
 case 8: 
 var $9=HEAP32[(($__enxt)>>2)];
 var $cmp=($9>>>0)>($arraydecay>>>0);
 if($cmp){label=9;break;}else{label=10;break;}
 case 9: 
 var $incdec_ptr=((($9)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$incdec_ptr;
 var $10=HEAP8[($incdec_ptr)];
 var $conv24=(($10<<24)>>24);
 var $11=HEAP32[(($__file_)>>2)];
 var $call25=_ungetc($conv24,$11);
 var $cmp26=($call25|0)==-1;
 if($cmp26){var $retval_0=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($__last_consumed_12)>>2)]=$__c;
 HEAP8[($__last_consumed_is_next_)]=1;
 var $retval_0=$__c;label=11;break;
 case 11: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $__last_consumed_is_next_=(($this+52)|0);
 var $0=HEAP8[($__last_consumed_is_next_)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $__last_consumed_=(($this+48)|0);
 var $2=HEAP32[(($__last_consumed_)>>2)];
 if($__consume){label=3;break;}else{var $retval_0=$2;label=23;break;}
 case 3: 
 HEAP32[(($__last_consumed_)>>2)]=-1;
 HEAP8[($__last_consumed_is_next_)]=0;
 var $retval_0=$2;label=23;break;
 case 4: 
 var $__encoding_=(($this+44)|0);
 var $3=HEAP32[(($__encoding_)>>2)];
 var $cmp_i_i_i=($3|0)>1;
 var $_sroa_speculated=($cmp_i_i_i?$3:1);
 var $cmp23=($_sroa_speculated|0)>0;
 if($cmp23){label=5;break;}else{label=8;break;}
 case 5: 
 var $__file_=(($this+32)|0);
 var $__i_024=0;label=6;break;
 case 6: 
 var $__i_024;
 var $4=HEAP32[(($__file_)>>2)];
 var $call8=_fgetc($4);
 var $cmp9=($call8|0)==-1;
 if($cmp9){var $retval_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $conv=(($call8)&255);
 var $arrayidx=(($__extbuf+$__i_024)|0);
 HEAP8[($arrayidx)]=$conv;
 var $inc=((($__i_024)+(1))|0);
 var $cmp=($inc|0)<($_sroa_speculated|0);
 if($cmp){var $__i_024=$inc;label=6;break;}else{label=8;break;}
 case 8: 
 var $__always_noconv_=(($this+53)|0);
 var $5=HEAP8[($__always_noconv_)];
 var $6=$5&1;
 var $tobool13=(($6<<24)>>24)==0;
 if($tobool13){label=9;break;}else{label=10;break;}
 case 9: 
 var $__st_=(($this+40)|0);
 var $__cv_=(($this+36)|0);
 var $arraydecay=(($__extbuf)|0);
 var $add_ptr18=(($__1buf+1)|0);
 var $__file_27=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $arrayidx15=(($__extbuf)|0);
 var $7=HEAP8[($arrayidx15)];
 HEAP8[($__1buf)]=$7;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $8=HEAP32[(($__st_)>>2)];
 var $9=$8;
 var $ld$0$0=(($9)|0);
 var $10$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($9+4)|0);
 var $10$1=HEAP32[(($ld$1$1)>>2)];
 var $11=HEAP32[(($__cv_)>>2)];
 var $add_ptr=(($__extbuf+$__nread_0)|0);
 var $12=$11;
 var $vtable_i=HEAP32[(($12)>>2)];
 var $vfn_i=(($vtable_i+16)|0);
 var $13=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$13]($11,$8,$arraydecay,$add_ptr,$__enxt,$__1buf,$add_ptr18,$__inxt);
 if(($call_i|0)==1){ label=12;break;}else if(($call_i|0)==3){ label=14;break;}else if(($call_i|0)==2){ var $retval_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $14=HEAP32[(($__st_)>>2)];
 var $15=$14;
 var $st$2$0=(($15)|0);
 HEAP32[(($st$2$0)>>2)]=$10$0;
 var $st$3$1=(($15+4)|0);
 HEAP32[(($st$3$1)>>2)]=$10$1;
 var $cmp22=($__nread_0|0)==8;
 if($cmp22){var $retval_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $16=HEAP32[(($__file_27)>>2)];
 var $call28=_fgetc($16);
 var $cmp29=($call28|0)==-1;
 if($cmp29){var $retval_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $17=HEAP8[($arraydecay)];
 HEAP8[($__1buf)]=$17;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $conv33=(($call28)&255);
 HEAP8[($add_ptr)]=$conv33;
 var $inc35=((($__nread_0)+(1))|0);
 var $__nread_0=$inc35;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $__file_50=(($this+32)|0);
 var $__i44_0=$__nread_2;label=18;break;
 case 18: 
 var $__i44_0;
 var $cmp46=($__i44_0|0)>0;
 if($cmp46){label=19;break;}else{label=21;break;}
 case 19: 
 var $dec=((($__i44_0)-(1))|0);
 var $arrayidx48=(($__extbuf+$dec)|0);
 var $18=HEAP8[($arrayidx48)];
 var $conv_i65=($18&255);
 var $19=HEAP32[(($__file_50)>>2)];
 var $call51=_ungetc($conv_i65,$19);
 var $cmp52=($call51|0)==-1;
 if($cmp52){var $retval_0=-1;label=23;break;}else{var $__i44_0=$dec;label=18;break;}
 case 20: 
 var $20=HEAP8[($__1buf)];
 var $conv_i63=($20&255);
 var $__last_consumed_59=(($this+48)|0);
 HEAP32[(($__last_consumed_59)>>2)]=$conv_i63;
 var $21=$20;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $21=$_pre;label=22;break;
 case 22: 
 var $21;
 var $conv_i=($21&255);
 var $retval_0=$conv_i;label=23;break;
 case 23: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a(){
 var label=0;
 __ZNSt3__18ios_base4InitC2Ev(0);
 var $0=_atexit((390),14096,___dso_handle);
 return;
}
function __ZNSt3__114__shared_countD2Ev($this){
 var label=0;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this){
 var label=0;
 var $__shared_owners_=(($this+4)|0);
 var $0=(tempValue=HEAP32[(($__shared_owners_)>>2)],HEAP32[(($__shared_owners_)>>2)]=tempValue+1,tempValue);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__shared_owners_=(($this+4)|0);
 var $0=(tempValue=HEAP32[(($__shared_owners_)>>2)],HEAP32[(($__shared_owners_)>>2)]=tempValue+-1,tempValue);
 var $cmp=($0|0)==0;
 if($cmp){label=2;break;}else{var $retval_0=0;label=3;break;}
 case 2: 
 var $1=$this;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+8)|0);
 var $2=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$2]($this);
 var $retval_0=1;label=3;break;
 case 3: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2592;
 var $__imp_=(($this+4)|0);
 var $new_isnull=($__imp_|0)==0;
 if($new_isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $call_i=_strlen($msg);
 var $add_i=((($call_i)+(1))|0);
 var $add2_i=((($call_i)+(13))|0);
 var $call3_i1=__Znaj($add2_i);
 var $1=$call3_i1;
 var $arrayidx_i=(($call3_i1+4)|0);
 var $2=$arrayidx_i;
 HEAP32[(($2)>>2)]=$call_i;
 HEAP32[(($1)>>2)]=$call_i;
 var $add_ptr_i=(($call3_i1+12)|0);
 HEAP32[(($__imp_)>>2)]=$add_ptr_i;
 var $add_ptr_i_i=(($call3_i1+8)|0);
 var $3=$add_ptr_i_i;
 HEAP32[(($3)>>2)]=0;
 assert($add_i % 1 === 0);(_memcpy($add_ptr_i, $msg, $add_i)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2592;
 var $__imp__i=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i_i=((($this_idx_val_i_i)-(4))|0);
 var $1=$add_ptr_i_i_i;
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=((($2)-(1))|0);
 var $cmp_i_i=($3|0)<0;
 if($cmp_i_i){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i=((($4)-(12))|0);
 var $isnull_i_i=($add_ptr_i_i|0)==0;
 if($isnull_i_i){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($add_ptr_i_i);
 label=4;break;
 case 4: 
 var $5=$this;
 __ZdlPv($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2592;
 var $__imp_=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($__imp_)>>2)];
 var $add_ptr_i_i=((($this_idx_val_i)-(4))|0);
 var $1=$add_ptr_i_i;
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=((($2)-(1))|0);
 var $cmp_i=($3|0)<0;
 if($cmp_i){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=HEAP32[(($__imp_)>>2)];
 var $add_ptr_i=((($4)-(12))|0);
 var $isnull_i=($add_ptr_i|0)==0;
 if($isnull_i){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($add_ptr_i);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt11logic_error4whatEv($this){
 var label=0;
 var $__imp_=(($this+4)|0);
 var $_idx_val=HEAP32[(($__imp_)>>2)];
 return $_idx_val;
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2528;
 var $__imp_=(($this+4)|0);
 var $new_isnull=($__imp_|0)==0;
 if($new_isnull){label=6;break;}else{label=2;break;}
 case 2: 
 var $__size__i_i_i_i=$msg;
 var $1=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$1&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i_i=(($msg+8)|0);
 var $2=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$2;label=5;break;
 case 4: 
 var $__s_i_i_i_i=$msg;
 var $arrayidx_i_i_i_i=(($__s_i_i_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;label=5;break;
 case 5: 
 var $cond_i_i_i;
 var $call_i=_strlen($cond_i_i_i);
 var $add_i=((($call_i)+(1))|0);
 var $add2_i=((($call_i)+(13))|0);
 var $call3_i1=__Znaj($add2_i);
 var $3=$call3_i1;
 var $arrayidx_i=(($call3_i1+4)|0);
 var $4=$arrayidx_i;
 HEAP32[(($4)>>2)]=$call_i;
 HEAP32[(($3)>>2)]=$call_i;
 var $add_ptr_i=(($call3_i1+12)|0);
 HEAP32[(($__imp_)>>2)]=$add_ptr_i;
 var $add_ptr_i_i=(($call3_i1+8)|0);
 var $5=$add_ptr_i_i;
 HEAP32[(($5)>>2)]=0;
 assert($add_i % 1 === 0);(_memcpy($add_ptr_i, $cond_i_i_i, $add_i)|0);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2528;
 var $__imp_=(($this+4)|0);
 var $new_isnull=($__imp_|0)==0;
 if($new_isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $call_i=_strlen($msg);
 var $add_i=((($call_i)+(1))|0);
 var $add2_i=((($call_i)+(13))|0);
 var $call3_i1=__Znaj($add2_i);
 var $1=$call3_i1;
 var $arrayidx_i=(($call3_i1+4)|0);
 var $2=$arrayidx_i;
 HEAP32[(($2)>>2)]=$call_i;
 HEAP32[(($1)>>2)]=$call_i;
 var $add_ptr_i=(($call3_i1+12)|0);
 HEAP32[(($__imp_)>>2)]=$add_ptr_i;
 var $add_ptr_i_i=(($call3_i1+8)|0);
 var $3=$add_ptr_i_i;
 HEAP32[(($3)>>2)]=0;
 assert($add_i % 1 === 0);(_memcpy($add_ptr_i, $msg, $add_i)|0);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2528;
 var $__imp__i=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i_i=((($this_idx_val_i_i)-(4))|0);
 var $1=$add_ptr_i_i_i;
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=((($2)-(1))|0);
 var $cmp_i_i=($3|0)<0;
 if($cmp_i_i){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i=((($4)-(12))|0);
 var $isnull_i_i=($add_ptr_i_i|0)==0;
 if($isnull_i_i){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($add_ptr_i_i);
 label=4;break;
 case 4: 
 var $5=$this;
 __ZdlPv($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2528;
 var $__imp_=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($__imp_)>>2)];
 var $add_ptr_i_i=((($this_idx_val_i)-(4))|0);
 var $1=$add_ptr_i_i;
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=((($2)-(1))|0);
 var $cmp_i=($3|0)<0;
 if($cmp_i){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=HEAP32[(($__imp_)>>2)];
 var $add_ptr_i=((($4)-(12))|0);
 var $isnull_i=($add_ptr_i|0)==0;
 if($isnull_i){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($add_ptr_i);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt13runtime_error4whatEv($this){
 var label=0;
 var $__imp_=(($this+4)|0);
 var $_idx_val=HEAP32[(($__imp_)>>2)];
 return $_idx_val;
}
function __ZNSt12length_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2592;
 var $__imp__i=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i_i=((($this_idx_val_i_i)-(4))|0);
 var $1=$add_ptr_i_i_i;
 var $2=(tempValue=HEAP32[(($1)>>2)],HEAP32[(($1)>>2)]=tempValue+-1,tempValue);
 var $3=((($2)-(1))|0);
 var $cmp_i_i=($3|0)<0;
 if($cmp_i_i){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=HEAP32[(($__imp__i)>>2)];
 var $add_ptr_i_i=((($4)-(12))|0);
 var $isnull_i_i=($add_ptr_i_i|0)==0;
 if($isnull_i_i){label=4;break;}else{label=3;break;}
 case 3: 
 __ZdaPv($add_ptr_i_i);
 label=4;break;
 case 4: 
 var $5=$this;
 __ZdlPv($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114error_categoryD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;
 var $__val__i_i=(($agg_result)|0);
 HEAP32[(($__val__i_i)>>2)]=$ev;
 var $__cat__i_i=(($agg_result+4)|0);
 HEAP32[(($__cat__i_i)>>2)]=$this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ref_tmp=sp;
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+12)|0);
 var $1=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$1]($ref_tmp,$this,$code);
 var $__cat__i_i=(($ref_tmp+4)|0);
 var $2=HEAP32[(($__cat__i_i)>>2)];
 var $__cat__i14_i=(($condition+4)|0);
 var $3=HEAP32[(($__cat__i14_i)>>2)];
 var $cmp_i_i=($2|0)==($3|0);
 if($cmp_i_i){label=2;break;}else{var $6=0;label=3;break;}
 case 2: 
 var $__val__i9_i=(($ref_tmp)|0);
 var $4=HEAP32[(($__val__i9_i)>>2)];
 var $__val__i_i=(($condition)|0);
 var $5=HEAP32[(($__val__i_i)>>2)];
 var $cmp_i=($4|0)==($5|0);
 var $6=$cmp_i;label=3;break;
 case 3: 
 var $6;
 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__cat__i=(($code+4)|0);
 var $0=HEAP32[(($__cat__i)>>2)];
 var $cmp_i=($0|0)==($this|0);
 if($cmp_i){label=2;break;}else{var $2=0;label=3;break;}
 case 2: 
 var $__val__i=(($code)|0);
 var $1=HEAP32[(($__val__i)>>2)];
 var $cmp=($1|0)==($condition|0);
 var $2=$cmp;label=3;break;
 case 3: 
 var $2;
 return $2;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__112__do_message7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=_strerror($ev);
 var $call_i_i_i=_strlen($call);
 var $cmp_i=($call_i_i_i>>>0)>4294967279;
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2_i=($call_i_i_i>>>0)<11;
 if($cmp2_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i_i=$call_i_i_i<<1;
 var $conv_i_i=(($shl_i_i)&255);
 var $__s2_i_i=$agg_result;
 var $__size__i50_i=$agg_result;
 HEAP8[($__size__i50_i)]=$conv_i_i;
 var $arrayidx_i_i=(($__s2_i_i+1)|0);
 var $__p_0_i=$arrayidx_i_i;label=6;break;
 case 5: 
 var $add_i_i_i=((($call_i_i_i)+(16))|0);
 var $and_i_i_i=$add_i_i_i&-16;
 var $call_i_i_i2=__Znwj($and_i_i_i);
 var $__data__i_i=(($agg_result+8)|0);
 HEAP32[(($__data__i_i)>>2)]=$call_i_i_i2;
 var $or_i_i=$and_i_i_i|1;
 var $__cap__i_i=(($agg_result)|0);
 HEAP32[(($__cap__i_i)>>2)]=$or_i_i;
 var $__size__i_i=(($agg_result+4)|0);
 HEAP32[(($__size__i_i)>>2)]=$call_i_i_i;
 var $__p_0_i=$call_i_i_i2;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($call_i_i_i % 1 === 0);(_memcpy($__p_0_i, $call, $call_i_i_i)|0);
 var $arrayidx_i=(($__p_0_i+$call_i_i_i)|0);
 HEAP8[($arrayidx_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i_i=$what_arg;
 var $ref_tmp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__val__i=(($ec)|0);
 var $0=HEAP32[(($__val__i)>>2)];
 var $cmp_i=($0|0)==0;
 if($cmp_i){label=19;break;}else{label=2;break;}
 case 2: 
 var $1=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($1&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=4;break;}else{label=3;break;}
 case 3: 
 var $__size__i23_i_i=(($what_arg+4)|0);
 var $2=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$2;label=5;break;
 case 4: 
 var $shr_i_i_i6=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i6;label=5;break;
 case 5: 
 var $cond_i_i;
 var $cmp_i22=($cond_i_i|0)==0;
 if($cmp_i22){var $3=$0;label=7;break;}else{label=6;break;}
 case 6: 
 var $call2_i=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,1336,2);
 var $_pre=HEAP32[(($__val__i)>>2)];
 var $3=$_pre;label=7;break;
 case 7: 
 var $3;
 var $__cat__i=(($ec+4)|0);
 var $4=HEAP32[(($__cat__i)>>2)];
 var $5=$4;
 var $vtable_i=HEAP32[(($5)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $6=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$6]($ref_tmp,$4,$3);
 var $__size__i_i_i_i_i=$ref_tmp;
 var $7=HEAP8[($__size__i_i_i_i_i)];
 var $and_i_i_i_i_i=$7&1;
 var $tobool_i_i_i_i_i=(($and_i_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__data__i21_i_i_i_i=(($ref_tmp+8)|0);
 var $8=HEAP32[(($__data__i21_i_i_i_i)>>2)];
 var $cond_i_i_i_i=$8;label=10;break;
 case 9: 
 var $__s_i_i_i_i_i=$ref_tmp;
 var $arrayidx_i_i_i_i_i=(($__s_i_i_i_i_i+1)|0);
 var $cond_i_i_i_i=$arrayidx_i_i_i_i_i;label=10;break;
 case 10: 
 var $cond_i_i_i_i;
 var $conv_i_i_i_i=($7&255);
 var $and_i_i_i_i=$conv_i_i_i_i&1;
 var $tobool_i_i_i_i=($and_i_i_i_i|0)==0;
 if($tobool_i_i_i_i){label=12;break;}else{label=11;break;}
 case 11: 
 var $__size__i23_i_i_i=(($ref_tmp+4)|0);
 var $9=HEAP32[(($__size__i23_i_i_i)>>2)];
 var $cond_i_i_i=$9;label=13;break;
 case 12: 
 var $shr_i_i_i_i7=$conv_i_i_i_i>>>1;
 var $cond_i_i_i=$shr_i_i_i_i7;label=13;break;
 case 13: 
 var $cond_i_i_i;
 var $call3_i_i39=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$cond_i_i_i_i,$cond_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 var $10=HEAP8[($__size__i_i_i_i_i)];
 var $and_i_i_i10=$10&1;
 var $tobool_i_i_i11=(($and_i_i_i10<<24)>>24)==0;
 if($tobool_i_i_i11){label=19;break;}else{label=15;break;}
 case 15: 
 var $__data__i_i_i=(($ref_tmp+8)|0);
 var $11=HEAP32[(($__data__i_i_i)>>2)];
 __ZdlPv($11);
 label=19;break;
 case 16: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=HEAP8[($__size__i_i_i_i_i)];
 var $and_i_i_i13=$13&1;
 var $tobool_i_i_i14=(($and_i_i_i13<<24)>>24)==0;
 if($tobool_i_i_i14){label=18;break;}else{label=17;break;}
 case 17: 
 var $__data__i_i_i15=(($ref_tmp+8)|0);
 var $14=HEAP32[(($__data__i_i_i15)>>2)];
 __ZdlPv($14);
 label=18;break;
 case 18: 
 ___resumeException($12$0)
 case 19: 
 var $15=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($__size__i_i_i)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($__size__i_i_i)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($__size__i_i_i)+(8))>>2)];
 HEAP32[(($__size__i_i_i)>>2)]=0; HEAP32[((($__size__i_i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i_i)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ec; $ec=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ec)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ec)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ref_tmp=sp;
 var $agg_tmp=(sp)+(16);
 var $call_i_i_i=_strlen($what_arg);
 var $cmp_i=($call_i_i_i>>>0)>4294967279;
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2_i=($call_i_i_i>>>0)<11;
 if($cmp2_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i_i=$call_i_i_i<<1;
 var $conv_i_i=(($shl_i_i)&255);
 var $__s2_i_i=$agg_tmp;
 var $__size__i50_i=$agg_tmp;
 HEAP8[($__size__i50_i)]=$conv_i_i;
 var $arrayidx_i_i=(($__s2_i_i+1)|0);
 var $__p_0_i=$arrayidx_i_i;label=6;break;
 case 5: 
 var $add_i_i_i=((($call_i_i_i)+(16))|0);
 var $and_i_i_i=$add_i_i_i&-16;
 var $call_i_i_i2=__Znwj($and_i_i_i);
 var $__data__i_i=(($agg_tmp+8)|0);
 HEAP32[(($__data__i_i)>>2)]=$call_i_i_i2;
 var $or_i_i=$and_i_i_i|1;
 var $__cap__i_i=(($agg_tmp)|0);
 HEAP32[(($__cap__i_i)>>2)]=$or_i_i;
 var $__size__i_i=(($agg_tmp+4)|0);
 HEAP32[(($__size__i_i)>>2)]=$call_i_i_i;
 var $__p_0_i=$call_i_i_i2;label=6;break;
 case 6: 
 var $__p_0_i;
 assert($call_i_i_i % 1 === 0);(_memcpy($__p_0_i, $what_arg, $call_i_i_i)|0);
 var $arrayidx_i=(($__p_0_i+$call_i_i_i)|0);
 HEAP8[($arrayidx_i)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($ref_tmp,$ec,$agg_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=13;break; }
 case 7: 
 var $0=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 var $__size__i_i_i=$ref_tmp;
 var $1=HEAP8[($__size__i_i_i)];
 var $and_i_i_i3=$1&1;
 var $tobool_i_i_i=(($and_i_i_i3<<24)>>24)==0;
 if($tobool_i_i_i){label=10;break;}else{label=9;break;}
 case 9: 
 var $__data__i_i_i=(($ref_tmp+8)|0);
 var $2=HEAP32[(($__data__i_i_i)>>2)];
 __ZdlPv($2);
 label=10;break;
 case 10: 
 var $__size__i_i_i4=$agg_tmp;
 var $3=HEAP8[($__size__i_i_i4)];
 var $and_i_i_i5=$3&1;
 var $tobool_i_i_i6=(($and_i_i_i5<<24)>>24)==0;
 if($tobool_i_i_i6){label=12;break;}else{label=11;break;}
 case 11: 
 var $__data__i_i_i7=(($agg_tmp+8)|0);
 var $4=HEAP32[(($__data__i_i_i7)>>2)];
 __ZdlPv($4);
 label=12;break;
 case 12: 
 var $5=(($this)|0);
 HEAP32[(($5)>>2)]=4552;
 var $__ec_=(($this+8)|0);
 var $6=$ec;
 var $7=$__ec_;
 var $ld$0$0=(($6)|0);
 var $8$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($6+4)|0);
 var $8$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($7)|0);
 HEAP32[(($st$2$0)>>2)]=$8$0;
 var $st$3$1=(($7+4)|0);
 HEAP32[(($st$3$1)>>2)]=$8$1;
 STACKTOP=sp;return;
 case 13: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 var $10=$9$0;
 var $11=$9$1;
 var $ehselector_slot_0=$11;var $exn_slot_0=$10;label=16;break;
 case 14: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=$12$0;
 var $14=$12$1;
 var $__size__i_i_i10=$ref_tmp;
 var $15=HEAP8[($__size__i_i_i10)];
 var $and_i_i_i11=$15&1;
 var $tobool_i_i_i12=(($and_i_i_i11<<24)>>24)==0;
 if($tobool_i_i_i12){var $ehselector_slot_0=$14;var $exn_slot_0=$13;label=16;break;}else{label=15;break;}
 case 15: 
 var $__data__i_i_i13=(($ref_tmp+8)|0);
 var $16=HEAP32[(($__data__i_i_i13)>>2)];
 __ZdlPv($16);
 var $ehselector_slot_0=$14;var $exn_slot_0=$13;label=16;break;
 case 16: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $__size__i_i_i16=$agg_tmp;
 var $17=HEAP8[($__size__i_i_i16)];
 var $and_i_i_i17=$17&1;
 var $tobool_i_i_i18=(($and_i_i_i17<<24)>>24)==0;
 if($tobool_i_i_i18){label=18;break;}else{label=17;break;}
 case 17: 
 var $__data__i_i_i19=(($agg_tmp+8)|0);
 var $18=HEAP32[(($__data__i_i_i19)>>2)];
 __ZdlPv($18);
 label=18;break;
 case 18: 
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val4$0=$lpad_val$0;
 var $lpad_val4$1=$ehselector_slot_0;
 ___resumeException($lpad_val4$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt13runtime_errorD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__112system_errorD2Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt13runtime_errorD2Ev($0);
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call;
 var $0=HEAP32[(($flag)>>2)];
 var $cmp6=($0|0)==1;
 if($cmp6){label=2;break;}else{label=3;break;}
 case 2: 
 var $call1=_pthread_cond_wait(13096,13072);
 var $1=HEAP32[(($flag)>>2)];
 var $cmp=($1|0)==1;
 if($cmp){label=2;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP32[(($flag)>>2)];
 var $cmp2=($2|0)==0;
 if($cmp2){label=4;break;}else{label=14;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $call3=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$func]($arg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $call6=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(13072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 HEAP32[(($flag)>>2)]=-1;
 var $call8=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=9;break; }
 case 8: 
 var $call10=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(13096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 9: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 var $4=$3$0;
 var $5=___cxa_begin_catch($4);
 var $call13=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(13072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=0;
 var $call15=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(13072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $call17=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(13096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=13;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 13: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 14: 
 var $call19;
 label=15;break;
 case 15: 
 return;
 case 16: 
 ___resumeException($6$0)
 case 17: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 18: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $exception=___cxa_allocate_exception(8);
 var $0=$exception;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($0,296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $1=$exception;
 HEAP32[(($1)>>2)]=2560;
 ___cxa_throw($exception,8568,(76));
 throw "Reached an unreachable!";
 case 3: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 ___cxa_free_exception($exception);
 ___resumeException($2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i44_i=$__str;
 var $0=HEAP8[($__size__i44_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $1=$this;
 assert(12 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[(($__size__i44_i)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($__size__i44_i)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($__size__i44_i)+(8))>>2)];
 label=9;break;
 case 3: 
 var $__data__i_i=(($__str+8)|0);
 var $2=HEAP32[(($__data__i_i)>>2)];
 var $__size__i_i=(($__str+4)|0);
 var $3=HEAP32[(($__size__i_i)>>2)];
 var $cmp_i_i=($3>>>0)>4294967279;
 if($cmp_i_i){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 5: 
 var $cmp2_i_i=($3>>>0)<11;
 if($cmp2_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $shl_i_i_i=$3<<1;
 var $conv_i_i_i=(($shl_i_i_i)&255);
 var $__s2_i_i_i=$this;
 var $__size__i50_i_i=$this;
 HEAP8[($__size__i50_i_i)]=$conv_i_i_i;
 var $arrayidx_i_i_i=(($__s2_i_i_i+1)|0);
 var $__p_0_i_i=$arrayidx_i_i_i;label=8;break;
 case 7: 
 var $add_i_i_i_i=((($3)+(16))|0);
 var $and_i_i_i_i=$add_i_i_i_i&-16;
 var $call_i_i_i_i=__Znwj($and_i_i_i_i);
 var $__data__i_i_i=(($this+8)|0);
 HEAP32[(($__data__i_i_i)>>2)]=$call_i_i_i_i;
 var $or_i_i_i=$and_i_i_i_i|1;
 var $__cap__i_i_i=(($this)|0);
 HEAP32[(($__cap__i_i_i)>>2)]=$or_i_i_i;
 var $__size__i_i_i=(($this+4)|0);
 HEAP32[(($__size__i_i_i)>>2)]=$3;
 var $__p_0_i_i=$call_i_i_i_i;label=8;break;
 case 8: 
 var $__p_0_i_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i_i, $2, $3)|0);
 var $arrayidx_i_i=(($__p_0_i_i+$3)|0);
 HEAP8[($arrayidx_i_i)]=0;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__sz>>>0)>4294967279;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2=($__sz>>>0)<11;
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i=$__sz<<1;
 var $conv_i=(($shl_i)&255);
 var $__s2_i=$this;
 var $__size__i50=$this;
 HEAP8[($__size__i50)]=$conv_i;
 var $arrayidx_i=(($__s2_i+1)|0);
 var $__p_0=$arrayidx_i;label=6;break;
 case 5: 
 var $add_i_i=((($__sz)+(16))|0);
 var $and_i_i=$add_i_i&-16;
 var $call_i_i=__Znwj($and_i_i);
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$call_i_i;
 var $or_i=$and_i_i|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i=(($this+4)|0);
 HEAP32[(($__size__i)>>2)]=$__sz;
 var $__p_0=$call_i_i;label=6;break;
 case 6: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $arrayidx=(($__p_0+$__sz)|0);
 HEAP8[($arrayidx)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__n>>>0)>4294967279;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2=($__n>>>0)<11;
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i=$__n<<1;
 var $conv_i=(($shl_i)&255);
 var $__s2_i=$this;
 var $__size__i52=$this;
 HEAP8[($__size__i52)]=$conv_i;
 var $arrayidx_i=(($__s2_i+1)|0);
 var $__p_0=$arrayidx_i;label=6;break;
 case 5: 
 var $add_i_i=((($__n)+(16))|0);
 var $and_i_i=$add_i_i&-16;
 var $call_i_i=__Znwj($and_i_i);
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$call_i_i;
 var $or_i=$and_i_i|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i=(($this+4)|0);
 HEAP32[(($__size__i)>>2)]=$__n;
 var $__p_0=$call_i_i;label=6;break;
 case 6: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $arrayidx=(($__p_0+$__n)|0);
 HEAP8[($arrayidx)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i_i)>>2)];
 __ZdlPv($1);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call_i=_strlen($__s);
 var $__s_i_i_i=$this;
 var $__size__i_i_i=$this;
 var $0=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){var $cond_i_i=10;var $3=$0;label=3;break;}else{label=2;break;}
 case 2: 
 var $__cap__i_i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i_i)>>2)];
 var $and_i11_i_i=$1&-2;
 var $phitmp_i=((($and_i11_i_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i_i=$phitmp_i;var $3=$2;label=3;break;
 case 3: 
 var $3;
 var $cond_i_i;
 var $cmp_i=($cond_i_i>>>0)<($call_i>>>0);
 if($cmp_i){label=10;break;}else{label=4;break;}
 case 4: 
 var $and_i_i19_i=$3&1;
 var $tobool_i_i20_i=(($and_i_i19_i<<24)>>24)==0;
 if($tobool_i_i20_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $__data__i21_i_i=(($this+8)|0);
 var $4=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i24_i=$4;label=7;break;
 case 6: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $cond_i24_i=$arrayidx_i_i_i;label=7;break;
 case 7: 
 var $cond_i24_i;
 _memmove($cond_i24_i,$__s,$call_i,1,0);
 var $arrayidx_i=(($cond_i24_i+$call_i)|0);
 HEAP8[($arrayidx_i)]=0;
 var $5=HEAP8[($__size__i_i_i)];
 var $and_i_i68_i=$5&1;
 var $tobool_i_i69_i=(($and_i_i68_i<<24)>>24)==0;
 if($tobool_i_i69_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__size__i21_i_i=(($this+4)|0);
 HEAP32[(($__size__i21_i_i)>>2)]=$call_i;
 label=14;break;
 case 9: 
 var $shl_i_i_i=$call_i<<1;
 var $conv_i6_i_i=(($shl_i_i_i)&255);
 HEAP8[($__size__i_i_i)]=$conv_i6_i_i;
 label=14;break;
 case 10: 
 var $conv_i_i40_i=($3&255);
 var $and_i_i41_i=$conv_i_i40_i&1;
 var $tobool_i_i42_i=($and_i_i41_i|0)==0;
 if($tobool_i_i42_i){label=12;break;}else{label=11;break;}
 case 11: 
 var $__size__i23_i_i=(($this+4)|0);
 var $6=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i52_i=$6;label=13;break;
 case 12: 
 var $shr_i_i12_i=$conv_i_i40_i>>>1;
 var $cond_i52_i=$shr_i_i12_i;label=13;break;
 case 13: 
 var $cond_i52_i;
 var $sub_i=((($call_i)-($cond_i_i))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond_i_i,$sub_i,$cond_i52_i,0,$cond_i52_i,$call_i,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i=$this;
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $conv_i_i=($0&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($this+4)|0);
 var $1=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$1;label=4;break;
 case 3: 
 var $shr_i_i7=$conv_i_i>>>1;
 var $cond_i=$shr_i_i7;label=4;break;
 case 4: 
 var $cond_i;
 var $cmp=($cond_i>>>0)<($__n>>>0);
 if($cmp){label=5;break;}else{label=6;break;}
 case 5: 
 var $sub=((($__n)-($cond_i))|0);
 var $call2=__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$sub,$__c);
 label=9;break;
 case 6: 
 var $and_i_i17=$0&1;
 var $tobool_i_i18=(($and_i_i17<<24)>>24)==0;
 if($tobool_i_i18){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i48_i=(($this+8)|0);
 var $2=HEAP32[(($__data__i48_i)>>2)];
 var $add_ptr_i=(($2+$__n)|0);
 HEAP8[($add_ptr_i)]=0;
 var $__size__i36_i=(($this+4)|0);
 HEAP32[(($__size__i36_i)>>2)]=$__n;
 label=9;break;
 case 8: 
 var $add_ptr4_i=(($__s_i_i+1+$__n)|0);
 HEAP8[($add_ptr4_i)]=0;
 var $shl_i_i=$__n<<1;
 var $conv_i12_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i12_i;
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool=($__n|0)==0;
 if($tobool){label=16;break;}else{label=2;break;}
 case 2: 
 var $__s_i_i=$this;
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){var $cond_i=10;var $3=$0;label=4;break;}else{label=3;break;}
 case 3: 
 var $__cap__i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$1&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i=$phitmp;var $3=$2;label=4;break;
 case 4: 
 var $3;
 var $cond_i;
 var $conv_i_i71=($3&255);
 var $and_i_i72=$conv_i_i71&1;
 var $tobool_i_i73=($and_i_i72|0)==0;
 if($tobool_i_i73){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i=(($this+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i83=$4;label=7;break;
 case 6: 
 var $shr_i_i15=$conv_i_i71>>>1;
 var $cond_i83=$shr_i_i15;label=7;break;
 case 7: 
 var $cond_i83;
 var $sub=((($cond_i)-($cond_i83))|0);
 var $cmp=($sub>>>0)<($__n>>>0);
 if($cmp){label=8;break;}else{var $5=$3;label=9;break;}
 case 8: 
 var $add=((($__n)-($cond_i))|0);
 var $sub4=((($add)+($cond_i83))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond_i,$sub4,$cond_i83,$cond_i83,0,0);
 var $_pre=HEAP8[($__size__i_i)];
 var $5=$_pre;label=9;break;
 case 9: 
 var $5;
 var $and_i_i45=$5&1;
 var $tobool_i_i46=(($and_i_i45<<24)>>24)==0;
 if($tobool_i_i46){label=11;break;}else{label=10;break;}
 case 10: 
 var $__data__i21_i=(($this+8)|0);
 var $6=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i55=$6;label=12;break;
 case 11: 
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i55=$arrayidx_i_i;label=12;break;
 case 12: 
 var $cond_i55;
 var $add_ptr=(($cond_i55+$cond_i83)|0);
 _memset($add_ptr, $__c, $__n)|0;
 var $add8=((($cond_i83)+($__n))|0);
 var $7=HEAP8[($__size__i_i)];
 var $and_i_i23=$7&1;
 var $tobool_i_i24=(($and_i_i23<<24)>>24)==0;
 if($tobool_i_i24){label=14;break;}else{label=13;break;}
 case 13: 
 var $__size__i21_i=(($this+4)|0);
 HEAP32[(($__size__i21_i)>>2)]=$add8;
 label=15;break;
 case 14: 
 var $shl_i_i=$add8<<1;
 var $conv_i6_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i6_i;
 label=15;break;
 case 15: 
 var $arrayidx=(($cond_i55+$add8)|0);
 HEAP8[($arrayidx)]=0;
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__res_arg>>>0)>4294967279;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__s_i_i=$this;
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){var $cond_i=10;var $3=$0;label=5;break;}else{label=4;break;}
 case 4: 
 var $__cap__i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$1&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i=$phitmp;var $3=$2;label=5;break;
 case 5: 
 var $3;
 var $cond_i;
 var $conv_i_i181=($3&255);
 var $and_i_i182=$conv_i_i181&1;
 var $tobool_i_i183=($and_i_i182|0)==0;
 if($tobool_i_i183){label=7;break;}else{label=6;break;}
 case 6: 
 var $__size__i23_i190=(($this+4)|0);
 var $4=HEAP32[(($__size__i23_i190)>>2)];
 var $cond_i202=$4;label=8;break;
 case 7: 
 var $shr_i_i20020=$conv_i_i181>>>1;
 var $cond_i202=$shr_i_i20020;label=8;break;
 case 8: 
 var $cond_i202;
 var $cmp_i_i_i=($cond_i202>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$cond_i202:$__res_arg);
 var $cmp_i=($_sroa_speculated>>>0)<11;
 if($cmp_i){var $cond_i253=11;label=10;break;}else{label=9;break;}
 case 9: 
 var $add_i_i=((($_sroa_speculated)+(16))|0);
 var $and_i_i251=$add_i_i&-16;
 var $cond_i253=$and_i_i251;label=10;break;
 case 10: 
 var $cond_i253;
 var $sub_i254=((($cond_i253)-(1))|0);
 var $cmp6=($sub_i254|0)==($cond_i|0);
 if($cmp6){label=29;break;}else{label=11;break;}
 case 11: 
 var $cmp8=($sub_i254|0)==10;
 if($cmp8){label=12;break;}else{label=13;break;}
 case 12: 
 var $arrayidx_i=(($__s_i_i+1)|0);
 var $__data__i237=(($this+8)|0);
 var $5=HEAP32[(($__data__i237)>>2)];
 var $__new_data_1=$arrayidx_i;var $__p_0=$5;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $cmp12=($sub_i254>>>0)>($cond_i>>>0);
 if($cmp12){label=14;break;}else{label=15;break;}
 case 14: 
 var $call_i_i=__Znwj($cond_i253);
 var $__new_data_0=$call_i_i;label=17;break;
 case 15: 
 var $call_i_i162=(function() { try { __THREW__ = 0; return __Znwj($cond_i253) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0=$call_i_i162;label=17;break; } else { label=16;break; }
 case 16: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 var $8=___cxa_begin_catch($7);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0;
 var $and_i=$3&1;
 var $tobool_i=(($and_i<<24)>>24)==0;
 if($tobool_i){label=19;break;}else{label=18;break;}
 case 18: 
 var $__data__i21_i=(($this+8)|0);
 var $9=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i146=$9;label=20;break;
 case 19: 
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i146=$arrayidx_i_i;label=20;break;
 case 20: 
 var $cond_i146;
 var $extract_t=(($and_i<<24)>>24)!=0;
 var $__new_data_1=$__new_data_0;var $__p_0=$cond_i146;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 var $conv_i_i110=($3&255);
 var $and_i_i111=$conv_i_i110&1;
 var $tobool_i_i112=($and_i_i111|0)==0;
 if($tobool_i_i112){label=23;break;}else{label=22;break;}
 case 22: 
 var $__size__i23_i=(($this+4)|0);
 var $10=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i116=$10;label=24;break;
 case 23: 
 var $shr_i_i21=$conv_i_i110>>>1;
 var $cond_i116=$shr_i_i21;label=24;break;
 case 24: 
 var $cond_i116;
 var $add27=((($cond_i116)+(1))|0);
 assert($add27 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $add27)|0);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 __ZdlPv($__p_0);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $or_i=$cond_i253|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i65=(($this+4)|0);
 HEAP32[(($__size__i65)>>2)]=$cond_i202;
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $shl_i=$cond_i202<<1;
 var $conv_i=(($shl_i)&255);
 HEAP8[($__size__i_i)]=$conv_i;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i=$this;
 var $__size__i=$this;
 var $0=HEAP8[($__size__i)];
 var $and_i=$0&1;
 var $tobool=(($and_i<<24)>>24)==0;
 if($tobool){label=2;break;}else{label=3;break;}
 case 2: 
 var $conv_i=($0&255);
 var $shr_i11=$conv_i>>>1;
 var $__sz_0=$shr_i11;var $__cap_0=10;label=4;break;
 case 3: 
 var $__cap__i=(($this)|0);
 var $1=HEAP32[(($__cap__i)>>2)];
 var $and_i102=$1&-2;
 var $sub=((($and_i102)-(1))|0);
 var $__size__i92=(($this+4)|0);
 var $2=HEAP32[(($__size__i92)>>2)];
 var $__sz_0=$2;var $__cap_0=$sub;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $cmp=($__sz_0|0)==($__cap_0|0);
 if($cmp){label=5;break;}else{var $__is_short_0_off0_in_in=$0;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $3=HEAP8[($__size__i)];
 var $__is_short_0_off0_in_in=$3;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $arrayidx_i=(($__s_i+1)|0);
 var $add=$__sz_0<<1;
 var $shl_i=((($add)+(2))|0);
 var $conv_i43=(($shl_i)&255);
 HEAP8[($__size__i)]=$conv_i43;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $arrayidx_i_pn=$arrayidx_i;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $__data__i=(($this+8)|0);
 var $4=HEAP32[(($__data__i)>>2)];
 var $add16=((($__sz_0)+(1))|0);
 var $__size__i28=(($this+4)|0);
 HEAP32[(($__size__i28)>>2)]=$add16;
 var $arrayidx_i_pn=$4;var $__p_0_sum_pre_phi=$add16;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $arrayidx_i_pn;
 var $__p_0=(($arrayidx_i_pn+$__sz_0)|0);
 HEAP8[($__p_0)]=$__c;
 var $incdec_ptr=(($arrayidx_i_pn+$__p_0_sum_pre_phi)|0);
 HEAP8[($incdec_ptr)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i=$this;
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){var $cond_i=10;var $3=$0;label=3;break;}else{label=2;break;}
 case 2: 
 var $__cap__i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$1&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i=$phitmp;var $3=$2;label=3;break;
 case 3: 
 var $3;
 var $cond_i;
 var $conv_i_i22=($3&255);
 var $and_i_i23=$conv_i_i22&1;
 var $tobool_i_i24=($and_i_i23|0)==0;
 if($tobool_i_i24){label=5;break;}else{label=4;break;}
 case 4: 
 var $__size__i23_i=(($this+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i28=$4;label=6;break;
 case 5: 
 var $shr_i_i17=$conv_i_i22>>>1;
 var $cond_i28=$shr_i_i17;label=6;break;
 case 6: 
 var $cond_i28;
 var $sub=((($cond_i)-($cond_i28))|0);
 var $cmp=($sub>>>0)<($__n>>>0);
 if($cmp){label=15;break;}else{label=7;break;}
 case 7: 
 var $tobool=($__n|0)==0;
 if($tobool){label=16;break;}else{label=8;break;}
 case 8: 
 var $and_i_i65=$3&1;
 var $tobool_i_i66=(($and_i_i65<<24)>>24)==0;
 if($tobool_i_i66){label=10;break;}else{label=9;break;}
 case 9: 
 var $__data__i21_i=(($this+8)|0);
 var $5=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i81=$5;label=11;break;
 case 10: 
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i81=$arrayidx_i_i;label=11;break;
 case 11: 
 var $cond_i81;
 var $add_ptr=(($cond_i81+$cond_i28)|0);
 assert($__n % 1 === 0);(_memcpy($add_ptr, $__s, $__n)|0);
 var $add=((($cond_i28)+($__n))|0);
 var $6=HEAP8[($__size__i_i)];
 var $and_i_i42=$6&1;
 var $tobool_i_i43=(($and_i_i42<<24)>>24)==0;
 if($tobool_i_i43){label=13;break;}else{label=12;break;}
 case 12: 
 var $__size__i21_i=(($this+4)|0);
 HEAP32[(($__size__i21_i)>>2)]=$add;
 label=14;break;
 case 13: 
 var $shl_i_i=$add<<1;
 var $conv_i6_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i6_i;
 label=14;break;
 case 14: 
 var $arrayidx=(($cond_i81+$add)|0);
 HEAP8[($arrayidx)]=0;
 label=16;break;
 case 15: 
 var $add7=((($__n)-($cond_i))|0);
 var $sub8=((($add7)+($cond_i28))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$cond_i,$sub8,$cond_i28,$cond_i28,0,$__n,$__s);
 label=16;break;
 case 16: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub2=(((-18)-($__old_cap))|0);
 var $cmp=($sub2>>>0)<($__delta_cap>>>0);
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__data__i21_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i=$1;label=6;break;
 case 5: 
 var $__s_i_i=$this;
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i=$arrayidx_i_i;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp5=($__old_cap>>>0)<2147483623;
 if($cmp5){label=7;break;}else{var $cond_i124_sink=-17;label=9;break;}
 case 7: 
 var $add=((($__delta_cap)+($__old_cap))|0);
 var $mul=$__old_cap<<1;
 var $cmp_i_i_i=($add>>>0)<($mul>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$mul:$add);
 var $cmp_i=($_sroa_speculated>>>0)<11;
 if($cmp_i){var $cond_i124_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $add_i_i=((($_sroa_speculated)+(16))|0);
 var $and_i_i122=$add_i_i&-16;
 var $cond_i124_sink=$and_i_i122;label=9;break;
 case 9: 
 var $cond_i124_sink;
 var $call_i_i=__Znwj($cond_i124_sink);
 var $cmp13=($__n_copy|0)==0;
 if($cmp13){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($call_i_i, $cond_i, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $cmp19=($__n_add|0)==0;
 if($cmp19){label=13;break;}else{label=12;break;}
 case 12: 
 var $add_ptr=(($call_i_i+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($add_ptr, $__p_new_stuff, $__n_add)|0);
 label=13;break;
 case 13: 
 var $sub24=((($__old_sz)-($__n_del))|0);
 var $cmp26=($sub24|0)==($__n_copy|0);
 if($cmp26){label=15;break;}else{label=14;break;}
 case 14: 
 var $sub25=((($sub24)-($__n_copy))|0);
 var $add_ptr29_sum=((($__n_add)+($__n_copy))|0);
 var $add_ptr30=(($call_i_i+$add_ptr29_sum)|0);
 var $add_ptr32_sum=((($__n_del)+($__n_copy))|0);
 var $add_ptr33=(($cond_i+$add_ptr32_sum)|0);
 assert($sub25 % 1 === 0);(_memcpy($add_ptr30, $add_ptr33, $sub25)|0);
 label=15;break;
 case 15: 
 var $cmp37=($__old_cap|0)==10;
 if($cmp37){label=17;break;}else{label=16;break;}
 case 16: 
 __ZdlPv($cond_i);
 label=17;break;
 case 17: 
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$call_i_i;
 var $or_i=$cond_i124_sink|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $add44=((($sub24)+($__n_add))|0);
 var $__size__i=(($this+4)|0);
 HEAP32[(($__size__i)>>2)]=$add44;
 var $arrayidx=(($call_i_i+$add44)|0);
 HEAP8[($arrayidx)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub=(((-17)-($__old_cap))|0);
 var $cmp=($sub>>>0)<($__delta_cap>>>0);
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__data__i21_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i=$1;label=6;break;
 case 5: 
 var $__s_i_i=$this;
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i=$arrayidx_i_i;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp4=($__old_cap>>>0)<2147483623;
 if($cmp4){label=7;break;}else{var $cond_i100_sink=-17;label=9;break;}
 case 7: 
 var $add=((($__delta_cap)+($__old_cap))|0);
 var $mul=$__old_cap<<1;
 var $cmp_i_i_i=($add>>>0)<($mul>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$mul:$add);
 var $cmp_i=($_sroa_speculated>>>0)<11;
 if($cmp_i){var $cond_i100_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $add_i_i=((($_sroa_speculated)+(16))|0);
 var $and_i_i98=$add_i_i&-16;
 var $cond_i100_sink=$and_i_i98;label=9;break;
 case 9: 
 var $cond_i100_sink;
 var $call_i_i=__Znwj($cond_i100_sink);
 var $cmp12=($__n_copy|0)==0;
 if($cmp12){label=11;break;}else{label=10;break;}
 case 10: 
 assert($__n_copy % 1 === 0);(_memcpy($call_i_i, $cond_i, $__n_copy)|0);
 label=11;break;
 case 11: 
 var $sub18=((($__old_sz)-($__n_del))|0);
 var $cmp20=($sub18|0)==($__n_copy|0);
 if($cmp20){label=13;break;}else{label=12;break;}
 case 12: 
 var $sub19=((($sub18)-($__n_copy))|0);
 var $add_ptr_sum=((($__n_add)+($__n_copy))|0);
 var $add_ptr23=(($call_i_i+$add_ptr_sum)|0);
 var $add_ptr25_sum=((($__n_del)+($__n_copy))|0);
 var $add_ptr26=(($cond_i+$add_ptr25_sum)|0);
 assert($sub19 % 1 === 0);(_memcpy($add_ptr23, $add_ptr26, $sub19)|0);
 label=13;break;
 case 13: 
 var $cmp30=($__old_cap|0)==10;
 if($cmp30){label=15;break;}else{label=14;break;}
 case 14: 
 __ZdlPv($cond_i);
 label=15;break;
 case 15: 
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$call_i_i;
 var $or_i=$cond_i100_sink|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__sz>>>0)>1073741807;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2=($__sz>>>0)<2;
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i=$__sz<<1;
 var $conv_i=(($shl_i)&255);
 var $__size__i=$this;
 HEAP8[($__size__i)]=$conv_i;
 var $__data__i59=(($this+4)|0);
 var $__p_0=$__data__i59;label=6;break;
 case 5: 
 var $add_i_i=((($__sz)+(4))|0);
 var $and_i_i=$add_i_i&-4;
 var $mul_i_i=$and_i_i<<2;
 var $call_i_i=__Znwj($mul_i_i);
 var $0=$call_i_i;
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$0;
 var $or_i=$and_i_i|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i27=(($this+4)|0);
 HEAP32[(($__size__i27)>>2)]=$__sz;
 var $__p_0=$0;label=6;break;
 case 6: 
 var $__p_0;
 var $call_i=_wmemcpy($__p_0,$__s,$__sz);
 var $arrayidx=(($__p_0+($__sz<<2))|0);
 HEAP32[(($arrayidx)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__n>>>0)>1073741807;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $cmp2=($__n>>>0)<2;
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i=$__n<<1;
 var $conv_i=(($shl_i)&255);
 var $__size__i=$this;
 HEAP8[($__size__i)]=$conv_i;
 var $__data__i61=(($this+4)|0);
 var $__p_0=$__data__i61;label=6;break;
 case 5: 
 var $add_i_i=((($__n)+(4))|0);
 var $and_i_i=$add_i_i&-4;
 var $mul_i_i=$and_i_i<<2;
 var $call_i_i=__Znwj($mul_i_i);
 var $0=$call_i_i;
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$0;
 var $or_i=$and_i_i|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i28=(($this+4)|0);
 HEAP32[(($__size__i28)>>2)]=$__n;
 var $__p_0=$0;label=6;break;
 case 6: 
 var $__p_0;
 var $call_i=_wmemset($__p_0,$__c,$__n);
 var $arrayidx=(($__p_0+($__n<<2))|0);
 HEAP32[(($arrayidx)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i_i)>>2)];
 var $2=$1;
 __ZdlPv($2);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;
 var $call_i=_wcslen($__s);
 var $call2=__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$call_i);
 return $call2;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){var $cond_i=1;var $3=$0;label=3;break;}else{label=2;break;}
 case 2: 
 var $__cap__i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$1&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i=$phitmp;var $3=$2;label=3;break;
 case 3: 
 var $3;
 var $cond_i;
 var $cmp=($cond_i>>>0)<($__n>>>0);
 if($cmp){label=10;break;}else{label=4;break;}
 case 4: 
 var $and_i_i19=$3&1;
 var $tobool_i_i20=(($and_i_i19<<24)>>24)==0;
 if($tobool_i_i20){label=6;break;}else{label=5;break;}
 case 5: 
 var $__data__i21_i=(($this+8)|0);
 var $4=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i24=$4;label=7;break;
 case 6: 
 var $__data__i_i=(($this+4)|0);
 var $cond_i24=$__data__i_i;label=7;break;
 case 7: 
 var $cond_i24;
 var $call_i=_wmemmove($cond_i24,$__s,$__n);
 var $arrayidx=(($cond_i24+($__n<<2))|0);
 HEAP32[(($arrayidx)>>2)]=0;
 var $5=HEAP8[($__size__i_i)];
 var $and_i_i68=$5&1;
 var $tobool_i_i69=(($and_i_i68<<24)>>24)==0;
 if($tobool_i_i69){label=9;break;}else{label=8;break;}
 case 8: 
 var $__size__i21_i=(($this+4)|0);
 HEAP32[(($__size__i21_i)>>2)]=$__n;
 label=14;break;
 case 9: 
 var $shl_i_i=$__n<<1;
 var $conv_i6_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i6_i;
 label=14;break;
 case 10: 
 var $conv_i_i40=($3&255);
 var $and_i_i41=$conv_i_i40&1;
 var $tobool_i_i42=($and_i_i41|0)==0;
 if($tobool_i_i42){label=12;break;}else{label=11;break;}
 case 11: 
 var $__size__i23_i=(($this+4)|0);
 var $6=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i52=$6;label=13;break;
 case 12: 
 var $shr_i_i12=$conv_i_i40>>>1;
 var $cond_i52=$shr_i_i12;label=13;break;
 case 13: 
 var $cond_i52;
 var $sub=((($__n)-($cond_i))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$cond_i,$sub,$cond_i52,0,$cond_i52,$__n,$__s);
 label=14;break;
 case 14: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__res_arg>>>0)>1073741807;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){var $cond_i=1;var $3=$0;label=5;break;}else{label=4;break;}
 case 4: 
 var $__cap__i_i=(($this)|0);
 var $1=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$1&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $2=(($1)&255);
 var $cond_i=$phitmp;var $3=$2;label=5;break;
 case 5: 
 var $3;
 var $cond_i;
 var $conv_i_i110=($3&255);
 var $and_i_i111=$conv_i_i110&1;
 var $tobool_i_i112=($and_i_i111|0)==0;
 if($tobool_i_i112){label=7;break;}else{label=6;break;}
 case 6: 
 var $__size__i23_i=(($this+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i116=$4;label=8;break;
 case 7: 
 var $shr_i_i20=$conv_i_i110>>>1;
 var $cond_i116=$shr_i_i20;label=8;break;
 case 8: 
 var $cond_i116;
 var $cmp_i_i_i=($cond_i116>>>0)>($__res_arg>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$cond_i116:$__res_arg);
 var $cmp_i=($_sroa_speculated>>>0)<2;
 if($cmp_i){var $cond_i226=2;label=10;break;}else{label=9;break;}
 case 9: 
 var $add_i_i=((($_sroa_speculated)+(4))|0);
 var $and_i_i224=$add_i_i&-4;
 var $cond_i226=$and_i_i224;label=10;break;
 case 10: 
 var $cond_i226;
 var $sub_i227=((($cond_i226)-(1))|0);
 var $cmp6=($sub_i227|0)==($cond_i|0);
 if($cmp6){label=29;break;}else{label=11;break;}
 case 11: 
 var $cmp8=($sub_i227|0)==1;
 if($cmp8){label=12;break;}else{label=13;break;}
 case 12: 
 var $__data__i255=(($this+4)|0);
 var $5=$__data__i255;
 var $__data__i244=(($this+8)|0);
 var $6=HEAP32[(($__data__i244)>>2)];
 var $__new_data_1_in=$5;var $__p_0=$6;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=21;break;
 case 13: 
 var $cmp12=($sub_i227>>>0)>($cond_i>>>0);
 var $mul_i_i221=$cond_i226<<2;
 if($cmp12){label=14;break;}else{label=15;break;}
 case 14: 
 var $call_i_i=__Znwj($mul_i_i221);
 var $__new_data_0_in=$call_i_i;label=17;break;
 case 15: 
 var $call_i_i203=(function() { try { __THREW__ = 0; return __Znwj($mul_i_i221) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__new_data_0_in=$call_i_i203;label=17;break; } else { label=16;break; }
 case 16: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 var $8=$7$0;
 var $9=___cxa_begin_catch($8);
 ___cxa_end_catch();
 label=29;break;
 case 17: 
 var $__new_data_0_in;
 var $and_i=$3&1;
 var $tobool_i=(($and_i<<24)>>24)==0;
 if($tobool_i){label=19;break;}else{label=18;break;}
 case 18: 
 var $__data__i21_i=(($this+8)|0);
 var $10=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i187=$10;label=20;break;
 case 19: 
 var $__data__i_i=(($this+4)|0);
 var $cond_i187=$__data__i_i;label=20;break;
 case 20: 
 var $cond_i187;
 var $extract_t=(($and_i<<24)>>24)!=0;
 var $__new_data_1_in=$__new_data_0_in;var $__p_0=$cond_i187;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=21;break;
 case 21: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1=$__new_data_1_in;
 var $conv_i_i135=($3&255);
 var $and_i_i136=$conv_i_i135&1;
 var $tobool_i_i137=($and_i_i136|0)==0;
 if($tobool_i_i137){label=23;break;}else{label=22;break;}
 case 22: 
 var $__size__i23_i144=(($this+4)|0);
 var $11=HEAP32[(($__size__i23_i144)>>2)];
 var $cond_i156=$11;label=24;break;
 case 23: 
 var $shr_i_i15421=$conv_i_i135>>>1;
 var $cond_i156=$shr_i_i15421;label=24;break;
 case 24: 
 var $cond_i156;
 var $add27=((($cond_i156)+(1))|0);
 var $call_i=_wmemcpy($__new_data_1,$__p_0,$add27);
 if($__was_long_0_off0){label=25;break;}else{label=26;break;}
 case 25: 
 var $12=$__p_0;
 __ZdlPv($12);
 label=26;break;
 case 26: 
 if($__now_long_0_off0){label=27;break;}else{label=28;break;}
 case 27: 
 var $or_i=$cond_i226|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $__size__i65=(($this+4)|0);
 HEAP32[(($__size__i65)>>2)]=$cond_i116;
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$__new_data_1;
 label=29;break;
 case 28: 
 var $shl_i=$cond_i116<<1;
 var $conv_i=(($shl_i)&255);
 HEAP8[($__size__i_i)]=$conv_i;
 label=29;break;
 case 29: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i=$this;
 var $0=HEAP8[($__size__i)];
 var $and_i=$0&1;
 var $tobool=(($and_i<<24)>>24)==0;
 if($tobool){label=2;break;}else{label=3;break;}
 case 2: 
 var $conv_i=($0&255);
 var $shr_i11=$conv_i>>>1;
 var $__sz_0=$shr_i11;var $__cap_0=1;label=4;break;
 case 3: 
 var $__cap__i=(($this)|0);
 var $1=HEAP32[(($__cap__i)>>2)];
 var $and_i102=$1&-2;
 var $sub=((($and_i102)-(1))|0);
 var $__size__i92=(($this+4)|0);
 var $2=HEAP32[(($__size__i92)>>2)];
 var $__sz_0=$2;var $__cap_0=$sub;label=4;break;
 case 4: 
 var $__cap_0;
 var $__sz_0;
 var $cmp=($__sz_0|0)==($__cap_0|0);
 if($cmp){label=5;break;}else{var $__is_short_0_off0_in_in=$0;label=6;break;}
 case 5: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap_0,1,$__cap_0,$__cap_0,0,0);
 var $3=HEAP8[($__size__i)];
 var $__is_short_0_off0_in_in=$3;label=6;break;
 case 6: 
 var $__is_short_0_off0_in_in;
 var $__is_short_0_off0_in=$__is_short_0_off0_in_in&1;
 var $__is_short_0_off0=(($__is_short_0_off0_in<<24)>>24)==0;
 if($__is_short_0_off0){label=7;break;}else{label=8;break;}
 case 7: 
 var $__data__i58=(($this+4)|0);
 var $add=$__sz_0<<1;
 var $shl_i=((($add)+(2))|0);
 var $conv_i43=(($shl_i)&255);
 HEAP8[($__size__i)]=$conv_i43;
 var $__p_0_sum_pre=((($__sz_0)+(1))|0);
 var $_pn=$__data__i58;var $__p_0_sum_pre_phi=$__p_0_sum_pre;label=9;break;
 case 8: 
 var $__data__i=(($this+8)|0);
 var $4=HEAP32[(($__data__i)>>2)];
 var $add16=((($__sz_0)+(1))|0);
 var $__size__i28=(($this+4)|0);
 HEAP32[(($__size__i28)>>2)]=$add16;
 var $_pn=$4;var $__p_0_sum_pre_phi=$add16;label=9;break;
 case 9: 
 var $__p_0_sum_pre_phi;
 var $_pn;
 var $__p_0=(($_pn+($__sz_0<<2))|0);
 HEAP32[(($__p_0)>>2)]=$__c;
 var $incdec_ptr=(($_pn+($__p_0_sum_pre_phi<<2))|0);
 HEAP32[(($incdec_ptr)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub2=(((1073741806)-($__old_cap))|0);
 var $cmp=($sub2>>>0)<($__delta_cap>>>0);
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__data__i21_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i=$1;label=6;break;
 case 5: 
 var $__data__i_i=(($this+4)|0);
 var $cond_i=$__data__i_i;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp5=($__old_cap>>>0)<536870887;
 if($cmp5){label=7;break;}else{var $cond_i105_sink=1073741807;label=9;break;}
 case 7: 
 var $add=((($__delta_cap)+($__old_cap))|0);
 var $mul=$__old_cap<<1;
 var $cmp_i_i_i=($add>>>0)<($mul>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$mul:$add);
 var $cmp_i=($_sroa_speculated>>>0)<2;
 if($cmp_i){var $cond_i105_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $add_i_i=((($_sroa_speculated)+(4))|0);
 var $and_i_i103=$add_i_i&-4;
 var $cond_i105_sink=$and_i_i103;label=9;break;
 case 9: 
 var $cond_i105_sink;
 var $mul_i_i=$cond_i105_sink<<2;
 var $call_i_i=__Znwj($mul_i_i);
 var $2=$call_i_i;
 var $cmp13=($__n_copy|0)==0;
 if($cmp13){label=11;break;}else{label=10;break;}
 case 10: 
 var $call_i111=_wmemcpy($2,$cond_i,$__n_copy);
 label=11;break;
 case 11: 
 var $cmp19=($__n_add|0)==0;
 if($cmp19){label=13;break;}else{label=12;break;}
 case 12: 
 var $add_ptr=(($2+($__n_copy<<2))|0);
 var $call_i100=_wmemcpy($add_ptr,$__p_new_stuff,$__n_add);
 label=13;break;
 case 13: 
 var $sub24=((($__old_sz)-($__n_del))|0);
 var $cmp26=($sub24|0)==($__n_copy|0);
 if($cmp26){label=15;break;}else{label=14;break;}
 case 14: 
 var $sub25=((($sub24)-($__n_copy))|0);
 var $add_ptr29_sum=((($__n_add)+($__n_copy))|0);
 var $add_ptr30=(($2+($add_ptr29_sum<<2))|0);
 var $add_ptr32_sum=((($__n_del)+($__n_copy))|0);
 var $add_ptr33=(($cond_i+($add_ptr32_sum<<2))|0);
 var $call_i=_wmemcpy($add_ptr30,$add_ptr33,$sub25);
 label=15;break;
 case 15: 
 var $cmp37=($__old_cap|0)==1;
 if($cmp37){label=17;break;}else{label=16;break;}
 case 16: 
 var $3=$cond_i;
 __ZdlPv($3);
 label=17;break;
 case 17: 
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$2;
 var $or_i=$cond_i105_sink|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 var $add44=((($sub24)+($__n_add))|0);
 var $__size__i=(($this+4)|0);
 HEAP32[(($__size__i)>>2)]=$add44;
 var $arrayidx=(($2+($add44<<2))|0);
 HEAP32[(($arrayidx)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub=(((1073741807)-($__old_cap))|0);
 var $cmp=($sub>>>0)<($__delta_cap>>>0);
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 3: 
 var $__size__i_i=$this;
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i=$0&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__data__i21_i=(($this+8)|0);
 var $1=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i=$1;label=6;break;
 case 5: 
 var $__data__i_i=(($this+4)|0);
 var $cond_i=$__data__i_i;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp4=($__old_cap>>>0)<536870887;
 if($cmp4){label=7;break;}else{var $cond_i85_sink=1073741807;label=9;break;}
 case 7: 
 var $add=((($__delta_cap)+($__old_cap))|0);
 var $mul=$__old_cap<<1;
 var $cmp_i_i_i=($add>>>0)<($mul>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$mul:$add);
 var $cmp_i=($_sroa_speculated>>>0)<2;
 if($cmp_i){var $cond_i85_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $add_i_i=((($_sroa_speculated)+(4))|0);
 var $and_i_i83=$add_i_i&-4;
 var $cond_i85_sink=$and_i_i83;label=9;break;
 case 9: 
 var $cond_i85_sink;
 var $mul_i_i=$cond_i85_sink<<2;
 var $call_i_i=__Znwj($mul_i_i);
 var $2=$call_i_i;
 var $cmp12=($__n_copy|0)==0;
 if($cmp12){label=11;break;}else{label=10;break;}
 case 10: 
 var $call_i80=_wmemcpy($2,$cond_i,$__n_copy);
 label=11;break;
 case 11: 
 var $sub18=((($__old_sz)-($__n_del))|0);
 var $cmp20=($sub18|0)==($__n_copy|0);
 if($cmp20){label=13;break;}else{label=12;break;}
 case 12: 
 var $sub19=((($sub18)-($__n_copy))|0);
 var $add_ptr_sum=((($__n_add)+($__n_copy))|0);
 var $add_ptr23=(($2+($add_ptr_sum<<2))|0);
 var $add_ptr25_sum=((($__n_del)+($__n_copy))|0);
 var $add_ptr26=(($cond_i+($add_ptr25_sum<<2))|0);
 var $call_i=_wmemcpy($add_ptr23,$add_ptr26,$sub19);
 label=13;break;
 case 13: 
 var $cmp30=($__old_cap|0)==1;
 if($cmp30){label=15;break;}else{label=14;break;}
 case 14: 
 var $3=$cond_i;
 __ZdlPv($3);
 label=15;break;
 case 15: 
 var $__data__i=(($this+8)|0);
 HEAP32[(($__data__i)>>2)]=$2;
 var $or_i=$cond_i85_sink|1;
 var $__cap__i=(($this)|0);
 HEAP32[(($__cap__i)>>2)]=$or_i;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__rdbuf_=(($this+24)|0);
 var $0=HEAP32[(($__rdbuf_)>>2)];
 var $tobool=($0|0)==0;
 if($tobool){label=3;break;}else{label=2;break;}
 case 2: 
 var $__rdstate_=(($this+16)|0);
 HEAP32[(($__rdstate_)>>2)]=$state;
 label=4;break;
 case 3: 
 var $or=$state|1;
 var $__rdstate_2=(($this+16)|0);
 HEAP32[(($__rdstate_2)>>2)]=$or;
 label=4;break;
 case 4: 
 var $cond=($tobool&1);
 var $or5=$cond|$state;
 var $__exceptions_=(($this+20)|0);
 var $1=HEAP32[(($__exceptions_)>>2)];
 var $and=$or5&$1;
 var $cmp=($and|0)==0;
 if($cmp){label=11;break;}else{label=5;break;}
 case 5: 
 var $exception=___cxa_allocate_exception(16);
 var $2=HEAP8[(276360)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=6;break;}else{label=8;break;}
 case 6: 
 var $3=___cxa_guard_acquire(276360);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((12224)>>2)]=4056;
 var $4=_atexit((194),12224,___dso_handle);
 label=8;break;
 case 8: 
 var $5=$agg_tmp_i;
 var $tmpcast_i=$agg_tmp_i;
 var $6=$exception;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=-1;
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;
 var $$etemp$7=12224;
 var $$etemp$5$0=$$etemp$7;
 var $$etemp$5$1=0;
 var $$etemp$3$0=_bitshift64Shl($$etemp$5$0,$$etemp$5$1,$$etemp$6$0);var $$etemp$3$1=tempRet0;
 var $$etemp$1$0=$$etemp$3$0&$$etemp$4$0;
 var $$etemp$1$1=$$etemp$3$1&$$etemp$4$1;
 var $$etemp$0$0=$$etemp$1$0|$$etemp$2$0;
 var $$etemp$0$1=$$etemp$1$1|$$etemp$2$1;
 var $st$8$0=(($agg_tmp_i)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$0$0;
 var $st$9$1=(($agg_tmp_i+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$0$1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112system_errorC2ENS_10error_codeEPKc($6,$tmpcast_i,1360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $7=$exception;
 HEAP32[(($7)>>2)]=3240;
 ___cxa_throw($exception,9112,(68));
 throw "Reached an unreachable!";
 case 10: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 ___cxa_free_exception($exception);
 ___resumeException($8$0)
 case 11: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3216;
 var $__event_size__i=(($this+40)|0);
 var $1=HEAP32[(($__event_size__i)>>2)];
 var $tobool4_i=($1|0)==0;
 var $__fn__pre=(($this+32)|0);
 var $__index__pre=(($this+36)|0);
 if($tobool4_i){label=4;break;}else{var $i_05_i=$1;label=2;break;}
 case 2: 
 var $i_05_i;
 var $dec_i=((($i_05_i)-(1))|0);
 var $2=HEAP32[(($__fn__pre)>>2)];
 var $arrayidx_i=(($2+($dec_i<<2))|0);
 var $3=HEAP32[(($arrayidx_i)>>2)];
 var $4=HEAP32[(($__index__pre)>>2)];
 var $arrayidx2_i=(($4+($dec_i<<2))|0);
 var $5=HEAP32[(($arrayidx2_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3](0,$this,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 var $tobool_i=($dec_i|0)==0;
 if($tobool_i){label=4;break;}else{var $i_05_i=$dec_i;label=2;break;}
 case 4: 
 var $__loc_=(($this+28)|0);
 var $6=$__loc_;
 __ZNSt3__16localeD2Ev($6);
 var $7=HEAP32[(($__fn__pre)>>2)];
 var $8=$7;
 _free($8);
 var $9=HEAP32[(($__index__pre)>>2)];
 var $10=$9;
 _free($10);
 var $__iarray_=(($this+48)|0);
 var $11=HEAP32[(($__iarray_)>>2)];
 var $12=$11;
 _free($12);
 var $__parray_=(($this+60)|0);
 var $13=HEAP32[(($__parray_)>>2)];
 var $14=$13;
 _free($14);
 return;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18ios_base6getlocEv($agg_result,$this){
 var label=0;
 var $__loc_=(($this+28)|0);
 var $0=$__loc_;
 __ZNSt3__16localeC2ERKS0_($agg_result,$0);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__rdbuf_=(($this+24)|0);
 HEAP32[(($__rdbuf_)>>2)]=$sb;
 var $not_tobool=($sb|0)==0;
 var $cond=($not_tobool&1);
 var $__rdstate_=(($this+16)|0);
 HEAP32[(($__rdstate_)>>2)]=$cond;
 var $__exceptions_=(($this+20)|0);
 HEAP32[(($__exceptions_)>>2)]=0;
 var $__fmtflags_=(($this+4)|0);
 HEAP32[(($__fmtflags_)>>2)]=4098;
 var $__width_=(($this+12)|0);
 HEAP32[(($__width_)>>2)]=0;
 var $__precision_=(($this+8)|0);
 HEAP32[(($__precision_)>>2)]=6;
 var $__fn_=(($this+32)|0);
 var $__loc_=(($this+28)|0);
 var $new_isnull=($__loc_|0)==0;
 var $0=$__fn_;
 _memset($0, 0, 40)|0;
 if($new_isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $1=$__loc_;
 __ZNSt3__16localeC2Ev($1);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4288;
 var $__loc__i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $__off__i_i=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($__off__i_i)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($__off__i_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $2=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($2)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($2+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $__off__i_i=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($__off__i_i)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($__off__i_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $cmp6=($__n|0)>0;
 if($cmp6){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $__ninp_=(($this+12)|0);
 var $__einp_=(($this+16)|0);
 var $__s_addr_07=$__s;var $__i_08=0;label=3;break;
 case 3: 
 var $__i_08;
 var $__s_addr_07;
 var $1=HEAP32[(($__ninp_)>>2)];
 var $2=HEAP32[(($__einp_)>>2)];
 var $cmp2=($1>>>0)<($2>>>0);
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $incdec_ptr=(($1+1)|0);
 HEAP32[(($__ninp_)>>2)]=$incdec_ptr;
 var $3=HEAP8[($1)];
 var $storemerge=$3;label=7;break;
 case 5: 
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+40)|0);
 var $4=HEAP32[(($vfn)>>2)];
 var $call4=FUNCTION_TABLE[$4]($this);
 var $cmp5=($call4|0)==-1;
 if($cmp5){var $__i_0_lcssa=$__i_08;label=8;break;}else{label=6;break;}
 case 6: 
 var $conv_i=(($call4)&255);
 var $storemerge=$conv_i;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($__s_addr_07)]=$storemerge;
 var $inc=((($__i_08)+(1))|0);
 var $incdec_ptr10=(($__s_addr_07+1)|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__s_addr_07=$incdec_ptr10;var $__i_08=$inc;label=3;break;}else{var $__i_0_lcssa=$inc;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+36)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($this);
 var $cmp=($call|0)==-1;
 if($cmp){var $retval_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $__ninp_=(($this+12)|0);
 var $2=HEAP32[(($__ninp_)>>2)];
 var $incdec_ptr=(($2+1)|0);
 HEAP32[(($__ninp_)>>2)]=$incdec_ptr;
 var $3=HEAP8[($2)];
 var $conv_i=($3&255);
 var $retval_0=$conv_i;label=3;break;
 case 3: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $cmp5=($__n|0)>0;
 if($cmp5){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $__nout_=(($this+24)|0);
 var $__eout_=(($this+28)|0);
 var $__i_06=0;var $__s_addr_07=$__s;label=3;break;
 case 3: 
 var $__s_addr_07;
 var $__i_06;
 var $1=HEAP32[(($__nout_)>>2)];
 var $2=HEAP32[(($__eout_)>>2)];
 var $cmp2=($1>>>0)<($2>>>0);
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $3=HEAP8[($__s_addr_07)];
 var $incdec_ptr=(($1+1)|0);
 HEAP32[(($__nout_)>>2)]=$incdec_ptr;
 HEAP8[($1)]=$3;
 label=6;break;
 case 5: 
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+52)|0);
 var $4=HEAP32[(($vfn)>>2)];
 var $5=HEAP8[($__s_addr_07)];
 var $conv_i=($5&255);
 var $call5=FUNCTION_TABLE[$4]($this,$conv_i);
 var $cmp6=($call5|0)==-1;
 if($cmp6){var $__i_0_lcssa=$__i_06;label=7;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr9=(($__s_addr_07+1)|0);
 var $inc=((($__i_06)+(1))|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__i_06=$inc;var $__s_addr_07=$incdec_ptr9;label=3;break;}else{var $__i_0_lcssa=$inc;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i_i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i_i);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=4216;
 var $__loc__i=(($this+4)|0);
 __ZNSt3__16localeD2Ev($__loc__i);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $__off__i_i=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($__off__i_i)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($__off__i_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $2=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($2)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($2+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $__off__i_i=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($__off__i_i)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($__off__i_i+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $cmp6=($__n|0)>0;
 if($cmp6){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $__ninp_=(($this+12)|0);
 var $__einp_=(($this+16)|0);
 var $__s_addr_07=$__s;var $__i_08=0;label=3;break;
 case 3: 
 var $__i_08;
 var $__s_addr_07;
 var $1=HEAP32[(($__ninp_)>>2)];
 var $2=HEAP32[(($__einp_)>>2)];
 var $cmp2=($1>>>0)<($2>>>0);
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $incdec_ptr=(($1+4)|0);
 HEAP32[(($__ninp_)>>2)]=$incdec_ptr;
 var $3=HEAP32[(($1)>>2)];
 var $storemerge=$3;label=6;break;
 case 5: 
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+40)|0);
 var $4=HEAP32[(($vfn)>>2)];
 var $call4=FUNCTION_TABLE[$4]($this);
 var $cmp5=($call4|0)==-1;
 if($cmp5){var $__i_0_lcssa=$__i_08;label=7;break;}else{var $storemerge=$call4;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($__s_addr_07)>>2)]=$storemerge;
 var $inc=((($__i_08)+(1))|0);
 var $incdec_ptr10=(($__s_addr_07+4)|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__s_addr_07=$incdec_ptr10;var $__i_08=$inc;label=3;break;}else{var $__i_0_lcssa=$inc;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+36)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($this);
 var $cmp=($call|0)==-1;
 if($cmp){var $retval_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $__ninp_=(($this+12)|0);
 var $2=HEAP32[(($__ninp_)>>2)];
 var $incdec_ptr=(($2+4)|0);
 HEAP32[(($__ninp_)>>2)]=$incdec_ptr;
 var $3=HEAP32[(($2)>>2)];
 var $retval_0=$3;label=3;break;
 case 3: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $cmp5=($__n|0)>0;
 if($cmp5){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $__nout_=(($this+24)|0);
 var $__eout_=(($this+28)|0);
 var $__i_06=0;var $__s_addr_07=$__s;label=3;break;
 case 3: 
 var $__s_addr_07;
 var $__i_06;
 var $1=HEAP32[(($__nout_)>>2)];
 var $2=HEAP32[(($__eout_)>>2)];
 var $cmp2=($1>>>0)<($2>>>0);
 if($cmp2){label=4;break;}else{label=5;break;}
 case 4: 
 var $3=HEAP32[(($__s_addr_07)>>2)];
 var $incdec_ptr=(($1+4)|0);
 HEAP32[(($__nout_)>>2)]=$incdec_ptr;
 HEAP32[(($1)>>2)]=$3;
 label=6;break;
 case 5: 
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+52)|0);
 var $4=HEAP32[(($vfn)>>2)];
 var $5=HEAP32[(($__s_addr_07)>>2)];
 var $call5=FUNCTION_TABLE[$4]($this,$5);
 var $cmp6=($call5|0)==-1;
 if($cmp6){var $__i_0_lcssa=$__i_06;label=7;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr9=(($__s_addr_07+4)|0);
 var $inc=((($__i_06)+(1))|0);
 var $cmp=($inc|0)<($__n|0);
 if($cmp){var $__i_06=$inc;var $__s_addr_07=$incdec_ptr9;label=3;break;}else{var $__i_0_lcssa=$inc;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $0=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $0=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $_sum=((($5)+(8))|0);
 var $7=(($0+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 __ZdlPv($6);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $_sum=((($5)+(8))|0);
 var $6=(($0+$_sum)|0);
 var $7=$6;
 __ZNSt3__18ios_baseD2Ev($7);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr=((($vtable)-(12))|0);
 var $1=$vbase_offset_ptr;
 var $vbase_offset=HEAP32[(($1)>>2)];
 var $2=$this;
 var $add_ptr_sum=((($vbase_offset)+(24))|0);
 var $__rdbuf__i_i=(($2+$add_ptr_sum)|0);
 var $3=$__rdbuf__i_i;
 var $4=HEAP32[(($3)>>2)];
 var $tobool=($4|0)==0;
 if($tobool){label=14;break;}else{label=2;break;}
 case 2: 
 var $__ok__i4=(($__s)|0);
 HEAP8[($__ok__i4)]=0;
 var $5=(($__s+4)|0);
 HEAP32[(($5)>>2)]=$this;
 var $add_ptr_sum_i=((($vbase_offset)+(16))|0);
 var $__rdstate__i_i_i=(($2+$add_ptr_sum_i)|0);
 var $6=$__rdstate__i_i_i;
 var $7=HEAP32[(($6)>>2)];
 var $cmp_i_i_i=($7|0)==0;
 if($cmp_i_i_i){label=3;break;}else{label=15;break;}
 case 3: 
 var $add_ptr_sum4_i=((($vbase_offset)+(72))|0);
 var $__tie__i_i=(($2+$add_ptr_sum4_i)|0);
 var $8=$__tie__i_i;
 var $9=HEAP32[(($8)>>2)];
 var $tobool_i6=($9|0)==0;
 if($tobool_i6){label=5;break;}else{label=4;break;}
 case 4: 
 var $call13_i8=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($__ok__i4)]=1;
 var $vtable7=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr8=((($vtable7)-(12))|0);
 var $10=$vbase_offset_ptr8;
 var $vbase_offset9=HEAP32[(($10)>>2)];
 var $add_ptr10_sum=((($vbase_offset9)+(24))|0);
 var $__rdbuf__i_i38=(($2+$add_ptr10_sum)|0);
 var $11=$__rdbuf__i_i38;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=$12;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $15=HEAP32[(($vfn_i)>>2)];
 var $call_i41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $cmp=($call_i41|0)==-1;
 if($cmp){label=7;break;}else{label=15;break;}
 case 7: 
 var $vtable16=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr17=((($vtable16)-(12))|0);
 var $16=$vbase_offset_ptr17;
 var $vbase_offset18=HEAP32[(($16)>>2)];
 var $add_ptr19=(($2+$vbase_offset18)|0);
 var $17=$add_ptr19;
 var $add_ptr19_sum=((($vbase_offset18)+(16))|0);
 var $__rdstate__i_i=(($2+$add_ptr19_sum)|0);
 var $18=$__rdstate__i_i;
 var $19=HEAP32[(($18)>>2)];
 var $or_i_i=$19|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($17,$or_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $21=$20$0;
 var $exn_slot_0=$21;label=10;break;
 case 9: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 var $23=$22$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $exn_slot_0=$23;label=10;break;
 case 10: 
 var $exn_slot_0;
 var $24=___cxa_begin_catch($exn_slot_0);
 var $vtable23=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr24=((($vtable23)-(12))|0);
 var $25=$vbase_offset_ptr24;
 var $vbase_offset25=HEAP32[(($25)>>2)];
 var $add_ptr26_sum=((($vbase_offset25)+(16))|0);
 var $__rdstate__i=(($2+$add_ptr26_sum)|0);
 var $26=$__rdstate__i;
 var $27=HEAP32[(($26)>>2)];
 var $or_i=$27|1;
 HEAP32[(($26)>>2)]=$or_i;
 var $add_ptr26_sum9=((($vbase_offset25)+(20))|0);
 var $__exceptions__i=(($2+$add_ptr26_sum9)|0);
 var $28=$__exceptions__i;
 var $29=HEAP32[(($28)>>2)];
 var $and_i=$29&1;
 var $tobool_i2=($and_i|0)==0;
 if($tobool_i2){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($30$0)
 case 18: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $0=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $0=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $_sum=((($5)+(8))|0);
 var $7=(($0+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 __ZdlPv($6);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $_sum=((($5)+(8))|0);
 var $6=(($0+$_sum)|0);
 var $7=$6;
 __ZNSt3__18ios_baseD2Ev($7);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr=((($vtable)-(12))|0);
 var $1=$vbase_offset_ptr;
 var $vbase_offset=HEAP32[(($1)>>2)];
 var $2=$this;
 var $add_ptr_sum=((($vbase_offset)+(24))|0);
 var $__rdbuf__i_i=(($2+$add_ptr_sum)|0);
 var $3=$__rdbuf__i_i;
 var $4=HEAP32[(($3)>>2)];
 var $tobool=($4|0)==0;
 if($tobool){label=14;break;}else{label=2;break;}
 case 2: 
 var $__ok__i4=(($__s)|0);
 HEAP8[($__ok__i4)]=0;
 var $5=(($__s+4)|0);
 HEAP32[(($5)>>2)]=$this;
 var $add_ptr_sum_i=((($vbase_offset)+(16))|0);
 var $__rdstate__i_i_i=(($2+$add_ptr_sum_i)|0);
 var $6=$__rdstate__i_i_i;
 var $7=HEAP32[(($6)>>2)];
 var $cmp_i_i_i=($7|0)==0;
 if($cmp_i_i_i){label=3;break;}else{label=15;break;}
 case 3: 
 var $add_ptr_sum4_i=((($vbase_offset)+(72))|0);
 var $__tie__i_i=(($2+$add_ptr_sum4_i)|0);
 var $8=$__tie__i_i;
 var $9=HEAP32[(($8)>>2)];
 var $tobool_i6=($9|0)==0;
 if($tobool_i6){label=5;break;}else{label=4;break;}
 case 4: 
 var $call13_i8=(function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 5: 
 HEAP8[($__ok__i4)]=1;
 var $vtable7=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr8=((($vtable7)-(12))|0);
 var $10=$vbase_offset_ptr8;
 var $vbase_offset9=HEAP32[(($10)>>2)];
 var $add_ptr10_sum=((($vbase_offset9)+(24))|0);
 var $__rdbuf__i_i38=(($2+$add_ptr10_sum)|0);
 var $11=$__rdbuf__i_i38;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=$12;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $15=HEAP32[(($vfn_i)>>2)];
 var $call_i41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 var $cmp=($call_i41|0)==-1;
 if($cmp){label=7;break;}else{label=15;break;}
 case 7: 
 var $vtable16=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr17=((($vtable16)-(12))|0);
 var $16=$vbase_offset_ptr17;
 var $vbase_offset18=HEAP32[(($16)>>2)];
 var $add_ptr19=(($2+$vbase_offset18)|0);
 var $17=$add_ptr19;
 var $add_ptr19_sum=((($vbase_offset18)+(16))|0);
 var $__rdstate__i_i=(($2+$add_ptr19_sum)|0);
 var $18=$__rdstate__i_i;
 var $19=HEAP32[(($18)>>2)];
 var $or_i_i=$19|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($17,$or_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=9;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $21=$20$0;
 var $exn_slot_0=$21;label=10;break;
 case 9: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 var $23=$22$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $exn_slot_0=$23;label=10;break;
 case 10: 
 var $exn_slot_0;
 var $24=___cxa_begin_catch($exn_slot_0);
 var $vtable23=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr24=((($vtable23)-(12))|0);
 var $25=$vbase_offset_ptr24;
 var $vbase_offset25=HEAP32[(($25)>>2)];
 var $add_ptr26_sum=((($vbase_offset25)+(16))|0);
 var $__rdstate__i=(($2+$add_ptr26_sum)|0);
 var $26=$__rdstate__i;
 var $27=HEAP32[(($26)>>2)];
 var $or_i=$27|1;
 HEAP32[(($26)>>2)]=$or_i;
 var $add_ptr26_sum9=((($vbase_offset25)+(20))|0);
 var $__exceptions__i=(($2+$add_ptr26_sum9)|0);
 var $28=$__exceptions__i;
 var $29=HEAP32[(($28)>>2)];
 var $and_i=$29&1;
 var $tobool_i2=($and_i|0)==0;
 if($tobool_i2){label=13;break;}else{label=11;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 ___cxa_end_catch();
 label=14;break;
 case 14: 
 STACKTOP=sp;return $this;
 case 15: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=14;break;
 case 16: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 ___resumeException($30$0)
 case 18: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1,0); var $31$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $0=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $0=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $_sum=((($5)+(4))|0);
 var $7=(($0+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 __ZdlPv($6);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $_sum=((($5)+(4))|0);
 var $6=(($0+$_sum)|0);
 var $7=$6;
 __ZNSt3__18ios_baseD2Ev($7);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__os_=(($this+4)|0);
 var $ref=HEAP32[(($__os_)>>2)];
 var $0=$ref;
 var $vtable=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr=((($vtable)-(12))|0);
 var $1=$vbase_offset_ptr;
 var $vbase_offset=HEAP32[(($1)>>2)];
 var $2=$ref;
 var $add_ptr_sum=((($vbase_offset)+(24))|0);
 var $__rdbuf__i_i=(($2+$add_ptr_sum)|0);
 var $3=$__rdbuf__i_i;
 var $4=HEAP32[(($3)>>2)];
 var $tobool=($4|0)==0;
 if($tobool){label=9;break;}else{label=2;break;}
 case 2: 
 var $add_ptr_sum1=((($vbase_offset)+(16))|0);
 var $__rdstate__i_i50=(($2+$add_ptr_sum1)|0);
 var $5=$__rdstate__i_i50;
 var $6=HEAP32[(($5)>>2)];
 var $cmp_i_i=($6|0)==0;
 if($cmp_i_i){label=3;break;}else{label=9;break;}
 case 3: 
 var $add_ptr_sum2=((($vbase_offset)+(4))|0);
 var $__fmtflags__i=(($2+$add_ptr_sum2)|0);
 var $7=$__fmtflags__i;
 var $8=HEAP32[(($7)>>2)];
 var $and=$8&8192;
 var $tobool19=($and|0)==0;
 if($tobool19){label=9;break;}else{label=4;break;}
 case 4: 
 var $call21=__ZSt18uncaught_exceptionv();
 if($call21){label=9;break;}else{label=5;break;}
 case 5: 
 var $ref23=HEAP32[(($__os_)>>2)];
 var $9=$ref23;
 var $vtable24=HEAP32[(($9)>>2)];
 var $vbase_offset_ptr25=((($vtable24)-(12))|0);
 var $10=$vbase_offset_ptr25;
 var $vbase_offset26=HEAP32[(($10)>>2)];
 var $11=$ref23;
 var $add_ptr27_sum=((($vbase_offset26)+(24))|0);
 var $__rdbuf__i_i60=(($11+$add_ptr27_sum)|0);
 var $12=$__rdbuf__i_i60;
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=$13;
 var $vtable_i=HEAP32[(($15)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $16=HEAP32[(($vfn_i)>>2)];
 var $call_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$16]($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $cmp=($call_i53|0)==-1;
 if($cmp){label=7;break;}else{label=9;break;}
 case 7: 
 var $ref34=HEAP32[(($__os_)>>2)];
 var $17=$ref34;
 var $vtable35=HEAP32[(($17)>>2)];
 var $vbase_offset_ptr36=((($vtable35)-(12))|0);
 var $18=$vbase_offset_ptr36;
 var $vbase_offset37=HEAP32[(($18)>>2)];
 var $19=$ref34;
 var $add_ptr38=(($19+$vbase_offset37)|0);
 var $20=$add_ptr38;
 var $add_ptr38_sum=((($vbase_offset37)+(16))|0);
 var $__rdstate__i_i=(($19+$add_ptr38_sum)|0);
 var $21=$__rdstate__i_i;
 var $22=HEAP32[(($21)>>2)];
 var $or_i_i=$22|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($20,$or_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 var $24=$23$0;
 var $25=___cxa_begin_catch($24);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $0=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $0=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $_sum=((($5)+(4))|0);
 var $7=(($0+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 __ZdlPv($6);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $_sum=((($5)+(4))|0);
 var $6=(($0+$_sum)|0);
 var $7=$6;
 __ZNSt3__18ios_baseD2Ev($7);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__os_=(($this+4)|0);
 var $ref=HEAP32[(($__os_)>>2)];
 var $0=$ref;
 var $vtable=HEAP32[(($0)>>2)];
 var $vbase_offset_ptr=((($vtable)-(12))|0);
 var $1=$vbase_offset_ptr;
 var $vbase_offset=HEAP32[(($1)>>2)];
 var $2=$ref;
 var $add_ptr_sum=((($vbase_offset)+(24))|0);
 var $__rdbuf__i_i=(($2+$add_ptr_sum)|0);
 var $3=$__rdbuf__i_i;
 var $4=HEAP32[(($3)>>2)];
 var $tobool=($4|0)==0;
 if($tobool){label=9;break;}else{label=2;break;}
 case 2: 
 var $add_ptr_sum1=((($vbase_offset)+(16))|0);
 var $__rdstate__i_i50=(($2+$add_ptr_sum1)|0);
 var $5=$__rdstate__i_i50;
 var $6=HEAP32[(($5)>>2)];
 var $cmp_i_i=($6|0)==0;
 if($cmp_i_i){label=3;break;}else{label=9;break;}
 case 3: 
 var $add_ptr_sum2=((($vbase_offset)+(4))|0);
 var $__fmtflags__i=(($2+$add_ptr_sum2)|0);
 var $7=$__fmtflags__i;
 var $8=HEAP32[(($7)>>2)];
 var $and=$8&8192;
 var $tobool19=($and|0)==0;
 if($tobool19){label=9;break;}else{label=4;break;}
 case 4: 
 var $call21=__ZSt18uncaught_exceptionv();
 if($call21){label=9;break;}else{label=5;break;}
 case 5: 
 var $ref23=HEAP32[(($__os_)>>2)];
 var $9=$ref23;
 var $vtable24=HEAP32[(($9)>>2)];
 var $vbase_offset_ptr25=((($vtable24)-(12))|0);
 var $10=$vbase_offset_ptr25;
 var $vbase_offset26=HEAP32[(($10)>>2)];
 var $11=$ref23;
 var $add_ptr27_sum=((($vbase_offset26)+(24))|0);
 var $__rdbuf__i_i60=(($11+$add_ptr27_sum)|0);
 var $12=$__rdbuf__i_i60;
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 var $15=$13;
 var $vtable_i=HEAP32[(($15)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $16=HEAP32[(($vfn_i)>>2)];
 var $call_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$16]($14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $cmp=($call_i53|0)==-1;
 if($cmp){label=7;break;}else{label=9;break;}
 case 7: 
 var $ref34=HEAP32[(($__os_)>>2)];
 var $17=$ref34;
 var $vtable35=HEAP32[(($17)>>2)];
 var $vbase_offset_ptr36=((($vtable35)-(12))|0);
 var $18=$vbase_offset_ptr36;
 var $vbase_offset37=HEAP32[(($18)>>2)];
 var $19=$ref34;
 var $add_ptr38=(($19+$vbase_offset37)|0);
 var $20=$add_ptr38;
 var $add_ptr38_sum=((($vbase_offset37)+(16))|0);
 var $__rdstate__i_i=(($19+$add_ptr38_sum)|0);
 var $21=$__rdstate__i_i;
 var $22=HEAP32[(($21)>>2)];
 var $or_i_i=$22|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($20,$or_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 var $24=$23$0;
 var $25=___cxa_begin_catch($24);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1,0); var $26$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;
 return 1440;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($ev|0)==1;
 if($cmp){label=3;break;}else{label=2;break;}
 case 2: 
 var $0=(($this)|0);
 __ZNKSt3__112__do_message7messageEi($agg_result,$0,$ev);
 label=4;break;
 case 3: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1680,35);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($0);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__112system_errorD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__112system_errorD2Ev($0);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;
 __ZNSt3__18ios_baseD2Ev($this);
 var $0=$this;
 __ZdlPv($0);
 return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114error_categoryD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17collateIcED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17collateIcED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp8=($__lo2|0)==($__hi2|0);
 if($cmp8){var $__lo1_addr_0_lcssa=$__lo1;label=6;break;}else{var $__lo1_addr_09=$__lo1;var $__lo2_addr_010=$__lo2;label=2;break;}
 case 2: 
 var $__lo2_addr_010;
 var $__lo1_addr_09;
 var $cmp2=($__lo1_addr_09|0)==($__hi1|0);
 if($cmp2){var $retval_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $0=HEAP8[($__lo1_addr_09)];
 var $1=HEAP8[($__lo2_addr_010)];
 var $cmp4=(($0<<24)>>24)<(($1<<24)>>24);
 if($cmp4){var $retval_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $cmp7=(($1<<24)>>24)<(($0<<24)>>24);
 if($cmp7){var $retval_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $incdec_ptr=(($__lo1_addr_09+1)|0);
 var $incdec_ptr10=(($__lo2_addr_010+1)|0);
 var $cmp=($incdec_ptr10|0)==($__hi2|0);
 if($cmp){var $__lo1_addr_0_lcssa=$incdec_ptr;label=6;break;}else{var $__lo1_addr_09=$incdec_ptr;var $__lo2_addr_010=$incdec_ptr10;label=2;break;}
 case 6: 
 var $__lo1_addr_0_lcssa;
 var $cmp11=($__lo1_addr_0_lcssa|0)!=($__hi1|0);
 var $conv12=($cmp11&1);
 var $retval_0=$conv12;label=7;break;
 case 7: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub_ptr_rhs_cast_i_i_i=$__lo;
 var $sub_ptr_lhs_cast_i_i_i=$__hi;
 var $sub_ptr_sub_i_i_i=((($sub_ptr_lhs_cast_i_i_i)-($sub_ptr_rhs_cast_i_i_i))|0);
 var $cmp_i=($sub_ptr_sub_i_i_i>>>0)>4294967279;
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $0=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($0);
 label=3;break;
 case 3: 
 var $cmp3_i=($sub_ptr_sub_i_i_i>>>0)<11;
 if($cmp3_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i_i=$sub_ptr_sub_i_i_i<<1;
 var $conv_i_i=(($shl_i_i)&255);
 var $__s2_i_i=$agg_result;
 var $__size__i69_i=$agg_result;
 HEAP8[($__size__i69_i)]=$conv_i_i;
 var $arrayidx_i_i=(($__s2_i_i+1)|0);
 var $__p_0_ph_i=$arrayidx_i_i;label=6;break;
 case 5: 
 var $add_i_i_i=((($sub_ptr_sub_i_i_i)+(16))|0);
 var $and_i_i_i=$add_i_i_i&-16;
 var $call_i_i_i=__Znwj($and_i_i_i);
 var $__data__i_i=(($agg_result+8)|0);
 HEAP32[(($__data__i_i)>>2)]=$call_i_i_i;
 var $or_i_i=$and_i_i_i|1;
 var $__cap__i_i=(($agg_result)|0);
 HEAP32[(($__cap__i_i)>>2)]=$or_i_i;
 var $__size__i_i=(($agg_result+4)|0);
 HEAP32[(($__size__i_i)>>2)]=$sub_ptr_sub_i_i_i;
 var $__p_0_ph_i=$call_i_i_i;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $cmp1112_i=($__lo|0)==($__hi|0);
 if($cmp1112_i){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $1=(((-$sub_ptr_rhs_cast_i_i_i))|0);
 var $scevgep_i=(($__hi+$1)|0);
 var $__p_013_i=$__p_0_ph_i;var $__first_addr_014_i=$__lo;label=8;break;
 case 8: 
 var $__first_addr_014_i;
 var $__p_013_i;
 var $2=HEAP8[($__first_addr_014_i)];
 HEAP8[($__p_013_i)]=$2;
 var $incdec_ptr_i=(($__first_addr_014_i+1)|0);
 var $incdec_ptr12_i=(($__p_013_i+1)|0);
 var $cmp11_i=($incdec_ptr_i|0)==($__hi|0);
 if($cmp11_i){label=9;break;}else{var $__p_013_i=$incdec_ptr12_i;var $__first_addr_014_i=$incdec_ptr_i;label=8;break;}
 case 9: 
 var $scevgep15_i=$scevgep_i;
 var $scevgep16_i=(($__p_0_ph_i+$scevgep15_i)|0);
 var $__p_0_lcssa_i=$scevgep16_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP8[($__p_0_lcssa_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($__lo|0)==($__hi|0);
 if($cmp6){var $__h_0_lcssa=0;label=3;break;}else{var $__p_07=$__lo;var $__h_08=0;label=2;break;}
 case 2: 
 var $__h_08;
 var $__p_07;
 var $shl=$__h_08<<4;
 var $0=HEAP8[($__p_07)];
 var $conv=(($0<<24)>>24);
 var $add=((($conv)+($shl))|0);
 var $and=$add&-268435456;
 var $shr=$and>>>24;
 var $or=$shr|$and;
 var $xor=$or^$add;
 var $incdec_ptr=(($__p_07+1)|0);
 var $cmp=($incdec_ptr|0)==($__hi|0);
 if($cmp){var $__h_0_lcssa=$xor;label=3;break;}else{var $__p_07=$incdec_ptr;var $__h_08=$xor;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17collateIwED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp9=($__lo2|0)==($__hi2|0);
 if($cmp9){var $__lo1_addr_0_lcssa=$__lo1;label=6;break;}else{var $__lo1_addr_010=$__lo1;var $__lo2_addr_011=$__lo2;label=2;break;}
 case 2: 
 var $__lo2_addr_011;
 var $__lo1_addr_010;
 var $cmp2=($__lo1_addr_010|0)==($__hi1|0);
 if($cmp2){var $retval_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $0=HEAP32[(($__lo1_addr_010)>>2)];
 var $1=HEAP32[(($__lo2_addr_011)>>2)];
 var $cmp3=($0|0)<($1|0);
 if($cmp3){var $retval_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $cmp4=($1|0)<($0|0);
 if($cmp4){var $retval_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $incdec_ptr=(($__lo1_addr_010+4)|0);
 var $incdec_ptr7=(($__lo2_addr_011+4)|0);
 var $cmp=($incdec_ptr7|0)==($__hi2|0);
 if($cmp){var $__lo1_addr_0_lcssa=$incdec_ptr;label=6;break;}else{var $__lo1_addr_010=$incdec_ptr;var $__lo2_addr_011=$incdec_ptr7;label=2;break;}
 case 6: 
 var $__lo1_addr_0_lcssa;
 var $cmp8=($__lo1_addr_0_lcssa|0)!=($__hi1|0);
 var $conv=($cmp8&1);
 var $retval_0=$conv;label=7;break;
 case 7: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub_ptr_rhs_cast_i_i_i=$__lo;
 var $sub_ptr_lhs_cast_i_i_i=$__hi;
 var $sub_ptr_sub_i_i_i=((($sub_ptr_lhs_cast_i_i_i)-($sub_ptr_rhs_cast_i_i_i))|0);
 var $sub_ptr_div_i_i_i=$sub_ptr_sub_i_i_i>>2;
 var $cmp_i=($sub_ptr_div_i_i_i>>>0)>1073741807;
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $0=$agg_result;
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($0);
 label=3;break;
 case 3: 
 var $cmp3_i=($sub_ptr_div_i_i_i>>>0)<2;
 if($cmp3_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $shl_i12_i=$sub_ptr_sub_i_i_i>>>1;
 var $conv_i_i=(($shl_i12_i)&255);
 var $__size__i69_i=$agg_result;
 HEAP8[($__size__i69_i)]=$conv_i_i;
 var $__data__i59_i=(($agg_result+4)|0);
 var $__p_0_ph_i=$__data__i59_i;label=6;break;
 case 5: 
 var $add_i_i_i=((($sub_ptr_div_i_i_i)+(4))|0);
 var $and_i_i_i=$add_i_i_i&-4;
 var $mul_i_i_i=$and_i_i_i<<2;
 var $call_i_i_i=__Znwj($mul_i_i_i);
 var $1=$call_i_i_i;
 var $__data__i_i=(($agg_result+8)|0);
 HEAP32[(($__data__i_i)>>2)]=$1;
 var $or_i_i=$and_i_i_i|1;
 var $__cap__i_i=(($agg_result)|0);
 HEAP32[(($__cap__i_i)>>2)]=$or_i_i;
 var $__size__i_i=(($agg_result+4)|0);
 HEAP32[(($__size__i_i)>>2)]=$sub_ptr_div_i_i_i;
 var $__p_0_ph_i=$1;label=6;break;
 case 6: 
 var $__p_0_ph_i;
 var $cmp1113_i=($__lo|0)==($__hi|0);
 if($cmp1113_i){var $__p_0_lcssa_i=$__p_0_ph_i;label=10;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($__hi)-(4))|0);
 var $scevgep16_i=$scevgep_i;
 var $2=(((-$sub_ptr_rhs_cast_i_i_i))|0);
 var $uglygep_i=(($scevgep16_i+$2)|0);
 var $uglygep17_i=$uglygep_i;
 var $3=$uglygep17_i>>>2;
 var $__p_014_i=$__p_0_ph_i;var $__first_addr_015_i=$__lo;label=8;break;
 case 8: 
 var $__first_addr_015_i;
 var $__p_014_i;
 var $4=HEAP32[(($__first_addr_015_i)>>2)];
 HEAP32[(($__p_014_i)>>2)]=$4;
 var $incdec_ptr_i=(($__first_addr_015_i+4)|0);
 var $incdec_ptr12_i=(($__p_014_i+4)|0);
 var $cmp11_i=($incdec_ptr_i|0)==($__hi|0);
 if($cmp11_i){label=9;break;}else{var $__p_014_i=$incdec_ptr12_i;var $__first_addr_015_i=$incdec_ptr_i;label=8;break;}
 case 9: 
 var $5=((($3)+(1))|0);
 var $scevgep18_i=(($__p_0_ph_i+($5<<2))|0);
 var $__p_0_lcssa_i=$scevgep18_i;label=10;break;
 case 10: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($__lo|0)==($__hi|0);
 if($cmp6){var $__h_0_lcssa=0;label=3;break;}else{var $__p_07=$__lo;var $__h_08=0;label=2;break;}
 case 2: 
 var $__h_08;
 var $__p_07;
 var $shl=$__h_08<<4;
 var $0=HEAP32[(($__p_07)>>2)];
 var $add=((($0)+($shl))|0);
 var $and=$add&-268435456;
 var $shr=$and>>>24;
 var $or=$shr|$and;
 var $xor=$or^$add;
 var $incdec_ptr=(($__p_07+4)|0);
 var $cmp=($incdec_ptr|0)==($__hi|0);
 if($cmp){var $__h_0_lcssa=$xor;label=3;break;}else{var $__p_07=$incdec_ptr;var $__h_08=$xor;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i12=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $ref_tmp=(sp)+(40);
 var $agg_tmp=(sp)+(48);
 var $agg_tmp2=(sp)+(56);
 var $ref_tmp4=(sp)+(64);
 var $ref_tmp6=(sp)+(72);
 var $__names=(sp)+(80);
 var $agg_tmp14=(sp)+(104);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and=$0&1;
 var $cmp=($and|0)==0;
 if($cmp){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $1=$this;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+16)|0);
 var $2=HEAP32[(($vfn)>>2)];
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($agg_tmp2)|0);
 HEAP32[(($8)>>2)]=$7;
 FUNCTION_TABLE[$2]($ref_tmp,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__lv);
 var $9=(($ref_tmp)|0);
 var $10=HEAP32[(($9)>>2)];
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($__lv)>>2)];
 if(($11|0)==0){ label=3;break;}else if(($11|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $12=(($agg_result)|0);
 HEAP32[(($12)>>2)]=$10;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($ref_tmp4,$__iob);
 var $__locale__i=(($ref_tmp4)|0);
 var $13=HEAP32[(($__locale__i)>>2)];
 var $14=$__p_i_i_i;
 var $15=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($15|0)==-1;
 if($cmp_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$14,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $16=HEAP32[((13652)>>2)];
 var $sub_i_i=((($16)-(1))|0);
 var $__end__i_i_i_i=(($13+12)|0);
 var $17=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($13+8)|0);
 var $18=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$17;
 var $sub_ptr_rhs_cast_i_i_i_i=$18;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=10;break;}else{label=11;break;}
 case 10: 
 var $arrayidx_i_i_i_i=(($18+($sub_i_i<<2))|0);
 var $19=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($19|0)==0;
 if($tobool_i_i_i){label=11;break;}else{label=13;break;}
 case 11: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $20=$exception_i_i;
 __ZNSt8bad_castC2Ev($20);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $21=$19;
 var $22=HEAP32[(($__locale__i)>>2)];
 var $23=(($22)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($23);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp6,$__iob);
 var $__locale__i13=(($ref_tmp6)|0);
 var $24=HEAP32[(($__locale__i13)>>2)];
 var $25=$__p_i_i_i12;
 var $26=HEAP32[((13264)>>2)];
 var $cmp_i_i_i14=($26|0)==-1;
 if($cmp_i_i_i14){label=15;break;}else{label=14;break;}
 case 14: 
 var $ref_tmp_i_sroa_0_0__idx_i_i15=(($__p_i_i_i12)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i15)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i16=(($__p_i_i_i12+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i16)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i17=(($__p_i_i_i12+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i17)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$25,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $27=HEAP32[((13268)>>2)];
 var $sub_i_i19=((($27)-(1))|0);
 var $__end__i_i_i_i20=(($24+12)|0);
 var $28=HEAP32[(($__end__i_i_i_i20)>>2)];
 var $__begin__i_i_i_i21=(($24+8)|0);
 var $29=HEAP32[(($__begin__i_i_i_i21)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i22=$28;
 var $sub_ptr_rhs_cast_i_i_i_i23=$29;
 var $sub_ptr_sub_i_i_i_i24=((($sub_ptr_lhs_cast_i_i_i_i22)-($sub_ptr_rhs_cast_i_i_i_i23))|0);
 var $sub_ptr_div_i_i_i_i25=$sub_ptr_sub_i_i_i_i24>>2;
 var $cmp_i_i1_i26=($sub_ptr_div_i_i_i_i25>>>0)>($sub_i_i19>>>0);
 if($cmp_i_i1_i26){label=16;break;}else{label=17;break;}
 case 16: 
 var $arrayidx_i_i_i_i28=(($29+($sub_i_i19<<2))|0);
 var $30=HEAP32[(($arrayidx_i_i_i_i28)>>2)];
 var $tobool_i_i_i29=($30|0)==0;
 if($tobool_i_i_i29){label=17;break;}else{label=19;break;}
 case 17: 
 var $exception_i_i31=___cxa_allocate_exception(4);
 var $31=$exception_i_i31;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i31,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $32=$30;
 var $33=HEAP32[(($__locale__i13)>>2)];
 var $34=(($33)|0);
 var $call_i37=__ZNSt3__114__shared_count16__release_sharedEv($34);
 var $arrayinit_begin=(($__names)|0);
 var $35=$30;
 var $vtable_i=HEAP32[(($35)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $36=HEAP32[(($vfn_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($arrayinit_begin,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $arrayinit_endOfInit_0=$arrayinit_begin;label=25;break; }
 case 20: 
 var $arrayinit_element=(($__names+12)|0);
 var $vtable_i40=HEAP32[(($35)>>2)];
 var $vfn_i41=(($vtable_i40+28)|0);
 var $37=HEAP32[(($vfn_i41)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($arrayinit_element,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $arrayinit_endOfInit_0=$arrayinit_element;label=25;break; }
 case 21: 
 var $38=(($__e)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($agg_tmp14)|0);
 HEAP32[(($40)>>2)]=$39;
 var $add_ptr=(($__names+24)|0);
 var $call18=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp14,$arrayinit_begin,$add_ptr,$21,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $cmp20=($call18|0)==($arrayinit_begin|0);
 var $frombool=($cmp20&1);
 HEAP8[($__v)]=$frombool;
 var $41=(($__b)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($agg_result)|0);
 HEAP32[(($43)>>2)]=$42;
 var $arraydestroy_element23=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy_element23);
 var $arraydestroy_element23_1=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy_element23_1);
 label=28;break;
 case 23: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 var $45=$44$0;
 var $46=$44$1;
 var $47=HEAP32[(($__locale__i)>>2)];
 var $48=(($47)|0);
 var $call_i39=__ZNSt3__114__shared_count16__release_sharedEv($48);
 var $exn_slot_0=$45;var $ehselector_slot_0=$46;label=29;break;
 case 24: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $52=HEAP32[(($__locale__i13)>>2)];
 var $53=(($52)|0);
 var $call_i41=__ZNSt3__114__shared_count16__release_sharedEv($53);
 var $exn_slot_0=$50;var $ehselector_slot_0=$51;label=29;break;
 case 25: 
 var $arrayinit_endOfInit_0;
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=$54$0;
 var $56=$54$1;
 var $arraydestroy_isempty=($arrayinit_begin|0)==($arrayinit_endOfInit_0|0);
 if($arraydestroy_isempty){var $exn_slot_0=$55;var $ehselector_slot_0=$56;label=29;break;}else{var $arraydestroy_elementPast=$arrayinit_endOfInit_0;label=26;break;}
 case 26: 
 var $arraydestroy_elementPast;
 var $arraydestroy_element=((($arraydestroy_elementPast)-(12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy_element);
 var $arraydestroy_done=($arraydestroy_element|0)==($arrayinit_begin|0);
 if($arraydestroy_done){var $exn_slot_0=$55;var $ehselector_slot_0=$56;label=29;break;}else{var $arraydestroy_elementPast=$arraydestroy_element;label=26;break;}
 case 27: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $arraydestroy_element29=(($__names+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy_element29);
 var $arraydestroy_element29_1=(($__names)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($arraydestroy_element29_1);
 var $59=$57$1;
 var $exn_slot_0=$58;var $ehselector_slot_0=$59;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val32$0=$lpad_val$0;
 var $lpad_val32$1=$ehselector_slot_0;
 ___resumeException($lpad_val32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $sub_ptr_lhs_cast_i_i=$__ke;
 var $sub_ptr_rhs_cast_i_i=$__kb;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $sub_ptr_div_i_i=(((($sub_ptr_sub_i_i|0))/(12))&-1);
 var $arraydecay=(($__statbuf)|0);
 var $cmp=($sub_ptr_div_i_i>>>0)>100;
 if($cmp){label=2;break;}else{var $__status_0=$arraydecay;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $call1=_malloc($sub_ptr_div_i_i);
 var $cmp2=($call1|0)==0;
 if($cmp2){label=3;break;}else{var $__status_0=$call1;var $__stat_hold_sroa_0_1=$call1;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1); var $0$1 = tempRet0;
 var $57$1=$0$1;var $57$0=$0$0;label=104;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit101$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit101$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit101$1;var $lpad_phi$0=$lpad_loopexit101$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit102$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit102$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit102$1;var $lpad_phi$0=$lpad_nonloopexit102$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $tobool_i_i_i135=($__stat_hold_sroa_0_1|0)==0;
 if($tobool_i_i_i135){var $57$1=$lpad_phi$1;var $57$0=$lpad_phi$0;label=104;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $57$1=$lpad_phi$1;var $57$0=$lpad_phi$0;label=104;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $cmp6111=($__kb|0)==($__ke|0);
 if($cmp6111){var $__n_might_match_0_lcssa=$sub_ptr_div_i_i;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0112=$sub_ptr_div_i_i;var $__n_does_match_0113=0;var $__st_0114=$__status_0;var $__ky_0115=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $__sbuf__i_i_i=(($__b)|0);
 var $__sbuf__i11_i_i=(($__e)|0);
 var $1=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0115;
 var $__st_0114;
 var $__n_does_match_0113;
 var $__n_might_match_0112;
 var $__size__i_i_i=$__ky_0115;
 var $2=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($2&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i162=($and_i_i_i|0)==0;
 if($tobool_i_i_i162){label=14;break;}else{label=13;break;}
 case 13: 
 var $__size__i23_i_i=(($__ky_0115+4)|0);
 var $3=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$3;label=15;break;
 case 14: 
 var $shr_i_i_i67=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i67;label=15;break;
 case 15: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0114)]=1;
 var $__n_does_match_1=$__n_does_match_0113;var $__n_might_match_1=$__n_might_match_0112;label=18;break;
 case 17: 
 HEAP8[($__st_0114)]=2;
 var $dec=((($__n_might_match_0112)-(1))|0);
 var $inc=((($__n_does_match_0113)+(1))|0);
 var $__n_does_match_1=$inc;var $__n_might_match_1=$dec;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $incdec_ptr=(($__ky_0115+12)|0);
 var $incdec_ptr10=(($__st_0114+1)|0);
 var $cmp6=($incdec_ptr|0)==($__ke|0);
 if($cmp6){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0112=$__n_might_match_1;var $__n_does_match_0113=$__n_does_match_1;var $__st_0114=$incdec_ptr10;var $__ky_0115=$incdec_ptr;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $4=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i168=($4|0)==0;
 if($tobool_i_i_i168){var $9=0;label=25;break;}else{label=20;break;}
 case 20: 
 var $__ninp__i_i_i_i=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($5|0)==($6|0);
 if($cmp_i_i_i_i){label=21;break;}else{var $9=$4;label=25;break;}
 case 21: 
 var $7=$4;
 var $vtable_i_i_i_i=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i171=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=6;break; }
 case 22: 
 var $cmp_i7_i_i_i=($call_i_i_i_i171|0)==-1;
 if($cmp_i7_i_i_i){label=24;break;}else{label=23;break;}
 case 23: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $9=$_pre;label=25;break;
 case 24: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $9=0;label=25;break;
 case 25: 
 var $9;
 var $cmp_i_i_i=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($10|0)==0;
 if($tobool_i12_i_i){var $17=$9;var $16=0;label=31;break;}else{label=26;break;}
 case 26: 
 var $__ninp__i_i15_i_i=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($11|0)==($12|0);
 if($cmp_i_i17_i_i){label=27;break;}else{var $15=$10;label=30;break;}
 case 27: 
 var $13=$10;
 var $vtable_i_i19_i_i=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i172=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=6;break; }
 case 28: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i172|0)==-1;
 if($cmp_i7_i26_i_i){label=29;break;}else{var $15=$10;label=30;break;}
 case 29: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 var $15=0;label=30;break;
 case 30: 
 var $15;
 var $_pr=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $17=$_pr;var $16=$15;label=31;break;
 case 31: 
 var $16;
 var $17;
 var $cmp_i31_i_i=($16|0)==0;
 var $lnot_i=$cmp_i_i_i^$cmp_i31_i_i;
 var $cmp14=($__n_might_match_2|0)!=0;
 var $cmp14_=$lnot_i&$cmp14;
 if($cmp14_){label=32;break;}else{label=81;break;}
 case 32: 
 var $__ninp__i_i=(($17+12)|0);
 var $18=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($17+16)|0);
 var $19=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i177=($18|0)==($19|0);
 if($cmp_i_i177){label=33;break;}else{label=35;break;}
 case 33: 
 var $20=$17;
 var $vtable_i_i=HEAP32[(($20)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $21=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=6;break; }
 case 34: 
 var $extract_t=(($call_i_i179)&255);
 var $retval_i_i_0_off0=$extract_t;label=36;break;
 case 35: 
 var $22=HEAP8[($18)];
 var $retval_i_i_0_off0=$22;label=36;break;
 case 36: 
 var $retval_i_i_0_off0;
 if($__case_sensitive){var $__c_0=$retval_i_i_0_off0;label=38;break;}else{label=37;break;}
 case 37: 
 var $vtable_i=HEAP32[(($1)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $23=HEAP32[(($vfn_i)>>2)];
 var $call_i182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($__ct,$retval_i_i_0_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$call_i182;label=38;break; } else { label=6;break; }
 case 38: 
 var $__c_0;
 if($cmp6111){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa122=$__n_might_match_2;label=80;break;}else{label=39;break;}
 case 39: 
 var $add=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_386_us=$__n_might_match_2;var $__n_does_match_387_us=$__n_does_match_2;var $__st_188_us=$__status_0;var $__consume_0_off090_us=0;var $__ky22_091_us=$__kb;label=40;break;}else{var $__n_might_match_386=$__n_might_match_2;var $__n_does_match_387=$__n_does_match_2;var $__st_188=$__status_0;var $__consume_0_off090=0;var $__ky22_091=$__kb;label=53;break;}
 case 40: 
 var $__ky22_091_us;
 var $__consume_0_off090_us;
 var $__st_188_us;
 var $__n_does_match_387_us;
 var $__n_might_match_386_us;
 var $24=HEAP8[($__st_188_us)];
 var $cmp26_us=(($24<<24)>>24)==1;
 if($cmp26_us){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off090_us;var $__n_does_match_4_us=$__n_does_match_387_us;var $__n_might_match_4_us=$__n_might_match_386_us;label=51;break;}
 case 41: 
 var $__size__i_i_i_i_us=$__ky22_091_us;
 var $25=HEAP8[($__size__i_i_i_i_us)];
 var $and_i_i_i_i_us=$25&1;
 var $tobool_i_i_i_i_us=(($and_i_i_i_i_us<<24)>>24)==0;
 if($tobool_i_i_i_i_us){label=43;break;}else{label=42;break;}
 case 42: 
 var $__data__i21_i_i_i_us=(($__ky22_091_us+8)|0);
 var $26=HEAP32[(($__data__i21_i_i_i_us)>>2)];
 var $cond_i_i_i_us=$26;label=44;break;
 case 43: 
 var $__s_i_i_i_i_us=$__ky22_091_us;
 var $arrayidx_i_i_i_i_us=(($__s_i_i_i_i_us+1)|0);
 var $cond_i_i_i_us=$arrayidx_i_i_i_i_us;label=44;break;
 case 44: 
 var $cond_i_i_i_us;
 var $add_ptr_i_us=(($cond_i_i_i_us+$__indx_0)|0);
 var $27=HEAP8[($add_ptr_i_us)];
 var $cmp37_us=(($__c_0<<24)>>24)==(($27<<24)>>24);
 if($cmp37_us){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_188_us)]=0;
 var $dec46_us=((($__n_might_match_386_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off090_us;var $__n_does_match_4_us=$__n_does_match_387_us;var $__n_might_match_4_us=$dec46_us;label=51;break;
 case 46: 
 var $28=HEAP8[($__size__i_i_i_i_us)];
 var $conv_i_i210_us=($28&255);
 var $and_i_i_us=$conv_i_i210_us&1;
 var $tobool_i_i_us=($and_i_i_us|0)==0;
 if($tobool_i_i_us){label=48;break;}else{label=47;break;}
 case 47: 
 var $__size__i23_i_us=(($__ky22_091_us+4)|0);
 var $29=HEAP32[(($__size__i23_i_us)>>2)];
 var $cond_i_us=$29;label=49;break;
 case 48: 
 var $shr_i_i66_us=$conv_i_i210_us>>>1;
 var $cond_i_us=$shr_i_i66_us;label=49;break;
 case 49: 
 var $cond_i_us;
 var $cmp40_us=($cond_i_us|0)==($add|0);
 if($cmp40_us){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_387_us;var $__n_might_match_4_us=$__n_might_match_386_us;label=51;break;}
 case 50: 
 HEAP8[($__st_188_us)]=2;
 var $dec42_us=((($__n_might_match_386_us)-(1))|0);
 var $inc43_us=((($__n_does_match_387_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$inc43_us;var $__n_might_match_4_us=$dec42_us;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $incdec_ptr50_us=(($__ky22_091_us+12)|0);
 var $cmp24_us=($incdec_ptr50_us|0)==($__ke|0);
 if($cmp24_us){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $incdec_ptr51_us=(($__st_188_us+1)|0);
 var $__n_might_match_386_us=$__n_might_match_4_us;var $__n_does_match_387_us=$__n_does_match_4_us;var $__st_188_us=$incdec_ptr51_us;var $__consume_0_off090_us=$__consume_1_off0_us;var $__ky22_091_us=$incdec_ptr50_us;label=40;break;
 case 53: 
 var $__ky22_091;
 var $__consume_0_off090;
 var $__st_188;
 var $__n_does_match_387;
 var $__n_might_match_386;
 var $30=HEAP8[($__st_188)];
 var $cmp26=(($30<<24)>>24)==1;
 if($cmp26){label=54;break;}else{var $__consume_1_off0=$__consume_0_off090;var $__n_does_match_4=$__n_does_match_387;var $__n_might_match_4=$__n_might_match_386;label=65;break;}
 case 54: 
 var $__size__i_i_i_i=$__ky22_091;
 var $31=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$31&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=56;break;}else{label=55;break;}
 case 55: 
 var $__data__i21_i_i_i=(($__ky22_091+8)|0);
 var $32=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$32;label=57;break;
 case 56: 
 var $__s_i_i_i_i=$__ky22_091;
 var $arrayidx_i_i_i_i=(($__s_i_i_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;label=57;break;
 case 57: 
 var $cond_i_i_i;
 var $add_ptr_i=(($cond_i_i_i+$__indx_0)|0);
 var $33=HEAP8[($add_ptr_i)];
 var $vtable_i198=HEAP32[(($1)>>2)];
 var $vfn_i199=(($vtable_i198+12)|0);
 var $34=HEAP32[(($vfn_i199)>>2)];
 var $call_i200=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($__ct,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=5;break; }
 case 58: 
 var $cmp37=(($__c_0<<24)>>24)==(($call_i200<<24)>>24);
 if($cmp37){label=59;break;}else{label=64;break;}
 case 59: 
 var $35=HEAP8[($__size__i_i_i_i)];
 var $conv_i_i210=($35&255);
 var $and_i_i=$conv_i_i210&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=61;break;}else{label=60;break;}
 case 60: 
 var $__size__i23_i=(($__ky22_091+4)|0);
 var $36=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$36;label=62;break;
 case 61: 
 var $shr_i_i66=$conv_i_i210>>>1;
 var $cond_i=$shr_i_i66;label=62;break;
 case 62: 
 var $cond_i;
 var $cmp40=($cond_i|0)==($add|0);
 if($cmp40){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_387;var $__n_might_match_4=$__n_might_match_386;label=65;break;}
 case 63: 
 HEAP8[($__st_188)]=2;
 var $dec42=((($__n_might_match_386)-(1))|0);
 var $inc43=((($__n_does_match_387)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$inc43;var $__n_might_match_4=$dec42;label=65;break;
 case 64: 
 HEAP8[($__st_188)]=0;
 var $dec46=((($__n_might_match_386)-(1))|0);
 var $__consume_1_off0=$__consume_0_off090;var $__n_does_match_4=$__n_does_match_387;var $__n_might_match_4=$dec46;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $incdec_ptr50=(($__ky22_091+12)|0);
 var $cmp24=($incdec_ptr50|0)==($__ke|0);
 if($cmp24){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $incdec_ptr51=(($__st_188+1)|0);
 var $__n_might_match_386=$__n_might_match_4;var $__n_does_match_387=$__n_does_match_4;var $__st_188=$incdec_ptr51;var $__consume_0_off090=$__consume_1_off0;var $__ky22_091=$incdec_ptr50;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa122=$__n_might_match_3_lcssa;label=80;break;}
 case 68: 
 var $37=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i219=(($37+12)|0);
 var $38=HEAP32[(($__ninp__i_i219)>>2)];
 var $__einp__i_i220=(($37+16)|0);
 var $39=HEAP32[(($__einp__i_i220)>>2)];
 var $cmp_i_i221=($38|0)==($39|0);
 if($cmp_i_i221){label=69;break;}else{label=70;break;}
 case 69: 
 var $40=$37;
 var $vtable_i_i222=HEAP32[(($40)>>2)];
 var $vfn_i_i223=(($vtable_i_i222+40)|0);
 var $41=HEAP32[(($vfn_i_i223)>>2)];
 var $call_i_i229=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=6;break; }
 case 70: 
 var $incdec_ptr_i_i=(($38+1)|0);
 HEAP32[(($__ninp__i_i219)>>2)]=$incdec_ptr_i_i;
 label=71;break;
 case 71: 
 var $add57=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $cmp58_not=($add57>>>0)<2;
 var $brmerge=$cmp58_not|$cmp6111;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa122=$__n_might_match_3_lcssa;label=80;break;}else{label=72;break;}
 case 72: 
 var $add67=((($__indx_0)+(1))|0);
 var $__n_does_match_597=$__n_does_match_3_lcssa;var $__st_298=$__status_0;var $__ky60_099=$__kb;label=73;break;
 case 73: 
 var $__ky60_099;
 var $__st_298;
 var $__n_does_match_597;
 var $42=HEAP8[($__st_298)];
 var $cmp65=(($42<<24)>>24)==2;
 if($cmp65){label=74;break;}else{var $__n_does_match_6=$__n_does_match_597;label=79;break;}
 case 74: 
 var $__size__i_i247=$__ky60_099;
 var $43=HEAP8[($__size__i_i247)];
 var $conv_i_i248=($43&255);
 var $and_i_i249=$conv_i_i248&1;
 var $tobool_i_i250=($and_i_i249|0)==0;
 if($tobool_i_i250){label=76;break;}else{label=75;break;}
 case 75: 
 var $__size__i23_i257=(($__ky60_099+4)|0);
 var $44=HEAP32[(($__size__i23_i257)>>2)];
 var $cond_i269=$44;label=77;break;
 case 76: 
 var $shr_i_i26765=$conv_i_i248>>>1;
 var $cond_i269=$shr_i_i26765;label=77;break;
 case 77: 
 var $cond_i269;
 var $cmp68=($cond_i269|0)==($add67|0);
 if($cmp68){var $__n_does_match_6=$__n_does_match_597;label=79;break;}else{label=78;break;}
 case 78: 
 HEAP8[($__st_298)]=0;
 var $dec70=((($__n_does_match_597)-(1))|0);
 var $__n_does_match_6=$dec70;label=79;break;
 case 79: 
 var $__n_does_match_6;
 var $incdec_ptr73=(($__ky60_099+12)|0);
 var $incdec_ptr74=(($__st_298+1)|0);
 var $cmp62=($incdec_ptr73|0)==($__ke|0);
 if($cmp62){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa122=$__n_might_match_3_lcssa;label=80;break;}else{var $__n_does_match_597=$__n_does_match_6;var $__st_298=$incdec_ptr74;var $__ky60_099=$incdec_ptr73;label=73;break;}
 case 80: 
 var $__n_might_match_3_lcssa122;
 var $__n_does_match_7;
 var $inc79=((($__indx_0)+(1))|0);
 var $__indx_0=$inc79;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa122;label=19;break;
 case 81: 
 var $tobool_i_i_i290=($17|0)==0;
 if($tobool_i_i_i290){var $49=0;label=87;break;}else{label=82;break;}
 case 82: 
 var $__ninp__i_i_i_i293=(($17+12)|0);
 var $45=HEAP32[(($__ninp__i_i_i_i293)>>2)];
 var $__einp__i_i_i_i294=(($17+16)|0);
 var $46=HEAP32[(($__einp__i_i_i_i294)>>2)];
 var $cmp_i_i_i_i295=($45|0)==($46|0);
 if($cmp_i_i_i_i295){label=83;break;}else{var $49=$17;label=87;break;}
 case 83: 
 var $47=$17;
 var $vtable_i_i_i_i297=HEAP32[(($47)>>2)];
 var $vfn_i_i_i_i298=(($vtable_i_i_i_i297+36)|0);
 var $48=HEAP32[(($vfn_i_i_i_i298)>>2)];
 var $call_i_i_i_i335=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=7;break; }
 case 84: 
 var $cmp_i7_i_i_i303=($call_i_i_i_i335|0)==-1;
 if($cmp_i7_i_i_i303){label=86;break;}else{label=85;break;}
 case 85: 
 var $_pre121=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $49=$_pre121;label=87;break;
 case 86: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $49=0;label=87;break;
 case 87: 
 var $49;
 var $cmp_i_i_i308=($49|0)==0;
 if($cmp_i31_i_i){label=93;break;}else{label=88;break;}
 case 88: 
 var $__ninp__i_i15_i_i316=(($16+12)|0);
 var $50=HEAP32[(($__ninp__i_i15_i_i316)>>2)];
 var $__einp__i_i16_i_i317=(($16+16)|0);
 var $51=HEAP32[(($__einp__i_i16_i_i317)>>2)];
 var $cmp_i_i17_i_i318=($50|0)==($51|0);
 if($cmp_i_i17_i_i318){label=90;break;}else{label=89;break;}
 case 89: 
 if($cmp_i_i_i308){label=96;break;}else{label=95;break;}
 case 90: 
 var $52=$16;
 var $vtable_i_i19_i_i320=HEAP32[(($52)>>2)];
 var $vfn_i_i20_i_i321=(($vtable_i_i19_i_i320+36)|0);
 var $53=HEAP32[(($vfn_i_i20_i_i321)>>2)];
 var $call_i_i21_i_i337=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=7;break; }
 case 91: 
 var $cmp_i7_i26_i_i326=($call_i_i21_i_i337|0)==-1;
 if($cmp_i7_i26_i_i326){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=93;break;
 case 93: 
 if($cmp_i_i_i308){label=95;break;}else{label=96;break;}
 case 94: 
 var $cmp_i31_i_i331=($16|0)==0;
 var $cmp_i_i333tmp=$cmp_i_i_i308^$cmp_i31_i_i331;
 if($cmp_i_i333tmp){label=96;break;}else{label=95;break;}
 case 95: 
 var $54=HEAP32[(($__err)>>2)];
 var $or=$54|2;
 HEAP32[(($__err)>>2)]=$or;
 label=96;break;
 case 96: 
 if($cmp6111){label=100;break;}else{var $__kb_addr_077=$__kb;var $__st_378=$__status_0;label=97;break;}
 case 97: 
 var $__st_378;
 var $__kb_addr_077;
 var $55=HEAP8[($__st_378)];
 var $cmp89=(($55<<24)>>24)==2;
 if($cmp89){var $__kb_addr_075=$__kb_addr_077;label=101;break;}else{label=98;break;}
 case 98: 
 var $incdec_ptr93=(($__kb_addr_077+12)|0);
 var $cmp86=($incdec_ptr93|0)==($__ke|0);
 if($cmp86){label=100;break;}else{label=99;break;}
 case 99: 
 var $incdec_ptr94=(($__st_378+1)|0);
 var $__kb_addr_077=$incdec_ptr93;var $__st_378=$incdec_ptr94;label=97;break;
 case 100: 
 var $56=HEAP32[(($__err)>>2)];
 var $or98=$56|4;
 HEAP32[(($__err)>>2)]=$or98;
 var $__kb_addr_075=$__ke;label=101;break;
 case 101: 
 var $__kb_addr_075;
 var $tobool_i_i_i=($__stat_hold_sroa_0_1|0)==0;
 if($tobool_i_i_i){label=103;break;}else{label=102;break;}
 case 102: 
 _free($__stat_hold_sroa_0_1);
 label=103;break;
 case 103: 
 STACKTOP=sp;return $__kb_addr_075;
 case 104: 
 var $57$0;
 var $57$1;
 ___resumeException($57$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $call36$0=$call36$r;var $call36$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$call36$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$call36$1;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$call36;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(32);
 var $__grouping=(sp)+(40);
 var $__buf=(sp)+(56);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=35;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i375_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i375_pre;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i366_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i375_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i366_pre_phi=$__data__i21_i_i366_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i366_pre_phi;
 var $arrayidx_i_i_i375_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i323=(($__buf)|0);
 var $__size__i23_i233=(($__buf+4)|0);
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $9=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{var $9=$4;label=15;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=34;break; }
 case 13: 
 var $cmp_i7_i_i_i111=($call_i_i_i_i143|0)==-1;
 if($cmp_i7_i_i_i111){label=14;break;}else{var $9=$4;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $9=0;label=15;break;
 case 15: 
 var $9;
 var $cmp_i_i_i116=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($10|0)==0;
 if($tobool_i12_i_i120){label=21;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i124=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($11|0)==($12|0);
 if($cmp_i_i17_i_i126){label=18;break;}else{label=17;break;}
 case 17: 
 if($cmp_i_i_i116){var $15=$10;var $cmp_i31_i_i13927=0;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=0;label=45;break;}
 case 18: 
 var $13=$10;
 var $vtable_i_i19_i_i128=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i145=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=34;break; }
 case 19: 
 var $cmp_i7_i26_i_i134=($call_i_i21_i_i145|0)==-1;
 if($cmp_i7_i26_i_i134){label=20;break;}else{label=22;break;}
 case 20: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=21;break;
 case 21: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i13926=1;label=45;break;}else{var $15=0;var $cmp_i31_i_i13927=1;label=23;break;}
 case 22: 
 var $cmp_i31_i_i139=($10|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i31_i_i139;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i13927=$cmp_i31_i_i139;label=23;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i13926=$cmp_i31_i_i139;label=45;break;}
 case 23: 
 var $cmp_i31_i_i13927;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i158=($17&255);
 var $and_i_i159=$conv_i_i158&1;
 var $tobool_i_i160=($and_i_i159|0)==0;
 var $18=HEAP32[(($__size__i23_i233)>>2)];
 var $shr_i_i12=$conv_i_i158>>>1;
 var $cond_i164=($tobool_i_i160?$shr_i_i12:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i164|0);
 if($cmp){label=24;break;}else{var $__a_1=$__a_0;label=37;break;}
 case 24: 
 if($tobool_i_i160){label=26;break;}else{label=25;break;}
 case 25: 
 var $19=HEAP32[(($__size__i23_i233)>>2)];
 var $cond_i245=$19;var $cond_i20430=$19;label=27;break;
 case 26: 
 var $shr_i_i20214=$conv_i_i158>>>1;
 var $shr_i_i24315=$conv_i_i158>>>1;
 var $cond_i245=$shr_i_i24315;var $cond_i20430=$shr_i_i20214;label=27;break;
 case 27: 
 var $cond_i20430;
 var $cond_i245;
 var $mul=$cond_i245<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=34;break; }
 case 28: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i315=$20&1;
 var $tobool_i_i316=(($and_i_i315<<24)>>24)==0;
 if($tobool_i_i316){var $cond_i327=10;label=30;break;}else{label=29;break;}
 case 29: 
 var $21=HEAP32[(($__cap__i_i323)>>2)];
 var $and_i11_i324=$21&-2;
 var $phitmp16=((($and_i11_i324)-(1))|0);
 var $cond_i327=$phitmp16;label=30;break;
 case 30: 
 var $cond_i327;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i327,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i358=$22&1;
 var $tobool_i_i_i359=(($and_i_i_i358<<24)>>24)==0;
 if($tobool_i_i_i359){var $cond_i_i377=$arrayidx_i_i_i375_pre_phi;label=33;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__data__i21_i_i366_pre_phi)>>2)];
 var $cond_i_i377=$23;label=33;break;
 case 33: 
 var $cond_i_i377;
 var $add_ptr=(($cond_i_i377+$cond_i20430)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i377;label=37;break;
 case 34: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=36;break;
 case 36: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 37: 
 var $__a_1;
 var $__ninp__i_i387=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i387)>>2)];
 var $__einp__i_i388=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i389=($24|0)==($25|0);
 if($cmp_i_i389){label=38;break;}else{label=40;break;}
 case 38: 
 var $26=$9;
 var $vtable_i_i390=HEAP32[(($26)>>2)];
 var $vfn_i_i391=(($vtable_i_i390+36)|0);
 var $27=HEAP32[(($vfn_i_i391)>>2)];
 var $call_i_i397=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 var $extract_t=(($call_i_i397)&255);
 var $retval_i_i381_0_off0=$extract_t;label=41;break;
 case 40: 
 var $28=HEAP8[($24)];
 var $retval_i_i381_0_off0=$28;label=41;break;
 case 41: 
 var $retval_i_i381_0_off0;
 var $call21=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i381_0_off0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i13926=$cmp_i31_i_i13927;label=45;break;}
 case 42: 
 var $29=HEAP32[(($__ninp__i_i387)>>2)];
 var $30=HEAP32[(($__einp__i_i388)>>2)];
 var $cmp_i_i292=($29|0)==($30|0);
 if($cmp_i_i292){label=43;break;}else{label=44;break;}
 case 43: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i294=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=10;break; } else { label=34;break; }
 case 44: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i387)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=10;break;
 case 45: 
 var $cmp_i31_i_i13926;
 var $33;
 var $__a_2;
 var $__size__i_i264=$__grouping;
 var $34=HEAP8[($__size__i_i264)];
 var $conv_i_i265=($34&255);
 var $and_i_i266=$conv_i_i265&1;
 var $tobool_i_i267=($and_i_i266|0)==0;
 if($tobool_i_i267){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i274=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i274)>>2)];
 var $cond_i286=$35;label=48;break;
 case 47: 
 var $shr_i_i28411=$conv_i_i265>>>1;
 var $cond_i286=$shr_i_i28411;label=48;break;
 case 48: 
 var $cond_i286;
 var $cmp27=($cond_i286|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $36=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$36;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $37=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($36+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($36)>>2)]=$37;
 label=51;break;
 case 51: 
 var $38=HEAP32[(($__a_end)>>2)];
 var $call36$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$38,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $call36$0=$call36$r;var $call36$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=35;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$call36$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$call36$1;
 var $39=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$39,$__err);
 if($cmp_i_i_i116){var $44=0;label=57;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $40=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $41=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($40|0)==($41|0);
 if($cmp_i_i_i_i){label=54;break;}else{var $44=$9;label=57;break;}
 case 54: 
 var $42=$9;
 var $vtable_i_i_i_i=HEAP32[(($42)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $43=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=35;break; }
 case 55: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=56;break;}else{var $44=$9;label=57;break;}
 case 56: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $44=0;label=57;break;
 case 57: 
 var $44;
 var $cmp_i_i_i50=($44|0)==0;
 if($cmp_i31_i_i13926){label=62;break;}else{label=58;break;}
 case 58: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $45=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $46=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($45|0)==($46|0);
 if($cmp_i_i17_i_i){label=59;break;}else{label=63;break;}
 case 59: 
 var $47=$33;
 var $vtable_i_i19_i_i=HEAP32[(($47)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $48=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=35;break; }
 case 60: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=62;break;
 case 62: 
 if($cmp_i_i_i50){label=64;break;}else{label=65;break;}
 case 63: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__err)>>2)];
 var $or=$49|2;
 HEAP32[(($__err)>>2)]=$or;
 label=65;break;
 case 65: 
 var $50=(($agg_result)|0);
 HEAP32[(($50)>>2)]=$44;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i376_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i376_pre;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i367_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i367_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i367_pre_phi;
 var $arrayidx_i_i_i376_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i120=(($__e)|0);
 var $__cap__i_i324=(($__buf)|0);
 var $__size__i23_i234=(($__buf+4)|0);
 var $2=HEAP8[($__decimal_point)];
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $9=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{var $9=$4;label=11;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $cmp_i7_i_i_i112=($call_i_i_i_i144|0)==-1;
 if($cmp_i7_i_i_i112){label=10;break;}else{var $9=$4;label=11;break;}
 case 10: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $9=0;label=11;break;
 case 11: 
 var $9;
 var $cmp_i_i_i117=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i120)>>2)];
 var $tobool_i12_i_i121=($10|0)==0;
 if($tobool_i12_i_i121){label=17;break;}else{label=12;break;}
 case 12: 
 var $__ninp__i_i15_i_i125=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i125)>>2)];
 var $__einp__i_i16_i_i126=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i126)>>2)];
 var $cmp_i_i17_i_i127=($11|0)==($12|0);
 if($cmp_i_i17_i_i127){label=14;break;}else{label=13;break;}
 case 13: 
 if($cmp_i_i_i117){var $15=$10;var $cmp_i31_i_i14025=0;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=0;label=41;break;}
 case 14: 
 var $13=$10;
 var $vtable_i_i19_i_i129=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i130=(($vtable_i_i19_i_i129+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i130)>>2)];
 var $call_i_i21_i_i146=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $cmp_i7_i26_i_i135=($call_i_i21_i_i146|0)==-1;
 if($cmp_i7_i26_i_i135){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=17;break;
 case 17: 
 if($cmp_i_i_i117){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i14024=1;label=41;break;}else{var $15=0;var $cmp_i31_i_i14025=1;label=19;break;}
 case 18: 
 var $cmp_i31_i_i140=($10|0)==0;
 var $lnot_i=$cmp_i_i_i117^$cmp_i31_i_i140;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i14025=$cmp_i31_i_i140;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=$cmp_i31_i_i140;label=41;break;}
 case 19: 
 var $cmp_i31_i_i14025;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i159=($17&255);
 var $and_i_i160=$conv_i_i159&1;
 var $tobool_i_i161=($and_i_i160|0)==0;
 var $18=HEAP32[(($__size__i23_i234)>>2)];
 var $shr_i_i10=$conv_i_i159>>>1;
 var $cond_i165=($tobool_i_i161?$shr_i_i10:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i165|0);
 if($cmp){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($tobool_i_i161){label=22;break;}else{label=21;break;}
 case 21: 
 var $19=HEAP32[(($__size__i23_i234)>>2)];
 var $cond_i246=$19;var $cond_i20528=$19;label=23;break;
 case 22: 
 var $shr_i_i20312=$conv_i_i159>>>1;
 var $shr_i_i24413=$conv_i_i159>>>1;
 var $cond_i246=$shr_i_i24413;var $cond_i20528=$shr_i_i20312;label=23;break;
 case 23: 
 var $cond_i20528;
 var $cond_i246;
 var $mul=$cond_i246<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i316=$20&1;
 var $tobool_i_i317=(($and_i_i316<<24)>>24)==0;
 if($tobool_i_i317){var $cond_i328=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $21=HEAP32[(($__cap__i_i324)>>2)];
 var $and_i11_i325=$21&-2;
 var $phitmp14=((($and_i11_i325)-(1))|0);
 var $cond_i328=$phitmp14;label=26;break;
 case 26: 
 var $cond_i328;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i328,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i359=$22&1;
 var $tobool_i_i_i360=(($and_i_i_i359<<24)>>24)==0;
 if($tobool_i_i_i360){var $cond_i_i378=$arrayidx_i_i_i376_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $23=HEAP32[(($__data__i21_i_i367_pre_phi)>>2)];
 var $cond_i_i378=$23;label=29;break;
 case 29: 
 var $cond_i_i378;
 var $add_ptr=(($cond_i_i378+$cond_i20528)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i378;label=33;break;
 case 30: 
 var $lpad_loopexit19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit19$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit19$1;var $lpad_phi$0=$lpad_loopexit19$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit20$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit20$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit20$1;var $lpad_phi$0=$lpad_nonloopexit20$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $__ninp__i_i388=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i388)>>2)];
 var $__einp__i_i389=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i390=($24|0)==($25|0);
 if($cmp_i_i390){label=34;break;}else{label=36;break;}
 case 34: 
 var $26=$9;
 var $vtable_i_i391=HEAP32[(($26)>>2)];
 var $vfn_i_i392=(($vtable_i_i391+36)|0);
 var $27=HEAP32[(($vfn_i_i392)>>2)];
 var $call_i_i398=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($call_i_i398)&255);
 var $retval_i_i382_0_off0=$extract_t;label=37;break;
 case 36: 
 var $28=HEAP8[($24)];
 var $retval_i_i382_0_off0=$28;label=37;break;
 case 37: 
 var $retval_i_i382_0_off0;
 var $call20=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval_i_i382_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i14024=$cmp_i31_i_i14025;label=41;break;}
 case 38: 
 var $29=HEAP32[(($__ninp__i_i388)>>2)];
 var $30=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i293=($29|0)==($30|0);
 if($cmp_i_i293){label=39;break;}else{label=40;break;}
 case 39: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i295=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=6;break; } else { label=30;break; }
 case 40: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i388)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=6;break;
 case 41: 
 var $cmp_i31_i_i14024;
 var $33;
 var $__a_2;
 var $__size__i_i265=$__grouping;
 var $34=HEAP8[($__size__i_i265)];
 var $conv_i_i266=($34&255);
 var $and_i_i267=$conv_i_i266&1;
 var $tobool_i_i268=($and_i_i267|0)==0;
 if($tobool_i_i268){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i275=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i275)>>2)];
 var $cond_i287=$35;label=44;break;
 case 43: 
 var $shr_i_i2859=$conv_i_i266>>>1;
 var $cond_i287=$shr_i_i2859;label=44;break;
 case 44: 
 var $cond_i287;
 var $cmp26=($cond_i287|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $36=HEAP8[($__in_units)];
 var $37=$36&1;
 var $tobool27=(($37<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$38;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=48;break;
 case 48: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$40,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$call37;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$41,$__err);
 if($cmp_i_i_i117){var $46=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=51;break;}else{var $46=$9;label=54;break;}
 case 51: 
 var $44=$9;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $cmp_i7_i_i_i=($call_i_i_i_i52|0)==-1;
 if($cmp_i7_i_i_i){label=53;break;}else{var $46=$9;label=54;break;}
 case 53: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $46=0;label=54;break;
 case 54: 
 var $46;
 var $cmp_i_i_i51=($46|0)==0;
 if($cmp_i31_i_i14024){label=59;break;}else{label=55;break;}
 case 55: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $47=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $48=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($47|0)==($48|0);
 if($cmp_i_i17_i_i){label=56;break;}else{label=60;break;}
 case 56: 
 var $49=$33;
 var $vtable_i_i19_i_i=HEAP32[(($49)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $50=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i53|0)==-1;
 if($cmp_i7_i26_i_i){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=59;break;
 case 59: 
 if($cmp_i_i_i51){label=61;break;}else{label=62;break;}
 case 60: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i31_i_i;
 if($cmp_i_itmp){label=62;break;}else{label=61;break;}
 case 61: 
 var $51=HEAP32[(($__err)>>2)];
 var $or=$51|2;
 HEAP32[(($__err)>>2)]=$or;
 label=62;break;
 case 62: 
 var $52=(($agg_result)|0);
 HEAP32[(($52)>>2)]=$46;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i376_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i376_pre;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i367_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i367_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i367_pre_phi;
 var $arrayidx_i_i_i376_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i120=(($__e)|0);
 var $__cap__i_i324=(($__buf)|0);
 var $__size__i23_i234=(($__buf+4)|0);
 var $2=HEAP8[($__decimal_point)];
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $9=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{var $9=$4;label=11;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $cmp_i7_i_i_i112=($call_i_i_i_i144|0)==-1;
 if($cmp_i7_i_i_i112){label=10;break;}else{var $9=$4;label=11;break;}
 case 10: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $9=0;label=11;break;
 case 11: 
 var $9;
 var $cmp_i_i_i117=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i120)>>2)];
 var $tobool_i12_i_i121=($10|0)==0;
 if($tobool_i12_i_i121){label=17;break;}else{label=12;break;}
 case 12: 
 var $__ninp__i_i15_i_i125=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i125)>>2)];
 var $__einp__i_i16_i_i126=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i126)>>2)];
 var $cmp_i_i17_i_i127=($11|0)==($12|0);
 if($cmp_i_i17_i_i127){label=14;break;}else{label=13;break;}
 case 13: 
 if($cmp_i_i_i117){var $15=$10;var $cmp_i31_i_i14025=0;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=0;label=41;break;}
 case 14: 
 var $13=$10;
 var $vtable_i_i19_i_i129=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i130=(($vtable_i_i19_i_i129+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i130)>>2)];
 var $call_i_i21_i_i146=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $cmp_i7_i26_i_i135=($call_i_i21_i_i146|0)==-1;
 if($cmp_i7_i26_i_i135){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=17;break;
 case 17: 
 if($cmp_i_i_i117){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i14024=1;label=41;break;}else{var $15=0;var $cmp_i31_i_i14025=1;label=19;break;}
 case 18: 
 var $cmp_i31_i_i140=($10|0)==0;
 var $lnot_i=$cmp_i_i_i117^$cmp_i31_i_i140;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i14025=$cmp_i31_i_i140;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=$cmp_i31_i_i140;label=41;break;}
 case 19: 
 var $cmp_i31_i_i14025;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i159=($17&255);
 var $and_i_i160=$conv_i_i159&1;
 var $tobool_i_i161=($and_i_i160|0)==0;
 var $18=HEAP32[(($__size__i23_i234)>>2)];
 var $shr_i_i10=$conv_i_i159>>>1;
 var $cond_i165=($tobool_i_i161?$shr_i_i10:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i165|0);
 if($cmp){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($tobool_i_i161){label=22;break;}else{label=21;break;}
 case 21: 
 var $19=HEAP32[(($__size__i23_i234)>>2)];
 var $cond_i246=$19;var $cond_i20528=$19;label=23;break;
 case 22: 
 var $shr_i_i20312=$conv_i_i159>>>1;
 var $shr_i_i24413=$conv_i_i159>>>1;
 var $cond_i246=$shr_i_i24413;var $cond_i20528=$shr_i_i20312;label=23;break;
 case 23: 
 var $cond_i20528;
 var $cond_i246;
 var $mul=$cond_i246<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i316=$20&1;
 var $tobool_i_i317=(($and_i_i316<<24)>>24)==0;
 if($tobool_i_i317){var $cond_i328=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $21=HEAP32[(($__cap__i_i324)>>2)];
 var $and_i11_i325=$21&-2;
 var $phitmp14=((($and_i11_i325)-(1))|0);
 var $cond_i328=$phitmp14;label=26;break;
 case 26: 
 var $cond_i328;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i328,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i359=$22&1;
 var $tobool_i_i_i360=(($and_i_i_i359<<24)>>24)==0;
 if($tobool_i_i_i360){var $cond_i_i378=$arrayidx_i_i_i376_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $23=HEAP32[(($__data__i21_i_i367_pre_phi)>>2)];
 var $cond_i_i378=$23;label=29;break;
 case 29: 
 var $cond_i_i378;
 var $add_ptr=(($cond_i_i378+$cond_i20528)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i378;label=33;break;
 case 30: 
 var $lpad_loopexit19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit19$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit19$1;var $lpad_phi$0=$lpad_loopexit19$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit20$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit20$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit20$1;var $lpad_phi$0=$lpad_nonloopexit20$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $__ninp__i_i388=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i388)>>2)];
 var $__einp__i_i389=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i390=($24|0)==($25|0);
 if($cmp_i_i390){label=34;break;}else{label=36;break;}
 case 34: 
 var $26=$9;
 var $vtable_i_i391=HEAP32[(($26)>>2)];
 var $vfn_i_i392=(($vtable_i_i391+36)|0);
 var $27=HEAP32[(($vfn_i_i392)>>2)];
 var $call_i_i398=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($call_i_i398)&255);
 var $retval_i_i382_0_off0=$extract_t;label=37;break;
 case 36: 
 var $28=HEAP8[($24)];
 var $retval_i_i382_0_off0=$28;label=37;break;
 case 37: 
 var $retval_i_i382_0_off0;
 var $call20=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval_i_i382_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i14024=$cmp_i31_i_i14025;label=41;break;}
 case 38: 
 var $29=HEAP32[(($__ninp__i_i388)>>2)];
 var $30=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i293=($29|0)==($30|0);
 if($cmp_i_i293){label=39;break;}else{label=40;break;}
 case 39: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i295=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=6;break; } else { label=30;break; }
 case 40: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i388)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=6;break;
 case 41: 
 var $cmp_i31_i_i14024;
 var $33;
 var $__a_2;
 var $__size__i_i265=$__grouping;
 var $34=HEAP8[($__size__i_i265)];
 var $conv_i_i266=($34&255);
 var $and_i_i267=$conv_i_i266&1;
 var $tobool_i_i268=($and_i_i267|0)==0;
 if($tobool_i_i268){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i275=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i275)>>2)];
 var $cond_i287=$35;label=44;break;
 case 43: 
 var $shr_i_i2859=$conv_i_i266>>>1;
 var $cond_i287=$shr_i_i2859;label=44;break;
 case 44: 
 var $cond_i287;
 var $cmp26=($cond_i287|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $36=HEAP8[($__in_units)];
 var $37=$36&1;
 var $tobool27=(($37<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$38;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=48;break;
 case 48: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$40,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$call37;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$41,$__err);
 if($cmp_i_i_i117){var $46=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=51;break;}else{var $46=$9;label=54;break;}
 case 51: 
 var $44=$9;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $cmp_i7_i_i_i=($call_i_i_i_i52|0)==-1;
 if($cmp_i7_i_i_i){label=53;break;}else{var $46=$9;label=54;break;}
 case 53: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $46=0;label=54;break;
 case 54: 
 var $46;
 var $cmp_i_i_i51=($46|0)==0;
 if($cmp_i31_i_i14024){label=59;break;}else{label=55;break;}
 case 55: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $47=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $48=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($47|0)==($48|0);
 if($cmp_i_i17_i_i){label=56;break;}else{label=60;break;}
 case 56: 
 var $49=$33;
 var $vtable_i_i19_i_i=HEAP32[(($49)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $50=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i53|0)==-1;
 if($cmp_i7_i26_i_i){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=59;break;
 case 59: 
 if($cmp_i_i_i51){label=61;break;}else{label=62;break;}
 case 60: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i31_i_i;
 if($cmp_i_itmp){label=62;break;}else{label=61;break;}
 case 61: 
 var $51=HEAP32[(($__err)>>2)];
 var $or=$51|2;
 HEAP32[(($__err)>>2)]=$or;
 label=62;break;
 case 62: 
 var $52=(($agg_result)|0);
 HEAP32[(($52)>>2)]=$46;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(32);
 var $__thousands_sep=(sp)+(40);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=31;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i376_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i376_pre;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i367_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i376_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i367_pre_phi=$__data__i21_i_i367_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i367_pre_phi;
 var $arrayidx_i_i_i376_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i120=(($__e)|0);
 var $__cap__i_i324=(($__buf)|0);
 var $__size__i23_i234=(($__buf+4)|0);
 var $2=HEAP8[($__decimal_point)];
 var $3=HEAP8[($__thousands_sep)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $9=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{var $9=$4;label=11;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=30;break; }
 case 9: 
 var $cmp_i7_i_i_i112=($call_i_i_i_i144|0)==-1;
 if($cmp_i7_i_i_i112){label=10;break;}else{var $9=$4;label=11;break;}
 case 10: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $9=0;label=11;break;
 case 11: 
 var $9;
 var $cmp_i_i_i117=($9|0)==0;
 var $10=HEAP32[(($__sbuf__i11_i_i120)>>2)];
 var $tobool_i12_i_i121=($10|0)==0;
 if($tobool_i12_i_i121){label=17;break;}else{label=12;break;}
 case 12: 
 var $__ninp__i_i15_i_i125=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i125)>>2)];
 var $__einp__i_i16_i_i126=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i126)>>2)];
 var $cmp_i_i17_i_i127=($11|0)==($12|0);
 if($cmp_i_i17_i_i127){label=14;break;}else{label=13;break;}
 case 13: 
 if($cmp_i_i_i117){var $15=$10;var $cmp_i31_i_i14025=0;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=0;label=41;break;}
 case 14: 
 var $13=$10;
 var $vtable_i_i19_i_i129=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i130=(($vtable_i_i19_i_i129+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i130)>>2)];
 var $call_i_i21_i_i146=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=30;break; }
 case 15: 
 var $cmp_i7_i26_i_i135=($call_i_i21_i_i146|0)==-1;
 if($cmp_i7_i26_i_i135){label=16;break;}else{label=18;break;}
 case 16: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=17;break;
 case 17: 
 if($cmp_i_i_i117){var $__a_2=$__a_0;var $33=0;var $cmp_i31_i_i14024=1;label=41;break;}else{var $15=0;var $cmp_i31_i_i14025=1;label=19;break;}
 case 18: 
 var $cmp_i31_i_i140=($10|0)==0;
 var $lnot_i=$cmp_i_i_i117^$cmp_i31_i_i140;
 if($lnot_i){var $15=$10;var $cmp_i31_i_i14025=$cmp_i31_i_i140;label=19;break;}else{var $__a_2=$__a_0;var $33=$10;var $cmp_i31_i_i14024=$cmp_i31_i_i140;label=41;break;}
 case 19: 
 var $cmp_i31_i_i14025;
 var $15;
 var $16=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$16;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $17=HEAP8[($__size__i_i)];
 var $conv_i_i159=($17&255);
 var $and_i_i160=$conv_i_i159&1;
 var $tobool_i_i161=($and_i_i160|0)==0;
 var $18=HEAP32[(($__size__i23_i234)>>2)];
 var $shr_i_i10=$conv_i_i159>>>1;
 var $cond_i165=($tobool_i_i161?$shr_i_i10:$18);
 var $cmp=($sub_ptr_sub|0)==($cond_i165|0);
 if($cmp){label=20;break;}else{var $__a_1=$__a_0;label=33;break;}
 case 20: 
 if($tobool_i_i161){label=22;break;}else{label=21;break;}
 case 21: 
 var $19=HEAP32[(($__size__i23_i234)>>2)];
 var $cond_i246=$19;var $cond_i20528=$19;label=23;break;
 case 22: 
 var $shr_i_i20312=$conv_i_i159>>>1;
 var $shr_i_i24413=$conv_i_i159>>>1;
 var $cond_i246=$shr_i_i24413;var $cond_i20528=$shr_i_i20312;label=23;break;
 case 23: 
 var $cond_i20528;
 var $cond_i246;
 var $mul=$cond_i246<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=30;break; }
 case 24: 
 var $20=HEAP8[($__size__i_i)];
 var $and_i_i316=$20&1;
 var $tobool_i_i317=(($and_i_i316<<24)>>24)==0;
 if($tobool_i_i317){var $cond_i328=10;label=26;break;}else{label=25;break;}
 case 25: 
 var $21=HEAP32[(($__cap__i_i324)>>2)];
 var $and_i11_i325=$21&-2;
 var $phitmp14=((($and_i11_i325)-(1))|0);
 var $cond_i328=$phitmp14;label=26;break;
 case 26: 
 var $cond_i328;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i328,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 27: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i_i359=$22&1;
 var $tobool_i_i_i360=(($and_i_i_i359<<24)>>24)==0;
 if($tobool_i_i_i360){var $cond_i_i378=$arrayidx_i_i_i376_pre_phi;label=29;break;}else{label=28;break;}
 case 28: 
 var $23=HEAP32[(($__data__i21_i_i367_pre_phi)>>2)];
 var $cond_i_i378=$23;label=29;break;
 case 29: 
 var $cond_i_i378;
 var $add_ptr=(($cond_i_i378+$cond_i20528)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i378;label=33;break;
 case 30: 
 var $lpad_loopexit19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit19$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit19$1;var $lpad_phi$0=$lpad_loopexit19$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit20$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit20$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit20$1;var $lpad_phi$0=$lpad_nonloopexit20$0;label=32;break;
 case 32: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 33: 
 var $__a_1;
 var $__ninp__i_i388=(($9+12)|0);
 var $24=HEAP32[(($__ninp__i_i388)>>2)];
 var $__einp__i_i389=(($9+16)|0);
 var $25=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i390=($24|0)==($25|0);
 if($cmp_i_i390){label=34;break;}else{label=36;break;}
 case 34: 
 var $26=$9;
 var $vtable_i_i391=HEAP32[(($26)>>2)];
 var $vfn_i_i392=(($vtable_i_i391+36)|0);
 var $27=HEAP32[(($vfn_i_i392)>>2)];
 var $call_i_i398=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 var $extract_t=(($call_i_i398)&255);
 var $retval_i_i382_0_off0=$extract_t;label=37;break;
 case 36: 
 var $28=HEAP8[($24)];
 var $retval_i_i382_0_off0=$28;label=37;break;
 case 37: 
 var $retval_i_i382_0_off0;
 var $call20=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($retval_i_i382_0_off0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $33=$15;var $cmp_i31_i_i14024=$cmp_i31_i_i14025;label=41;break;}
 case 38: 
 var $29=HEAP32[(($__ninp__i_i388)>>2)];
 var $30=HEAP32[(($__einp__i_i389)>>2)];
 var $cmp_i_i293=($29|0)==($30|0);
 if($cmp_i_i293){label=39;break;}else{label=40;break;}
 case 39: 
 var $31=$9;
 var $vtable_i_i=HEAP32[(($31)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $32=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i295=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$9;label=6;break; } else { label=30;break; }
 case 40: 
 var $incdec_ptr_i_i=(($29+1)|0);
 HEAP32[(($__ninp__i_i388)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$9;label=6;break;
 case 41: 
 var $cmp_i31_i_i14024;
 var $33;
 var $__a_2;
 var $__size__i_i265=$__grouping;
 var $34=HEAP8[($__size__i_i265)];
 var $conv_i_i266=($34&255);
 var $and_i_i267=$conv_i_i266&1;
 var $tobool_i_i268=($and_i_i267|0)==0;
 if($tobool_i_i268){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i275=(($__grouping+4)|0);
 var $35=HEAP32[(($__size__i23_i275)>>2)];
 var $cond_i287=$35;label=44;break;
 case 43: 
 var $shr_i_i2859=$conv_i_i266>>>1;
 var $cond_i287=$shr_i_i2859;label=44;break;
 case 44: 
 var $cond_i287;
 var $cmp26=($cond_i287|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $36=HEAP8[($__in_units)];
 var $37=$36&1;
 var $tobool27=(($37<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$38;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=48;break;
 case 48: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$40,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=31;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$call37;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$41,$__err);
 if($cmp_i_i_i117){var $46=0;label=54;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($9+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($9+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=51;break;}else{var $46=$9;label=54;break;}
 case 51: 
 var $44=$9;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=31;break; }
 case 52: 
 var $cmp_i7_i_i_i=($call_i_i_i_i52|0)==-1;
 if($cmp_i7_i_i_i){label=53;break;}else{var $46=$9;label=54;break;}
 case 53: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $46=0;label=54;break;
 case 54: 
 var $46;
 var $cmp_i_i_i51=($46|0)==0;
 if($cmp_i31_i_i14024){label=59;break;}else{label=55;break;}
 case 55: 
 var $__ninp__i_i15_i_i=(($33+12)|0);
 var $47=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($33+16)|0);
 var $48=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($47|0)==($48|0);
 if($cmp_i_i17_i_i){label=56;break;}else{label=60;break;}
 case 56: 
 var $49=$33;
 var $vtable_i_i19_i_i=HEAP32[(($49)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $50=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=31;break; }
 case 57: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i53|0)==-1;
 if($cmp_i7_i26_i_i){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($__sbuf__i11_i_i120)>>2)]=0;
 label=59;break;
 case 59: 
 if($cmp_i_i_i51){label=61;break;}else{label=62;break;}
 case 60: 
 var $cmp_i31_i_i=($33|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i31_i_i;
 if($cmp_i_itmp){label=62;break;}else{label=61;break;}
 case 61: 
 var $51=HEAP32[(($__err)>>2)];
 var $or=$51|2;
 HEAP32[(($__err)>>2)]=$or;
 label=62;break;
 case 62: 
 var $52=(($agg_result)|0);
 HEAP32[(($52)>>2)]=$46;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__grouping32=$__grouping;
 var $ref_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping32)>>2)]=0; HEAP32[((($__grouping32)+(4))>>2)]=0; HEAP32[((($__grouping32)+(8))>>2)]=0;
 var $__size__i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i16=($2|0)==-1;
 if($cmp_i_i_i16){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=39;break; }
 case 4: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i18=($6|0)==0;
 if($tobool_i_i_i18){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=39;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 var $arraydecay=(($__atoms)|0);
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10170,$arraydecay) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=39;break; }
 case 9: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=(($11)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($12);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=41;break; }
 case 10: 
 var $13=HEAP8[($__size__i_i)];
 var $and_i_i_i=$13&1;
 var $tobool_i_i_i113=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i113){label=12;break;}else{label=11;break;}
 case 11: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $14=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i388_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$14;var $arrayidx_i_i_i388_pre_phi=$arrayidx_i_i_i388_pre;var $__data__i21_i_i379_pre_phi=$__data__i21_i_i;label=13;break;
 case 12: 
 var $arrayidx_i_i_i114=(($__s_i_i+1)|0);
 var $__data__i21_i_i379_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i114;var $arrayidx_i_i_i388_pre_phi=$arrayidx_i_i_i114;var $__data__i21_i_i379_pre_phi=$__data__i21_i_i379_pre;label=13;break;
 case 13: 
 var $__data__i21_i_i379_pre_phi;
 var $arrayidx_i_i_i388_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay11=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay11;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i133=(($__b)|0);
 var $__sbuf__i11_i_i155=(($__e)|0);
 var $__cap__i_i318=(($__buf)|0);
 var $__size__i23_i276=(($__buf+4)|0);
 var $_pre=HEAP32[(($__sbuf__i_i_i133)>>2)];
 var $__a_0=$cond_i_i;var $15=$_pre;label=14;break;
 case 14: 
 var $15;
 var $__a_0;
 var $tobool_i_i_i134=($15|0)==0;
 if($tobool_i_i_i134){var $20=0;label=19;break;}else{label=15;break;}
 case 15: 
 var $__ninp__i_i_i_i137=(($15+12)|0);
 var $16=HEAP32[(($__ninp__i_i_i_i137)>>2)];
 var $__einp__i_i_i_i138=(($15+16)|0);
 var $17=HEAP32[(($__einp__i_i_i_i138)>>2)];
 var $cmp_i_i_i_i139=($16|0)==($17|0);
 if($cmp_i_i_i_i139){label=16;break;}else{var $20=$15;label=19;break;}
 case 16: 
 var $18=$15;
 var $vtable_i_i_i_i141=HEAP32[(($18)>>2)];
 var $vfn_i_i_i_i142=(($vtable_i_i_i_i141+36)|0);
 var $19=HEAP32[(($vfn_i_i_i_i142)>>2)];
 var $call_i_i_i_i179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 17: 
 var $cmp_i7_i_i_i147=($call_i_i_i_i179|0)==-1;
 if($cmp_i7_i_i_i147){label=18;break;}else{var $20=$15;label=19;break;}
 case 18: 
 HEAP32[(($__sbuf__i_i_i133)>>2)]=0;
 var $20=0;label=19;break;
 case 19: 
 var $20;
 var $cmp_i_i_i152=($20|0)==0;
 var $21=HEAP32[(($__sbuf__i11_i_i155)>>2)];
 var $tobool_i12_i_i156=($21|0)==0;
 if($tobool_i12_i_i156){label=25;break;}else{label=20;break;}
 case 20: 
 var $__ninp__i_i15_i_i160=(($21+12)|0);
 var $22=HEAP32[(($__ninp__i_i15_i_i160)>>2)];
 var $__einp__i_i16_i_i161=(($21+16)|0);
 var $23=HEAP32[(($__einp__i_i16_i_i161)>>2)];
 var $cmp_i_i17_i_i162=($22|0)==($23|0);
 if($cmp_i_i17_i_i162){label=22;break;}else{label=21;break;}
 case 21: 
 if($cmp_i_i_i152){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 22: 
 var $24=$21;
 var $vtable_i_i19_i_i164=HEAP32[(($24)>>2)];
 var $vfn_i_i20_i_i165=(($vtable_i_i19_i_i164+36)|0);
 var $25=HEAP32[(($vfn_i_i20_i_i165)>>2)];
 var $call_i_i21_i_i181=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=40;break; }
 case 23: 
 var $cmp_i7_i26_i_i170=($call_i_i21_i_i181|0)==-1;
 if($cmp_i7_i26_i_i170){label=24;break;}else{label=26;break;}
 case 24: 
 HEAP32[(($__sbuf__i11_i_i155)>>2)]=0;
 label=25;break;
 case 25: 
 if($cmp_i_i_i152){var $__a_2=$__a_0;label=51;break;}else{label=27;break;}
 case 26: 
 var $cmp_i31_i_i175=($21|0)==0;
 var $lnot_i=$cmp_i_i_i152^$cmp_i31_i_i175;
 if($lnot_i){label=27;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 27: 
 var $26=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$26;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $27=HEAP8[($__size__i_i)];
 var $conv_i_i194=($27&255);
 var $and_i_i195=$conv_i_i194&1;
 var $tobool_i_i196=($and_i_i195|0)==0;
 var $28=HEAP32[(($__size__i23_i276)>>2)];
 var $shr_i_i11=$conv_i_i194>>>1;
 var $cond_i200=($tobool_i_i196?$shr_i_i11:$28);
 var $cmp=($sub_ptr_sub|0)==($cond_i200|0);
 if($cmp){label=28;break;}else{var $__a_1=$__a_0;label=43;break;}
 case 28: 
 if($tobool_i_i196){label=30;break;}else{label=29;break;}
 case 29: 
 var $29=HEAP32[(($__size__i23_i276)>>2)];
 var $cond_i288=$29;var $cond_i24036=$29;label=31;break;
 case 30: 
 var $shr_i_i23813=$conv_i_i194>>>1;
 var $shr_i_i28614=$conv_i_i194>>>1;
 var $cond_i288=$shr_i_i28614;var $cond_i24036=$shr_i_i23813;label=31;break;
 case 31: 
 var $cond_i24036;
 var $cond_i288;
 var $mul=$cond_i288<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=40;break; }
 case 32: 
 var $30=HEAP8[($__size__i_i)];
 var $and_i_i310=$30&1;
 var $tobool_i_i311=(($and_i_i310<<24)>>24)==0;
 if($tobool_i_i311){var $cond_i322=10;label=34;break;}else{label=33;break;}
 case 33: 
 var $31=HEAP32[(($__cap__i_i318)>>2)];
 var $and_i11_i319=$31&-2;
 var $phitmp15=((($and_i11_i319)-(1))|0);
 var $cond_i322=$phitmp15;label=34;break;
 case 34: 
 var $cond_i322;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i322,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=40;break; }
 case 35: 
 var $32=HEAP8[($__size__i_i)];
 var $and_i_i_i371=$32&1;
 var $tobool_i_i_i372=(($and_i_i_i371<<24)>>24)==0;
 if($tobool_i_i_i372){var $cond_i_i390=$arrayidx_i_i_i388_pre_phi;label=37;break;}else{label=36;break;}
 case 36: 
 var $33=HEAP32[(($__data__i21_i_i379_pre_phi)>>2)];
 var $cond_i_i390=$33;label=37;break;
 case 37: 
 var $cond_i_i390;
 var $add_ptr=(($cond_i_i390+$cond_i24036)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i390;label=43;break;
 case 38: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 var $36=$34$1;
 var $ehselector_slot_0=$36;var $exn_slot_0=$35;label=74;break;
 case 39: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1); var $37$1 = tempRet0;
 var $38=$37$0;
 var $39=$37$1;
 var $40=HEAP32[(($__locale__i)>>2)];
 var $41=(($40)|0);
 var $call_i23=__ZNSt3__114__shared_count16__release_sharedEv($41);
 var $ehselector_slot_0=$39;var $exn_slot_0=$38;label=74;break;
 case 40: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=42;break;
 case 42: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $42=$eh_lpad_body$0;
 var $43=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $ehselector_slot_0=$43;var $exn_slot_0=$42;label=74;break;
 case 43: 
 var $__a_1;
 var $__ninp__i_i332=(($20+12)|0);
 var $44=HEAP32[(($__ninp__i_i332)>>2)];
 var $__einp__i_i333=(($20+16)|0);
 var $45=HEAP32[(($__einp__i_i333)>>2)];
 var $cmp_i_i334=($44|0)==($45|0);
 if($cmp_i_i334){label=44;break;}else{label=46;break;}
 case 44: 
 var $46=$20;
 var $vtable_i_i335=HEAP32[(($46)>>2)];
 var $vfn_i_i336=(($vtable_i_i335+36)|0);
 var $47=HEAP32[(($vfn_i_i336)>>2)];
 var $call_i_i342=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=40;break; }
 case 45: 
 var $extract_t=(($call_i_i342)&255);
 var $retval_i_i326_0_off0=$extract_t;label=47;break;
 case 46: 
 var $48=HEAP8[($44)];
 var $retval_i_i326_0_off0=$48;label=47;break;
 case 47: 
 var $retval_i_i326_0_off0;
 var $call27=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($retval_i_i326_0_off0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$arraydecay11,$__g_end,$arraydecay);
 var $tobool=($call27|0)==0;
 if($tobool){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $49=HEAP32[(($__ninp__i_i332)>>2)];
 var $50=HEAP32[(($__einp__i_i333)>>2)];
 var $cmp_i_i246=($49|0)==($50|0);
 if($cmp_i_i246){label=49;break;}else{label=50;break;}
 case 49: 
 var $51=$20;
 var $vtable_i_i=HEAP32[(($51)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $52=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i248=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $15=$20;label=14;break; } else { label=40;break; }
 case 50: 
 var $incdec_ptr_i_i=(($49+1)|0);
 HEAP32[(($__ninp__i_i332)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $15=$20;label=14;break;
 case 51: 
 var $__a_2;
 var $arrayidx=(($__a_2+3)|0);
 HEAP8[($arrayidx)]=0;
 var $53=HEAP8[(276352)];
 var $guard_uninitialized_i=(($53<<24)>>24)==0;
 if($guard_uninitialized_i){label=52;break;}else{label=56;break;}
 case 52: 
 var $54=___cxa_guard_acquire(276352);
 var $tobool_i=($54|0)==0;
 if($tobool_i){label=56;break;}else{label=53;break;}
 case 53: 
 var $call_i24=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((12216)>>2)]=$call_i24;
 label=56;break;
 case 55: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $eh_lpad_body$1=$55$1;var $eh_lpad_body$0=$55$0;label=42;break;
 case 56: 
 var $56=HEAP32[((12216)>>2)];
 var $call35=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$56,1288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=41;break; }
 case 57: 
 var $cmp36=($call35|0)==1;
 if($cmp36){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $57=HEAP32[(($__sbuf__i_i_i133)>>2)];
 var $tobool_i_i_i=($57|0)==0;
 if($tobool_i_i_i){var $62=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $__ninp__i_i_i_i=(($57+12)|0);
 var $58=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($57+16)|0);
 var $59=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($58|0)==($59|0);
 if($cmp_i_i_i_i){label=61;break;}else{var $62=$57;label=64;break;}
 case 61: 
 var $60=$57;
 var $vtable_i_i_i_i=HEAP32[(($60)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $61=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=41;break; }
 case 62: 
 var $cmp_i7_i_i_i=($call_i_i_i_i51|0)==-1;
 if($cmp_i7_i_i_i){label=63;break;}else{var $62=$57;label=64;break;}
 case 63: 
 HEAP32[(($__sbuf__i_i_i133)>>2)]=0;
 var $62=0;label=64;break;
 case 64: 
 var $62;
 var $cmp_i_i_i50=($62|0)==0;
 var $63=HEAP32[(($__sbuf__i11_i_i155)>>2)];
 var $tobool_i12_i_i=($63|0)==0;
 if($tobool_i12_i_i){label=70;break;}else{label=65;break;}
 case 65: 
 var $__ninp__i_i15_i_i=(($63+12)|0);
 var $64=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($63+16)|0);
 var $65=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($64|0)==($65|0);
 if($cmp_i_i17_i_i){label=67;break;}else{label=66;break;}
 case 66: 
 if($cmp_i_i_i50){label=73;break;}else{label=72;break;}
 case 67: 
 var $66=$63;
 var $vtable_i_i19_i_i=HEAP32[(($66)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $67=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=41;break; }
 case 68: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i52|0)==-1;
 if($cmp_i7_i26_i_i){label=69;break;}else{label=71;break;}
 case 69: 
 HEAP32[(($__sbuf__i11_i_i155)>>2)]=0;
 label=70;break;
 case 70: 
 if($cmp_i_i_i50){label=72;break;}else{label=73;break;}
 case 71: 
 var $cmp_i31_i_i=($63|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i31_i_i;
 if($cmp_i_itmp){label=73;break;}else{label=72;break;}
 case 72: 
 var $68=HEAP32[(($__err)>>2)];
 var $or=$68|2;
 HEAP32[(($__err)>>2)]=$or;
 label=73;break;
 case 73: 
 var $69=(($agg_result)|0);
 HEAP32[(($69)>>2)]=$62;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 74: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val43$0=$lpad_val$0;
 var $lpad_val43$1=$ehselector_slot_0;
 ___resumeException($lpad_val43$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP32[(($__a_end)>>2)];
 var $cmp=($0|0)==($__a|0);
 if($cmp){label=2;break;}else{label=5;break;}
 case 2: 
 var $arrayidx=(($__atoms+24)|0);
 var $1=HEAP8[($arrayidx)];
 var $cmp2=(($1<<24)>>24)==(($__ct<<24)>>24);
 if($cmp2){label=4;break;}else{label=3;break;}
 case 3: 
 var $arrayidx4=(($__atoms+25)|0);
 var $2=HEAP8[($arrayidx4)];
 var $cmp6=(($2<<24)>>24)==(($__ct<<24)>>24);
 if($cmp6){label=4;break;}else{label=5;break;}
 case 4: 
 var $cond=($cmp2?43:45);
 var $incdec_ptr=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr;
 HEAP8[($__a)]=$cond;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=23;break;
 case 5: 
 var $__size__i_i=$__grouping;
 var $3=HEAP8[($__size__i_i)];
 var $conv_i_i=($3&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $__size__i23_i=(($__grouping+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$4;label=8;break;
 case 7: 
 var $shr_i_i31=$conv_i_i>>>1;
 var $cond_i=$shr_i_i31;label=8;break;
 case 8: 
 var $cond_i;
 var $cmp11=($cond_i|0)!=0;
 var $cmp15=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$cmp11&$cmp15;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $5=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast=$5;
 var $sub_ptr_rhs_cast=$__g;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp17=($sub_ptr_sub|0)<160;
 if($cmp17){label=10;break;}else{var $retval_0=0;label=23;break;}
 case 10: 
 var $6=HEAP32[(($__dc)>>2)];
 var $incdec_ptr19=(($5+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr19;
 HEAP32[(($5)>>2)]=$6;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=23;break;
 case 11: 
 var $add_ptr=(($__atoms+26)|0);
 var $__first_addr_i_0=$__atoms;label=12;break;
 case 12: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr;label=14;break;}else{label=13;break;}
 case 13: 
 var $7=HEAP8[($__first_addr_i_0)];
 var $cmp2_i=(($7<<24)>>24)==(($__ct<<24)>>24);
 var $incdec_ptr_i=(($__first_addr_i_0+1)|0);
 if($cmp2_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=14;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=12;break;}
 case 14: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast23=$__first_addr_i_0_lcssa;
 var $sub_ptr_rhs_cast24=$__atoms;
 var $sub_ptr_sub25=((($sub_ptr_lhs_cast23)-($sub_ptr_rhs_cast24))|0);
 var $cmp26=($sub_ptr_sub25|0)>23;
 if($cmp26){var $retval_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $cmp29=($sub_ptr_sub25|0)<($__base|0);
 if($cmp29){label=22;break;}else{var $retval_0=-1;label=23;break;}
 case 17: 
 var $cmp33=($sub_ptr_sub25|0)<22;
 if($cmp33){label=22;break;}else{label=18;break;}
 case 18: 
 if($cmp){var $retval_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $sub_ptr_lhs_cast38=$0;
 var $sub_ptr_rhs_cast39=$__a;
 var $sub_ptr_sub40=((($sub_ptr_lhs_cast38)-($sub_ptr_rhs_cast39))|0);
 var $cmp41=($sub_ptr_sub40|0)<3;
 if($cmp41){label=20;break;}else{var $retval_0=-1;label=23;break;}
 case 20: 
 var $arrayidx43=((($0)-(1))|0);
 var $8=HEAP8[($arrayidx43)];
 var $cmp45=(($8<<24)>>24)==48;
 if($cmp45){label=21;break;}else{var $retval_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $arrayidx47=((10144+$sub_ptr_sub25)|0);
 var $9=HEAP8[($arrayidx47)];
 var $10=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr48=(($10+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr48;
 HEAP8[($10)]=$9;
 var $retval_0=0;label=23;break;
 case 22: 
 var $arrayidx50=((10144+$sub_ptr_sub25)|0);
 var $11=HEAP8[($arrayidx50)];
 var $incdec_ptr51=(($0+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr51;
 HEAP8[($0)]=$11;
 var $12=HEAP32[(($__dc)>>2)];
 var $inc=((($12)+(1))|0);
 HEAP32[(($__dc)>>2)]=$inc;
 var $retval_0=0;label=23;break;
 case 23: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $arraydecay=(($__va)|0);
 var $arraydecay1=$__va;
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0;
 var $call=_uselocale($__l);
 var $call3=_vsscanf($__s,$__format,$arraydecay);
 var $tobool_i_i_i41=($call|0)==0;
 if($tobool_i_i_i41){label=4;break;}else{label=2;break;}
 case 2: 
 var $call6_i_i_i46=(function() { try { __THREW__ = 0; return _uselocale($call) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $call3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i12=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $ref_tmp=(sp)+(40);
 var $agg_tmp=(sp)+(48);
 var $agg_tmp2=(sp)+(56);
 var $ref_tmp4=(sp)+(64);
 var $ref_tmp6=(sp)+(72);
 var $__names=(sp)+(80);
 var $agg_tmp14=(sp)+(104);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and=$0&1;
 var $cmp=($and|0)==0;
 if($cmp){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $1=$this;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+16)|0);
 var $2=HEAP32[(($vfn)>>2)];
 var $3=(($__b)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp)|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($__e)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($agg_tmp2)|0);
 HEAP32[(($8)>>2)]=$7;
 FUNCTION_TABLE[$2]($ref_tmp,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__lv);
 var $9=(($ref_tmp)|0);
 var $10=HEAP32[(($9)>>2)];
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($__lv)>>2)];
 if(($11|0)==0){ label=3;break;}else if(($11|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $12=(($agg_result)|0);
 HEAP32[(($12)>>2)]=$10;
 label=28;break;
 case 7: 
 __ZNKSt3__18ios_base6getlocEv($ref_tmp4,$__iob);
 var $__locale__i=(($ref_tmp4)|0);
 var $13=HEAP32[(($__locale__i)>>2)];
 var $14=$__p_i_i_i;
 var $15=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($15|0)==-1;
 if($cmp_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$14,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=23;break; }
 case 9: 
 var $16=HEAP32[((13644)>>2)];
 var $sub_i_i=((($16)-(1))|0);
 var $__end__i_i_i_i=(($13+12)|0);
 var $17=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($13+8)|0);
 var $18=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$17;
 var $sub_ptr_rhs_cast_i_i_i_i=$18;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=10;break;}else{label=11;break;}
 case 10: 
 var $arrayidx_i_i_i_i=(($18+($sub_i_i<<2))|0);
 var $19=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($19|0)==0;
 if($tobool_i_i_i){label=11;break;}else{label=13;break;}
 case 11: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $20=$exception_i_i;
 __ZNSt8bad_castC2Ev($20);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=23;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $21=$19;
 var $22=HEAP32[(($__locale__i)>>2)];
 var $23=(($22)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($23);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp6,$__iob);
 var $__locale__i13=(($ref_tmp6)|0);
 var $24=HEAP32[(($__locale__i13)>>2)];
 var $25=$__p_i_i_i12;
 var $26=HEAP32[((13256)>>2)];
 var $cmp_i_i_i14=($26|0)==-1;
 if($cmp_i_i_i14){label=15;break;}else{label=14;break;}
 case 14: 
 var $ref_tmp_i_sroa_0_0__idx_i_i15=(($__p_i_i_i12)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i15)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i16=(($__p_i_i_i12+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i16)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i17=(($__p_i_i_i12+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i17)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$25,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=24;break; }
 case 15: 
 var $27=HEAP32[((13260)>>2)];
 var $sub_i_i19=((($27)-(1))|0);
 var $__end__i_i_i_i20=(($24+12)|0);
 var $28=HEAP32[(($__end__i_i_i_i20)>>2)];
 var $__begin__i_i_i_i21=(($24+8)|0);
 var $29=HEAP32[(($__begin__i_i_i_i21)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i22=$28;
 var $sub_ptr_rhs_cast_i_i_i_i23=$29;
 var $sub_ptr_sub_i_i_i_i24=((($sub_ptr_lhs_cast_i_i_i_i22)-($sub_ptr_rhs_cast_i_i_i_i23))|0);
 var $sub_ptr_div_i_i_i_i25=$sub_ptr_sub_i_i_i_i24>>2;
 var $cmp_i_i1_i26=($sub_ptr_div_i_i_i_i25>>>0)>($sub_i_i19>>>0);
 if($cmp_i_i1_i26){label=16;break;}else{label=17;break;}
 case 16: 
 var $arrayidx_i_i_i_i28=(($29+($sub_i_i19<<2))|0);
 var $30=HEAP32[(($arrayidx_i_i_i_i28)>>2)];
 var $tobool_i_i_i29=($30|0)==0;
 if($tobool_i_i_i29){label=17;break;}else{label=19;break;}
 case 17: 
 var $exception_i_i31=___cxa_allocate_exception(4);
 var $31=$exception_i_i31;
 __ZNSt8bad_castC2Ev($31);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i31,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=24;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $32=$30;
 var $33=HEAP32[(($__locale__i13)>>2)];
 var $34=(($33)|0);
 var $call_i37=__ZNSt3__114__shared_count16__release_sharedEv($34);
 var $arrayinit_begin=(($__names)|0);
 var $35=$30;
 var $vtable_i=HEAP32[(($35)>>2)];
 var $vfn_i=(($vtable_i+24)|0);
 var $36=HEAP32[(($vfn_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($arrayinit_begin,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { var $arrayinit_endOfInit_0=$arrayinit_begin;label=25;break; }
 case 20: 
 var $arrayinit_element=(($__names+12)|0);
 var $vtable_i40=HEAP32[(($35)>>2)];
 var $vfn_i41=(($vtable_i40+28)|0);
 var $37=HEAP32[(($vfn_i41)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($arrayinit_element,$32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { var $arrayinit_endOfInit_0=$arrayinit_element;label=25;break; }
 case 21: 
 var $38=(($__e)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($agg_tmp14)|0);
 HEAP32[(($40)>>2)]=$39;
 var $add_ptr=(($__names+24)|0);
 var $call18=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp14,$arrayinit_begin,$add_ptr,$21,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=27;break; }
 case 22: 
 var $cmp20=($call18|0)==($arrayinit_begin|0);
 var $frombool=($cmp20&1);
 HEAP8[($__v)]=$frombool;
 var $41=(($__b)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($agg_result)|0);
 HEAP32[(($43)>>2)]=$42;
 var $arraydestroy_element23=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy_element23);
 var $arraydestroy_element23_1=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy_element23_1);
 label=28;break;
 case 23: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1); var $44$1 = tempRet0;
 var $45=$44$0;
 var $46=$44$1;
 var $47=HEAP32[(($__locale__i)>>2)];
 var $48=(($47)|0);
 var $call_i39=__ZNSt3__114__shared_count16__release_sharedEv($48);
 var $exn_slot_0=$45;var $ehselector_slot_0=$46;label=29;break;
 case 24: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$0;
 var $51=$49$1;
 var $52=HEAP32[(($__locale__i13)>>2)];
 var $53=(($52)|0);
 var $call_i41=__ZNSt3__114__shared_count16__release_sharedEv($53);
 var $exn_slot_0=$50;var $ehselector_slot_0=$51;label=29;break;
 case 25: 
 var $arrayinit_endOfInit_0;
 var $54$0 = ___cxa_find_matching_catch(-1, -1); var $54$1 = tempRet0;
 var $55=$54$0;
 var $56=$54$1;
 var $arraydestroy_isempty=($arrayinit_begin|0)==($arrayinit_endOfInit_0|0);
 if($arraydestroy_isempty){var $exn_slot_0=$55;var $ehselector_slot_0=$56;label=29;break;}else{var $arraydestroy_elementPast=$arrayinit_endOfInit_0;label=26;break;}
 case 26: 
 var $arraydestroy_elementPast;
 var $arraydestroy_element=((($arraydestroy_elementPast)-(12))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy_element);
 var $arraydestroy_done=($arraydestroy_element|0)==($arrayinit_begin|0);
 if($arraydestroy_done){var $exn_slot_0=$55;var $ehselector_slot_0=$56;label=29;break;}else{var $arraydestroy_elementPast=$arraydestroy_element;label=26;break;}
 case 27: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $58=$57$0;
 var $arraydestroy_element29=(($__names+12)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy_element29);
 var $arraydestroy_element29_1=(($__names)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($arraydestroy_element29_1);
 var $59=$57$1;
 var $exn_slot_0=$58;var $ehselector_slot_0=$59;label=29;break;
 case 28: 
 STACKTOP=sp;return;
 case 29: 
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val32$0=$lpad_val$0;
 var $lpad_val32$1=$ehselector_slot_0;
 ___resumeException($lpad_val32$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $sub_ptr_lhs_cast_i_i=$__ke;
 var $sub_ptr_rhs_cast_i_i=$__kb;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $sub_ptr_div_i_i=(((($sub_ptr_sub_i_i|0))/(12))&-1);
 var $arraydecay=(($__statbuf)|0);
 var $cmp=($sub_ptr_div_i_i>>>0)>100;
 if($cmp){label=2;break;}else{var $__status_0=$arraydecay;var $__stat_hold_sroa_0_1=0;label=10;break;}
 case 2: 
 var $call1=_malloc($sub_ptr_div_i_i);
 var $cmp2=($call1|0)==0;
 if($cmp2){label=3;break;}else{var $__status_0=$call1;var $__stat_hold_sroa_0_1=$call1;label=10;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__status_0=0;var $__stat_hold_sroa_0_1=0;label=10;break; } else { label=4;break; }
 case 4: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1); var $0$1 = tempRet0;
 var $61$1=$0$1;var $61$0=$0$0;label=106;break;
 case 5: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=8;break;
 case 6: 
 var $lpad_loopexit95$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit95$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit95$1;var $lpad_phi$0=$lpad_loopexit95$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit96$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit96$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit96$1;var $lpad_phi$0=$lpad_nonloopexit96$0;label=8;break;
 case 8: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $tobool_i_i_i133=($__stat_hold_sroa_0_1|0)==0;
 if($tobool_i_i_i133){var $61$1=$lpad_phi$1;var $61$0=$lpad_phi$0;label=106;break;}else{label=9;break;}
 case 9: 
 _free($__stat_hold_sroa_0_1);
 var $61$1=$lpad_phi$1;var $61$0=$lpad_phi$0;label=106;break;
 case 10: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $cmp6105=($__kb|0)==($__ke|0);
 if($cmp6105){var $__n_might_match_0_lcssa=$sub_ptr_div_i_i;var $__n_does_match_0_lcssa=0;label=11;break;}else{var $__n_might_match_0106=$sub_ptr_div_i_i;var $__n_does_match_0107=0;var $__st_0108=$__status_0;var $__ky_0109=$__kb;label=12;break;}
 case 11: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $__sbuf__i_i_i=(($__b)|0);
 var $__sbuf__i11_i_i=(($__e)|0);
 var $1=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;label=19;break;
 case 12: 
 var $__ky_0109;
 var $__st_0108;
 var $__n_does_match_0107;
 var $__n_might_match_0106;
 var $__size__i_i_i=$__ky_0109;
 var $2=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($2&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i160=($and_i_i_i|0)==0;
 if($tobool_i_i_i160){label=14;break;}else{label=13;break;}
 case 13: 
 var $__size__i23_i_i=(($__ky_0109+4)|0);
 var $3=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$3;label=15;break;
 case 14: 
 var $shr_i_i_i65=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i65;label=15;break;
 case 15: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP8[($__st_0108)]=1;
 var $__n_does_match_1=$__n_does_match_0107;var $__n_might_match_1=$__n_might_match_0106;label=18;break;
 case 17: 
 HEAP8[($__st_0108)]=2;
 var $dec=((($__n_might_match_0106)-(1))|0);
 var $inc=((($__n_does_match_0107)+(1))|0);
 var $__n_does_match_1=$inc;var $__n_might_match_1=$dec;label=18;break;
 case 18: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $incdec_ptr=(($__ky_0109+12)|0);
 var $incdec_ptr10=(($__st_0108+1)|0);
 var $cmp6=($incdec_ptr|0)==($__ke|0);
 if($cmp6){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=11;break;}else{var $__n_might_match_0106=$__n_might_match_1;var $__n_does_match_0107=$__n_does_match_1;var $__st_0108=$incdec_ptr10;var $__ky_0109=$incdec_ptr;label=12;break;}
 case 19: 
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $4=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i166=($4|0)==0;
 if($tobool_i_i_i166){var $10=0;label=26;break;}else{label=20;break;}
 case 20: 
 var $__ninp__i_i_i_i=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($5|0)==($6|0);
 if($cmp_i_i_i_i){label=21;break;}else{label=22;break;}
 case 21: 
 var $7=$4;
 var $vtable_i_i_i_i=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i169=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i169;label=23;break; } else { label=6;break; }
 case 22: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i_0=$9;label=23;break;
 case 23: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $10=$_pre;label=26;break;
 case 25: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $10=0;label=26;break;
 case 26: 
 var $10;
 var $cmp_i_i_i=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($11|0)==0;
 if($tobool_i12_i_i){var $19=$10;var $18=0;label=33;break;}else{label=27;break;}
 case 27: 
 var $__ninp__i_i15_i_i=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($12|0)==($13|0);
 if($cmp_i_i17_i_i){label=28;break;}else{label=29;break;}
 case 28: 
 var $14=$11;
 var $vtable_i_i19_i_i=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i170=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i170;label=30;break; } else { label=6;break; }
 case 29: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i_0=$16;label=30;break;
 case 30: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=31;break;}else{var $17=$11;label=32;break;}
 case 31: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 var $17=0;label=32;break;
 case 32: 
 var $17;
 var $_pr=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $19=$_pr;var $18=$17;label=33;break;
 case 33: 
 var $18;
 var $19;
 var $cmp_i30_i_i=($18|0)==0;
 var $lnot_i=$cmp_i_i_i^$cmp_i30_i_i;
 var $cmp14=($__n_might_match_2|0)!=0;
 var $cmp14_=$lnot_i&$cmp14;
 if($cmp14_){label=34;break;}else{label=82;break;}
 case 34: 
 var $__ninp__i_i=(($19+12)|0);
 var $20=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($19+16)|0);
 var $21=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i175=($20|0)==($21|0);
 if($cmp_i_i175){label=35;break;}else{label=36;break;}
 case 35: 
 var $22=$19;
 var $vtable_i_i=HEAP32[(($22)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $23=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i176=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_0=$call_i_i176;label=37;break; } else { label=6;break; }
 case 36: 
 var $24=HEAP32[(($20)>>2)];
 var $retval_i_i_0=$24;label=37;break;
 case 37: 
 var $retval_i_i_0;
 if($__case_sensitive){var $__c_0=$retval_i_i_0;label=39;break;}else{label=38;break;}
 case 38: 
 var $vtable_i=HEAP32[(($1)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $25=HEAP32[(($vfn_i)>>2)];
 var $call_i179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($__ct,$retval_i_i_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$call_i179;label=39;break; } else { label=6;break; }
 case 39: 
 var $__c_0;
 if($cmp6105){var $__n_does_match_7=$__n_does_match_2;var $__n_might_match_3_lcssa116=$__n_might_match_2;label=81;break;}else{label=40;break;}
 case 40: 
 var $add=((($__indx_0)+(1))|0);
 if($__case_sensitive){var $__n_might_match_380_us=$__n_might_match_2;var $__n_does_match_381_us=$__n_does_match_2;var $__st_182_us=$__status_0;var $__consume_0_off084_us=0;var $__ky22_085_us=$__kb;label=41;break;}else{var $__n_might_match_380=$__n_might_match_2;var $__n_does_match_381=$__n_does_match_2;var $__st_182=$__status_0;var $__consume_0_off084=0;var $__ky22_085=$__kb;label=54;break;}
 case 41: 
 var $__ky22_085_us;
 var $__consume_0_off084_us;
 var $__st_182_us;
 var $__n_does_match_381_us;
 var $__n_might_match_380_us;
 var $26=HEAP8[($__st_182_us)];
 var $cmp26_us=(($26<<24)>>24)==1;
 if($cmp26_us){label=42;break;}else{var $__consume_1_off0_us=$__consume_0_off084_us;var $__n_does_match_4_us=$__n_does_match_381_us;var $__n_might_match_4_us=$__n_might_match_380_us;label=52;break;}
 case 42: 
 var $__size__i_i_i_i_us=$__ky22_085_us;
 var $27=HEAP8[($__size__i_i_i_i_us)];
 var $and_i_i_i_i_us=$27&1;
 var $tobool_i_i_i_i_us=(($and_i_i_i_i_us<<24)>>24)==0;
 if($tobool_i_i_i_i_us){label=44;break;}else{label=43;break;}
 case 43: 
 var $__data__i21_i_i_i_us=(($__ky22_085_us+8)|0);
 var $28=HEAP32[(($__data__i21_i_i_i_us)>>2)];
 var $cond_i_i_i_us=$28;label=45;break;
 case 44: 
 var $__data__i_i_i_i_us=(($__ky22_085_us+4)|0);
 var $cond_i_i_i_us=$__data__i_i_i_i_us;label=45;break;
 case 45: 
 var $cond_i_i_i_us;
 var $add_ptr_i_us=(($cond_i_i_i_us+($__indx_0<<2))|0);
 var $29=HEAP32[(($add_ptr_i_us)>>2)];
 var $cmp35_us=($__c_0|0)==($29|0);
 if($cmp35_us){label=47;break;}else{label=46;break;}
 case 46: 
 HEAP8[($__st_182_us)]=0;
 var $dec44_us=((($__n_might_match_380_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off084_us;var $__n_does_match_4_us=$__n_does_match_381_us;var $__n_might_match_4_us=$dec44_us;label=52;break;
 case 47: 
 var $30=HEAP8[($__size__i_i_i_i_us)];
 var $conv_i_i207_us=($30&255);
 var $and_i_i_us=$conv_i_i207_us&1;
 var $tobool_i_i_us=($and_i_i_us|0)==0;
 if($tobool_i_i_us){label=49;break;}else{label=48;break;}
 case 48: 
 var $__size__i23_i_us=(($__ky22_085_us+4)|0);
 var $31=HEAP32[(($__size__i23_i_us)>>2)];
 var $cond_i_us=$31;label=50;break;
 case 49: 
 var $shr_i_i64_us=$conv_i_i207_us>>>1;
 var $cond_i_us=$shr_i_i64_us;label=50;break;
 case 50: 
 var $cond_i_us;
 var $cmp38_us=($cond_i_us|0)==($add|0);
 if($cmp38_us){label=51;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_381_us;var $__n_might_match_4_us=$__n_might_match_380_us;label=52;break;}
 case 51: 
 HEAP8[($__st_182_us)]=2;
 var $dec40_us=((($__n_might_match_380_us)-(1))|0);
 var $inc41_us=((($__n_does_match_381_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$inc41_us;var $__n_might_match_4_us=$dec40_us;label=52;break;
 case 52: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $incdec_ptr48_us=(($__ky22_085_us+12)|0);
 var $cmp24_us=($incdec_ptr48_us|0)==($__ke|0);
 if($cmp24_us){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=68;break;}else{label=53;break;}
 case 53: 
 var $incdec_ptr49_us=(($__st_182_us+1)|0);
 var $__n_might_match_380_us=$__n_might_match_4_us;var $__n_does_match_381_us=$__n_does_match_4_us;var $__st_182_us=$incdec_ptr49_us;var $__consume_0_off084_us=$__consume_1_off0_us;var $__ky22_085_us=$incdec_ptr48_us;label=41;break;
 case 54: 
 var $__ky22_085;
 var $__consume_0_off084;
 var $__st_182;
 var $__n_does_match_381;
 var $__n_might_match_380;
 var $32=HEAP8[($__st_182)];
 var $cmp26=(($32<<24)>>24)==1;
 if($cmp26){label=55;break;}else{var $__consume_1_off0=$__consume_0_off084;var $__n_does_match_4=$__n_does_match_381;var $__n_might_match_4=$__n_might_match_380;label=66;break;}
 case 55: 
 var $__size__i_i_i_i=$__ky22_085;
 var $33=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$33&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=57;break;}else{label=56;break;}
 case 56: 
 var $__data__i21_i_i_i=(($__ky22_085+8)|0);
 var $34=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$34;label=58;break;
 case 57: 
 var $__data__i_i_i_i=(($__ky22_085+4)|0);
 var $cond_i_i_i=$__data__i_i_i_i;label=58;break;
 case 58: 
 var $cond_i_i_i;
 var $add_ptr_i=(($cond_i_i_i+($__indx_0<<2))|0);
 var $35=HEAP32[(($add_ptr_i)>>2)];
 var $vtable_i195=HEAP32[(($1)>>2)];
 var $vfn_i196=(($vtable_i195+28)|0);
 var $36=HEAP32[(($vfn_i196)>>2)];
 var $call_i197=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($__ct,$35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=5;break; }
 case 59: 
 var $cmp35=($__c_0|0)==($call_i197|0);
 if($cmp35){label=60;break;}else{label=65;break;}
 case 60: 
 var $37=HEAP8[($__size__i_i_i_i)];
 var $conv_i_i207=($37&255);
 var $and_i_i=$conv_i_i207&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=62;break;}else{label=61;break;}
 case 61: 
 var $__size__i23_i=(($__ky22_085+4)|0);
 var $38=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$38;label=63;break;
 case 62: 
 var $shr_i_i64=$conv_i_i207>>>1;
 var $cond_i=$shr_i_i64;label=63;break;
 case 63: 
 var $cond_i;
 var $cmp38=($cond_i|0)==($add|0);
 if($cmp38){label=64;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_381;var $__n_might_match_4=$__n_might_match_380;label=66;break;}
 case 64: 
 HEAP8[($__st_182)]=2;
 var $dec40=((($__n_might_match_380)-(1))|0);
 var $inc41=((($__n_does_match_381)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$inc41;var $__n_might_match_4=$dec40;label=66;break;
 case 65: 
 HEAP8[($__st_182)]=0;
 var $dec44=((($__n_might_match_380)-(1))|0);
 var $__consume_1_off0=$__consume_0_off084;var $__n_does_match_4=$__n_does_match_381;var $__n_might_match_4=$dec44;label=66;break;
 case 66: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $incdec_ptr48=(($__ky22_085+12)|0);
 var $cmp24=($incdec_ptr48|0)==($__ke|0);
 if($cmp24){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=68;break;}else{label=67;break;}
 case 67: 
 var $incdec_ptr49=(($__st_182+1)|0);
 var $__n_might_match_380=$__n_might_match_4;var $__n_does_match_381=$__n_does_match_4;var $__st_182=$incdec_ptr49;var $__consume_0_off084=$__consume_1_off0;var $__ky22_085=$incdec_ptr48;label=54;break;
 case 68: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=69;break;}else{var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa116=$__n_might_match_3_lcssa;label=81;break;}
 case 69: 
 var $39=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i216=(($39+12)|0);
 var $40=HEAP32[(($__ninp__i_i216)>>2)];
 var $__einp__i_i217=(($39+16)|0);
 var $41=HEAP32[(($__einp__i_i217)>>2)];
 var $cmp_i_i218=($40|0)==($41|0);
 if($cmp_i_i218){label=70;break;}else{label=71;break;}
 case 70: 
 var $42=$39;
 var $vtable_i_i219=HEAP32[(($42)>>2)];
 var $vfn_i_i220=(($vtable_i_i219+40)|0);
 var $43=HEAP32[(($vfn_i_i220)>>2)];
 var $call_i_i225=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=6;break; }
 case 71: 
 var $incdec_ptr_i_i=(($40+4)|0);
 HEAP32[(($__ninp__i_i216)>>2)]=$incdec_ptr_i_i;
 label=72;break;
 case 72: 
 var $add55=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $cmp56_not=($add55>>>0)<2;
 var $brmerge=$cmp56_not|$cmp6105;
 if($brmerge){var $__n_does_match_7=$__n_does_match_3_lcssa;var $__n_might_match_3_lcssa116=$__n_might_match_3_lcssa;label=81;break;}else{label=73;break;}
 case 73: 
 var $add65=((($__indx_0)+(1))|0);
 var $__n_does_match_591=$__n_does_match_3_lcssa;var $__st_292=$__status_0;var $__ky58_093=$__kb;label=74;break;
 case 74: 
 var $__ky58_093;
 var $__st_292;
 var $__n_does_match_591;
 var $44=HEAP8[($__st_292)];
 var $cmp63=(($44<<24)>>24)==2;
 if($cmp63){label=75;break;}else{var $__n_does_match_6=$__n_does_match_591;label=80;break;}
 case 75: 
 var $__size__i_i243=$__ky58_093;
 var $45=HEAP8[($__size__i_i243)];
 var $conv_i_i244=($45&255);
 var $and_i_i245=$conv_i_i244&1;
 var $tobool_i_i246=($and_i_i245|0)==0;
 if($tobool_i_i246){label=77;break;}else{label=76;break;}
 case 76: 
 var $__size__i23_i253=(($__ky58_093+4)|0);
 var $46=HEAP32[(($__size__i23_i253)>>2)];
 var $cond_i265=$46;label=78;break;
 case 77: 
 var $shr_i_i26363=$conv_i_i244>>>1;
 var $cond_i265=$shr_i_i26363;label=78;break;
 case 78: 
 var $cond_i265;
 var $cmp66=($cond_i265|0)==($add65|0);
 if($cmp66){var $__n_does_match_6=$__n_does_match_591;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_292)]=0;
 var $dec68=((($__n_does_match_591)-(1))|0);
 var $__n_does_match_6=$dec68;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $incdec_ptr71=(($__ky58_093+12)|0);
 var $incdec_ptr72=(($__st_292+1)|0);
 var $cmp60=($incdec_ptr71|0)==($__ke|0);
 if($cmp60){var $__n_does_match_7=$__n_does_match_6;var $__n_might_match_3_lcssa116=$__n_might_match_3_lcssa;label=81;break;}else{var $__n_does_match_591=$__n_does_match_6;var $__st_292=$incdec_ptr72;var $__ky58_093=$incdec_ptr71;label=74;break;}
 case 81: 
 var $__n_might_match_3_lcssa116;
 var $__n_does_match_7;
 var $inc77=((($__indx_0)+(1))|0);
 var $__indx_0=$inc77;var $__n_does_match_2=$__n_does_match_7;var $__n_might_match_2=$__n_might_match_3_lcssa116;label=19;break;
 case 82: 
 var $tobool_i_i_i286=($19|0)==0;
 if($tobool_i_i_i286){var $52=1;label=89;break;}else{label=83;break;}
 case 83: 
 var $__ninp__i_i_i_i289=(($19+12)|0);
 var $47=HEAP32[(($__ninp__i_i_i_i289)>>2)];
 var $__einp__i_i_i_i290=(($19+16)|0);
 var $48=HEAP32[(($__einp__i_i_i_i290)>>2)];
 var $cmp_i_i_i_i291=($47|0)==($48|0);
 if($cmp_i_i_i_i291){label=84;break;}else{label=85;break;}
 case 84: 
 var $49=$19;
 var $vtable_i_i_i_i293=HEAP32[(($49)>>2)];
 var $vfn_i_i_i_i294=(($vtable_i_i_i_i293+36)|0);
 var $50=HEAP32[(($vfn_i_i_i_i294)>>2)];
 var $call_i_i_i_i329=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i276_0=$call_i_i_i_i329;label=86;break; } else { label=7;break; }
 case 85: 
 var $51=HEAP32[(($47)>>2)];
 var $retval_i_i_i_i276_0=$51;label=86;break;
 case 86: 
 var $retval_i_i_i_i276_0;
 var $cmp_i7_i_i_i298=($retval_i_i_i_i276_0|0)==-1;
 if($cmp_i7_i_i_i298){label=88;break;}else{label=87;break;}
 case 87: 
 var $_pre115=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp=($_pre115|0)==0;
 var $52=$phitmp;label=89;break;
 case 88: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $52=1;label=89;break;
 case 89: 
 var $52;
 if($cmp_i30_i_i){label=95;break;}else{label=90;break;}
 case 90: 
 var $__ninp__i_i15_i_i311=(($18+12)|0);
 var $53=HEAP32[(($__ninp__i_i15_i_i311)>>2)];
 var $__einp__i_i16_i_i312=(($18+16)|0);
 var $54=HEAP32[(($__einp__i_i16_i_i312)>>2)];
 var $cmp_i_i17_i_i313=($53|0)==($54|0);
 if($cmp_i_i17_i_i313){label=91;break;}else{label=92;break;}
 case 91: 
 var $55=$18;
 var $vtable_i_i19_i_i315=HEAP32[(($55)>>2)];
 var $vfn_i_i20_i_i316=(($vtable_i_i19_i_i315+36)|0);
 var $56=HEAP32[(($vfn_i_i20_i_i316)>>2)];
 var $call_i_i21_i_i331=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i270_0=$call_i_i21_i_i331;label=93;break; } else { label=7;break; }
 case 92: 
 var $57=HEAP32[(($53)>>2)];
 var $retval_i_i7_i_i270_0=$57;label=93;break;
 case 93: 
 var $retval_i_i7_i_i270_0;
 var $cmp_i7_i25_i_i320=($retval_i_i7_i_i270_0|0)==-1;
 if($cmp_i7_i25_i_i320){label=94;break;}else{label=96;break;}
 case 94: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=95;break;
 case 95: 
 if($52){label=97;break;}else{label=98;break;}
 case 96: 
 var $cmp_i30_i_i325=($18|0)==0;
 var $cmp_i_i327tmp=$52^$cmp_i30_i_i325;
 if($cmp_i_i327tmp){label=98;break;}else{label=97;break;}
 case 97: 
 var $58=HEAP32[(($__err)>>2)];
 var $or=$58|2;
 HEAP32[(($__err)>>2)]=$or;
 label=98;break;
 case 98: 
 if($cmp6105){label=102;break;}else{var $__kb_addr_071=$__kb;var $__st_372=$__status_0;label=99;break;}
 case 99: 
 var $__st_372;
 var $__kb_addr_071;
 var $59=HEAP8[($__st_372)];
 var $cmp87=(($59<<24)>>24)==2;
 if($cmp87){var $__kb_addr_069=$__kb_addr_071;label=103;break;}else{label=100;break;}
 case 100: 
 var $incdec_ptr91=(($__kb_addr_071+12)|0);
 var $cmp84=($incdec_ptr91|0)==($__ke|0);
 if($cmp84){label=102;break;}else{label=101;break;}
 case 101: 
 var $incdec_ptr92=(($__st_372+1)|0);
 var $__kb_addr_071=$incdec_ptr91;var $__st_372=$incdec_ptr92;label=99;break;
 case 102: 
 var $60=HEAP32[(($__err)>>2)];
 var $or96=$60|4;
 HEAP32[(($__err)>>2)]=$or96;
 var $__kb_addr_069=$__ke;label=103;break;
 case 103: 
 var $__kb_addr_069;
 var $tobool_i_i_i=($__stat_hold_sroa_0_1|0)==0;
 if($tobool_i_i_i){label=105;break;}else{label=104;break;}
 case 104: 
 _free($__stat_hold_sroa_0_1);
 label=105;break;
 case 105: 
 STACKTOP=sp;return $__kb_addr_069;
 case 106: 
 var $61$0;
 var $61$1;
 ___resumeException($61$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $call36$0=$call36$r;var $call36$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$call36$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$call36$1;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP16[(($__v)>>1)]=$call36;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 HEAP32[(($__v)>>2)]=$call36;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__thousands_sep=(sp)+(104);
 var $__grouping=(sp)+(112);
 var $__buf=(sp)+(128);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$0&74;
 if(($and_i|0)==8){ label=2;break;}else if(($and_i|0)==0){ label=3;break;}else if(($and_i|0)==64){ var $retval_0_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $retval_0_i=16;label=5;break;
 case 3: 
 var $retval_0_i=0;label=5;break;
 case 4: 
 var $retval_0_i=10;label=5;break;
 case 5: 
 var $retval_0_i;
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$arraydecay,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $1=HEAP8[($__size__i_i)];
 var $and_i_i_i=$1&1;
 var $tobool_i_i_i77=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i77){label=8;break;}else{label=7;break;}
 case 7: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $2=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i372_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$2;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i372_pre;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i;label=9;break;
 case 8: 
 var $arrayidx_i_i_i78=(($__s_i_i+1)|0);
 var $__data__i21_i_i363_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i78;var $arrayidx_i_i_i372_pre_phi=$arrayidx_i_i_i78;var $__data__i21_i_i363_pre_phi=$__data__i21_i_i363_pre;label=9;break;
 case 9: 
 var $__data__i21_i_i363_pre_phi;
 var $arrayidx_i_i_i372_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay5=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay5;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i97=(($__b)|0);
 var $__sbuf__i11_i_i118=(($__e)|0);
 var $__cap__i_i320=(($__buf)|0);
 var $__size__i23_i231=(($__buf+4)|0);
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i97)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=10;break;
 case 10: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i98=($4|0)==0;
 if($tobool_i_i_i98){var $10=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i_i_i101=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i101)>>2)];
 var $__einp__i_i_i_i102=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i102)>>2)];
 var $cmp_i_i_i_i103=($5|0)==($6|0);
 if($cmp_i_i_i_i103){label=12;break;}else{label=13;break;}
 case 12: 
 var $7=$4;
 var $vtable_i_i_i_i105=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i106=(($vtable_i_i_i_i105+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i106)>>2)];
 var $call_i_i_i_i141=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i88_0=$call_i_i_i_i141;label=14;break; } else { label=35;break; }
 case 13: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i88_0=$9;label=14;break;
 case 14: 
 var $retval_i_i_i_i88_0;
 var $cmp_i7_i_i_i110=($retval_i_i_i_i88_0|0)==-1;
 if($cmp_i7_i_i_i110){label=15;break;}else{var $10=$4;label=16;break;}
 case 15: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $10=0;label=16;break;
 case 16: 
 var $10;
 var $cmp_i_i_i115=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i118)>>2)];
 var $tobool_i12_i_i119=($11|0)==0;
 if($tobool_i12_i_i119){label=22;break;}else{label=17;break;}
 case 17: 
 var $__ninp__i_i15_i_i123=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i123)>>2)];
 var $__einp__i_i16_i_i124=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i124)>>2)];
 var $cmp_i_i17_i_i125=($12|0)==($13|0);
 if($cmp_i_i17_i_i125){label=18;break;}else{label=19;break;}
 case 18: 
 var $14=$11;
 var $vtable_i_i19_i_i127=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i128=(($vtable_i_i19_i_i127+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i128)>>2)];
 var $call_i_i21_i_i143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i82_0=$call_i_i21_i_i143;label=20;break; } else { label=35;break; }
 case 19: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i82_0=$16;label=20;break;
 case 20: 
 var $retval_i_i7_i_i82_0;
 var $cmp_i7_i25_i_i132=($retval_i_i7_i_i82_0|0)==-1;
 if($cmp_i7_i25_i_i132){label=21;break;}else{label=23;break;}
 case 21: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=22;break;
 case 22: 
 if($cmp_i_i_i115){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13721=1;label=45;break;}else{var $17=0;var $cmp_i30_i_i13722=1;label=24;break;}
 case 23: 
 var $cmp_i30_i_i137=($11|0)==0;
 var $lnot_i=$cmp_i_i_i115^$cmp_i30_i_i137;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13722=$cmp_i30_i_i137;label=24;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13721=$cmp_i30_i_i137;label=45;break;}
 case 24: 
 var $cmp_i30_i_i13722;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i156=($19&255);
 var $and_i_i157=$conv_i_i156&1;
 var $tobool_i_i158=($and_i_i157|0)==0;
 var $20=HEAP32[(($__size__i23_i231)>>2)];
 var $shr_i_i12=$conv_i_i156>>>1;
 var $cond_i162=($tobool_i_i158?$shr_i_i12:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i162|0);
 if($cmp){label=25;break;}else{var $__a_1=$__a_0;label=38;break;}
 case 25: 
 if($tobool_i_i158){label=27;break;}else{label=26;break;}
 case 26: 
 var $21=HEAP32[(($__size__i23_i231)>>2)];
 var $cond_i243=$21;var $cond_i20223=$21;label=28;break;
 case 27: 
 var $shr_i_i20013=$conv_i_i156>>>1;
 var $shr_i_i24114=$conv_i_i156>>>1;
 var $cond_i243=$shr_i_i24114;var $cond_i20223=$shr_i_i20013;label=28;break;
 case 28: 
 var $cond_i20223;
 var $cond_i243;
 var $mul=$cond_i243<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i312=$22&1;
 var $tobool_i_i313=(($and_i_i312<<24)>>24)==0;
 if($tobool_i_i313){var $cond_i324=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $23=HEAP32[(($__cap__i_i320)>>2)];
 var $and_i11_i321=$23&-2;
 var $phitmp15=((($and_i11_i321)-(1))|0);
 var $cond_i324=$phitmp15;label=31;break;
 case 31: 
 var $cond_i324;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i324,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i355=$24&1;
 var $tobool_i_i_i356=(($and_i_i_i355<<24)>>24)==0;
 if($tobool_i_i_i356){var $cond_i_i374=$arrayidx_i_i_i372_pre_phi;label=34;break;}else{label=33;break;}
 case 33: 
 var $25=HEAP32[(($__data__i21_i_i363_pre_phi)>>2)];
 var $cond_i_i374=$25;label=34;break;
 case 34: 
 var $cond_i_i374;
 var $add_ptr=(($cond_i_i374+$cond_i20223)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i374;label=38;break;
 case 35: 
 var $lpad_loopexit16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit16$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit16$1;var $lpad_phi$0=$lpad_loopexit16$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit17$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit17$1;var $lpad_phi$0=$lpad_nonloopexit17$0;label=37;break;
 case 37: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 38: 
 var $__a_1;
 var $__ninp__i_i384=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i384)>>2)];
 var $__einp__i_i385=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i386=($26|0)==($27|0);
 if($cmp_i_i386){label=39;break;}else{label=40;break;}
 case 39: 
 var $28=$10;
 var $vtable_i_i387=HEAP32[(($28)>>2)];
 var $vfn_i_i388=(($vtable_i_i387+36)|0);
 var $29=HEAP32[(($vfn_i_i388)>>2)];
 var $call_i_i393=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i378_0=$call_i_i393;label=41;break; } else { label=35;break; }
 case 40: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i378_0=$30;label=41;break;
 case 41: 
 var $retval_i_i378_0;
 var $call21=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i378_0,$retval_0_i,$__a_1,$__a_end,$__dc,$3,$__grouping,$arraydecay5,$__g_end,$arraydecay);
 var $tobool=($call21|0)==0;
 if($tobool){label=42;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13721=$cmp_i30_i_i13722;label=45;break;}
 case 42: 
 var $31=HEAP32[(($__ninp__i_i384)>>2)];
 var $32=HEAP32[(($__einp__i_i385)>>2)];
 var $cmp_i_i290=($31|0)==($32|0);
 if($cmp_i_i290){label=43;break;}else{label=44;break;}
 case 43: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i291=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=10;break; } else { label=35;break; }
 case 44: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i384)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=10;break;
 case 45: 
 var $cmp_i30_i_i13721;
 var $35;
 var $__a_2;
 var $__size__i_i262=$__grouping;
 var $36=HEAP8[($__size__i_i262)];
 var $conv_i_i263=($36&255);
 var $and_i_i264=$conv_i_i263&1;
 var $tobool_i_i265=($and_i_i264|0)==0;
 if($tobool_i_i265){label=47;break;}else{label=46;break;}
 case 46: 
 var $__size__i23_i272=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i272)>>2)];
 var $cond_i284=$37;label=48;break;
 case 47: 
 var $shr_i_i28211=$conv_i_i263>>>1;
 var $cond_i284=$shr_i_i28211;label=48;break;
 case 48: 
 var $cond_i284;
 var $cmp27=($cond_i284|0)==0;
 if($cmp27){label=51;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast29=$38;
 var $sub_ptr_rhs_cast30=$__g;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<160;
 if($cmp32){label=50;break;}else{label=51;break;}
 case 50: 
 var $39=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($38+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($38)>>2)]=$39;
 label=51;break;
 case 51: 
 var $40=HEAP32[(($__a_end)>>2)];
 var $call36$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2,$40,$__err,$retval_0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $call36$0=$call36$r;var $call36$1=tempRet0;if (!__THREW__) { label=52;break; } else { label=36;break; }
 case 52: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$call36$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$call36$1;
 var $41=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay5,$41,$__err);
 if($cmp_i_i_i115){var $47=0;label=58;break;}else{label=53;break;}
 case 53: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $42=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $43=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($42|0)==($43|0);
 if($cmp_i_i_i_i){label=54;break;}else{label=55;break;}
 case 54: 
 var $44=$10;
 var $vtable_i_i_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=56;break; } else { label=36;break; }
 case 55: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i_i_i_0=$46;label=56;break;
 case 56: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=57;break;}else{var $47=$10;label=58;break;}
 case 57: 
 HEAP32[(($__sbuf__i_i_i97)>>2)]=0;
 var $47=0;label=58;break;
 case 58: 
 var $47;
 var $cmp_i_i_i50=($47|0)==0;
 if($cmp_i30_i_i13721){label=64;break;}else{label=59;break;}
 case 59: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $48=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $49=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($48|0)==($49|0);
 if($cmp_i_i17_i_i){label=60;break;}else{label=61;break;}
 case 60: 
 var $50=$35;
 var $vtable_i_i19_i_i=HEAP32[(($50)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $51=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=62;break; } else { label=36;break; }
 case 61: 
 var $52=HEAP32[(($48)>>2)];
 var $retval_i_i7_i_i_0=$52;label=62;break;
 case 62: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=63;break;}else{label=65;break;}
 case 63: 
 HEAP32[(($__sbuf__i11_i_i118)>>2)]=0;
 label=64;break;
 case 64: 
 if($cmp_i_i_i50){label=66;break;}else{label=67;break;}
 case 65: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=67;break;}else{label=66;break;}
 case 66: 
 var $53=HEAP32[(($__err)>>2)];
 var $or=$53|2;
 HEAP32[(($__err)>>2)]=$or;
 label=67;break;
 case 67: 
 var $54=(($agg_result)|0);
 HEAP32[(($54)>>2)]=$47;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i373_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i373_pre;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i364_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i364_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i364_pre_phi;
 var $arrayidx_i_i_i373_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i321=(($__buf)|0);
 var $__size__i23_i232=(($__buf+4)|0);
 var $2=HEAP32[(($__decimal_point)>>2)];
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $10=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{label=9;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i142=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i89_0=$call_i_i_i_i142;label=10;break; } else { label=31;break; }
 case 9: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i89_0=$9;label=10;break;
 case 10: 
 var $retval_i_i_i_i89_0;
 var $cmp_i7_i_i_i111=($retval_i_i_i_i89_0|0)==-1;
 if($cmp_i7_i_i_i111){label=11;break;}else{var $10=$4;label=12;break;}
 case 11: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $10=0;label=12;break;
 case 12: 
 var $10;
 var $cmp_i_i_i116=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($11|0)==0;
 if($tobool_i12_i_i120){label=18;break;}else{label=13;break;}
 case 13: 
 var $__ninp__i_i15_i_i124=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($12|0)==($13|0);
 if($cmp_i_i17_i_i126){label=14;break;}else{label=15;break;}
 case 14: 
 var $14=$11;
 var $vtable_i_i19_i_i128=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i83_0=$call_i_i21_i_i144;label=16;break; } else { label=31;break; }
 case 15: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i83_0=$16;label=16;break;
 case 16: 
 var $retval_i_i7_i_i83_0;
 var $cmp_i7_i25_i_i133=($retval_i_i7_i_i83_0|0)==-1;
 if($cmp_i7_i25_i_i133){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=18;break;
 case 18: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13819=1;label=41;break;}else{var $17=0;var $cmp_i30_i_i13820=1;label=20;break;}
 case 19: 
 var $cmp_i30_i_i138=($11|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i30_i_i138;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13820=$cmp_i30_i_i138;label=20;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13819=$cmp_i30_i_i138;label=41;break;}
 case 20: 
 var $cmp_i30_i_i13820;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i157=($19&255);
 var $and_i_i158=$conv_i_i157&1;
 var $tobool_i_i159=($and_i_i158|0)==0;
 var $20=HEAP32[(($__size__i23_i232)>>2)];
 var $shr_i_i10=$conv_i_i157>>>1;
 var $cond_i163=($tobool_i_i159?$shr_i_i10:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i163|0);
 if($cmp){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($tobool_i_i159){label=23;break;}else{label=22;break;}
 case 22: 
 var $21=HEAP32[(($__size__i23_i232)>>2)];
 var $cond_i244=$21;var $cond_i20321=$21;label=24;break;
 case 23: 
 var $shr_i_i20111=$conv_i_i157>>>1;
 var $shr_i_i24212=$conv_i_i157>>>1;
 var $cond_i244=$shr_i_i24212;var $cond_i20321=$shr_i_i20111;label=24;break;
 case 24: 
 var $cond_i20321;
 var $cond_i244;
 var $mul=$cond_i244<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i313=$22&1;
 var $tobool_i_i314=(($and_i_i313<<24)>>24)==0;
 if($tobool_i_i314){var $cond_i325=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $23=HEAP32[(($__cap__i_i321)>>2)];
 var $and_i11_i322=$23&-2;
 var $phitmp13=((($and_i11_i322)-(1))|0);
 var $cond_i325=$phitmp13;label=27;break;
 case 27: 
 var $cond_i325;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i325,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i356=$24&1;
 var $tobool_i_i_i357=(($and_i_i_i356<<24)>>24)==0;
 if($tobool_i_i_i357){var $cond_i_i375=$arrayidx_i_i_i373_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $25=HEAP32[(($__data__i21_i_i364_pre_phi)>>2)];
 var $cond_i_i375=$25;label=30;break;
 case 30: 
 var $cond_i_i375;
 var $add_ptr=(($cond_i_i375+$cond_i20321)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i375;label=34;break;
 case 31: 
 var $lpad_loopexit14$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit14$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit14$1;var $lpad_phi$0=$lpad_loopexit14$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit15$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit15$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit15$1;var $lpad_phi$0=$lpad_nonloopexit15$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $__ninp__i_i385=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i385)>>2)];
 var $__einp__i_i386=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i387=($26|0)==($27|0);
 if($cmp_i_i387){label=35;break;}else{label=36;break;}
 case 35: 
 var $28=$10;
 var $vtable_i_i388=HEAP32[(($28)>>2)];
 var $vfn_i_i389=(($vtable_i_i388+36)|0);
 var $29=HEAP32[(($vfn_i_i389)>>2)];
 var $call_i_i394=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i379_0=$call_i_i394;label=37;break; } else { label=31;break; }
 case 36: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i379_0=$30;label=37;break;
 case 37: 
 var $retval_i_i379_0;
 var $call20=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval_i_i379_0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13819=$cmp_i30_i_i13820;label=41;break;}
 case 38: 
 var $31=HEAP32[(($__ninp__i_i385)>>2)];
 var $32=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i291=($31|0)==($32|0);
 if($cmp_i_i291){label=39;break;}else{label=40;break;}
 case 39: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=6;break; } else { label=31;break; }
 case 40: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i385)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=6;break;
 case 41: 
 var $cmp_i30_i_i13819;
 var $35;
 var $__a_2;
 var $__size__i_i263=$__grouping;
 var $36=HEAP8[($__size__i_i263)];
 var $conv_i_i264=($36&255);
 var $and_i_i265=$conv_i_i264&1;
 var $tobool_i_i266=($and_i_i265|0)==0;
 if($tobool_i_i266){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i273=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i273)>>2)];
 var $cond_i285=$37;label=44;break;
 case 43: 
 var $shr_i_i2839=$conv_i_i264>>>1;
 var $cond_i285=$shr_i_i2839;label=44;break;
 case 44: 
 var $cond_i285;
 var $cmp26=($cond_i285|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $38=HEAP8[($__in_units)];
 var $39=$38&1;
 var $tobool27=(($39<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $40=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$40;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $41=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($40+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($40)>>2)]=$41;
 label=48;break;
 case 48: 
 var $42=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2,$42,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF32[(($__v)>>2)]=$call37;
 var $43=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$43,$__err);
 if($cmp_i_i_i116){var $49=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $44=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $45=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($44|0)==($45|0);
 if($cmp_i_i_i_i){label=51;break;}else{label=52;break;}
 case 51: 
 var $46=$10;
 var $vtable_i_i_i_i=HEAP32[(($46)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $47=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i52;label=53;break; } else { label=32;break; }
 case 52: 
 var $48=HEAP32[(($44)>>2)];
 var $retval_i_i_i_i_0=$48;label=53;break;
 case 53: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=54;break;}else{var $49=$10;label=55;break;}
 case 54: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $49=0;label=55;break;
 case 55: 
 var $49;
 var $cmp_i_i_i51=($49|0)==0;
 if($cmp_i30_i_i13819){label=61;break;}else{label=56;break;}
 case 56: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $50=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $51=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($50|0)==($51|0);
 if($cmp_i_i17_i_i){label=57;break;}else{label=58;break;}
 case 57: 
 var $52=$35;
 var $vtable_i_i19_i_i=HEAP32[(($52)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $53=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i53;label=59;break; } else { label=32;break; }
 case 58: 
 var $54=HEAP32[(($50)>>2)];
 var $retval_i_i7_i_i_0=$54;label=59;break;
 case 59: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=61;break;
 case 61: 
 if($cmp_i_i_i51){label=63;break;}else{label=64;break;}
 case 62: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i30_i_i;
 if($cmp_i_itmp){label=64;break;}else{label=63;break;}
 case 63: 
 var $55=HEAP32[(($__err)>>2)];
 var $or=$55|2;
 HEAP32[(($__err)>>2)]=$or;
 label=64;break;
 case 64: 
 var $56=(($agg_result)|0);
 HEAP32[(($56)>>2)]=$49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i373_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i373_pre;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i364_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i364_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i364_pre_phi;
 var $arrayidx_i_i_i373_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i321=(($__buf)|0);
 var $__size__i23_i232=(($__buf+4)|0);
 var $2=HEAP32[(($__decimal_point)>>2)];
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $10=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{label=9;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i142=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i89_0=$call_i_i_i_i142;label=10;break; } else { label=31;break; }
 case 9: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i89_0=$9;label=10;break;
 case 10: 
 var $retval_i_i_i_i89_0;
 var $cmp_i7_i_i_i111=($retval_i_i_i_i89_0|0)==-1;
 if($cmp_i7_i_i_i111){label=11;break;}else{var $10=$4;label=12;break;}
 case 11: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $10=0;label=12;break;
 case 12: 
 var $10;
 var $cmp_i_i_i116=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($11|0)==0;
 if($tobool_i12_i_i120){label=18;break;}else{label=13;break;}
 case 13: 
 var $__ninp__i_i15_i_i124=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($12|0)==($13|0);
 if($cmp_i_i17_i_i126){label=14;break;}else{label=15;break;}
 case 14: 
 var $14=$11;
 var $vtable_i_i19_i_i128=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i83_0=$call_i_i21_i_i144;label=16;break; } else { label=31;break; }
 case 15: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i83_0=$16;label=16;break;
 case 16: 
 var $retval_i_i7_i_i83_0;
 var $cmp_i7_i25_i_i133=($retval_i_i7_i_i83_0|0)==-1;
 if($cmp_i7_i25_i_i133){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=18;break;
 case 18: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13819=1;label=41;break;}else{var $17=0;var $cmp_i30_i_i13820=1;label=20;break;}
 case 19: 
 var $cmp_i30_i_i138=($11|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i30_i_i138;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13820=$cmp_i30_i_i138;label=20;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13819=$cmp_i30_i_i138;label=41;break;}
 case 20: 
 var $cmp_i30_i_i13820;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i157=($19&255);
 var $and_i_i158=$conv_i_i157&1;
 var $tobool_i_i159=($and_i_i158|0)==0;
 var $20=HEAP32[(($__size__i23_i232)>>2)];
 var $shr_i_i10=$conv_i_i157>>>1;
 var $cond_i163=($tobool_i_i159?$shr_i_i10:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i163|0);
 if($cmp){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($tobool_i_i159){label=23;break;}else{label=22;break;}
 case 22: 
 var $21=HEAP32[(($__size__i23_i232)>>2)];
 var $cond_i244=$21;var $cond_i20321=$21;label=24;break;
 case 23: 
 var $shr_i_i20111=$conv_i_i157>>>1;
 var $shr_i_i24212=$conv_i_i157>>>1;
 var $cond_i244=$shr_i_i24212;var $cond_i20321=$shr_i_i20111;label=24;break;
 case 24: 
 var $cond_i20321;
 var $cond_i244;
 var $mul=$cond_i244<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i313=$22&1;
 var $tobool_i_i314=(($and_i_i313<<24)>>24)==0;
 if($tobool_i_i314){var $cond_i325=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $23=HEAP32[(($__cap__i_i321)>>2)];
 var $and_i11_i322=$23&-2;
 var $phitmp13=((($and_i11_i322)-(1))|0);
 var $cond_i325=$phitmp13;label=27;break;
 case 27: 
 var $cond_i325;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i325,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i356=$24&1;
 var $tobool_i_i_i357=(($and_i_i_i356<<24)>>24)==0;
 if($tobool_i_i_i357){var $cond_i_i375=$arrayidx_i_i_i373_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $25=HEAP32[(($__data__i21_i_i364_pre_phi)>>2)];
 var $cond_i_i375=$25;label=30;break;
 case 30: 
 var $cond_i_i375;
 var $add_ptr=(($cond_i_i375+$cond_i20321)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i375;label=34;break;
 case 31: 
 var $lpad_loopexit14$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit14$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit14$1;var $lpad_phi$0=$lpad_loopexit14$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit15$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit15$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit15$1;var $lpad_phi$0=$lpad_nonloopexit15$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $__ninp__i_i385=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i385)>>2)];
 var $__einp__i_i386=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i387=($26|0)==($27|0);
 if($cmp_i_i387){label=35;break;}else{label=36;break;}
 case 35: 
 var $28=$10;
 var $vtable_i_i388=HEAP32[(($28)>>2)];
 var $vfn_i_i389=(($vtable_i_i388+36)|0);
 var $29=HEAP32[(($vfn_i_i389)>>2)];
 var $call_i_i394=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i379_0=$call_i_i394;label=37;break; } else { label=31;break; }
 case 36: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i379_0=$30;label=37;break;
 case 37: 
 var $retval_i_i379_0;
 var $call20=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval_i_i379_0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13819=$cmp_i30_i_i13820;label=41;break;}
 case 38: 
 var $31=HEAP32[(($__ninp__i_i385)>>2)];
 var $32=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i291=($31|0)==($32|0);
 if($cmp_i_i291){label=39;break;}else{label=40;break;}
 case 39: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=6;break; } else { label=31;break; }
 case 40: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i385)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=6;break;
 case 41: 
 var $cmp_i30_i_i13819;
 var $35;
 var $__a_2;
 var $__size__i_i263=$__grouping;
 var $36=HEAP8[($__size__i_i263)];
 var $conv_i_i264=($36&255);
 var $and_i_i265=$conv_i_i264&1;
 var $tobool_i_i266=($and_i_i265|0)==0;
 if($tobool_i_i266){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i273=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i273)>>2)];
 var $cond_i285=$37;label=44;break;
 case 43: 
 var $shr_i_i2839=$conv_i_i264>>>1;
 var $cond_i285=$shr_i_i2839;label=44;break;
 case 44: 
 var $cond_i285;
 var $cmp26=($cond_i285|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $38=HEAP8[($__in_units)];
 var $39=$38&1;
 var $tobool27=(($39<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $40=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$40;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $41=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($40+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($40)>>2)]=$41;
 label=48;break;
 case 48: 
 var $42=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2,$42,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$call37;
 var $43=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$43,$__err);
 if($cmp_i_i_i116){var $49=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $44=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $45=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($44|0)==($45|0);
 if($cmp_i_i_i_i){label=51;break;}else{label=52;break;}
 case 51: 
 var $46=$10;
 var $vtable_i_i_i_i=HEAP32[(($46)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $47=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i52;label=53;break; } else { label=32;break; }
 case 52: 
 var $48=HEAP32[(($44)>>2)];
 var $retval_i_i_i_i_0=$48;label=53;break;
 case 53: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=54;break;}else{var $49=$10;label=55;break;}
 case 54: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $49=0;label=55;break;
 case 55: 
 var $49;
 var $cmp_i_i_i51=($49|0)==0;
 if($cmp_i30_i_i13819){label=61;break;}else{label=56;break;}
 case 56: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $50=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $51=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($50|0)==($51|0);
 if($cmp_i_i17_i_i){label=57;break;}else{label=58;break;}
 case 57: 
 var $52=$35;
 var $vtable_i_i19_i_i=HEAP32[(($52)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $53=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i53;label=59;break; } else { label=32;break; }
 case 58: 
 var $54=HEAP32[(($50)>>2)];
 var $retval_i_i7_i_i_0=$54;label=59;break;
 case 59: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=61;break;
 case 61: 
 if($cmp_i_i_i51){label=63;break;}else{label=64;break;}
 case 62: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i30_i_i;
 if($cmp_i_itmp){label=64;break;}else{label=63;break;}
 case 63: 
 var $55=HEAP32[(($__err)>>2)];
 var $or=$55|2;
 HEAP32[(($__err)>>2)]=$or;
 label=64;break;
 case 64: 
 var $56=(($agg_result)|0);
 HEAP32[(($56)>>2)]=$49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,0,$agg_tmp,$agg_tmp2,$__iob,$__err,$__v);
 STACKTOP=sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms=sp;
 var $__decimal_point=(sp)+(128);
 var $__thousands_sep=(sp)+(136);
 var $__grouping=(sp)+(144);
 var $__buf=(sp)+(160);
 var $__size__i_i=$__buf;
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__in_units=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__exp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__atoms)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$arraydecay,$__decimal_point,$__thousands_sep);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $0=HEAP8[($__size__i_i)];
 var $and_i_i_i=$0&1;
 var $tobool_i_i_i78=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i78){label=4;break;}else{label=3;break;}
 case 3: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $1=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i373_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$1;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i373_pre;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i;label=5;break;
 case 4: 
 var $arrayidx_i_i_i79=(($__s_i_i+1)|0);
 var $__data__i21_i_i364_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i79;var $arrayidx_i_i_i373_pre_phi=$arrayidx_i_i_i79;var $__data__i21_i_i364_pre_phi=$__data__i21_i_i364_pre;label=5;break;
 case 5: 
 var $__data__i21_i_i364_pre_phi;
 var $arrayidx_i_i_i373_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay4=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay4;
 HEAP32[(($__dc)>>2)]=0;
 HEAP8[($__in_units)]=1;
 HEAP8[($__exp)]=69;
 var $__sbuf__i_i_i98=(($__b)|0);
 var $__sbuf__i11_i_i119=(($__e)|0);
 var $__cap__i_i321=(($__buf)|0);
 var $__size__i23_i232=(($__buf+4)|0);
 var $2=HEAP32[(($__decimal_point)>>2)];
 var $3=HEAP32[(($__thousands_sep)>>2)];
 var $_pre=HEAP32[(($__sbuf__i_i_i98)>>2)];
 var $__a_0=$cond_i_i;var $4=$_pre;label=6;break;
 case 6: 
 var $4;
 var $__a_0;
 var $tobool_i_i_i99=($4|0)==0;
 if($tobool_i_i_i99){var $10=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i_i_i102=(($4+12)|0);
 var $5=HEAP32[(($__ninp__i_i_i_i102)>>2)];
 var $__einp__i_i_i_i103=(($4+16)|0);
 var $6=HEAP32[(($__einp__i_i_i_i103)>>2)];
 var $cmp_i_i_i_i104=($5|0)==($6|0);
 if($cmp_i_i_i_i104){label=8;break;}else{label=9;break;}
 case 8: 
 var $7=$4;
 var $vtable_i_i_i_i106=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i107=(($vtable_i_i_i_i106+36)|0);
 var $8=HEAP32[(($vfn_i_i_i_i107)>>2)];
 var $call_i_i_i_i142=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i89_0=$call_i_i_i_i142;label=10;break; } else { label=31;break; }
 case 9: 
 var $9=HEAP32[(($5)>>2)];
 var $retval_i_i_i_i89_0=$9;label=10;break;
 case 10: 
 var $retval_i_i_i_i89_0;
 var $cmp_i7_i_i_i111=($retval_i_i_i_i89_0|0)==-1;
 if($cmp_i7_i_i_i111){label=11;break;}else{var $10=$4;label=12;break;}
 case 11: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $10=0;label=12;break;
 case 12: 
 var $10;
 var $cmp_i_i_i116=($10|0)==0;
 var $11=HEAP32[(($__sbuf__i11_i_i119)>>2)];
 var $tobool_i12_i_i120=($11|0)==0;
 if($tobool_i12_i_i120){label=18;break;}else{label=13;break;}
 case 13: 
 var $__ninp__i_i15_i_i124=(($11+12)|0);
 var $12=HEAP32[(($__ninp__i_i15_i_i124)>>2)];
 var $__einp__i_i16_i_i125=(($11+16)|0);
 var $13=HEAP32[(($__einp__i_i16_i_i125)>>2)];
 var $cmp_i_i17_i_i126=($12|0)==($13|0);
 if($cmp_i_i17_i_i126){label=14;break;}else{label=15;break;}
 case 14: 
 var $14=$11;
 var $vtable_i_i19_i_i128=HEAP32[(($14)>>2)];
 var $vfn_i_i20_i_i129=(($vtable_i_i19_i_i128+36)|0);
 var $15=HEAP32[(($vfn_i_i20_i_i129)>>2)];
 var $call_i_i21_i_i144=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$15]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i83_0=$call_i_i21_i_i144;label=16;break; } else { label=31;break; }
 case 15: 
 var $16=HEAP32[(($12)>>2)];
 var $retval_i_i7_i_i83_0=$16;label=16;break;
 case 16: 
 var $retval_i_i7_i_i83_0;
 var $cmp_i7_i25_i_i133=($retval_i_i7_i_i83_0|0)==-1;
 if($cmp_i7_i25_i_i133){label=17;break;}else{label=19;break;}
 case 17: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=18;break;
 case 18: 
 if($cmp_i_i_i116){var $__a_2=$__a_0;var $35=0;var $cmp_i30_i_i13819=1;label=41;break;}else{var $17=0;var $cmp_i30_i_i13820=1;label=20;break;}
 case 19: 
 var $cmp_i30_i_i138=($11|0)==0;
 var $lnot_i=$cmp_i_i_i116^$cmp_i30_i_i138;
 if($lnot_i){var $17=$11;var $cmp_i30_i_i13820=$cmp_i30_i_i138;label=20;break;}else{var $__a_2=$__a_0;var $35=$11;var $cmp_i30_i_i13819=$cmp_i30_i_i138;label=41;break;}
 case 20: 
 var $cmp_i30_i_i13820;
 var $17;
 var $18=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$18;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $19=HEAP8[($__size__i_i)];
 var $conv_i_i157=($19&255);
 var $and_i_i158=$conv_i_i157&1;
 var $tobool_i_i159=($and_i_i158|0)==0;
 var $20=HEAP32[(($__size__i23_i232)>>2)];
 var $shr_i_i10=$conv_i_i157>>>1;
 var $cond_i163=($tobool_i_i159?$shr_i_i10:$20);
 var $cmp=($sub_ptr_sub|0)==($cond_i163|0);
 if($cmp){label=21;break;}else{var $__a_1=$__a_0;label=34;break;}
 case 21: 
 if($tobool_i_i159){label=23;break;}else{label=22;break;}
 case 22: 
 var $21=HEAP32[(($__size__i23_i232)>>2)];
 var $cond_i244=$21;var $cond_i20321=$21;label=24;break;
 case 23: 
 var $shr_i_i20111=$conv_i_i157>>>1;
 var $shr_i_i24212=$conv_i_i157>>>1;
 var $cond_i244=$shr_i_i24212;var $cond_i20321=$shr_i_i20111;label=24;break;
 case 24: 
 var $cond_i20321;
 var $cond_i244;
 var $mul=$cond_i244<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $22=HEAP8[($__size__i_i)];
 var $and_i_i313=$22&1;
 var $tobool_i_i314=(($and_i_i313<<24)>>24)==0;
 if($tobool_i_i314){var $cond_i325=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $23=HEAP32[(($__cap__i_i321)>>2)];
 var $and_i11_i322=$23&-2;
 var $phitmp13=((($and_i11_i322)-(1))|0);
 var $cond_i325=$phitmp13;label=27;break;
 case 27: 
 var $cond_i325;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i325,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $24=HEAP8[($__size__i_i)];
 var $and_i_i_i356=$24&1;
 var $tobool_i_i_i357=(($and_i_i_i356<<24)>>24)==0;
 if($tobool_i_i_i357){var $cond_i_i375=$arrayidx_i_i_i373_pre_phi;label=30;break;}else{label=29;break;}
 case 29: 
 var $25=HEAP32[(($__data__i21_i_i364_pre_phi)>>2)];
 var $cond_i_i375=$25;label=30;break;
 case 30: 
 var $cond_i_i375;
 var $add_ptr=(($cond_i_i375+$cond_i20321)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i375;label=34;break;
 case 31: 
 var $lpad_loopexit14$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit14$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit14$1;var $lpad_phi$0=$lpad_loopexit14$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit15$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit15$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit15$1;var $lpad_phi$0=$lpad_nonloopexit15$0;label=33;break;
 case 33: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 34: 
 var $__a_1;
 var $__ninp__i_i385=(($10+12)|0);
 var $26=HEAP32[(($__ninp__i_i385)>>2)];
 var $__einp__i_i386=(($10+16)|0);
 var $27=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i387=($26|0)==($27|0);
 if($cmp_i_i387){label=35;break;}else{label=36;break;}
 case 35: 
 var $28=$10;
 var $vtable_i_i388=HEAP32[(($28)>>2)];
 var $vfn_i_i389=(($vtable_i_i388+36)|0);
 var $29=HEAP32[(($vfn_i_i389)>>2)];
 var $call_i_i394=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i379_0=$call_i_i394;label=37;break; } else { label=31;break; }
 case 36: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i379_0=$30;label=37;break;
 case 37: 
 var $retval_i_i379_0;
 var $call20=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($retval_i_i379_0,$__in_units,$__exp,$__a_1,$__a_end,$2,$3,$__grouping,$arraydecay4,$__g_end,$__dc,$arraydecay);
 var $tobool=($call20|0)==0;
 if($tobool){label=38;break;}else{var $__a_2=$__a_1;var $35=$17;var $cmp_i30_i_i13819=$cmp_i30_i_i13820;label=41;break;}
 case 38: 
 var $31=HEAP32[(($__ninp__i_i385)>>2)];
 var $32=HEAP32[(($__einp__i_i386)>>2)];
 var $cmp_i_i291=($31|0)==($32|0);
 if($cmp_i_i291){label=39;break;}else{label=40;break;}
 case 39: 
 var $33=$10;
 var $vtable_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $34=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $4=$10;label=6;break; } else { label=31;break; }
 case 40: 
 var $incdec_ptr_i_i=(($31+4)|0);
 HEAP32[(($__ninp__i_i385)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $4=$10;label=6;break;
 case 41: 
 var $cmp_i30_i_i13819;
 var $35;
 var $__a_2;
 var $__size__i_i263=$__grouping;
 var $36=HEAP8[($__size__i_i263)];
 var $conv_i_i264=($36&255);
 var $and_i_i265=$conv_i_i264&1;
 var $tobool_i_i266=($and_i_i265|0)==0;
 if($tobool_i_i266){label=43;break;}else{label=42;break;}
 case 42: 
 var $__size__i23_i273=(($__grouping+4)|0);
 var $37=HEAP32[(($__size__i23_i273)>>2)];
 var $cond_i285=$37;label=44;break;
 case 43: 
 var $shr_i_i2839=$conv_i_i264>>>1;
 var $cond_i285=$shr_i_i2839;label=44;break;
 case 44: 
 var $cond_i285;
 var $cmp26=($cond_i285|0)==0;
 if($cmp26){label=48;break;}else{label=45;break;}
 case 45: 
 var $38=HEAP8[($__in_units)];
 var $39=$38&1;
 var $tobool27=(($39<<24)>>24)==0;
 if($tobool27){label=48;break;}else{label=46;break;}
 case 46: 
 var $40=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast30=$40;
 var $sub_ptr_rhs_cast31=$__g;
 var $sub_ptr_sub32=((($sub_ptr_lhs_cast30)-($sub_ptr_rhs_cast31))|0);
 var $cmp33=($sub_ptr_sub32|0)<160;
 if($cmp33){label=47;break;}else{label=48;break;}
 case 47: 
 var $41=HEAP32[(($__dc)>>2)];
 var $incdec_ptr=(($40+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr;
 HEAP32[(($40)>>2)]=$41;
 label=48;break;
 case 48: 
 var $42=HEAP32[(($__a_end)>>2)];
 var $call37=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2,$42,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=32;break; }
 case 49: 
 HEAPF64[(($__v)>>3)]=$call37;
 var $43=HEAP32[(($__g_end)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$arraydecay4,$43,$__err);
 if($cmp_i_i_i116){var $49=0;label=55;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i_i_i=(($10+12)|0);
 var $44=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($10+16)|0);
 var $45=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($44|0)==($45|0);
 if($cmp_i_i_i_i){label=51;break;}else{label=52;break;}
 case 51: 
 var $46=$10;
 var $vtable_i_i_i_i=HEAP32[(($46)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $47=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i52;label=53;break; } else { label=32;break; }
 case 52: 
 var $48=HEAP32[(($44)>>2)];
 var $retval_i_i_i_i_0=$48;label=53;break;
 case 53: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=54;break;}else{var $49=$10;label=55;break;}
 case 54: 
 HEAP32[(($__sbuf__i_i_i98)>>2)]=0;
 var $49=0;label=55;break;
 case 55: 
 var $49;
 var $cmp_i_i_i51=($49|0)==0;
 if($cmp_i30_i_i13819){label=61;break;}else{label=56;break;}
 case 56: 
 var $__ninp__i_i15_i_i=(($35+12)|0);
 var $50=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($35+16)|0);
 var $51=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($50|0)==($51|0);
 if($cmp_i_i17_i_i){label=57;break;}else{label=58;break;}
 case 57: 
 var $52=$35;
 var $vtable_i_i19_i_i=HEAP32[(($52)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $53=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i53;label=59;break; } else { label=32;break; }
 case 58: 
 var $54=HEAP32[(($50)>>2)];
 var $retval_i_i7_i_i_0=$54;label=59;break;
 case 59: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=60;break;}else{label=62;break;}
 case 60: 
 HEAP32[(($__sbuf__i11_i_i119)>>2)]=0;
 label=61;break;
 case 61: 
 if($cmp_i_i_i51){label=63;break;}else{label=64;break;}
 case 62: 
 var $cmp_i30_i_i=($35|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i51^$cmp_i30_i_i;
 if($cmp_i_itmp){label=64;break;}else{label=63;break;}
 case 63: 
 var $55=HEAP32[(($__err)>>2)];
 var $or=$55|2;
 HEAP32[(($__err)>>2)]=$or;
 label=64;break;
 case 64: 
 var $56=(($agg_result)|0);
 HEAP32[(($56)>>2)]=$49;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__grouping27=$__grouping;
 var $ref_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping27)>>2)]=0; HEAP32[((($__grouping27)+(4))>>2)]=0; HEAP32[((($__grouping27)+(8))>>2)]=0;
 var $__size__i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=39;break; }
 case 2: 
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i15=($2|0)==-1;
 if($cmp_i_i_i15){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i17=($6|0)==0;
 if($tobool_i_i_i17){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 var $arraydecay=(($__atoms)|0);
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10170,$arraydecay) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=(($11)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($12);
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 var $__s_i_i=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=42;break; }
 case 10: 
 var $13=HEAP8[($__size__i_i)];
 var $and_i_i_i=$13&1;
 var $tobool_i_i_i113=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i113){label=12;break;}else{label=11;break;}
 case 11: 
 var $__data__i21_i_i=(($__buf+8)|0);
 var $14=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i384_pre=(($__s_i_i+1)|0);
 var $cond_i_i=$14;var $arrayidx_i_i_i384_pre_phi=$arrayidx_i_i_i384_pre;var $__data__i21_i_i375_pre_phi=$__data__i21_i_i;label=13;break;
 case 12: 
 var $arrayidx_i_i_i114=(($__s_i_i+1)|0);
 var $__data__i21_i_i375_pre=(($__buf+8)|0);
 var $cond_i_i=$arrayidx_i_i_i114;var $arrayidx_i_i_i384_pre_phi=$arrayidx_i_i_i114;var $__data__i21_i_i375_pre_phi=$__data__i21_i_i375_pre;label=13;break;
 case 13: 
 var $__data__i21_i_i375_pre_phi;
 var $arrayidx_i_i_i384_pre_phi;
 var $cond_i_i;
 HEAP32[(($__a_end)>>2)]=$cond_i_i;
 var $arraydecay11=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$arraydecay11;
 HEAP32[(($__dc)>>2)]=0;
 var $__sbuf__i_i_i133=(($__b)|0);
 var $__sbuf__i11_i_i154=(($__e)|0);
 var $__cap__i_i315=(($__buf)|0);
 var $__size__i23_i273=(($__buf+4)|0);
 var $_pre=HEAP32[(($__sbuf__i_i_i133)>>2)];
 var $__a_0=$cond_i_i;var $15=$_pre;label=14;break;
 case 14: 
 var $15;
 var $__a_0;
 var $tobool_i_i_i134=($15|0)==0;
 if($tobool_i_i_i134){var $21=0;label=20;break;}else{label=15;break;}
 case 15: 
 var $__ninp__i_i_i_i137=(($15+12)|0);
 var $16=HEAP32[(($__ninp__i_i_i_i137)>>2)];
 var $__einp__i_i_i_i138=(($15+16)|0);
 var $17=HEAP32[(($__einp__i_i_i_i138)>>2)];
 var $cmp_i_i_i_i139=($16|0)==($17|0);
 if($cmp_i_i_i_i139){label=16;break;}else{label=17;break;}
 case 16: 
 var $18=$15;
 var $vtable_i_i_i_i141=HEAP32[(($18)>>2)];
 var $vfn_i_i_i_i142=(($vtable_i_i_i_i141+36)|0);
 var $19=HEAP32[(($vfn_i_i_i_i142)>>2)];
 var $call_i_i_i_i177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i124_0=$call_i_i_i_i177;label=18;break; } else { label=41;break; }
 case 17: 
 var $20=HEAP32[(($16)>>2)];
 var $retval_i_i_i_i124_0=$20;label=18;break;
 case 18: 
 var $retval_i_i_i_i124_0;
 var $cmp_i7_i_i_i146=($retval_i_i_i_i124_0|0)==-1;
 if($cmp_i7_i_i_i146){label=19;break;}else{var $21=$15;label=20;break;}
 case 19: 
 HEAP32[(($__sbuf__i_i_i133)>>2)]=0;
 var $21=0;label=20;break;
 case 20: 
 var $21;
 var $cmp_i_i_i151=($21|0)==0;
 var $22=HEAP32[(($__sbuf__i11_i_i154)>>2)];
 var $tobool_i12_i_i155=($22|0)==0;
 if($tobool_i12_i_i155){label=26;break;}else{label=21;break;}
 case 21: 
 var $__ninp__i_i15_i_i159=(($22+12)|0);
 var $23=HEAP32[(($__ninp__i_i15_i_i159)>>2)];
 var $__einp__i_i16_i_i160=(($22+16)|0);
 var $24=HEAP32[(($__einp__i_i16_i_i160)>>2)];
 var $cmp_i_i17_i_i161=($23|0)==($24|0);
 if($cmp_i_i17_i_i161){label=22;break;}else{label=23;break;}
 case 22: 
 var $25=$22;
 var $vtable_i_i19_i_i163=HEAP32[(($25)>>2)];
 var $vfn_i_i20_i_i164=(($vtable_i_i19_i_i163+36)|0);
 var $26=HEAP32[(($vfn_i_i20_i_i164)>>2)];
 var $call_i_i21_i_i179=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i118_0=$call_i_i21_i_i179;label=24;break; } else { label=41;break; }
 case 23: 
 var $27=HEAP32[(($23)>>2)];
 var $retval_i_i7_i_i118_0=$27;label=24;break;
 case 24: 
 var $retval_i_i7_i_i118_0;
 var $cmp_i7_i25_i_i168=($retval_i_i7_i_i118_0|0)==-1;
 if($cmp_i7_i25_i_i168){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($__sbuf__i11_i_i154)>>2)]=0;
 label=26;break;
 case 26: 
 if($cmp_i_i_i151){var $__a_2=$__a_0;label=51;break;}else{label=28;break;}
 case 27: 
 var $cmp_i30_i_i173=($22|0)==0;
 var $lnot_i=$cmp_i_i_i151^$cmp_i30_i_i173;
 if($lnot_i){label=28;break;}else{var $__a_2=$__a_0;label=51;break;}
 case 28: 
 var $28=HEAP32[(($__a_end)>>2)];
 var $sub_ptr_lhs_cast=$28;
 var $sub_ptr_rhs_cast=$__a_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $29=HEAP8[($__size__i_i)];
 var $conv_i_i192=($29&255);
 var $and_i_i193=$conv_i_i192&1;
 var $tobool_i_i194=($and_i_i193|0)==0;
 var $30=HEAP32[(($__size__i23_i273)>>2)];
 var $shr_i_i11=$conv_i_i192>>>1;
 var $cond_i198=($tobool_i_i194?$shr_i_i11:$30);
 var $cmp=($sub_ptr_sub|0)==($cond_i198|0);
 if($cmp){label=29;break;}else{var $__a_1=$__a_0;label=44;break;}
 case 29: 
 if($tobool_i_i194){label=31;break;}else{label=30;break;}
 case 30: 
 var $31=HEAP32[(($__size__i23_i273)>>2)];
 var $cond_i285=$31;var $cond_i23829=$31;label=32;break;
 case 31: 
 var $shr_i_i23612=$conv_i_i192>>>1;
 var $shr_i_i28313=$conv_i_i192>>>1;
 var $cond_i285=$shr_i_i28313;var $cond_i23829=$shr_i_i23612;label=32;break;
 case 32: 
 var $cond_i23829;
 var $cond_i285;
 var $mul=$cond_i285<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$mul,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=41;break; }
 case 33: 
 var $32=HEAP8[($__size__i_i)];
 var $and_i_i307=$32&1;
 var $tobool_i_i308=(($and_i_i307<<24)>>24)==0;
 if($tobool_i_i308){var $cond_i319=10;label=35;break;}else{label=34;break;}
 case 34: 
 var $33=HEAP32[(($__cap__i_i315)>>2)];
 var $and_i11_i316=$33&-2;
 var $phitmp14=((($and_i11_i316)-(1))|0);
 var $cond_i319=$phitmp14;label=35;break;
 case 35: 
 var $cond_i319;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$cond_i319,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=41;break; }
 case 36: 
 var $34=HEAP8[($__size__i_i)];
 var $and_i_i_i367=$34&1;
 var $tobool_i_i_i368=(($and_i_i_i367<<24)>>24)==0;
 if($tobool_i_i_i368){var $cond_i_i386=$arrayidx_i_i_i384_pre_phi;label=38;break;}else{label=37;break;}
 case 37: 
 var $35=HEAP32[(($__data__i21_i_i375_pre_phi)>>2)];
 var $cond_i_i386=$35;label=38;break;
 case 38: 
 var $cond_i_i386;
 var $add_ptr=(($cond_i_i386+$cond_i23829)|0);
 HEAP32[(($__a_end)>>2)]=$add_ptr;
 var $__a_1=$cond_i_i386;label=44;break;
 case 39: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=$36$1;
 var $ehselector_slot_0=$38;var $exn_slot_0=$37;label=75;break;
 case 40: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 var $40=$39$0;
 var $41=$39$1;
 var $42=HEAP32[(($__locale__i)>>2)];
 var $43=(($42)|0);
 var $call_i22=__ZNSt3__114__shared_count16__release_sharedEv($43);
 var $ehselector_slot_0=$41;var $exn_slot_0=$40;label=75;break;
 case 41: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=43;break;
 case 43: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $44=$eh_lpad_body$0;
 var $45=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 var $ehselector_slot_0=$45;var $exn_slot_0=$44;label=75;break;
 case 44: 
 var $__a_1;
 var $__ninp__i_i329=(($21+12)|0);
 var $46=HEAP32[(($__ninp__i_i329)>>2)];
 var $__einp__i_i330=(($21+16)|0);
 var $47=HEAP32[(($__einp__i_i330)>>2)];
 var $cmp_i_i331=($46|0)==($47|0);
 if($cmp_i_i331){label=45;break;}else{label=46;break;}
 case 45: 
 var $48=$21;
 var $vtable_i_i332=HEAP32[(($48)>>2)];
 var $vfn_i_i333=(($vtable_i_i332+36)|0);
 var $49=HEAP32[(($vfn_i_i333)>>2)];
 var $call_i_i338=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i323_0=$call_i_i338;label=47;break; } else { label=41;break; }
 case 46: 
 var $50=HEAP32[(($46)>>2)];
 var $retval_i_i323_0=$50;label=47;break;
 case 47: 
 var $retval_i_i323_0;
 var $call27=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($retval_i_i323_0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$arraydecay11,$__g_end,$arraydecay);
 var $tobool=($call27|0)==0;
 if($tobool){label=48;break;}else{var $__a_2=$__a_1;label=51;break;}
 case 48: 
 var $51=HEAP32[(($__ninp__i_i329)>>2)];
 var $52=HEAP32[(($__einp__i_i330)>>2)];
 var $cmp_i_i244=($51|0)==($52|0);
 if($cmp_i_i244){label=49;break;}else{label=50;break;}
 case 49: 
 var $53=$21;
 var $vtable_i_i=HEAP32[(($53)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $54=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i245=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $15=$21;label=14;break; } else { label=41;break; }
 case 50: 
 var $incdec_ptr_i_i=(($51+4)|0);
 HEAP32[(($__ninp__i_i329)>>2)]=$incdec_ptr_i_i;
 var $__a_0=$__a_1;var $15=$21;label=14;break;
 case 51: 
 var $__a_2;
 var $arrayidx=(($__a_2+3)|0);
 HEAP8[($arrayidx)]=0;
 var $55=HEAP8[(276352)];
 var $guard_uninitialized_i=(($55<<24)>>24)==0;
 if($guard_uninitialized_i){label=52;break;}else{label=56;break;}
 case 52: 
 var $56=___cxa_guard_acquire(276352);
 var $tobool_i=($56|0)==0;
 if($tobool_i){label=56;break;}else{label=53;break;}
 case 53: 
 var $call_i23=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=55;break; }
 case 54: 
 HEAP32[((12216)>>2)]=$call_i23;
 label=56;break;
 case 55: 
 var $57$0 = ___cxa_find_matching_catch(-1, -1); var $57$1 = tempRet0;
 var $eh_lpad_body$1=$57$1;var $eh_lpad_body$0=$57$0;label=43;break;
 case 56: 
 var $58=HEAP32[((12216)>>2)];
 var $call35=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$58,1288,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=57;break; } else { label=42;break; }
 case 57: 
 var $cmp36=($call35|0)==1;
 if($cmp36){label=59;break;}else{label=58;break;}
 case 58: 
 HEAP32[(($__err)>>2)]=4;
 label=59;break;
 case 59: 
 var $59=HEAP32[(($__sbuf__i_i_i133)>>2)];
 var $tobool_i_i_i=($59|0)==0;
 if($tobool_i_i_i){var $65=0;label=65;break;}else{label=60;break;}
 case 60: 
 var $__ninp__i_i_i_i=(($59+12)|0);
 var $60=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($59+16)|0);
 var $61=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($60|0)==($61|0);
 if($cmp_i_i_i_i){label=61;break;}else{label=62;break;}
 case 61: 
 var $62=$59;
 var $vtable_i_i_i_i=HEAP32[(($62)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $63=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i51=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i51;label=63;break; } else { label=42;break; }
 case 62: 
 var $64=HEAP32[(($60)>>2)];
 var $retval_i_i_i_i_0=$64;label=63;break;
 case 63: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=64;break;}else{var $65=$59;label=65;break;}
 case 64: 
 HEAP32[(($__sbuf__i_i_i133)>>2)]=0;
 var $65=0;label=65;break;
 case 65: 
 var $65;
 var $cmp_i_i_i50=($65|0)==0;
 var $66=HEAP32[(($__sbuf__i11_i_i154)>>2)];
 var $tobool_i12_i_i=($66|0)==0;
 if($tobool_i12_i_i){label=71;break;}else{label=66;break;}
 case 66: 
 var $__ninp__i_i15_i_i=(($66+12)|0);
 var $67=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($66+16)|0);
 var $68=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($67|0)==($68|0);
 if($cmp_i_i17_i_i){label=67;break;}else{label=68;break;}
 case 67: 
 var $69=$66;
 var $vtable_i_i19_i_i=HEAP32[(($69)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $70=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i52;label=69;break; } else { label=42;break; }
 case 68: 
 var $71=HEAP32[(($67)>>2)];
 var $retval_i_i7_i_i_0=$71;label=69;break;
 case 69: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=70;break;}else{label=72;break;}
 case 70: 
 HEAP32[(($__sbuf__i11_i_i154)>>2)]=0;
 label=71;break;
 case 71: 
 if($cmp_i_i_i50){label=73;break;}else{label=74;break;}
 case 72: 
 var $cmp_i30_i_i=($66|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i50^$cmp_i30_i_i;
 if($cmp_i_itmp){label=74;break;}else{label=73;break;}
 case 73: 
 var $72=HEAP32[(($__err)>>2)];
 var $or=$72|2;
 HEAP32[(($__err)>>2)]=$or;
 label=74;break;
 case 74: 
 var $73=(($agg_result)|0);
 HEAP32[(($73)>>2)]=$65;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
 case 75: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val43$0=$lpad_val$0;
 var $lpad_val43$1=$ehselector_slot_0;
 ___resumeException($lpad_val43$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP32[(($__a_end)>>2)];
 var $cmp=($0|0)==($__a|0);
 if($cmp){label=2;break;}else{label=5;break;}
 case 2: 
 var $arrayidx=(($__atoms+96)|0);
 var $1=HEAP32[(($arrayidx)>>2)];
 var $cmp1=($1|0)==($__ct|0);
 if($cmp1){label=4;break;}else{label=3;break;}
 case 3: 
 var $arrayidx2=(($__atoms+100)|0);
 var $2=HEAP32[(($arrayidx2)>>2)];
 var $cmp3=($2|0)==($__ct|0);
 if($cmp3){label=4;break;}else{label=5;break;}
 case 4: 
 var $cond=($cmp1?43:45);
 var $incdec_ptr=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr;
 HEAP8[($__a)]=$cond;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=23;break;
 case 5: 
 var $__size__i_i=$__grouping;
 var $3=HEAP8[($__size__i_i)];
 var $conv_i_i=($3&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $__size__i23_i=(($__grouping+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$4;label=8;break;
 case 7: 
 var $shr_i_i31=$conv_i_i>>>1;
 var $cond_i=$shr_i_i31;label=8;break;
 case 8: 
 var $cond_i;
 var $cmp6=($cond_i|0)!=0;
 var $cmp8=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$cmp6&$cmp8;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $5=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast=$5;
 var $sub_ptr_rhs_cast=$__g;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp10=($sub_ptr_sub|0)<160;
 if($cmp10){label=10;break;}else{var $retval_0=0;label=23;break;}
 case 10: 
 var $6=HEAP32[(($__dc)>>2)];
 var $incdec_ptr12=(($5+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr12;
 HEAP32[(($5)>>2)]=$6;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=23;break;
 case 11: 
 var $add_ptr=(($__atoms+104)|0);
 var $__first_addr_i_0=$__atoms;label=12;break;
 case 12: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr;label=14;break;}else{label=13;break;}
 case 13: 
 var $7=HEAP32[(($__first_addr_i_0)>>2)];
 var $cmp1_i=($7|0)==($__ct|0);
 var $incdec_ptr_i=(($__first_addr_i_0+4)|0);
 if($cmp1_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=14;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=12;break;}
 case 14: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast16=$__first_addr_i_0_lcssa;
 var $sub_ptr_rhs_cast17=$__atoms;
 var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast17))|0);
 var $sub_ptr_div19=$sub_ptr_sub18>>2;
 var $cmp20=($sub_ptr_sub18|0)>92;
 if($cmp20){var $retval_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $cmp23=($sub_ptr_div19|0)<($__base|0);
 if($cmp23){label=22;break;}else{var $retval_0=-1;label=23;break;}
 case 17: 
 var $cmp27=($sub_ptr_sub18|0)<88;
 if($cmp27){label=22;break;}else{label=18;break;}
 case 18: 
 if($cmp){var $retval_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $sub_ptr_lhs_cast32=$0;
 var $sub_ptr_rhs_cast33=$__a;
 var $sub_ptr_sub34=((($sub_ptr_lhs_cast32)-($sub_ptr_rhs_cast33))|0);
 var $cmp35=($sub_ptr_sub34|0)<3;
 if($cmp35){label=20;break;}else{var $retval_0=-1;label=23;break;}
 case 20: 
 var $arrayidx37=((($0)-(1))|0);
 var $8=HEAP8[($arrayidx37)];
 var $cmp38=(($8<<24)>>24)==48;
 if($cmp38){label=21;break;}else{var $retval_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $arrayidx40=((10144+$sub_ptr_div19)|0);
 var $9=HEAP8[($arrayidx40)];
 var $10=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr41=(($10+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr41;
 HEAP8[($10)]=$9;
 var $retval_0=0;label=23;break;
 case 22: 
 var $arrayidx43=((10144+$sub_ptr_div19)|0);
 var $11=HEAP8[($arrayidx43)];
 var $incdec_ptr44=(($0+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr44;
 HEAP8[($0)]=$11;
 var $12=HEAP32[(($__dc)>>2)];
 var $inc=((($12)+(1))|0);
 HEAP32[(($__dc)>>2)]=$inc;
 var $retval_0=0;label=23;break;
 case 23: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i3=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10170,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=$__p_i_i_i3;
 var $13=HEAP32[((13264)>>2)];
 var $cmp_i_i_i5=($13|0)==-1;
 if($cmp_i_i_i5){label=10;break;}else{label=9;break;}
 case 9: 
 var $ref_tmp_i_sroa_0_0__idx_i_i6=(($__p_i_i_i3)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i6)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i7=(($__p_i_i_i3+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i7)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i8=(($__p_i_i_i3+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i8)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$12,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $14=HEAP32[((13268)>>2)];
 var $sub_i_i10=((($14)-(1))|0);
 var $__end__i_i_i_i11=(($11+12)|0);
 var $15=HEAP32[(($__end__i_i_i_i11)>>2)];
 var $__begin__i_i_i_i12=(($11+8)|0);
 var $16=HEAP32[(($__begin__i_i_i_i12)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i13=$15;
 var $sub_ptr_rhs_cast_i_i_i_i14=$16;
 var $sub_ptr_sub_i_i_i_i15=((($sub_ptr_lhs_cast_i_i_i_i13)-($sub_ptr_rhs_cast_i_i_i_i14))|0);
 var $sub_ptr_div_i_i_i_i16=$sub_ptr_sub_i_i_i_i15>>2;
 var $cmp_i_i1_i17=($sub_ptr_div_i_i_i_i16>>>0)>($sub_i_i10>>>0);
 if($cmp_i_i1_i17){label=11;break;}else{label=12;break;}
 case 11: 
 var $arrayidx_i_i_i_i19=(($16+($sub_i_i10<<2))|0);
 var $17=HEAP32[(($arrayidx_i_i_i_i19)>>2)];
 var $tobool_i_i_i20=($17|0)==0;
 if($tobool_i_i_i20){label=12;break;}else{label=14;break;}
 case 12: 
 var $exception_i_i22=___cxa_allocate_exception(4);
 var $18=$exception_i_i22;
 __ZNSt8bad_castC2Ev($18);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i22,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $19=$17;
 var $20=$17;
 var $vtable_i15=HEAP32[(($20)>>2)];
 var $vfn_i16=(($vtable_i15+16)|0);
 var $21=HEAP32[(($vfn_i16)>>2)];
 var $call_i17=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$call_i17;
 var $22=$17;
 var $vtable_i20=HEAP32[(($22)>>2)];
 var $vfn_i21=(($vtable_i20+20)|0);
 var $23=HEAP32[(($vfn_i21)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($agg_result,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $24=HEAP32[(($__locale__i)>>2)];
 var $25=(($24)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($25);
 STACKTOP=sp;return;
 case 17: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=HEAP32[(($__locale__i)>>2)];
 var $28=(($27)|0);
 var $call_i29=__ZNSt3__114__shared_count16__release_sharedEv($28);
 ___resumeException($26$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i4=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10176,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=$__p_i_i_i4;
 var $13=HEAP32[((13264)>>2)];
 var $cmp_i_i_i6=($13|0)==-1;
 if($cmp_i_i_i6){label=10;break;}else{label=9;break;}
 case 9: 
 var $ref_tmp_i_sroa_0_0__idx_i_i7=(($__p_i_i_i4)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i7)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i8=(($__p_i_i_i4+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i8)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i9=(($__p_i_i_i4+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$12,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $14=HEAP32[((13268)>>2)];
 var $sub_i_i11=((($14)-(1))|0);
 var $__end__i_i_i_i12=(($11+12)|0);
 var $15=HEAP32[(($__end__i_i_i_i12)>>2)];
 var $__begin__i_i_i_i13=(($11+8)|0);
 var $16=HEAP32[(($__begin__i_i_i_i13)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i14=$15;
 var $sub_ptr_rhs_cast_i_i_i_i15=$16;
 var $sub_ptr_sub_i_i_i_i16=((($sub_ptr_lhs_cast_i_i_i_i14)-($sub_ptr_rhs_cast_i_i_i_i15))|0);
 var $sub_ptr_div_i_i_i_i17=$sub_ptr_sub_i_i_i_i16>>2;
 var $cmp_i_i1_i18=($sub_ptr_div_i_i_i_i17>>>0)>($sub_i_i11>>>0);
 if($cmp_i_i1_i18){label=11;break;}else{label=12;break;}
 case 11: 
 var $arrayidx_i_i_i_i20=(($16+($sub_i_i11<<2))|0);
 var $17=HEAP32[(($arrayidx_i_i_i_i20)>>2)];
 var $tobool_i_i_i21=($17|0)==0;
 if($tobool_i_i_i21){label=12;break;}else{label=14;break;}
 case 12: 
 var $exception_i_i23=___cxa_allocate_exception(4);
 var $18=$exception_i_i23;
 __ZNSt8bad_castC2Ev($18);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i23,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $19=$17;
 var $20=$17;
 var $vtable_i17=HEAP32[(($20)>>2)];
 var $vfn_i18=(($vtable_i17+12)|0);
 var $21=HEAP32[(($vfn_i18)>>2)];
 var $call_i19=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$call_i19;
 var $vtable_i22=HEAP32[(($20)>>2)];
 var $vfn_i23=(($vtable_i22+16)|0);
 var $22=HEAP32[(($vfn_i23)>>2)];
 var $call_i24=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$call_i24;
 var $23=$17;
 var $vtable_i27=HEAP32[(($23)>>2)];
 var $vfn_i28=(($vtable_i27+20)|0);
 var $24=HEAP32[(($vfn_i28)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]($agg_result,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $25=HEAP32[(($__locale__i)>>2)];
 var $26=(($25)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($26);
 STACKTOP=sp;return;
 case 18: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=HEAP32[(($__locale__i)>>2)];
 var $29=(($28)|0);
 var $call_i30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($cmp){label=2;break;}else{label=9;break;}
 case 2: 
 var $0=HEAP8[($__in_units)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){var $retval_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $2=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr=(($2+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr;
 HEAP8[($2)]=46;
 var $__size__i_i=$__grouping;
 var $3=HEAP8[($__size__i_i)];
 var $conv_i_i=($3&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__size__i23_i=(($__grouping+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$4;label=6;break;
 case 5: 
 var $shr_i_i45=$conv_i_i>>>1;
 var $cond_i=$shr_i_i45;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp3=($cond_i|0)==0;
 if($cmp3){var $retval_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $5=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast=$5;
 var $sub_ptr_rhs_cast=$__g;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp4=($sub_ptr_sub|0)<160;
 if($cmp4){label=8;break;}else{var $retval_0=0;label=36;break;}
 case 8: 
 var $6=HEAP32[(($__dc)>>2)];
 var $incdec_ptr6=(($5+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr6;
 HEAP32[(($5)>>2)]=$6;
 var $retval_0=0;label=36;break;
 case 9: 
 var $cmp11=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($cmp11){label=10;break;}else{label=17;break;}
 case 10: 
 var $__size__i_i142=$__grouping;
 var $7=HEAP8[($__size__i_i142)];
 var $conv_i_i143=($7&255);
 var $and_i_i144=$conv_i_i143&1;
 var $tobool_i_i145=($and_i_i144|0)==0;
 if($tobool_i_i145){label=12;break;}else{label=11;break;}
 case 11: 
 var $__size__i23_i152=(($__grouping+4)|0);
 var $8=HEAP32[(($__size__i23_i152)>>2)];
 var $cond_i164=$8;label=13;break;
 case 12: 
 var $shr_i_i16244=$conv_i_i143>>>1;
 var $cond_i164=$shr_i_i16244;label=13;break;
 case 13: 
 var $cond_i164;
 var $cmp14=($cond_i164|0)==0;
 if($cmp14){label=17;break;}else{label=14;break;}
 case 14: 
 var $9=HEAP8[($__in_units)];
 var $10=$9&1;
 var $tobool16=(($10<<24)>>24)==0;
 if($tobool16){var $retval_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $11=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast19=$11;
 var $sub_ptr_rhs_cast20=$__g;
 var $sub_ptr_sub21=((($sub_ptr_lhs_cast19)-($sub_ptr_rhs_cast20))|0);
 var $cmp23=($sub_ptr_sub21|0)<160;
 if($cmp23){label=16;break;}else{var $retval_0=0;label=36;break;}
 case 16: 
 var $12=HEAP32[(($__dc)>>2)];
 var $incdec_ptr25=(($11+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr25;
 HEAP32[(($11)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=36;break;
 case 17: 
 var $add_ptr=(($__atoms+32)|0);
 var $__first_addr_i_0=$__atoms;label=18;break;
 case 18: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr;label=20;break;}else{label=19;break;}
 case 19: 
 var $13=HEAP8[($__first_addr_i_0)];
 var $cmp2_i=(($13<<24)>>24)==(($__ct<<24)>>24);
 var $incdec_ptr_i=(($__first_addr_i_0+1)|0);
 if($cmp2_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=20;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=18;break;}
 case 20: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast29=$__first_addr_i_0_lcssa;
 var $sub_ptr_rhs_cast30=$__atoms;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)>31;
 if($cmp32){var $retval_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $arrayidx=((10144+$sub_ptr_sub31)|0);
 var $14=HEAP8[($arrayidx)];
 if(($sub_ptr_sub31|0)==25|($sub_ptr_sub31|0)==24){ label=22;break;}else if(($sub_ptr_sub31|0)==22|($sub_ptr_sub31|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $15=HEAP32[(($__a_end)>>2)];
 var $cmp40=($15|0)==($__a|0);
 if($cmp40){label=24;break;}else{label=23;break;}
 case 23: 
 var $arrayidx42=((($15)-(1))|0);
 var $16=HEAP8[($arrayidx42)];
 var $conv4342=($16&255);
 var $and=$conv4342&95;
 var $17=HEAP8[($__exp)];
 var $conv4443=($17&255);
 var $and45=$conv4443&127;
 var $cmp46=($and|0)==($and45|0);
 if($cmp46){label=24;break;}else{var $retval_0=-1;label=36;break;}
 case 24: 
 var $incdec_ptr48=(($15+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr48;
 HEAP8[($15)]=$14;
 var $retval_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $18=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr8046=(($18+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr8046;
 HEAP8[($18)]=$14;
 var $retval_0=0;label=36;break;
 case 26: 
 var $conv3540=($14&255);
 var $and58=$conv3540&95;
 var $19=HEAP8[($__exp)];
 var $conv59=(($19<<24)>>24);
 var $cmp60=($and58|0)==($conv59|0);
 if($cmp60){label=27;break;}else{label=34;break;}
 case 27: 
 var $or=$19|-128;
 HEAP8[($__exp)]=$or;
 var $20=HEAP8[($__in_units)];
 var $21=$20&1;
 var $tobool64=(($21<<24)>>24)==0;
 if($tobool64){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $__size__i_i101=$__grouping;
 var $22=HEAP8[($__size__i_i101)];
 var $conv_i_i102=($22&255);
 var $and_i_i103=$conv_i_i102&1;
 var $tobool_i_i104=($and_i_i103|0)==0;
 if($tobool_i_i104){label=30;break;}else{label=29;break;}
 case 29: 
 var $__size__i23_i111=(($__grouping+4)|0);
 var $23=HEAP32[(($__size__i23_i111)>>2)];
 var $cond_i123=$23;label=31;break;
 case 30: 
 var $shr_i_i12141=$conv_i_i102>>>1;
 var $cond_i123=$shr_i_i12141;label=31;break;
 case 31: 
 var $cond_i123;
 var $cmp67=($cond_i123|0)==0;
 if($cmp67){label=34;break;}else{label=32;break;}
 case 32: 
 var $24=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast69=$24;
 var $sub_ptr_rhs_cast70=$__g;
 var $sub_ptr_sub71=((($sub_ptr_lhs_cast69)-($sub_ptr_rhs_cast70))|0);
 var $cmp73=($sub_ptr_sub71|0)<160;
 if($cmp73){label=33;break;}else{label=34;break;}
 case 33: 
 var $25=HEAP32[(($__dc)>>2)];
 var $incdec_ptr75=(($24+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr75;
 HEAP32[(($24)>>2)]=$25;
 label=34;break;
 case 34: 
 var $26=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr80=(($26+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr80;
 HEAP8[($26)]=$14;
 var $cmp81=($sub_ptr_sub31|0)>21;
 if($cmp81){var $retval_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $27=HEAP32[(($__dc)>>2)];
 var $inc=((($27)+(1))|0);
 HEAP32[(($__dc)>>2)]=$inc;
 var $retval_0=0;label=36;break;
 case 36: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i3=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=17;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=17;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10170,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=17;break; }
 case 8: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=$__p_i_i_i3;
 var $13=HEAP32[((13256)>>2)];
 var $cmp_i_i_i5=($13|0)==-1;
 if($cmp_i_i_i5){label=10;break;}else{label=9;break;}
 case 9: 
 var $ref_tmp_i_sroa_0_0__idx_i_i6=(($__p_i_i_i3)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i6)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i7=(($__p_i_i_i3+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i7)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i8=(($__p_i_i_i3+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i8)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$12,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=17;break; }
 case 10: 
 var $14=HEAP32[((13260)>>2)];
 var $sub_i_i10=((($14)-(1))|0);
 var $__end__i_i_i_i11=(($11+12)|0);
 var $15=HEAP32[(($__end__i_i_i_i11)>>2)];
 var $__begin__i_i_i_i12=(($11+8)|0);
 var $16=HEAP32[(($__begin__i_i_i_i12)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i13=$15;
 var $sub_ptr_rhs_cast_i_i_i_i14=$16;
 var $sub_ptr_sub_i_i_i_i15=((($sub_ptr_lhs_cast_i_i_i_i13)-($sub_ptr_rhs_cast_i_i_i_i14))|0);
 var $sub_ptr_div_i_i_i_i16=$sub_ptr_sub_i_i_i_i15>>2;
 var $cmp_i_i1_i17=($sub_ptr_div_i_i_i_i16>>>0)>($sub_i_i10>>>0);
 if($cmp_i_i1_i17){label=11;break;}else{label=12;break;}
 case 11: 
 var $arrayidx_i_i_i_i19=(($16+($sub_i_i10<<2))|0);
 var $17=HEAP32[(($arrayidx_i_i_i_i19)>>2)];
 var $tobool_i_i_i20=($17|0)==0;
 if($tobool_i_i_i20){label=12;break;}else{label=14;break;}
 case 12: 
 var $exception_i_i22=___cxa_allocate_exception(4);
 var $18=$exception_i_i22;
 __ZNSt8bad_castC2Ev($18);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i22,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $19=$17;
 var $20=$17;
 var $vtable_i15=HEAP32[(($20)>>2)];
 var $vfn_i16=(($vtable_i15+16)|0);
 var $21=HEAP32[(($vfn_i16)>>2)];
 var $call_i17=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=17;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$call_i17;
 var $22=$17;
 var $vtable_i20=HEAP32[(($22)>>2)];
 var $vfn_i21=(($vtable_i20+20)|0);
 var $23=HEAP32[(($vfn_i21)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($agg_result,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=17;break; }
 case 16: 
 var $24=HEAP32[(($__locale__i)>>2)];
 var $25=(($24)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($25);
 STACKTOP=sp;return;
 case 17: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=HEAP32[(($__locale__i)>>2)];
 var $28=(($27)|0);
 var $call_i29=__ZNSt3__114__shared_count16__release_sharedEv($28);
 ___resumeException($26$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i4=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__loc=(sp)+(32);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=18;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=18;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=$6;
 var $vtable_i=HEAP32[(($9)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $10=HEAP32[(($vfn_i)>>2)];
 var $call_i12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]($8,10144,10176,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=18;break; }
 case 8: 
 var $11=HEAP32[(($__locale__i)>>2)];
 var $12=$__p_i_i_i4;
 var $13=HEAP32[((13256)>>2)];
 var $cmp_i_i_i6=($13|0)==-1;
 if($cmp_i_i_i6){label=10;break;}else{label=9;break;}
 case 9: 
 var $ref_tmp_i_sroa_0_0__idx_i_i7=(($__p_i_i_i4)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i7)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i8=(($__p_i_i_i4+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i8)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i9=(($__p_i_i_i4+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i9)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$12,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=18;break; }
 case 10: 
 var $14=HEAP32[((13260)>>2)];
 var $sub_i_i11=((($14)-(1))|0);
 var $__end__i_i_i_i12=(($11+12)|0);
 var $15=HEAP32[(($__end__i_i_i_i12)>>2)];
 var $__begin__i_i_i_i13=(($11+8)|0);
 var $16=HEAP32[(($__begin__i_i_i_i13)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i14=$15;
 var $sub_ptr_rhs_cast_i_i_i_i15=$16;
 var $sub_ptr_sub_i_i_i_i16=((($sub_ptr_lhs_cast_i_i_i_i14)-($sub_ptr_rhs_cast_i_i_i_i15))|0);
 var $sub_ptr_div_i_i_i_i17=$sub_ptr_sub_i_i_i_i16>>2;
 var $cmp_i_i1_i18=($sub_ptr_div_i_i_i_i17>>>0)>($sub_i_i11>>>0);
 if($cmp_i_i1_i18){label=11;break;}else{label=12;break;}
 case 11: 
 var $arrayidx_i_i_i_i20=(($16+($sub_i_i11<<2))|0);
 var $17=HEAP32[(($arrayidx_i_i_i_i20)>>2)];
 var $tobool_i_i_i21=($17|0)==0;
 if($tobool_i_i_i21){label=12;break;}else{label=14;break;}
 case 12: 
 var $exception_i_i23=___cxa_allocate_exception(4);
 var $18=$exception_i_i23;
 __ZNSt8bad_castC2Ev($18);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i23,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $19=$17;
 var $20=$17;
 var $vtable_i17=HEAP32[(($20)>>2)];
 var $vfn_i18=(($vtable_i17+12)|0);
 var $21=HEAP32[(($vfn_i18)>>2)];
 var $call_i19=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$call_i19;
 var $vtable_i22=HEAP32[(($20)>>2)];
 var $vfn_i23=(($vtable_i22+16)|0);
 var $22=HEAP32[(($vfn_i23)>>2)];
 var $call_i24=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$call_i24;
 var $23=$17;
 var $vtable_i27=HEAP32[(($23)>>2)];
 var $vfn_i28=(($vtable_i27+20)|0);
 var $24=HEAP32[(($vfn_i28)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]($agg_result,$19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=18;break; }
 case 17: 
 var $25=HEAP32[(($__locale__i)>>2)];
 var $26=(($25)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($26);
 STACKTOP=sp;return;
 case 18: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=HEAP32[(($__locale__i)>>2)];
 var $29=(($28)|0);
 var $call_i30=__ZNSt3__114__shared_count16__release_sharedEv($29);
 ___resumeException($27$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($__ct|0)==($__decimal_point|0);
 if($cmp){label=2;break;}else{label=9;break;}
 case 2: 
 var $0=HEAP8[($__in_units)];
 var $1=$0&1;
 var $tobool=(($1<<24)>>24)==0;
 if($tobool){var $retval_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $2=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr=(($2+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr;
 HEAP8[($2)]=46;
 var $__size__i_i=$__grouping;
 var $3=HEAP8[($__size__i_i)];
 var $conv_i_i=($3&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $__size__i23_i=(($__grouping+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$4;label=6;break;
 case 5: 
 var $shr_i_i47=$conv_i_i>>>1;
 var $cond_i=$shr_i_i47;label=6;break;
 case 6: 
 var $cond_i;
 var $cmp2=($cond_i|0)==0;
 if($cmp2){var $retval_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $5=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast=$5;
 var $sub_ptr_rhs_cast=$__g;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp3=($sub_ptr_sub|0)<160;
 if($cmp3){label=8;break;}else{var $retval_0=0;label=36;break;}
 case 8: 
 var $6=HEAP32[(($__dc)>>2)];
 var $incdec_ptr5=(($5+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr5;
 HEAP32[(($5)>>2)]=$6;
 var $retval_0=0;label=36;break;
 case 9: 
 var $cmp8=($__ct|0)==($__thousands_sep|0);
 if($cmp8){label=10;break;}else{label=17;break;}
 case 10: 
 var $__size__i_i139=$__grouping;
 var $7=HEAP8[($__size__i_i139)];
 var $conv_i_i140=($7&255);
 var $and_i_i141=$conv_i_i140&1;
 var $tobool_i_i142=($and_i_i141|0)==0;
 if($tobool_i_i142){label=12;break;}else{label=11;break;}
 case 11: 
 var $__size__i23_i149=(($__grouping+4)|0);
 var $8=HEAP32[(($__size__i23_i149)>>2)];
 var $cond_i161=$8;label=13;break;
 case 12: 
 var $shr_i_i15946=$conv_i_i140>>>1;
 var $cond_i161=$shr_i_i15946;label=13;break;
 case 13: 
 var $cond_i161;
 var $cmp11=($cond_i161|0)==0;
 if($cmp11){label=17;break;}else{label=14;break;}
 case 14: 
 var $9=HEAP8[($__in_units)];
 var $10=$9&1;
 var $tobool13=(($10<<24)>>24)==0;
 if($tobool13){var $retval_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $11=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast16=$11;
 var $sub_ptr_rhs_cast17=$__g;
 var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast17))|0);
 var $cmp20=($sub_ptr_sub18|0)<160;
 if($cmp20){label=16;break;}else{var $retval_0=0;label=36;break;}
 case 16: 
 var $12=HEAP32[(($__dc)>>2)];
 var $incdec_ptr22=(($11+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr22;
 HEAP32[(($11)>>2)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $retval_0=0;label=36;break;
 case 17: 
 var $add_ptr=(($__atoms+128)|0);
 var $__first_addr_i_0=$__atoms;label=18;break;
 case 18: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr;label=20;break;}else{label=19;break;}
 case 19: 
 var $13=HEAP32[(($__first_addr_i_0)>>2)];
 var $cmp1_i=($13|0)==($__ct|0);
 var $incdec_ptr_i=(($__first_addr_i_0+4)|0);
 if($cmp1_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=20;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=18;break;}
 case 20: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast26=$__first_addr_i_0_lcssa;
 var $sub_ptr_rhs_cast27=$__atoms;
 var $sub_ptr_sub28=((($sub_ptr_lhs_cast26)-($sub_ptr_rhs_cast27))|0);
 var $sub_ptr_div29=$sub_ptr_sub28>>2;
 var $cmp30=($sub_ptr_sub28|0)>124;
 if($cmp30){var $retval_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $arrayidx=((10144+$sub_ptr_div29)|0);
 var $14=HEAP8[($arrayidx)];
 if(($sub_ptr_div29|0)==25|($sub_ptr_div29|0)==24){ label=22;break;}else if(($sub_ptr_div29|0)==22|($sub_ptr_div29|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $15=HEAP32[(($__a_end)>>2)];
 var $cmp37=($15|0)==($__a|0);
 if($cmp37){label=24;break;}else{label=23;break;}
 case 23: 
 var $arrayidx39=((($15)-(1))|0);
 var $16=HEAP8[($arrayidx39)];
 var $conv4044=($16&255);
 var $and=$conv4044&95;
 var $17=HEAP8[($__exp)];
 var $conv4145=($17&255);
 var $and42=$conv4145&127;
 var $cmp43=($and|0)==($and42|0);
 if($cmp43){label=24;break;}else{var $retval_0=-1;label=36;break;}
 case 24: 
 var $incdec_ptr45=(($15+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr45;
 HEAP8[($15)]=$14;
 var $retval_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $conv42=($14&255);
 var $and55=$conv42&95;
 var $18=HEAP8[($__exp)];
 var $conv56=(($18<<24)>>24);
 var $cmp57=($and55|0)==($conv56|0);
 if($cmp57){label=27;break;}else{label=34;break;}
 case 27: 
 var $or=$18|-128;
 HEAP8[($__exp)]=$or;
 var $19=HEAP8[($__in_units)];
 var $20=$19&1;
 var $tobool61=(($20<<24)>>24)==0;
 if($tobool61){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $__size__i_i98=$__grouping;
 var $21=HEAP8[($__size__i_i98)];
 var $conv_i_i99=($21&255);
 var $and_i_i100=$conv_i_i99&1;
 var $tobool_i_i101=($and_i_i100|0)==0;
 if($tobool_i_i101){label=30;break;}else{label=29;break;}
 case 29: 
 var $__size__i23_i108=(($__grouping+4)|0);
 var $22=HEAP32[(($__size__i23_i108)>>2)];
 var $cond_i120=$22;label=31;break;
 case 30: 
 var $shr_i_i11843=$conv_i_i99>>>1;
 var $cond_i120=$shr_i_i11843;label=31;break;
 case 31: 
 var $cond_i120;
 var $cmp64=($cond_i120|0)==0;
 if($cmp64){label=34;break;}else{label=32;break;}
 case 32: 
 var $23=HEAP32[(($__g_end)>>2)];
 var $sub_ptr_lhs_cast66=$23;
 var $sub_ptr_rhs_cast67=$__g;
 var $sub_ptr_sub68=((($sub_ptr_lhs_cast66)-($sub_ptr_rhs_cast67))|0);
 var $cmp70=($sub_ptr_sub68|0)<160;
 if($cmp70){label=33;break;}else{label=34;break;}
 case 33: 
 var $24=HEAP32[(($__dc)>>2)];
 var $incdec_ptr72=(($23+4)|0);
 HEAP32[(($__g_end)>>2)]=$incdec_ptr72;
 HEAP32[(($23)>>2)]=$24;
 label=34;break;
 case 34: 
 var $25=HEAP32[(($__a_end)>>2)];
 var $incdec_ptr77=(($25+1)|0);
 HEAP32[(($__a_end)>>2)]=$incdec_ptr77;
 HEAP8[($25)]=$14;
 var $cmp78=($sub_ptr_sub28|0)>84;
 if($cmp78){var $retval_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $26=HEAP32[(($__dc)>>2)];
 var $inc=((($26)+(1))|0);
 HEAP32[(($__dc)>>2)]=$inc;
 var $retval_0=0;label=36;break;
 case 36: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $agg_tmp=(sp)+(16);
 var $ref_tmp=(sp)+(24);
 var $__nm=(sp)+(32);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and=$0&1;
 var $cmp=($and|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $1=$this;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+24)|0);
 var $2=HEAP32[(($vfn)>>2)];
 var $3=(($__s)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp)|0);
 HEAP32[(($5)>>2)]=$4;
 var $conv=($__v&1);
 FUNCTION_TABLE[$2]($agg_result,$this,$agg_tmp,$__iob,$__fl,$conv);
 label=29;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $6=HEAP32[(($__locale__i)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((13264)>>2)];
 var $cmp_i_i_i=($8|0)==-1;
 if($cmp_i_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$7,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; }
 case 5: 
 var $9=HEAP32[((13268)>>2)];
 var $sub_i_i=((($9)-(1))|0);
 var $__end__i_i_i_i=(($6+12)|0);
 var $10=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($6+8)|0);
 var $11=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$10;
 var $sub_ptr_rhs_cast_i_i_i_i=$11;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $arrayidx_i_i_i_i=(($11+($sub_i_i<<2))|0);
 var $12=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i9=($12|0)==0;
 if($tobool_i_i_i9){label=7;break;}else{label=9;break;}
 case 7: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $13=$exception_i_i;
 __ZNSt8bad_castC2Ev($13);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=26;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $14=$12;
 var $15=HEAP32[(($__locale__i)>>2)];
 var $16=(($15)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($16);
 var $17=$12;
 var $vtable_i=HEAP32[(($17)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $vfn_i=(($vtable_i+24)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($__nm,$14);
 label=12;break;
 case 11: 
 var $vfn_i22=(($vtable_i+28)|0);
 var $19=HEAP32[(($vfn_i22)>>2)];
 FUNCTION_TABLE[$19]($__nm,$14);
 label=12;break;
 case 12: 
 var $__s_i_i_i=$__nm;
 var $__size__i_i_i=$__nm;
 var $20=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$20&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=14;break;}else{label=13;break;}
 case 13: 
 var $__data__i21_i_i=(($__nm+8)|0);
 var $21=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i77_pre=(($__s_i_i_i+1)|0);
 var $__i_sroa_0_0_ph=$21;var $arrayidx_i_i_i77_pre_phi=$arrayidx_i_i_i77_pre;var $__data__i21_i_i68_pre_phi=$__data__i21_i_i;label=15;break;
 case 14: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $__data__i21_i_i68_pre=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$arrayidx_i_i_i;var $arrayidx_i_i_i77_pre_phi=$arrayidx_i_i_i;var $__data__i21_i_i68_pre_phi=$__data__i21_i_i68_pre;label=15;break;
 case 15: 
 var $__data__i21_i_i68_pre_phi;
 var $arrayidx_i_i_i77_pre_phi;
 var $__i_sroa_0_0_ph;
 var $__sbuf__i=(($__s)|0);
 var $__size__i23_i_i=(($__nm+4)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $22=$20;label=16;break;
 case 16: 
 var $22;
 var $__i_sroa_0_0;
 var $and_i_i_i60=$22&1;
 var $tobool_i_i_i61=(($and_i_i_i60<<24)>>24)==0;
 if($tobool_i_i_i61){var $cond_i_i79=$arrayidx_i_i_i77_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $23=HEAP32[(($__data__i21_i_i68_pre_phi)>>2)];
 var $cond_i_i79=$23;label=18;break;
 case 18: 
 var $cond_i_i79;
 var $conv_i_i22_i=($22&255);
 var $and_i_i23_i=$conv_i_i22_i&1;
 var $tobool_i_i24_i=($and_i_i23_i|0)==0;
 var $24=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i8=$conv_i_i22_i>>>1;
 var $cond_i34_i=($tobool_i_i24_i?$shr_i_i_i8:$24);
 var $add_ptr_i=(($cond_i_i79+$cond_i34_i)|0);
 var $lnot_i=($__i_sroa_0_0|0)==($add_ptr_i|0);
 if($lnot_i){label=28;break;}else{label=19;break;}
 case 19: 
 var $25=HEAP8[($__i_sroa_0_0)];
 var $26=HEAP32[(($__sbuf__i)>>2)];
 var $tobool_i=($26|0)==0;
 if($tobool_i){label=25;break;}else{label=20;break;}
 case 20: 
 var $__nout__i_i=(($26+24)|0);
 var $27=HEAP32[(($__nout__i_i)>>2)];
 var $__eout__i_i=(($26+28)|0);
 var $28=HEAP32[(($__eout__i_i)>>2)];
 var $cmp_i_i=($27|0)==($28|0);
 if($cmp_i_i){label=21;break;}else{label=22;break;}
 case 21: 
 var $29=$26;
 var $vtable_i_i=HEAP32[(($29)>>2)];
 var $vfn_i_i=(($vtable_i_i+52)|0);
 var $30=HEAP32[(($vfn_i_i)>>2)];
 var $conv_i_i_i33=($25&255);
 var $call2_i_i34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,$conv_i_i_i33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=27;break; }
 case 22: 
 var $incdec_ptr_i_i=(($27+1)|0);
 HEAP32[(($__nout__i_i)>>2)]=$incdec_ptr_i_i;
 HEAP8[($27)]=$25;
 label=25;break;
 case 23: 
 var $cmp_i6_i=($call2_i_i34|0)==-1;
 if($cmp_i6_i){label=24;break;}else{label=25;break;}
 case 24: 
 HEAP32[(($__sbuf__i)>>2)]=0;
 label=25;break;
 case 25: 
 var $incdec_ptr_i=(($__i_sroa_0_0+1)|0);
 var $_pre=HEAP8[($__size__i_i_i)];
 var $__i_sroa_0_0=$incdec_ptr_i;var $22=$_pre;label=16;break;
 case 26: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $34=HEAP32[(($__locale__i)>>2)];
 var $35=(($34)|0);
 var $call_i14=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $ehselector_slot_0=$33;var $exn_slot_0=$32;label=30;break;
 case 27: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=$36$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 var $ehselector_slot_0=$38;var $exn_slot_0=$37;label=30;break;
 case 28: 
 var $39=HEAP32[(($__sbuf__i)>>2)];
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 label=29;break;
 case 29: 
 STACKTOP=sp;return;
 case 30: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val15$0=$lpad_val$0;
 var $lpad_val15$1=$ehselector_slot_0;
 ___resumeException($lpad_val15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $ref_tmp=(sp)+(64);
 var $agg_tmp=(sp)+(72);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2440)];HEAP8[((($0)+(1))|0)]=HEAP8[(2441)];HEAP8[((($0)+(2))|0)]=HEAP8[(2442)];HEAP8[((($0)+(3))|0)]=HEAP8[(2443)];HEAP8[((($0)+(4))|0)]=HEAP8[(2444)];HEAP8[((($0)+(5))|0)]=HEAP8[(2445)];
 var $add_ptr=(($__fmt+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $1=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$1&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($__fmt+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$1&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+1)|0);
 var $and9_i=$1&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$1&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i5=($3|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 16: 
 var $5=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,12,$5,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $6=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$6&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $7=HEAP8[($arraydecay2)];
 if((($7<<24)>>24)==45|(($7<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($7<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $8=HEAP8[($arrayidx9_i)];
 if((($8<<24)>>24)==120|(($8<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $9=HEAP32[(($__locale__i11)>>2)];
 var $10=(($9)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($agg_tmp)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=HEAP32[(($__op)>>2)];
 var $15=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$14,$15,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($18);
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $arraydecay=(($__va)|0);
 var $arraydecay1=$__va;
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0;
 var $call=_uselocale($__l);
 var $call3=_vsnprintf($__s,$__n,$__format,$arraydecay);
 var $tobool_i_i_i41=($call|0)==0;
 if($tobool_i_i_i41){label=4;break;}else{label=2;break;}
 case 2: 
 var $call6_i_i_i46=(function() { try { __THREW__ = 0; return _uselocale($call) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $call3;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i64=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272);
 label=3;break;
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i63=($6|0)==0;
 if($tobool_i_i_i63){label=5;break;}else{label=6;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 6: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=$__p_i_i_i64;
 var $11=HEAP32[((13264)>>2)];
 var $cmp_i_i_i66=($11|0)==-1;
 if($cmp_i_i_i66){label=8;break;}else{label=7;break;}
 case 7: 
 var $ref_tmp_i_sroa_0_0__idx_i_i67=(($__p_i_i_i64)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i67)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i68=(($__p_i_i_i64+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i68)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i69=(($__p_i_i_i64+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i69)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$10,272);
 label=8;break;
 case 8: 
 var $12=HEAP32[((13268)>>2)];
 var $sub_i_i71=((($12)-(1))|0);
 var $__end__i_i_i_i72=(($9+12)|0);
 var $13=HEAP32[(($__end__i_i_i_i72)>>2)];
 var $__begin__i_i_i_i73=(($9+8)|0);
 var $14=HEAP32[(($__begin__i_i_i_i73)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i74=$13;
 var $sub_ptr_rhs_cast_i_i_i_i75=$14;
 var $sub_ptr_sub_i_i_i_i76=((($sub_ptr_lhs_cast_i_i_i_i74)-($sub_ptr_rhs_cast_i_i_i_i75))|0);
 var $sub_ptr_div_i_i_i_i77=$sub_ptr_sub_i_i_i_i76>>2;
 var $cmp_i_i1_i78=($sub_ptr_div_i_i_i_i77>>>0)>($sub_i_i71>>>0);
 if($cmp_i_i1_i78){label=9;break;}else{label=10;break;}
 case 9: 
 var $arrayidx_i_i_i_i80=(($14+($sub_i_i71<<2))|0);
 var $15=HEAP32[(($arrayidx_i_i_i_i80)>>2)];
 var $tobool_i_i_i81=($15|0)==0;
 if($tobool_i_i_i81){label=10;break;}else{label=11;break;}
 case 10: 
 var $exception_i_i83=___cxa_allocate_exception(4);
 var $16=$exception_i_i83;
 __ZNSt8bad_castC2Ev($16);
 ___cxa_throw($exception_i_i83,8536,(376));
 throw "Reached an unreachable!";
 case 11: 
 var $17=$15;
 var $18=$15;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $19=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$19]($__grouping,$17);
 var $__s_i_i_i=$__grouping;
 var $__size__i_i_i=$__grouping;
 var $20=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($20&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=13;break;}else{label=12;break;}
 case 12: 
 var $__size__i23_i_i=(($__grouping+4)|0);
 var $21=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$21;label=14;break;
 case 13: 
 var $shr_i_i_i61=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i61;label=14;break;
 case 14: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=15;break;}else{label=20;break;}
 case 15: 
 var $22=$6;
 var $vtable_i86=HEAP32[(($22)>>2)];
 var $vfn_i87=(($vtable_i86+32)|0);
 var $23=HEAP32[(($vfn_i87)>>2)];
 var $call_i8889=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($8,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $sub_ptr_lhs_cast=$__ne;
 var $sub_ptr_rhs_cast=$__nb;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $add_ptr=(($__ob+$sub_ptr_sub)|0);
 HEAP32[(($__oe)>>2)]=$add_ptr;
 label=43;break;
 case 17: 
 var $lpad_loopexit90$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit90$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit90$1;var $lpad_phi$0=$lpad_loopexit90$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit91$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit91$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit91$1;var $lpad_phi$0=$lpad_nonloopexit91$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $24=HEAP8[($__nb)];
 if((($24<<24)>>24)==45|(($24<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $25=$6;
 var $vtable_i93=HEAP32[(($25)>>2)];
 var $vfn_i94=(($vtable_i93+28)|0);
 var $26=HEAP32[(($vfn_i94)>>2)];
 var $call_i9596=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($8,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $incdec_ptr=(($__nb+1)|0);
 var $27=HEAP32[(($__oe)>>2)];
 var $incdec_ptr9=(($27+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr9;
 HEAP8[($27)]=$call_i9596;
 var $__nf_0=$incdec_ptr;label=23;break;
 case 23: 
 var $__nf_0;
 var $sub_ptr_lhs_cast10=$__ne;
 var $sub_ptr_rhs_cast11=$__nf_0;
 var $sub_ptr_sub12=((($sub_ptr_lhs_cast10)-($sub_ptr_rhs_cast11))|0);
 var $cmp13=($sub_ptr_sub12|0)>1;
 if($cmp13){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $28=HEAP8[($__nf_0)];
 var $cmp15=(($28<<24)>>24)==48;
 if($cmp15){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $arrayidx17=(($__nf_0+1)|0);
 var $29=HEAP8[($arrayidx17)];
 if((($29<<24)>>24)==120|(($29<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $30=$6;
 var $vtable_i101=HEAP32[(($30)>>2)];
 var $vfn_i102=(($vtable_i101+28)|0);
 var $31=HEAP32[(($vfn_i102)>>2)];
 var $call_i103104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $32=HEAP32[(($__oe)>>2)];
 var $incdec_ptr28=(($32+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr28;
 HEAP8[($32)]=$call_i103104;
 var $33=HEAP8[($arrayidx17)];
 var $vtable_i109=HEAP32[(($30)>>2)];
 var $vfn_i110=(($vtable_i109+28)|0);
 var $34=HEAP32[(($vfn_i110)>>2)];
 var $call_i111112=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($8,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $incdec_ptr29=(($__nf_0+2)|0);
 var $35=HEAP32[(($__oe)>>2)];
 var $incdec_ptr32=(($35+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr32;
 HEAP8[($35)]=$call_i111112;
 var $__nf_1=$incdec_ptr29;label=29;break;
 case 29: 
 var $__nf_1;
 var $cmp_i_i128=($__nf_1|0)==($__ne|0);
 if($cmp_i_i128){label=32;break;}else{label=30;break;}
 case 30: 
 var $incdec_ptr_i_i13096=((($__ne)-(1))|0);
 var $cmp1_i_i13197=($__nf_1>>>0)<($incdec_ptr_i_i13096>>>0);
 if($cmp1_i_i13197){var $__first_addr_i_i120_098=$__nf_1;var $incdec_ptr_i_i13099=$incdec_ptr_i_i13096;label=31;break;}else{label=32;break;}
 case 31: 
 var $incdec_ptr_i_i13099;
 var $__first_addr_i_i120_098;
 var $36=HEAP8[($__first_addr_i_i120_098)];
 var $37=HEAP8[($incdec_ptr_i_i13099)];
 HEAP8[($__first_addr_i_i120_098)]=$37;
 HEAP8[($incdec_ptr_i_i13099)]=$36;
 var $incdec_ptr2_i_i133=(($__first_addr_i_i120_098+1)|0);
 var $incdec_ptr_i_i130=((($incdec_ptr_i_i13099)-(1))|0);
 var $cmp1_i_i131=($incdec_ptr2_i_i133>>>0)<($incdec_ptr_i_i130>>>0);
 if($cmp1_i_i131){var $__first_addr_i_i120_098=$incdec_ptr2_i_i133;var $incdec_ptr_i_i13099=$incdec_ptr_i_i130;label=31;break;}else{label=32;break;}
 case 32: 
 var $38=$15;
 var $vtable_i223=HEAP32[(($38)>>2)];
 var $vfn_i224=(($vtable_i223+16)|0);
 var $39=HEAP32[(($vfn_i224)>>2)];
 var $call_i225226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $cmp3792=($__nf_1>>>0)<($__ne>>>0);
 if($cmp3792){label=34;break;}else{label=40;break;}
 case 34: 
 var $arrayidx_i_i_i216=(($__s_i_i_i+1)|0);
 var $40=$6;
 var $__size__i23_i=(($__grouping+4)|0);
 var $__data__i21_i_i=(($__grouping+8)|0);
 var $__dc_093=0;var $__dg_094=0;var $__p_095=$__nf_1;label=35;break;
 case 35: 
 var $__p_095;
 var $__dg_094;
 var $__dc_093;
 var $41=HEAP8[($__size__i_i_i)];
 var $and_i_i_i199=$41&1;
 var $tobool_i_i_i200=(($and_i_i_i199<<24)>>24)==0;
 var $42=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i216_=($tobool_i_i_i200?$arrayidx_i_i_i216:$42);
 var $add_ptr_i219=(($arrayidx_i_i_i216_+$__dg_094)|0);
 var $43=HEAP8[($add_ptr_i219)];
 var $cmp41=(($43<<24)>>24)==0;
 if($cmp41){var $__dg_1=$__dg_094;var $__dc_1=$__dc_093;label=38;break;}else{label=36;break;}
 case 36: 
 var $44=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i216_100=($tobool_i_i_i200?$arrayidx_i_i_i216:$44);
 var $add_ptr_i=(($arrayidx_i_i_i216_100+$__dg_094)|0);
 var $45=HEAP8[($add_ptr_i)];
 var $conv45=(($45<<24)>>24);
 var $cmp46=($__dc_093|0)==($conv45|0);
 if($cmp46){label=37;break;}else{var $__dg_1=$__dg_094;var $__dc_1=$__dc_093;label=38;break;}
 case 37: 
 var $46=HEAP32[(($__oe)>>2)];
 var $incdec_ptr48=(($46+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr48;
 HEAP8[($46)]=$call_i225226;
 var $47=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($47&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 var $48=HEAP32[(($__size__i23_i)>>2)];
 var $shr_i_i62=$conv_i_i>>>1;
 var $cond_i=($tobool_i_i?$shr_i_i62:$48);
 var $sub=((($cond_i)-(1))|0);
 var $cmp50=($__dg_094>>>0)<($sub>>>0);
 var $inc=($cmp50&1);
 var $inc___dg_0=((($inc)+($__dg_094))|0);
 var $__dg_1=$inc___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $49=HEAP8[($__p_095)];
 var $vtable_i80=HEAP32[(($40)>>2)];
 var $vfn_i81=(($vtable_i80+28)|0);
 var $50=HEAP32[(($vfn_i81)>>2)];
 var $call_i8283=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($8,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $51=HEAP32[(($__oe)>>2)];
 var $incdec_ptr56=(($51+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr56;
 HEAP8[($51)]=$call_i8283;
 var $inc57=((($__dc_1)+(1))|0);
 var $incdec_ptr58=(($__p_095+1)|0);
 var $cmp37=($incdec_ptr58>>>0)<($__ne>>>0);
 if($cmp37){var $__dc_093=$inc57;var $__dg_094=$__dg_1;var $__p_095=$incdec_ptr58;label=35;break;}else{label=40;break;}
 case 40: 
 var $sub_ptr_lhs_cast59=$__nf_1;
 var $sub_ptr_rhs_cast60=$__nb;
 var $sub_ptr_sub61=((($sub_ptr_lhs_cast59)-($sub_ptr_rhs_cast60))|0);
 var $add_ptr62=(($__ob+$sub_ptr_sub61)|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $cmp_i_i=($add_ptr62|0)==($52|0);
 if($cmp_i_i){label=43;break;}else{label=41;break;}
 case 41: 
 var $incdec_ptr_i_i86=((($52)-(1))|0);
 var $cmp1_i_i87=($add_ptr62>>>0)<($incdec_ptr_i_i86>>>0);
 if($cmp1_i_i87){var $__first_addr_i_i_088=$add_ptr62;var $incdec_ptr_i_i89=$incdec_ptr_i_i86;label=42;break;}else{label=43;break;}
 case 42: 
 var $incdec_ptr_i_i89;
 var $__first_addr_i_i_088;
 var $53=HEAP8[($__first_addr_i_i_088)];
 var $54=HEAP8[($incdec_ptr_i_i89)];
 HEAP8[($__first_addr_i_i_088)]=$54;
 HEAP8[($incdec_ptr_i_i89)]=$53;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_088+1)|0);
 var $incdec_ptr_i_i=((($incdec_ptr_i_i89)-(1))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_088=$incdec_ptr2_i_i;var $incdec_ptr_i_i89=$incdec_ptr_i_i;label=42;break;}else{label=43;break;}
 case 43: 
 var $cmp65=($__np|0)==($__ne|0);
 if($cmp65){label=44;break;}else{label=45;break;}
 case 44: 
 var $55=HEAP32[(($__oe)>>2)];
 var $storemerge=$55;label=46;break;
 case 45: 
 var $sub_ptr_lhs_cast68=$__np;
 var $sub_ptr_rhs_cast69=$__nb;
 var $sub_ptr_sub70=((($sub_ptr_lhs_cast68)-($sub_ptr_rhs_cast69))|0);
 var $add_ptr71=(($__ob+$sub_ptr_sub70)|0);
 var $storemerge=$add_ptr71;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $__sbuf_=(($__s)|0);
 var $0=HEAP32[(($__sbuf_)>>2)];
 var $cmp=($0|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=0;
 label=19;break;
 case 3: 
 var $sub_ptr_lhs_cast=$__oe;
 var $sub_ptr_rhs_cast=$__ob;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $__width__i=(($__iob+12)|0);
 var $2=HEAP32[(($__width__i)>>2)];
 var $cmp1=($2|0)>($sub_ptr_sub|0);
 var $sub=((($2)-($sub_ptr_sub))|0);
 var $__ns_0=($cmp1?$sub:0);
 var $sub_ptr_lhs_cast4=$__op;
 var $sub_ptr_sub6=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast))|0);
 var $cmp7=($sub_ptr_sub6|0)>0;
 if($cmp7){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=$0;
 var $vtable_i49=HEAP32[(($3)>>2)];
 var $vfn_i50=(($vtable_i49+48)|0);
 var $4=HEAP32[(($vfn_i50)>>2)];
 var $call_i51=FUNCTION_TABLE[$4]($0,$__ob,$sub_ptr_sub6);
 var $cmp11=($call_i51|0)==($sub_ptr_sub6|0);
 if($cmp11){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 6: 
 var $cmp16=($__ns_0|0)>0;
 if($cmp16){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns_0,$__fl);
 var $__size__i_i_i=$__sp;
 var $6=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$6&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__data__i21_i_i=(($__sp+8)|0);
 var $7=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i=$7;label=10;break;
 case 9: 
 var $__s_i_i_i=$__sp;
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $cond_i_i=$arrayidx_i_i_i;label=10;break;
 case 10: 
 var $cond_i_i;
 var $8=$0;
 var $vtable_i70=HEAP32[(($8)>>2)];
 var $vfn_i71=(($vtable_i70+48)|0);
 var $9=HEAP32[(($vfn_i71)>>2)];
 var $call_i7273=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($0,$cond_i_i,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $cmp21=($call_i7273|0)==($__ns_0|0);
 if($cmp21){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $10=(($agg_result)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 ___resumeException($11$0)
 case 14: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $sub_ptr_sub28=((($sub_ptr_lhs_cast)-($sub_ptr_lhs_cast4))|0);
 var $cmp29=($sub_ptr_sub28|0)>0;
 if($cmp29){label=16;break;}else{label=18;break;}
 case 16: 
 var $12=$0;
 var $vtable_i=HEAP32[(($12)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $13=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$13]($0,$__op,$sub_ptr_sub28);
 var $cmp33=($call_i|0)==($sub_ptr_sub28|0);
 if($cmp33){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $14=(($agg_result)|0);
 HEAP32[(($14)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($__width__i)>>2)]=0;
 var $15=(($agg_result)|0);
 HEAP32[(($15)>>2)]=$0;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $ref_tmp=(sp)+(96);
 var $agg_tmp=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 var $incdec_ptr8_i=(($__fmtp_addr_113_i_ph+1)|0);
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 HEAP8[($incdec_ptr8_i)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+2)|0);
 var $and9_i=$0&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$0&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i5=($2|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 16: 
 var $4=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,22,$4,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $5=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$5&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $6=HEAP8[($arraydecay2)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i11)>>2)];
 var $9=(($8)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($9);
 var $10=(($__s)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($agg_tmp)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($__op)>>2)];
 var $14=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$13,$14,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $16=HEAP32[(($__locale__i)>>2)];
 var $17=(($16)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($17);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $ref_tmp=(sp)+(64);
 var $agg_tmp=(sp)+(72);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2440)];HEAP8[((($0)+(1))|0)]=HEAP8[(2441)];HEAP8[((($0)+(2))|0)]=HEAP8[(2442)];HEAP8[((($0)+(3))|0)]=HEAP8[(2443)];HEAP8[((($0)+(4))|0)]=HEAP8[(2444)];HEAP8[((($0)+(5))|0)]=HEAP8[(2445)];
 var $add_ptr=(($__fmt+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $1=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$1&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($__fmt+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$1&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+1)|0);
 var $and9_i=$1&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$1&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i5=($3|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 16: 
 var $5=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,12,$5,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $6=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$6&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $7=HEAP8[($arraydecay2)];
 if((($7<<24)>>24)==45|(($7<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($7<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $8=HEAP8[($arrayidx9_i)];
 if((($8<<24)>>24)==120|(($8<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $9=HEAP32[(($__locale__i11)>>2)];
 var $10=(($9)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($agg_tmp)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=HEAP32[(($__op)>>2)];
 var $15=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$14,$15,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($18);
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $ref_tmp=(sp)+(96);
 var $agg_tmp=(sp)+(104);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 var $incdec_ptr8_i=(($__fmtp_addr_113_i_ph+1)|0);
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 HEAP8[($incdec_ptr8_i)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+2)|0);
 var $and9_i=$0&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$0&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i5=($2|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 16: 
 var $4=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,23,$4,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $5=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$5&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $6=HEAP8[($arraydecay2)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i11)>>2)];
 var $9=(($8)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($9);
 var $10=(($__s)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($agg_tmp)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($__op)>>2)];
 var $14=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$13,$14,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $16=HEAP32[(($__locale__i)>>2)];
 var $17=(($16)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($17);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $ref_tmp51=(sp)+(128);
 var $ref_tmp55=(sp)+(136);
 var $agg_tmp=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&1024;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_1_i=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_1_i=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_1_i;
 var $and6_i=$0&260;
 var $and7_i=$0>>>14;
 var $cmp8_i=($and6_i|0)==260;
 if($cmp8_i){label=13;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr10_i=(($__fmtp_addr_1_i+1)|0);
 HEAP8[($__fmtp_addr_1_i)]=46;
 var $incdec_ptr11_i=(($__fmtp_addr_1_i+2)|0);
 HEAP8[($incdec_ptr10_i)]=42;
 if(($and6_i|0)==256){ label=10;break;}else if(($and6_i|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $1=$and7_i&1;
 var $tobool18_i=($1|0)==0;
 if($tobool18_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($incdec_ptr11_i)]=70;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 9: 
 HEAP8[($incdec_ptr11_i)]=102;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 10: 
 var $2=$and7_i&1;
 var $tobool25_i=($2|0)==0;
 if($tobool25_i){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($incdec_ptr11_i)]=69;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 12: 
 HEAP8[($incdec_ptr11_i)]=101;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 13: 
 var $3=$and7_i&1;
 var $tobool32_i59=($3|0)==0;
 if($tobool32_i59){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($__fmtp_addr_1_i)]=65;
 var $specify_precision_0_off0_ph_i56=0;label=19;break;
 case 15: 
 HEAP8[($__fmtp_addr_1_i)]=97;
 var $specify_precision_0_off0_ph_i56=0;label=19;break;
 case 16: 
 var $4=$and7_i&1;
 var $tobool32_i=($4|0)==0;
 if($tobool32_i){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($incdec_ptr11_i)]=71;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 18: 
 HEAP8[($incdec_ptr11_i)]=103;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i56;
 var $arraydecay3=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$arraydecay3;
 var $5=HEAP8[(276352)];
 var $guard_uninitialized_i=(($5<<24)>>24)==0;
 if($guard_uninitialized_i){label=20;break;}else{label=24;break;}
 case 20: 
 var $6=___cxa_guard_acquire(276352);
 var $tobool_i31=($6|0)==0;
 if($tobool_i31){label=24;break;}else{label=21;break;}
 case 21: 
 var $call_i32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((12216)>>2)]=$call_i32;
 label=24;break;
 case 23: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 ___resumeException($7$0)
 case 24: 
 var $8=HEAP32[((12216)>>2)];
 if($specify_precision_0_off0_ph_i56){label=25;break;}else{label=26;break;}
 case 25: 
 var $__precision__i=(($__iob+8)|0);
 var $9=HEAP32[(($__precision__i)>>2)];
 var $call7=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call7;label=27;break;
 case 26: 
 var $call10=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call10;label=27;break;
 case 27: 
 var $__nc_0;
 var $cmp=($__nc_0|0)>29;
 if($cmp){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre66=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $23=$_pre66;label=47;break;
 case 29: 
 var $10=HEAP8[(276352)];
 var $guard_uninitialized_i33=(($10<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i56){label=30;break;}else{label=38;break;}
 case 30: 
 if($guard_uninitialized_i33){label=31;break;}else{label=35;break;}
 case 31: 
 var $11=___cxa_guard_acquire(276352);
 var $tobool_i34=($11|0)==0;
 if($tobool_i34){label=35;break;}else{label=32;break;}
 case 32: 
 var $call_i36=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((12216)>>2)]=$call_i36;
 label=35;break;
 case 34: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $eh_lpad_body$1=$12$1;var $eh_lpad_body$0=$12$0;label=37;break;
 case 35: 
 var $13=HEAP32[((12216)>>2)];
 var $__precision__i108=(($__iob+8)|0);
 var $14=HEAP32[(($__precision__i108)>>2)];
 var $call19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$13,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call19;label=44;break; } else { label=36;break; }
 case 36: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $eh_lpad_body$1=$15$1;var $eh_lpad_body$0=$15$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $16=$eh_lpad_body$0;
 var $17=$eh_lpad_body$1;
 var $ehselector_slot_164=$17;var $exn_slot_165=$16;label=72;break;
 case 38: 
 if($guard_uninitialized_i33){label=39;break;}else{label=43;break;}
 case 39: 
 var $18=___cxa_guard_acquire(276352);
 var $tobool_i42=($18|0)==0;
 if($tobool_i42){label=43;break;}else{label=40;break;}
 case 40: 
 var $call_i44=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((12216)>>2)]=$call_i44;
 label=43;break;
 case 42: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $eh_lpad_body$1=$19$1;var $eh_lpad_body$0=$19$0;label=37;break;
 case 43: 
 var $20=HEAP32[((12216)>>2)];
 var $__precision__i111=(($__iob+8)|0);
 var $21=HEAP32[(($__precision__i111)>>2)];
 var $call27=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call27;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $22=HEAP32[(($__nb)>>2)];
 var $cmp29=($22|0)==0;
 if($cmp29){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$22;var $23=$22;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $23=$_pre;label=47;break;
 case 47: 
 var $23;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $add_ptr34=(($23+$__nc_2)|0);
 var $24=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i51=$24&176;
 if(($and_i51|0)==16){ label=48;break;}else if(($and_i51|0)==32){ var $retval_0_i=$add_ptr34;label=54;break;}else{label=53;break;}
 case 48: 
 var $25=HEAP8[($23)];
 if((($25<<24)>>24)==45|(($25<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $add_ptr_i=(($23+1)|0);
 var $retval_0_i=$add_ptr_i;label=54;break;
 case 50: 
 var $cmp4_i=($__nc_2|0)>1;
 var $cmp7_i=(($25<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $arrayidx9_i=(($23+1)|0);
 var $26=HEAP8[($arrayidx9_i)];
 if((($26<<24)>>24)==120|(($26<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $add_ptr17_i=(($23+2)|0);
 var $retval_0_i=$add_ptr17_i;label=54;break;
 case 53: 
 var $retval_0_i=$23;label=54;break;
 case 54: 
 var $retval_0_i;
 var $arraydecay37=(($__o)|0);
 var $cmp40=($23|0)==($arraydecay3|0);
 if($cmp40){var $__ob_0=$arraydecay37;var $__obh_sroa_0_1=0;var $30=$arraydecay3;label=59;break;}else{label=55;break;}
 case 55: 
 var $mul=$__nc_2<<1;
 var $call45=_malloc($mul);
 var $cmp46=($call45|0)==0;
 if($cmp46){label=56;break;}else{var $__ob_0=$call45;var $__obh_sroa_0_1=$call45;var $30=$23;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre67=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $30=$_pre67;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 var $29=$27$1;
 var $exn_slot_0=$28;var $ehselector_slot_0=$29;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $30;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp51,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30,$retval_0_i,$add_ptr34,$__ob_0,$__op,$__oe,$ref_tmp51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $__locale__i54=(($ref_tmp51)|0);
 var $31=HEAP32[(($__locale__i54)>>2)];
 var $32=(($31)|0);
 var $call_i55=__ZNSt3__114__shared_count16__release_sharedEv($32);
 var $33=(($__s)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($agg_tmp)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=HEAP32[(($__op)>>2)];
 var $37=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($ref_tmp55,$agg_tmp,$__ob_0,$36,$37,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $38=(($ref_tmp55)|0);
 var $39=HEAP32[(($38)>>2)];
 HEAP32[(($33)>>2)]=$39;
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 var $tobool_i_i_i196=($__obh_sroa_0_1|0)==0;
 if($tobool_i_i_i196){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $tobool_i_i_i227=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i227){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 var $42=$41$0;
 var $43=$41$1;
 var $__locale__i=(($ref_tmp51)|0);
 var $44=HEAP32[(($__locale__i)>>2)];
 var $45=(($44)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($45);
 var $exn_slot_0=$42;var $ehselector_slot_0=$43;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $tobool_i_i_i97=($__obh_sroa_0_2|0)==0;
 if($tobool_i_i_i97){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $tobool_i_i_i=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_164=$ehselector_slot_0;var $exn_slot_165=$exn_slot_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $ehselector_slot_164=$ehselector_slot_0;var $exn_slot_165=$exn_slot_0;label=72;break;
 case 72: 
 var $exn_slot_165;
 var $ehselector_slot_164;
 var $lpad_val$0=$exn_slot_165;
 var $lpad_val$1=0;
 var $lpad_val58$0=$lpad_val$0;
 var $lpad_val58$1=$ehselector_slot_164;
 ___resumeException($lpad_val58$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $arraydecay=(($__va)|0);
 var $arraydecay1=$__va;
 HEAP32[(($arraydecay1)>>2)]=varrp;HEAP32[((($arraydecay1)+(4))>>2)]=0;
 var $call=_uselocale($__l);
 var $call3=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$arraydecay) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $tobool_i_i_i41=($call|0)==0;
 if($tobool_i_i_i41){label=5;break;}else{label=3;break;}
 case 3: 
 var $call6_i_i_i46=(function() { try { __THREW__ = 0; return _uselocale($call) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $call3;
 case 6: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 var $tobool_i_i_i=($call|0)==0;
 if($tobool_i_i_i){label=9;break;}else{label=7;break;}
 case 7: 
 var $call6_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1,0); var $2$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($1$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i90=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272);
 label=3;break;
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i89=($6|0)==0;
 if($tobool_i_i_i89){label=5;break;}else{label=6;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 6: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=$__p_i_i_i90;
 var $11=HEAP32[((13264)>>2)];
 var $cmp_i_i_i92=($11|0)==-1;
 if($cmp_i_i_i92){label=8;break;}else{label=7;break;}
 case 7: 
 var $ref_tmp_i_sroa_0_0__idx_i_i93=(($__p_i_i_i90)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i93)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i94=(($__p_i_i_i90+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i94)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i95=(($__p_i_i_i90+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i95)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$10,272);
 label=8;break;
 case 8: 
 var $12=HEAP32[((13268)>>2)];
 var $sub_i_i97=((($12)-(1))|0);
 var $__end__i_i_i_i98=(($9+12)|0);
 var $13=HEAP32[(($__end__i_i_i_i98)>>2)];
 var $__begin__i_i_i_i99=(($9+8)|0);
 var $14=HEAP32[(($__begin__i_i_i_i99)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i100=$13;
 var $sub_ptr_rhs_cast_i_i_i_i101=$14;
 var $sub_ptr_sub_i_i_i_i102=((($sub_ptr_lhs_cast_i_i_i_i100)-($sub_ptr_rhs_cast_i_i_i_i101))|0);
 var $sub_ptr_div_i_i_i_i103=$sub_ptr_sub_i_i_i_i102>>2;
 var $cmp_i_i1_i104=($sub_ptr_div_i_i_i_i103>>>0)>($sub_i_i97>>>0);
 if($cmp_i_i1_i104){label=9;break;}else{label=10;break;}
 case 9: 
 var $arrayidx_i_i_i_i106=(($14+($sub_i_i97<<2))|0);
 var $15=HEAP32[(($arrayidx_i_i_i_i106)>>2)];
 var $tobool_i_i_i107=($15|0)==0;
 if($tobool_i_i_i107){label=10;break;}else{label=11;break;}
 case 10: 
 var $exception_i_i109=___cxa_allocate_exception(4);
 var $16=$exception_i_i109;
 __ZNSt8bad_castC2Ev($16);
 ___cxa_throw($exception_i_i109,8536,(376));
 throw "Reached an unreachable!";
 case 11: 
 var $17=$15;
 var $18=$15;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $19=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$19]($__grouping,$17);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $20=HEAP8[($__nb)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $21=$6;
 var $vtable_i130=HEAP32[(($21)>>2)];
 var $vfn_i131=(($vtable_i130+28)|0);
 var $22=HEAP32[(($vfn_i131)>>2)];
 var $call_i132133=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($8,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $incdec_ptr=(($__nb+1)|0);
 var $23=HEAP32[(($__oe)>>2)];
 var $incdec_ptr5=(($23+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr5;
 HEAP8[($23)]=$call_i132133;
 var $__nf_0=$incdec_ptr;label=20;break;
 case 14: 
 var $lpad_loopexit122$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit122$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit122$1;var $eh_lpad_body$0=$lpad_loopexit122$0;label=19;break;
 case 15: 
 var $lpad_loopexit132$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit132$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit132$1;var $eh_lpad_body$0=$lpad_loopexit132$0;label=19;break;
 case 16: 
 var $lpad_loopexit143$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit143$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit143$1;var $eh_lpad_body$0=$lpad_loopexit143$0;label=19;break;
 case 17: 
 var $lpad_loopexit149$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit149$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit149$1;var $eh_lpad_body$0=$lpad_loopexit149$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit150$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit150$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit150$1;var $eh_lpad_body$0=$lpad_nonloopexit150$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $sub_ptr_lhs_cast=$__ne;
 var $sub_ptr_rhs_cast=$__nf_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp6=($sub_ptr_sub|0)>1;
 if($cmp6){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $24=HEAP8[($__nf_0)];
 var $cmp8=(($24<<24)>>24)==48;
 if($cmp8){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $arrayidx10=(($__nf_0+1)|0);
 var $25=HEAP8[($arrayidx10)];
 if((($25<<24)>>24)==120|(($25<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $26=$6;
 var $vtable_i137=HEAP32[(($26)>>2)];
 var $vfn_i138=(($vtable_i137+28)|0);
 var $27=HEAP32[(($vfn_i138)>>2)];
 var $call_i139140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $28=HEAP32[(($__oe)>>2)];
 var $incdec_ptr21=(($28+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr21;
 HEAP8[($28)]=$call_i139140;
 var $incdec_ptr22=(($__nf_0+2)|0);
 var $29=HEAP8[($arrayidx10)];
 var $vtable_i145=HEAP32[(($26)>>2)];
 var $vfn_i146=(($vtable_i145+28)|0);
 var $30=HEAP32[(($vfn_i146)>>2)];
 var $call_i147148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($8,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $31=HEAP32[(($__oe)>>2)];
 var $incdec_ptr25=(($31+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr25;
 HEAP8[($31)]=$call_i147148;
 var $__ns_0=$incdec_ptr22;label=26;break;
 case 26: 
 var $__ns_0;
 var $cmp26=($__ns_0>>>0)<($__ne>>>0);
 if($cmp26){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$incdec_ptr22;label=42;break;}
 case 27: 
 var $32=HEAP8[($__ns_0)];
 var $33=HEAP8[(276352)];
 var $guard_uninitialized_i=(($33<<24)>>24)==0;
 if($guard_uninitialized_i){label=28;break;}else{label=32;break;}
 case 28: 
 var $34=___cxa_guard_acquire(276352);
 var $tobool_i=($34|0)==0;
 if($tobool_i){label=32;break;}else{label=29;break;}
 case 29: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((12216)>>2)]=$call_i;
 label=32;break;
 case 31: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $eh_lpad_body$1=$35$1;var $eh_lpad_body$0=$35$0;label=19;break;
 case 32: 
 var $36=HEAP32[((12216)>>2)];
 var $conv27=(($32<<24)>>24);
 var $call31=(function() { try { __THREW__ = 0; return _isxdigit($conv27,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $tobool=($call31|0)==0;
 var $incdec_ptr34=(($__ns_0+1)|0);
 if($tobool){var $__ns_2=$__ns_0;var $__nf_1=$incdec_ptr22;label=42;break;}else{var $__ns_0=$incdec_ptr34;label=26;break;}
 case 34: 
 var $__ns_1;
 var $cmp36=($__ns_1>>>0)<($__ne>>>0);
 if($cmp36){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $37=HEAP8[($__ns_1)];
 var $38=HEAP8[(276352)];
 var $guard_uninitialized_i112=(($38<<24)>>24)==0;
 if($guard_uninitialized_i112){label=36;break;}else{label=40;break;}
 case 36: 
 var $39=___cxa_guard_acquire(276352);
 var $tobool_i113=($39|0)==0;
 if($tobool_i113){label=40;break;}else{label=37;break;}
 case 37: 
 var $call_i115=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((12216)>>2)]=$call_i115;
 label=40;break;
 case 39: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 var $eh_lpad_body$1=$40$1;var $eh_lpad_body$0=$40$0;label=19;break;
 case 40: 
 var $41=HEAP32[((12216)>>2)];
 var $conv38=(($37<<24)>>24);
 var $call42=(function() { try { __THREW__ = 0; return _isdigit($conv38,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $tobool43=($call42|0)==0;
 var $incdec_ptr47=(($__ns_1+1)|0);
 if($tobool43){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$incdec_ptr47;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $__s_i_i_i=$__grouping;
 var $__size__i_i_i=$__grouping;
 var $42=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($42&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=44;break;}else{label=43;break;}
 case 43: 
 var $__size__i23_i_i=(($__grouping+4)|0);
 var $43=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$43;label=45;break;
 case 44: 
 var $shr_i_i_i87=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i87;label=45;break;
 case 45: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=46;break;}else{label=50;break;}
 case 46: 
 var $44=HEAP32[(($__oe)>>2)];
 var $45=$6;
 var $vtable_i163=HEAP32[(($45)>>2)];
 var $vfn_i164=(($vtable_i163+32)|0);
 var $46=HEAP32[(($vfn_i164)>>2)];
 var $call_i165166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($8,$__nf_1,$__ns_2,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $sub_ptr_lhs_cast54=$__ns_2;
 var $sub_ptr_rhs_cast55=$__nf_1;
 var $sub_ptr_sub56=((($sub_ptr_lhs_cast54)-($sub_ptr_rhs_cast55))|0);
 var $47=HEAP32[(($__oe)>>2)];
 var $add_ptr=(($47+$sub_ptr_sub56)|0);
 HEAP32[(($__oe)>>2)]=$add_ptr;
 label=48;break;
 case 48: 
 var $cmp94126=($__ns_2>>>0)<($__ne>>>0);
 if($cmp94126){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $48=$6;
 var $__nf_2127=$__ns_2;label=64;break;
 case 50: 
 var $cmp_i_i=($__nf_1|0)==($__ns_2|0);
 if($cmp_i_i){label=53;break;}else{label=51;break;}
 case 51: 
 var $incdec_ptr_i_i139=((($__ns_2)-(1))|0);
 var $cmp1_i_i140=($__nf_1>>>0)<($incdec_ptr_i_i139>>>0);
 if($cmp1_i_i140){var $__first_addr_i_i_0141=$__nf_1;var $incdec_ptr_i_i142=$incdec_ptr_i_i139;label=52;break;}else{label=53;break;}
 case 52: 
 var $incdec_ptr_i_i142;
 var $__first_addr_i_i_0141;
 var $49=HEAP8[($__first_addr_i_i_0141)];
 var $50=HEAP8[($incdec_ptr_i_i142)];
 HEAP8[($__first_addr_i_i_0141)]=$50;
 HEAP8[($incdec_ptr_i_i142)]=$49;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_0141+1)|0);
 var $incdec_ptr_i_i=((($incdec_ptr_i_i142)-(1))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_0141=$incdec_ptr2_i_i;var $incdec_ptr_i_i142=$incdec_ptr_i_i;label=52;break;}else{label=53;break;}
 case 53: 
 var $51=$15;
 var $vtable_i178=HEAP32[(($51)>>2)];
 var $vfn_i179=(($vtable_i178+16)|0);
 var $52=HEAP32[(($vfn_i179)>>2)];
 var $call_i180181=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $cmp62135=($__nf_1>>>0)<($__ns_2>>>0);
 if($cmp62135){label=55;break;}else{label=61;break;}
 case 55: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $__size__i23_i=(($__grouping+4)|0);
 var $__data__i21_i_i250=(($__grouping+8)|0);
 var $53=$6;
 var $__dc_0136=0;var $__dg_0137=0;var $__p_0138=$__nf_1;label=56;break;
 case 56: 
 var $__p_0138;
 var $__dg_0137;
 var $__dc_0136;
 var $54=HEAP8[($__size__i_i_i)];
 var $and_i_i_i200=$54&1;
 var $tobool_i_i_i201=(($and_i_i_i200<<24)>>24)==0;
 var $55=HEAP32[(($__data__i21_i_i250)>>2)];
 var $arrayidx_i_i_i_=($tobool_i_i_i201?$arrayidx_i_i_i:$55);
 var $add_ptr_i=(($arrayidx_i_i_i_+$__dg_0137)|0);
 var $56=HEAP8[($add_ptr_i)];
 var $cmp67=(($56<<24)>>24)>0;
 if($cmp67){label=57;break;}else{var $__dg_1=$__dg_0137;var $__dc_1=$__dc_0136;label=59;break;}
 case 57: 
 var $57=HEAP32[(($__data__i21_i_i250)>>2)];
 var $arrayidx_i_i_i_160=($tobool_i_i_i201?$arrayidx_i_i_i:$57);
 var $add_ptr_i262=(($arrayidx_i_i_i_160+$__dg_0137)|0);
 var $58=HEAP8[($add_ptr_i262)];
 var $conv71=(($58<<24)>>24);
 var $cmp72=($__dc_0136|0)==($conv71|0);
 if($cmp72){label=58;break;}else{var $__dg_1=$__dg_0137;var $__dc_1=$__dc_0136;label=59;break;}
 case 58: 
 var $59=HEAP32[(($__oe)>>2)];
 var $incdec_ptr74=(($59+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr74;
 HEAP8[($59)]=$call_i180181;
 var $60=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($60&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 var $61=HEAP32[(($__size__i23_i)>>2)];
 var $shr_i_i88=$conv_i_i>>>1;
 var $cond_i=($tobool_i_i?$shr_i_i88:$61);
 var $sub=((($cond_i)-(1))|0);
 var $cmp76=($__dg_0137>>>0)<($sub>>>0);
 var $inc=($cmp76&1);
 var $inc___dg_0=((($inc)+($__dg_0137))|0);
 var $__dg_1=$inc___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $62=HEAP8[($__p_0138)];
 var $vtable_i290=HEAP32[(($53)>>2)];
 var $vfn_i291=(($vtable_i290+28)|0);
 var $63=HEAP32[(($vfn_i291)>>2)];
 var $call_i292293=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($8,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $64=HEAP32[(($__oe)>>2)];
 var $incdec_ptr82=(($64+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr82;
 HEAP8[($64)]=$call_i292293;
 var $inc83=((($__dc_1)+(1))|0);
 var $incdec_ptr85=(($__p_0138+1)|0);
 var $cmp62=($incdec_ptr85>>>0)<($__ns_2>>>0);
 if($cmp62){var $__dc_0136=$inc83;var $__dg_0137=$__dg_1;var $__p_0138=$incdec_ptr85;label=56;break;}else{label=61;break;}
 case 61: 
 var $sub_ptr_lhs_cast87=$__nf_1;
 var $sub_ptr_rhs_cast88=$__nb;
 var $sub_ptr_sub89=((($sub_ptr_lhs_cast87)-($sub_ptr_rhs_cast88))|0);
 var $add_ptr90=(($__ob+$sub_ptr_sub89)|0);
 var $65=HEAP32[(($__oe)>>2)];
 var $cmp_i_i278=($add_ptr90|0)==($65|0);
 if($cmp_i_i278){label=48;break;}else{label=62;break;}
 case 62: 
 var $incdec_ptr_i_i280128=((($65)-(1))|0);
 var $cmp1_i_i281129=($add_ptr90>>>0)<($incdec_ptr_i_i280128>>>0);
 if($cmp1_i_i281129){var $__first_addr_i_i270_0130=$add_ptr90;var $incdec_ptr_i_i280131=$incdec_ptr_i_i280128;label=63;break;}else{label=48;break;}
 case 63: 
 var $incdec_ptr_i_i280131;
 var $__first_addr_i_i270_0130;
 var $66=HEAP8[($__first_addr_i_i270_0130)];
 var $67=HEAP8[($incdec_ptr_i_i280131)];
 HEAP8[($__first_addr_i_i270_0130)]=$67;
 HEAP8[($incdec_ptr_i_i280131)]=$66;
 var $incdec_ptr2_i_i283=(($__first_addr_i_i270_0130+1)|0);
 var $incdec_ptr_i_i280=((($incdec_ptr_i_i280131)-(1))|0);
 var $cmp1_i_i281=($incdec_ptr2_i_i283>>>0)<($incdec_ptr_i_i280>>>0);
 if($cmp1_i_i281){var $__first_addr_i_i270_0130=$incdec_ptr2_i_i283;var $incdec_ptr_i_i280131=$incdec_ptr_i_i280;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2127;
 var $68=HEAP8[($__nf_2127)];
 var $cmp97=(($68<<24)>>24)==46;
 if($cmp97){label=65;break;}else{label=67;break;}
 case 65: 
 var $69=$15;
 var $vtable_i214=HEAP32[(($69)>>2)];
 var $vfn_i215=(($vtable_i214+12)|0);
 var $70=HEAP32[(($vfn_i215)>>2)];
 var $call_i216217=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $71=HEAP32[(($__oe)>>2)];
 var $incdec_ptr101=(($71+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr101;
 HEAP8[($71)]=$call_i216217;
 var $incdec_ptr102=(($__nf_2127+1)|0);
 var $__nf_3=$incdec_ptr102;label=69;break;
 case 67: 
 var $vtable_i171=HEAP32[(($48)>>2)];
 var $vfn_i172=(($vtable_i171+28)|0);
 var $72=HEAP32[(($vfn_i172)>>2)];
 var $call_i173174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($8,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $73=HEAP32[(($__oe)>>2)];
 var $incdec_ptr106=(($73+1)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr106;
 HEAP8[($73)]=$call_i173174;
 var $incdec_ptr109=(($__nf_2127+1)|0);
 var $cmp94=($incdec_ptr109>>>0)<($__ne>>>0);
 if($cmp94){var $__nf_2127=$incdec_ptr109;label=64;break;}else{var $__nf_3=$incdec_ptr109;label=69;break;}
 case 69: 
 var $__nf_3;
 var $74=HEAP32[(($__oe)>>2)];
 var $75=$6;
 var $vtable_i154=HEAP32[(($75)>>2)];
 var $vfn_i155=(($vtable_i154+32)|0);
 var $76=HEAP32[(($vfn_i155)>>2)];
 var $call_i156157=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($8,$__nf_3,$__ne,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $sub_ptr_rhs_cast114=$__nf_3;
 var $sub_ptr_sub115=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast114))|0);
 var $77=HEAP32[(($__oe)>>2)];
 var $add_ptr116=(($77+$sub_ptr_sub115)|0);
 HEAP32[(($__oe)>>2)]=$add_ptr116;
 var $cmp117=($__np|0)==($__ne|0);
 if($cmp117){var $storemerge=$add_ptr116;label=72;break;}else{label=71;break;}
 case 71: 
 var $sub_ptr_lhs_cast120=$__np;
 var $sub_ptr_rhs_cast121=$__nb;
 var $sub_ptr_sub122=((($sub_ptr_lhs_cast120)-($sub_ptr_rhs_cast121))|0);
 var $add_ptr123=(($__ob+$sub_ptr_sub122)|0);
 var $storemerge=$add_ptr123;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $ref_tmp49=(sp)+(128);
 var $ref_tmp53=(sp)+(136);
 var $agg_tmp=(sp)+(144);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&1024;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_1_i=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_1_i=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_1_i;
 var $and6_i=$0&260;
 var $and7_i=$0>>>14;
 var $cmp8_i=($and6_i|0)==260;
 if($cmp8_i){label=13;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr10_i=(($__fmtp_addr_1_i+1)|0);
 HEAP8[($__fmtp_addr_1_i)]=46;
 var $incdec_ptr11_i=(($__fmtp_addr_1_i+2)|0);
 HEAP8[($incdec_ptr10_i)]=42;
 HEAP8[($incdec_ptr11_i)]=76;
 var $scevgep=(($__fmtp_addr_1_i+3)|0);
 if(($and6_i|0)==256){ label=10;break;}else if(($and6_i|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $1=$and7_i&1;
 var $tobool18_i=($1|0)==0;
 if($tobool18_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 10: 
 var $2=$and7_i&1;
 var $tobool25_i=($2|0)==0;
 if($tobool25_i){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 13: 
 HEAP8[($__fmtp_addr_1_i)]=76;
 var $scevgep60=(($__fmtp_addr_1_i+1)|0);
 var $3=$and7_i&1;
 var $tobool32_i64=($3|0)==0;
 if($tobool32_i64){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep60)]=65;
 var $specify_precision_0_off0_ph_i61=0;label=19;break;
 case 15: 
 HEAP8[($scevgep60)]=97;
 var $specify_precision_0_off0_ph_i61=0;label=19;break;
 case 16: 
 var $4=$and7_i&1;
 var $tobool32_i=($4|0)==0;
 if($tobool32_i){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i61;
 var $arraydecay3=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$arraydecay3;
 var $5=HEAP8[(276352)];
 var $guard_uninitialized_i=(($5<<24)>>24)==0;
 if($guard_uninitialized_i){label=20;break;}else{label=24;break;}
 case 20: 
 var $6=___cxa_guard_acquire(276352);
 var $tobool_i30=($6|0)==0;
 if($tobool_i30){label=24;break;}else{label=21;break;}
 case 21: 
 var $call_i31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((12216)>>2)]=$call_i31;
 label=24;break;
 case 23: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 ___resumeException($7$0)
 case 24: 
 var $8=HEAP32[((12216)>>2)];
 if($specify_precision_0_off0_ph_i61){label=25;break;}else{label=26;break;}
 case 25: 
 var $__precision__i=(($__iob+8)|0);
 var $9=HEAP32[(($__precision__i)>>2)];
 var $call7=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call7;label=27;break;
 case 26: 
 var $call10=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call10;label=27;break;
 case 27: 
 var $__nc_0;
 var $cmp=($__nc_0|0)>29;
 if($cmp){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre58=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $22=$_pre58;label=47;break;
 case 29: 
 var $10=HEAP8[(276352)];
 var $guard_uninitialized_i32=(($10<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i61){label=30;break;}else{label=38;break;}
 case 30: 
 if($guard_uninitialized_i32){label=31;break;}else{label=35;break;}
 case 31: 
 var $11=___cxa_guard_acquire(276352);
 var $tobool_i33=($11|0)==0;
 if($tobool_i33){label=35;break;}else{label=32;break;}
 case 32: 
 var $call_i35=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((12216)>>2)]=$call_i35;
 label=35;break;
 case 34: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $eh_lpad_body$1=$12$1;var $eh_lpad_body$0=$12$0;label=37;break;
 case 35: 
 var $13=HEAP32[((12216)>>2)];
 var $__precision__i106=(($__iob+8)|0);
 var $14=HEAP32[(($__precision__i106)>>2)];
 var $call19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$13,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call19;label=44;break; } else { label=36;break; }
 case 36: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $eh_lpad_body$1=$15$1;var $eh_lpad_body$0=$15$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $16=$eh_lpad_body$0;
 var $17=$eh_lpad_body$1;
 var $ehselector_slot_156=$17;var $exn_slot_157=$16;label=72;break;
 case 38: 
 if($guard_uninitialized_i32){label=39;break;}else{label=43;break;}
 case 39: 
 var $18=___cxa_guard_acquire(276352);
 var $tobool_i41=($18|0)==0;
 if($tobool_i41){label=43;break;}else{label=40;break;}
 case 40: 
 var $call_i43=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((12216)>>2)]=$call_i43;
 label=43;break;
 case 42: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $eh_lpad_body$1=$19$1;var $eh_lpad_body$0=$19$0;label=37;break;
 case 43: 
 var $20=HEAP32[((12216)>>2)];
 var $call25=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call25;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $21=HEAP32[(($__nb)>>2)];
 var $cmp27=($21|0)==0;
 if($cmp27){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$21;var $22=$21;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $22=$_pre;label=47;break;
 case 47: 
 var $22;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $add_ptr32=(($22+$__nc_2)|0);
 var $23=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i50=$23&176;
 if(($and_i50|0)==16){ label=48;break;}else if(($and_i50|0)==32){ var $retval_0_i=$add_ptr32;label=54;break;}else{label=53;break;}
 case 48: 
 var $24=HEAP8[($22)];
 if((($24<<24)>>24)==45|(($24<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $add_ptr_i=(($22+1)|0);
 var $retval_0_i=$add_ptr_i;label=54;break;
 case 50: 
 var $cmp4_i=($__nc_2|0)>1;
 var $cmp7_i=(($24<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $arrayidx9_i=(($22+1)|0);
 var $25=HEAP8[($arrayidx9_i)];
 if((($25<<24)>>24)==120|(($25<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $add_ptr17_i=(($22+2)|0);
 var $retval_0_i=$add_ptr17_i;label=54;break;
 case 53: 
 var $retval_0_i=$22;label=54;break;
 case 54: 
 var $retval_0_i;
 var $arraydecay35=(($__o)|0);
 var $cmp38=($22|0)==($arraydecay3|0);
 if($cmp38){var $__ob_0=$arraydecay35;var $__obh_sroa_0_1=0;var $29=$arraydecay3;label=59;break;}else{label=55;break;}
 case 55: 
 var $mul=$__nc_2<<1;
 var $call43=_malloc($mul);
 var $cmp44=($call43|0)==0;
 if($cmp44){label=56;break;}else{var $__ob_0=$call43;var $__obh_sroa_0_1=$call43;var $29=$22;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre59=HEAP32[(($__nb)>>2)];
 var $__ob_0=0;var $__obh_sroa_0_1=0;var $29=$_pre59;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $27=$26$0;
 var $28=$26$1;
 var $exn_slot_0=$27;var $ehselector_slot_0=$28;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $29;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp49,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($29,$retval_0_i,$add_ptr32,$__ob_0,$__op,$__oe,$ref_tmp49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $__locale__i53=(($ref_tmp49)|0);
 var $30=HEAP32[(($__locale__i53)>>2)];
 var $31=(($30)|0);
 var $call_i54=__ZNSt3__114__shared_count16__release_sharedEv($31);
 var $32=(($__s)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($agg_tmp)|0);
 HEAP32[(($34)>>2)]=$33;
 var $35=HEAP32[(($__op)>>2)];
 var $36=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($ref_tmp53,$agg_tmp,$__ob_0,$35,$36,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $37=(($ref_tmp53)|0);
 var $38=HEAP32[(($37)>>2)];
 HEAP32[(($32)>>2)]=$38;
 var $39=(($agg_result)|0);
 HEAP32[(($39)>>2)]=$38;
 var $tobool_i_i_i191=($__obh_sroa_0_1|0)==0;
 if($tobool_i_i_i191){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__obh_sroa_0_1);
 label=64;break;
 case 64: 
 var $tobool_i_i_i222=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i222){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 var $41=$40$0;
 var $42=$40$1;
 var $__locale__i=(($ref_tmp49)|0);
 var $43=HEAP32[(($__locale__i)>>2)];
 var $44=(($43)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($44);
 var $exn_slot_0=$41;var $ehselector_slot_0=$42;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $tobool_i_i_i95=($__obh_sroa_0_2|0)==0;
 if($tobool_i_i_i95){label=70;break;}else{label=69;break;}
 case 69: 
 _free($__obh_sroa_0_2);
 label=70;break;
 case 70: 
 var $tobool_i_i_i=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_156=$ehselector_slot_0;var $exn_slot_157=$exn_slot_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $ehselector_slot_156=$ehselector_slot_0;var $exn_slot_157=$exn_slot_0;label=72;break;
 case 72: 
 var $exn_slot_157;
 var $ehselector_slot_156;
 var $lpad_val$0=$exn_slot_157;
 var $lpad_val$1=0;
 var $lpad_val56$0=$lpad_val$0;
 var $lpad_val56$1=$ehselector_slot_156;
 ___resumeException($lpad_val56$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $ref_tmp=(sp)+(88);
 var $agg_tmp=(sp)+(96);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2448)];HEAP8[((($0)+(1))|0)]=HEAP8[(2449)];HEAP8[((($0)+(2))|0)]=HEAP8[(2450)];HEAP8[((($0)+(3))|0)]=HEAP8[(2451)];HEAP8[((($0)+(4))|0)]=HEAP8[(2452)];HEAP8[((($0)+(5))|0)]=HEAP8[(2453)];
 var $arraydecay=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i8=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i8;
 label=6;break;
 case 5: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 6: 
 var $4=HEAP32[((12216)>>2)];
 var $call3=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay,20,$4,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr=(($__nar+$call3)|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $5=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$5&176;
 if(($and_i|0)==32){ var $retval_0_i=$add_ptr;label=13;break;}else if(($and_i|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $6=HEAP8[($arraydecay)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=13;break;
 case 9: 
 var $cmp4_i=($call3|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=13;break;
 case 12: 
 var $retval_0_i=$arraydecay;label=13;break;
 case 13: 
 var $retval_0_i;
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($10|0)==-1;
 if($cmp_i_i_i){label=15;break;}else{label=14;break;}
 case 14: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$9,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $11=HEAP32[((13652)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $arrayidx_i_i_i_i=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=17;break;}else{label=19;break;}
 case 17: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $16=$14;
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i11=__ZNSt3__114__shared_count16__release_sharedEv($18);
 var $arraydecay9=(($__o)|0);
 var $19=$14;
 var $vtable_i=HEAP32[(($19)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $20=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$20]($16,$arraydecay,$add_ptr,$arraydecay9);
 var $add_ptr13=(($__o+$call3)|0);
 var $cmp=($retval_0_i|0)==($add_ptr|0);
 if($cmp){var $__op_0=$add_ptr13;label=22;break;}else{label=21;break;}
 case 20: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 var $22=HEAP32[(($__locale__i)>>2)];
 var $23=(($22)|0);
 var $call_i13=__ZNSt3__114__shared_count16__release_sharedEv($23);
 ___resumeException($21$0)
 case 21: 
 var $sub_ptr_rhs_cast=$__nar;
 var $sub_ptr_lhs_cast16=$retval_0_i;
 var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast))|0);
 var $add_ptr19=(($__o+$sub_ptr_sub18)|0);
 var $__op_0=$add_ptr19;label=22;break;
 case 22: 
 var $__op_0;
 var $24=(($__s)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_tmp)|0);
 HEAP32[(($26)>>2)]=$25;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay9,$__op_0,$add_ptr13,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $agg_tmp=(sp)+(16);
 var $ref_tmp=(sp)+(24);
 var $__nm=(sp)+(32);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and=$0&1;
 var $cmp=($and|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $1=$this;
 var $vtable=HEAP32[(($1)>>2)];
 var $vfn=(($vtable+24)|0);
 var $2=HEAP32[(($vfn)>>2)];
 var $3=(($__s)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp)|0);
 HEAP32[(($5)>>2)]=$4;
 var $conv=($__v&1);
 FUNCTION_TABLE[$2]($agg_result,$this,$agg_tmp,$__iob,$__fl,$conv);
 label=32;break;
 case 3: 
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $6=HEAP32[(($__locale__i)>>2)];
 var $7=$__p_i_i_i;
 var $8=HEAP32[((13256)>>2)];
 var $cmp_i_i_i=($8|0)==-1;
 if($cmp_i_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$7,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $9=HEAP32[((13260)>>2)];
 var $sub_i_i=((($9)-(1))|0);
 var $__end__i_i_i_i=(($6+12)|0);
 var $10=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($6+8)|0);
 var $11=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$10;
 var $sub_ptr_rhs_cast_i_i_i_i=$11;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $arrayidx_i_i_i_i=(($11+($sub_i_i<<2))|0);
 var $12=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i9=($12|0)==0;
 if($tobool_i_i_i9){label=7;break;}else{label=9;break;}
 case 7: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $13=$exception_i_i;
 __ZNSt8bad_castC2Ev($13);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $14=$12;
 var $15=HEAP32[(($__locale__i)>>2)];
 var $16=(($15)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($16);
 var $17=$12;
 var $vtable_i=HEAP32[(($17)>>2)];
 if($__v){label=10;break;}else{label=11;break;}
 case 10: 
 var $vfn_i=(($vtable_i+24)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($__nm,$14);
 label=12;break;
 case 11: 
 var $vfn_i22=(($vtable_i+28)|0);
 var $19=HEAP32[(($vfn_i22)>>2)];
 FUNCTION_TABLE[$19]($__nm,$14);
 label=12;break;
 case 12: 
 var $__size__i_i_i=$__nm;
 var $20=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$20&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=14;break;}else{label=13;break;}
 case 13: 
 var $__data__i21_i_i=(($__nm+8)|0);
 var $21=HEAP32[(($__data__i21_i_i)>>2)];
 var $__data__i_i_i75_pre=(($__nm+4)|0);
 var $__i_sroa_0_0_ph=$21;var $__data__i_i_i75_pre_phi=$__data__i_i_i75_pre;var $__data__i21_i_i67_pre_phi=$__data__i21_i_i;label=15;break;
 case 14: 
 var $__data__i_i_i=(($__nm+4)|0);
 var $__data__i21_i_i67_pre=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$__data__i_i_i;var $__data__i_i_i75_pre_phi=$__data__i_i_i;var $__data__i21_i_i67_pre_phi=$__data__i21_i_i67_pre;label=15;break;
 case 15: 
 var $__data__i21_i_i67_pre_phi;
 var $__data__i_i_i75_pre_phi;
 var $__i_sroa_0_0_ph;
 var $__sbuf__i=(($__s)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $22=$20;label=16;break;
 case 16: 
 var $22;
 var $__i_sroa_0_0;
 var $and_i_i_i59=$22&1;
 var $tobool_i_i_i60=(($and_i_i_i59<<24)>>24)==0;
 if($tobool_i_i_i60){var $cond_i_i78=$__data__i_i_i75_pre_phi;label=18;break;}else{label=17;break;}
 case 17: 
 var $23=HEAP32[(($__data__i21_i_i67_pre_phi)>>2)];
 var $cond_i_i78=$23;label=18;break;
 case 18: 
 var $cond_i_i78;
 var $conv_i_i22_i=($22&255);
 var $and_i_i23_i=$conv_i_i22_i&1;
 var $tobool_i_i24_i=($and_i_i23_i|0)==0;
 if($tobool_i_i24_i){label=20;break;}else{label=19;break;}
 case 19: 
 var $24=HEAP32[(($__data__i_i_i75_pre_phi)>>2)];
 var $cond_i34_i=$24;label=21;break;
 case 20: 
 var $shr_i_i_i8=$conv_i_i22_i>>>1;
 var $cond_i34_i=$shr_i_i_i8;label=21;break;
 case 21: 
 var $cond_i34_i;
 var $add_ptr_i=(($cond_i_i78+($cond_i34_i<<2))|0);
 var $lnot_i=($__i_sroa_0_0|0)==($add_ptr_i|0);
 if($lnot_i){label=31;break;}else{label=22;break;}
 case 22: 
 var $25=HEAP32[(($__i_sroa_0_0)>>2)];
 var $26=HEAP32[(($__sbuf__i)>>2)];
 var $tobool_i=($26|0)==0;
 if($tobool_i){label=28;break;}else{label=23;break;}
 case 23: 
 var $__nout__i_i=(($26+24)|0);
 var $27=HEAP32[(($__nout__i_i)>>2)];
 var $__eout__i_i=(($26+28)|0);
 var $28=HEAP32[(($__eout__i_i)>>2)];
 var $cmp_i_i=($27|0)==($28|0);
 if($cmp_i_i){label=24;break;}else{label=25;break;}
 case 24: 
 var $29=$26;
 var $vtable_i_i=HEAP32[(($29)>>2)];
 var $vfn_i_i=(($vtable_i_i+52)|0);
 var $30=HEAP32[(($vfn_i_i)>>2)];
 var $call2_i_i33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26,$25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_0=$call2_i_i33;label=26;break; } else { label=30;break; }
 case 25: 
 var $incdec_ptr_i_i=(($27+4)|0);
 HEAP32[(($__nout__i_i)>>2)]=$incdec_ptr_i_i;
 HEAP32[(($27)>>2)]=$25;
 var $retval_i_i_0=$25;label=26;break;
 case 26: 
 var $retval_i_i_0;
 var $cmp_i6_i=($retval_i_i_0|0)==-1;
 if($cmp_i6_i){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($__sbuf__i)>>2)]=0;
 label=28;break;
 case 28: 
 var $incdec_ptr_i=(($__i_sroa_0_0+4)|0);
 var $_pre=HEAP8[($__size__i_i_i)];
 var $__i_sroa_0_0=$incdec_ptr_i;var $22=$_pre;label=16;break;
 case 29: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $34=HEAP32[(($__locale__i)>>2)];
 var $35=(($34)|0);
 var $call_i14=__ZNSt3__114__shared_count16__release_sharedEv($35);
 var $ehselector_slot_0=$33;var $exn_slot_0=$32;label=33;break;
 case 30: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=$36$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 var $ehselector_slot_0=$38;var $exn_slot_0=$37;label=33;break;
 case 31: 
 var $39=HEAP32[(($__sbuf__i)>>2)];
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 label=32;break;
 case 32: 
 STACKTOP=sp;return;
 case 33: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val15$0=$lpad_val$0;
 var $lpad_val15$1=$ehselector_slot_0;
 ___resumeException($lpad_val15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $ref_tmp=(sp)+(128);
 var $agg_tmp=(sp)+(136);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2440)];HEAP8[((($0)+(1))|0)]=HEAP8[(2441)];HEAP8[((($0)+(2))|0)]=HEAP8[(2442)];HEAP8[((($0)+(3))|0)]=HEAP8[(2443)];HEAP8[((($0)+(4))|0)]=HEAP8[(2444)];HEAP8[((($0)+(5))|0)]=HEAP8[(2445)];
 var $add_ptr=(($__fmt+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $1=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$1&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($__fmt+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$1&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+1)|0);
 var $and9_i=$1&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$1&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i5=($3|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 16: 
 var $5=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,12,$5,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $6=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$6&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $7=HEAP8[($arraydecay2)];
 if((($7<<24)>>24)==45|(($7<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($7<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $8=HEAP8[($arrayidx9_i)];
 if((($8<<24)>>24)==120|(($8<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $9=HEAP32[(($__locale__i11)>>2)];
 var $10=(($9)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($agg_tmp)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=HEAP32[(($__op)>>2)];
 var $15=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$14,$15,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($18);
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i64=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272);
 label=3;break;
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i63=($6|0)==0;
 if($tobool_i_i_i63){label=5;break;}else{label=6;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 6: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=$__p_i_i_i64;
 var $11=HEAP32[((13256)>>2)];
 var $cmp_i_i_i66=($11|0)==-1;
 if($cmp_i_i_i66){label=8;break;}else{label=7;break;}
 case 7: 
 var $ref_tmp_i_sroa_0_0__idx_i_i67=(($__p_i_i_i64)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i67)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i68=(($__p_i_i_i64+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i68)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i69=(($__p_i_i_i64+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i69)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$10,272);
 label=8;break;
 case 8: 
 var $12=HEAP32[((13260)>>2)];
 var $sub_i_i71=((($12)-(1))|0);
 var $__end__i_i_i_i72=(($9+12)|0);
 var $13=HEAP32[(($__end__i_i_i_i72)>>2)];
 var $__begin__i_i_i_i73=(($9+8)|0);
 var $14=HEAP32[(($__begin__i_i_i_i73)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i74=$13;
 var $sub_ptr_rhs_cast_i_i_i_i75=$14;
 var $sub_ptr_sub_i_i_i_i76=((($sub_ptr_lhs_cast_i_i_i_i74)-($sub_ptr_rhs_cast_i_i_i_i75))|0);
 var $sub_ptr_div_i_i_i_i77=$sub_ptr_sub_i_i_i_i76>>2;
 var $cmp_i_i1_i78=($sub_ptr_div_i_i_i_i77>>>0)>($sub_i_i71>>>0);
 if($cmp_i_i1_i78){label=9;break;}else{label=10;break;}
 case 9: 
 var $arrayidx_i_i_i_i80=(($14+($sub_i_i71<<2))|0);
 var $15=HEAP32[(($arrayidx_i_i_i_i80)>>2)];
 var $tobool_i_i_i81=($15|0)==0;
 if($tobool_i_i_i81){label=10;break;}else{label=11;break;}
 case 10: 
 var $exception_i_i83=___cxa_allocate_exception(4);
 var $16=$exception_i_i83;
 __ZNSt8bad_castC2Ev($16);
 ___cxa_throw($exception_i_i83,8536,(376));
 throw "Reached an unreachable!";
 case 11: 
 var $17=$15;
 var $18=$15;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $19=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$19]($__grouping,$17);
 var $__s_i_i_i=$__grouping;
 var $__size__i_i_i=$__grouping;
 var $20=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($20&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=13;break;}else{label=12;break;}
 case 12: 
 var $__size__i23_i_i=(($__grouping+4)|0);
 var $21=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$21;label=14;break;
 case 13: 
 var $shr_i_i_i61=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i61;label=14;break;
 case 14: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=15;break;}else{label=20;break;}
 case 15: 
 var $22=$6;
 var $vtable_i86=HEAP32[(($22)>>2)];
 var $vfn_i87=(($vtable_i86+48)|0);
 var $23=HEAP32[(($vfn_i87)>>2)];
 var $call_i8889=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($8,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $sub_ptr_lhs_cast=$__ne;
 var $sub_ptr_rhs_cast=$__nb;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $add_ptr=(($__ob+($sub_ptr_sub<<2))|0);
 HEAP32[(($__oe)>>2)]=$add_ptr;
 label=43;break;
 case 17: 
 var $lpad_loopexit90$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit90$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit90$1;var $lpad_phi$0=$lpad_loopexit90$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit91$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit91$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit91$1;var $lpad_phi$0=$lpad_nonloopexit91$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad_phi$0)
 case 20: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $24=HEAP8[($__nb)];
 if((($24<<24)>>24)==45|(($24<<24)>>24)==43){ label=21;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 21: 
 var $25=$6;
 var $vtable_i93=HEAP32[(($25)>>2)];
 var $vfn_i94=(($vtable_i93+44)|0);
 var $26=HEAP32[(($vfn_i94)>>2)];
 var $call_i9596=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$26]($8,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=18;break; }
 case 22: 
 var $incdec_ptr=(($__nb+1)|0);
 var $27=HEAP32[(($__oe)>>2)];
 var $incdec_ptr9=(($27+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr9;
 HEAP32[(($27)>>2)]=$call_i9596;
 var $__nf_0=$incdec_ptr;label=23;break;
 case 23: 
 var $__nf_0;
 var $sub_ptr_lhs_cast10=$__ne;
 var $sub_ptr_rhs_cast11=$__nf_0;
 var $sub_ptr_sub12=((($sub_ptr_lhs_cast10)-($sub_ptr_rhs_cast11))|0);
 var $cmp13=($sub_ptr_sub12|0)>1;
 if($cmp13){label=24;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 24: 
 var $28=HEAP8[($__nf_0)];
 var $cmp15=(($28<<24)>>24)==48;
 if($cmp15){label=25;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 25: 
 var $arrayidx17=(($__nf_0+1)|0);
 var $29=HEAP8[($arrayidx17)];
 if((($29<<24)>>24)==120|(($29<<24)>>24)==88){ label=26;break;}else{var $__nf_1=$__nf_0;label=29;break;}
 case 26: 
 var $30=$6;
 var $vtable_i101=HEAP32[(($30)>>2)];
 var $vfn_i102=(($vtable_i101+44)|0);
 var $31=HEAP32[(($vfn_i102)>>2)];
 var $call_i103104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$31]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $32=HEAP32[(($__oe)>>2)];
 var $incdec_ptr28=(($32+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr28;
 HEAP32[(($32)>>2)]=$call_i103104;
 var $33=HEAP8[($arrayidx17)];
 var $vtable_i109=HEAP32[(($30)>>2)];
 var $vfn_i110=(($vtable_i109+44)|0);
 var $34=HEAP32[(($vfn_i110)>>2)];
 var $call_i111112=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($8,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $incdec_ptr29=(($__nf_0+2)|0);
 var $35=HEAP32[(($__oe)>>2)];
 var $incdec_ptr32=(($35+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr32;
 HEAP32[(($35)>>2)]=$call_i111112;
 var $__nf_1=$incdec_ptr29;label=29;break;
 case 29: 
 var $__nf_1;
 var $cmp_i_i128=($__nf_1|0)==($__ne|0);
 if($cmp_i_i128){label=32;break;}else{label=30;break;}
 case 30: 
 var $incdec_ptr_i_i13096=((($__ne)-(1))|0);
 var $cmp1_i_i13197=($__nf_1>>>0)<($incdec_ptr_i_i13096>>>0);
 if($cmp1_i_i13197){var $__first_addr_i_i120_098=$__nf_1;var $incdec_ptr_i_i13099=$incdec_ptr_i_i13096;label=31;break;}else{label=32;break;}
 case 31: 
 var $incdec_ptr_i_i13099;
 var $__first_addr_i_i120_098;
 var $36=HEAP8[($__first_addr_i_i120_098)];
 var $37=HEAP8[($incdec_ptr_i_i13099)];
 HEAP8[($__first_addr_i_i120_098)]=$37;
 HEAP8[($incdec_ptr_i_i13099)]=$36;
 var $incdec_ptr2_i_i133=(($__first_addr_i_i120_098+1)|0);
 var $incdec_ptr_i_i130=((($incdec_ptr_i_i13099)-(1))|0);
 var $cmp1_i_i131=($incdec_ptr2_i_i133>>>0)<($incdec_ptr_i_i130>>>0);
 if($cmp1_i_i131){var $__first_addr_i_i120_098=$incdec_ptr2_i_i133;var $incdec_ptr_i_i13099=$incdec_ptr_i_i130;label=31;break;}else{label=32;break;}
 case 32: 
 var $38=$15;
 var $vtable_i222=HEAP32[(($38)>>2)];
 var $vfn_i223=(($vtable_i222+16)|0);
 var $39=HEAP32[(($vfn_i223)>>2)];
 var $call_i224225=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=18;break; }
 case 33: 
 var $cmp3792=($__nf_1>>>0)<($__ne>>>0);
 if($cmp3792){label=34;break;}else{label=40;break;}
 case 34: 
 var $arrayidx_i_i_i215=(($__s_i_i_i+1)|0);
 var $40=$6;
 var $__size__i23_i=(($__grouping+4)|0);
 var $__data__i21_i_i=(($__grouping+8)|0);
 var $__dc_093=0;var $__dg_094=0;var $__p_095=$__nf_1;label=35;break;
 case 35: 
 var $__p_095;
 var $__dg_094;
 var $__dc_093;
 var $41=HEAP8[($__size__i_i_i)];
 var $and_i_i_i198=$41&1;
 var $tobool_i_i_i199=(($and_i_i_i198<<24)>>24)==0;
 var $42=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i215_=($tobool_i_i_i199?$arrayidx_i_i_i215:$42);
 var $add_ptr_i218=(($arrayidx_i_i_i215_+$__dg_094)|0);
 var $43=HEAP8[($add_ptr_i218)];
 var $cmp41=(($43<<24)>>24)==0;
 if($cmp41){var $__dg_1=$__dg_094;var $__dc_1=$__dc_093;label=38;break;}else{label=36;break;}
 case 36: 
 var $44=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i215_100=($tobool_i_i_i199?$arrayidx_i_i_i215:$44);
 var $add_ptr_i=(($arrayidx_i_i_i215_100+$__dg_094)|0);
 var $45=HEAP8[($add_ptr_i)];
 var $conv45=(($45<<24)>>24);
 var $cmp46=($__dc_093|0)==($conv45|0);
 if($cmp46){label=37;break;}else{var $__dg_1=$__dg_094;var $__dc_1=$__dc_093;label=38;break;}
 case 37: 
 var $46=HEAP32[(($__oe)>>2)];
 var $incdec_ptr48=(($46+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr48;
 HEAP32[(($46)>>2)]=$call_i224225;
 var $47=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($47&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 var $48=HEAP32[(($__size__i23_i)>>2)];
 var $shr_i_i62=$conv_i_i>>>1;
 var $cond_i=($tobool_i_i?$shr_i_i62:$48);
 var $sub=((($cond_i)-(1))|0);
 var $cmp50=($__dg_094>>>0)<($sub>>>0);
 var $inc=($cmp50&1);
 var $inc___dg_0=((($inc)+($__dg_094))|0);
 var $__dg_1=$inc___dg_0;var $__dc_1=0;label=38;break;
 case 38: 
 var $__dc_1;
 var $__dg_1;
 var $49=HEAP8[($__p_095)];
 var $vtable_i80=HEAP32[(($40)>>2)];
 var $vfn_i81=(($vtable_i80+44)|0);
 var $50=HEAP32[(($vfn_i81)>>2)];
 var $call_i8283=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($8,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=17;break; }
 case 39: 
 var $51=HEAP32[(($__oe)>>2)];
 var $incdec_ptr56=(($51+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr56;
 HEAP32[(($51)>>2)]=$call_i8283;
 var $inc57=((($__dc_1)+(1))|0);
 var $incdec_ptr58=(($__p_095+1)|0);
 var $cmp37=($incdec_ptr58>>>0)<($__ne>>>0);
 if($cmp37){var $__dc_093=$inc57;var $__dg_094=$__dg_1;var $__p_095=$incdec_ptr58;label=35;break;}else{label=40;break;}
 case 40: 
 var $sub_ptr_lhs_cast59=$__nf_1;
 var $sub_ptr_rhs_cast60=$__nb;
 var $sub_ptr_sub61=((($sub_ptr_lhs_cast59)-($sub_ptr_rhs_cast60))|0);
 var $add_ptr62=(($__ob+($sub_ptr_sub61<<2))|0);
 var $52=HEAP32[(($__oe)>>2)];
 var $cmp_i_i=($add_ptr62|0)==($52|0);
 if($cmp_i_i){label=43;break;}else{label=41;break;}
 case 41: 
 var $incdec_ptr_i_i86=((($52)-(4))|0);
 var $cmp1_i_i87=($add_ptr62>>>0)<($incdec_ptr_i_i86>>>0);
 if($cmp1_i_i87){var $__first_addr_i_i_088=$add_ptr62;var $incdec_ptr_i_i89=$incdec_ptr_i_i86;label=42;break;}else{label=43;break;}
 case 42: 
 var $incdec_ptr_i_i89;
 var $__first_addr_i_i_088;
 var $53=HEAP32[(($__first_addr_i_i_088)>>2)];
 var $54=HEAP32[(($incdec_ptr_i_i89)>>2)];
 HEAP32[(($__first_addr_i_i_088)>>2)]=$54;
 HEAP32[(($incdec_ptr_i_i89)>>2)]=$53;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_088+4)|0);
 var $incdec_ptr_i_i=((($incdec_ptr_i_i89)-(4))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_088=$incdec_ptr2_i_i;var $incdec_ptr_i_i89=$incdec_ptr_i_i;label=42;break;}else{label=43;break;}
 case 43: 
 var $cmp65=($__np|0)==($__ne|0);
 if($cmp65){label=44;break;}else{label=45;break;}
 case 44: 
 var $55=HEAP32[(($__oe)>>2)];
 var $storemerge=$55;label=46;break;
 case 45: 
 var $sub_ptr_lhs_cast68=$__np;
 var $sub_ptr_rhs_cast69=$__nb;
 var $sub_ptr_sub70=((($sub_ptr_lhs_cast68)-($sub_ptr_rhs_cast69))|0);
 var $add_ptr71=(($__ob+($sub_ptr_sub70<<2))|0);
 var $storemerge=$add_ptr71;label=46;break;
 case 46: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $__sbuf_=(($__s)|0);
 var $0=HEAP32[(($__sbuf_)>>2)];
 var $cmp=($0|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=0;
 label=19;break;
 case 3: 
 var $sub_ptr_lhs_cast=$__oe;
 var $sub_ptr_rhs_cast=$__ob;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $__width__i=(($__iob+12)|0);
 var $2=HEAP32[(($__width__i)>>2)];
 var $cmp1=($2|0)>($sub_ptr_div|0);
 var $sub=((($2)-($sub_ptr_div))|0);
 var $__ns_0=($cmp1?$sub:0);
 var $sub_ptr_lhs_cast4=$__op;
 var $sub_ptr_sub6=((($sub_ptr_lhs_cast4)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div7=$sub_ptr_sub6>>2;
 var $cmp8=($sub_ptr_sub6|0)>0;
 if($cmp8){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=$0;
 var $vtable_i51=HEAP32[(($3)>>2)];
 var $vfn_i52=(($vtable_i51+48)|0);
 var $4=HEAP32[(($vfn_i52)>>2)];
 var $call_i53=FUNCTION_TABLE[$4]($0,$__ob,$sub_ptr_div7);
 var $cmp12=($call_i53|0)==($sub_ptr_div7|0);
 if($cmp12){label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $5=(($agg_result)|0);
 HEAP32[(($5)>>2)]=0;
 label=19;break;
 case 6: 
 var $cmp17=($__ns_0|0)>0;
 if($cmp17){label=7;break;}else{label=15;break;}
 case 7: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns_0,$__fl);
 var $__size__i_i_i=$__sp;
 var $6=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$6&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__data__i21_i_i=(($__sp+8)|0);
 var $7=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i=$7;label=10;break;
 case 9: 
 var $__data__i_i_i=(($__sp+4)|0);
 var $cond_i_i=$__data__i_i_i;label=10;break;
 case 10: 
 var $cond_i_i;
 var $8=$0;
 var $vtable_i72=HEAP32[(($8)>>2)];
 var $vfn_i73=(($vtable_i72+48)|0);
 var $9=HEAP32[(($vfn_i73)>>2)];
 var $call_i7475=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($0,$cond_i_i,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=13;break; }
 case 11: 
 var $cmp22=($call_i7475|0)==($__ns_0|0);
 if($cmp22){label=14;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $10=(($agg_result)|0);
 HEAP32[(($10)>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=19;break;
 case 13: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 ___resumeException($11$0)
 case 14: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
 label=15;break;
 case 15: 
 var $sub_ptr_sub29=((($sub_ptr_lhs_cast)-($sub_ptr_lhs_cast4))|0);
 var $sub_ptr_div30=$sub_ptr_sub29>>2;
 var $cmp31=($sub_ptr_sub29|0)>0;
 if($cmp31){label=16;break;}else{label=18;break;}
 case 16: 
 var $12=$0;
 var $vtable_i=HEAP32[(($12)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $13=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$13]($0,$__op,$sub_ptr_div30);
 var $cmp35=($call_i|0)==($sub_ptr_div30|0);
 if($cmp35){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP32[(($__sbuf_)>>2)]=0;
 var $14=(($agg_result)|0);
 HEAP32[(($14)>>2)]=0;
 label=19;break;
 case 18: 
 HEAP32[(($__width__i)>>2)]=0;
 var $15=(($agg_result)|0);
 HEAP32[(($15)>>2)]=$0;
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $ref_tmp=(sp)+(216);
 var $agg_tmp=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 var $incdec_ptr8_i=(($__fmtp_addr_113_i_ph+1)|0);
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 HEAP8[($incdec_ptr8_i)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+2)|0);
 var $and9_i=$0&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$0&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i5=($2|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 16: 
 var $4=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,22,$4,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $5=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$5&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $6=HEAP8[($arraydecay2)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i11)>>2)];
 var $9=(($8)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($9);
 var $10=(($__s)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($agg_tmp)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($__op)>>2)];
 var $14=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$13,$14,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $16=HEAP32[(($__locale__i)>>2)];
 var $17=(($16)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($17);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $ref_tmp=(sp)+(128);
 var $agg_tmp=(sp)+(136);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2440)];HEAP8[((($0)+(1))|0)]=HEAP8[(2441)];HEAP8[((($0)+(2))|0)]=HEAP8[(2442)];HEAP8[((($0)+(3))|0)]=HEAP8[(2443)];HEAP8[((($0)+(4))|0)]=HEAP8[(2444)];HEAP8[((($0)+(5))|0)]=HEAP8[(2445)];
 var $add_ptr=(($__fmt+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $1=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$1&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($__fmt+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$1&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+1)|0);
 var $and9_i=$1&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$1&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i5=($3|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 16: 
 var $5=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,12,$5,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $6=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$6&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $7=HEAP8[($arraydecay2)];
 if((($7<<24)>>24)==45|(($7<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($7<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $8=HEAP8[($arrayidx9_i)];
 if((($8<<24)>>24)==120|(($8<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $9=HEAP32[(($__locale__i11)>>2)];
 var $10=(($9)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($agg_tmp)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=HEAP32[(($__op)>>2)];
 var $15=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$14,$15,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($18);
 ___resumeException($16$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $ref_tmp=(sp)+(224);
 var $agg_tmp=(sp)+(232);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&512;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_113_i_ph=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_113_i_ph=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_113_i_ph;
 var $incdec_ptr8_i=(($__fmtp_addr_113_i_ph+1)|0);
 HEAP8[($__fmtp_addr_113_i_ph)]=108;
 HEAP8[($incdec_ptr8_i)]=108;
 var $scevgep=(($__fmtp_addr_113_i_ph+2)|0);
 var $and9_i=$0&74;
 if(($and9_i|0)==64){ label=6;break;}else if(($and9_i|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $and14_i=$0&16384;
 var $tobool15_i=($and14_i|0)==0;
 if($tobool15_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $arraydecay2=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=12;break;}else{label=16;break;}
 case 12: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i5=($2|0)==0;
 if($tobool_i5){label=16;break;}else{label=13;break;}
 case 13: 
 var $call_i6=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((12216)>>2)]=$call_i6;
 label=16;break;
 case 15: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 16: 
 var $4=HEAP32[((12216)>>2)];
 var $call5=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay2,23,$4,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr7=(($__nar+$call5)|0);
 var $5=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i7=$5&176;
 if(($and_i7|0)==16){ label=17;break;}else if(($and_i7|0)==32){ var $retval_0_i=$add_ptr7;label=23;break;}else{label=22;break;}
 case 17: 
 var $6=HEAP8[($arraydecay2)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=23;break;
 case 19: 
 var $cmp4_i=($call5|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=23;break;
 case 22: 
 var $retval_0_i=$arraydecay2;label=23;break;
 case 23: 
 var $retval_0_i;
 var $arraydecay11=(($__o)|0);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($arraydecay2,$retval_0_i,$add_ptr7,$arraydecay11,$__op,$__oe,$ref_tmp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=25;break; }
 case 24: 
 var $__locale__i11=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i11)>>2)];
 var $9=(($8)|0);
 var $call_i12=__ZNSt3__114__shared_count16__release_sharedEv($9);
 var $10=(($__s)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($agg_tmp)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=HEAP32[(($__op)>>2)];
 var $14=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay11,$13,$14,$__iob,$__fl);
 STACKTOP=sp;return;
 case 25: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $__locale__i=(($ref_tmp)|0);
 var $16=HEAP32[(($__locale__i)>>2)];
 var $17=(($16)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($17);
 ___resumeException($15$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $ref_tmp51=(sp)+(296);
 var $ref_tmp55=(sp)+(304);
 var $agg_tmp=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&1024;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_1_i=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_1_i=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_1_i;
 var $and6_i=$0&260;
 var $and7_i=$0>>>14;
 var $cmp8_i=($and6_i|0)==260;
 if($cmp8_i){label=13;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr10_i=(($__fmtp_addr_1_i+1)|0);
 HEAP8[($__fmtp_addr_1_i)]=46;
 var $incdec_ptr11_i=(($__fmtp_addr_1_i+2)|0);
 HEAP8[($incdec_ptr10_i)]=42;
 if(($and6_i|0)==256){ label=10;break;}else if(($and6_i|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $1=$and7_i&1;
 var $tobool18_i=($1|0)==0;
 if($tobool18_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($incdec_ptr11_i)]=70;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 9: 
 HEAP8[($incdec_ptr11_i)]=102;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 10: 
 var $2=$and7_i&1;
 var $tobool25_i=($2|0)==0;
 if($tobool25_i){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($incdec_ptr11_i)]=69;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 12: 
 HEAP8[($incdec_ptr11_i)]=101;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 13: 
 var $3=$and7_i&1;
 var $tobool32_i59=($3|0)==0;
 if($tobool32_i59){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($__fmtp_addr_1_i)]=65;
 var $specify_precision_0_off0_ph_i56=0;label=19;break;
 case 15: 
 HEAP8[($__fmtp_addr_1_i)]=97;
 var $specify_precision_0_off0_ph_i56=0;label=19;break;
 case 16: 
 var $4=$and7_i&1;
 var $tobool32_i=($4|0)==0;
 if($tobool32_i){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($incdec_ptr11_i)]=71;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 18: 
 HEAP8[($incdec_ptr11_i)]=103;
 var $specify_precision_0_off0_ph_i56=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i56;
 var $arraydecay3=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$arraydecay3;
 var $5=HEAP8[(276352)];
 var $guard_uninitialized_i=(($5<<24)>>24)==0;
 if($guard_uninitialized_i){label=20;break;}else{label=24;break;}
 case 20: 
 var $6=___cxa_guard_acquire(276352);
 var $tobool_i31=($6|0)==0;
 if($tobool_i31){label=24;break;}else{label=21;break;}
 case 21: 
 var $call_i32=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((12216)>>2)]=$call_i32;
 label=24;break;
 case 23: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 ___resumeException($7$0)
 case 24: 
 var $8=HEAP32[((12216)>>2)];
 if($specify_precision_0_off0_ph_i56){label=25;break;}else{label=26;break;}
 case 25: 
 var $__precision__i=(($__iob+8)|0);
 var $9=HEAP32[(($__precision__i)>>2)];
 var $call7=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call7;label=27;break;
 case 26: 
 var $call10=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call10;label=27;break;
 case 27: 
 var $__nc_0;
 var $cmp=($__nc_0|0)>29;
 if($cmp){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre66=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $23=$_pre66;label=47;break;
 case 29: 
 var $10=HEAP8[(276352)];
 var $guard_uninitialized_i33=(($10<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i56){label=30;break;}else{label=38;break;}
 case 30: 
 if($guard_uninitialized_i33){label=31;break;}else{label=35;break;}
 case 31: 
 var $11=___cxa_guard_acquire(276352);
 var $tobool_i34=($11|0)==0;
 if($tobool_i34){label=35;break;}else{label=32;break;}
 case 32: 
 var $call_i36=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((12216)>>2)]=$call_i36;
 label=35;break;
 case 34: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $eh_lpad_body$1=$12$1;var $eh_lpad_body$0=$12$0;label=37;break;
 case 35: 
 var $13=HEAP32[((12216)>>2)];
 var $__precision__i107=(($__iob+8)|0);
 var $14=HEAP32[(($__precision__i107)>>2)];
 var $call19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$13,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call19;label=44;break; } else { label=36;break; }
 case 36: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $eh_lpad_body$1=$15$1;var $eh_lpad_body$0=$15$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $16=$eh_lpad_body$0;
 var $17=$eh_lpad_body$1;
 var $ehselector_slot_164=$17;var $exn_slot_165=$16;label=72;break;
 case 38: 
 if($guard_uninitialized_i33){label=39;break;}else{label=43;break;}
 case 39: 
 var $18=___cxa_guard_acquire(276352);
 var $tobool_i42=($18|0)==0;
 if($tobool_i42){label=43;break;}else{label=40;break;}
 case 40: 
 var $call_i44=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((12216)>>2)]=$call_i44;
 label=43;break;
 case 42: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $eh_lpad_body$1=$19$1;var $eh_lpad_body$0=$19$0;label=37;break;
 case 43: 
 var $20=HEAP32[((12216)>>2)];
 var $__precision__i110=(($__iob+8)|0);
 var $21=HEAP32[(($__precision__i110)>>2)];
 var $call27=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call27;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $22=HEAP32[(($__nb)>>2)];
 var $cmp29=($22|0)==0;
 if($cmp29){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$22;var $23=$22;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $23=$_pre;label=47;break;
 case 47: 
 var $23;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $add_ptr34=(($23+$__nc_2)|0);
 var $24=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i51=$24&176;
 if(($and_i51|0)==16){ label=48;break;}else if(($and_i51|0)==32){ var $retval_0_i=$add_ptr34;label=54;break;}else{label=53;break;}
 case 48: 
 var $25=HEAP8[($23)];
 if((($25<<24)>>24)==45|(($25<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $add_ptr_i=(($23+1)|0);
 var $retval_0_i=$add_ptr_i;label=54;break;
 case 50: 
 var $cmp4_i=($__nc_2|0)>1;
 var $cmp7_i=(($25<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $arrayidx9_i=(($23+1)|0);
 var $26=HEAP8[($arrayidx9_i)];
 if((($26<<24)>>24)==120|(($26<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $add_ptr17_i=(($23+2)|0);
 var $retval_0_i=$add_ptr17_i;label=54;break;
 case 53: 
 var $retval_0_i=$23;label=54;break;
 case 54: 
 var $retval_0_i;
 var $arraydecay37=(($__o)|0);
 var $cmp40=($23|0)==($arraydecay3|0);
 if($cmp40){var $__ob_0=$arraydecay37;var $__obh_sroa_0_1=0;var $31=$arraydecay3;label=59;break;}else{label=55;break;}
 case 55: 
 var $mul42=$__nc_2<<3;
 var $call45=_malloc($mul42);
 var $27=$call45;
 var $cmp46=($call45|0)==0;
 if($cmp46){label=56;break;}else{var $__ob_0=$27;var $__obh_sroa_0_1=$27;var $31=$23;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre67=HEAP32[(($__nb)>>2)];
 var $__ob_0=$27;var $__obh_sroa_0_1=$27;var $31=$_pre67;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 var $30=$28$1;
 var $exn_slot_0=$29;var $ehselector_slot_0=$30;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $31;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp51,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31,$retval_0_i,$add_ptr34,$__ob_0,$__op,$__oe,$ref_tmp51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $__locale__i54=(($ref_tmp51)|0);
 var $32=HEAP32[(($__locale__i54)>>2)];
 var $33=(($32)|0);
 var $call_i55=__ZNSt3__114__shared_count16__release_sharedEv($33);
 var $34=(($__s)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($agg_tmp)|0);
 HEAP32[(($36)>>2)]=$35;
 var $37=HEAP32[(($__op)>>2)];
 var $38=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($ref_tmp55,$agg_tmp,$__ob_0,$37,$38,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $39=(($ref_tmp55)|0);
 var $40=HEAP32[(($39)>>2)];
 HEAP32[(($34)>>2)]=$40;
 var $41=(($agg_result)|0);
 HEAP32[(($41)>>2)]=$40;
 var $tobool_i_i_i194=($__obh_sroa_0_1|0)==0;
 if($tobool_i_i_i194){label=64;break;}else{label=63;break;}
 case 63: 
 var $42=$__obh_sroa_0_1;
 _free($42);
 label=64;break;
 case 64: 
 var $tobool_i_i_i225=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i225){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1); var $43$1 = tempRet0;
 var $44=$43$0;
 var $45=$43$1;
 var $__locale__i=(($ref_tmp51)|0);
 var $46=HEAP32[(($__locale__i)>>2)];
 var $47=(($46)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($47);
 var $exn_slot_0=$44;var $ehselector_slot_0=$45;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $tobool_i_i_i97=($__obh_sroa_0_2|0)==0;
 if($tobool_i_i_i97){label=70;break;}else{label=69;break;}
 case 69: 
 var $48=$__obh_sroa_0_2;
 _free($48);
 label=70;break;
 case 70: 
 var $tobool_i_i_i=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_164=$ehselector_slot_0;var $exn_slot_165=$exn_slot_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $ehselector_slot_164=$ehselector_slot_0;var $exn_slot_165=$exn_slot_0;label=72;break;
 case 72: 
 var $exn_slot_165;
 var $ehselector_slot_164;
 var $lpad_val$0=$exn_slot_165;
 var $lpad_val$1=0;
 var $lpad_val58$0=$lpad_val$0;
 var $lpad_val58$1=$ehselector_slot_164;
 ___resumeException($lpad_val58$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i90=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272);
 label=3;break;
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i89=($6|0)==0;
 if($tobool_i_i_i89){label=5;break;}else{label=6;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 6: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=$__p_i_i_i90;
 var $11=HEAP32[((13256)>>2)];
 var $cmp_i_i_i92=($11|0)==-1;
 if($cmp_i_i_i92){label=8;break;}else{label=7;break;}
 case 7: 
 var $ref_tmp_i_sroa_0_0__idx_i_i93=(($__p_i_i_i90)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i93)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i94=(($__p_i_i_i90+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i94)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i95=(($__p_i_i_i90+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i95)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$10,272);
 label=8;break;
 case 8: 
 var $12=HEAP32[((13260)>>2)];
 var $sub_i_i97=((($12)-(1))|0);
 var $__end__i_i_i_i98=(($9+12)|0);
 var $13=HEAP32[(($__end__i_i_i_i98)>>2)];
 var $__begin__i_i_i_i99=(($9+8)|0);
 var $14=HEAP32[(($__begin__i_i_i_i99)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i100=$13;
 var $sub_ptr_rhs_cast_i_i_i_i101=$14;
 var $sub_ptr_sub_i_i_i_i102=((($sub_ptr_lhs_cast_i_i_i_i100)-($sub_ptr_rhs_cast_i_i_i_i101))|0);
 var $sub_ptr_div_i_i_i_i103=$sub_ptr_sub_i_i_i_i102>>2;
 var $cmp_i_i1_i104=($sub_ptr_div_i_i_i_i103>>>0)>($sub_i_i97>>>0);
 if($cmp_i_i1_i104){label=9;break;}else{label=10;break;}
 case 9: 
 var $arrayidx_i_i_i_i106=(($14+($sub_i_i97<<2))|0);
 var $15=HEAP32[(($arrayidx_i_i_i_i106)>>2)];
 var $tobool_i_i_i107=($15|0)==0;
 if($tobool_i_i_i107){label=10;break;}else{label=11;break;}
 case 10: 
 var $exception_i_i109=___cxa_allocate_exception(4);
 var $16=$exception_i_i109;
 __ZNSt8bad_castC2Ev($16);
 ___cxa_throw($exception_i_i109,8536,(376));
 throw "Reached an unreachable!";
 case 11: 
 var $17=$15;
 var $18=$15;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $vfn_i=(($vtable_i+20)|0);
 var $19=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$19]($__grouping,$17);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $20=HEAP8[($__nb)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=20;break;}
 case 12: 
 var $21=$6;
 var $vtable_i130=HEAP32[(($21)>>2)];
 var $vfn_i131=(($vtable_i130+44)|0);
 var $22=HEAP32[(($vfn_i131)>>2)];
 var $call_i132133=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($8,$20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $incdec_ptr=(($__nb+1)|0);
 var $23=HEAP32[(($__oe)>>2)];
 var $incdec_ptr5=(($23+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr5;
 HEAP32[(($23)>>2)]=$call_i132133;
 var $__nf_0=$incdec_ptr;label=20;break;
 case 14: 
 var $lpad_loopexit122$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit122$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit122$1;var $eh_lpad_body$0=$lpad_loopexit122$0;label=19;break;
 case 15: 
 var $lpad_loopexit132$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit132$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit132$1;var $eh_lpad_body$0=$lpad_loopexit132$0;label=19;break;
 case 16: 
 var $lpad_loopexit143$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit143$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit143$1;var $eh_lpad_body$0=$lpad_loopexit143$0;label=19;break;
 case 17: 
 var $lpad_loopexit149$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit149$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit149$1;var $eh_lpad_body$0=$lpad_loopexit149$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit150$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit150$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit150$1;var $eh_lpad_body$0=$lpad_nonloopexit150$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh_lpad_body$0)
 case 20: 
 var $__nf_0;
 var $sub_ptr_lhs_cast=$__ne;
 var $sub_ptr_rhs_cast=$__nf_0;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp6=($sub_ptr_sub|0)>1;
 if($cmp6){label=21;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 21: 
 var $24=HEAP8[($__nf_0)];
 var $cmp8=(($24<<24)>>24)==48;
 if($cmp8){label=22;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 22: 
 var $arrayidx10=(($__nf_0+1)|0);
 var $25=HEAP8[($arrayidx10)];
 if((($25<<24)>>24)==120|(($25<<24)>>24)==88){ label=23;break;}else{var $__ns_1=$__nf_0;label=34;break;}
 case 23: 
 var $26=$6;
 var $vtable_i137=HEAP32[(($26)>>2)];
 var $vfn_i138=(($vtable_i137+44)|0);
 var $27=HEAP32[(($vfn_i138)>>2)];
 var $call_i139140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=18;break; }
 case 24: 
 var $28=HEAP32[(($__oe)>>2)];
 var $incdec_ptr21=(($28+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr21;
 HEAP32[(($28)>>2)]=$call_i139140;
 var $incdec_ptr22=(($__nf_0+2)|0);
 var $29=HEAP8[($arrayidx10)];
 var $vtable_i145=HEAP32[(($26)>>2)];
 var $vfn_i146=(($vtable_i145+44)|0);
 var $30=HEAP32[(($vfn_i146)>>2)];
 var $call_i147148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($8,$29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $31=HEAP32[(($__oe)>>2)];
 var $incdec_ptr25=(($31+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr25;
 HEAP32[(($31)>>2)]=$call_i147148;
 var $__ns_0=$incdec_ptr22;label=26;break;
 case 26: 
 var $__ns_0;
 var $cmp26=($__ns_0>>>0)<($__ne>>>0);
 if($cmp26){label=27;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$incdec_ptr22;label=42;break;}
 case 27: 
 var $32=HEAP8[($__ns_0)];
 var $33=HEAP8[(276352)];
 var $guard_uninitialized_i=(($33<<24)>>24)==0;
 if($guard_uninitialized_i){label=28;break;}else{label=32;break;}
 case 28: 
 var $34=___cxa_guard_acquire(276352);
 var $tobool_i=($34|0)==0;
 if($tobool_i){label=32;break;}else{label=29;break;}
 case 29: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=31;break; }
 case 30: 
 HEAP32[((12216)>>2)]=$call_i;
 label=32;break;
 case 31: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $eh_lpad_body$1=$35$1;var $eh_lpad_body$0=$35$0;label=19;break;
 case 32: 
 var $36=HEAP32[((12216)>>2)];
 var $conv27=(($32<<24)>>24);
 var $call31=(function() { try { __THREW__ = 0; return _isxdigit($conv27,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=17;break; }
 case 33: 
 var $tobool=($call31|0)==0;
 var $incdec_ptr34=(($__ns_0+1)|0);
 if($tobool){var $__ns_2=$__ns_0;var $__nf_1=$incdec_ptr22;label=42;break;}else{var $__ns_0=$incdec_ptr34;label=26;break;}
 case 34: 
 var $__ns_1;
 var $cmp36=($__ns_1>>>0)<($__ne>>>0);
 if($cmp36){label=35;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}
 case 35: 
 var $37=HEAP8[($__ns_1)];
 var $38=HEAP8[(276352)];
 var $guard_uninitialized_i112=(($38<<24)>>24)==0;
 if($guard_uninitialized_i112){label=36;break;}else{label=40;break;}
 case 36: 
 var $39=___cxa_guard_acquire(276352);
 var $tobool_i113=($39|0)==0;
 if($tobool_i113){label=40;break;}else{label=37;break;}
 case 37: 
 var $call_i115=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=39;break; }
 case 38: 
 HEAP32[((12216)>>2)]=$call_i115;
 label=40;break;
 case 39: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 var $eh_lpad_body$1=$40$1;var $eh_lpad_body$0=$40$0;label=19;break;
 case 40: 
 var $41=HEAP32[((12216)>>2)];
 var $conv38=(($37<<24)>>24);
 var $call42=(function() { try { __THREW__ = 0; return _isdigit($conv38,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=16;break; }
 case 41: 
 var $tobool43=($call42|0)==0;
 var $incdec_ptr47=(($__ns_1+1)|0);
 if($tobool43){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=42;break;}else{var $__ns_1=$incdec_ptr47;label=34;break;}
 case 42: 
 var $__nf_1;
 var $__ns_2;
 var $__s_i_i_i=$__grouping;
 var $__size__i_i_i=$__grouping;
 var $42=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($42&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=44;break;}else{label=43;break;}
 case 43: 
 var $__size__i23_i_i=(($__grouping+4)|0);
 var $43=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$43;label=45;break;
 case 44: 
 var $shr_i_i_i87=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i87;label=45;break;
 case 45: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){label=46;break;}else{label=50;break;}
 case 46: 
 var $44=HEAP32[(($__oe)>>2)];
 var $45=$6;
 var $vtable_i163=HEAP32[(($45)>>2)];
 var $vfn_i164=(($vtable_i163+48)|0);
 var $46=HEAP32[(($vfn_i164)>>2)];
 var $call_i165166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($8,$__nf_1,$__ns_2,$44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=18;break; }
 case 47: 
 var $sub_ptr_lhs_cast54=$__ns_2;
 var $sub_ptr_rhs_cast55=$__nf_1;
 var $sub_ptr_sub56=((($sub_ptr_lhs_cast54)-($sub_ptr_rhs_cast55))|0);
 var $47=HEAP32[(($__oe)>>2)];
 var $add_ptr=(($47+($sub_ptr_sub56<<2))|0);
 HEAP32[(($__oe)>>2)]=$add_ptr;
 label=48;break;
 case 48: 
 var $cmp94126=($__ns_2>>>0)<($__ne>>>0);
 if($cmp94126){label=49;break;}else{var $__nf_3=$__ns_2;label=69;break;}
 case 49: 
 var $48=$6;
 var $__nf_2127=$__ns_2;label=64;break;
 case 50: 
 var $cmp_i_i=($__nf_1|0)==($__ns_2|0);
 if($cmp_i_i){label=53;break;}else{label=51;break;}
 case 51: 
 var $incdec_ptr_i_i139=((($__ns_2)-(1))|0);
 var $cmp1_i_i140=($__nf_1>>>0)<($incdec_ptr_i_i139>>>0);
 if($cmp1_i_i140){var $__first_addr_i_i_0141=$__nf_1;var $incdec_ptr_i_i142=$incdec_ptr_i_i139;label=52;break;}else{label=53;break;}
 case 52: 
 var $incdec_ptr_i_i142;
 var $__first_addr_i_i_0141;
 var $49=HEAP8[($__first_addr_i_i_0141)];
 var $50=HEAP8[($incdec_ptr_i_i142)];
 HEAP8[($__first_addr_i_i_0141)]=$50;
 HEAP8[($incdec_ptr_i_i142)]=$49;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_0141+1)|0);
 var $incdec_ptr_i_i=((($incdec_ptr_i_i142)-(1))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_0141=$incdec_ptr2_i_i;var $incdec_ptr_i_i142=$incdec_ptr_i_i;label=52;break;}else{label=53;break;}
 case 53: 
 var $51=$15;
 var $vtable_i178=HEAP32[(($51)>>2)];
 var $vfn_i179=(($vtable_i178+16)|0);
 var $52=HEAP32[(($vfn_i179)>>2)];
 var $call_i180181=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=18;break; }
 case 54: 
 var $cmp62135=($__nf_1>>>0)<($__ns_2>>>0);
 if($cmp62135){label=55;break;}else{label=61;break;}
 case 55: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $__size__i23_i=(($__grouping+4)|0);
 var $__data__i21_i_i250=(($__grouping+8)|0);
 var $53=$6;
 var $__dc_0136=0;var $__dg_0137=0;var $__p_0138=$__nf_1;label=56;break;
 case 56: 
 var $__p_0138;
 var $__dg_0137;
 var $__dc_0136;
 var $54=HEAP8[($__size__i_i_i)];
 var $and_i_i_i200=$54&1;
 var $tobool_i_i_i201=(($and_i_i_i200<<24)>>24)==0;
 var $55=HEAP32[(($__data__i21_i_i250)>>2)];
 var $arrayidx_i_i_i_=($tobool_i_i_i201?$arrayidx_i_i_i:$55);
 var $add_ptr_i=(($arrayidx_i_i_i_+$__dg_0137)|0);
 var $56=HEAP8[($add_ptr_i)];
 var $cmp67=(($56<<24)>>24)>0;
 if($cmp67){label=57;break;}else{var $__dg_1=$__dg_0137;var $__dc_1=$__dc_0136;label=59;break;}
 case 57: 
 var $57=HEAP32[(($__data__i21_i_i250)>>2)];
 var $arrayidx_i_i_i_160=($tobool_i_i_i201?$arrayidx_i_i_i:$57);
 var $add_ptr_i262=(($arrayidx_i_i_i_160+$__dg_0137)|0);
 var $58=HEAP8[($add_ptr_i262)];
 var $conv71=(($58<<24)>>24);
 var $cmp72=($__dc_0136|0)==($conv71|0);
 if($cmp72){label=58;break;}else{var $__dg_1=$__dg_0137;var $__dc_1=$__dc_0136;label=59;break;}
 case 58: 
 var $59=HEAP32[(($__oe)>>2)];
 var $incdec_ptr74=(($59+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr74;
 HEAP32[(($59)>>2)]=$call_i180181;
 var $60=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($60&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 var $61=HEAP32[(($__size__i23_i)>>2)];
 var $shr_i_i88=$conv_i_i>>>1;
 var $cond_i=($tobool_i_i?$shr_i_i88:$61);
 var $sub=((($cond_i)-(1))|0);
 var $cmp76=($__dg_0137>>>0)<($sub>>>0);
 var $inc=($cmp76&1);
 var $inc___dg_0=((($inc)+($__dg_0137))|0);
 var $__dg_1=$inc___dg_0;var $__dc_1=0;label=59;break;
 case 59: 
 var $__dc_1;
 var $__dg_1;
 var $62=HEAP8[($__p_0138)];
 var $vtable_i289=HEAP32[(($53)>>2)];
 var $vfn_i290=(($vtable_i289+44)|0);
 var $63=HEAP32[(($vfn_i290)>>2)];
 var $call_i291292=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($8,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=15;break; }
 case 60: 
 var $64=HEAP32[(($__oe)>>2)];
 var $incdec_ptr82=(($64+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr82;
 HEAP32[(($64)>>2)]=$call_i291292;
 var $inc83=((($__dc_1)+(1))|0);
 var $incdec_ptr85=(($__p_0138+1)|0);
 var $cmp62=($incdec_ptr85>>>0)<($__ns_2>>>0);
 if($cmp62){var $__dc_0136=$inc83;var $__dg_0137=$__dg_1;var $__p_0138=$incdec_ptr85;label=56;break;}else{label=61;break;}
 case 61: 
 var $sub_ptr_lhs_cast87=$__nf_1;
 var $sub_ptr_rhs_cast88=$__nb;
 var $sub_ptr_sub89=((($sub_ptr_lhs_cast87)-($sub_ptr_rhs_cast88))|0);
 var $add_ptr90=(($__ob+($sub_ptr_sub89<<2))|0);
 var $65=HEAP32[(($__oe)>>2)];
 var $cmp_i_i278=($add_ptr90|0)==($65|0);
 if($cmp_i_i278){label=48;break;}else{label=62;break;}
 case 62: 
 var $incdec_ptr_i_i280128=((($65)-(4))|0);
 var $cmp1_i_i281129=($add_ptr90>>>0)<($incdec_ptr_i_i280128>>>0);
 if($cmp1_i_i281129){var $__first_addr_i_i270_0130=$add_ptr90;var $incdec_ptr_i_i280131=$incdec_ptr_i_i280128;label=63;break;}else{label=48;break;}
 case 63: 
 var $incdec_ptr_i_i280131;
 var $__first_addr_i_i270_0130;
 var $66=HEAP32[(($__first_addr_i_i270_0130)>>2)];
 var $67=HEAP32[(($incdec_ptr_i_i280131)>>2)];
 HEAP32[(($__first_addr_i_i270_0130)>>2)]=$67;
 HEAP32[(($incdec_ptr_i_i280131)>>2)]=$66;
 var $incdec_ptr2_i_i283=(($__first_addr_i_i270_0130+4)|0);
 var $incdec_ptr_i_i280=((($incdec_ptr_i_i280131)-(4))|0);
 var $cmp1_i_i281=($incdec_ptr2_i_i283>>>0)<($incdec_ptr_i_i280>>>0);
 if($cmp1_i_i281){var $__first_addr_i_i270_0130=$incdec_ptr2_i_i283;var $incdec_ptr_i_i280131=$incdec_ptr_i_i280;label=63;break;}else{label=48;break;}
 case 64: 
 var $__nf_2127;
 var $68=HEAP8[($__nf_2127)];
 var $cmp97=(($68<<24)>>24)==46;
 if($cmp97){label=65;break;}else{label=67;break;}
 case 65: 
 var $69=$15;
 var $vtable_i214=HEAP32[(($69)>>2)];
 var $vfn_i215=(($vtable_i214+12)|0);
 var $70=HEAP32[(($vfn_i215)>>2)];
 var $call_i216217=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=18;break; }
 case 66: 
 var $71=HEAP32[(($__oe)>>2)];
 var $incdec_ptr101=(($71+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr101;
 HEAP32[(($71)>>2)]=$call_i216217;
 var $incdec_ptr102=(($__nf_2127+1)|0);
 var $__nf_3=$incdec_ptr102;label=69;break;
 case 67: 
 var $vtable_i171=HEAP32[(($48)>>2)];
 var $vfn_i172=(($vtable_i171+44)|0);
 var $72=HEAP32[(($vfn_i172)>>2)];
 var $call_i173174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($8,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=14;break; }
 case 68: 
 var $73=HEAP32[(($__oe)>>2)];
 var $incdec_ptr106=(($73+4)|0);
 HEAP32[(($__oe)>>2)]=$incdec_ptr106;
 HEAP32[(($73)>>2)]=$call_i173174;
 var $incdec_ptr109=(($__nf_2127+1)|0);
 var $cmp94=($incdec_ptr109>>>0)<($__ne>>>0);
 if($cmp94){var $__nf_2127=$incdec_ptr109;label=64;break;}else{var $__nf_3=$incdec_ptr109;label=69;break;}
 case 69: 
 var $__nf_3;
 var $74=HEAP32[(($__oe)>>2)];
 var $75=$6;
 var $vtable_i154=HEAP32[(($75)>>2)];
 var $vfn_i155=(($vtable_i154+48)|0);
 var $76=HEAP32[(($vfn_i155)>>2)];
 var $call_i156157=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($8,$__nf_3,$__ne,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=18;break; }
 case 70: 
 var $sub_ptr_rhs_cast114=$__nf_3;
 var $sub_ptr_sub115=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast114))|0);
 var $77=HEAP32[(($__oe)>>2)];
 var $add_ptr116=(($77+($sub_ptr_sub115<<2))|0);
 HEAP32[(($__oe)>>2)]=$add_ptr116;
 var $cmp117=($__np|0)==($__ne|0);
 if($cmp117){var $storemerge=$add_ptr116;label=72;break;}else{label=71;break;}
 case 71: 
 var $sub_ptr_lhs_cast120=$__np;
 var $sub_ptr_rhs_cast121=$__nb;
 var $sub_ptr_sub122=((($sub_ptr_lhs_cast120)-($sub_ptr_rhs_cast121))|0);
 var $add_ptr123=(($__ob+($sub_ptr_sub122<<2))|0);
 var $storemerge=$add_ptr123;label=72;break;
 case 72: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+320)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $ref_tmp49=(sp)+(296);
 var $ref_tmp53=(sp)+(304);
 var $agg_tmp=(sp)+(312);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $arraydecay=$__fmt;
 var $add_ptr=(($arraydecay+1)|0);
 var $__fmtflags__i=(($__iob+4)|0);
 var $0=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i=$0&2048;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $__fmtp_addr_0_i=$add_ptr;label=3;break;}else{label=2;break;}
 case 2: 
 var $incdec_ptr_i=(($arraydecay+2)|0);
 HEAP8[($add_ptr)]=43;
 var $__fmtp_addr_0_i=$incdec_ptr_i;label=3;break;
 case 3: 
 var $__fmtp_addr_0_i;
 var $and1_i=$0&1024;
 var $tobool2_i=($and1_i|0)==0;
 if($tobool2_i){var $__fmtp_addr_1_i=$__fmtp_addr_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $incdec_ptr4_i=(($__fmtp_addr_0_i+1)|0);
 HEAP8[($__fmtp_addr_0_i)]=35;
 var $__fmtp_addr_1_i=$incdec_ptr4_i;label=5;break;
 case 5: 
 var $__fmtp_addr_1_i;
 var $and6_i=$0&260;
 var $and7_i=$0>>>14;
 var $cmp8_i=($and6_i|0)==260;
 if($cmp8_i){label=13;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr10_i=(($__fmtp_addr_1_i+1)|0);
 HEAP8[($__fmtp_addr_1_i)]=46;
 var $incdec_ptr11_i=(($__fmtp_addr_1_i+2)|0);
 HEAP8[($incdec_ptr10_i)]=42;
 HEAP8[($incdec_ptr11_i)]=76;
 var $scevgep=(($__fmtp_addr_1_i+3)|0);
 if(($and6_i|0)==256){ label=10;break;}else if(($and6_i|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $1=$and7_i&1;
 var $tobool18_i=($1|0)==0;
 if($tobool18_i){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 10: 
 var $2=$and7_i&1;
 var $tobool25_i=($2|0)==0;
 if($tobool25_i){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 13: 
 HEAP8[($__fmtp_addr_1_i)]=76;
 var $scevgep60=(($__fmtp_addr_1_i+1)|0);
 var $3=$and7_i&1;
 var $tobool32_i64=($3|0)==0;
 if($tobool32_i64){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep60)]=65;
 var $specify_precision_0_off0_ph_i61=0;label=19;break;
 case 15: 
 HEAP8[($scevgep60)]=97;
 var $specify_precision_0_off0_ph_i61=0;label=19;break;
 case 16: 
 var $4=$and7_i&1;
 var $tobool32_i=($4|0)==0;
 if($tobool32_i){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i61=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i61;
 var $arraydecay3=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$arraydecay3;
 var $5=HEAP8[(276352)];
 var $guard_uninitialized_i=(($5<<24)>>24)==0;
 if($guard_uninitialized_i){label=20;break;}else{label=24;break;}
 case 20: 
 var $6=___cxa_guard_acquire(276352);
 var $tobool_i30=($6|0)==0;
 if($tobool_i30){label=24;break;}else{label=21;break;}
 case 21: 
 var $call_i31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((12216)>>2)]=$call_i31;
 label=24;break;
 case 23: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1); var $7$1 = tempRet0;
 ___resumeException($7$0)
 case 24: 
 var $8=HEAP32[((12216)>>2)];
 if($specify_precision_0_off0_ph_i61){label=25;break;}else{label=26;break;}
 case 25: 
 var $__precision__i=(($__iob+8)|0);
 var $9=HEAP32[(($__precision__i)>>2)];
 var $call7=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$9,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call7;label=27;break;
 case 26: 
 var $call10=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay3,30,$8,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$call10;label=27;break;
 case 27: 
 var $__nc_0;
 var $cmp=($__nc_0|0)>29;
 if($cmp){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre58=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $22=$_pre58;label=47;break;
 case 29: 
 var $10=HEAP8[(276352)];
 var $guard_uninitialized_i32=(($10<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i61){label=30;break;}else{label=38;break;}
 case 30: 
 if($guard_uninitialized_i32){label=31;break;}else{label=35;break;}
 case 31: 
 var $11=___cxa_guard_acquire(276352);
 var $tobool_i33=($11|0)==0;
 if($tobool_i33){label=35;break;}else{label=32;break;}
 case 32: 
 var $call_i35=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((12216)>>2)]=$call_i35;
 label=35;break;
 case 34: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $eh_lpad_body$1=$12$1;var $eh_lpad_body$0=$12$0;label=37;break;
 case 35: 
 var $13=HEAP32[((12216)>>2)];
 var $__precision__i105=(($__iob+8)|0);
 var $14=HEAP32[(($__precision__i105)>>2)];
 var $call19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$13,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$14,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call19;label=44;break; } else { label=36;break; }
 case 36: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;
 var $eh_lpad_body$1=$15$1;var $eh_lpad_body$0=$15$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $16=$eh_lpad_body$0;
 var $17=$eh_lpad_body$1;
 var $ehselector_slot_156=$17;var $exn_slot_157=$16;label=72;break;
 case 38: 
 if($guard_uninitialized_i32){label=39;break;}else{label=43;break;}
 case 39: 
 var $18=___cxa_guard_acquire(276352);
 var $tobool_i41=($18|0)==0;
 if($tobool_i41){label=43;break;}else{label=40;break;}
 case 40: 
 var $call_i43=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((12216)>>2)]=$call_i43;
 label=43;break;
 case 42: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $eh_lpad_body$1=$19$1;var $eh_lpad_body$0=$19$0;label=37;break;
 case 43: 
 var $20=HEAP32[((12216)>>2)];
 var $call25=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$20,$arraydecay,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$call25;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $21=HEAP32[(($__nb)>>2)];
 var $cmp27=($21|0)==0;
 if($cmp27){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$21;var $22=$21;label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 var $_pre=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$_pre;var $22=$_pre;label=47;break;
 case 47: 
 var $22;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $add_ptr32=(($22+$__nc_2)|0);
 var $23=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i50=$23&176;
 if(($and_i50|0)==16){ label=48;break;}else if(($and_i50|0)==32){ var $retval_0_i=$add_ptr32;label=54;break;}else{label=53;break;}
 case 48: 
 var $24=HEAP8[($22)];
 if((($24<<24)>>24)==45|(($24<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $add_ptr_i=(($22+1)|0);
 var $retval_0_i=$add_ptr_i;label=54;break;
 case 50: 
 var $cmp4_i=($__nc_2|0)>1;
 var $cmp7_i=(($24<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $arrayidx9_i=(($22+1)|0);
 var $25=HEAP8[($arrayidx9_i)];
 if((($25<<24)>>24)==120|(($25<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $add_ptr17_i=(($22+2)|0);
 var $retval_0_i=$add_ptr17_i;label=54;break;
 case 53: 
 var $retval_0_i=$22;label=54;break;
 case 54: 
 var $retval_0_i;
 var $arraydecay35=(($__o)|0);
 var $cmp38=($22|0)==($arraydecay3|0);
 if($cmp38){var $__ob_0=$arraydecay35;var $__obh_sroa_0_1=0;var $30=$arraydecay3;label=59;break;}else{label=55;break;}
 case 55: 
 var $mul40=$__nc_2<<3;
 var $call43=_malloc($mul40);
 var $26=$call43;
 var $cmp44=($call43|0)==0;
 if($cmp44){label=56;break;}else{var $__ob_0=$26;var $__obh_sroa_0_1=$26;var $30=$22;label=59;break;}
 case 56: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 var $_pre59=HEAP32[(($__nb)>>2)];
 var $__ob_0=$26;var $__obh_sroa_0_1=$26;var $30=$_pre59;label=59;break;
 case 58: 
 var $__obh_sroa_0_0;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $28=$27$0;
 var $29=$27$1;
 var $exn_slot_0=$28;var $ehselector_slot_0=$29;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=68;break;
 case 59: 
 var $30;
 var $__obh_sroa_0_1;
 var $__ob_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($ref_tmp49,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 60: 
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30,$retval_0_i,$add_ptr32,$__ob_0,$__op,$__oe,$ref_tmp49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=67;break; }
 case 61: 
 var $__locale__i53=(($ref_tmp49)|0);
 var $31=HEAP32[(($__locale__i53)>>2)];
 var $32=(($31)|0);
 var $call_i54=__ZNSt3__114__shared_count16__release_sharedEv($32);
 var $33=(($__s)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($agg_tmp)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=HEAP32[(($__op)>>2)];
 var $37=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($ref_tmp53,$agg_tmp,$__ob_0,$36,$37,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 62: 
 var $38=(($ref_tmp53)|0);
 var $39=HEAP32[(($38)>>2)];
 HEAP32[(($33)>>2)]=$39;
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 var $tobool_i_i_i189=($__obh_sroa_0_1|0)==0;
 if($tobool_i_i_i189){label=64;break;}else{label=63;break;}
 case 63: 
 var $41=$__obh_sroa_0_1;
 _free($41);
 label=64;break;
 case 64: 
 var $tobool_i_i_i220=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i220){label=66;break;}else{label=65;break;}
 case 65: 
 _free($__nbh_sroa_0_1);
 label=66;break;
 case 66: 
 STACKTOP=sp;return;
 case 67: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=$42$1;
 var $__locale__i=(($ref_tmp49)|0);
 var $45=HEAP32[(($__locale__i)>>2)];
 var $46=(($45)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($46);
 var $exn_slot_0=$43;var $ehselector_slot_0=$44;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=68;break;
 case 68: 
 var $__obh_sroa_0_2;
 var $ehselector_slot_0;
 var $exn_slot_0;
 var $tobool_i_i_i95=($__obh_sroa_0_2|0)==0;
 if($tobool_i_i_i95){label=70;break;}else{label=69;break;}
 case 69: 
 var $47=$__obh_sroa_0_2;
 _free($47);
 label=70;break;
 case 70: 
 var $tobool_i_i_i=($__nbh_sroa_0_1|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_156=$ehselector_slot_0;var $exn_slot_157=$exn_slot_0;label=72;break;}else{label=71;break;}
 case 71: 
 _free($__nbh_sroa_0_1);
 var $ehselector_slot_156=$ehselector_slot_0;var $exn_slot_157=$exn_slot_0;label=72;break;
 case 72: 
 var $exn_slot_157;
 var $ehselector_slot_156;
 var $lpad_val$0=$exn_slot_157;
 var $lpad_val$1=0;
 var $lpad_val56$0=$lpad_val$0;
 var $lpad_val56$1=$ehselector_slot_156;
 ___resumeException($lpad_val56$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $ref_tmp=(sp)+(200);
 var $agg_tmp=(sp)+(208);
 var $0=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($0)]=HEAP8[(2448)];HEAP8[((($0)+(1))|0)]=HEAP8[(2449)];HEAP8[((($0)+(2))|0)]=HEAP8[(2450)];HEAP8[((($0)+(3))|0)]=HEAP8[(2451)];HEAP8[((($0)+(4))|0)]=HEAP8[(2452)];HEAP8[((($0)+(5))|0)]=HEAP8[(2453)];
 var $arraydecay=(($__nar)|0);
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i8=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i8;
 label=6;break;
 case 5: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 6: 
 var $4=HEAP32[((12216)>>2)];
 var $call3=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($arraydecay,20,$4,$0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $add_ptr=(($__nar+$call3)|0);
 var $__fmtflags__i_i=(($__iob+4)|0);
 var $5=HEAP32[(($__fmtflags__i_i)>>2)];
 var $and_i=$5&176;
 if(($and_i|0)==32){ var $retval_0_i=$add_ptr;label=13;break;}else if(($and_i|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $6=HEAP8[($arraydecay)];
 if((($6<<24)>>24)==45|(($6<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $add_ptr_i=(($__nar+1)|0);
 var $retval_0_i=$add_ptr_i;label=13;break;
 case 9: 
 var $cmp4_i=($call3|0)>1;
 var $cmp7_i=(($6<<24)>>24)==48;
 var $or_cond_i=$cmp4_i&$cmp7_i;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $arrayidx9_i=(($__nar+1)|0);
 var $7=HEAP8[($arrayidx9_i)];
 if((($7<<24)>>24)==120|(($7<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $add_ptr17_i=(($__nar+2)|0);
 var $retval_0_i=$add_ptr17_i;label=13;break;
 case 12: 
 var $retval_0_i=$arraydecay;label=13;break;
 case 13: 
 var $retval_0_i;
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($10|0)==-1;
 if($cmp_i_i_i){label=15;break;}else{label=14;break;}
 case 14: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$9,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 var $11=HEAP32[((13644)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $arrayidx_i_i_i_i=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=17;break;}else{label=19;break;}
 case 17: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=20;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $16=$14;
 var $17=HEAP32[(($__locale__i)>>2)];
 var $18=(($17)|0);
 var $call_i11=__ZNSt3__114__shared_count16__release_sharedEv($18);
 var $arraydecay9=(($__o)|0);
 var $19=$14;
 var $vtable_i=HEAP32[(($19)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $20=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$20]($16,$arraydecay,$add_ptr,$arraydecay9);
 var $add_ptr13=(($__o+($call3<<2))|0);
 var $cmp=($retval_0_i|0)==($add_ptr|0);
 if($cmp){var $__op_0=$add_ptr13;label=22;break;}else{label=21;break;}
 case 20: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 var $22=HEAP32[(($__locale__i)>>2)];
 var $23=(($22)|0);
 var $call_i13=__ZNSt3__114__shared_count16__release_sharedEv($23);
 ___resumeException($21$0)
 case 21: 
 var $sub_ptr_rhs_cast=$__nar;
 var $sub_ptr_lhs_cast16=$retval_0_i;
 var $sub_ptr_sub18=((($sub_ptr_lhs_cast16)-($sub_ptr_rhs_cast))|0);
 var $add_ptr19=(($__o+($sub_ptr_sub18<<2))|0);
 var $__op_0=$add_ptr19;label=22;break;
 case 22: 
 var $__op_0;
 var $24=(($__s)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($agg_tmp)|0);
 HEAP32[(($26)>>2)]=$25;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$arraydecay9,$__op_0,$add_ptr13,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $ref_tmp=(sp)+(16);
 var $ref_tmp22=(sp)+(24);
 var $agg_tmp=(sp)+(32);
 var $agg_tmp23=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i43=($2|0)==-1;
 if($cmp_i_i_i43){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i45=($6|0)==0;
 if($tobool_i_i_i45){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i49=__ZNSt3__114__shared_count16__release_sharedEv($10);
 HEAP32[(($__err)>>2)]=0;
 var $cmp72=($__fmtb|0)==($__fmte|0);
 var $__sbuf__i_i_i272_phi_trans_insert_pre_pre=(($__b)|0);
 if($cmp72){label=67;break;}else{label=8;break;}
 case 8: 
 var $__sbuf__i11_i_i=(($__e)|0);
 var $11=$6;
 var $12=$6;
 var $__tab__i=(($6+8)|0);
 var $13=$__tab__i;
 var $14=$this;
 var $15=(($agg_tmp)|0);
 var $16=(($agg_tmp23)|0);
 var $17=(($ref_tmp22)|0);
 var $__fmtb_addr_0_ph73=$__fmtb;var $_pre75=0;label=9;break;
 case 9: 
 var $_pre75;
 var $__fmtb_addr_0_ph73;
 var $18=$_pre75;label=10;break;
 case 10: 
 var $18;
 var $cmp2=($18|0)==0;
 if($cmp2){label=11;break;}else{label=67;break;}
 case 11: 
 var $19=HEAP32[(($__sbuf__i_i_i272_phi_trans_insert_pre_pre)>>2)];
 var $tobool_i_i_i=($19|0)==0;
 if($tobool_i_i_i){var $24=0;label=15;break;}else{label=12;break;}
 case 12: 
 var $__ninp__i_i_i_i=(($19+12)|0);
 var $20=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($19+16)|0);
 var $21=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($20|0)==($21|0);
 if($cmp_i_i_i_i){label=13;break;}else{var $24=$19;label=15;break;}
 case 13: 
 var $22=$19;
 var $vtable_i_i_i_i=HEAP32[(($22)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $23=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$23]($19);
 var $cmp_i7_i_i_i=($call_i_i_i_i|0)==-1;
 if($cmp_i7_i_i_i){label=14;break;}else{var $24=$19;label=15;break;}
 case 14: 
 HEAP32[(($__sbuf__i_i_i272_phi_trans_insert_pre_pre)>>2)]=0;
 var $24=0;label=15;break;
 case 15: 
 var $24;
 var $cmp_i_i_i=($24|0)==0;
 var $25=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($25|0)==0;
 if($tobool_i12_i_i){label=20;break;}else{label=16;break;}
 case 16: 
 var $__ninp__i_i15_i_i=(($25+12)|0);
 var $26=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($25+16)|0);
 var $27=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($26|0)==($27|0);
 if($cmp_i_i17_i_i){label=17;break;}else{label=19;break;}
 case 17: 
 var $28=$25;
 var $vtable_i_i19_i_i=HEAP32[(($28)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $29=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$29]($25);
 var $cmp_i7_i26_i_i=($call_i_i21_i_i|0)==-1;
 if($cmp_i7_i26_i_i){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=20;break;
 case 19: 
 if($cmp_i_i_i){var $33=$25;label=23;break;}else{label=21;break;}
 case 20: 
 if($cmp_i_i_i){label=21;break;}else{var $33=0;label=23;break;}
 case 21: 
 HEAP32[(($__err)>>2)]=4;
 var $82=$24;label=68;break;
 case 22: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $31=HEAP32[(($__locale__i)>>2)];
 var $32=(($31)|0);
 var $call_i51=__ZNSt3__114__shared_count16__release_sharedEv($32);
 ___resumeException($30$0)
 case 23: 
 var $33;
 var $34=HEAP8[($__fmtb_addr_0_ph73)];
 var $vtable_i=HEAP32[(($11)>>2)];
 var $vfn_i=(($vtable_i+36)|0);
 var $35=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$35]($8,$34,0);
 var $cmp5=(($call_i<<24)>>24)==37;
 if($cmp5){label=24;break;}else{label=33;break;}
 case 24: 
 var $incdec_ptr=(($__fmtb_addr_0_ph73+1)|0);
 var $cmp7=($incdec_ptr|0)==($__fmte|0);
 if($cmp7){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $82=$24;label=68;break;
 case 26: 
 var $36=HEAP8[($incdec_ptr)];
 var $vtable_i66=HEAP32[(($11)>>2)];
 var $vfn_i67=(($vtable_i66+36)|0);
 var $37=HEAP32[(($vfn_i67)>>2)];
 var $call_i68=FUNCTION_TABLE[$37]($8,$36,0);
 if((($call_i68<<24)>>24)==69|(($call_i68<<24)>>24)==48){ label=27;break;}else{var $__opt_0=0;var $__cmd_0=$call_i68;var $__fmtb_addr_1=$incdec_ptr;label=30;break;}
 case 27: 
 var $incdec_ptr16=(($__fmtb_addr_0_ph73+2)|0);
 var $cmp17=($incdec_ptr16|0)==($__fmte|0);
 if($cmp17){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[(($__err)>>2)]=4;
 var $82=$24;label=68;break;
 case 29: 
 var $38=HEAP8[($incdec_ptr16)];
 var $vtable_i73=HEAP32[(($11)>>2)];
 var $vfn_i74=(($vtable_i73+36)|0);
 var $39=HEAP32[(($vfn_i74)>>2)];
 var $call_i75=FUNCTION_TABLE[$39]($8,$38,0);
 var $__opt_0=$call_i68;var $__cmd_0=$call_i75;var $__fmtb_addr_1=$incdec_ptr16;label=30;break;
 case 30: 
 var $__fmtb_addr_1;
 var $__cmd_0;
 var $__opt_0;
 var $vtable=HEAP32[(($14)>>2)];
 var $vfn=(($vtable+36)|0);
 var $40=HEAP32[(($vfn)>>2)];
 HEAP32[(($15)>>2)]=$24;
 HEAP32[(($16)>>2)]=$33;
 FUNCTION_TABLE[$40]($ref_tmp22,$this,$agg_tmp,$agg_tmp23,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $41=HEAP32[(($17)>>2)];
 HEAP32[(($__sbuf__i_i_i272_phi_trans_insert_pre_pre)>>2)]=$41;
 var $incdec_ptr24=(($__fmtb_addr_1+1)|0);
 var $__fmtb_addr_0_ph_be=$incdec_ptr24;label=31;break;
 case 31: 
 var $__fmtb_addr_0_ph_be;
 var $cmp=($__fmtb_addr_0_ph_be|0)==($__fmte|0);
 if($cmp){label=67;break;}else{label=32;break;}
 case 32: 
 var $_pre75_pre=HEAP32[(($__err)>>2)];
 var $__fmtb_addr_0_ph73=$__fmtb_addr_0_ph_be;var $_pre75=$_pre75_pre;label=9;break;
 case 33: 
 var $42=HEAP8[($__fmtb_addr_0_ph73)];
 var $tobool_i=(($42<<24)>>24)<0;
 if($tobool_i){label=58;break;}else{label=34;break;}
 case 34: 
 var $conv_i=(($42<<24)>>24);
 var $43=HEAP32[(($13)>>2)];
 var $arrayidx_i=(($43+($conv_i<<1))|0);
 var $44=HEAP16[(($arrayidx_i)>>1)];
 var $and_i=$44&8192;
 var $cmp_i=(($and_i<<16)>>16)==0;
 if($cmp_i){label=58;break;}else{var $__fmtb_addr_0_pn=$__fmtb_addr_0_ph73;label=35;break;}
 case 35: 
 var $__fmtb_addr_0_pn;
 var $__fmtb_addr_2=(($__fmtb_addr_0_pn+1)|0);
 var $cmp28=($__fmtb_addr_2|0)==($__fmte|0);
 if($cmp28){var $__fmtb_addr_2_lcssa=$__fmte;label=38;break;}else{label=36;break;}
 case 36: 
 var $45=HEAP8[($__fmtb_addr_2)];
 var $tobool_i86=(($45<<24)>>24)<0;
 if($tobool_i86){var $__fmtb_addr_2_lcssa=$__fmtb_addr_2;label=38;break;}else{label=37;break;}
 case 37: 
 var $conv_i84=(($45<<24)>>24);
 var $arrayidx_i89=(($43+($conv_i84<<1))|0);
 var $46=HEAP16[(($arrayidx_i89)>>1)];
 var $and_i92=$46&8192;
 var $cmp_i93=(($and_i92<<16)>>16)==0;
 if($cmp_i93){var $__fmtb_addr_2_lcssa=$__fmtb_addr_2;label=38;break;}else{var $__fmtb_addr_0_pn=$__fmtb_addr_2;label=35;break;}
 case 38: 
 var $__fmtb_addr_2_lcssa;
 var $48=$24;var $47=$33;label=39;break;
 case 39: 
 var $47;
 var $48;
 var $tobool_i_i_i117=($48|0)==0;
 if($tobool_i_i_i117){var $53=0;label=43;break;}else{label=40;break;}
 case 40: 
 var $__ninp__i_i_i_i120=(($48+12)|0);
 var $49=HEAP32[(($__ninp__i_i_i_i120)>>2)];
 var $__einp__i_i_i_i121=(($48+16)|0);
 var $50=HEAP32[(($__einp__i_i_i_i121)>>2)];
 var $cmp_i_i_i_i122=($49|0)==($50|0);
 if($cmp_i_i_i_i122){label=41;break;}else{var $53=$48;label=43;break;}
 case 41: 
 var $51=$48;
 var $vtable_i_i_i_i124=HEAP32[(($51)>>2)];
 var $vfn_i_i_i_i125=(($vtable_i_i_i_i124+36)|0);
 var $52=HEAP32[(($vfn_i_i_i_i125)>>2)];
 var $call_i_i_i_i126=FUNCTION_TABLE[$52]($48);
 var $cmp_i7_i_i_i131=($call_i_i_i_i126|0)==-1;
 if($cmp_i7_i_i_i131){label=42;break;}else{var $53=$48;label=43;break;}
 case 42: 
 HEAP32[(($__sbuf__i_i_i272_phi_trans_insert_pre_pre)>>2)]=0;
 var $53=0;label=43;break;
 case 43: 
 var $53;
 var $cmp_i_i_i136=($53|0)==0;
 var $tobool_i12_i_i140=($47|0)==0;
 if($tobool_i12_i_i140){label=48;break;}else{label=44;break;}
 case 44: 
 var $__ninp__i_i15_i_i144=(($47+12)|0);
 var $54=HEAP32[(($__ninp__i_i15_i_i144)>>2)];
 var $__einp__i_i16_i_i145=(($47+16)|0);
 var $55=HEAP32[(($__einp__i_i16_i_i145)>>2)];
 var $cmp_i_i17_i_i146=($54|0)==($55|0);
 if($cmp_i_i17_i_i146){label=46;break;}else{label=45;break;}
 case 45: 
 if($cmp_i_i_i136){var $58=$47;label=50;break;}else{var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=31;break;}
 case 46: 
 var $56=$47;
 var $vtable_i_i19_i_i148=HEAP32[(($56)>>2)];
 var $vfn_i_i20_i_i149=(($vtable_i_i19_i_i148+36)|0);
 var $57=HEAP32[(($vfn_i_i20_i_i149)>>2)];
 var $call_i_i21_i_i150=FUNCTION_TABLE[$57]($47);
 var $cmp_i7_i26_i_i155=($call_i_i21_i_i150|0)==-1;
 if($cmp_i7_i26_i_i155){label=47;break;}else{label=49;break;}
 case 47: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=48;break;
 case 48: 
 if($cmp_i_i_i136){var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=31;break;}else{var $58=0;label=50;break;}
 case 49: 
 var $cmp_i31_i_i160=($47|0)==0;
 var $lnot_i=$cmp_i_i_i136^$cmp_i31_i_i160;
 if($lnot_i){var $58=$47;label=50;break;}else{var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=31;break;}
 case 50: 
 var $58;
 var $__ninp__i_i=(($53+12)|0);
 var $59=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($53+16)|0);
 var $60=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i167=($59|0)==($60|0);
 if($cmp_i_i167){label=51;break;}else{label=52;break;}
 case 51: 
 var $61=$53;
 var $vtable_i_i=HEAP32[(($61)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $62=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$62]($53);
 var $extract_t41=(($call_i_i)&255);
 var $retval_i_i_0_off0=$extract_t41;label=53;break;
 case 52: 
 var $63=HEAP8[($59)];
 var $retval_i_i_0_off0=$63;label=53;break;
 case 53: 
 var $retval_i_i_0_off0;
 var $tobool_i175=(($retval_i_i_0_off0<<24)>>24)<0;
 if($tobool_i175){var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=31;break;}else{label=54;break;}
 case 54: 
 var $conv_i173=(($retval_i_i_0_off0<<24)>>24);
 var $64=HEAP32[(($13)>>2)];
 var $arrayidx_i178=(($64+($conv_i173<<1))|0);
 var $65=HEAP16[(($arrayidx_i178)>>1)];
 var $and_i181=$65&8192;
 var $cmp_i182=(($and_i181<<16)>>16)==0;
 if($cmp_i182){var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=31;break;}else{label=55;break;}
 case 55: 
 var $66=HEAP32[(($__ninp__i_i)>>2)];
 var $67=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i196=($66|0)==($67|0);
 if($cmp_i_i196){label=56;break;}else{label=57;break;}
 case 56: 
 var $68=$53;
 var $vtable_i_i197=HEAP32[(($68)>>2)];
 var $vfn_i_i198=(($vtable_i_i197+40)|0);
 var $69=HEAP32[(($vfn_i_i198)>>2)];
 var $call_i_i199=FUNCTION_TABLE[$69]($53);
 var $48=$53;var $47=$58;label=39;break;
 case 57: 
 var $incdec_ptr_i_i=(($66+1)|0);
 HEAP32[(($__ninp__i_i)>>2)]=$incdec_ptr_i_i;
 var $48=$53;var $47=$58;label=39;break;
 case 58: 
 var $__ninp__i_i211=(($24+12)|0);
 var $70=HEAP32[(($__ninp__i_i211)>>2)];
 var $__einp__i_i212=(($24+16)|0);
 var $71=HEAP32[(($__einp__i_i212)>>2)];
 var $cmp_i_i213=($70|0)==($71|0);
 if($cmp_i_i213){label=59;break;}else{label=60;break;}
 case 59: 
 var $72=$24;
 var $vtable_i_i214=HEAP32[(($72)>>2)];
 var $vfn_i_i215=(($vtable_i_i214+36)|0);
 var $73=HEAP32[(($vfn_i_i215)>>2)];
 var $call_i_i216=FUNCTION_TABLE[$73]($24);
 var $extract_t=(($call_i_i216)&255);
 var $retval_i_i205_0_off0=$extract_t;label=61;break;
 case 60: 
 var $74=HEAP8[($70)];
 var $retval_i_i205_0_off0=$74;label=61;break;
 case 61: 
 var $retval_i_i205_0_off0;
 var $vtable_i226=HEAP32[(($12)>>2)];
 var $vfn_i227=(($vtable_i226+12)|0);
 var $75=HEAP32[(($vfn_i227)>>2)];
 var $call_i228=FUNCTION_TABLE[$75]($8,$retval_i_i205_0_off0);
 var $76=HEAP8[($__fmtb_addr_0_ph73)];
 var $vtable_i232=HEAP32[(($12)>>2)];
 var $vfn_i233=(($vtable_i232+12)|0);
 var $77=HEAP32[(($vfn_i233)>>2)];
 var $call_i234=FUNCTION_TABLE[$77]($8,$76);
 var $cmp49=(($call_i228<<24)>>24)==(($call_i234<<24)>>24);
 if($cmp49){label=62;break;}else{label=66;break;}
 case 62: 
 var $78=HEAP32[(($__ninp__i_i211)>>2)];
 var $79=HEAP32[(($__einp__i_i212)>>2)];
 var $cmp_i_i244=($78|0)==($79|0);
 if($cmp_i_i244){label=63;break;}else{label=64;break;}
 case 63: 
 var $80=$24;
 var $vtable_i_i245=HEAP32[(($80)>>2)];
 var $vfn_i_i246=(($vtable_i_i245+40)|0);
 var $81=HEAP32[(($vfn_i_i246)>>2)];
 var $call_i_i247=FUNCTION_TABLE[$81]($24);
 label=65;break;
 case 64: 
 var $incdec_ptr_i_i250=(($78+1)|0);
 HEAP32[(($__ninp__i_i211)>>2)]=$incdec_ptr_i_i250;
 label=65;break;
 case 65: 
 var $incdec_ptr52=(($__fmtb_addr_0_ph73+1)|0);
 var $__fmtb_addr_0_ph_be=$incdec_ptr52;label=31;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $18=4;label=10;break;
 case 67: 
 var $_pre=HEAP32[(($__sbuf__i_i_i272_phi_trans_insert_pre_pre)>>2)];
 var $82=$_pre;label=68;break;
 case 68: 
 var $82;
 var $__sbuf__i_i_i272=(($__b)|0);
 var $tobool_i_i_i273=($82|0)==0;
 if($tobool_i_i_i273){label=72;break;}else{label=69;break;}
 case 69: 
 var $__ninp__i_i_i_i276=(($82+12)|0);
 var $83=HEAP32[(($__ninp__i_i_i_i276)>>2)];
 var $__einp__i_i_i_i277=(($82+16)|0);
 var $84=HEAP32[(($__einp__i_i_i_i277)>>2)];
 var $cmp_i_i_i_i278=($83|0)==($84|0);
 if($cmp_i_i_i_i278){label=70;break;}else{label=72;break;}
 case 70: 
 var $85=$82;
 var $vtable_i_i_i_i280=HEAP32[(($85)>>2)];
 var $vfn_i_i_i_i281=(($vtable_i_i_i_i280+36)|0);
 var $86=HEAP32[(($vfn_i_i_i_i281)>>2)];
 var $call_i_i_i_i282=FUNCTION_TABLE[$86]($82);
 var $cmp_i7_i_i_i287=($call_i_i_i_i282|0)==-1;
 if($cmp_i7_i_i_i287){label=71;break;}else{label=72;break;}
 case 71: 
 HEAP32[(($__sbuf__i_i_i272)>>2)]=0;
 label=72;break;
 case 72: 
 var $87=HEAP32[(($__sbuf__i_i_i272)>>2)];
 var $cmp_i_i_i292=($87|0)==0;
 var $__sbuf__i11_i_i295=(($__e)|0);
 var $88=HEAP32[(($__sbuf__i11_i_i295)>>2)];
 var $tobool_i12_i_i296=($88|0)==0;
 if($tobool_i12_i_i296){label=77;break;}else{label=73;break;}
 case 73: 
 var $__ninp__i_i15_i_i300=(($88+12)|0);
 var $89=HEAP32[(($__ninp__i_i15_i_i300)>>2)];
 var $__einp__i_i16_i_i301=(($88+16)|0);
 var $90=HEAP32[(($__einp__i_i16_i_i301)>>2)];
 var $cmp_i_i17_i_i302=($89|0)==($90|0);
 if($cmp_i_i17_i_i302){label=74;break;}else{label=76;break;}
 case 74: 
 var $91=$88;
 var $vtable_i_i19_i_i304=HEAP32[(($91)>>2)];
 var $vfn_i_i20_i_i305=(($vtable_i_i19_i_i304+36)|0);
 var $92=HEAP32[(($vfn_i_i20_i_i305)>>2)];
 var $call_i_i21_i_i306=FUNCTION_TABLE[$92]($88);
 var $cmp_i7_i26_i_i311=($call_i_i21_i_i306|0)==-1;
 if($cmp_i7_i26_i_i311){label=75;break;}else{label=76;break;}
 case 75: 
 HEAP32[(($__sbuf__i11_i_i295)>>2)]=0;
 label=77;break;
 case 76: 
 if($cmp_i_i_i292){label=79;break;}else{label=78;break;}
 case 77: 
 if($cmp_i_i_i292){label=78;break;}else{label=79;break;}
 case 78: 
 var $93=HEAP32[(($__err)>>2)];
 var $or=$93|2;
 HEAP32[(($__err)>>2)]=$or;
 label=79;break;
 case 79: 
 var $94=(($agg_result)|0);
 HEAP32[(($94)>>2)]=$87;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__tm,2432,2440);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $add_ptr=(($this+8)|0);
 var $0=$add_ptr;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+20)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($add_ptr);
 var $2=(($__b)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($agg_tmp)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__e)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($agg_tmp2)|0);
 HEAP32[(($7)>>2)]=$6;
 var $__s_i_i_i=$call;
 var $__size__i_i_i=$call;
 var $8=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$8&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i=(($call+8)|0);
 var $9=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i50=$9;var $cond_i_i4=$9;label=4;break;
 case 3: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $arrayidx_i_i_i48=(($__s_i_i_i+1)|0);
 var $cond_i_i50=$arrayidx_i_i_i48;var $cond_i_i4=$arrayidx_i_i_i;label=4;break;
 case 4: 
 var $cond_i_i4;
 var $cond_i_i50;
 var $conv_i_i=($8&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i=(($call+4)|0);
 var $10=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$10;label=7;break;
 case 6: 
 var $shr_i_i3=$conv_i_i>>>1;
 var $cond_i=$shr_i_i3;label=7;break;
 case 7: 
 var $cond_i;
 var $add_ptr6=(($cond_i_i50+$cond_i)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__tm,$cond_i_i4,$add_ptr6);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $14=$add_ptr_i;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $15=HEAP32[(($vtable_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$15]($add_ptr_i);
 var $16=(($agg_tmp_i)|0);
 HEAP32[(($16)>>2)]=$12;
 var $add_ptr2_i=(($call_i5+168)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i5,$add_ptr2_i,$8,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i5;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<168;
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $tm_wday=(($__tm+24)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(7))&-1);
 HEAP32[(($tm_wday)>>2)]=$rem_i;
 label=9;break;
 case 9: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 10: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $14=$add_ptr_i;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $vfn_i=(($vtable_i+4)|0);
 var $15=HEAP32[(($vfn_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$15]($add_ptr_i);
 var $16=(($agg_tmp_i)|0);
 HEAP32[(($16)>>2)]=$12;
 var $add_ptr2_i=(($call_i5+288)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i5,$add_ptr2_i,$8,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i5;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<288;
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $tm_mon=(($__tm+16)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(12))&-1);
 HEAP32[(($tm_mon)>>2)]=$rem_i;
 label=9;break;
 case 9: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 10: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $tm_year=(($__tm+20)|0);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $14=(($agg_tmp_i)|0);
 HEAP32[(($14)>>2)]=$12;
 var $call_i5=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i,$__err,$8,4);
 var $15=HEAP32[(($__err)>>2)];
 var $and_i=$15&4;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){label=8;break;}else{label=12;break;}
 case 8: 
 var $cmp_i=($call_i5|0)<69;
 if($cmp_i){label=9;break;}else{label=10;break;}
 case 9: 
 var $add_i=((($call_i5)+(2000))|0);
 var $__t_0_i=$add_i;label=11;break;
 case 10: 
 var $call_off_i=((($call_i5)-(69))|0);
 var $16=($call_off_i>>>0)<31;
 var $add6_i=((($call_i5)+(1900))|0);
 var $add6_call_i=($16?$add6_i:$call_i5);
 var $__t_0_i=$add6_call_i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $sub_i=((($__t_0_i)-(1900))|0);
 HEAP32[(($tm_year)>>2)]=$sub_i;
 label=12;break;
 case 12: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 13: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i201=sp;
 var $agg_tmp_i189=(sp)+(8);
 var $agg_tmp_i177=(sp)+(16);
 var $agg_tmp_i165=(sp)+(24);
 var $agg_tmp_i153=(sp)+(32);
 var $agg_tmp_i141=(sp)+(40);
 var $agg_tmp_i129=(sp)+(48);
 var $agg_tmp_i117=(sp)+(56);
 var $agg_tmp_i106=(sp)+(64);
 var $agg_tmp_i100=(sp)+(72);
 var $agg_tmp_i84=(sp)+(80);
 var $agg_tmp_i=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $ref_tmp=(sp)+(112);
 var $ref_tmp6=(sp)+(120);
 var $agg_tmp7=(sp)+(128);
 var $agg_tmp8=(sp)+(136);
 var $ref_tmp16=(sp)+(144);
 var $agg_tmp17=(sp)+(152);
 var $agg_tmp18=(sp)+(160);
 var $ref_tmp20=(sp)+(168);
 var $agg_tmp21=(sp)+(176);
 var $agg_tmp22=(sp)+(184);
 var $agg_tmp36=(sp)+(192);
 var $agg_tmp39=(sp)+(200);
 var $ref_tmp41=(sp)+(208);
 var $agg_tmp42=(sp)+(216);
 var $agg_tmp43=(sp)+(224);
 var $ref_tmp45=(sp)+(232);
 var $agg_tmp46=(sp)+(240);
 var $agg_tmp47=(sp)+(248);
 var $ref_tmp51=(sp)+(256);
 var $agg_tmp52=(sp)+(264);
 var $agg_tmp53=(sp)+(272);
 var $agg_tmp60=(sp)+(280);
 var $agg_tmp61=(sp)+(288);
 var $ref_tmp68=(sp)+(296);
 var $agg_tmp69=(sp)+(304);
 var $agg_tmp70=(sp)+(312);
 var $agg_tmp81=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $1=HEAP32[(($__locale__i)>>2)];
 var $2=$__p_i_i_i;
 var $3=HEAP32[((13648)>>2)];
 var $cmp_i_i_i=($3|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$2,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $4=HEAP32[((13652)>>2)];
 var $sub_i_i=((($4)-(1))|0);
 var $__end__i_i_i_i=(($1+12)|0);
 var $5=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($1+8)|0);
 var $6=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$5;
 var $sub_ptr_rhs_cast_i_i_i_i=$6;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($6+($sub_i_i<<2))|0);
 var $7=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i73=($7|0)==0;
 if($tobool_i_i_i73){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $8=$exception_i_i;
 __ZNSt8bad_castC2Ev($8);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $9=$7;
 var $10=HEAP32[(($__locale__i)>>2)];
 var $11=(($10)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($11);
 var $conv=(($__fmt<<24)>>24);
 switch(($conv|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=HEAP32[(($__locale__i)>>2)];
 var $14=(($13)|0);
 var $call_i77=__ZNSt3__114__shared_count16__release_sharedEv($14);
 ___resumeException($12$0)
 case 9: 
 var $15=(($__e)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $18=$add_ptr_i;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $19=HEAP32[(($vtable_i)>>2)];
 var $call_i80=FUNCTION_TABLE[$19]($add_ptr_i);
 var $20=(($agg_tmp_i)|0);
 HEAP32[(($20)>>2)]=$16;
 var $add_ptr2_i=(($call_i80+168)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i80,$add_ptr2_i,$9,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i80;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<168;
 if($cmp_i){label=10;break;}else{label=70;break;}
 case 10: 
 var $tm_wday=(($__tm+24)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(7))&-1);
 HEAP32[(($tm_wday)>>2)]=$rem_i;
 label=70;break;
 case 11: 
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$agg_tmp_i84;
 var $add_ptr_i85=(($this+8)|0);
 var $24=$add_ptr_i85;
 var $vtable_i86=HEAP32[(($24)>>2)];
 var $vfn_i=(($vtable_i86+4)|0);
 var $25=HEAP32[(($vfn_i)>>2)];
 var $call_i87=FUNCTION_TABLE[$25]($add_ptr_i85);
 var $26=(($agg_tmp_i84)|0);
 HEAP32[(($26)>>2)]=$22;
 var $add_ptr2_i88=(($call_i87+288)|0);
 var $call3_i89=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i84,$call_i87,$add_ptr2_i88,$9,$__err,0);
 var $sub_ptr_lhs_cast_i90=$call3_i89;
 var $sub_ptr_rhs_cast_i91=$call_i87;
 var $sub_ptr_sub_i92=((($sub_ptr_lhs_cast_i90)-($sub_ptr_rhs_cast_i91))|0);
 var $cmp_i93=($sub_ptr_sub_i92|0)<288;
 if($cmp_i93){label=12;break;}else{label=70;break;}
 case 12: 
 var $tm_mon=(($__tm+16)|0);
 var $sub_ptr_div_i94=(((($sub_ptr_sub_i92|0))/(12))&-1);
 var $rem_i95=(((($sub_ptr_div_i94|0))%(12))&-1);
 HEAP32[(($tm_mon)>>2)]=$rem_i95;
 label=70;break;
 case 13: 
 var $add_ptr=(($this+8)|0);
 var $27=$add_ptr;
 var $vtable=HEAP32[(($27)>>2)];
 var $vfn=(($vtable+12)|0);
 var $28=HEAP32[(($vfn)>>2)];
 var $call5=FUNCTION_TABLE[$28]($add_ptr);
 var $29=(($__b)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($agg_tmp7)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($agg_tmp8)|0);
 HEAP32[(($34)>>2)]=$33;
 var $__s_i_i_i=$call5;
 var $__size__i_i_i=$call5;
 var $35=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$35&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=15;break;}else{label=14;break;}
 case 14: 
 var $__data__i21_i_i=(($call5+8)|0);
 var $36=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i127=$36;var $cond_i_i207=$36;label=16;break;
 case 15: 
 var $arrayidx_i_i_i=(($__s_i_i_i+1)|0);
 var $arrayidx_i_i_i125=(($__s_i_i_i+1)|0);
 var $cond_i_i127=$arrayidx_i_i_i125;var $cond_i_i207=$arrayidx_i_i_i;label=16;break;
 case 16: 
 var $cond_i_i207;
 var $cond_i_i127;
 var $conv_i_i=($35&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=18;break;}else{label=17;break;}
 case 17: 
 var $__size__i23_i=(($call5+4)|0);
 var $37=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$37;label=19;break;
 case 18: 
 var $shr_i_i72=$conv_i_i>>>1;
 var $cond_i=$shr_i_i72;label=19;break;
 case 19: 
 var $cond_i;
 var $add_ptr12=(($cond_i_i127+$cond_i)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp6,$this,$agg_tmp7,$agg_tmp8,$__iob,$__err,$__tm,$cond_i_i207,$add_ptr12);
 var $38=(($ref_tmp6)|0);
 var $39=HEAP32[(($38)>>2)];
 HEAP32[(($29)>>2)]=$39;
 label=70;break;
 case 20: 
 var $tm_mday=(($__tm+12)|0);
 var $40=(($__e)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$agg_tmp_i100;
 var $43=(($agg_tmp_i100)|0);
 HEAP32[(($43)>>2)]=$41;
 var $call_i101=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i100,$__err,$9,2);
 var $44=HEAP32[(($__err)>>2)];
 var $and_i=$44&4;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){label=21;break;}else{label=23;break;}
 case 21: 
 var $call_off_i=((($call_i101)-(1))|0);
 var $45=($call_off_i>>>0)<31;
 if($45){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($tm_mday)>>2)]=$call_i101;
 label=70;break;
 case 23: 
 var $or_i=$44|4;
 HEAP32[(($__err)>>2)]=$or_i;
 label=70;break;
 case 24: 
 var $46=(($__b)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($agg_tmp17)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($__e)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_tmp18)|0);
 HEAP32[(($51)>>2)]=$50;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp16,$this,$agg_tmp17,$agg_tmp18,$__iob,$__err,$__tm,2424,2432);
 var $52=(($ref_tmp16)|0);
 var $53=HEAP32[(($52)>>2)];
 HEAP32[(($46)>>2)]=$53;
 label=70;break;
 case 25: 
 var $54=(($__b)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($agg_tmp21)|0);
 HEAP32[(($56)>>2)]=$55;
 var $57=(($__e)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($agg_tmp22)|0);
 HEAP32[(($59)>>2)]=$58;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp20,$this,$agg_tmp21,$agg_tmp22,$__iob,$__err,$__tm,2416,2424);
 var $60=(($ref_tmp20)|0);
 var $61=HEAP32[(($60)>>2)];
 HEAP32[(($54)>>2)]=$61;
 label=70;break;
 case 26: 
 var $62=(($__e)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$agg_tmp_i106;
 var $65=(($agg_tmp_i106)|0);
 HEAP32[(($65)>>2)]=$63;
 var $call_i107=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i106,$__err,$9,2);
 var $66=HEAP32[(($__err)>>2)];
 var $and_i108=$66&4;
 var $tobool_i109=($and_i108|0)==0;
 var $cmp_i110=($call_i107|0)<24;
 var $or_cond_i=$tobool_i109&$cmp_i110;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $tm_hour=(($__tm+8)|0);
 HEAP32[(($tm_hour)>>2)]=$call_i107;
 label=70;break;
 case 28: 
 var $or_i112=$66|4;
 HEAP32[(($__err)>>2)]=$or_i112;
 label=70;break;
 case 29: 
 var $tm_hour26=(($__tm+8)|0);
 var $67=(($__e)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$agg_tmp_i117;
 var $70=(($agg_tmp_i117)|0);
 HEAP32[(($70)>>2)]=$68;
 var $call_i118=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i117,$__err,$9,2);
 var $71=HEAP32[(($__err)>>2)];
 var $and_i119=$71&4;
 var $tobool_i120=($and_i119|0)==0;
 if($tobool_i120){label=30;break;}else{label=32;break;}
 case 30: 
 var $call_off_i121=((($call_i118)-(1))|0);
 var $72=($call_off_i121>>>0)<12;
 if($72){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($tm_hour26)>>2)]=$call_i118;
 label=70;break;
 case 32: 
 var $or_i124=$71|4;
 HEAP32[(($__err)>>2)]=$or_i124;
 label=70;break;
 case 33: 
 var $73=(($__e)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$agg_tmp_i129;
 var $76=(($agg_tmp_i129)|0);
 HEAP32[(($76)>>2)]=$74;
 var $call_i130=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i129,$__err,$9,3);
 var $77=HEAP32[(($__err)>>2)];
 var $and_i131=$77&4;
 var $tobool_i132=($and_i131|0)==0;
 var $cmp_i133=($call_i130|0)<366;
 var $or_cond_i134=$tobool_i132&$cmp_i133;
 if($or_cond_i134){label=34;break;}else{label=35;break;}
 case 34: 
 var $tm_yday=(($__tm+28)|0);
 HEAP32[(($tm_yday)>>2)]=$call_i130;
 label=70;break;
 case 35: 
 var $or_i136=$77|4;
 HEAP32[(($__err)>>2)]=$or_i136;
 label=70;break;
 case 36: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$agg_tmp_i141;
 var $81=(($agg_tmp_i141)|0);
 HEAP32[(($81)>>2)]=$79;
 var $call_i142=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i141,$__err,$9,2);
 var $sub_i=((($call_i142)-(1))|0);
 var $82=HEAP32[(($__err)>>2)];
 var $and_i143=$82&4;
 var $tobool_i144=($and_i143|0)==0;
 var $cmp_i145=($sub_i|0)<12;
 var $or_cond_i146=$tobool_i144&$cmp_i145;
 if($or_cond_i146){label=37;break;}else{label=38;break;}
 case 37: 
 var $tm_mon31=(($__tm+16)|0);
 HEAP32[(($tm_mon31)>>2)]=$sub_i;
 label=70;break;
 case 38: 
 var $or_i148=$82|4;
 HEAP32[(($__err)>>2)]=$or_i148;
 label=70;break;
 case 39: 
 var $83=(($__e)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$agg_tmp_i153;
 var $86=(($agg_tmp_i153)|0);
 HEAP32[(($86)>>2)]=$84;
 var $call_i154=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i153,$__err,$9,2);
 var $87=HEAP32[(($__err)>>2)];
 var $and_i155=$87&4;
 var $tobool_i156=($and_i155|0)==0;
 var $cmp_i157=($call_i154|0)<60;
 var $or_cond_i158=$tobool_i156&$cmp_i157;
 if($or_cond_i158){label=40;break;}else{label=41;break;}
 case 40: 
 var $tm_min=(($__tm+4)|0);
 HEAP32[(($tm_min)>>2)]=$call_i154;
 label=70;break;
 case 41: 
 var $or_i160=$87|4;
 HEAP32[(($__err)>>2)]=$or_i160;
 label=70;break;
 case 42: 
 var $88=(($__e)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($agg_tmp36)|0);
 HEAP32[(($90)>>2)]=$89;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$agg_tmp36,$__err,$9);
 label=70;break;
 case 43: 
 var $tm_hour38=(($__tm+8)|0);
 var $91=(($__e)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($agg_tmp39)|0);
 HEAP32[(($93)>>2)]=$92;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$tm_hour38,$__b,$agg_tmp39,$__err,$9);
 label=70;break;
 case 44: 
 var $94=(($__b)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($agg_tmp42)|0);
 HEAP32[(($96)>>2)]=$95;
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($agg_tmp43)|0);
 HEAP32[(($99)>>2)]=$98;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp41,$this,$agg_tmp42,$agg_tmp43,$__iob,$__err,$__tm,2400,2411);
 var $100=(($ref_tmp41)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($94)>>2)]=$101;
 label=70;break;
 case 45: 
 var $102=(($__b)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($agg_tmp46)|0);
 HEAP32[(($104)>>2)]=$103;
 var $105=(($__e)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($agg_tmp47)|0);
 HEAP32[(($107)>>2)]=$106;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp45,$this,$agg_tmp46,$agg_tmp47,$__iob,$__err,$__tm,2392,2397);
 var $108=(($ref_tmp45)|0);
 var $109=HEAP32[(($108)>>2)];
 HEAP32[(($102)>>2)]=$109;
 label=70;break;
 case 46: 
 var $110=(($__e)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$agg_tmp_i165;
 var $113=(($agg_tmp_i165)|0);
 HEAP32[(($113)>>2)]=$111;
 var $call_i166=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i165,$__err,$9,2);
 var $114=HEAP32[(($__err)>>2)];
 var $and_i167=$114&4;
 var $tobool_i168=($and_i167|0)==0;
 var $cmp_i169=($call_i166|0)<61;
 var $or_cond_i170=$tobool_i168&$cmp_i169;
 if($or_cond_i170){label=47;break;}else{label=48;break;}
 case 47: 
 var $tm_sec=(($__tm)|0);
 HEAP32[(($tm_sec)>>2)]=$call_i166;
 label=70;break;
 case 48: 
 var $or_i172=$114|4;
 HEAP32[(($__err)>>2)]=$or_i172;
 label=70;break;
 case 49: 
 var $115=(($__b)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($agg_tmp52)|0);
 HEAP32[(($117)>>2)]=$116;
 var $118=(($__e)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($agg_tmp53)|0);
 HEAP32[(($120)>>2)]=$119;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp51,$this,$agg_tmp52,$agg_tmp53,$__iob,$__err,$__tm,2384,2392);
 var $121=(($ref_tmp51)|0);
 var $122=HEAP32[(($121)>>2)];
 HEAP32[(($115)>>2)]=$122;
 label=70;break;
 case 50: 
 var $123=(($__e)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$agg_tmp_i177;
 var $126=(($agg_tmp_i177)|0);
 HEAP32[(($126)>>2)]=$124;
 var $call_i178=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i177,$__err,$9,1);
 var $127=HEAP32[(($__err)>>2)];
 var $and_i179=$127&4;
 var $tobool_i180=($and_i179|0)==0;
 var $cmp_i181=($call_i178|0)<7;
 var $or_cond_i182=$tobool_i180&$cmp_i181;
 if($or_cond_i182){label=51;break;}else{label=52;break;}
 case 51: 
 var $tm_wday55=(($__tm+24)|0);
 HEAP32[(($tm_wday55)>>2)]=$call_i178;
 label=70;break;
 case 52: 
 var $or_i184=$127|4;
 HEAP32[(($__err)>>2)]=$or_i184;
 label=70;break;
 case 53: 
 var $128=$this;
 var $vtable58=HEAP32[(($128)>>2)];
 var $vfn59=(($vtable58+20)|0);
 var $129=HEAP32[(($vfn59)>>2)];
 var $130=(($__b)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($agg_tmp60)|0);
 HEAP32[(($132)>>2)]=$131;
 var $133=(($__e)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($agg_tmp61)|0);
 HEAP32[(($135)>>2)]=$134;
 FUNCTION_TABLE[$129]($agg_result,$this,$agg_tmp60,$agg_tmp61,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $add_ptr64=(($this+8)|0);
 var $136=$add_ptr64;
 var $vtable65=HEAP32[(($136)>>2)];
 var $vfn66=(($vtable65+24)|0);
 var $137=HEAP32[(($vfn66)>>2)];
 var $call67=FUNCTION_TABLE[$137]($add_ptr64);
 var $138=(($__b)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($agg_tmp69)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=(($__e)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($agg_tmp70)|0);
 HEAP32[(($143)>>2)]=$142;
 var $__s_i_i_i158=$call67;
 var $__size__i_i_i159=$call67;
 var $144=HEAP8[($__size__i_i_i159)];
 var $and_i_i_i161=$144&1;
 var $tobool_i_i_i162=(($and_i_i_i161<<24)>>24)==0;
 if($tobool_i_i_i162){label=56;break;}else{label=55;break;}
 case 55: 
 var $__data__i21_i_i169=(($call67+8)|0);
 var $145=HEAP32[(($__data__i21_i_i169)>>2)];
 var $cond_i_i225=$145;var $cond_i_i180209=$145;label=57;break;
 case 56: 
 var $arrayidx_i_i_i178=(($__s_i_i_i158+1)|0);
 var $arrayidx_i_i_i223=(($__s_i_i_i158+1)|0);
 var $cond_i_i225=$arrayidx_i_i_i223;var $cond_i_i180209=$arrayidx_i_i_i178;label=57;break;
 case 57: 
 var $cond_i_i180209;
 var $cond_i_i225;
 var $conv_i_i245=($144&255);
 var $and_i_i246=$conv_i_i245&1;
 var $tobool_i_i247=($and_i_i246|0)==0;
 if($tobool_i_i247){label=59;break;}else{label=58;break;}
 case 58: 
 var $__size__i23_i254=(($call67+4)|0);
 var $146=HEAP32[(($__size__i23_i254)>>2)];
 var $cond_i266=$146;label=60;break;
 case 59: 
 var $shr_i_i26471=$conv_i_i245>>>1;
 var $cond_i266=$shr_i_i26471;label=60;break;
 case 60: 
 var $cond_i266;
 var $add_ptr74=(($cond_i_i225+$cond_i266)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($ref_tmp68,$this,$agg_tmp69,$agg_tmp70,$__iob,$__err,$__tm,$cond_i_i180209,$add_ptr74);
 var $147=(($ref_tmp68)|0);
 var $148=HEAP32[(($147)>>2)];
 HEAP32[(($138)>>2)]=$148;
 label=70;break;
 case 61: 
 var $tm_year=(($__tm+20)|0);
 var $149=(($__e)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$agg_tmp_i189;
 var $152=(($agg_tmp_i189)|0);
 HEAP32[(($152)>>2)]=$150;
 var $call_i190=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i189,$__err,$9,4);
 var $153=HEAP32[(($__err)>>2)];
 var $and_i191=$153&4;
 var $tobool_i192=($and_i191|0)==0;
 if($tobool_i192){label=62;break;}else{label=70;break;}
 case 62: 
 var $cmp_i193=($call_i190|0)<69;
 if($cmp_i193){label=63;break;}else{label=64;break;}
 case 63: 
 var $add_i=((($call_i190)+(2000))|0);
 var $__t_0_i=$add_i;label=65;break;
 case 64: 
 var $call_off_i195=((($call_i190)-(69))|0);
 var $154=($call_off_i195>>>0)<31;
 var $add6_i=((($call_i190)+(1900))|0);
 var $add6_call_i=($154?$add6_i:$call_i190);
 var $__t_0_i=$add6_call_i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $sub_i197=((($__t_0_i)-(1900))|0);
 HEAP32[(($tm_year)>>2)]=$sub_i197;
 label=70;break;
 case 66: 
 var $155=(($__e)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$agg_tmp_i201;
 var $158=(($agg_tmp_i201)|0);
 HEAP32[(($158)>>2)]=$156;
 var $call_i202=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i201,$__err,$9,4);
 var $159=HEAP32[(($__err)>>2)];
 var $and_i203=$159&4;
 var $tobool_i204=($and_i203|0)==0;
 if($tobool_i204){label=67;break;}else{label=70;break;}
 case 67: 
 var $tm_year78=(($__tm+20)|0);
 var $sub_i205=((($call_i202)-(1900))|0);
 HEAP32[(($tm_year78)>>2)]=$sub_i205;
 label=70;break;
 case 68: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($agg_tmp81)|0);
 HEAP32[(($162)>>2)]=$161;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$agg_tmp81,$__err,$9);
 label=70;break;
 case 69: 
 var $163=HEAP32[(($__err)>>2)];
 var $or=$163|4;
 HEAP32[(($__err)>>2)]=$or;
 label=70;break;
 case 70: 
 var $164=(($__b)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($agg_result)|0);
 HEAP32[(($166)>>2)]=$165;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $__sbuf__i11_i_i=(($__e)|0);
 var $__tab__i=(($__ct+8)|0);
 label=2;break;
 case 2: 
 var $0=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($0|0)==0;
 if($tobool_i_i_i){var $5=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $__ninp__i_i_i_i=(($0+12)|0);
 var $1=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($0+16)|0);
 var $2=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($1|0)==($2|0);
 if($cmp_i_i_i_i){label=4;break;}else{var $5=$0;label=7;break;}
 case 4: 
 var $3=$0;
 var $vtable_i_i_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $4=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$4]($0);
 var $cmp_i7_i_i_i=($call_i_i_i_i|0)==-1;
 if($cmp_i7_i_i_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $5=$_pre;label=7;break;
 case 6: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $5=0;label=7;break;
 case 7: 
 var $5;
 var $cmp_i_i_i=($5|0)==0;
 var $6=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($6|0)==0;
 if($tobool_i12_i_i){label=12;break;}else{label=8;break;}
 case 8: 
 var $__ninp__i_i15_i_i=(($6+12)|0);
 var $7=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($6+16)|0);
 var $8=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($7|0)==($8|0);
 if($cmp_i_i17_i_i){label=9;break;}else{label=11;break;}
 case 9: 
 var $9=$6;
 var $vtable_i_i19_i_i=HEAP32[(($9)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $10=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$10]($6);
 var $cmp_i7_i26_i_i=($call_i_i21_i_i|0)==-1;
 if($cmp_i7_i26_i_i){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=12;break;
 case 11: 
 if($cmp_i_i_i){var $11=$6;var $cmp_i31_i_i17=0;label=13;break;}else{var $25=$6;var $cmp_i31_i_i15=0;label=21;break;}
 case 12: 
 if($cmp_i_i_i){var $25=0;var $cmp_i31_i_i15=1;label=21;break;}else{var $11=0;var $cmp_i31_i_i17=1;label=13;break;}
 case 13: 
 var $cmp_i31_i_i17;
 var $11;
 var $12=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($12+12)|0);
 var $13=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($12+16)|0);
 var $14=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i8=($13|0)==($14|0);
 if($cmp_i_i8){label=14;break;}else{label=15;break;}
 case 14: 
 var $15=$12;
 var $vtable_i_i=HEAP32[(($15)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $16=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$16]($12);
 var $extract_t=(($call_i_i)&255);
 var $retval_i_i_0_off0=$extract_t;label=16;break;
 case 15: 
 var $17=HEAP8[($13)];
 var $retval_i_i_0_off0=$17;label=16;break;
 case 16: 
 var $retval_i_i_0_off0;
 var $tobool_i=(($retval_i_i_0_off0<<24)>>24)<0;
 if($tobool_i){var $25=$11;var $cmp_i31_i_i15=$cmp_i31_i_i17;label=21;break;}else{label=17;break;}
 case 17: 
 var $conv_i11=(($retval_i_i_0_off0<<24)>>24);
 var $18=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i=(($18+($conv_i11<<1))|0);
 var $19=HEAP16[(($arrayidx_i)>>1)];
 var $and_i=$19&8192;
 var $cmp_i=(($and_i<<16)>>16)==0;
 if($cmp_i){var $25=$11;var $cmp_i31_i_i15=$cmp_i31_i_i17;label=21;break;}else{label=18;break;}
 case 18: 
 var $20=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i19=(($20+12)|0);
 var $21=HEAP32[(($__ninp__i_i19)>>2)];
 var $__einp__i_i20=(($20+16)|0);
 var $22=HEAP32[(($__einp__i_i20)>>2)];
 var $cmp_i_i21=($21|0)==($22|0);
 if($cmp_i_i21){label=19;break;}else{label=20;break;}
 case 19: 
 var $23=$20;
 var $vtable_i_i22=HEAP32[(($23)>>2)];
 var $vfn_i_i23=(($vtable_i_i22+40)|0);
 var $24=HEAP32[(($vfn_i_i23)>>2)];
 var $call_i_i24=FUNCTION_TABLE[$24]($20);
 label=2;break;
 case 20: 
 var $incdec_ptr_i_i=(($21+1)|0);
 HEAP32[(($__ninp__i_i19)>>2)]=$incdec_ptr_i_i;
 label=2;break;
 case 21: 
 var $cmp_i31_i_i15;
 var $25;
 var $26=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i48=($26|0)==0;
 if($tobool_i_i_i48){var $31=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $__ninp__i_i_i_i51=(($26+12)|0);
 var $27=HEAP32[(($__ninp__i_i_i_i51)>>2)];
 var $__einp__i_i_i_i52=(($26+16)|0);
 var $28=HEAP32[(($__einp__i_i_i_i52)>>2)];
 var $cmp_i_i_i_i53=($27|0)==($28|0);
 if($cmp_i_i_i_i53){label=23;break;}else{var $31=$26;label=26;break;}
 case 23: 
 var $29=$26;
 var $vtable_i_i_i_i55=HEAP32[(($29)>>2)];
 var $vfn_i_i_i_i56=(($vtable_i_i_i_i55+36)|0);
 var $30=HEAP32[(($vfn_i_i_i_i56)>>2)];
 var $call_i_i_i_i57=FUNCTION_TABLE[$30]($26);
 var $cmp_i7_i_i_i62=($call_i_i_i_i57|0)==-1;
 if($cmp_i7_i_i_i62){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre12=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $31=$_pre12;label=26;break;
 case 25: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $31=0;label=26;break;
 case 26: 
 var $31;
 var $cmp_i_i_i67=($31|0)==0;
 if($cmp_i31_i_i15){label=31;break;}else{label=27;break;}
 case 27: 
 var $__ninp__i_i15_i_i75=(($25+12)|0);
 var $32=HEAP32[(($__ninp__i_i15_i_i75)>>2)];
 var $__einp__i_i16_i_i76=(($25+16)|0);
 var $33=HEAP32[(($__einp__i_i16_i_i76)>>2)];
 var $cmp_i_i17_i_i77=($32|0)==($33|0);
 if($cmp_i_i17_i_i77){label=28;break;}else{label=32;break;}
 case 28: 
 var $34=$25;
 var $vtable_i_i19_i_i79=HEAP32[(($34)>>2)];
 var $vfn_i_i20_i_i80=(($vtable_i_i19_i_i79+36)|0);
 var $35=HEAP32[(($vfn_i_i20_i_i80)>>2)];
 var $call_i_i21_i_i81=FUNCTION_TABLE[$35]($25);
 var $cmp_i7_i26_i_i86=($call_i_i21_i_i81|0)==-1;
 if($cmp_i7_i26_i_i86){label=30;break;}else{label=29;break;}
 case 29: 
 if($cmp_i_i_i67){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=31;break;
 case 31: 
 if($cmp_i_i_i67){label=33;break;}else{label=34;break;}
 case 32: 
 var $cmp_i31_i_i91=($25|0)==0;
 var $cmp_i_i93tmp=$cmp_i_i_i67^$cmp_i31_i_i91;
 if($cmp_i_i93tmp){label=34;break;}else{label=33;break;}
 case 33: 
 var $36=HEAP32[(($__err)>>2)];
 var $or=$36|2;
 HEAP32[(($__err)>>2)]=$or;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp=sp;
 var $add_ptr=(($this+8)|0);
 var $0=$add_ptr;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+8)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($add_ptr);
 var $__size__i_i=$call;
 var $2=HEAP8[($__size__i_i)];
 var $conv_i_i=($2&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($call+4)|0);
 var $3=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$3;label=4;break;
 case 3: 
 var $shr_i_i10=$conv_i_i>>>1;
 var $cond_i=$shr_i_i10;label=4;break;
 case 4: 
 var $cond_i;
 var $4=(($call+12)|0);
 var $__size__i_i34=$4;
 var $5=HEAP8[($__size__i_i34)];
 var $conv_i_i35=($5&255);
 var $and_i_i36=$conv_i_i35&1;
 var $tobool_i_i37=($and_i_i36|0)==0;
 if($tobool_i_i37){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i44=(($call+16)|0);
 var $6=HEAP32[(($__size__i23_i44)>>2)];
 var $cond_i56=$6;label=7;break;
 case 6: 
 var $shr_i_i5411=$conv_i_i35>>>1;
 var $cond_i56=$shr_i_i5411;label=7;break;
 case 7: 
 var $cond_i56;
 var $add=(((-$cond_i56))|0);
 var $cmp=($cond_i|0)==($add|0);
 if($cmp){label=8;break;}else{label=9;break;}
 case 8: 
 var $7=HEAP32[(($__err)>>2)];
 var $or=$7|4;
 HEAP32[(($__err)>>2)]=$or;
 label=15;break;
 case 9: 
 var $8=(($__e)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($agg_tmp)|0);
 HEAP32[(($10)>>2)]=$9;
 var $add_ptr5=(($call+24)|0);
 var $call6=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp,$call,$add_ptr5,$__ct,$__err,0);
 var $sub_ptr_lhs_cast=$call6;
 var $sub_ptr_rhs_cast=$call;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $11=($call6|0)==($call|0);
 if($11){label=10;break;}else{label=12;break;}
 case 10: 
 var $12=HEAP32[(($__h)>>2)];
 var $cmp8=($12|0)==12;
 if($cmp8){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $13=($sub_ptr_sub|0)==12;
 if($13){label=13;break;}else{label=15;break;}
 case 13: 
 var $14=HEAP32[(($__h)>>2)];
 var $cmp12=($14|0)<12;
 if($cmp12){label=14;break;}else{label=15;break;}
 case 14: 
 var $add14=((($14)+(12))|0);
 HEAP32[(($__h)>>2)]=$add14;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $0=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($0|0)==0;
 if($tobool_i_i_i){var $5=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $__ninp__i_i_i_i=(($0+12)|0);
 var $1=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($0+16)|0);
 var $2=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($1|0)==($2|0);
 if($cmp_i_i_i_i){label=3;break;}else{var $5=$0;label=6;break;}
 case 3: 
 var $3=$0;
 var $vtable_i_i_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $4=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$4]($0);
 var $cmp_i7_i_i_i=($call_i_i_i_i|0)==-1;
 if($cmp_i7_i_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $5=$_pre;label=6;break;
 case 5: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $5=0;label=6;break;
 case 6: 
 var $5;
 var $cmp_i_i_i=($5|0)==0;
 var $__sbuf__i11_i_i=(($__e)|0);
 var $6=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($6|0)==0;
 if($tobool_i12_i_i){label=11;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i15_i_i=(($6+12)|0);
 var $7=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($6+16)|0);
 var $8=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($7|0)==($8|0);
 if($cmp_i_i17_i_i){label=8;break;}else{label=10;break;}
 case 8: 
 var $9=$6;
 var $vtable_i_i19_i_i=HEAP32[(($9)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $10=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$10]($6);
 var $cmp_i7_i26_i_i=($call_i_i21_i_i|0)==-1;
 if($cmp_i7_i26_i_i){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=11;break;
 case 10: 
 if($cmp_i_i_i){var $12=$6;var $cmp_i31_i_i13=0;label=13;break;}else{label=12;break;}
 case 11: 
 if($cmp_i_i_i){label=12;break;}else{var $12=0;var $cmp_i31_i_i13=1;label=13;break;}
 case 12: 
 var $11=HEAP32[(($__err)>>2)];
 var $or=$11|6;
 HEAP32[(($__err)>>2)]=$or;
 label=34;break;
 case 13: 
 var $cmp_i31_i_i13;
 var $12;
 var $13=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($13+12)|0);
 var $14=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($13+16)|0);
 var $15=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i14=($14|0)==($15|0);
 if($cmp_i_i14){label=14;break;}else{label=15;break;}
 case 14: 
 var $16=$13;
 var $vtable_i_i=HEAP32[(($16)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $17=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$17]($13);
 var $extract_t=(($call_i_i)&255);
 var $retval_i_i_0_off0=$extract_t;label=16;break;
 case 15: 
 var $18=HEAP8[($14)];
 var $retval_i_i_0_off0=$18;label=16;break;
 case 16: 
 var $retval_i_i_0_off0;
 var $19=$__ct;
 var $vtable_i=HEAP32[(($19)>>2)];
 var $vfn_i=(($vtable_i+36)|0);
 var $20=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$20]($__ct,$retval_i_i_0_off0,0);
 var $cmp=(($call_i<<24)>>24)==37;
 if($cmp){label=18;break;}else{label=17;break;}
 case 17: 
 var $21=HEAP32[(($__err)>>2)];
 var $or5=$21|4;
 HEAP32[(($__err)>>2)]=$or5;
 label=34;break;
 case 18: 
 var $22=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i24=(($22+12)|0);
 var $23=HEAP32[(($__ninp__i_i24)>>2)];
 var $__einp__i_i25=(($22+16)|0);
 var $24=HEAP32[(($__einp__i_i25)>>2)];
 var $cmp_i_i26=($23|0)==($24|0);
 if($cmp_i_i26){label=19;break;}else{label=20;break;}
 case 19: 
 var $25=$22;
 var $vtable_i_i27=HEAP32[(($25)>>2)];
 var $vfn_i_i28=(($vtable_i_i27+40)|0);
 var $26=HEAP32[(($vfn_i_i28)>>2)];
 var $call_i_i29=FUNCTION_TABLE[$26]($22);
 label=21;break;
 case 20: 
 var $incdec_ptr_i_i=(($23+1)|0);
 HEAP32[(($__ninp__i_i24)>>2)]=$incdec_ptr_i_i;
 label=21;break;
 case 21: 
 var $27=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i53=($27|0)==0;
 if($tobool_i_i_i53){var $32=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $__ninp__i_i_i_i56=(($27+12)|0);
 var $28=HEAP32[(($__ninp__i_i_i_i56)>>2)];
 var $__einp__i_i_i_i57=(($27+16)|0);
 var $29=HEAP32[(($__einp__i_i_i_i57)>>2)];
 var $cmp_i_i_i_i58=($28|0)==($29|0);
 if($cmp_i_i_i_i58){label=23;break;}else{var $32=$27;label=26;break;}
 case 23: 
 var $30=$27;
 var $vtable_i_i_i_i60=HEAP32[(($30)>>2)];
 var $vfn_i_i_i_i61=(($vtable_i_i_i_i60+36)|0);
 var $31=HEAP32[(($vfn_i_i_i_i61)>>2)];
 var $call_i_i_i_i62=FUNCTION_TABLE[$31]($27);
 var $cmp_i7_i_i_i67=($call_i_i_i_i62|0)==-1;
 if($cmp_i7_i_i_i67){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre10=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $32=$_pre10;label=26;break;
 case 25: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $32=0;label=26;break;
 case 26: 
 var $32;
 var $cmp_i_i_i72=($32|0)==0;
 if($cmp_i31_i_i13){label=31;break;}else{label=27;break;}
 case 27: 
 var $__ninp__i_i15_i_i80=(($12+12)|0);
 var $33=HEAP32[(($__ninp__i_i15_i_i80)>>2)];
 var $__einp__i_i16_i_i81=(($12+16)|0);
 var $34=HEAP32[(($__einp__i_i16_i_i81)>>2)];
 var $cmp_i_i17_i_i82=($33|0)==($34|0);
 if($cmp_i_i17_i_i82){label=28;break;}else{label=32;break;}
 case 28: 
 var $35=$12;
 var $vtable_i_i19_i_i84=HEAP32[(($35)>>2)];
 var $vfn_i_i20_i_i85=(($vtable_i_i19_i_i84+36)|0);
 var $36=HEAP32[(($vfn_i_i20_i_i85)>>2)];
 var $call_i_i21_i_i86=FUNCTION_TABLE[$36]($12);
 var $cmp_i7_i26_i_i91=($call_i_i21_i_i86|0)==-1;
 if($cmp_i7_i26_i_i91){label=30;break;}else{label=29;break;}
 case 29: 
 if($cmp_i_i_i72){label=34;break;}else{label=33;break;}
 case 30: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=31;break;
 case 31: 
 if($cmp_i_i_i72){label=33;break;}else{label=34;break;}
 case 32: 
 var $cmp_i31_i_i96=($12|0)==0;
 var $cmp_i_i98tmp=$cmp_i_i_i72^$cmp_i31_i_i96;
 if($cmp_i_i98tmp){label=34;break;}else{label=33;break;}
 case 33: 
 var $37=HEAP32[(($__err)>>2)];
 var $or9=$37|2;
 HEAP32[(($__err)>>2)]=$or9;
 label=34;break;
 case 34: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $0=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($0|0)==0;
 if($tobool_i_i_i){var $5=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $__ninp__i_i_i_i=(($0+12)|0);
 var $1=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($0+16)|0);
 var $2=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($1|0)==($2|0);
 if($cmp_i_i_i_i){label=3;break;}else{var $5=$0;label=6;break;}
 case 3: 
 var $3=$0;
 var $vtable_i_i_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $4=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$4]($0);
 var $cmp_i7_i_i_i=($call_i_i_i_i|0)==-1;
 if($cmp_i7_i_i_i){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $5=$_pre;label=6;break;
 case 5: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $5=0;label=6;break;
 case 6: 
 var $5;
 var $cmp_i_i_i=($5|0)==0;
 var $__sbuf__i11_i_i=(($__e)|0);
 var $6=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($6|0)==0;
 if($tobool_i12_i_i){label=11;break;}else{label=7;break;}
 case 7: 
 var $__ninp__i_i15_i_i=(($6+12)|0);
 var $7=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($6+16)|0);
 var $8=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($7|0)==($8|0);
 if($cmp_i_i17_i_i){label=8;break;}else{label=10;break;}
 case 8: 
 var $9=$6;
 var $vtable_i_i19_i_i=HEAP32[(($9)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $10=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$10]($6);
 var $cmp_i7_i26_i_i=($call_i_i21_i_i|0)==-1;
 if($cmp_i7_i26_i_i){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=11;break;
 case 10: 
 if($cmp_i_i_i){var $12=$6;label=13;break;}else{label=12;break;}
 case 11: 
 if($cmp_i_i_i){label=12;break;}else{var $12=0;label=13;break;}
 case 12: 
 var $11=HEAP32[(($__err)>>2)];
 var $or=$11|6;
 HEAP32[(($__err)>>2)]=$or;
 var $retval_0=0;label=53;break;
 case 13: 
 var $12;
 var $13=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($13+12)|0);
 var $14=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($13+16)|0);
 var $15=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i24=($14|0)==($15|0);
 if($cmp_i_i24){label=14;break;}else{label=15;break;}
 case 14: 
 var $16=$13;
 var $vtable_i_i=HEAP32[(($16)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $17=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$17]($13);
 var $extract_t=(($call_i_i)&255);
 var $retval_i_i_0_off0=$extract_t;label=16;break;
 case 15: 
 var $18=HEAP8[($14)];
 var $retval_i_i_0_off0=$18;label=16;break;
 case 16: 
 var $retval_i_i_0_off0;
 var $tobool_i=(($retval_i_i_0_off0<<24)>>24)<0;
 if($tobool_i){label=18;break;}else{label=17;break;}
 case 17: 
 var $conv_i27=(($retval_i_i_0_off0<<24)>>24);
 var $__tab__i=(($__ct+8)|0);
 var $19=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i=(($19+($conv_i27<<1))|0);
 var $20=HEAP16[(($arrayidx_i)>>1)];
 var $and_i=$20&2048;
 var $cmp_i=(($and_i<<16)>>16)==0;
 if($cmp_i){label=18;break;}else{label=19;break;}
 case 18: 
 var $21=HEAP32[(($__err)>>2)];
 var $or4=$21|4;
 HEAP32[(($__err)>>2)]=$or4;
 var $retval_0=0;label=53;break;
 case 19: 
 var $22=$__ct;
 var $vtable_i=HEAP32[(($22)>>2)];
 var $vfn_i=(($vtable_i+36)|0);
 var $23=HEAP32[(($vfn_i)>>2)];
 var $call_i31=FUNCTION_TABLE[$23]($__ct,$retval_i_i_0_off0,0);
 var $conv=(($call_i31<<24)>>24);
 var $24=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i39=(($24+12)|0);
 var $25=HEAP32[(($__ninp__i_i39)>>2)];
 var $__einp__i_i40=(($24+16)|0);
 var $26=HEAP32[(($__einp__i_i40)>>2)];
 var $cmp_i_i41=($25|0)==($26|0);
 if($cmp_i_i41){label=20;break;}else{label=21;break;}
 case 20: 
 var $27=$24;
 var $vtable_i_i42=HEAP32[(($27)>>2)];
 var $vfn_i_i43=(($vtable_i_i42+40)|0);
 var $28=HEAP32[(($vfn_i_i43)>>2)];
 var $call_i_i44=FUNCTION_TABLE[$28]($24);
 var $__r_0_in=$conv;var $__n_addr_0_in=$__n;var $29=$12;label=22;break;
 case 21: 
 var $incdec_ptr_i_i=(($25+1)|0);
 HEAP32[(($__ninp__i_i39)>>2)]=$incdec_ptr_i_i;
 var $__r_0_in=$conv;var $__n_addr_0_in=$__n;var $29=$12;label=22;break;
 case 22: 
 var $29;
 var $__n_addr_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $__n_addr_0=((($__n_addr_0_in)-(1))|0);
 var $30=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i68=($30|0)==0;
 if($tobool_i_i_i68){var $35=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $__ninp__i_i_i_i71=(($30+12)|0);
 var $31=HEAP32[(($__ninp__i_i_i_i71)>>2)];
 var $__einp__i_i_i_i72=(($30+16)|0);
 var $32=HEAP32[(($__einp__i_i_i_i72)>>2)];
 var $cmp_i_i_i_i73=($31|0)==($32|0);
 if($cmp_i_i_i_i73){label=24;break;}else{var $35=$30;label=27;break;}
 case 24: 
 var $33=$30;
 var $vtable_i_i_i_i75=HEAP32[(($33)>>2)];
 var $vfn_i_i_i_i76=(($vtable_i_i_i_i75+36)|0);
 var $34=HEAP32[(($vfn_i_i_i_i76)>>2)];
 var $call_i_i_i_i77=FUNCTION_TABLE[$34]($30);
 var $cmp_i7_i_i_i82=($call_i_i_i_i77|0)==-1;
 if($cmp_i7_i_i_i82){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre35=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $35=$_pre35;label=27;break;
 case 26: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $35=0;label=27;break;
 case 27: 
 var $35;
 var $cmp_i_i_i87=($35|0)==0;
 var $tobool_i12_i_i91=($29|0)==0;
 if($tobool_i12_i_i91){var $42=$35;var $41=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $__ninp__i_i15_i_i95=(($29+12)|0);
 var $36=HEAP32[(($__ninp__i_i15_i_i95)>>2)];
 var $__einp__i_i16_i_i96=(($29+16)|0);
 var $37=HEAP32[(($__einp__i_i16_i_i96)>>2)];
 var $cmp_i_i17_i_i97=($36|0)==($37|0);
 if($cmp_i_i17_i_i97){label=29;break;}else{var $40=$29;label=31;break;}
 case 29: 
 var $38=$29;
 var $vtable_i_i19_i_i99=HEAP32[(($38)>>2)];
 var $vfn_i_i20_i_i100=(($vtable_i_i19_i_i99+36)|0);
 var $39=HEAP32[(($vfn_i_i20_i_i100)>>2)];
 var $call_i_i21_i_i101=FUNCTION_TABLE[$39]($29);
 var $cmp_i7_i26_i_i106=($call_i_i21_i_i101|0)==-1;
 if($cmp_i7_i26_i_i106){label=30;break;}else{var $40=$29;label=31;break;}
 case 30: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 var $40=0;label=31;break;
 case 31: 
 var $40;
 var $_pr=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $42=$_pr;var $41=$40;label=32;break;
 case 32: 
 var $41;
 var $42;
 var $cmp_i31_i_i111=($41|0)==0;
 var $lnot_i=$cmp_i_i_i87^$cmp_i31_i_i111;
 var $cmp=($__n_addr_0|0)>0;
 var $cmp_=$lnot_i&$cmp;
 if($cmp_){label=33;break;}else{label=41;break;}
 case 33: 
 var $__ninp__i_i121=(($42+12)|0);
 var $43=HEAP32[(($__ninp__i_i121)>>2)];
 var $__einp__i_i122=(($42+16)|0);
 var $44=HEAP32[(($__einp__i_i122)>>2)];
 var $cmp_i_i123=($43|0)==($44|0);
 if($cmp_i_i123){label=34;break;}else{label=35;break;}
 case 34: 
 var $45=$42;
 var $vtable_i_i124=HEAP32[(($45)>>2)];
 var $vfn_i_i125=(($vtable_i_i124+36)|0);
 var $46=HEAP32[(($vfn_i_i125)>>2)];
 var $call_i_i126=FUNCTION_TABLE[$46]($42);
 var $extract_t20=(($call_i_i126)&255);
 var $retval_i_i115_0_off0=$extract_t20;label=36;break;
 case 35: 
 var $47=HEAP8[($43)];
 var $retval_i_i115_0_off0=$47;label=36;break;
 case 36: 
 var $retval_i_i115_0_off0;
 var $tobool_i139=(($retval_i_i115_0_off0<<24)>>24)<0;
 if($tobool_i139){var $retval_0=$__r_0;label=53;break;}else{label=37;break;}
 case 37: 
 var $conv_i137=(($retval_i_i115_0_off0<<24)>>24);
 var $48=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i142=(($48+($conv_i137<<1))|0);
 var $49=HEAP16[(($arrayidx_i142)>>1)];
 var $and_i145=$49&2048;
 var $cmp_i146=(($and_i145<<16)>>16)==0;
 if($cmp_i146){var $retval_0=$__r_0;label=53;break;}else{label=38;break;}
 case 38: 
 var $mul=((($__r_0)*(10))&-1);
 var $vtable_i155=HEAP32[(($22)>>2)];
 var $vfn_i156=(($vtable_i155+36)|0);
 var $50=HEAP32[(($vfn_i156)>>2)];
 var $call_i157=FUNCTION_TABLE[$50]($__ct,$retval_i_i115_0_off0,0);
 var $conv14=(($call_i157<<24)>>24);
 var $add=((($conv14)+($mul))|0);
 var $51=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i165=(($51+12)|0);
 var $52=HEAP32[(($__ninp__i_i165)>>2)];
 var $__einp__i_i166=(($51+16)|0);
 var $53=HEAP32[(($__einp__i_i166)>>2)];
 var $cmp_i_i167=($52|0)==($53|0);
 if($cmp_i_i167){label=39;break;}else{label=40;break;}
 case 39: 
 var $54=$51;
 var $vtable_i_i168=HEAP32[(($54)>>2)];
 var $vfn_i_i169=(($vtable_i_i168+40)|0);
 var $55=HEAP32[(($vfn_i_i169)>>2)];
 var $call_i_i170=FUNCTION_TABLE[$55]($51);
 var $__r_0_in=$add;var $__n_addr_0_in=$__n_addr_0;var $29=$41;label=22;break;
 case 40: 
 var $incdec_ptr_i_i173=(($52+1)|0);
 HEAP32[(($__ninp__i_i165)>>2)]=$incdec_ptr_i_i173;
 var $__r_0_in=$add;var $__n_addr_0_in=$__n_addr_0;var $29=$41;label=22;break;
 case 41: 
 var $tobool_i_i_i196=($42|0)==0;
 if($tobool_i_i_i196){var $60=0;label=46;break;}else{label=42;break;}
 case 42: 
 var $__ninp__i_i_i_i199=(($42+12)|0);
 var $56=HEAP32[(($__ninp__i_i_i_i199)>>2)];
 var $__einp__i_i_i_i200=(($42+16)|0);
 var $57=HEAP32[(($__einp__i_i_i_i200)>>2)];
 var $cmp_i_i_i_i201=($56|0)==($57|0);
 if($cmp_i_i_i_i201){label=43;break;}else{var $60=$42;label=46;break;}
 case 43: 
 var $58=$42;
 var $vtable_i_i_i_i203=HEAP32[(($58)>>2)];
 var $vfn_i_i_i_i204=(($vtable_i_i_i_i203+36)|0);
 var $59=HEAP32[(($vfn_i_i_i_i204)>>2)];
 var $call_i_i_i_i205=FUNCTION_TABLE[$59]($42);
 var $cmp_i7_i_i_i210=($call_i_i_i_i205|0)==-1;
 if($cmp_i7_i_i_i210){label=45;break;}else{label=44;break;}
 case 44: 
 var $_pre36=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $60=$_pre36;label=46;break;
 case 45: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $60=0;label=46;break;
 case 46: 
 var $60;
 var $cmp_i_i_i215=($60|0)==0;
 if($cmp_i31_i_i111){label=51;break;}else{label=47;break;}
 case 47: 
 var $__ninp__i_i15_i_i223=(($41+12)|0);
 var $61=HEAP32[(($__ninp__i_i15_i_i223)>>2)];
 var $__einp__i_i16_i_i224=(($41+16)|0);
 var $62=HEAP32[(($__einp__i_i16_i_i224)>>2)];
 var $cmp_i_i17_i_i225=($61|0)==($62|0);
 if($cmp_i_i17_i_i225){label=48;break;}else{label=50;break;}
 case 48: 
 var $63=$41;
 var $vtable_i_i19_i_i227=HEAP32[(($63)>>2)];
 var $vfn_i_i20_i_i228=(($vtable_i_i19_i_i227+36)|0);
 var $64=HEAP32[(($vfn_i_i20_i_i228)>>2)];
 var $call_i_i21_i_i229=FUNCTION_TABLE[$64]($41);
 var $cmp_i7_i26_i_i234=($call_i_i21_i_i229|0)==-1;
 if($cmp_i7_i26_i_i234){label=49;break;}else{label=50;break;}
 case 49: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=51;break;
 case 50: 
 if($cmp_i_i_i215){var $retval_0=$__r_0;label=53;break;}else{label=52;break;}
 case 51: 
 if($cmp_i_i_i215){label=52;break;}else{var $retval_0=$__r_0;label=53;break;}
 case 52: 
 var $65=HEAP32[(($__err)>>2)];
 var $or20=$65|2;
 HEAP32[(($__err)>>2)]=$or20;
 var $retval_0=$__r_0;label=53;break;
 case 53: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $ref_tmp=(sp)+(16);
 var $ref_tmp22=(sp)+(24);
 var $agg_tmp=(sp)+(32);
 var $agg_tmp23=(sp)+(40);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i35=($2|0)==-1;
 if($cmp_i_i_i35){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i37=($6|0)==0;
 if($tobool_i_i_i37){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i41=__ZNSt3__114__shared_count16__release_sharedEv($10);
 HEAP32[(($__err)>>2)]=0;
 var $cmp54=($__fmtb|0)==($__fmte|0);
 var $__sbuf__i_i_i243_phi_trans_insert_pre_pre=(($__b)|0);
 if($cmp54){label=71;break;}else{label=8;break;}
 case 8: 
 var $__sbuf__i11_i_i=(($__e)|0);
 var $11=$6;
 var $12=$6;
 var $13=$6;
 var $14=$this;
 var $15=(($agg_tmp)|0);
 var $16=(($agg_tmp23)|0);
 var $17=(($ref_tmp22)|0);
 var $__fmtb_addr_0_ph55=$__fmtb;var $_pre57=0;label=9;break;
 case 9: 
 var $_pre57;
 var $__fmtb_addr_0_ph55;
 var $18=$_pre57;label=10;break;
 case 10: 
 var $18;
 var $cmp2=($18|0)==0;
 if($cmp2){label=11;break;}else{label=71;break;}
 case 11: 
 var $19=HEAP32[(($__sbuf__i_i_i243_phi_trans_insert_pre_pre)>>2)];
 var $tobool_i_i_i=($19|0)==0;
 if($tobool_i_i_i){var $25=0;label=17;break;}else{label=12;break;}
 case 12: 
 var $__ninp__i_i_i_i=(($19+12)|0);
 var $20=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($19+16)|0);
 var $21=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($20|0)==($21|0);
 if($cmp_i_i_i_i){label=13;break;}else{label=14;break;}
 case 13: 
 var $22=$19;
 var $vtable_i_i_i_i=HEAP32[(($22)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $23=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$23]($19);
 var $retval_i_i_i_i_0=$call_i_i_i_i;label=15;break;
 case 14: 
 var $24=HEAP32[(($20)>>2)];
 var $retval_i_i_i_i_0=$24;label=15;break;
 case 15: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=16;break;}else{var $25=$19;label=17;break;}
 case 16: 
 HEAP32[(($__sbuf__i_i_i243_phi_trans_insert_pre_pre)>>2)]=0;
 var $25=0;label=17;break;
 case 17: 
 var $25;
 var $cmp_i_i_i=($25|0)==0;
 var $26=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($26|0)==0;
 if($tobool_i12_i_i){label=23;break;}else{label=18;break;}
 case 18: 
 var $__ninp__i_i15_i_i=(($26+12)|0);
 var $27=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($26+16)|0);
 var $28=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($27|0)==($28|0);
 if($cmp_i_i17_i_i){label=19;break;}else{label=20;break;}
 case 19: 
 var $29=$26;
 var $vtable_i_i19_i_i=HEAP32[(($29)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $30=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$30]($26);
 var $retval_i_i7_i_i_0=$call_i_i21_i_i;label=21;break;
 case 20: 
 var $31=HEAP32[(($27)>>2)];
 var $retval_i_i7_i_i_0=$31;label=21;break;
 case 21: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=22;break;}else{label=24;break;}
 case 22: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=23;break;
 case 23: 
 if($cmp_i_i_i){label=25;break;}else{var $35=0;label=27;break;}
 case 24: 
 var $cmp_i30_i_i=($26|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i^$cmp_i30_i_i;
 if($cmp_i_itmp){var $35=$26;label=27;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($__err)>>2)]=4;
 var $84=$25;label=72;break;
 case 26: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=HEAP32[(($__locale__i)>>2)];
 var $34=(($33)|0);
 var $call_i43=__ZNSt3__114__shared_count16__release_sharedEv($34);
 ___resumeException($32$0)
 case 27: 
 var $35;
 var $36=HEAP32[(($__fmtb_addr_0_ph55)>>2)];
 var $vtable_i=HEAP32[(($11)>>2)];
 var $vfn_i=(($vtable_i+52)|0);
 var $37=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$37]($8,$36,0);
 var $cmp5=(($call_i<<24)>>24)==37;
 if($cmp5){label=28;break;}else{label=37;break;}
 case 28: 
 var $incdec_ptr=(($__fmtb_addr_0_ph55+4)|0);
 var $cmp7=($incdec_ptr|0)==($__fmte|0);
 if($cmp7){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($__err)>>2)]=4;
 var $84=$25;label=72;break;
 case 30: 
 var $38=HEAP32[(($incdec_ptr)>>2)];
 var $vtable_i64=HEAP32[(($11)>>2)];
 var $vfn_i65=(($vtable_i64+52)|0);
 var $39=HEAP32[(($vfn_i65)>>2)];
 var $call_i66=FUNCTION_TABLE[$39]($8,$38,0);
 if((($call_i66<<24)>>24)==69|(($call_i66<<24)>>24)==48){ label=31;break;}else{var $__opt_0=0;var $__cmd_0=$call_i66;var $__fmtb_addr_1=$incdec_ptr;label=34;break;}
 case 31: 
 var $incdec_ptr16=(($__fmtb_addr_0_ph55+8)|0);
 var $cmp17=($incdec_ptr16|0)==($__fmte|0);
 if($cmp17){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($__err)>>2)]=4;
 var $84=$25;label=72;break;
 case 33: 
 var $40=HEAP32[(($incdec_ptr16)>>2)];
 var $vtable_i71=HEAP32[(($11)>>2)];
 var $vfn_i72=(($vtable_i71+52)|0);
 var $41=HEAP32[(($vfn_i72)>>2)];
 var $call_i73=FUNCTION_TABLE[$41]($8,$40,0);
 var $__opt_0=$call_i66;var $__cmd_0=$call_i73;var $__fmtb_addr_1=$incdec_ptr16;label=34;break;
 case 34: 
 var $__fmtb_addr_1;
 var $__cmd_0;
 var $__opt_0;
 var $vtable=HEAP32[(($14)>>2)];
 var $vfn=(($vtable+36)|0);
 var $42=HEAP32[(($vfn)>>2)];
 HEAP32[(($15)>>2)]=$25;
 HEAP32[(($16)>>2)]=$35;
 FUNCTION_TABLE[$42]($ref_tmp22,$this,$agg_tmp,$agg_tmp23,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $43=HEAP32[(($17)>>2)];
 HEAP32[(($__sbuf__i_i_i243_phi_trans_insert_pre_pre)>>2)]=$43;
 var $incdec_ptr24=(($__fmtb_addr_1+4)|0);
 var $__fmtb_addr_0_ph_be=$incdec_ptr24;label=35;break;
 case 35: 
 var $__fmtb_addr_0_ph_be;
 var $cmp=($__fmtb_addr_0_ph_be|0)==($__fmte|0);
 if($cmp){label=71;break;}else{label=36;break;}
 case 36: 
 var $_pre57_pre=HEAP32[(($__err)>>2)];
 var $__fmtb_addr_0_ph55=$__fmtb_addr_0_ph_be;var $_pre57=$_pre57_pre;label=9;break;
 case 37: 
 var $44=HEAP32[(($__fmtb_addr_0_ph55)>>2)];
 var $vtable_i77=HEAP32[(($12)>>2)];
 var $vfn_i78=(($vtable_i77+12)|0);
 var $45=HEAP32[(($vfn_i78)>>2)];
 var $call_i79=FUNCTION_TABLE[$45]($8,8192,$44);
 if($call_i79){var $__fmtb_addr_0_pn=$__fmtb_addr_0_ph55;label=38;break;}else{label=62;break;}
 case 38: 
 var $__fmtb_addr_0_pn;
 var $__fmtb_addr_2=(($__fmtb_addr_0_pn+4)|0);
 var $cmp28=($__fmtb_addr_2|0)==($__fmte|0);
 if($cmp28){var $__fmtb_addr_2_lcssa=$__fmte;label=40;break;}else{label=39;break;}
 case 39: 
 var $46=HEAP32[(($__fmtb_addr_2)>>2)];
 var $vtable_i84=HEAP32[(($12)>>2)];
 var $vfn_i85=(($vtable_i84+12)|0);
 var $47=HEAP32[(($vfn_i85)>>2)];
 var $call_i86=FUNCTION_TABLE[$47]($8,8192,$46);
 if($call_i86){var $__fmtb_addr_0_pn=$__fmtb_addr_2;label=38;break;}else{var $__fmtb_addr_2_lcssa=$__fmtb_addr_2;label=40;break;}
 case 40: 
 var $__fmtb_addr_2_lcssa;
 var $49=$25;var $48=$35;label=41;break;
 case 41: 
 var $48;
 var $49;
 var $tobool_i_i_i106=($49|0)==0;
 if($tobool_i_i_i106){var $55=0;label=47;break;}else{label=42;break;}
 case 42: 
 var $__ninp__i_i_i_i109=(($49+12)|0);
 var $50=HEAP32[(($__ninp__i_i_i_i109)>>2)];
 var $__einp__i_i_i_i110=(($49+16)|0);
 var $51=HEAP32[(($__einp__i_i_i_i110)>>2)];
 var $cmp_i_i_i_i111=($50|0)==($51|0);
 if($cmp_i_i_i_i111){label=43;break;}else{label=44;break;}
 case 43: 
 var $52=$49;
 var $vtable_i_i_i_i113=HEAP32[(($52)>>2)];
 var $vfn_i_i_i_i114=(($vtable_i_i_i_i113+36)|0);
 var $53=HEAP32[(($vfn_i_i_i_i114)>>2)];
 var $call_i_i_i_i115=FUNCTION_TABLE[$53]($49);
 var $retval_i_i_i_i96_0=$call_i_i_i_i115;label=45;break;
 case 44: 
 var $54=HEAP32[(($50)>>2)];
 var $retval_i_i_i_i96_0=$54;label=45;break;
 case 45: 
 var $retval_i_i_i_i96_0;
 var $cmp_i7_i_i_i119=($retval_i_i_i_i96_0|0)==-1;
 if($cmp_i7_i_i_i119){label=46;break;}else{var $55=$49;label=47;break;}
 case 46: 
 HEAP32[(($__sbuf__i_i_i243_phi_trans_insert_pre_pre)>>2)]=0;
 var $55=0;label=47;break;
 case 47: 
 var $55;
 var $cmp_i_i_i124=($55|0)==0;
 var $tobool_i12_i_i128=($48|0)==0;
 if($tobool_i12_i_i128){label=53;break;}else{label=48;break;}
 case 48: 
 var $__ninp__i_i15_i_i132=(($48+12)|0);
 var $56=HEAP32[(($__ninp__i_i15_i_i132)>>2)];
 var $__einp__i_i16_i_i133=(($48+16)|0);
 var $57=HEAP32[(($__einp__i_i16_i_i133)>>2)];
 var $cmp_i_i17_i_i134=($56|0)==($57|0);
 if($cmp_i_i17_i_i134){label=49;break;}else{label=50;break;}
 case 49: 
 var $58=$48;
 var $vtable_i_i19_i_i136=HEAP32[(($58)>>2)];
 var $vfn_i_i20_i_i137=(($vtable_i_i19_i_i136+36)|0);
 var $59=HEAP32[(($vfn_i_i20_i_i137)>>2)];
 var $call_i_i21_i_i138=FUNCTION_TABLE[$59]($48);
 var $retval_i_i7_i_i90_0=$call_i_i21_i_i138;label=51;break;
 case 50: 
 var $60=HEAP32[(($56)>>2)];
 var $retval_i_i7_i_i90_0=$60;label=51;break;
 case 51: 
 var $retval_i_i7_i_i90_0;
 var $cmp_i7_i25_i_i142=($retval_i_i7_i_i90_0|0)==-1;
 if($cmp_i7_i25_i_i142){label=52;break;}else{label=54;break;}
 case 52: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=53;break;
 case 53: 
 if($cmp_i_i_i124){var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=35;break;}else{var $61=0;label=55;break;}
 case 54: 
 var $cmp_i30_i_i147=($48|0)==0;
 var $lnot_i=$cmp_i_i_i124^$cmp_i30_i_i147;
 if($lnot_i){var $61=$48;label=55;break;}else{var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=35;break;}
 case 55: 
 var $61;
 var $__ninp__i_i=(($55+12)|0);
 var $62=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($55+16)|0);
 var $63=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i154=($62|0)==($63|0);
 if($cmp_i_i154){label=56;break;}else{label=57;break;}
 case 56: 
 var $64=$55;
 var $vtable_i_i=HEAP32[(($64)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $65=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$65]($55);
 var $retval_i_i_0=$call_i_i;label=58;break;
 case 57: 
 var $66=HEAP32[(($62)>>2)];
 var $retval_i_i_0=$66;label=58;break;
 case 58: 
 var $retval_i_i_0;
 var $vtable_i159=HEAP32[(($12)>>2)];
 var $vfn_i160=(($vtable_i159+12)|0);
 var $67=HEAP32[(($vfn_i160)>>2)];
 var $call_i161=FUNCTION_TABLE[$67]($8,8192,$retval_i_i_0);
 if($call_i161){label=59;break;}else{var $__fmtb_addr_0_ph_be=$__fmtb_addr_2_lcssa;label=35;break;}
 case 59: 
 var $68=HEAP32[(($__ninp__i_i)>>2)];
 var $69=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i171=($68|0)==($69|0);
 if($cmp_i_i171){label=60;break;}else{label=61;break;}
 case 60: 
 var $70=$55;
 var $vtable_i_i172=HEAP32[(($70)>>2)];
 var $vfn_i_i173=(($vtable_i_i172+40)|0);
 var $71=HEAP32[(($vfn_i_i173)>>2)];
 var $call_i_i174=FUNCTION_TABLE[$71]($55);
 var $49=$55;var $48=$61;label=41;break;
 case 61: 
 var $incdec_ptr_i_i=(($68+4)|0);
 HEAP32[(($__ninp__i_i)>>2)]=$incdec_ptr_i_i;
 var $49=$55;var $48=$61;label=41;break;
 case 62: 
 var $__ninp__i_i185=(($25+12)|0);
 var $72=HEAP32[(($__ninp__i_i185)>>2)];
 var $__einp__i_i186=(($25+16)|0);
 var $73=HEAP32[(($__einp__i_i186)>>2)];
 var $cmp_i_i187=($72|0)==($73|0);
 if($cmp_i_i187){label=63;break;}else{label=64;break;}
 case 63: 
 var $74=$25;
 var $vtable_i_i188=HEAP32[(($74)>>2)];
 var $vfn_i_i189=(($vtable_i_i188+36)|0);
 var $75=HEAP32[(($vfn_i_i189)>>2)];
 var $call_i_i190=FUNCTION_TABLE[$75]($25);
 var $retval_i_i179_0=$call_i_i190;label=65;break;
 case 64: 
 var $76=HEAP32[(($72)>>2)];
 var $retval_i_i179_0=$76;label=65;break;
 case 65: 
 var $retval_i_i179_0;
 var $vtable_i198=HEAP32[(($13)>>2)];
 var $vfn_i199=(($vtable_i198+28)|0);
 var $77=HEAP32[(($vfn_i199)>>2)];
 var $call_i200=FUNCTION_TABLE[$77]($8,$retval_i_i179_0);
 var $78=HEAP32[(($__fmtb_addr_0_ph55)>>2)];
 var $vtable_i204=HEAP32[(($13)>>2)];
 var $vfn_i205=(($vtable_i204+28)|0);
 var $79=HEAP32[(($vfn_i205)>>2)];
 var $call_i206=FUNCTION_TABLE[$79]($8,$78);
 var $cmp47=($call_i200|0)==($call_i206|0);
 if($cmp47){label=66;break;}else{label=70;break;}
 case 66: 
 var $80=HEAP32[(($__ninp__i_i185)>>2)];
 var $81=HEAP32[(($__einp__i_i186)>>2)];
 var $cmp_i_i216=($80|0)==($81|0);
 if($cmp_i_i216){label=67;break;}else{label=68;break;}
 case 67: 
 var $82=$25;
 var $vtable_i_i217=HEAP32[(($82)>>2)];
 var $vfn_i_i218=(($vtable_i_i217+40)|0);
 var $83=HEAP32[(($vfn_i_i218)>>2)];
 var $call_i_i219=FUNCTION_TABLE[$83]($25);
 label=69;break;
 case 68: 
 var $incdec_ptr_i_i222=(($80+4)|0);
 HEAP32[(($__ninp__i_i185)>>2)]=$incdec_ptr_i_i222;
 label=69;break;
 case 69: 
 var $incdec_ptr50=(($__fmtb_addr_0_ph55+4)|0);
 var $__fmtb_addr_0_ph_be=$incdec_ptr50;label=35;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $18=4;label=10;break;
 case 71: 
 var $_pre=HEAP32[(($__sbuf__i_i_i243_phi_trans_insert_pre_pre)>>2)];
 var $84=$_pre;label=72;break;
 case 72: 
 var $84;
 var $__sbuf__i_i_i243=(($__b)|0);
 var $tobool_i_i_i244=($84|0)==0;
 if($tobool_i_i_i244){label=78;break;}else{label=73;break;}
 case 73: 
 var $__ninp__i_i_i_i247=(($84+12)|0);
 var $85=HEAP32[(($__ninp__i_i_i_i247)>>2)];
 var $__einp__i_i_i_i248=(($84+16)|0);
 var $86=HEAP32[(($__einp__i_i_i_i248)>>2)];
 var $cmp_i_i_i_i249=($85|0)==($86|0);
 if($cmp_i_i_i_i249){label=74;break;}else{label=75;break;}
 case 74: 
 var $87=$84;
 var $vtable_i_i_i_i251=HEAP32[(($87)>>2)];
 var $vfn_i_i_i_i252=(($vtable_i_i_i_i251+36)|0);
 var $88=HEAP32[(($vfn_i_i_i_i252)>>2)];
 var $call_i_i_i_i253=FUNCTION_TABLE[$88]($84);
 var $retval_i_i_i_i234_0=$call_i_i_i_i253;label=76;break;
 case 75: 
 var $89=HEAP32[(($85)>>2)];
 var $retval_i_i_i_i234_0=$89;label=76;break;
 case 76: 
 var $retval_i_i_i_i234_0;
 var $cmp_i7_i_i_i257=($retval_i_i_i_i234_0|0)==-1;
 if($cmp_i7_i_i_i257){label=77;break;}else{label=78;break;}
 case 77: 
 HEAP32[(($__sbuf__i_i_i243)>>2)]=0;
 label=78;break;
 case 78: 
 var $90=HEAP32[(($__sbuf__i_i_i243)>>2)];
 var $cmp_i_i_i262=($90|0)==0;
 var $__sbuf__i11_i_i265=(($__e)|0);
 var $91=HEAP32[(($__sbuf__i11_i_i265)>>2)];
 var $tobool_i12_i_i266=($91|0)==0;
 if($tobool_i12_i_i266){label=84;break;}else{label=79;break;}
 case 79: 
 var $__ninp__i_i15_i_i270=(($91+12)|0);
 var $92=HEAP32[(($__ninp__i_i15_i_i270)>>2)];
 var $__einp__i_i16_i_i271=(($91+16)|0);
 var $93=HEAP32[(($__einp__i_i16_i_i271)>>2)];
 var $cmp_i_i17_i_i272=($92|0)==($93|0);
 if($cmp_i_i17_i_i272){label=80;break;}else{label=81;break;}
 case 80: 
 var $94=$91;
 var $vtable_i_i19_i_i274=HEAP32[(($94)>>2)];
 var $vfn_i_i20_i_i275=(($vtable_i_i19_i_i274+36)|0);
 var $95=HEAP32[(($vfn_i_i20_i_i275)>>2)];
 var $call_i_i21_i_i276=FUNCTION_TABLE[$95]($91);
 var $retval_i_i7_i_i228_0=$call_i_i21_i_i276;label=82;break;
 case 81: 
 var $96=HEAP32[(($92)>>2)];
 var $retval_i_i7_i_i228_0=$96;label=82;break;
 case 82: 
 var $retval_i_i7_i_i228_0;
 var $cmp_i7_i25_i_i280=($retval_i_i7_i_i228_0|0)==-1;
 if($cmp_i7_i25_i_i280){label=83;break;}else{label=85;break;}
 case 83: 
 HEAP32[(($__sbuf__i11_i_i265)>>2)]=0;
 label=84;break;
 case 84: 
 if($cmp_i_i_i262){label=86;break;}else{label=87;break;}
 case 85: 
 var $cmp_i30_i_i285=($91|0)==0;
 var $cmp_i_i287tmp=$cmp_i_i_i262^$cmp_i30_i_i285;
 if($cmp_i_i287tmp){label=87;break;}else{label=86;break;}
 case 86: 
 var $97=HEAP32[(($__err)>>2)];
 var $or=$97|2;
 HEAP32[(($__err)>>2)]=$or;
 label=87;break;
 case 87: 
 var $98=(($agg_result)|0);
 HEAP32[(($98)>>2)]=$90;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $0=(($__b)|0);
 var $1=HEAP32[(($0)>>2)];
 var $2=(($agg_tmp)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($agg_tmp2)|0);
 HEAP32[(($5)>>2)]=$4;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__tm,2352,2384);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp=sp;
 var $agg_tmp2=(sp)+(8);
 var $add_ptr=(($this+8)|0);
 var $0=$add_ptr;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+20)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($add_ptr);
 var $2=(($__b)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($agg_tmp)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($__e)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($agg_tmp2)|0);
 HEAP32[(($7)>>2)]=$6;
 var $__size__i_i_i=$call;
 var $8=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$8&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i=(($call+8)|0);
 var $9=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i50=$9;var $cond_i_i4=$9;label=4;break;
 case 3: 
 var $__data__i_i_i=(($call+4)|0);
 var $__data__i_i_i47=(($call+4)|0);
 var $cond_i_i50=$__data__i_i_i47;var $cond_i_i4=$__data__i_i_i;label=4;break;
 case 4: 
 var $cond_i_i4;
 var $cond_i_i50;
 var $conv_i_i=($8&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i=(($call+4)|0);
 var $10=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$10;label=7;break;
 case 6: 
 var $shr_i_i3=$conv_i_i>>>1;
 var $cond_i=$shr_i_i3;label=7;break;
 case 7: 
 var $cond_i;
 var $add_ptr6=(($cond_i_i50+($cond_i<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$agg_tmp,$agg_tmp2,$__iob,$__err,$__tm,$cond_i_i4,$add_ptr6);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $14=$add_ptr_i;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $15=HEAP32[(($vtable_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$15]($add_ptr_i);
 var $16=(($agg_tmp_i)|0);
 HEAP32[(($16)>>2)]=$12;
 var $add_ptr2_i=(($call_i5+168)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i5,$add_ptr2_i,$8,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i5;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<168;
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $tm_wday=(($__tm+24)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(7))&-1);
 HEAP32[(($tm_wday)>>2)]=$rem_i;
 label=9;break;
 case 9: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 10: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $14=$add_ptr_i;
 var $vtable_i=HEAP32[(($14)>>2)];
 var $vfn_i=(($vtable_i+4)|0);
 var $15=HEAP32[(($vfn_i)>>2)];
 var $call_i5=FUNCTION_TABLE[$15]($add_ptr_i);
 var $16=(($agg_tmp_i)|0);
 HEAP32[(($16)>>2)]=$12;
 var $add_ptr2_i=(($call_i5+288)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i5,$add_ptr2_i,$8,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i5;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<288;
 if($cmp_i){label=8;break;}else{label=9;break;}
 case 8: 
 var $tm_mon=(($__tm+16)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(12))&-1);
 HEAP32[(($tm_mon)>>2)]=$rem_i;
 label=9;break;
 case 9: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 10: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i=sp;
 var $__p_i_i_i=(sp)+(8);
 var $ref_tmp=(sp)+(24);
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($2|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=13;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($6|0)==0;
 if($tobool_i_i_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=13;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=(($9)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($10);
 var $tm_year=(($__tm+20)|0);
 var $11=(($__e)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$agg_tmp_i;
 var $14=(($agg_tmp_i)|0);
 HEAP32[(($14)>>2)]=$12;
 var $call_i5=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i,$__err,$8,4);
 var $15=HEAP32[(($__err)>>2)];
 var $and_i=$15&4;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){label=8;break;}else{label=12;break;}
 case 8: 
 var $cmp_i=($call_i5|0)<69;
 if($cmp_i){label=9;break;}else{label=10;break;}
 case 9: 
 var $add_i=((($call_i5)+(2000))|0);
 var $__t_0_i=$add_i;label=11;break;
 case 10: 
 var $call_off_i=((($call_i5)-(69))|0);
 var $16=($call_off_i>>>0)<31;
 var $add6_i=((($call_i5)+(1900))|0);
 var $add6_call_i=($16?$add6_i:$call_i5);
 var $__t_0_i=$add6_call_i;label=11;break;
 case 11: 
 var $__t_0_i;
 var $sub_i=((($__t_0_i)-(1900))|0);
 HEAP32[(($tm_year)>>2)]=$sub_i;
 label=12;break;
 case 12: 
 var $17=(($__b)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($agg_result)|0);
 HEAP32[(($19)>>2)]=$18;
 STACKTOP=sp;return;
 case 13: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=HEAP32[(($__locale__i)>>2)];
 var $22=(($21)|0);
 var $call_i7=__ZNSt3__114__shared_count16__release_sharedEv($22);
 ___resumeException($20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp_i201=sp;
 var $agg_tmp_i189=(sp)+(8);
 var $agg_tmp_i177=(sp)+(16);
 var $agg_tmp_i165=(sp)+(24);
 var $agg_tmp_i153=(sp)+(32);
 var $agg_tmp_i141=(sp)+(40);
 var $agg_tmp_i129=(sp)+(48);
 var $agg_tmp_i117=(sp)+(56);
 var $agg_tmp_i106=(sp)+(64);
 var $agg_tmp_i100=(sp)+(72);
 var $agg_tmp_i84=(sp)+(80);
 var $agg_tmp_i=(sp)+(88);
 var $__p_i_i_i=(sp)+(96);
 var $ref_tmp=(sp)+(112);
 var $ref_tmp6=(sp)+(120);
 var $agg_tmp7=(sp)+(128);
 var $agg_tmp8=(sp)+(136);
 var $ref_tmp16=(sp)+(144);
 var $agg_tmp17=(sp)+(152);
 var $agg_tmp18=(sp)+(160);
 var $ref_tmp20=(sp)+(168);
 var $agg_tmp21=(sp)+(176);
 var $agg_tmp22=(sp)+(184);
 var $agg_tmp36=(sp)+(192);
 var $agg_tmp39=(sp)+(200);
 var $ref_tmp41=(sp)+(208);
 var $agg_tmp42=(sp)+(216);
 var $agg_tmp43=(sp)+(224);
 var $ref_tmp45=(sp)+(232);
 var $agg_tmp46=(sp)+(240);
 var $agg_tmp47=(sp)+(248);
 var $ref_tmp51=(sp)+(256);
 var $agg_tmp52=(sp)+(264);
 var $agg_tmp53=(sp)+(272);
 var $agg_tmp60=(sp)+(280);
 var $agg_tmp61=(sp)+(288);
 var $ref_tmp68=(sp)+(296);
 var $agg_tmp69=(sp)+(304);
 var $agg_tmp70=(sp)+(312);
 var $agg_tmp81=(sp)+(320);
 HEAP32[(($__err)>>2)]=0;
 __ZNKSt3__18ios_base6getlocEv($ref_tmp,$__iob);
 var $__locale__i=(($ref_tmp)|0);
 var $1=HEAP32[(($__locale__i)>>2)];
 var $2=$__p_i_i_i;
 var $3=HEAP32[((13640)>>2)];
 var $cmp_i_i_i=($3|0)==-1;
 if($cmp_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$2,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=8;break; }
 case 3: 
 var $4=HEAP32[((13644)>>2)];
 var $sub_i_i=((($4)-(1))|0);
 var $__end__i_i_i_i=(($1+12)|0);
 var $5=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($1+8)|0);
 var $6=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$5;
 var $sub_ptr_rhs_cast_i_i_i_i=$6;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($6+($sub_i_i<<2))|0);
 var $7=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i73=($7|0)==0;
 if($tobool_i_i_i73){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $8=$exception_i_i;
 __ZNSt8bad_castC2Ev($8);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $9=$7;
 var $10=HEAP32[(($__locale__i)>>2)];
 var $11=(($10)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($11);
 var $conv=(($__fmt<<24)>>24);
 switch(($conv|0)){case 98:case 66:case 104:{ label=11;break;}case 99:{ label=13;break;}case 100:case 101:{ label=20;break;}case 68:{ label=24;break;}case 70:{ label=25;break;}case 72:{ label=26;break;}case 73:{ label=29;break;}case 106:{ label=33;break;}case 109:{ label=36;break;}case 77:{ label=39;break;}case 110:case 116:{ label=42;break;}case 112:{ label=43;break;}case 114:{ label=44;break;}case 82:{ label=45;break;}case 83:{ label=46;break;}case 84:{ label=49;break;}case 119:{ label=50;break;}case 120:{ label=53;break;}case 88:{ label=54;break;}case 121:{ label=61;break;}case 89:{ label=66;break;}case 37:{ label=68;break;}case 97:case 65:{ label=9;break;}default:{label=69;break;}}break;
 case 8: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=HEAP32[(($__locale__i)>>2)];
 var $14=(($13)|0);
 var $call_i77=__ZNSt3__114__shared_count16__release_sharedEv($14);
 ___resumeException($12$0)
 case 9: 
 var $15=(($__e)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$agg_tmp_i;
 var $add_ptr_i=(($this+8)|0);
 var $18=$add_ptr_i;
 var $vtable_i=HEAP32[(($18)>>2)];
 var $19=HEAP32[(($vtable_i)>>2)];
 var $call_i80=FUNCTION_TABLE[$19]($add_ptr_i);
 var $20=(($agg_tmp_i)|0);
 HEAP32[(($20)>>2)]=$16;
 var $add_ptr2_i=(($call_i80+168)|0);
 var $call3_i=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i,$call_i80,$add_ptr2_i,$9,$__err,0);
 var $sub_ptr_lhs_cast_i=$call3_i;
 var $sub_ptr_rhs_cast_i=$call_i80;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp_i=($sub_ptr_sub_i|0)<168;
 if($cmp_i){label=10;break;}else{label=70;break;}
 case 10: 
 var $tm_wday=(($__tm+24)|0);
 var $sub_ptr_div_i=(((($sub_ptr_sub_i|0))/(12))&-1);
 var $rem_i=(((($sub_ptr_div_i|0))%(7))&-1);
 HEAP32[(($tm_wday)>>2)]=$rem_i;
 label=70;break;
 case 11: 
 var $21=(($__e)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$agg_tmp_i84;
 var $add_ptr_i85=(($this+8)|0);
 var $24=$add_ptr_i85;
 var $vtable_i86=HEAP32[(($24)>>2)];
 var $vfn_i=(($vtable_i86+4)|0);
 var $25=HEAP32[(($vfn_i)>>2)];
 var $call_i87=FUNCTION_TABLE[$25]($add_ptr_i85);
 var $26=(($agg_tmp_i84)|0);
 HEAP32[(($26)>>2)]=$22;
 var $add_ptr2_i88=(($call_i87+288)|0);
 var $call3_i89=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp_i84,$call_i87,$add_ptr2_i88,$9,$__err,0);
 var $sub_ptr_lhs_cast_i90=$call3_i89;
 var $sub_ptr_rhs_cast_i91=$call_i87;
 var $sub_ptr_sub_i92=((($sub_ptr_lhs_cast_i90)-($sub_ptr_rhs_cast_i91))|0);
 var $cmp_i93=($sub_ptr_sub_i92|0)<288;
 if($cmp_i93){label=12;break;}else{label=70;break;}
 case 12: 
 var $tm_mon=(($__tm+16)|0);
 var $sub_ptr_div_i94=(((($sub_ptr_sub_i92|0))/(12))&-1);
 var $rem_i95=(((($sub_ptr_div_i94|0))%(12))&-1);
 HEAP32[(($tm_mon)>>2)]=$rem_i95;
 label=70;break;
 case 13: 
 var $add_ptr=(($this+8)|0);
 var $27=$add_ptr;
 var $vtable=HEAP32[(($27)>>2)];
 var $vfn=(($vtable+12)|0);
 var $28=HEAP32[(($vfn)>>2)];
 var $call5=FUNCTION_TABLE[$28]($add_ptr);
 var $29=(($__b)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($agg_tmp7)|0);
 HEAP32[(($31)>>2)]=$30;
 var $32=(($__e)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($agg_tmp8)|0);
 HEAP32[(($34)>>2)]=$33;
 var $__size__i_i_i=$call5;
 var $35=HEAP8[($__size__i_i_i)];
 var $and_i_i_i=$35&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=15;break;}else{label=14;break;}
 case 14: 
 var $__data__i21_i_i=(($call5+8)|0);
 var $36=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i127=$36;var $cond_i_i207=$36;label=16;break;
 case 15: 
 var $__data__i_i_i=(($call5+4)|0);
 var $__data__i_i_i124=(($call5+4)|0);
 var $cond_i_i127=$__data__i_i_i124;var $cond_i_i207=$__data__i_i_i;label=16;break;
 case 16: 
 var $cond_i_i207;
 var $cond_i_i127;
 var $conv_i_i=($35&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=18;break;}else{label=17;break;}
 case 17: 
 var $__size__i23_i=(($call5+4)|0);
 var $37=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$37;label=19;break;
 case 18: 
 var $shr_i_i72=$conv_i_i>>>1;
 var $cond_i=$shr_i_i72;label=19;break;
 case 19: 
 var $cond_i;
 var $add_ptr12=(($cond_i_i127+($cond_i<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp6,$this,$agg_tmp7,$agg_tmp8,$__iob,$__err,$__tm,$cond_i_i207,$add_ptr12);
 var $38=(($ref_tmp6)|0);
 var $39=HEAP32[(($38)>>2)];
 HEAP32[(($29)>>2)]=$39;
 label=70;break;
 case 20: 
 var $tm_mday=(($__tm+12)|0);
 var $40=(($__e)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$agg_tmp_i100;
 var $43=(($agg_tmp_i100)|0);
 HEAP32[(($43)>>2)]=$41;
 var $call_i101=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i100,$__err,$9,2);
 var $44=HEAP32[(($__err)>>2)];
 var $and_i=$44&4;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){label=21;break;}else{label=23;break;}
 case 21: 
 var $call_off_i=((($call_i101)-(1))|0);
 var $45=($call_off_i>>>0)<31;
 if($45){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($tm_mday)>>2)]=$call_i101;
 label=70;break;
 case 23: 
 var $or_i=$44|4;
 HEAP32[(($__err)>>2)]=$or_i;
 label=70;break;
 case 24: 
 var $46=(($__b)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($agg_tmp17)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($__e)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($agg_tmp18)|0);
 HEAP32[(($51)>>2)]=$50;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp16,$this,$agg_tmp17,$agg_tmp18,$__iob,$__err,$__tm,2320,2352);
 var $52=(($ref_tmp16)|0);
 var $53=HEAP32[(($52)>>2)];
 HEAP32[(($46)>>2)]=$53;
 label=70;break;
 case 25: 
 var $54=(($__b)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($agg_tmp21)|0);
 HEAP32[(($56)>>2)]=$55;
 var $57=(($__e)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($agg_tmp22)|0);
 HEAP32[(($59)>>2)]=$58;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp20,$this,$agg_tmp21,$agg_tmp22,$__iob,$__err,$__tm,2184,2216);
 var $60=(($ref_tmp20)|0);
 var $61=HEAP32[(($60)>>2)];
 HEAP32[(($54)>>2)]=$61;
 label=70;break;
 case 26: 
 var $62=(($__e)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=$agg_tmp_i106;
 var $65=(($agg_tmp_i106)|0);
 HEAP32[(($65)>>2)]=$63;
 var $call_i107=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i106,$__err,$9,2);
 var $66=HEAP32[(($__err)>>2)];
 var $and_i108=$66&4;
 var $tobool_i109=($and_i108|0)==0;
 var $cmp_i110=($call_i107|0)<24;
 var $or_cond_i=$tobool_i109&$cmp_i110;
 if($or_cond_i){label=27;break;}else{label=28;break;}
 case 27: 
 var $tm_hour=(($__tm+8)|0);
 HEAP32[(($tm_hour)>>2)]=$call_i107;
 label=70;break;
 case 28: 
 var $or_i112=$66|4;
 HEAP32[(($__err)>>2)]=$or_i112;
 label=70;break;
 case 29: 
 var $tm_hour26=(($__tm+8)|0);
 var $67=(($__e)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$agg_tmp_i117;
 var $70=(($agg_tmp_i117)|0);
 HEAP32[(($70)>>2)]=$68;
 var $call_i118=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i117,$__err,$9,2);
 var $71=HEAP32[(($__err)>>2)];
 var $and_i119=$71&4;
 var $tobool_i120=($and_i119|0)==0;
 if($tobool_i120){label=30;break;}else{label=32;break;}
 case 30: 
 var $call_off_i121=((($call_i118)-(1))|0);
 var $72=($call_off_i121>>>0)<12;
 if($72){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($tm_hour26)>>2)]=$call_i118;
 label=70;break;
 case 32: 
 var $or_i124=$71|4;
 HEAP32[(($__err)>>2)]=$or_i124;
 label=70;break;
 case 33: 
 var $73=(($__e)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$agg_tmp_i129;
 var $76=(($agg_tmp_i129)|0);
 HEAP32[(($76)>>2)]=$74;
 var $call_i130=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i129,$__err,$9,3);
 var $77=HEAP32[(($__err)>>2)];
 var $and_i131=$77&4;
 var $tobool_i132=($and_i131|0)==0;
 var $cmp_i133=($call_i130|0)<366;
 var $or_cond_i134=$tobool_i132&$cmp_i133;
 if($or_cond_i134){label=34;break;}else{label=35;break;}
 case 34: 
 var $tm_yday=(($__tm+28)|0);
 HEAP32[(($tm_yday)>>2)]=$call_i130;
 label=70;break;
 case 35: 
 var $or_i136=$77|4;
 HEAP32[(($__err)>>2)]=$or_i136;
 label=70;break;
 case 36: 
 var $78=(($__e)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=$agg_tmp_i141;
 var $81=(($agg_tmp_i141)|0);
 HEAP32[(($81)>>2)]=$79;
 var $call_i142=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i141,$__err,$9,2);
 var $sub_i=((($call_i142)-(1))|0);
 var $82=HEAP32[(($__err)>>2)];
 var $and_i143=$82&4;
 var $tobool_i144=($and_i143|0)==0;
 var $cmp_i145=($sub_i|0)<12;
 var $or_cond_i146=$tobool_i144&$cmp_i145;
 if($or_cond_i146){label=37;break;}else{label=38;break;}
 case 37: 
 var $tm_mon31=(($__tm+16)|0);
 HEAP32[(($tm_mon31)>>2)]=$sub_i;
 label=70;break;
 case 38: 
 var $or_i148=$82|4;
 HEAP32[(($__err)>>2)]=$or_i148;
 label=70;break;
 case 39: 
 var $83=(($__e)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=$agg_tmp_i153;
 var $86=(($agg_tmp_i153)|0);
 HEAP32[(($86)>>2)]=$84;
 var $call_i154=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i153,$__err,$9,2);
 var $87=HEAP32[(($__err)>>2)];
 var $and_i155=$87&4;
 var $tobool_i156=($and_i155|0)==0;
 var $cmp_i157=($call_i154|0)<60;
 var $or_cond_i158=$tobool_i156&$cmp_i157;
 if($or_cond_i158){label=40;break;}else{label=41;break;}
 case 40: 
 var $tm_min=(($__tm+4)|0);
 HEAP32[(($tm_min)>>2)]=$call_i154;
 label=70;break;
 case 41: 
 var $or_i160=$87|4;
 HEAP32[(($__err)>>2)]=$or_i160;
 label=70;break;
 case 42: 
 var $88=(($__e)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($agg_tmp36)|0);
 HEAP32[(($90)>>2)]=$89;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$agg_tmp36,$__err,$9);
 label=70;break;
 case 43: 
 var $tm_hour38=(($__tm+8)|0);
 var $91=(($__e)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(($agg_tmp39)|0);
 HEAP32[(($93)>>2)]=$92;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$tm_hour38,$__b,$agg_tmp39,$__err,$9);
 label=70;break;
 case 44: 
 var $94=(($__b)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($agg_tmp42)|0);
 HEAP32[(($96)>>2)]=$95;
 var $97=(($__e)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($agg_tmp43)|0);
 HEAP32[(($99)>>2)]=$98;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp41,$this,$agg_tmp42,$agg_tmp43,$__iob,$__err,$__tm,2272,2316);
 var $100=(($ref_tmp41)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP32[(($94)>>2)]=$101;
 label=70;break;
 case 45: 
 var $102=(($__b)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(($agg_tmp46)|0);
 HEAP32[(($104)>>2)]=$103;
 var $105=(($__e)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=(($agg_tmp47)|0);
 HEAP32[(($107)>>2)]=$106;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp45,$this,$agg_tmp46,$agg_tmp47,$__iob,$__err,$__tm,2248,2268);
 var $108=(($ref_tmp45)|0);
 var $109=HEAP32[(($108)>>2)];
 HEAP32[(($102)>>2)]=$109;
 label=70;break;
 case 46: 
 var $110=(($__e)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$agg_tmp_i165;
 var $113=(($agg_tmp_i165)|0);
 HEAP32[(($113)>>2)]=$111;
 var $call_i166=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i165,$__err,$9,2);
 var $114=HEAP32[(($__err)>>2)];
 var $and_i167=$114&4;
 var $tobool_i168=($and_i167|0)==0;
 var $cmp_i169=($call_i166|0)<61;
 var $or_cond_i170=$tobool_i168&$cmp_i169;
 if($or_cond_i170){label=47;break;}else{label=48;break;}
 case 47: 
 var $tm_sec=(($__tm)|0);
 HEAP32[(($tm_sec)>>2)]=$call_i166;
 label=70;break;
 case 48: 
 var $or_i172=$114|4;
 HEAP32[(($__err)>>2)]=$or_i172;
 label=70;break;
 case 49: 
 var $115=(($__b)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($agg_tmp52)|0);
 HEAP32[(($117)>>2)]=$116;
 var $118=(($__e)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($agg_tmp53)|0);
 HEAP32[(($120)>>2)]=$119;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp51,$this,$agg_tmp52,$agg_tmp53,$__iob,$__err,$__tm,2216,2248);
 var $121=(($ref_tmp51)|0);
 var $122=HEAP32[(($121)>>2)];
 HEAP32[(($115)>>2)]=$122;
 label=70;break;
 case 50: 
 var $123=(($__e)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$agg_tmp_i177;
 var $126=(($agg_tmp_i177)|0);
 HEAP32[(($126)>>2)]=$124;
 var $call_i178=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i177,$__err,$9,1);
 var $127=HEAP32[(($__err)>>2)];
 var $and_i179=$127&4;
 var $tobool_i180=($and_i179|0)==0;
 var $cmp_i181=($call_i178|0)<7;
 var $or_cond_i182=$tobool_i180&$cmp_i181;
 if($or_cond_i182){label=51;break;}else{label=52;break;}
 case 51: 
 var $tm_wday55=(($__tm+24)|0);
 HEAP32[(($tm_wday55)>>2)]=$call_i178;
 label=70;break;
 case 52: 
 var $or_i184=$127|4;
 HEAP32[(($__err)>>2)]=$or_i184;
 label=70;break;
 case 53: 
 var $128=$this;
 var $vtable58=HEAP32[(($128)>>2)];
 var $vfn59=(($vtable58+20)|0);
 var $129=HEAP32[(($vfn59)>>2)];
 var $130=(($__b)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(($agg_tmp60)|0);
 HEAP32[(($132)>>2)]=$131;
 var $133=(($__e)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($agg_tmp61)|0);
 HEAP32[(($135)>>2)]=$134;
 FUNCTION_TABLE[$129]($agg_result,$this,$agg_tmp60,$agg_tmp61,$__iob,$__err,$__tm);
 label=71;break;
 case 54: 
 var $add_ptr64=(($this+8)|0);
 var $136=$add_ptr64;
 var $vtable65=HEAP32[(($136)>>2)];
 var $vfn66=(($vtable65+24)|0);
 var $137=HEAP32[(($vfn66)>>2)];
 var $call67=FUNCTION_TABLE[$137]($add_ptr64);
 var $138=(($__b)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=(($agg_tmp69)|0);
 HEAP32[(($140)>>2)]=$139;
 var $141=(($__e)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(($agg_tmp70)|0);
 HEAP32[(($143)>>2)]=$142;
 var $__size__i_i_i159=$call67;
 var $144=HEAP8[($__size__i_i_i159)];
 var $and_i_i_i161=$144&1;
 var $tobool_i_i_i162=(($and_i_i_i161<<24)>>24)==0;
 if($tobool_i_i_i162){label=56;break;}else{label=55;break;}
 case 55: 
 var $__data__i21_i_i169=(($call67+8)|0);
 var $145=HEAP32[(($__data__i21_i_i169)>>2)];
 var $cond_i_i225=$145;var $cond_i_i180209=$145;label=57;break;
 case 56: 
 var $__data__i_i_i177=(($call67+4)|0);
 var $__data__i_i_i222=(($call67+4)|0);
 var $cond_i_i225=$__data__i_i_i222;var $cond_i_i180209=$__data__i_i_i177;label=57;break;
 case 57: 
 var $cond_i_i180209;
 var $cond_i_i225;
 var $conv_i_i245=($144&255);
 var $and_i_i246=$conv_i_i245&1;
 var $tobool_i_i247=($and_i_i246|0)==0;
 if($tobool_i_i247){label=59;break;}else{label=58;break;}
 case 58: 
 var $__size__i23_i254=(($call67+4)|0);
 var $146=HEAP32[(($__size__i23_i254)>>2)];
 var $cond_i266=$146;label=60;break;
 case 59: 
 var $shr_i_i26471=$conv_i_i245>>>1;
 var $cond_i266=$shr_i_i26471;label=60;break;
 case 60: 
 var $cond_i266;
 var $add_ptr74=(($cond_i_i225+($cond_i266<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($ref_tmp68,$this,$agg_tmp69,$agg_tmp70,$__iob,$__err,$__tm,$cond_i_i180209,$add_ptr74);
 var $147=(($ref_tmp68)|0);
 var $148=HEAP32[(($147)>>2)];
 HEAP32[(($138)>>2)]=$148;
 label=70;break;
 case 61: 
 var $tm_year=(($__tm+20)|0);
 var $149=(($__e)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=$agg_tmp_i189;
 var $152=(($agg_tmp_i189)|0);
 HEAP32[(($152)>>2)]=$150;
 var $call_i190=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i189,$__err,$9,4);
 var $153=HEAP32[(($__err)>>2)];
 var $and_i191=$153&4;
 var $tobool_i192=($and_i191|0)==0;
 if($tobool_i192){label=62;break;}else{label=70;break;}
 case 62: 
 var $cmp_i193=($call_i190|0)<69;
 if($cmp_i193){label=63;break;}else{label=64;break;}
 case 63: 
 var $add_i=((($call_i190)+(2000))|0);
 var $__t_0_i=$add_i;label=65;break;
 case 64: 
 var $call_off_i195=((($call_i190)-(69))|0);
 var $154=($call_off_i195>>>0)<31;
 var $add6_i=((($call_i190)+(1900))|0);
 var $add6_call_i=($154?$add6_i:$call_i190);
 var $__t_0_i=$add6_call_i;label=65;break;
 case 65: 
 var $__t_0_i;
 var $sub_i197=((($__t_0_i)-(1900))|0);
 HEAP32[(($tm_year)>>2)]=$sub_i197;
 label=70;break;
 case 66: 
 var $155=(($__e)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=$agg_tmp_i201;
 var $158=(($agg_tmp_i201)|0);
 HEAP32[(($158)>>2)]=$156;
 var $call_i202=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$agg_tmp_i201,$__err,$9,4);
 var $159=HEAP32[(($__err)>>2)];
 var $and_i203=$159&4;
 var $tobool_i204=($and_i203|0)==0;
 if($tobool_i204){label=67;break;}else{label=70;break;}
 case 67: 
 var $tm_year78=(($__tm+20)|0);
 var $sub_i205=((($call_i202)-(1900))|0);
 HEAP32[(($tm_year78)>>2)]=$sub_i205;
 label=70;break;
 case 68: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($agg_tmp81)|0);
 HEAP32[(($162)>>2)]=$161;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$agg_tmp81,$__err,$9);
 label=70;break;
 case 69: 
 var $163=HEAP32[(($__err)>>2)];
 var $or=$163|4;
 HEAP32[(($__err)>>2)]=$or;
 label=70;break;
 case 70: 
 var $164=(($__b)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($agg_result)|0);
 HEAP32[(($166)>>2)]=$165;
 label=71;break;
 case 71: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $__sbuf__i11_i_i=(($__e)|0);
 var $0=$__ct;
 label=2;break;
 case 2: 
 var $1=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($1|0)==0;
 if($tobool_i_i_i){var $7=1;label=9;break;}else{label=3;break;}
 case 3: 
 var $__ninp__i_i_i_i=(($1+12)|0);
 var $2=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($1+16)|0);
 var $3=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($2|0)==($3|0);
 if($cmp_i_i_i_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $4=$1;
 var $vtable_i_i_i_i=HEAP32[(($4)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $5=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$5]($1);
 var $retval_i_i_i_i_0=$call_i_i_i_i;label=6;break;
 case 5: 
 var $6=HEAP32[(($2)>>2)];
 var $retval_i_i_i_i_0=$6;label=6;break;
 case 6: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp=($_pre|0)==0;
 var $7=$phitmp;label=9;break;
 case 8: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $7=1;label=9;break;
 case 9: 
 var $7;
 var $8=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($8|0)==0;
 if($tobool_i12_i_i){label=15;break;}else{label=10;break;}
 case 10: 
 var $__ninp__i_i15_i_i=(($8+12)|0);
 var $9=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($8+16)|0);
 var $10=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($9|0)==($10|0);
 if($cmp_i_i17_i_i){label=11;break;}else{label=12;break;}
 case 11: 
 var $11=$8;
 var $vtable_i_i19_i_i=HEAP32[(($11)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $12=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$12]($8);
 var $retval_i_i7_i_i_0=$call_i_i21_i_i;label=13;break;
 case 12: 
 var $13=HEAP32[(($9)>>2)];
 var $retval_i_i7_i_i_0=$13;label=13;break;
 case 13: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=15;break;
 case 15: 
 if($7){var $27=0;var $cmp_i30_i_i7=1;label=24;break;}else{var $14=0;var $cmp_i30_i_i9=1;label=17;break;}
 case 16: 
 var $cmp_i30_i_i=($8|0)==0;
 var $lnot_i=$7^$cmp_i30_i_i;
 if($lnot_i){var $14=$8;var $cmp_i30_i_i9=$cmp_i30_i_i;label=17;break;}else{var $27=$8;var $cmp_i30_i_i7=$cmp_i30_i_i;label=24;break;}
 case 17: 
 var $cmp_i30_i_i9;
 var $14;
 var $15=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($15+12)|0);
 var $16=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($15+16)|0);
 var $17=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i8=($16|0)==($17|0);
 if($cmp_i_i8){label=18;break;}else{label=19;break;}
 case 18: 
 var $18=$15;
 var $vtable_i_i=HEAP32[(($18)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $19=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$19]($15);
 var $retval_i_i_0=$call_i_i;label=20;break;
 case 19: 
 var $20=HEAP32[(($16)>>2)];
 var $retval_i_i_0=$20;label=20;break;
 case 20: 
 var $retval_i_i_0;
 var $vtable_i=HEAP32[(($0)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $21=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$21]($__ct,8192,$retval_i_i_0);
 if($call_i){label=21;break;}else{var $27=$14;var $cmp_i30_i_i7=$cmp_i30_i_i9;label=24;break;}
 case 21: 
 var $22=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i18=(($22+12)|0);
 var $23=HEAP32[(($__ninp__i_i18)>>2)];
 var $__einp__i_i19=(($22+16)|0);
 var $24=HEAP32[(($__einp__i_i19)>>2)];
 var $cmp_i_i20=($23|0)==($24|0);
 if($cmp_i_i20){label=22;break;}else{label=23;break;}
 case 22: 
 var $25=$22;
 var $vtable_i_i21=HEAP32[(($25)>>2)];
 var $vfn_i_i22=(($vtable_i_i21+40)|0);
 var $26=HEAP32[(($vfn_i_i22)>>2)];
 var $call_i_i23=FUNCTION_TABLE[$26]($22);
 label=2;break;
 case 23: 
 var $incdec_ptr_i_i=(($23+4)|0);
 HEAP32[(($__ninp__i_i18)>>2)]=$incdec_ptr_i_i;
 label=2;break;
 case 24: 
 var $cmp_i30_i_i7;
 var $27;
 var $28=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i46=($28|0)==0;
 if($tobool_i_i_i46){var $34=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $__ninp__i_i_i_i49=(($28+12)|0);
 var $29=HEAP32[(($__ninp__i_i_i_i49)>>2)];
 var $__einp__i_i_i_i50=(($28+16)|0);
 var $30=HEAP32[(($__einp__i_i_i_i50)>>2)];
 var $cmp_i_i_i_i51=($29|0)==($30|0);
 if($cmp_i_i_i_i51){label=26;break;}else{label=27;break;}
 case 26: 
 var $31=$28;
 var $vtable_i_i_i_i53=HEAP32[(($31)>>2)];
 var $vfn_i_i_i_i54=(($vtable_i_i_i_i53+36)|0);
 var $32=HEAP32[(($vfn_i_i_i_i54)>>2)];
 var $call_i_i_i_i55=FUNCTION_TABLE[$32]($28);
 var $retval_i_i_i_i36_0=$call_i_i_i_i55;label=28;break;
 case 27: 
 var $33=HEAP32[(($29)>>2)];
 var $retval_i_i_i_i36_0=$33;label=28;break;
 case 28: 
 var $retval_i_i_i_i36_0;
 var $cmp_i7_i_i_i59=($retval_i_i_i_i36_0|0)==-1;
 if($cmp_i7_i_i_i59){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre4=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp5=($_pre4|0)==0;
 var $34=$phitmp5;label=31;break;
 case 30: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $34=1;label=31;break;
 case 31: 
 var $34;
 if($cmp_i30_i_i7){label=37;break;}else{label=32;break;}
 case 32: 
 var $__ninp__i_i15_i_i72=(($27+12)|0);
 var $35=HEAP32[(($__ninp__i_i15_i_i72)>>2)];
 var $__einp__i_i16_i_i73=(($27+16)|0);
 var $36=HEAP32[(($__einp__i_i16_i_i73)>>2)];
 var $cmp_i_i17_i_i74=($35|0)==($36|0);
 if($cmp_i_i17_i_i74){label=33;break;}else{label=34;break;}
 case 33: 
 var $37=$27;
 var $vtable_i_i19_i_i76=HEAP32[(($37)>>2)];
 var $vfn_i_i20_i_i77=(($vtable_i_i19_i_i76+36)|0);
 var $38=HEAP32[(($vfn_i_i20_i_i77)>>2)];
 var $call_i_i21_i_i78=FUNCTION_TABLE[$38]($27);
 var $retval_i_i7_i_i30_0=$call_i_i21_i_i78;label=35;break;
 case 34: 
 var $39=HEAP32[(($35)>>2)];
 var $retval_i_i7_i_i30_0=$39;label=35;break;
 case 35: 
 var $retval_i_i7_i_i30_0;
 var $cmp_i7_i25_i_i82=($retval_i_i7_i_i30_0|0)==-1;
 if($cmp_i7_i25_i_i82){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=37;break;
 case 37: 
 if($34){label=39;break;}else{label=40;break;}
 case 38: 
 var $cmp_i30_i_i87=($27|0)==0;
 var $cmp_i_i89tmp=$34^$cmp_i30_i_i87;
 if($cmp_i_i89tmp){label=40;break;}else{label=39;break;}
 case 39: 
 var $40=HEAP32[(($__err)>>2)];
 var $or=$40|2;
 HEAP32[(($__err)>>2)]=$or;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $agg_tmp=sp;
 var $add_ptr=(($this+8)|0);
 var $0=$add_ptr;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+8)|0);
 var $1=HEAP32[(($vfn)>>2)];
 var $call=FUNCTION_TABLE[$1]($add_ptr);
 var $__size__i_i=$call;
 var $2=HEAP8[($__size__i_i)];
 var $conv_i_i=($2&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($call+4)|0);
 var $3=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$3;label=4;break;
 case 3: 
 var $shr_i_i10=$conv_i_i>>>1;
 var $cond_i=$shr_i_i10;label=4;break;
 case 4: 
 var $cond_i;
 var $4=(($call+12)|0);
 var $__size__i_i34=$4;
 var $5=HEAP8[($__size__i_i34)];
 var $conv_i_i35=($5&255);
 var $and_i_i36=$conv_i_i35&1;
 var $tobool_i_i37=($and_i_i36|0)==0;
 if($tobool_i_i37){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i44=(($call+16)|0);
 var $6=HEAP32[(($__size__i23_i44)>>2)];
 var $cond_i56=$6;label=7;break;
 case 6: 
 var $shr_i_i5411=$conv_i_i35>>>1;
 var $cond_i56=$shr_i_i5411;label=7;break;
 case 7: 
 var $cond_i56;
 var $add=(((-$cond_i56))|0);
 var $cmp=($cond_i|0)==($add|0);
 if($cmp){label=8;break;}else{label=9;break;}
 case 8: 
 var $7=HEAP32[(($__err)>>2)];
 var $or=$7|4;
 HEAP32[(($__err)>>2)]=$or;
 label=15;break;
 case 9: 
 var $8=(($__e)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($agg_tmp)|0);
 HEAP32[(($10)>>2)]=$9;
 var $add_ptr5=(($call+24)|0);
 var $call6=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$agg_tmp,$call,$add_ptr5,$__ct,$__err,0);
 var $sub_ptr_lhs_cast=$call6;
 var $sub_ptr_rhs_cast=$call;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $11=($call6|0)==($call|0);
 if($11){label=10;break;}else{label=12;break;}
 case 10: 
 var $12=HEAP32[(($__h)>>2)];
 var $cmp8=($12|0)==12;
 if($cmp8){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($__h)>>2)]=0;
 label=15;break;
 case 12: 
 var $13=($sub_ptr_sub|0)==12;
 if($13){label=13;break;}else{label=15;break;}
 case 13: 
 var $14=HEAP32[(($__h)>>2)];
 var $cmp12=($14|0)<12;
 if($cmp12){label=14;break;}else{label=15;break;}
 case 14: 
 var $add14=((($14)+(12))|0);
 HEAP32[(($__h)>>2)]=$add14;
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $0=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($0|0)==0;
 if($tobool_i_i_i){var $6=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $__ninp__i_i_i_i=(($0+12)|0);
 var $1=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($0+16)|0);
 var $2=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($1|0)==($2|0);
 if($cmp_i_i_i_i){label=3;break;}else{label=4;break;}
 case 3: 
 var $3=$0;
 var $vtable_i_i_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $4=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$4]($0);
 var $retval_i_i_i_i_0=$call_i_i_i_i;label=5;break;
 case 4: 
 var $5=HEAP32[(($1)>>2)];
 var $retval_i_i_i_i_0=$5;label=5;break;
 case 5: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp=($_pre|0)==0;
 var $6=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $6=1;label=8;break;
 case 8: 
 var $6;
 var $__sbuf__i11_i_i=(($__e)|0);
 var $7=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($7|0)==0;
 if($tobool_i12_i_i){label=14;break;}else{label=9;break;}
 case 9: 
 var $__ninp__i_i15_i_i=(($7+12)|0);
 var $8=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($7+16)|0);
 var $9=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($8|0)==($9|0);
 if($cmp_i_i17_i_i){label=10;break;}else{label=11;break;}
 case 10: 
 var $10=$7;
 var $vtable_i_i19_i_i=HEAP32[(($10)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $11=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$11]($7);
 var $retval_i_i7_i_i_0=$call_i_i21_i_i;label=12;break;
 case 11: 
 var $12=HEAP32[(($8)>>2)];
 var $retval_i_i7_i_i_0=$12;label=12;break;
 case 12: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=14;break;
 case 14: 
 if($6){label=16;break;}else{var $14=0;var $cmp_i30_i_i8=1;label=17;break;}
 case 15: 
 var $cmp_i30_i_i=($7|0)==0;
 var $cmp_i_itmp=$6^$cmp_i30_i_i;
 if($cmp_i_itmp){var $14=$7;var $cmp_i30_i_i8=$cmp_i30_i_i;label=17;break;}else{label=16;break;}
 case 16: 
 var $13=HEAP32[(($__err)>>2)];
 var $or=$13|6;
 HEAP32[(($__err)>>2)]=$or;
 label=41;break;
 case 17: 
 var $cmp_i30_i_i8;
 var $14;
 var $15=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($15+12)|0);
 var $16=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($15+16)|0);
 var $17=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i14=($16|0)==($17|0);
 if($cmp_i_i14){label=18;break;}else{label=19;break;}
 case 18: 
 var $18=$15;
 var $vtable_i_i=HEAP32[(($18)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $19=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$19]($15);
 var $retval_i_i_0=$call_i_i;label=20;break;
 case 19: 
 var $20=HEAP32[(($16)>>2)];
 var $retval_i_i_0=$20;label=20;break;
 case 20: 
 var $retval_i_i_0;
 var $21=$__ct;
 var $vtable_i=HEAP32[(($21)>>2)];
 var $vfn_i=(($vtable_i+52)|0);
 var $22=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$22]($__ct,$retval_i_i_0,0);
 var $cmp=(($call_i<<24)>>24)==37;
 if($cmp){label=22;break;}else{label=21;break;}
 case 21: 
 var $23=HEAP32[(($__err)>>2)];
 var $or5=$23|4;
 HEAP32[(($__err)>>2)]=$or5;
 label=41;break;
 case 22: 
 var $24=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i24=(($24+12)|0);
 var $25=HEAP32[(($__ninp__i_i24)>>2)];
 var $__einp__i_i25=(($24+16)|0);
 var $26=HEAP32[(($__einp__i_i25)>>2)];
 var $cmp_i_i26=($25|0)==($26|0);
 if($cmp_i_i26){label=23;break;}else{label=24;break;}
 case 23: 
 var $27=$24;
 var $vtable_i_i27=HEAP32[(($27)>>2)];
 var $vfn_i_i28=(($vtable_i_i27+40)|0);
 var $28=HEAP32[(($vfn_i_i28)>>2)];
 var $call_i_i29=FUNCTION_TABLE[$28]($24);
 label=25;break;
 case 24: 
 var $incdec_ptr_i_i=(($25+4)|0);
 HEAP32[(($__ninp__i_i24)>>2)]=$incdec_ptr_i_i;
 label=25;break;
 case 25: 
 var $29=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i52=($29|0)==0;
 if($tobool_i_i_i52){var $35=1;label=32;break;}else{label=26;break;}
 case 26: 
 var $__ninp__i_i_i_i55=(($29+12)|0);
 var $30=HEAP32[(($__ninp__i_i_i_i55)>>2)];
 var $__einp__i_i_i_i56=(($29+16)|0);
 var $31=HEAP32[(($__einp__i_i_i_i56)>>2)];
 var $cmp_i_i_i_i57=($30|0)==($31|0);
 if($cmp_i_i_i_i57){label=27;break;}else{label=28;break;}
 case 27: 
 var $32=$29;
 var $vtable_i_i_i_i59=HEAP32[(($32)>>2)];
 var $vfn_i_i_i_i60=(($vtable_i_i_i_i59+36)|0);
 var $33=HEAP32[(($vfn_i_i_i_i60)>>2)];
 var $call_i_i_i_i61=FUNCTION_TABLE[$33]($29);
 var $retval_i_i_i_i42_0=$call_i_i_i_i61;label=29;break;
 case 28: 
 var $34=HEAP32[(($30)>>2)];
 var $retval_i_i_i_i42_0=$34;label=29;break;
 case 29: 
 var $retval_i_i_i_i42_0;
 var $cmp_i7_i_i_i65=($retval_i_i_i_i42_0|0)==-1;
 if($cmp_i7_i_i_i65){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre5=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp6=($_pre5|0)==0;
 var $35=$phitmp6;label=32;break;
 case 31: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $35=1;label=32;break;
 case 32: 
 var $35;
 if($cmp_i30_i_i8){label=38;break;}else{label=33;break;}
 case 33: 
 var $__ninp__i_i15_i_i78=(($14+12)|0);
 var $36=HEAP32[(($__ninp__i_i15_i_i78)>>2)];
 var $__einp__i_i16_i_i79=(($14+16)|0);
 var $37=HEAP32[(($__einp__i_i16_i_i79)>>2)];
 var $cmp_i_i17_i_i80=($36|0)==($37|0);
 if($cmp_i_i17_i_i80){label=34;break;}else{label=35;break;}
 case 34: 
 var $38=$14;
 var $vtable_i_i19_i_i82=HEAP32[(($38)>>2)];
 var $vfn_i_i20_i_i83=(($vtable_i_i19_i_i82+36)|0);
 var $39=HEAP32[(($vfn_i_i20_i_i83)>>2)];
 var $call_i_i21_i_i84=FUNCTION_TABLE[$39]($14);
 var $retval_i_i7_i_i36_0=$call_i_i21_i_i84;label=36;break;
 case 35: 
 var $40=HEAP32[(($36)>>2)];
 var $retval_i_i7_i_i36_0=$40;label=36;break;
 case 36: 
 var $retval_i_i7_i_i36_0;
 var $cmp_i7_i25_i_i88=($retval_i_i7_i_i36_0|0)==-1;
 if($cmp_i7_i25_i_i88){label=37;break;}else{label=39;break;}
 case 37: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=38;break;
 case 38: 
 if($35){label=40;break;}else{label=41;break;}
 case 39: 
 var $cmp_i30_i_i93=($14|0)==0;
 var $cmp_i_i95tmp=$35^$cmp_i30_i_i93;
 if($cmp_i_i95tmp){label=41;break;}else{label=40;break;}
 case 40: 
 var $41=HEAP32[(($__err)>>2)];
 var $or9=$41|2;
 HEAP32[(($__err)>>2)]=$or9;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $0=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i=($0|0)==0;
 if($tobool_i_i_i){var $6=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $__ninp__i_i_i_i=(($0+12)|0);
 var $1=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($0+16)|0);
 var $2=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($1|0)==($2|0);
 if($cmp_i_i_i_i){label=3;break;}else{label=4;break;}
 case 3: 
 var $3=$0;
 var $vtable_i_i_i_i=HEAP32[(($3)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $4=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i=FUNCTION_TABLE[$4]($0);
 var $retval_i_i_i_i_0=$call_i_i_i_i;label=5;break;
 case 4: 
 var $5=HEAP32[(($1)>>2)];
 var $retval_i_i_i_i_0=$5;label=5;break;
 case 5: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp=($_pre|0)==0;
 var $6=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $6=1;label=8;break;
 case 8: 
 var $6;
 var $__sbuf__i11_i_i=(($__e)|0);
 var $7=HEAP32[(($__sbuf__i11_i_i)>>2)];
 var $tobool_i12_i_i=($7|0)==0;
 if($tobool_i12_i_i){label=14;break;}else{label=9;break;}
 case 9: 
 var $__ninp__i_i15_i_i=(($7+12)|0);
 var $8=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($7+16)|0);
 var $9=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($8|0)==($9|0);
 if($cmp_i_i17_i_i){label=10;break;}else{label=11;break;}
 case 10: 
 var $10=$7;
 var $vtable_i_i19_i_i=HEAP32[(($10)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $11=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i=FUNCTION_TABLE[$11]($7);
 var $retval_i_i7_i_i_0=$call_i_i21_i_i;label=12;break;
 case 11: 
 var $12=HEAP32[(($8)>>2)];
 var $retval_i_i7_i_i_0=$12;label=12;break;
 case 12: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=13;break;}else{label=15;break;}
 case 13: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=14;break;
 case 14: 
 if($6){label=16;break;}else{var $14=0;label=17;break;}
 case 15: 
 var $cmp_i30_i_i=($7|0)==0;
 var $cmp_i_itmp=$6^$cmp_i30_i_i;
 if($cmp_i_itmp){var $14=$7;label=17;break;}else{label=16;break;}
 case 16: 
 var $13=HEAP32[(($__err)>>2)];
 var $or=$13|6;
 HEAP32[(($__err)>>2)]=$or;
 var $retval_0=0;label=63;break;
 case 17: 
 var $14;
 var $15=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i=(($15+12)|0);
 var $16=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($15+16)|0);
 var $17=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i24=($16|0)==($17|0);
 if($cmp_i_i24){label=18;break;}else{label=19;break;}
 case 18: 
 var $18=$15;
 var $vtable_i_i=HEAP32[(($18)>>2)];
 var $vfn_i_i=(($vtable_i_i+36)|0);
 var $19=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i=FUNCTION_TABLE[$19]($15);
 var $retval_i_i_0=$call_i_i;label=20;break;
 case 19: 
 var $20=HEAP32[(($16)>>2)];
 var $retval_i_i_0=$20;label=20;break;
 case 20: 
 var $retval_i_i_0;
 var $21=$__ct;
 var $vtable_i=HEAP32[(($21)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $22=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$22]($__ct,2048,$retval_i_i_0);
 if($call_i){label=22;break;}else{label=21;break;}
 case 21: 
 var $23=HEAP32[(($__err)>>2)];
 var $or4=$23|4;
 HEAP32[(($__err)>>2)]=$or4;
 var $retval_0=0;label=63;break;
 case 22: 
 var $24=$__ct;
 var $vtable_i30=HEAP32[(($24)>>2)];
 var $vfn_i31=(($vtable_i30+52)|0);
 var $25=HEAP32[(($vfn_i31)>>2)];
 var $call_i32=FUNCTION_TABLE[$25]($__ct,$retval_i_i_0,0);
 var $conv=(($call_i32<<24)>>24);
 var $26=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i40=(($26+12)|0);
 var $27=HEAP32[(($__ninp__i_i40)>>2)];
 var $__einp__i_i41=(($26+16)|0);
 var $28=HEAP32[(($__einp__i_i41)>>2)];
 var $cmp_i_i42=($27|0)==($28|0);
 if($cmp_i_i42){label=23;break;}else{label=24;break;}
 case 23: 
 var $29=$26;
 var $vtable_i_i43=HEAP32[(($29)>>2)];
 var $vfn_i_i44=(($vtable_i_i43+40)|0);
 var $30=HEAP32[(($vfn_i_i44)>>2)];
 var $call_i_i45=FUNCTION_TABLE[$30]($26);
 var $__r_0_in=$conv;var $__n_addr_0_in=$__n;var $31=$14;label=25;break;
 case 24: 
 var $incdec_ptr_i_i=(($27+4)|0);
 HEAP32[(($__ninp__i_i40)>>2)]=$incdec_ptr_i_i;
 var $__r_0_in=$conv;var $__n_addr_0_in=$__n;var $31=$14;label=25;break;
 case 25: 
 var $31;
 var $__n_addr_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $__n_addr_0=((($__n_addr_0_in)-(1))|0);
 var $32=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i68=($32|0)==0;
 if($tobool_i_i_i68){var $38=0;label=32;break;}else{label=26;break;}
 case 26: 
 var $__ninp__i_i_i_i71=(($32+12)|0);
 var $33=HEAP32[(($__ninp__i_i_i_i71)>>2)];
 var $__einp__i_i_i_i72=(($32+16)|0);
 var $34=HEAP32[(($__einp__i_i_i_i72)>>2)];
 var $cmp_i_i_i_i73=($33|0)==($34|0);
 if($cmp_i_i_i_i73){label=27;break;}else{label=28;break;}
 case 27: 
 var $35=$32;
 var $vtable_i_i_i_i75=HEAP32[(($35)>>2)];
 var $vfn_i_i_i_i76=(($vtable_i_i_i_i75+36)|0);
 var $36=HEAP32[(($vfn_i_i_i_i76)>>2)];
 var $call_i_i_i_i77=FUNCTION_TABLE[$36]($32);
 var $retval_i_i_i_i58_0=$call_i_i_i_i77;label=29;break;
 case 28: 
 var $37=HEAP32[(($33)>>2)];
 var $retval_i_i_i_i58_0=$37;label=29;break;
 case 29: 
 var $retval_i_i_i_i58_0;
 var $cmp_i7_i_i_i81=($retval_i_i_i_i58_0|0)==-1;
 if($cmp_i7_i_i_i81){label=31;break;}else{label=30;break;}
 case 30: 
 var $_pre21=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $38=$_pre21;label=32;break;
 case 31: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $38=0;label=32;break;
 case 32: 
 var $38;
 var $cmp_i_i_i86=($38|0)==0;
 var $tobool_i12_i_i90=($31|0)==0;
 if($tobool_i12_i_i90){var $46=$38;var $45=0;label=39;break;}else{label=33;break;}
 case 33: 
 var $__ninp__i_i15_i_i94=(($31+12)|0);
 var $39=HEAP32[(($__ninp__i_i15_i_i94)>>2)];
 var $__einp__i_i16_i_i95=(($31+16)|0);
 var $40=HEAP32[(($__einp__i_i16_i_i95)>>2)];
 var $cmp_i_i17_i_i96=($39|0)==($40|0);
 if($cmp_i_i17_i_i96){label=34;break;}else{label=35;break;}
 case 34: 
 var $41=$31;
 var $vtable_i_i19_i_i98=HEAP32[(($41)>>2)];
 var $vfn_i_i20_i_i99=(($vtable_i_i19_i_i98+36)|0);
 var $42=HEAP32[(($vfn_i_i20_i_i99)>>2)];
 var $call_i_i21_i_i100=FUNCTION_TABLE[$42]($31);
 var $retval_i_i7_i_i52_0=$call_i_i21_i_i100;label=36;break;
 case 35: 
 var $43=HEAP32[(($39)>>2)];
 var $retval_i_i7_i_i52_0=$43;label=36;break;
 case 36: 
 var $retval_i_i7_i_i52_0;
 var $cmp_i7_i25_i_i104=($retval_i_i7_i_i52_0|0)==-1;
 if($cmp_i7_i25_i_i104){label=37;break;}else{var $44=$31;label=38;break;}
 case 37: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 var $44=0;label=38;break;
 case 38: 
 var $44;
 var $_pr=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $46=$_pr;var $45=$44;label=39;break;
 case 39: 
 var $45;
 var $46;
 var $cmp_i30_i_i109=($45|0)==0;
 var $lnot_i=$cmp_i_i_i86^$cmp_i30_i_i109;
 var $cmp=($__n_addr_0|0)>0;
 var $cmp_=$lnot_i&$cmp;
 if($cmp_){label=40;break;}else{label=47;break;}
 case 40: 
 var $__ninp__i_i119=(($46+12)|0);
 var $47=HEAP32[(($__ninp__i_i119)>>2)];
 var $__einp__i_i120=(($46+16)|0);
 var $48=HEAP32[(($__einp__i_i120)>>2)];
 var $cmp_i_i121=($47|0)==($48|0);
 if($cmp_i_i121){label=41;break;}else{label=42;break;}
 case 41: 
 var $49=$46;
 var $vtable_i_i122=HEAP32[(($49)>>2)];
 var $vfn_i_i123=(($vtable_i_i122+36)|0);
 var $50=HEAP32[(($vfn_i_i123)>>2)];
 var $call_i_i124=FUNCTION_TABLE[$50]($46);
 var $retval_i_i113_0=$call_i_i124;label=43;break;
 case 42: 
 var $51=HEAP32[(($47)>>2)];
 var $retval_i_i113_0=$51;label=43;break;
 case 43: 
 var $retval_i_i113_0;
 var $vtable_i133=HEAP32[(($21)>>2)];
 var $vfn_i134=(($vtable_i133+12)|0);
 var $52=HEAP32[(($vfn_i134)>>2)];
 var $call_i135=FUNCTION_TABLE[$52]($__ct,2048,$retval_i_i113_0);
 if($call_i135){label=44;break;}else{var $retval_0=$__r_0;label=63;break;}
 case 44: 
 var $mul=((($__r_0)*(10))&-1);
 var $vtable_i140=HEAP32[(($24)>>2)];
 var $vfn_i141=(($vtable_i140+52)|0);
 var $53=HEAP32[(($vfn_i141)>>2)];
 var $call_i142=FUNCTION_TABLE[$53]($__ct,$retval_i_i113_0,0);
 var $conv14=(($call_i142<<24)>>24);
 var $add=((($conv14)+($mul))|0);
 var $54=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $__ninp__i_i150=(($54+12)|0);
 var $55=HEAP32[(($__ninp__i_i150)>>2)];
 var $__einp__i_i151=(($54+16)|0);
 var $56=HEAP32[(($__einp__i_i151)>>2)];
 var $cmp_i_i152=($55|0)==($56|0);
 if($cmp_i_i152){label=45;break;}else{label=46;break;}
 case 45: 
 var $57=$54;
 var $vtable_i_i153=HEAP32[(($57)>>2)];
 var $vfn_i_i154=(($vtable_i_i153+40)|0);
 var $58=HEAP32[(($vfn_i_i154)>>2)];
 var $call_i_i155=FUNCTION_TABLE[$58]($54);
 var $__r_0_in=$add;var $__n_addr_0_in=$__n_addr_0;var $31=$45;label=25;break;
 case 46: 
 var $incdec_ptr_i_i158=(($55+4)|0);
 HEAP32[(($__ninp__i_i150)>>2)]=$incdec_ptr_i_i158;
 var $__r_0_in=$add;var $__n_addr_0_in=$__n_addr_0;var $31=$45;label=25;break;
 case 47: 
 var $tobool_i_i_i180=($46|0)==0;
 if($tobool_i_i_i180){var $64=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $__ninp__i_i_i_i183=(($46+12)|0);
 var $59=HEAP32[(($__ninp__i_i_i_i183)>>2)];
 var $__einp__i_i_i_i184=(($46+16)|0);
 var $60=HEAP32[(($__einp__i_i_i_i184)>>2)];
 var $cmp_i_i_i_i185=($59|0)==($60|0);
 if($cmp_i_i_i_i185){label=49;break;}else{label=50;break;}
 case 49: 
 var $61=$46;
 var $vtable_i_i_i_i187=HEAP32[(($61)>>2)];
 var $vfn_i_i_i_i188=(($vtable_i_i_i_i187+36)|0);
 var $62=HEAP32[(($vfn_i_i_i_i188)>>2)];
 var $call_i_i_i_i189=FUNCTION_TABLE[$62]($46);
 var $retval_i_i_i_i170_0=$call_i_i_i_i189;label=51;break;
 case 50: 
 var $63=HEAP32[(($59)>>2)];
 var $retval_i_i_i_i170_0=$63;label=51;break;
 case 51: 
 var $retval_i_i_i_i170_0;
 var $cmp_i7_i_i_i193=($retval_i_i_i_i170_0|0)==-1;
 if($cmp_i7_i_i_i193){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre22=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $phitmp23=($_pre22|0)==0;
 var $64=$phitmp23;label=54;break;
 case 53: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $64=1;label=54;break;
 case 54: 
 var $64;
 if($cmp_i30_i_i109){label=60;break;}else{label=55;break;}
 case 55: 
 var $__ninp__i_i15_i_i206=(($45+12)|0);
 var $65=HEAP32[(($__ninp__i_i15_i_i206)>>2)];
 var $__einp__i_i16_i_i207=(($45+16)|0);
 var $66=HEAP32[(($__einp__i_i16_i_i207)>>2)];
 var $cmp_i_i17_i_i208=($65|0)==($66|0);
 if($cmp_i_i17_i_i208){label=56;break;}else{label=57;break;}
 case 56: 
 var $67=$45;
 var $vtable_i_i19_i_i210=HEAP32[(($67)>>2)];
 var $vfn_i_i20_i_i211=(($vtable_i_i19_i_i210+36)|0);
 var $68=HEAP32[(($vfn_i_i20_i_i211)>>2)];
 var $call_i_i21_i_i212=FUNCTION_TABLE[$68]($45);
 var $retval_i_i7_i_i164_0=$call_i_i21_i_i212;label=58;break;
 case 57: 
 var $69=HEAP32[(($65)>>2)];
 var $retval_i_i7_i_i164_0=$69;label=58;break;
 case 58: 
 var $retval_i_i7_i_i164_0;
 var $cmp_i7_i25_i_i216=($retval_i_i7_i_i164_0|0)==-1;
 if($cmp_i7_i25_i_i216){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($__sbuf__i11_i_i)>>2)]=0;
 label=60;break;
 case 60: 
 if($64){label=62;break;}else{var $retval_0=$__r_0;label=63;break;}
 case 61: 
 var $cmp_i30_i_i221=($45|0)==0;
 var $cmp_i_i223tmp=$64^$cmp_i30_i_i221;
 if($cmp_i_i223tmp){var $retval_0=$__r_0;label=63;break;}else{label=62;break;}
 case 62: 
 var $70=HEAP32[(($__err)>>2)];
 var $or20=$70|2;
 HEAP32[(($__err)>>2)]=$or20;
 var $retval_0=$__r_0;label=63;break;
 case 63: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $__loc__i=(($this+8)|0);
 var $1=HEAP32[(($__loc__i)>>2)];
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i_i=($3|0)==0;
 if($tobool_i_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i_i;
 label=6;break;
 case 5: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 label=9;break;
 case 6: 
 var $5=HEAP32[((12216)>>2)];
 var $cmp_i=($1|0)==($5|0);
 if($cmp_i){label=10;break;}else{label=7;break;}
 case 7: 
 var $6=HEAP32[(($__loc__i)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $8=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($8);
 __ZdlPv($0);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc__i=(($this+8)|0);
 var $0=HEAP32[(($__loc__i)>>2)];
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i_i=($2|0)==0;
 if($tobool_i_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i_i;
 label=6;break;
 case 5: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 label=9;break;
 case 6: 
 var $4=HEAP32[((12216)>>2)];
 var $cmp_i=($0|0)==($4|0);
 if($cmp_i){label=10;break;}else{label=7;break;}
 case 7: 
 var $5=HEAP32[(($__loc__i)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $7=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($7);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $arraydecay=(($__nar)|0);
 var $2=(($fmt_i)|0);
 HEAP8[($2)]=37;
 var $arrayinit_element_i=(($fmt_i+1)|0);
 HEAP8[($arrayinit_element_i)]=$__fmt;
 var $arrayinit_element2_i=(($fmt_i+2)|0);
 HEAP8[($arrayinit_element2_i)]=$__mod;
 var $arrayinit_element3_i=(($fmt_i+3)|0);
 HEAP8[($arrayinit_element3_i)]=0;
 var $cmp_i=(($__mod<<24)>>24)==0;
 if($cmp_i){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($arrayinit_element_i)]=$__mod;
 HEAP8[($arrayinit_element2_i)]=$__fmt;
 label=3;break;
 case 3: 
 var $__loc__i=(($this+8)|0);
 var $3=HEAP32[(($__loc__i)>>2)];
 var $call5_i=_strftime($arraydecay,100,$2,$__tm,$3);
 var $add_ptr_i=(($__nar+$call5_i)|0);
 var $agg_tmp_sroa_0_0__idx=(($__s)|0);
 var $agg_tmp_sroa_0_0_copyload1=HEAP32[(($agg_tmp_sroa_0_0__idx)>>2)];
 var $cmp_i_i11=($call5_i|0)==0;
 if($cmp_i_i11){var $agg_tmp3_i_sroa_0_0_lcssa=$agg_tmp_sroa_0_0_copyload1;label=10;break;}else{var $agg_tmp3_i_sroa_0_012=$agg_tmp_sroa_0_0_copyload1;var $__first_addr_i_i_013=$arraydecay;label=4;break;}
 case 4: 
 var $__first_addr_i_i_013;
 var $agg_tmp3_i_sroa_0_012;
 var $4=HEAP8[($__first_addr_i_i_013)];
 var $tobool_i_i_i=($agg_tmp3_i_sroa_0_012|0)==0;
 if($tobool_i_i_i){var $agg_tmp3_i_sroa_0_1=0;label=9;break;}else{label=5;break;}
 case 5: 
 var $__nout__i_i_i_i=(($agg_tmp3_i_sroa_0_012+24)|0);
 var $5=HEAP32[(($__nout__i_i_i_i)>>2)];
 var $__eout__i_i_i_i=(($agg_tmp3_i_sroa_0_012+28)|0);
 var $6=HEAP32[(($__eout__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($5|0)==($6|0);
 if($cmp_i_i_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $7=$agg_tmp3_i_sroa_0_012;
 var $vtable_i_i_i_i=HEAP32[(($7)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+52)|0);
 var $8=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $conv_i_i_i_i_i=($4&255);
 var $call2_i_i_i_i=FUNCTION_TABLE[$8]($agg_tmp3_i_sroa_0_012,$conv_i_i_i_i_i);
 var $retval_i_i_i_i_0=$call2_i_i_i_i;label=8;break;
 case 7: 
 var $incdec_ptr_i_i_i_i=(($5+1)|0);
 HEAP32[(($__nout__i_i_i_i)>>2)]=$incdec_ptr_i_i_i_i;
 HEAP8[($5)]=$4;
 var $conv_i6_i_i_i_i=($4&255);
 var $retval_i_i_i_i_0=$conv_i6_i_i_i_i;label=8;break;
 case 8: 
 var $retval_i_i_i_i_0;
 var $cmp_i6_i_i_i=($retval_i_i_i_i_0|0)==-1;
 var $_agg_tmp3_i_sroa_0_0=($cmp_i6_i_i_i?0:$agg_tmp3_i_sroa_0_012);
 var $agg_tmp3_i_sroa_0_1=$_agg_tmp3_i_sroa_0_0;label=9;break;
 case 9: 
 var $agg_tmp3_i_sroa_0_1;
 var $incdec_ptr_i_i=(($__first_addr_i_i_013+1)|0);
 var $cmp_i_i=($incdec_ptr_i_i|0)==($add_ptr_i|0);
 if($cmp_i_i){var $agg_tmp3_i_sroa_0_0_lcssa=$agg_tmp3_i_sroa_0_1;label=10;break;}else{var $agg_tmp3_i_sroa_0_012=$agg_tmp3_i_sroa_0_1;var $__first_addr_i_i_013=$incdec_ptr_i_i;label=4;break;}
 case 10: 
 var $agg_tmp3_i_sroa_0_0_lcssa;
 var $agg_tmp3_i_sroa_0_0__idx=(($agg_result)|0);
 HEAP32[(($agg_tmp3_i_sroa_0_0__idx)>>2)]=$agg_tmp3_i_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 var $__loc__i=(($this+8)|0);
 var $1=HEAP32[(($__loc__i)>>2)];
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i_i=($3|0)==0;
 if($tobool_i_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i_i;
 label=6;break;
 case 5: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 label=9;break;
 case 6: 
 var $5=HEAP32[((12216)>>2)];
 var $cmp_i=($1|0)==($5|0);
 if($cmp_i){label=10;break;}else{label=7;break;}
 case 7: 
 var $6=HEAP32[(($__loc__i)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $8=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($8);
 __ZdlPv($0);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc__i=(($this+8)|0);
 var $0=HEAP32[(($__loc__i)>>2)];
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i_i=($2|0)==0;
 if($tobool_i_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i_i;
 label=6;break;
 case 5: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 label=9;break;
 case 6: 
 var $4=HEAP32[((12216)>>2)];
 var $cmp_i=($0|0)==($4|0);
 if($cmp_i){label=10;break;}else{label=7;break;}
 case 7: 
 var $5=HEAP32[(($__loc__i)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $7=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($7);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+408)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__nar=sp;
 var $__ne=(sp)+(400);
 var $arraydecay=(($__nar)|0);
 var $add_ptr=(($__nar+400)|0);
 HEAP32[(($__ne)>>2)]=$add_ptr;
 var $add_ptr3=(($this+8)|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($add_ptr3,$arraydecay,$__ne,$__tm,$__fmt,$__mod);
 var $2=HEAP32[(($__ne)>>2)];
 var $agg_tmp_sroa_0_0__idx=(($__s)|0);
 var $agg_tmp_sroa_0_0_copyload1=HEAP32[(($agg_tmp_sroa_0_0__idx)>>2)];
 var $cmp_i_i10=($arraydecay|0)==($2|0);
 if($cmp_i_i10){var $agg_tmp3_i_sroa_0_0_lcssa=$agg_tmp_sroa_0_0_copyload1;label=8;break;}else{var $agg_tmp3_i_sroa_0_011=$agg_tmp_sroa_0_0_copyload1;var $__first_addr_i_i_012=$arraydecay;label=2;break;}
 case 2: 
 var $__first_addr_i_i_012;
 var $agg_tmp3_i_sroa_0_011;
 var $3=HEAP32[(($__first_addr_i_i_012)>>2)];
 var $tobool_i_i_i=($agg_tmp3_i_sroa_0_011|0)==0;
 if($tobool_i_i_i){var $agg_tmp3_i_sroa_0_1=0;label=7;break;}else{label=3;break;}
 case 3: 
 var $__nout__i_i_i_i=(($agg_tmp3_i_sroa_0_011+24)|0);
 var $4=HEAP32[(($__nout__i_i_i_i)>>2)];
 var $__eout__i_i_i_i=(($agg_tmp3_i_sroa_0_011+28)|0);
 var $5=HEAP32[(($__eout__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($4|0)==($5|0);
 if($cmp_i_i_i_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$agg_tmp3_i_sroa_0_011;
 var $vtable_i_i_i_i=HEAP32[(($6)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+52)|0);
 var $7=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call2_i_i_i_i=FUNCTION_TABLE[$7]($agg_tmp3_i_sroa_0_011,$3);
 var $retval_i_i_i_i_0=$call2_i_i_i_i;label=6;break;
 case 5: 
 var $incdec_ptr_i_i_i_i=(($4+4)|0);
 HEAP32[(($__nout__i_i_i_i)>>2)]=$incdec_ptr_i_i_i_i;
 HEAP32[(($4)>>2)]=$3;
 var $retval_i_i_i_i_0=$3;label=6;break;
 case 6: 
 var $retval_i_i_i_i_0;
 var $cmp_i6_i_i_i=($retval_i_i_i_i_0|0)==-1;
 var $_agg_tmp3_i_sroa_0_0=($cmp_i6_i_i_i?0:$agg_tmp3_i_sroa_0_011);
 var $agg_tmp3_i_sroa_0_1=$_agg_tmp3_i_sroa_0_0;label=7;break;
 case 7: 
 var $agg_tmp3_i_sroa_0_1;
 var $incdec_ptr_i_i=(($__first_addr_i_i_012+4)|0);
 var $cmp_i_i=($incdec_ptr_i_i|0)==($2|0);
 if($cmp_i_i){var $agg_tmp3_i_sroa_0_0_lcssa=$agg_tmp3_i_sroa_0_1;label=8;break;}else{var $agg_tmp3_i_sroa_0_011=$agg_tmp3_i_sroa_0_1;var $__first_addr_i_i_012=$incdec_ptr_i_i;label=2;break;}
 case 8: 
 var $agg_tmp3_i_sroa_0_0_lcssa;
 var $agg_tmp3_i_sroa_0_0__idx=(($agg_result)|0);
 HEAP32[(($agg_tmp3_i_sroa_0_0__idx)>>2)]=$agg_tmp3_i_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $mb=(sp)+(112);
 var $tmpcast=$mb;
 var $__nb=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__nar)|0);
 var $0=(($fmt_i)|0);
 HEAP8[($0)]=37;
 var $arrayinit_element_i=(($fmt_i+1)|0);
 HEAP8[($arrayinit_element_i)]=$__fmt;
 var $arrayinit_element2_i=(($fmt_i+2)|0);
 HEAP8[($arrayinit_element2_i)]=$__mod;
 var $arrayinit_element3_i=(($fmt_i+3)|0);
 HEAP8[($arrayinit_element3_i)]=0;
 var $cmp_i=(($__mod<<24)>>24)==0;
 if($cmp_i){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($arrayinit_element_i)]=$__mod;
 HEAP8[($arrayinit_element2_i)]=$__fmt;
 label=3;break;
 case 3: 
 var $__loc__i=(($this)|0);
 var $1=HEAP32[(($__loc__i)>>2)];
 var $call5_i=_strftime($arraydecay,100,$0,$__tm,$1);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($mb)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($mb+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($__nb)>>2)]=$arraydecay;
 var $2=HEAP32[(($__we)>>2)];
 var $sub_ptr_lhs_cast_i=$2;
 var $sub_ptr_rhs_cast_i=$__wb;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i=$sub_ptr_sub_i>>2;
 var $3=HEAP32[(($__loc__i)>>2)];
 var $call_i=_uselocale($3);
 var $call1_i=(function() { try { __THREW__ = 0; return _mbsrtowcs($__wb,$__nb,$sub_ptr_div_i,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $tobool_i_i_i37_i=($call_i|0)==0;
 if($tobool_i_i_i37_i){label=11;break;}else{label=5;break;}
 case 5: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i|0)==0;
 if($tobool_i_i_i_i){label=10;break;}else{label=8;break;}
 case 8: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($5$0)
 case 11: 
 var $cmp=($call1_i|0)==-1;
 if($cmp){label=12;break;}else{label=13;break;}
 case 12: 
 __ZNSt3__121__throw_runtime_errorEPKc(928);
 throw "Reached an unreachable!";
 case 13: 
 var $add_ptr5=(($__wb+($call1_i<<2))|0);
 HEAP32[(($__we)>>2)]=$add_ptr5;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result4=$agg_result;
 HEAP32[(($agg_result4)>>2)]=0; HEAP32[((($agg_result4)+(4))>>2)]=0; HEAP32[((($agg_result4)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg_result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $0=$agg_result;
 tempBigInt=67109634;HEAP8[($0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($0)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $agg_tmp=(sp)+(152);
 var $__atoms=(sp)+(160);
 var $__nbuf=(sp)+(176);
 var $arraydecay=(($__wbuf)|0);
 var $__first__i_i_i_i_i=(($__wb)|0);
 HEAP32[(($__first__i_i_i_i_i)>>2)]=$arraydecay;
 var $__second__i_i_i_i_i=(($__wb+4)|0);
 HEAP32[(($__second__i_i_i_i_i)>>2)]=446;
 var $add_ptr=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i23=($2|0)==-1;
 if($cmp_i_i_i23){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i25=($6|0)==0;
 if($tobool_i_i_i25){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 HEAP8[($__neg)]=0;
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($agg_tmp)|0);
 HEAP32[(($11)>>2)]=$10;
 var $__fmtflags__i=(($__iob+4)|0);
 var $12=HEAP32[(($__fmtflags__i)>>2)];
 var $call8=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$agg_tmp,$__intl,$__loc,$12,$__err,$__neg,$8,$__wb,$__wn,$add_ptr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($call8){label=10;break;}else{label=34;break;}
 case 10: 
 var $arraydecay9=(($__atoms)|0);
 var $13=$6;
 var $vtable_i=HEAP32[(($13)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $14=HEAP32[(($vfn_i)>>2)];
 var $call_i76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($8,2168,2178,$arraydecay9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $arraydecay12=(($__nbuf)|0);
 var $15=HEAP32[(($__wn)>>2)];
 var $16=HEAP32[(($__first__i_i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast=$15;
 var $sub_ptr_rhs_cast=$16;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>98;
 if($cmp){label=12;break;}else{var $__nc_0=$arraydecay12;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $add=((($sub_ptr_sub)+(2))|0);
 var $call22=_malloc($add);
 var $cmp24=($call22|0)==0;
 if($cmp24){label=13;break;}else{var $__nc_0=$call22;var $__h_sroa_0_1=$call22;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $18=$17$0;
 var $19=$17$1;
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $54=$arraydecay;var $exn_slot_140=$18;var $ehselector_slot_142=$19;label=53;break;
 case 15: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=$20$0;
 var $22=$20$1;
 var $ehselector_slot_0=$22;var $exn_slot_0=$21;label=52;break;
 case 16: 
 var $__h_sroa_0_0;
 var $23$0 = ___cxa_find_matching_catch(-1, -1); var $23$1 = tempRet0;
 var $eh_lpad_body$1=$23$1;var $eh_lpad_body$0=$23$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $24=$eh_lpad_body$0;
 var $25=$eh_lpad_body$1;
 var $tobool_i_i_i189=($__h_sroa_0_0_lpad_body|0)==0;
 if($tobool_i_i_i189){var $ehselector_slot_0=$25;var $exn_slot_0=$24;label=52;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $ehselector_slot_0=$25;var $exn_slot_0=$24;label=52;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $26=HEAP8[($__neg)];
 var $27=$26&1;
 var $tobool29=(($27<<24)>>24)==0;
 if($tobool29){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $incdec_ptr=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$incdec_ptr;label=21;break;
 case 21: 
 var $__nc_1;
 var $cmp3333=($16>>>0)<($15>>>0);
 if($cmp3333){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $add_ptr_i=(($__atoms+10)|0);
 var $sub_ptr_rhs_cast41=$__atoms;
 var $__nc_234=$__nc_1;var $__w_035=$16;label=23;break;
 case 23: 
 var $__w_035;
 var $__nc_234;
 var $__first_addr_i_0=$arraydecay9;label=24;break;
 case 24: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr_i|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr_i;label=26;break;}else{label=25;break;}
 case 25: 
 var $28=HEAP8[($__first_addr_i_0)];
 var $29=HEAP8[($__w_035)];
 var $cmp2_i=(($28<<24)>>24)==(($29<<24)>>24);
 var $incdec_ptr_i=(($__first_addr_i_0+1)|0);
 if($cmp2_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=26;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=24;break;}
 case 26: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast40=$__first_addr_i_0_lcssa;
 var $sub_ptr_sub42=((($sub_ptr_lhs_cast40)-($sub_ptr_rhs_cast41))|0);
 var $arrayidx=((2168+$sub_ptr_sub42)|0);
 var $30=HEAP8[($arrayidx)];
 HEAP8[($__nc_234)]=$30;
 var $incdec_ptr43=(($__w_035+1)|0);
 var $incdec_ptr44=(($__nc_234+1)|0);
 var $31=HEAP32[(($__wn)>>2)];
 var $cmp33=($incdec_ptr43>>>0)<($31>>>0);
 if($cmp33){var $__nc_234=$incdec_ptr44;var $__w_035=$incdec_ptr43;label=23;break;}else{var $__nc_2_lcssa=$incdec_ptr44;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $call47=_sscanf($arraydecay12,1456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $cmp48=($call47|0)==1;
 if($cmp48){label=32;break;}else{label=28;break;}
 case 28: 
 var $exception_i=___cxa_allocate_exception(8);
 var $32=$exception_i;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($32,1408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i,8552,(46)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___cxa_free_exception($exception_i);
 var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $tobool_i_i_i247=($__h_sroa_0_1|0)==0;
 if($tobool_i_i_i247){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $34=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i219=($34|0)==0;
 if($tobool_i_i_i219){var $39=0;label=39;break;}else{label=35;break;}
 case 35: 
 var $__ninp__i_i_i_i=(($34+12)|0);
 var $35=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($34+16)|0);
 var $36=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($35|0)==($36|0);
 if($cmp_i_i_i_i){label=36;break;}else{var $39=$34;label=39;break;}
 case 36: 
 var $37=$34;
 var $vtable_i_i_i_i=HEAP32[(($37)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $38=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i222=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=15;break; }
 case 37: 
 var $cmp_i7_i_i_i=($call_i_i_i_i222|0)==-1;
 if($cmp_i7_i_i_i){label=38;break;}else{var $39=$34;label=39;break;}
 case 38: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $39=0;label=39;break;
 case 39: 
 var $39;
 var $cmp_i_i_i=($39|0)==0;
 var $40=HEAP32[(($9)>>2)];
 var $tobool_i12_i_i=($40|0)==0;
 if($tobool_i12_i_i){label=45;break;}else{label=40;break;}
 case 40: 
 var $__ninp__i_i15_i_i=(($40+12)|0);
 var $41=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($40+16)|0);
 var $42=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($41|0)==($42|0);
 if($cmp_i_i17_i_i){label=42;break;}else{label=41;break;}
 case 41: 
 if($cmp_i_i_i){label=48;break;}else{label=47;break;}
 case 42: 
 var $43=$40;
 var $vtable_i_i19_i_i=HEAP32[(($43)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $44=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i223=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=15;break; }
 case 43: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i223|0)==-1;
 if($cmp_i7_i26_i_i){label=44;break;}else{label=46;break;}
 case 44: 
 HEAP32[(($9)>>2)]=0;
 label=45;break;
 case 45: 
 if($cmp_i_i_i){label=47;break;}else{label=48;break;}
 case 46: 
 var $cmp_i31_i_i=($40|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i^$cmp_i31_i_i;
 if($cmp_i_itmp){label=48;break;}else{label=47;break;}
 case 47: 
 var $45=HEAP32[(($__err)>>2)];
 var $or=$45|2;
 HEAP32[(($__err)>>2)]=$or;
 label=48;break;
 case 48: 
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$39;
 var $47=HEAP32[(($__locale__i)>>2)];
 var $48=(($47)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($48);
 var $49=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i133=($49|0)==0;
 if($tobool_i_i_i133){label=51;break;}else{label=49;break;}
 case 49: 
 var $50=HEAP32[(($__second__i_i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$50]($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 51: 
 STACKTOP=sp;return;
 case 52: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $52=HEAP32[(($__locale__i)>>2)];
 var $53=(($52)|0);
 var $call_i30=__ZNSt3__114__shared_count16__release_sharedEv($53);
 var $_pre=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i=($_pre|0)==0;
 if($tobool_i_i_i){var $exn_slot_141=$exn_slot_0;var $ehselector_slot_143=$ehselector_slot_0;label=55;break;}else{var $54=$_pre;var $exn_slot_140=$exn_slot_0;var $ehselector_slot_142=$ehselector_slot_0;label=53;break;}
 case 53: 
 var $ehselector_slot_142;
 var $exn_slot_140;
 var $54;
 var $55=HEAP32[(($__second__i_i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $exn_slot_141=$exn_slot_140;var $ehselector_slot_143=$ehselector_slot_142;label=55;break; } else { label=54;break; }
 case 54: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1,0); var $56$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 55: 
 var $ehselector_slot_143;
 var $exn_slot_141;
 var $lpad_val$0=$exn_slot_141;
 var $lpad_val$1=0;
 var $lpad_val58$0=$lpad_val$0;
 var $lpad_val58$1=$ehselector_slot_143;
 ___resumeException($lpad_val58$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__do_nothingEPv($0){
 var label=0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__gbuf=sp;
 var $__pat=(sp)+(400);
 var $__dp=(sp)+(408);
 var $__ts=(sp)+(416);
 var $__grp=(sp)+(424);
 var $__size__i_i1919=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__gbuf)|0);
 HEAP32[(($__size__i_i1919)>>2)]=0; HEAP32[((($__size__i_i1919)+(4))>>2)]=0; HEAP32[((($__size__i_i1919)+(8))>>2)]=0;
 var $__size__i_i_i1871=$__sym;
 var $__size__i_i920=$__psn;
 var $__size__i_i961=$__nsn;
 var $__size__i_i2356=$__spaces;
 HEAP32[(($__size__i_i_i1871)>>2)]=0; HEAP32[((($__size__i_i_i1871)+(4))>>2)]=0; HEAP32[((($__size__i_i_i1871)+(8))>>2)]=0;
 HEAP32[(($__size__i_i920)>>2)]=0; HEAP32[((($__size__i_i920)+(4))>>2)]=0; HEAP32[((($__size__i_i920)+(8))>>2)]=0;
 HEAP32[(($__size__i_i961)>>2)]=0; HEAP32[((($__size__i_i961)+(4))>>2)]=0; HEAP32[((($__size__i_i961)+(8))>>2)]=0;
 HEAP32[(($__size__i_i2356)>>2)]=0; HEAP32[((($__size__i_i2356)+(4))>>2)]=0; HEAP32[((($__size__i_i2356)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=25;break; }
 case 2: 
 var $add_ptr=(($__gbuf+400)|0);
 var $__first__i_i_i570=(($__wb)|0);
 var $0=HEAP32[(($__first__i_i_i570)>>2)];
 HEAP32[(($__wn)>>2)]=$0;
 var $__sbuf__i_i_i627=(($__b)|0);
 var $__sbuf__i11_i_i649=(($__e)|0);
 var $__tab__i=(($__ct+8)|0);
 var $__s_i_i919=$__psn;
 var $__s_i_i960=$__nsn;
 var $arrayidx_i_i_i1394=(($__s_i_i960+1)|0);
 var $__size__i23_i1466=(($__nsn+4)|0);
 var $__data__i21_i_i1385=(($__nsn+8)|0);
 var $arrayidx_i_i_i1202=(($__s_i_i919+1)|0);
 var $__size__i23_i1319=(($__psn+4)|0);
 var $__data__i21_i_i=(($__psn+8)|0);
 var $and315=$__flags&512;
 var $cmp128316=($and315|0)!=0;
 var $__s_i_i_i1870=$__sym;
 var $arrayidx_i_i_i1890=(($__s_i_i_i1870+1)|0);
 var $__size__i23_i_i=(($__sym+4)|0);
 var $__data__i21_i_i1977=(($__sym+8)|0);
 var $__s_i_i2355=$__spaces;
 var $arrayidx_i_i_i2503=(($__s_i_i2355+1)|0);
 var $__size__i23_i_i2870=(($__spaces+4)|0);
 var $__data__i21_i_i2840=(($__spaces+8)|0);
 var $arrayidx122=(($__pat+3)|0);
 var $__size__i23_i1929=(($__grp+4)|0);
 var $__second__i_i_i_i=(($__wb+4)|0);
 var $__we303456=$__we;var $__gb_sroa_1_4_load271297459=446;var $1=$arraydecay;var $__gb_sroa_0_0_load261282462=$arraydecay;var $add_ptr276465=$add_ptr;var $__trailing_sign_0468=0;var $__p_0470=0;label=3;break;
 case 3: 
 var $__p_0470;
 var $__trailing_sign_0468;
 var $add_ptr276465;
 var $__gb_sroa_0_0_load261282462;
 var $1;
 var $__gb_sroa_1_4_load271297459;
 var $__we303456;
 var $2=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i628=($2|0)==0;
 if($tobool_i_i_i628){var $7=0;label=9;break;}else{label=4;break;}
 case 4: 
 var $__ninp__i_i_i_i631=(($2+12)|0);
 var $3=HEAP32[(($__ninp__i_i_i_i631)>>2)];
 var $__einp__i_i_i_i632=(($2+16)|0);
 var $4=HEAP32[(($__einp__i_i_i_i632)>>2)];
 var $cmp_i_i_i_i633=($3|0)==($4|0);
 if($cmp_i_i_i_i633){label=5;break;}else{var $7=$2;label=9;break;}
 case 5: 
 var $5=$2;
 var $vtable_i_i_i_i635=HEAP32[(($5)>>2)];
 var $vfn_i_i_i_i636=(($vtable_i_i_i_i635+36)|0);
 var $6=HEAP32[(($vfn_i_i_i_i636)>>2)];
 var $call_i_i_i_i673=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6]($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 6: 
 var $cmp_i7_i_i_i641=($call_i_i_i_i673|0)==-1;
 if($cmp_i7_i_i_i641){label=8;break;}else{label=7;break;}
 case 7: 
 var $_pre544=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $7=$_pre544;label=9;break;
 case 8: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $7=0;label=9;break;
 case 9: 
 var $7;
 var $cmp_i_i_i646=($7|0)==0;
 var $8=HEAP32[(($__sbuf__i11_i_i649)>>2)];
 var $tobool_i12_i_i650=($8|0)==0;
 if($tobool_i12_i_i650){label=15;break;}else{label=10;break;}
 case 10: 
 var $__ninp__i_i15_i_i654=(($8+12)|0);
 var $9=HEAP32[(($__ninp__i_i15_i_i654)>>2)];
 var $__einp__i_i16_i_i655=(($8+16)|0);
 var $10=HEAP32[(($__einp__i_i16_i_i655)>>2)];
 var $cmp_i_i17_i_i656=($9|0)==($10|0);
 if($cmp_i_i17_i_i656){label=12;break;}else{label=11;break;}
 case 11: 
 if($cmp_i_i_i646){var $13=$8;label=17;break;}else{var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271297459;var $_lcssa=$1;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261282462;var $__trailing_sign_0_lcssa=$__trailing_sign_0468;label=274;break;}
 case 12: 
 var $11=$8;
 var $vtable_i_i19_i_i658=HEAP32[(($11)>>2)];
 var $vfn_i_i20_i_i659=(($vtable_i_i19_i_i658+36)|0);
 var $12=HEAP32[(($vfn_i_i20_i_i659)>>2)];
 var $call_i_i21_i_i675=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$12]($8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 13: 
 var $cmp_i7_i26_i_i664=($call_i_i21_i_i675|0)==-1;
 if($cmp_i7_i26_i_i664){label=14;break;}else{label=16;break;}
 case 14: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=15;break;
 case 15: 
 if($cmp_i_i_i646){var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271297459;var $_lcssa=$1;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261282462;var $__trailing_sign_0_lcssa=$__trailing_sign_0468;label=274;break;}else{var $13=0;label=17;break;}
 case 16: 
 if($cmp_i_i_i646){var $13=$8;label=17;break;}else{var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271297459;var $_lcssa=$1;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261282462;var $__trailing_sign_0_lcssa=$__trailing_sign_0468;label=274;break;}
 case 17: 
 var $13;
 var $arrayidx=(($__pat+$__p_0470)|0);
 var $14=HEAP8[($arrayidx)];
 var $conv=(($14<<24)>>24);
 switch(($conv|0)){case 2:{ label=111;break;}case 4:{ var $__ng_0=0;var $add_ptr279=$add_ptr276465;var $__gb_sroa_0_0_load261285=$__gb_sroa_0_0_load261282462;var $169=$1;var $__gb_sroa_1_4_load271295=$__gb_sroa_1_4_load271297459;var $__we308=$__we303456;label=155;break;}case 1:{ label=29;break;}case 0:{ label=43;break;}case 3:{ label=70;break;}default:{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}}break;
 case 18: 
 var $lpad_loopexit331$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit331$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit331$1;var $lpad_phi$0=$lpad_loopexit331$0;var $15=$_lcssa;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271297_lcssa;label=26;break;
 case 19: 
 var $__gb_sroa_1_4_load271290_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit335$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit335$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit335$1;var $lpad_phi$0=$lpad_loopexit335$0;var $15=$_ph_ph;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271290_ph_ph;label=26;break;
 case 20: 
 var $lpad_loopexit356$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit356$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit356$1;var $lpad_phi$0=$lpad_loopexit356$0;var $15=$210;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271292;label=26;break;
 case 21: 
 var $lpad_loopexit364$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit364$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit364$1;var $lpad_phi$0=$lpad_loopexit364$0;var $15=$1;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271297459;label=26;break;
 case 22: 
 var $lpad_loopexit371$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit371$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit371$1;var $lpad_phi$0=$lpad_loopexit371$0;var $15=$1;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271297459;label=26;break;
 case 23: 
 var $lpad_loopexit375$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit375$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit375$1;var $lpad_phi$0=$lpad_loopexit375$0;var $15=$1;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271297459;label=26;break;
 case 24: 
 var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph;
 var $_ph_ph334_ph_ph_ph_ph_ph;
 var $lpad_loopexit378$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit378$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit378$1;var $lpad_phi$0=$lpad_loopexit378$0;var $15=$_ph_ph334_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load271290=$__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph;label=26;break;
 case 25: 
 var $lpad_nonloopexit379$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit379$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit379$1;var $lpad_phi$0=$lpad_nonloopexit379$0;var $15=$arraydecay;var $__gb_sroa_1_4_load271290=446;label=26;break;
 case 26: 
 var $__gb_sroa_1_4_load271290;
 var $15;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $tobool_i_i_i698=($15|0)==0;
 if($tobool_i_i_i698){label=312;break;}else{label=27;break;}
 case 27: 
 var $16=$15;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load271290]($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=28;break; }
 case 28: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 29: 
 var $cond=($__p_0470|0)==3;
 if($cond){var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271297459;var $_lcssa=$1;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261282462;var $__trailing_sign_0_lcssa=$__trailing_sign_0468;label=274;break;}else{label=30;break;}
 case 30: 
 var $18=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i714=(($18+12)|0);
 var $19=HEAP32[(($__ninp__i_i714)>>2)];
 var $__einp__i_i715=(($18+16)|0);
 var $20=HEAP32[(($__einp__i_i715)>>2)];
 var $cmp_i_i716=($19|0)==($20|0);
 if($cmp_i_i716){label=31;break;}else{label=33;break;}
 case 31: 
 var $21=$18;
 var $vtable_i_i717=HEAP32[(($21)>>2)];
 var $vfn_i_i718=(($vtable_i_i717+36)|0);
 var $22=HEAP32[(($vfn_i_i718)>>2)];
 var $call_i_i725=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$22]($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 32: 
 var $extract_t147=(($call_i_i725)&255);
 var $retval_i_i708_0_off0=$extract_t147;label=34;break;
 case 33: 
 var $23=HEAP8[($19)];
 var $retval_i_i708_0_off0=$23;label=34;break;
 case 34: 
 var $retval_i_i708_0_off0;
 var $conv_i729=(($retval_i_i708_0_off0<<24)>>24);
 var $call_i733=(function() { try { __THREW__ = 0; return _isascii($conv_i729) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 35: 
 var $tobool_i=($call_i733|0)==0;
 if($tobool_i){label=42;break;}else{label=36;break;}
 case 36: 
 var $24=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i=(($24+($conv_i729<<1))|0);
 var $25=HEAP16[(($arrayidx_i)>>1)];
 var $and_i=$25&8192;
 var $cmp_i=(($and_i<<16)>>16)==0;
 if($cmp_i){label=42;break;}else{label=37;break;}
 case 37: 
 var $26=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i742=(($26+12)|0);
 var $27=HEAP32[(($__ninp__i_i742)>>2)];
 var $__einp__i_i743=(($26+16)|0);
 var $28=HEAP32[(($__einp__i_i743)>>2)];
 var $cmp_i_i744=($27|0)==($28|0);
 if($cmp_i_i744){label=38;break;}else{label=40;break;}
 case 38: 
 var $29=$26;
 var $vtable_i_i745=HEAP32[(($29)>>2)];
 var $vfn_i_i746=(($vtable_i_i745+40)|0);
 var $30=HEAP32[(($vfn_i_i746)>>2)];
 var $call_i_i756=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 39: 
 var $extract_t149=(($call_i_i756)&255);
 var $retval_i_i736_0_off0=$extract_t149;label=41;break;
 case 40: 
 var $incdec_ptr_i_i749=(($27+1)|0);
 HEAP32[(($__ninp__i_i742)>>2)]=$incdec_ptr_i_i749;
 var $31=HEAP8[($27)];
 var $retval_i_i736_0_off0=$31;label=41;break;
 case 41: 
 var $retval_i_i736_0_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$retval_i_i736_0_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 42: 
 var $32=HEAP32[(($__err)>>2)];
 var $or=$32|4;
 HEAP32[(($__err)>>2)]=$or;
 var $retval_0=0;var $313=$1;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297459;label=308;break;
 case 43: 
 var $cmp16=($__p_0470|0)==3;
 if($cmp16){var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271297459;var $_lcssa=$1;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261282462;var $__trailing_sign_0_lcssa=$__trailing_sign_0468;label=274;break;}else{var $33=$13;label=44;break;}
 case 44: 
 var $33;
 var $34=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i778=($34|0)==0;
 if($tobool_i_i_i778){var $39=0;label=50;break;}else{label=45;break;}
 case 45: 
 var $__ninp__i_i_i_i781=(($34+12)|0);
 var $35=HEAP32[(($__ninp__i_i_i_i781)>>2)];
 var $__einp__i_i_i_i782=(($34+16)|0);
 var $36=HEAP32[(($__einp__i_i_i_i782)>>2)];
 var $cmp_i_i_i_i783=($35|0)==($36|0);
 if($cmp_i_i_i_i783){label=46;break;}else{var $39=$34;label=50;break;}
 case 46: 
 var $37=$34;
 var $vtable_i_i_i_i785=HEAP32[(($37)>>2)];
 var $vfn_i_i_i_i786=(($vtable_i_i_i_i785+36)|0);
 var $38=HEAP32[(($vfn_i_i_i_i786)>>2)];
 var $call_i_i_i_i824=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=23;break; }
 case 47: 
 var $cmp_i7_i_i_i791=($call_i_i_i_i824|0)==-1;
 if($cmp_i7_i_i_i791){label=49;break;}else{label=48;break;}
 case 48: 
 var $_pre545=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $39=$_pre545;label=50;break;
 case 49: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $39=0;label=50;break;
 case 50: 
 var $39;
 var $cmp_i_i_i796=($39|0)==0;
 var $tobool_i12_i_i800=($33|0)==0;
 if($tobool_i12_i_i800){label=56;break;}else{label=51;break;}
 case 51: 
 var $__ninp__i_i15_i_i804=(($33+12)|0);
 var $40=HEAP32[(($__ninp__i_i15_i_i804)>>2)];
 var $__einp__i_i16_i_i805=(($33+16)|0);
 var $41=HEAP32[(($__einp__i_i16_i_i805)>>2)];
 var $cmp_i_i17_i_i806=($40|0)==($41|0);
 if($cmp_i_i17_i_i806){label=53;break;}else{label=52;break;}
 case 52: 
 if($cmp_i_i_i796){var $44=$33;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}
 case 53: 
 var $42=$33;
 var $vtable_i_i19_i_i808=HEAP32[(($42)>>2)];
 var $vfn_i_i20_i_i809=(($vtable_i_i19_i_i808+36)|0);
 var $43=HEAP32[(($vfn_i_i20_i_i809)>>2)];
 var $call_i_i21_i_i826=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=23;break; }
 case 54: 
 var $cmp_i7_i26_i_i814=($call_i_i21_i_i826|0)==-1;
 if($cmp_i7_i26_i_i814){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=56;break;
 case 56: 
 if($cmp_i_i_i796){var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}else{var $44=0;label=58;break;}
 case 57: 
 if($cmp_i_i_i796){var $44=$33;label=58;break;}else{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}
 case 58: 
 var $44;
 var $45=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i835=(($45+12)|0);
 var $46=HEAP32[(($__ninp__i_i835)>>2)];
 var $__einp__i_i836=(($45+16)|0);
 var $47=HEAP32[(($__einp__i_i836)>>2)];
 var $cmp_i_i837=($46|0)==($47|0);
 if($cmp_i_i837){label=59;break;}else{label=61;break;}
 case 59: 
 var $48=$45;
 var $vtable_i_i838=HEAP32[(($48)>>2)];
 var $vfn_i_i839=(($vtable_i_i838+36)|0);
 var $49=HEAP32[(($vfn_i_i839)>>2)];
 var $call_i_i846=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=23;break; }
 case 60: 
 var $extract_t143=(($call_i_i846)&255);
 var $retval_i_i829_0_off0=$extract_t143;label=62;break;
 case 61: 
 var $50=HEAP8[($46)];
 var $retval_i_i829_0_off0=$50;label=62;break;
 case 62: 
 var $retval_i_i829_0_off0;
 var $conv_i852=(($retval_i_i829_0_off0<<24)>>24);
 var $call_i865=(function() { try { __THREW__ = 0; return _isascii($conv_i852) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=23;break; }
 case 63: 
 var $tobool_i853=($call_i865|0)==0;
 if($tobool_i853){var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}else{label=64;break;}
 case 64: 
 var $51=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i856=(($51+($conv_i852<<1))|0);
 var $52=HEAP16[(($arrayidx_i856)>>1)];
 var $and_i859=$52&8192;
 var $cmp_i860=(($and_i859<<16)>>16)==0;
 if($cmp_i860){var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}else{label=65;break;}
 case 65: 
 var $53=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i881=(($53+12)|0);
 var $54=HEAP32[(($__ninp__i_i881)>>2)];
 var $__einp__i_i882=(($53+16)|0);
 var $55=HEAP32[(($__einp__i_i882)>>2)];
 var $cmp_i_i883=($54|0)==($55|0);
 if($cmp_i_i883){label=66;break;}else{label=68;break;}
 case 66: 
 var $56=$53;
 var $vtable_i_i884=HEAP32[(($56)>>2)];
 var $vfn_i_i885=(($vtable_i_i884+40)|0);
 var $57=HEAP32[(($vfn_i_i885)>>2)];
 var $call_i_i898=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=23;break; }
 case 67: 
 var $extract_t145=(($call_i_i898)&255);
 var $retval_i_i874_0_off0=$extract_t145;label=69;break;
 case 68: 
 var $incdec_ptr_i_i888=(($54+1)|0);
 HEAP32[(($__ninp__i_i881)>>2)]=$incdec_ptr_i_i888;
 var $58=HEAP8[($54)];
 var $retval_i_i874_0_off0=$58;label=69;break;
 case 69: 
 var $retval_i_i874_0_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$retval_i_i874_0_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $33=$44;label=44;break; } else { label=23;break; }
 case 70: 
 var $59=HEAP8[($__size__i_i920)];
 var $conv_i_i921=($59&255);
 var $and_i_i922=$conv_i_i921&1;
 var $tobool_i_i923=($and_i_i922|0)==0;
 var $60=HEAP32[(($__size__i23_i1319)>>2)];
 var $shr_i_i940126=$conv_i_i921>>>1;
 var $cond_i942=($tobool_i_i923?$shr_i_i940126:$60);
 var $61=HEAP8[($__size__i_i961)];
 var $conv_i_i962=($61&255);
 var $and_i_i963=$conv_i_i962&1;
 var $tobool_i_i964=($and_i_i963|0)==0;
 var $62=HEAP32[(($__size__i23_i1466)>>2)];
 var $shr_i_i981127=$conv_i_i962>>>1;
 var $cond_i983=($tobool_i_i964?$shr_i_i981127:$62);
 var $add=(((-$cond_i983))|0);
 var $cmp35=($cond_i942|0)==($add|0);
 if($cmp35){var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}else{label=71;break;}
 case 71: 
 var $cmp38=($cond_i942|0)==0;
 var $cmp40=($cond_i983|0)==0;
 var $or_cond584=$cmp38|$cmp40;
 var $63=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1340=(($63+12)|0);
 var $64=HEAP32[(($__ninp__i_i1340)>>2)];
 var $__einp__i_i1341=(($63+16)|0);
 var $65=HEAP32[(($__einp__i_i1341)>>2)];
 var $cmp_i_i1342=($64|0)==($65|0);
 if($or_cond584){label=72;break;}else{label=92;break;}
 case 72: 
 if($cmp38){label=83;break;}else{label=73;break;}
 case 73: 
 if($cmp_i_i1342){label=74;break;}else{label=76;break;}
 case 74: 
 var $66=$63;
 var $vtable_i_i1177=HEAP32[(($66)>>2)];
 var $vfn_i_i1178=(($vtable_i_i1177+36)|0);
 var $67=HEAP32[(($vfn_i_i1178)>>2)];
 var $call_i_i1185=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 75: 
 var $extract_t140=(($call_i_i1185)&255);
 var $_pre540=HEAP8[($__size__i_i920)];
 var $retval_i_i1168_0_off0=$extract_t140;var $69=$_pre540;label=77;break;
 case 76: 
 var $68=HEAP8[($64)];
 var $retval_i_i1168_0_off0=$68;var $69=$59;label=77;break;
 case 77: 
 var $69;
 var $retval_i_i1168_0_off0;
 var $and_i_i_i=$69&1;
 var $tobool_i_i_i1201=(($and_i_i_i<<24)>>24)==0;
 var $70=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i1202_=($tobool_i_i_i1201?$arrayidx_i_i_i1202:$70);
 var $71=HEAP8[($arrayidx_i_i_i1202_)];
 var $cmp51=(($retval_i_i1168_0_off0<<24)>>24)==(($71<<24)>>24);
 if($cmp51){label=78;break;}else{label=82;break;}
 case 78: 
 var $72=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1279=(($72+12)|0);
 var $73=HEAP32[(($__ninp__i_i1279)>>2)];
 var $__einp__i_i1280=(($72+16)|0);
 var $74=HEAP32[(($__einp__i_i1280)>>2)];
 var $cmp_i_i1281=($73|0)==($74|0);
 if($cmp_i_i1281){label=79;break;}else{label=80;break;}
 case 79: 
 var $75=$72;
 var $vtable_i_i1282=HEAP32[(($75)>>2)];
 var $vfn_i_i1283=(($vtable_i_i1282+40)|0);
 var $76=HEAP32[(($vfn_i_i1283)>>2)];
 var $call_i_i1290=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$76]($72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 80: 
 var $incdec_ptr_i_i1286=(($73+1)|0);
 HEAP32[(($__ninp__i_i1279)>>2)]=$incdec_ptr_i_i1286;
 label=81;break;
 case 81: 
 var $77=HEAP8[($__size__i_i920)];
 var $conv_i_i1310=($77&255);
 var $and_i_i1311=$conv_i_i1310&1;
 var $tobool_i_i1312=($and_i_i1311|0)==0;
 var $78=HEAP32[(($__size__i23_i1319)>>2)];
 var $shr_i_i1329142=$conv_i_i1310>>>1;
 var $cond_i1331=($tobool_i_i1312?$shr_i_i1329142:$78);
 var $cmp56=($cond_i1331>>>0)>1;
 var $__psn___trailing_sign_0=($cmp56?$__psn:$__trailing_sign_0468);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;
 case 82: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;
 case 83: 
 if($cmp_i_i1342){label=84;break;}else{label=86;break;}
 case 84: 
 var $79=$63;
 var $vtable_i_i1343=HEAP32[(($79)>>2)];
 var $vfn_i_i1344=(($vtable_i_i1343+36)|0);
 var $80=HEAP32[(($vfn_i_i1344)>>2)];
 var $call_i_i1351=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 85: 
 var $extract_t137=(($call_i_i1351)&255);
 var $_pre=HEAP8[($__size__i_i961)];
 var $retval_i_i1334_0_off0=$extract_t137;var $82=$_pre;label=87;break;
 case 86: 
 var $81=HEAP8[($64)];
 var $retval_i_i1334_0_off0=$81;var $82=$61;label=87;break;
 case 87: 
 var $82;
 var $retval_i_i1334_0_off0;
 var $and_i_i_i1377=$82&1;
 var $tobool_i_i_i1378=(($and_i_i_i1377<<24)>>24)==0;
 var $83=HEAP32[(($__data__i21_i_i1385)>>2)];
 var $arrayidx_i_i_i1394_=($tobool_i_i_i1378?$arrayidx_i_i_i1394:$83);
 var $84=HEAP8[($arrayidx_i_i_i1394_)];
 var $cmp68=(($retval_i_i1334_0_off0<<24)>>24)==(($84<<24)>>24);
 if($cmp68){label=88;break;}else{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}
 case 88: 
 var $85=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1426=(($85+12)|0);
 var $86=HEAP32[(($__ninp__i_i1426)>>2)];
 var $__einp__i_i1427=(($85+16)|0);
 var $87=HEAP32[(($__einp__i_i1427)>>2)];
 var $cmp_i_i1428=($86|0)==($87|0);
 if($cmp_i_i1428){label=89;break;}else{label=90;break;}
 case 89: 
 var $88=$85;
 var $vtable_i_i1429=HEAP32[(($88)>>2)];
 var $vfn_i_i1430=(($vtable_i_i1429+40)|0);
 var $89=HEAP32[(($vfn_i_i1430)>>2)];
 var $call_i_i1437=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 90: 
 var $incdec_ptr_i_i1433=(($86+1)|0);
 HEAP32[(($__ninp__i_i1426)>>2)]=$incdec_ptr_i_i1433;
 label=91;break;
 case 91: 
 HEAP8[($__neg)]=1;
 var $90=HEAP8[($__size__i_i961)];
 var $conv_i_i1457=($90&255);
 var $and_i_i1458=$conv_i_i1457&1;
 var $tobool_i_i1459=($and_i_i1458|0)==0;
 var $91=HEAP32[(($__size__i23_i1466)>>2)];
 var $shr_i_i1476139=$conv_i_i1457>>>1;
 var $cond_i1478=($tobool_i_i1459?$shr_i_i1476139:$91);
 var $cmp73=($cond_i1478>>>0)>1;
 var $__nsn___trailing_sign_0=($cmp73?$__nsn:$__trailing_sign_0468);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;
 case 92: 
 if($cmp_i_i1342){label=93;break;}else{label=95;break;}
 case 93: 
 var $92=$63;
 var $vtable_i_i1510=HEAP32[(($92)>>2)];
 var $vfn_i_i1511=(($vtable_i_i1510+36)|0);
 var $93=HEAP32[(($vfn_i_i1511)>>2)];
 var $call_i_i1518=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 94: 
 var $extract_t130=(($call_i_i1518)&255);
 var $_pre541=HEAP8[($__size__i_i920)];
 var $_pre716=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1641_phi_trans_insert=(($_pre716+12)|0);
 var $_pre717=HEAP32[(($__ninp__i_i1641_phi_trans_insert)>>2)];
 var $__einp__i_i1642_phi_trans_insert=(($_pre716+16)|0);
 var $_pre718=HEAP32[(($__einp__i_i1642_phi_trans_insert)>>2)];
 var $retval_i_i1501_0_off0=$extract_t130;var $98=$_pre541;var $97=$_pre716;var $96=$_pre717;var $95=$_pre718;label=96;break;
 case 95: 
 var $94=HEAP8[($64)];
 var $retval_i_i1501_0_off0=$94;var $98=$59;var $97=$63;var $96=$64;var $95=$65;label=96;break;
 case 96: 
 var $95;
 var $96;
 var $97;
 var $98;
 var $retval_i_i1501_0_off0;
 var $and_i_i_i1544=$98&1;
 var $tobool_i_i_i1545=(($and_i_i_i1544<<24)>>24)==0;
 var $99=HEAP32[(($__data__i21_i_i)>>2)];
 var $arrayidx_i_i_i1202_575=($tobool_i_i_i1545?$arrayidx_i_i_i1202:$99);
 var $100=HEAP8[($arrayidx_i_i_i1202_575)];
 var $cmp85=(($retval_i_i1501_0_off0<<24)>>24)==(($100<<24)>>24);
 var $__ninp__i_i1641=(($97+12)|0);
 var $cmp_i_i1643=($96|0)==($95|0);
 if($cmp85){label=97;break;}else{label=101;break;}
 case 97: 
 if($cmp_i_i1643){label=98;break;}else{label=99;break;}
 case 98: 
 var $101=$97;
 var $vtable_i_i1644=HEAP32[(($101)>>2)];
 var $vfn_i_i1645=(($vtable_i_i1644+40)|0);
 var $102=HEAP32[(($vfn_i_i1645)>>2)];
 var $call_i_i1652=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=100;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 99: 
 var $incdec_ptr_i_i1648=(($96+1)|0);
 HEAP32[(($__ninp__i_i1641)>>2)]=$incdec_ptr_i_i1648;
 label=100;break;
 case 100: 
 var $103=HEAP8[($__size__i_i920)];
 var $conv_i_i1672=($103&255);
 var $and_i_i1673=$conv_i_i1672&1;
 var $tobool_i_i1674=($and_i_i1673|0)==0;
 var $104=HEAP32[(($__size__i23_i1319)>>2)];
 var $shr_i_i1691135=$conv_i_i1672>>>1;
 var $cond_i1693=($tobool_i_i1674?$shr_i_i1691135:$104);
 var $cmp90=($cond_i1693>>>0)>1;
 var $__psn___trailing_sign_0151=($cmp90?$__psn:$__trailing_sign_0468);
 var $__trailing_sign_1=$__psn___trailing_sign_0151;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;
 case 101: 
 if($cmp_i_i1643){label=102;break;}else{label=104;break;}
 case 102: 
 var $105=$97;
 var $vtable_i_i1705=HEAP32[(($105)>>2)];
 var $vfn_i_i1706=(($vtable_i_i1705+36)|0);
 var $106=HEAP32[(($vfn_i_i1706)>>2)];
 var $call_i_i1713=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]($97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 103: 
 var $extract_t132=(($call_i_i1713)&255);
 var $retval_i_i1696_0_off0=$extract_t132;label=105;break;
 case 104: 
 var $107=HEAP8[($96)];
 var $retval_i_i1696_0_off0=$107;label=105;break;
 case 105: 
 var $retval_i_i1696_0_off0;
 var $108=HEAP8[($__size__i_i961)];
 var $and_i_i_i1739=$108&1;
 var $tobool_i_i_i1740=(($and_i_i_i1739<<24)>>24)==0;
 var $109=HEAP32[(($__data__i21_i_i1385)>>2)];
 var $arrayidx_i_i_i1394_576=($tobool_i_i_i1740?$arrayidx_i_i_i1394:$109);
 var $110=HEAP8[($arrayidx_i_i_i1394_576)];
 var $cmp100=(($retval_i_i1696_0_off0<<24)>>24)==(($110<<24)>>24);
 if($cmp100){label=106;break;}else{label=110;break;}
 case 106: 
 var $111=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1768=(($111+12)|0);
 var $112=HEAP32[(($__ninp__i_i1768)>>2)];
 var $__einp__i_i1769=(($111+16)|0);
 var $113=HEAP32[(($__einp__i_i1769)>>2)];
 var $cmp_i_i1770=($112|0)==($113|0);
 if($cmp_i_i1770){label=107;break;}else{label=108;break;}
 case 107: 
 var $114=$111;
 var $vtable_i_i1771=HEAP32[(($114)>>2)];
 var $vfn_i_i1772=(($vtable_i_i1771+40)|0);
 var $115=HEAP32[(($vfn_i_i1772)>>2)];
 var $call_i_i1779=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$1;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271297459;label=24;break; }
 case 108: 
 var $incdec_ptr_i_i1775=(($112+1)|0);
 HEAP32[(($__ninp__i_i1768)>>2)]=$incdec_ptr_i_i1775;
 label=109;break;
 case 109: 
 HEAP8[($__neg)]=1;
 var $116=HEAP8[($__size__i_i961)];
 var $conv_i_i1799=($116&255);
 var $and_i_i1800=$conv_i_i1799&1;
 var $tobool_i_i1801=($and_i_i1800|0)==0;
 var $117=HEAP32[(($__size__i23_i1466)>>2)];
 var $shr_i_i1818134=$conv_i_i1799>>>1;
 var $cond_i1820=($tobool_i_i1801?$shr_i_i1818134:$117);
 var $cmp105=($cond_i1820>>>0)>1;
 var $__nsn___trailing_sign_0152=($cmp105?$__nsn:$__trailing_sign_0468);
 var $__trailing_sign_1=$__nsn___trailing_sign_0152;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;
 case 110: 
 var $118=HEAP32[(($__err)>>2)];
 var $or109=$118|4;
 HEAP32[(($__err)>>2)]=$or109;
 var $retval_0=0;var $313=$1;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297459;label=308;break;
 case 111: 
 var $tobool116=($__trailing_sign_0468|0)!=0;
 var $cmp118=($__p_0470>>>0)<2;
 var $or_cond=$tobool116|$cmp118;
 if($or_cond){label=115;break;}else{label=112;break;}
 case 112: 
 var $cmp119=($__p_0470|0)==2;
 if($cmp119){label=113;break;}else{var $120=0;label=114;break;}
 case 113: 
 var $119=HEAP8[($arrayidx122)];
 var $cmp124=(($119<<24)>>24)!=0;
 var $120=$cmp124;label=114;break;
 case 114: 
 var $120;
 var $brmerge=$cmp128316|$120;
 if($brmerge){label=115;break;}else{var $__trailing_sign_1=0;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}
 case 115: 
 var $121=HEAP8[($__size__i_i_i1871)];
 var $and_i_i_i1873=$121&1;
 var $tobool_i_i_i1874=(($and_i_i_i1873<<24)>>24)==0;
 var $122=HEAP32[(($__data__i21_i_i1977)>>2)];
 var $arrayidx_i_i_i1890_=($tobool_i_i_i1874?$arrayidx_i_i_i1890:$122);
 var $cmp136=($__p_0470|0)==0;
 if($cmp136){var $__sym_curr_char_sroa_0_0_ph=$arrayidx_i_i_i1890_;var $_ph=$121;var $137=$122;label=128;break;}else{label=116;break;}
 case 116: 
 var $sub=((($__p_0470)-(1))|0);
 var $arrayidx138=(($__pat+$sub)|0);
 var $123=HEAP8[($arrayidx138)];
 var $switch=($123&255)<2;
 if($switch){label=117;break;}else{var $__sym_curr_char_sroa_0_0_ph=$arrayidx_i_i_i1890_;var $_ph=$121;var $137=$122;label=128;break;}
 case 117: 
 var $conv_i_i22_i602=($121&255);
 var $and_i_i23_i603=$conv_i_i22_i602&1;
 var $tobool_i_i24_i604=($and_i_i23_i603|0)==0;
 var $124=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i122605=$conv_i_i22_i602>>>1;
 var $cond_i34_i606=($tobool_i_i24_i604?$shr_i_i_i122605:$124);
 var $lnot_i2016608=($cond_i34_i606|0)==0;
 if($lnot_i2016608){var $__sym_space_end_sroa_0_0_lcssa=$arrayidx_i_i_i1890_;var $131=$121;var $130=$122;label=123;break;}else{var $__sym_space_end_sroa_0_0609=$arrayidx_i_i_i1890_;label=118;break;}
 case 118: 
 var $__sym_space_end_sroa_0_0609;
 var $125=HEAP8[($__sym_space_end_sroa_0_0609)];
 var $conv_i2112=(($125<<24)>>24);
 var $call_i2125=(function() { try { __THREW__ = 0; return _isascii($conv_i2112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { label=21;break; }
 case 119: 
 var $tobool_i2113=($call_i2125|0)==0;
 if($tobool_i2113){label=122;break;}else{label=120;break;}
 case 120: 
 var $126=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i2116=(($126+($conv_i2112<<1))|0);
 var $127=HEAP16[(($arrayidx_i2116)>>1)];
 var $and_i2119=$127&8192;
 var $cmp_i2120=(($and_i2119<<16)>>16)==0;
 if($cmp_i2120){label=122;break;}else{label=121;break;}
 case 121: 
 var $incdec_ptr_i=(($__sym_space_end_sroa_0_0609+1)|0);
 var $_pre546=HEAP8[($__size__i_i_i1871)];
 var $and_i_i_i1969=$_pre546&1;
 var $tobool_i_i_i1970=(($and_i_i_i1969<<24)>>24)==0;
 var $128=HEAP32[(($__data__i21_i_i1977)>>2)];
 var $arrayidx_i_i_i1890_577=($tobool_i_i_i1970?$arrayidx_i_i_i1890:$128);
 var $conv_i_i22_i=($_pre546&255);
 var $and_i_i23_i=$conv_i_i22_i&1;
 var $tobool_i_i24_i=($and_i_i23_i|0)==0;
 var $129=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i122=$conv_i_i22_i>>>1;
 var $cond_i34_i=($tobool_i_i24_i?$shr_i_i_i122:$129);
 var $add_ptr_i1989=(($arrayidx_i_i_i1890_577+$cond_i34_i)|0);
 var $lnot_i2016=($incdec_ptr_i|0)==($add_ptr_i1989|0);
 if($lnot_i2016){var $__sym_space_end_sroa_0_0_lcssa=$incdec_ptr_i;var $131=$_pre546;var $130=$128;label=123;break;}else{var $__sym_space_end_sroa_0_0609=$incdec_ptr_i;label=118;break;}
 case 122: 
 var $_pre719=HEAP8[($__size__i_i_i1871)];
 var $_pre720=HEAP32[(($__data__i21_i_i1977)>>2)];
 var $__sym_space_end_sroa_0_0_lcssa=$__sym_space_end_sroa_0_0609;var $131=$_pre719;var $130=$_pre720;label=123;break;
 case 123: 
 var $130;
 var $131;
 var $__sym_space_end_sroa_0_0_lcssa;
 var $and_i_i_i2157=$131&1;
 var $tobool_i_i_i2158=(($and_i_i_i2157<<24)>>24)==0;
 var $arrayidx_i_i_i1890_578=($tobool_i_i_i2158?$arrayidx_i_i_i1890:$130);
 var $sub_ptr_lhs_cast_i=$__sym_space_end_sroa_0_0_lcssa;
 var $sub_ptr_rhs_cast_i=$arrayidx_i_i_i1890_578;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $132=HEAP8[($__size__i_i2356)];
 var $conv_i_i2357=($132&255);
 var $and_i_i2358=$conv_i_i2357&1;
 var $tobool_i_i2359=($and_i_i2358|0)==0;
 var $133=HEAP32[(($__size__i23_i_i2870)>>2)];
 var $shr_i_i2376123=$conv_i_i2357>>>1;
 var $cond_i2378=($tobool_i_i2359?$shr_i_i2376123:$133);
 var $cmp163=($sub_ptr_sub_i>>>0)>($cond_i2378>>>0);
 if($cmp163){var $__sym_curr_char_sroa_0_0_ph=$arrayidx_i_i_i1890_578;var $_ph=$131;var $137=$130;label=128;break;}else{label=124;break;}
 case 124: 
 var $and_i_i_i2486=$132&1;
 var $tobool_i_i_i2487=(($and_i_i_i2486<<24)>>24)==0;
 var $134=HEAP32[(($__data__i21_i_i2840)>>2)];
 var $arrayidx_i_i_i2503_=($tobool_i_i_i2487?$arrayidx_i_i_i2503:$134);
 var $add_ptr_i2883=(($arrayidx_i_i_i2503_+$cond_i2378)|0);
 var $lnot_i_i_i368=($__sym_space_end_sroa_0_0_lcssa|0)==($arrayidx_i_i_i1890_578|0);
 if($lnot_i_i_i368){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$131;var $137=$130;label=128;break;}else{label=125;break;}
 case 125: 
 var $add_ptr_i2537_sum=((($cond_i2378)-($sub_ptr_sub_i))|0);
 var $add_ptr_i_i_i=(($arrayidx_i_i_i2503_+$add_ptr_i2537_sum)|0);
 var $agg_tmp4_i_sroa_0_0369=$add_ptr_i_i_i;var $agg_tmp29_i_sroa_0_0370=$arrayidx_i_i_i1890_578;label=126;break;
 case 126: 
 var $agg_tmp29_i_sroa_0_0370;
 var $agg_tmp4_i_sroa_0_0369;
 var $135=HEAP8[($agg_tmp4_i_sroa_0_0369)];
 var $136=HEAP8[($agg_tmp29_i_sroa_0_0370)];
 var $cmp_i_i_i2737=(($135<<24)>>24)==(($136<<24)>>24);
 if($cmp_i_i_i2737){label=127;break;}else{var $__sym_curr_char_sroa_0_0_ph=$arrayidx_i_i_i1890_578;var $_ph=$131;var $137=$130;label=128;break;}
 case 127: 
 var $incdec_ptr_i9_i_i=(($agg_tmp4_i_sroa_0_0369+1)|0);
 var $incdec_ptr_i_i_i=(($agg_tmp29_i_sroa_0_0370+1)|0);
 var $lnot_i_i_i=($incdec_ptr_i9_i_i|0)==($add_ptr_i2883|0);
 if($lnot_i_i_i){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$131;var $137=$130;label=128;break;}else{var $agg_tmp4_i_sroa_0_0369=$incdec_ptr_i9_i_i;var $agg_tmp29_i_sroa_0_0370=$incdec_ptr_i_i_i;label=126;break;}
 case 128: 
 var $137;
 var $_ph;
 var $__sym_curr_char_sroa_0_0_ph;
 var $and_i_i_i2598611=$_ph&1;
 var $tobool_i_i_i2599612=(($and_i_i_i2598611<<24)>>24)==0;
 var $arrayidx_i_i_i1890_582613=($tobool_i_i_i2599612?$arrayidx_i_i_i1890:$137);
 var $conv_i_i22_i2626614=($_ph&255);
 var $and_i_i23_i2627615=$conv_i_i22_i2626614&1;
 var $tobool_i_i24_i2628616=($and_i_i23_i2627615|0)==0;
 var $138=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i2646118617=$conv_i_i22_i2626614>>>1;
 var $cond_i34_i2648618=($tobool_i_i24_i2628616?$shr_i_i_i2646118617:$138);
 var $add_ptr_i2649619=(($arrayidx_i_i_i1890_582613+$cond_i34_i2648618)|0);
 var $lnot_i2560620=($__sym_curr_char_sroa_0_0_ph|0)==($add_ptr_i2649619|0);
 if($lnot_i2560620){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0_ph;label=152;break;}else{var $139=$13;var $__sym_curr_char_sroa_0_0621=$__sym_curr_char_sroa_0_0_ph;label=129;break;}
 case 129: 
 var $__sym_curr_char_sroa_0_0621;
 var $139;
 var $140=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i2399=($140|0)==0;
 if($tobool_i_i_i2399){var $145=0;label=135;break;}else{label=130;break;}
 case 130: 
 var $__ninp__i_i_i_i2402=(($140+12)|0);
 var $141=HEAP32[(($__ninp__i_i_i_i2402)>>2)];
 var $__einp__i_i_i_i2403=(($140+16)|0);
 var $142=HEAP32[(($__einp__i_i_i_i2403)>>2)];
 var $cmp_i_i_i_i2404=($141|0)==($142|0);
 if($cmp_i_i_i_i2404){label=131;break;}else{var $145=$140;label=135;break;}
 case 131: 
 var $143=$140;
 var $vtable_i_i_i_i2406=HEAP32[(($143)>>2)];
 var $vfn_i_i_i_i2407=(($vtable_i_i_i_i2406+36)|0);
 var $144=HEAP32[(($vfn_i_i_i_i2407)>>2)];
 var $call_i_i_i_i2445=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]($140) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=22;break; }
 case 132: 
 var $cmp_i7_i_i_i2412=($call_i_i_i_i2445|0)==-1;
 if($cmp_i7_i_i_i2412){label=134;break;}else{label=133;break;}
 case 133: 
 var $_pre547=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $145=$_pre547;label=135;break;
 case 134: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $145=0;label=135;break;
 case 135: 
 var $145;
 var $cmp_i_i_i2417=($145|0)==0;
 var $tobool_i12_i_i2421=($139|0)==0;
 if($tobool_i12_i_i2421){label=141;break;}else{label=136;break;}
 case 136: 
 var $__ninp__i_i15_i_i2425=(($139+12)|0);
 var $146=HEAP32[(($__ninp__i_i15_i_i2425)>>2)];
 var $__einp__i_i16_i_i2426=(($139+16)|0);
 var $147=HEAP32[(($__einp__i_i16_i_i2426)>>2)];
 var $cmp_i_i17_i_i2427=($146|0)==($147|0);
 if($cmp_i_i17_i_i2427){label=138;break;}else{label=137;break;}
 case 137: 
 if($cmp_i_i_i2417){var $150=$139;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0621;label=152;break;}
 case 138: 
 var $148=$139;
 var $vtable_i_i19_i_i2429=HEAP32[(($148)>>2)];
 var $vfn_i_i20_i_i2430=(($vtable_i_i19_i_i2429+36)|0);
 var $149=HEAP32[(($vfn_i_i20_i_i2430)>>2)];
 var $call_i_i21_i_i2447=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$149]($139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=22;break; }
 case 139: 
 var $cmp_i7_i26_i_i2435=($call_i_i21_i_i2447|0)==-1;
 if($cmp_i7_i26_i_i2435){label=140;break;}else{label=142;break;}
 case 140: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=141;break;
 case 141: 
 if($cmp_i_i_i2417){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0621;label=152;break;}else{var $150=0;label=143;break;}
 case 142: 
 if($cmp_i_i_i2417){var $150=$139;label=143;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0621;label=152;break;}
 case 143: 
 var $150;
 var $151=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i2326=(($151+12)|0);
 var $152=HEAP32[(($__ninp__i_i2326)>>2)];
 var $__einp__i_i2327=(($151+16)|0);
 var $153=HEAP32[(($__einp__i_i2327)>>2)];
 var $cmp_i_i2328=($152|0)==($153|0);
 if($cmp_i_i2328){label=144;break;}else{label=146;break;}
 case 144: 
 var $154=$151;
 var $vtable_i_i2329=HEAP32[(($154)>>2)];
 var $vfn_i_i2330=(($vtable_i_i2329+36)|0);
 var $155=HEAP32[(($vfn_i_i2330)>>2)];
 var $call_i_i2337=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=22;break; }
 case 145: 
 var $extract_t120=(($call_i_i2337)&255);
 var $retval_i_i2320_0_off0=$extract_t120;label=147;break;
 case 146: 
 var $156=HEAP8[($152)];
 var $retval_i_i2320_0_off0=$156;label=147;break;
 case 147: 
 var $retval_i_i2320_0_off0;
 var $157=HEAP8[($__sym_curr_char_sroa_0_0621)];
 var $cmp188=(($retval_i_i2320_0_off0<<24)>>24)==(($157<<24)>>24);
 if($cmp188){label=148;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0621;label=152;break;}
 case 148: 
 var $158=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i2298=(($158+12)|0);
 var $159=HEAP32[(($__ninp__i_i2298)>>2)];
 var $__einp__i_i2299=(($158+16)|0);
 var $160=HEAP32[(($__einp__i_i2299)>>2)];
 var $cmp_i_i2300=($159|0)==($160|0);
 if($cmp_i_i2300){label=149;break;}else{label=150;break;}
 case 149: 
 var $161=$158;
 var $vtable_i_i2301=HEAP32[(($161)>>2)];
 var $vfn_i_i2302=(($vtable_i_i2301+40)|0);
 var $162=HEAP32[(($vfn_i_i2302)>>2)];
 var $call_i_i2309=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($158) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=22;break; }
 case 150: 
 var $incdec_ptr_i_i2305=(($159+1)|0);
 HEAP32[(($__ninp__i_i2298)>>2)]=$incdec_ptr_i_i2305;
 label=151;break;
 case 151: 
 var $incdec_ptr_i2290=(($__sym_curr_char_sroa_0_0621+1)|0);
 var $_pre542=HEAP8[($__size__i_i_i1871)];
 var $and_i_i_i2598=$_pre542&1;
 var $tobool_i_i_i2599=(($and_i_i_i2598<<24)>>24)==0;
 var $163=HEAP32[(($__data__i21_i_i1977)>>2)];
 var $arrayidx_i_i_i1890_582=($tobool_i_i_i2599?$arrayidx_i_i_i1890:$163);
 var $conv_i_i22_i2626=($_pre542&255);
 var $and_i_i23_i2627=$conv_i_i22_i2626&1;
 var $tobool_i_i24_i2628=($and_i_i23_i2627|0)==0;
 var $164=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i2646118=$conv_i_i22_i2626>>>1;
 var $cond_i34_i2648=($tobool_i_i24_i2628?$shr_i_i_i2646118:$164);
 var $add_ptr_i2649=(($arrayidx_i_i_i1890_582+$cond_i34_i2648)|0);
 var $lnot_i2560=($incdec_ptr_i2290|0)==($add_ptr_i2649|0);
 if($lnot_i2560){var $__sym_curr_char_sroa_0_0_lcssa=$incdec_ptr_i2290;label=152;break;}else{var $139=$150;var $__sym_curr_char_sroa_0_0621=$incdec_ptr_i2290;label=129;break;}
 case 152: 
 var $__sym_curr_char_sroa_0_0_lcssa;
 if($cmp128316){label=153;break;}else{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}
 case 153: 
 var $165=HEAP8[($__size__i_i_i1871)];
 var $and_i_i_i2231=$165&1;
 var $tobool_i_i_i2232=(($and_i_i_i2231<<24)>>24)==0;
 var $166=HEAP32[(($__data__i21_i_i1977)>>2)];
 var $arrayidx_i_i_i1890_583=($tobool_i_i_i2232?$arrayidx_i_i_i1890:$166);
 var $conv_i_i22_i2259=($165&255);
 var $and_i_i23_i2260=$conv_i_i22_i2259&1;
 var $tobool_i_i24_i2261=($and_i_i23_i2260|0)==0;
 var $167=HEAP32[(($__size__i23_i_i)>>2)];
 var $shr_i_i_i2279119=$conv_i_i22_i2259>>>1;
 var $cond_i34_i2281=($tobool_i_i24_i2261?$shr_i_i_i2279119:$167);
 var $add_ptr_i2282=(($arrayidx_i_i_i1890_583+$cond_i34_i2281)|0);
 var $lnot_i2193=($__sym_curr_char_sroa_0_0_lcssa|0)==($add_ptr_i2282|0);
 if($lnot_i2193){var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr276465;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261282462;var $282=$1;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271297459;var $__we304=$__we303456;label=273;break;}else{label=154;break;}
 case 154: 
 var $168=HEAP32[(($__err)>>2)];
 var $or200=$168|4;
 HEAP32[(($__err)>>2)]=$or200;
 var $retval_0=0;var $313=$1;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297459;label=308;break;
 case 155: 
 var $__we308;
 var $__gb_sroa_1_4_load271295;
 var $169;
 var $__gb_sroa_0_0_load261285;
 var $add_ptr279;
 var $__ng_0;
 var $170=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i2058=($170|0)==0;
 if($tobool_i_i_i2058){var $175=0;label=161;break;}else{label=156;break;}
 case 156: 
 var $__ninp__i_i_i_i2061=(($170+12)|0);
 var $171=HEAP32[(($__ninp__i_i_i_i2061)>>2)];
 var $__einp__i_i_i_i2062=(($170+16)|0);
 var $172=HEAP32[(($__einp__i_i_i_i2062)>>2)];
 var $cmp_i_i_i_i2063=($171|0)==($172|0);
 if($cmp_i_i_i_i2063){label=157;break;}else{var $175=$170;label=161;break;}
 case 157: 
 var $173=$170;
 var $vtable_i_i_i_i2065=HEAP32[(($173)>>2)];
 var $vfn_i_i_i_i2066=(($vtable_i_i_i_i2065+36)|0);
 var $174=HEAP32[(($vfn_i_i_i_i2066)>>2)];
 var $call_i_i_i_i2104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 158: 
 var $cmp_i7_i_i_i2071=($call_i_i_i_i2104|0)==-1;
 if($cmp_i7_i_i_i2071){label=160;break;}else{label=159;break;}
 case 159: 
 var $_pre548=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $175=$_pre548;label=161;break;
 case 160: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $175=0;label=161;break;
 case 161: 
 var $175;
 var $cmp_i_i_i2076=($175|0)==0;
 var $176=HEAP32[(($__sbuf__i11_i_i649)>>2)];
 var $tobool_i12_i_i2080=($176|0)==0;
 if($tobool_i12_i_i2080){label=167;break;}else{label=162;break;}
 case 162: 
 var $__ninp__i_i15_i_i2084=(($176+12)|0);
 var $177=HEAP32[(($__ninp__i_i15_i_i2084)>>2)];
 var $__einp__i_i16_i_i2085=(($176+16)|0);
 var $178=HEAP32[(($__einp__i_i16_i_i2085)>>2)];
 var $cmp_i_i17_i_i2086=($177|0)==($178|0);
 if($cmp_i_i17_i_i2086){label=164;break;}else{label=163;break;}
 case 163: 
 if($cmp_i_i_i2076){label=169;break;}else{label=199;break;}
 case 164: 
 var $179=$176;
 var $vtable_i_i19_i_i2088=HEAP32[(($179)>>2)];
 var $vfn_i_i20_i_i2089=(($vtable_i_i19_i_i2088+36)|0);
 var $180=HEAP32[(($vfn_i_i20_i_i2089)>>2)];
 var $call_i_i21_i_i2106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$180]($176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 165: 
 var $cmp_i7_i26_i_i2094=($call_i_i21_i_i2106|0)==-1;
 if($cmp_i7_i26_i_i2094){label=166;break;}else{label=168;break;}
 case 166: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=167;break;
 case 167: 
 if($cmp_i_i_i2076){label=199;break;}else{label=169;break;}
 case 168: 
 if($cmp_i_i_i2076){label=169;break;}else{label=199;break;}
 case 169: 
 var $181=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i2024=(($181+12)|0);
 var $182=HEAP32[(($__ninp__i_i2024)>>2)];
 var $__einp__i_i2025=(($181+16)|0);
 var $183=HEAP32[(($__einp__i_i2025)>>2)];
 var $cmp_i_i2026=($182|0)==($183|0);
 if($cmp_i_i2026){label=170;break;}else{label=172;break;}
 case 170: 
 var $184=$181;
 var $vtable_i_i2027=HEAP32[(($184)>>2)];
 var $vfn_i_i2028=(($vtable_i_i2027+36)|0);
 var $185=HEAP32[(($vfn_i_i2028)>>2)];
 var $call_i_i2035=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($181) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=171;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 171: 
 var $extract_t115=(($call_i_i2035)&255);
 var $retval_i_i2018_0_off0=$extract_t115;label=173;break;
 case 172: 
 var $186=HEAP8[($182)];
 var $retval_i_i2018_0_off0=$186;label=173;break;
 case 173: 
 var $retval_i_i2018_0_off0;
 var $conv_i1996=(($retval_i_i2018_0_off0<<24)>>24);
 var $call_i2009=(function() { try { __THREW__ = 0; return _isascii($conv_i1996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=174;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 174: 
 var $tobool_i1997=($call_i2009|0)==0;
 if($tobool_i1997){label=187;break;}else{label=175;break;}
 case 175: 
 var $187=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i2000=(($187+($conv_i1996<<1))|0);
 var $188=HEAP16[(($arrayidx_i2000)>>1)];
 var $and_i2003=$188&2048;
 var $cmp_i2004=(($and_i2003<<16)>>16)==0;
 if($cmp_i2004){label=187;break;}else{label=176;break;}
 case 176: 
 var $189=HEAP32[(($__wn)>>2)];
 var $cmp215=($189|0)==($__we308|0);
 if($cmp215){label=177;break;}else{var $__we310=$__we308;var $196=$189;label=186;break;}
 case 177: 
 var $190=HEAP32[(($__second__i_i_i_i)>>2)];
 var $cmp_i155=($190|0)!=((446)|0);
 var $191=HEAP32[(($__first__i_i_i570)>>2)];
 var $sub_ptr_lhs_cast_i156=$__we308;
 var $sub_ptr_rhs_cast_i157=$191;
 var $sub_ptr_sub_i158=((($sub_ptr_lhs_cast_i156)-($sub_ptr_rhs_cast_i157))|0);
 var $cmp3_i=($sub_ptr_sub_i158>>>0)<2147483647;
 var $mul4_i=$sub_ptr_sub_i158<<1;
 var $cond_i159=($cmp3_i?$mul4_i:-1);
 var $__i=($cmp_i155?$191:0);
 var $call15_i=_realloc($__i,$cond_i159);
 var $cmp16_i=($call15_i|0)==0;
 if($cmp16_i){label=178;break;}else{label=179;break;}
 case 178: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=179;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 179: 
 if($cmp_i155){label=180;break;}else{label=181;break;}
 case 180: 
 HEAP32[(($__first__i_i_i570)>>2)]=$call15_i;
 var $194=$call15_i;label=185;break;
 case 181: 
 var $_pr_i=HEAP32[(($__first__i_i_i570)>>2)];
 HEAP32[(($__first__i_i_i570)>>2)]=$call15_i;
 var $tobool_i_i_i160=($_pr_i|0)==0;
 if($tobool_i_i_i160){var $194=$call15_i;label=185;break;}else{label=182;break;}
 case 182: 
 var $192=HEAP32[(($__second__i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$192]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { label=184;break; }
 case 183: 
 var $_pre_i=HEAP32[(($__first__i_i_i570)>>2)];
 var $194=$_pre_i;label=185;break;
 case 184: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1,0); var $193$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 185: 
 var $194;
 HEAP32[(($__second__i_i_i_i)>>2)]=234;
 var $add_ptr_i163=(($194+$sub_ptr_sub_i158)|0);
 HEAP32[(($__wn)>>2)]=$add_ptr_i163;
 var $195=HEAP32[(($__first__i_i_i570)>>2)];
 var $add_ptr26_i=(($195+$cond_i159)|0);
 var $__we310=$add_ptr26_i;var $196=$add_ptr_i163;label=186;break;
 case 186: 
 var $196;
 var $__we310;
 var $incdec_ptr=(($196+1)|0);
 HEAP32[(($__wn)>>2)]=$incdec_ptr;
 HEAP8[($196)]=$retval_i_i2018_0_off0;
 var $inc=((($__ng_0)+(1))|0);
 var $__ng_1=$inc;var $add_ptr280=$add_ptr279;var $__gb_sroa_0_0_load261286=$__gb_sroa_0_0_load261285;var $202=$169;var $__gb_sroa_1_4_load271293=$__gb_sroa_1_4_load271295;var $__we309=$__we310;label=196;break;
 case 187: 
 var $197=HEAP8[($__size__i_i1919)];
 var $conv_i_i1920=($197&255);
 var $and_i_i1921=$conv_i_i1920&1;
 var $tobool_i_i1922=($and_i_i1921|0)==0;
 var $198=HEAP32[(($__size__i23_i1929)>>2)];
 var $shr_i_i1939117=$conv_i_i1920>>>1;
 var $cond_i1941=($tobool_i_i1922?$shr_i_i1939117:$198);
 var $cmp221=($cond_i1941|0)==0;
 var $cmp223=($__ng_0|0)==0;
 var $or_cond153=$cmp221|$cmp223;
 if($or_cond153){label=199;break;}else{label=188;break;}
 case 188: 
 var $199=HEAP8[($__ts)];
 var $cmp227=(($retval_i_i2018_0_off0<<24)>>24)==(($199<<24)>>24);
 if($cmp227){label=189;break;}else{label=199;break;}
 case 189: 
 var $cmp229=($__gb_sroa_0_0_load261285|0)==($add_ptr279|0);
 if($cmp229){label=190;break;}else{var $add_ptr281=$add_ptr279;var $__gb_sroa_0_0_load261287=$__gb_sroa_0_0_load261285;var $201=$169;var $__gb_sroa_1_4_load271294=$__gb_sroa_1_4_load271295;label=195;break;}
 case 190: 
 var $cmp_i165=($__gb_sroa_1_4_load271295|0)==((446)|0);
 var $sub_ptr_lhs_cast_i166=$__gb_sroa_0_0_load261285;
 var $sub_ptr_rhs_cast_i167=$169;
 var $sub_ptr_sub_i168=((($sub_ptr_lhs_cast_i166)-($sub_ptr_rhs_cast_i167))|0);
 var $cmp3_i169=($sub_ptr_sub_i168>>>0)<2147483647;
 var $mul4_i170=$sub_ptr_sub_i168<<1;
 var $cond_i171=($cmp3_i169?$mul4_i170:-1);
 var $sub_ptr_div10_i=$sub_ptr_sub_i168>>2;
 if($cmp_i165){var $cond15_i=0;label=192;break;}else{label=191;break;}
 case 191: 
 var $phitmp_i=$169;
 var $cond15_i=$phitmp_i;label=192;break;
 case 192: 
 var $cond15_i;
 var $call16_i=_realloc($cond15_i,$cond_i171);
 var $200=$call16_i;
 var $cmp17_i=($call16_i|0)==0;
 if($cmp17_i){label=193;break;}else{label=194;break;}
 case 193: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { var $_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271295;label=19;break; }
 case 194: 
 var $div24_i=$cond_i171>>>2;
 var $add_ptr_i181=(($200+($sub_ptr_div10_i<<2))|0);
 var $add_ptr27_i=(($200+($div24_i<<2))|0);
 var $add_ptr281=$add_ptr27_i;var $__gb_sroa_0_0_load261287=$add_ptr_i181;var $201=$200;var $__gb_sroa_1_4_load271294=234;label=195;break;
 case 195: 
 var $__gb_sroa_1_4_load271294;
 var $201;
 var $__gb_sroa_0_0_load261287;
 var $add_ptr281;
 var $incdec_ptr233=(($__gb_sroa_0_0_load261287+4)|0);
 HEAP32[(($__gb_sroa_0_0_load261287)>>2)]=$__ng_0;
 var $__ng_1=0;var $add_ptr280=$add_ptr281;var $__gb_sroa_0_0_load261286=$incdec_ptr233;var $202=$201;var $__gb_sroa_1_4_load271293=$__gb_sroa_1_4_load271294;var $__we309=$__we308;label=196;break;
 case 196: 
 var $__we309;
 var $__gb_sroa_1_4_load271293;
 var $202;
 var $__gb_sroa_0_0_load261286;
 var $add_ptr280;
 var $__ng_1;
 var $203=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1837=(($203+12)|0);
 var $204=HEAP32[(($__ninp__i_i1837)>>2)];
 var $__einp__i_i1838=(($203+16)|0);
 var $205=HEAP32[(($__einp__i_i1838)>>2)];
 var $cmp_i_i1839=($204|0)==($205|0);
 if($cmp_i_i1839){label=197;break;}else{label=198;break;}
 case 197: 
 var $206=$203;
 var $vtable_i_i1840=HEAP32[(($206)>>2)];
 var $vfn_i_i1841=(($vtable_i_i1840+40)|0);
 var $207=HEAP32[(($vfn_i_i1841)>>2)];
 var $call_i_i1848=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$207]($203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $add_ptr279=$add_ptr280;var $__gb_sroa_0_0_load261285=$__gb_sroa_0_0_load261286;var $169=$202;var $__gb_sroa_1_4_load271295=$__gb_sroa_1_4_load271293;var $__we308=$__we309;label=155;break; } else { var $_ph_ph=$202;var $__gb_sroa_1_4_load271290_ph_ph=$__gb_sroa_1_4_load271293;label=19;break; }
 case 198: 
 var $incdec_ptr_i_i1844=(($204+1)|0);
 HEAP32[(($__ninp__i_i1837)>>2)]=$incdec_ptr_i_i1844;
 var $__ng_0=$__ng_1;var $add_ptr279=$add_ptr280;var $__gb_sroa_0_0_load261285=$__gb_sroa_0_0_load261286;var $169=$202;var $__gb_sroa_1_4_load271295=$__gb_sroa_1_4_load271293;var $__we308=$__we309;label=155;break;
 case 199: 
 var $cmp240=($169|0)==($__gb_sroa_0_0_load261285|0);
 var $cmp242=($__ng_0|0)==0;
 var $or_cond154=$cmp240|$cmp242;
 if($or_cond154){var $add_ptr278=$add_ptr279;var $__gb_sroa_0_0_load261284=$__gb_sroa_0_0_load261285;var $210=$169;var $__gb_sroa_1_4_load271292=$__gb_sroa_1_4_load271295;label=207;break;}else{label=200;break;}
 case 200: 
 var $cmp244=($__gb_sroa_0_0_load261285|0)==($add_ptr279|0);
 if($cmp244){label=201;break;}else{var $add_ptr275=$add_ptr279;var $__gb_sroa_0_0_load261288=$__gb_sroa_0_0_load261285;var $209=$169;var $__gb_sroa_1_4_load271291=$__gb_sroa_1_4_load271295;label=206;break;}
 case 201: 
 var $cmp_i184=($__gb_sroa_1_4_load271295|0)==((446)|0);
 var $sub_ptr_lhs_cast_i186=$__gb_sroa_0_0_load261285;
 var $sub_ptr_rhs_cast_i187=$169;
 var $sub_ptr_sub_i188=((($sub_ptr_lhs_cast_i186)-($sub_ptr_rhs_cast_i187))|0);
 var $cmp3_i189=($sub_ptr_sub_i188>>>0)<2147483647;
 var $mul4_i190=$sub_ptr_sub_i188<<1;
 var $cond_i191=($cmp3_i189?$mul4_i190:-1);
 var $sub_ptr_div10_i194=$sub_ptr_sub_i188>>2;
 if($cmp_i184){var $cond15_i197=0;label=203;break;}else{label=202;break;}
 case 202: 
 var $phitmp_i195=$169;
 var $cond15_i197=$phitmp_i195;label=203;break;
 case 203: 
 var $cond15_i197;
 var $call16_i198=_realloc($cond15_i197,$cond_i191);
 var $208=$call16_i198;
 var $cmp17_i199=($call16_i198|0)==0;
 if($cmp17_i199){label=204;break;}else{label=205;break;}
 case 204: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$169;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271295;label=24;break; }
 case 205: 
 var $div24_i211=$cond_i191>>>2;
 var $add_ptr_i212=(($208+($sub_ptr_div10_i194<<2))|0);
 var $add_ptr27_i213=(($208+($div24_i211<<2))|0);
 var $add_ptr275=$add_ptr27_i213;var $__gb_sroa_0_0_load261288=$add_ptr_i212;var $209=$208;var $__gb_sroa_1_4_load271291=234;label=206;break;
 case 206: 
 var $__gb_sroa_1_4_load271291;
 var $209;
 var $__gb_sroa_0_0_load261288;
 var $add_ptr275;
 var $incdec_ptr248=(($__gb_sroa_0_0_load261288+4)|0);
 HEAP32[(($__gb_sroa_0_0_load261288)>>2)]=$__ng_0;
 var $add_ptr278=$add_ptr275;var $__gb_sroa_0_0_load261284=$incdec_ptr248;var $210=$209;var $__gb_sroa_1_4_load271292=$__gb_sroa_1_4_load271291;label=207;break;
 case 207: 
 var $__gb_sroa_1_4_load271292;
 var $210;
 var $__gb_sroa_0_0_load261284;
 var $add_ptr278;
 var $211=HEAP32[(($__fd)>>2)];
 var $cmp250=($211|0)>0;
 if($cmp250){label=208;break;}else{var $__we305=$__we308;label=271;break;}
 case 208: 
 var $212=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i1585=($212|0)==0;
 if($tobool_i_i_i1585){var $217=0;label=214;break;}else{label=209;break;}
 case 209: 
 var $__ninp__i_i_i_i1588=(($212+12)|0);
 var $213=HEAP32[(($__ninp__i_i_i_i1588)>>2)];
 var $__einp__i_i_i_i1589=(($212+16)|0);
 var $214=HEAP32[(($__einp__i_i_i_i1589)>>2)];
 var $cmp_i_i_i_i1590=($213|0)==($214|0);
 if($cmp_i_i_i_i1590){label=210;break;}else{var $217=$212;label=214;break;}
 case 210: 
 var $215=$212;
 var $vtable_i_i_i_i1592=HEAP32[(($215)>>2)];
 var $vfn_i_i_i_i1593=(($vtable_i_i_i_i1592+36)|0);
 var $216=HEAP32[(($vfn_i_i_i_i1593)>>2)];
 var $call_i_i_i_i1630=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$216]($212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$210;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271292;label=24;break; }
 case 211: 
 var $cmp_i7_i_i_i1598=($call_i_i_i_i1630|0)==-1;
 if($cmp_i7_i_i_i1598){label=213;break;}else{label=212;break;}
 case 212: 
 var $_pre549=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $217=$_pre549;label=214;break;
 case 213: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $217=0;label=214;break;
 case 214: 
 var $217;
 var $cmp_i_i_i1603=($217|0)==0;
 var $218=HEAP32[(($__sbuf__i11_i_i649)>>2)];
 var $tobool_i12_i_i1607=($218|0)==0;
 if($tobool_i12_i_i1607){label=220;break;}else{label=215;break;}
 case 215: 
 var $__ninp__i_i15_i_i1611=(($218+12)|0);
 var $219=HEAP32[(($__ninp__i_i15_i_i1611)>>2)];
 var $__einp__i_i16_i_i1612=(($218+16)|0);
 var $220=HEAP32[(($__einp__i_i16_i_i1612)>>2)];
 var $cmp_i_i17_i_i1613=($219|0)==($220|0);
 if($cmp_i_i17_i_i1613){label=217;break;}else{label=216;break;}
 case 216: 
 if($cmp_i_i_i1603){var $223=$218;label=222;break;}else{label=227;break;}
 case 217: 
 var $221=$218;
 var $vtable_i_i19_i_i1615=HEAP32[(($221)>>2)];
 var $vfn_i_i20_i_i1616=(($vtable_i_i19_i_i1615+36)|0);
 var $222=HEAP32[(($vfn_i_i20_i_i1616)>>2)];
 var $call_i_i21_i_i1632=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$222]($218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=218;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$210;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271292;label=24;break; }
 case 218: 
 var $cmp_i7_i26_i_i1621=($call_i_i21_i_i1632|0)==-1;
 if($cmp_i7_i26_i_i1621){label=219;break;}else{label=221;break;}
 case 219: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=220;break;
 case 220: 
 if($cmp_i_i_i1603){label=227;break;}else{var $223=0;label=222;break;}
 case 221: 
 if($cmp_i_i_i1603){var $223=$218;label=222;break;}else{label=227;break;}
 case 222: 
 var $223;
 var $224=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1487=(($224+12)|0);
 var $225=HEAP32[(($__ninp__i_i1487)>>2)];
 var $__einp__i_i1488=(($224+16)|0);
 var $226=HEAP32[(($__einp__i_i1488)>>2)];
 var $cmp_i_i1489=($225|0)==($226|0);
 if($cmp_i_i1489){label=223;break;}else{label=225;break;}
 case 223: 
 var $227=$224;
 var $vtable_i_i1490=HEAP32[(($227)>>2)];
 var $vfn_i_i1491=(($vtable_i_i1490+36)|0);
 var $228=HEAP32[(($vfn_i_i1491)>>2)];
 var $call_i_i1498=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$228]($224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=224;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$210;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271292;label=24;break; }
 case 224: 
 var $extract_t109=(($call_i_i1498)&255);
 var $retval_i_i1481_0_off0=$extract_t109;label=226;break;
 case 225: 
 var $229=HEAP8[($225)];
 var $retval_i_i1481_0_off0=$229;label=226;break;
 case 226: 
 var $retval_i_i1481_0_off0;
 var $230=HEAP8[($__dp)];
 var $cmp259=(($retval_i_i1481_0_off0<<24)>>24)==(($230<<24)>>24);
 if($cmp259){label=228;break;}else{label=227;break;}
 case 227: 
 var $231=HEAP32[(($__err)>>2)];
 var $or261=$231|4;
 HEAP32[(($__err)>>2)]=$or261;
 var $retval_0=0;var $313=$210;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271292;label=308;break;
 case 228: 
 var $232=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1406=(($232+12)|0);
 var $233=HEAP32[(($__ninp__i_i1406)>>2)];
 var $__einp__i_i1407=(($232+16)|0);
 var $234=HEAP32[(($__einp__i_i1407)>>2)];
 var $cmp_i_i1408=($233|0)==($234|0);
 if($cmp_i_i1408){label=229;break;}else{label=230;break;}
 case 229: 
 var $235=$232;
 var $vtable_i_i1409=HEAP32[(($235)>>2)];
 var $vfn_i_i1410=(($vtable_i_i1409+40)|0);
 var $236=HEAP32[(($vfn_i_i1410)>>2)];
 var $call_i_i1417=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we307363=$__we308;var $237=$223;label=231;break; } else { var $_ph_ph334_ph_ph_ph_ph_ph=$210;var $__gb_sroa_1_4_load271290_ph_ph333_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load271292;label=24;break; }
 case 230: 
 var $incdec_ptr_i_i1413=(($233+1)|0);
 HEAP32[(($__ninp__i_i1406)>>2)]=$incdec_ptr_i_i1413;
 var $__we307363=$__we308;var $237=$223;label=231;break;
 case 231: 
 var $237;
 var $__we307363;
 var $238=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i1223=($238|0)==0;
 if($tobool_i_i_i1223){var $243=0;label=237;break;}else{label=232;break;}
 case 232: 
 var $__ninp__i_i_i_i1226=(($238+12)|0);
 var $239=HEAP32[(($__ninp__i_i_i_i1226)>>2)];
 var $__einp__i_i_i_i1227=(($238+16)|0);
 var $240=HEAP32[(($__einp__i_i_i_i1227)>>2)];
 var $cmp_i_i_i_i1228=($239|0)==($240|0);
 if($cmp_i_i_i_i1228){label=233;break;}else{var $243=$238;label=237;break;}
 case 233: 
 var $241=$238;
 var $vtable_i_i_i_i1230=HEAP32[(($241)>>2)];
 var $vfn_i_i_i_i1231=(($vtable_i_i_i_i1230+36)|0);
 var $242=HEAP32[(($vfn_i_i_i_i1231)>>2)];
 var $call_i_i_i_i1268=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$242]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=20;break; }
 case 234: 
 var $cmp_i7_i_i_i1236=($call_i_i_i_i1268|0)==-1;
 if($cmp_i7_i_i_i1236){label=236;break;}else{label=235;break;}
 case 235: 
 var $_pre550=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $243=$_pre550;label=237;break;
 case 236: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $243=0;label=237;break;
 case 237: 
 var $243;
 var $cmp_i_i_i1241=($243|0)==0;
 var $tobool_i12_i_i1245=($237|0)==0;
 if($tobool_i12_i_i1245){label=243;break;}else{label=238;break;}
 case 238: 
 var $__ninp__i_i15_i_i1249=(($237+12)|0);
 var $244=HEAP32[(($__ninp__i_i15_i_i1249)>>2)];
 var $__einp__i_i16_i_i1250=(($237+16)|0);
 var $245=HEAP32[(($__einp__i_i16_i_i1250)>>2)];
 var $cmp_i_i17_i_i1251=($244|0)==($245|0);
 if($cmp_i_i17_i_i1251){label=240;break;}else{label=239;break;}
 case 239: 
 if($cmp_i_i_i1241){var $248=$237;label=245;break;}else{label=252;break;}
 case 240: 
 var $246=$237;
 var $vtable_i_i19_i_i1253=HEAP32[(($246)>>2)];
 var $vfn_i_i20_i_i1254=(($vtable_i_i19_i_i1253+36)|0);
 var $247=HEAP32[(($vfn_i_i20_i_i1254)>>2)];
 var $call_i_i21_i_i1270=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$247]($237) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=20;break; }
 case 241: 
 var $cmp_i7_i26_i_i1259=($call_i_i21_i_i1270|0)==-1;
 if($cmp_i7_i26_i_i1259){label=242;break;}else{label=244;break;}
 case 242: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=243;break;
 case 243: 
 if($cmp_i_i_i1241){label=252;break;}else{var $248=0;label=245;break;}
 case 244: 
 if($cmp_i_i_i1241){var $248=$237;label=245;break;}else{label=252;break;}
 case 245: 
 var $248;
 var $249=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i1154=(($249+12)|0);
 var $250=HEAP32[(($__ninp__i_i1154)>>2)];
 var $__einp__i_i1155=(($249+16)|0);
 var $251=HEAP32[(($__einp__i_i1155)>>2)];
 var $cmp_i_i1156=($250|0)==($251|0);
 if($cmp_i_i1156){label=246;break;}else{label=248;break;}
 case 246: 
 var $252=$249;
 var $vtable_i_i1157=HEAP32[(($252)>>2)];
 var $vfn_i_i1158=(($vtable_i_i1157+36)|0);
 var $253=HEAP32[(($vfn_i_i1158)>>2)];
 var $call_i_i1165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$253]($249) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=20;break; }
 case 247: 
 var $extract_t111=(($call_i_i1165)&255);
 var $retval_i_i1148_0_off0=$extract_t111;label=249;break;
 case 248: 
 var $254=HEAP8[($250)];
 var $retval_i_i1148_0_off0=$254;label=249;break;
 case 249: 
 var $retval_i_i1148_0_off0;
 var $conv_i1091=(($retval_i_i1148_0_off0<<24)>>24);
 var $call_i1104=(function() { try { __THREW__ = 0; return _isascii($conv_i1091) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=20;break; }
 case 250: 
 var $tobool_i1092=($call_i1104|0)==0;
 if($tobool_i1092){label=252;break;}else{label=251;break;}
 case 251: 
 var $255=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i1095=(($255+($conv_i1091<<1))|0);
 var $256=HEAP16[(($arrayidx_i1095)>>1)];
 var $and_i1098=$256&2048;
 var $cmp_i1099=(($and_i1098<<16)>>16)==0;
 if($cmp_i1099){label=252;break;}else{label=253;break;}
 case 252: 
 var $257=HEAP32[(($__err)>>2)];
 var $or276=$257|4;
 HEAP32[(($__err)>>2)]=$or276;
 var $retval_0=0;var $313=$210;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271292;label=308;break;
 case 253: 
 var $258=HEAP32[(($__wn)>>2)];
 var $cmp278=($258|0)==($__we307363|0);
 if($cmp278){label=254;break;}else{var $__we306=$__we307363;var $265=$258;label=263;break;}
 case 254: 
 var $259=HEAP32[(($__second__i_i_i_i)>>2)];
 var $cmp_i217=($259|0)!=((446)|0);
 var $260=HEAP32[(($__first__i_i_i570)>>2)];
 var $sub_ptr_lhs_cast_i219=$__we307363;
 var $sub_ptr_rhs_cast_i220=$260;
 var $sub_ptr_sub_i221=((($sub_ptr_lhs_cast_i219)-($sub_ptr_rhs_cast_i220))|0);
 var $cmp3_i222=($sub_ptr_sub_i221>>>0)<2147483647;
 var $mul4_i223=$sub_ptr_sub_i221<<1;
 var $cond_i224=($cmp3_i222?$mul4_i223:-1);
 var $__i227=($cmp_i217?$260:0);
 var $call15_i228=_realloc($__i227,$cond_i224);
 var $cmp16_i229=($call15_i228|0)==0;
 if($cmp16_i229){label=255;break;}else{label=256;break;}
 case 255: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=256;break; } else { label=20;break; }
 case 256: 
 if($cmp_i217){label=257;break;}else{label=258;break;}
 case 257: 
 HEAP32[(($__first__i_i_i570)>>2)]=$call15_i228;
 var $263=$call15_i228;label=262;break;
 case 258: 
 var $_pr_i233=HEAP32[(($__first__i_i_i570)>>2)];
 HEAP32[(($__first__i_i_i570)>>2)]=$call15_i228;
 var $tobool_i_i_i234=($_pr_i233|0)==0;
 if($tobool_i_i_i234){var $263=$call15_i228;label=262;break;}else{label=259;break;}
 case 259: 
 var $261=HEAP32[(($__second__i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$261]($_pr_i233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=260;break; } else { label=261;break; }
 case 260: 
 var $_pre_i237=HEAP32[(($__first__i_i_i570)>>2)];
 var $263=$_pre_i237;label=262;break;
 case 261: 
 var $262$0 = ___cxa_find_matching_catch(-1, -1,0); var $262$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 262: 
 var $263;
 HEAP32[(($__second__i_i_i_i)>>2)]=234;
 var $add_ptr_i240=(($263+$sub_ptr_sub_i221)|0);
 HEAP32[(($__wn)>>2)]=$add_ptr_i240;
 var $264=HEAP32[(($__first__i_i_i570)>>2)];
 var $add_ptr26_i241=(($264+$cond_i224)|0);
 var $__we306=$add_ptr26_i241;var $265=$add_ptr_i240;label=263;break;
 case 263: 
 var $265;
 var $__we306;
 var $266=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i992=(($266+12)|0);
 var $267=HEAP32[(($__ninp__i_i992)>>2)];
 var $__einp__i_i993=(($266+16)|0);
 var $268=HEAP32[(($__einp__i_i993)>>2)];
 var $cmp_i_i994=($267|0)==($268|0);
 if($cmp_i_i994){label=264;break;}else{label=266;break;}
 case 264: 
 var $269=$266;
 var $vtable_i_i995=HEAP32[(($269)>>2)];
 var $vfn_i_i996=(($vtable_i_i995+36)|0);
 var $270=HEAP32[(($vfn_i_i996)>>2)];
 var $call_i_i1003=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$270]($266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=265;break; } else { label=20;break; }
 case 265: 
 var $extract_t113=(($call_i_i1003)&255);
 var $_pre543=HEAP32[(($__wn)>>2)];
 var $retval_i_i986_0_off0=$extract_t113;var $272=$_pre543;label=267;break;
 case 266: 
 var $271=HEAP8[($267)];
 var $retval_i_i986_0_off0=$271;var $272=$265;label=267;break;
 case 267: 
 var $272;
 var $retval_i_i986_0_off0;
 var $incdec_ptr284=(($272+1)|0);
 HEAP32[(($__wn)>>2)]=$incdec_ptr284;
 HEAP8[($272)]=$retval_i_i986_0_off0;
 var $273=HEAP32[(($__fd)>>2)];
 var $dec=((($273)-(1))|0);
 HEAP32[(($__fd)>>2)]=$dec;
 var $274=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i596=(($274+12)|0);
 var $275=HEAP32[(($__ninp__i_i596)>>2)];
 var $__einp__i_i597=(($274+16)|0);
 var $276=HEAP32[(($__einp__i_i597)>>2)];
 var $cmp_i_i598=($275|0)==($276|0);
 if($cmp_i_i598){label=268;break;}else{label=270;break;}
 case 268: 
 var $277=$274;
 var $vtable_i_i599=HEAP32[(($277)>>2)];
 var $vfn_i_i600=(($vtable_i_i599+40)|0);
 var $278=HEAP32[(($vfn_i_i600)>>2)];
 var $call_i_i607=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$278]($274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=269;break; } else { label=20;break; }
 case 269: 
 var $cmp266=($dec|0)>0;
 if($cmp266){var $__we307363=$__we306;var $237=$248;label=231;break;}else{var $__we305=$__we306;label=271;break;}
 case 270: 
 var $incdec_ptr_i_i603=(($275+1)|0);
 HEAP32[(($__ninp__i_i596)>>2)]=$incdec_ptr_i_i603;
 label=269;break;
 case 271: 
 var $__we305;
 var $279=HEAP32[(($__wn)>>2)];
 var $280=HEAP32[(($__first__i_i_i570)>>2)];
 var $cmp291=($279|0)==($280|0);
 if($cmp291){label=272;break;}else{var $__trailing_sign_1=$__trailing_sign_0468;var $add_ptr277=$add_ptr278;var $__gb_sroa_0_0_load261283=$__gb_sroa_0_0_load261284;var $282=$210;var $__gb_sroa_1_4_load271296=$__gb_sroa_1_4_load271292;var $__we304=$__we305;label=273;break;}
 case 272: 
 var $281=HEAP32[(($__err)>>2)];
 var $or293=$281|4;
 HEAP32[(($__err)>>2)]=$or293;
 var $retval_0=0;var $313=$210;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271292;label=308;break;
 case 273: 
 var $__we304;
 var $__gb_sroa_1_4_load271296;
 var $282;
 var $__gb_sroa_0_0_load261283;
 var $add_ptr277;
 var $__trailing_sign_1;
 var $inc296=((($__p_0470)+(1))|0);
 var $cmp=($inc296>>>0)<4;
 if($cmp){var $__we303456=$__we304;var $__gb_sroa_1_4_load271297459=$__gb_sroa_1_4_load271296;var $1=$282;var $__gb_sroa_0_0_load261282462=$__gb_sroa_0_0_load261283;var $add_ptr276465=$add_ptr277;var $__trailing_sign_0468=$__trailing_sign_1;var $__p_0470=$inc296;label=3;break;}else{var $__gb_sroa_1_4_load271297_lcssa=$__gb_sroa_1_4_load271296;var $_lcssa=$282;var $__gb_sroa_0_0_load261282_lcssa=$__gb_sroa_0_0_load261283;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=274;break;}
 case 274: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load261282_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load271297_lcssa;
 var $tobool298=($__trailing_sign_0_lcssa|0)==0;
 if($tobool298){label=305;break;}else{label=275;break;}
 case 275: 
 var $__s_i_i=$__trailing_sign_0_lcssa;
 var $__size__i_i=$__trailing_sign_0_lcssa;
 var $arrayidx_i_i_i_i=(($__s_i_i+1)|0);
 var $__data__i21_i_i_i=(($__trailing_sign_0_lcssa+8)|0);
 var $__size__i23_i=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;label=276;break;
 case 276: 
 var $__i_0;
 var $283=HEAP8[($__size__i_i)];
 var $conv_i_i580=($283&255);
 var $and_i_i=$conv_i_i580&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=278;break;}else{label=277;break;}
 case 277: 
 var $284=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$284;label=279;break;
 case 278: 
 var $shr_i_i107=$conv_i_i580>>>1;
 var $cond_i=$shr_i_i107;label=279;break;
 case 279: 
 var $cond_i;
 var $cmp303=($__i_0>>>0)<($cond_i>>>0);
 if($cmp303){label=280;break;}else{label=305;break;}
 case 280: 
 var $285=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $tobool_i_i_i524=($285|0)==0;
 if($tobool_i_i_i524){var $290=0;label=286;break;}else{label=281;break;}
 case 281: 
 var $__ninp__i_i_i_i=(($285+12)|0);
 var $286=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($285+16)|0);
 var $287=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($286|0)==($287|0);
 if($cmp_i_i_i_i){label=282;break;}else{var $290=$285;label=286;break;}
 case 282: 
 var $288=$285;
 var $vtable_i_i_i_i=HEAP32[(($288)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $289=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i529=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$289]($285) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=283;break; } else { label=18;break; }
 case 283: 
 var $cmp_i7_i_i_i=($call_i_i_i_i529|0)==-1;
 if($cmp_i7_i_i_i){label=285;break;}else{label=284;break;}
 case 284: 
 var $_pre551=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $290=$_pre551;label=286;break;
 case 285: 
 HEAP32[(($__sbuf__i_i_i627)>>2)]=0;
 var $290=0;label=286;break;
 case 286: 
 var $290;
 var $cmp_i_i_i527=($290|0)==0;
 var $291=HEAP32[(($__sbuf__i11_i_i649)>>2)];
 var $tobool_i12_i_i=($291|0)==0;
 if($tobool_i12_i_i){label=292;break;}else{label=287;break;}
 case 287: 
 var $__ninp__i_i15_i_i=(($291+12)|0);
 var $292=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($291+16)|0);
 var $293=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($292|0)==($293|0);
 if($cmp_i_i17_i_i){label=289;break;}else{label=288;break;}
 case 288: 
 if($cmp_i_i_i527){label=294;break;}else{label=301;break;}
 case 289: 
 var $294=$291;
 var $vtable_i_i19_i_i=HEAP32[(($294)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $295=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i530=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$295]($291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=18;break; }
 case 290: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i530|0)==-1;
 if($cmp_i7_i26_i_i){label=291;break;}else{label=293;break;}
 case 291: 
 HEAP32[(($__sbuf__i11_i_i649)>>2)]=0;
 label=292;break;
 case 292: 
 if($cmp_i_i_i527){label=301;break;}else{label=294;break;}
 case 293: 
 if($cmp_i_i_i527){label=294;break;}else{label=301;break;}
 case 294: 
 var $296=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i476=(($296+12)|0);
 var $297=HEAP32[(($__ninp__i_i476)>>2)];
 var $__einp__i_i477=(($296+16)|0);
 var $298=HEAP32[(($__einp__i_i477)>>2)];
 var $cmp_i_i478=($297|0)==($298|0);
 if($cmp_i_i478){label=295;break;}else{label=297;break;}
 case 295: 
 var $299=$296;
 var $vtable_i_i479=HEAP32[(($299)>>2)];
 var $vfn_i_i480=(($vtable_i_i479+36)|0);
 var $300=HEAP32[(($vfn_i_i480)>>2)];
 var $call_i_i486=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$300]($296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=18;break; }
 case 296: 
 var $extract_t=(($call_i_i486)&255);
 var $retval_i_i470_0_off0=$extract_t;label=298;break;
 case 297: 
 var $301=HEAP8[($297)];
 var $retval_i_i470_0_off0=$301;label=298;break;
 case 298: 
 var $retval_i_i470_0_off0;
 var $302=HEAP8[($__size__i_i)];
 var $and_i_i_i_i=$302&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){var $cond_i_i_i=$arrayidx_i_i_i_i;label=300;break;}else{label=299;break;}
 case 299: 
 var $303=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$303;label=300;break;
 case 300: 
 var $cond_i_i_i;
 var $add_ptr_i=(($cond_i_i_i+$__i_0)|0);
 var $304=HEAP8[($add_ptr_i)];
 var $cmp314=(($retval_i_i470_0_off0<<24)>>24)==(($304<<24)>>24);
 if($cmp314){label=302;break;}else{label=301;break;}
 case 301: 
 var $305=HEAP32[(($__err)>>2)];
 var $or316=$305|4;
 HEAP32[(($__err)>>2)]=$or316;
 var $retval_0=0;var $313=$_lcssa;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297_lcssa;label=308;break;
 case 302: 
 var $inc319=((($__i_0)+(1))|0);
 var $306=HEAP32[(($__sbuf__i_i_i627)>>2)];
 var $__ninp__i_i=(($306+12)|0);
 var $307=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($306+16)|0);
 var $308=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i=($307|0)==($308|0);
 if($cmp_i_i){label=303;break;}else{label=304;break;}
 case 303: 
 var $309=$306;
 var $vtable_i_i=HEAP32[(($309)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $310=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i422=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$310]($306) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$inc319;label=276;break; } else { label=18;break; }
 case 304: 
 var $incdec_ptr_i_i=(($307+1)|0);
 HEAP32[(($__ninp__i_i)>>2)]=$incdec_ptr_i_i;
 var $__i_0=$inc319;label=276;break;
 case 305: 
 var $cmp325=($_lcssa|0)==($__gb_sroa_0_0_load261282_lcssa|0);
 if($cmp325){var $retval_0=1;var $313=$__gb_sroa_0_0_load261282_lcssa;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297_lcssa;label=308;break;}else{label=306;break;}
 case 306: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load261282_lcssa,$__et);
 var $311=HEAP32[(($__et)>>2)];
 var $tobool330=($311|0)==0;
 if($tobool330){var $retval_0=1;var $313=$_lcssa;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297_lcssa;label=308;break;}else{label=307;break;}
 case 307: 
 var $312=HEAP32[(($__err)>>2)];
 var $or332=$312|4;
 HEAP32[(($__err)>>2)]=$or332;
 var $retval_0=0;var $313=$_lcssa;var $__gb_sroa_1_4_load271298=$__gb_sroa_1_4_load271297_lcssa;label=308;break;
 case 308: 
 var $__gb_sroa_1_4_load271298;
 var $313;
 var $retval_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $tobool_i_i_i=($313|0)==0;
 if($tobool_i_i_i){label=311;break;}else{label=309;break;}
 case 309: 
 var $314=$313;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load271298]($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { label=310;break; }
 case 310: 
 var $315$0 = ___cxa_find_matching_catch(-1, -1,0); var $315$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 311: 
 STACKTOP=sp;return $retval_0;
 case 312: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $exception=___cxa_allocate_exception(8);
 var $0=$exception;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($0,$msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 ___cxa_throw($exception,8552,(46));
 throw "Reached an unreachable!";
 case 3: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1); var $1$1 = tempRet0;
 ___cxa_free_exception($exception);
 ___resumeException($1$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__loc=(sp)+(136);
 var $__neg=(sp)+(144);
 var $agg_tmp=(sp)+(152);
 var $arraydecay=(($__wbuf)|0);
 var $__first__i_i_i_i_i=(($__wb)|0);
 HEAP32[(($__first__i_i_i_i_i)>>2)]=$arraydecay;
 var $__second__i_i_i_i_i=(($__wb+4)|0);
 HEAP32[(($__second__i_i_i_i_i)>>2)]=446;
 var $add_ptr=(($__wbuf+100)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i12=($2|0)==-1;
 if($cmp_i_i_i12){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=40;break; }
 case 4: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i14=($6|0)==0;
 if($tobool_i_i_i14){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=40;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 HEAP8[($__neg)]=0;
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($agg_tmp)|0);
 HEAP32[(($11)>>2)]=$10;
 var $__fmtflags__i=(($__iob+4)|0);
 var $12=HEAP32[(($__fmtflags__i)>>2)];
 var $call8=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$agg_tmp,$__intl,$__loc,$12,$__err,$__neg,$8,$__wb,$__wn,$add_ptr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=40;break; }
 case 9: 
 if($call8){label=10;break;}else{label=22;break;}
 case 10: 
 var $__size__i46_i=$__v;
 var $13=HEAP8[($__size__i46_i)];
 var $and_i_i=$13&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=12;break;}else{label=11;break;}
 case 11: 
 var $__data__i36_i=(($__v+8)|0);
 var $14=HEAP32[(($__data__i36_i)>>2)];
 HEAP8[($14)]=0;
 var $__size__i24_i=(($__v+4)|0);
 HEAP32[(($__size__i24_i)>>2)]=0;
 label=13;break;
 case 12: 
 var $__s_i45_i=$__v;
 var $arrayidx_i_i=(($__s_i45_i+1)|0);
 HEAP8[($arrayidx_i_i)]=0;
 HEAP8[($__size__i46_i)]=0;
 label=13;break;
 case 13: 
 var $15=HEAP8[($__neg)];
 var $16=$15&1;
 var $tobool9=(($16<<24)>>24)==0;
 var $_pre21=$6;
 if($tobool9){label=17;break;}else{label=14;break;}
 case 14: 
 var $vtable_i=HEAP32[(($_pre21)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $17=HEAP32[(($vfn_i)>>2)];
 var $call_i86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]($8,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=40;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$call_i86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=40;break; }
 case 16: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 var $20=$18$1;
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $47=$arraydecay;var $ehselector_slot_026=$20;var $exn_slot_028=$19;label=41;break;
 case 17: 
 var $vtable_i90=HEAP32[(($_pre21)>>2)];
 var $vfn_i91=(($vtable_i90+28)|0);
 var $21=HEAP32[(($vfn_i91)>>2)];
 var $call_i92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $22=HEAP32[(($__first__i_i_i_i_i)>>2)];
 var $23=HEAP32[(($__wn)>>2)];
 var $add_ptr17=((($23)-(1))|0);
 var $__w_0=$22;label=19;break;
 case 19: 
 var $__w_0;
 var $cmp=($__w_0>>>0)<($add_ptr17>>>0);
 if($cmp){label=20;break;}else{label=21;break;}
 case 20: 
 var $24=HEAP8[($__w_0)];
 var $cmp19=(($24<<24)>>24)==(($call_i92<<24)>>24);
 var $incdec_ptr=(($__w_0+1)|0);
 if($cmp19){var $__w_0=$incdec_ptr;label=19;break;}else{label=21;break;}
 case 21: 
 var $call23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=40;break; }
 case 22: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $25=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i105=($25|0)==0;
 if($tobool_i_i_i105){var $30=0;label=27;break;}else{label=23;break;}
 case 23: 
 var $__ninp__i_i_i_i=(($25+12)|0);
 var $26=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($25+16)|0);
 var $27=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($26|0)==($27|0);
 if($cmp_i_i_i_i){label=24;break;}else{var $30=$25;label=27;break;}
 case 24: 
 var $28=$25;
 var $vtable_i_i_i_i=HEAP32[(($28)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $29=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=40;break; }
 case 25: 
 var $cmp_i7_i_i_i=($call_i_i_i_i109|0)==-1;
 if($cmp_i7_i_i_i){label=26;break;}else{var $30=$25;label=27;break;}
 case 26: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $30=0;label=27;break;
 case 27: 
 var $30;
 var $cmp_i_i_i=($30|0)==0;
 var $tobool_i12_i_i=($10|0)==0;
 if($tobool_i12_i_i){label=33;break;}else{label=28;break;}
 case 28: 
 var $__ninp__i_i15_i_i=(($10+12)|0);
 var $31=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($10+16)|0);
 var $32=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($31|0)==($32|0);
 if($cmp_i_i17_i_i){label=30;break;}else{label=29;break;}
 case 29: 
 if($cmp_i_i_i){label=36;break;}else{label=35;break;}
 case 30: 
 var $33=$10;
 var $vtable_i_i19_i_i=HEAP32[(($33)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $34=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i110=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=40;break; }
 case 31: 
 var $cmp_i7_i26_i_i=($call_i_i21_i_i110|0)==-1;
 if($cmp_i7_i26_i_i){label=32;break;}else{label=34;break;}
 case 32: 
 HEAP32[(($9)>>2)]=0;
 label=33;break;
 case 33: 
 if($cmp_i_i_i){label=35;break;}else{label=36;break;}
 case 34: 
 var $cmp_i31_i_i=($10|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i^$cmp_i31_i_i;
 if($cmp_i_itmp){label=36;break;}else{label=35;break;}
 case 35: 
 var $35=HEAP32[(($__err)>>2)];
 var $or=$35|2;
 HEAP32[(($__err)>>2)]=$or;
 label=36;break;
 case 36: 
 var $36=(($agg_result)|0);
 HEAP32[(($36)>>2)]=$30;
 var $37=HEAP32[(($__locale__i)>>2)];
 var $38=(($37)|0);
 var $call_i18=__ZNSt3__114__shared_count16__release_sharedEv($38);
 var $39=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i75=($39|0)==0;
 if($tobool_i_i_i75){label=39;break;}else{label=37;break;}
 case 37: 
 var $40=HEAP32[(($__second__i_i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=38;break; }
 case 38: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1,0); var $41$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 39: 
 STACKTOP=sp;return;
 case 40: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=$42$1;
 var $45=HEAP32[(($__locale__i)>>2)];
 var $46=(($45)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($46);
 var $_pre=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i=($_pre|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_027=$44;var $exn_slot_029=$43;label=43;break;}else{var $47=$_pre;var $ehselector_slot_026=$44;var $exn_slot_028=$43;label=41;break;}
 case 41: 
 var $exn_slot_028;
 var $ehselector_slot_026;
 var $47;
 var $48=HEAP32[(($__second__i_i_i_i_i)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $ehselector_slot_027=$ehselector_slot_026;var $exn_slot_029=$exn_slot_028;label=43;break; } else { label=42;break; }
 case 42: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1,0); var $49$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 var $exn_slot_029;
 var $ehselector_slot_027;
 var $lpad_val$0=$exn_slot_029;
 var $lpad_val$1=0;
 var $lpad_val29$0=$lpad_val$0;
 var $lpad_val29$1=$ehselector_slot_027;
 ___resumeException($lpad_val29$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i=$this;
 var $__size__i_i=$this;
 var $sub_ptr_rhs_cast_i_i=$__first;
 var $0=HEAP8[($__size__i_i)];
 var $conv_i_i=($0&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($this+4)|0);
 var $1=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$1;label=4;break;
 case 3: 
 var $shr_i_i16=$conv_i_i>>>1;
 var $cond_i=$shr_i_i16;label=4;break;
 case 4: 
 var $cond_i;
 var $and_i_i75=$0&1;
 var $tobool_i_i76=(($and_i_i75<<24)>>24)==0;
 if($tobool_i_i76){var $cond_i84=10;var $4=$0;label=6;break;}else{label=5;break;}
 case 5: 
 var $__cap__i_i=(($this)|0);
 var $2=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$2&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $3=(($2)&255);
 var $cond_i84=$phitmp;var $4=$3;label=6;break;
 case 6: 
 var $4;
 var $cond_i84;
 var $sub_ptr_lhs_cast_i_i=$__last;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $tobool=($__last|0)==($__first|0);
 if($tobool){label=17;break;}else{label=7;break;}
 case 7: 
 var $sub=((($cond_i84)-($cond_i))|0);
 var $cmp=($sub>>>0)<($sub_ptr_sub_i_i>>>0);
 if($cmp){label=8;break;}else{var $5=$4;label=9;break;}
 case 8: 
 var $add=((($cond_i)+($sub_ptr_sub_i_i))|0);
 var $sub5=((($add)-($cond_i84))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$cond_i84,$sub5,$cond_i,$cond_i,0,0);
 var $_pre=HEAP8[($__size__i_i)];
 var $5=$_pre;label=9;break;
 case 9: 
 var $5;
 var $and_i_i45=$5&1;
 var $tobool_i_i46=(($and_i_i45<<24)>>24)==0;
 if($tobool_i_i46){label=11;break;}else{label=10;break;}
 case 10: 
 var $__data__i21_i=(($this+8)|0);
 var $6=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i61=$6;label=12;break;
 case 11: 
 var $arrayidx_i_i=(($__s_i_i+1)|0);
 var $cond_i61=$arrayidx_i_i;label=12;break;
 case 12: 
 var $cond_i61;
 var $add_ptr=(($cond_i61+$cond_i)|0);
 var $7=((($cond_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $scevgep=(($__last+$7)|0);
 var $scevgep20=$scevgep;
 var $__first_addr_018=$__first;var $__p_019=$add_ptr;label=13;break;
 case 13: 
 var $__p_019;
 var $__first_addr_018;
 var $8=HEAP8[($__first_addr_018)];
 HEAP8[($__p_019)]=$8;
 var $incdec_ptr=(($__p_019+1)|0);
 var $incdec_ptr8=(($__first_addr_018+1)|0);
 var $cmp7=($incdec_ptr8|0)==($__last|0);
 if($cmp7){label=14;break;}else{var $__first_addr_018=$incdec_ptr8;var $__p_019=$incdec_ptr;label=13;break;}
 case 14: 
 var $scevgep21=(($cond_i61+$scevgep20)|0);
 HEAP8[($scevgep21)]=0;
 var $add9=((($cond_i)+($sub_ptr_sub_i_i))|0);
 var $9=HEAP8[($__size__i_i)];
 var $and_i_i24=$9&1;
 var $tobool_i_i25=(($and_i_i24<<24)>>24)==0;
 if($tobool_i_i25){label=16;break;}else{label=15;break;}
 case 15: 
 var $__size__i21_i=(($this+4)|0);
 HEAP32[(($__size__i21_i)>>2)]=$add9;
 label=17;break;
 case 16: 
 var $shl_i_i=$add9<<1;
 var $conv_i6_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i6_i;
 label=17;break;
 case 17: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i59=sp;
 var $__p_i_i_i=(sp)+(16);
 var $ref_tmp=(sp)+(32);
 var $ref_tmp1=(sp)+(40);
 var $0=$ref_tmp1;
 var $ref_tmp3=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$ref_tmp3;
 var $ref_tmp7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$ref_tmp7;
 var $ref_tmp9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$ref_tmp9;
 var $ref_tmp14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ref_tmp15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=$ref_tmp15;
 var $ref_tmp17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$ref_tmp17;
 var $ref_tmp21=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$ref_tmp21;
 var $ref_tmp23=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$ref_tmp23;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast55=$ref_tmp;
 var $__locale__i=(($__loc)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((14120)>>2)];
 var $cmp_i_i_i56=($10|0)==-1;
 if($cmp_i_i_i56){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=14120;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14120,$9,272);
 label=4;break;
 case 4: 
 var $11=HEAP32[((14124)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i58=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i58)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 7: 
 var $16=$14;
 var $17=$14;
 var $vtable_i=HEAP32[(($17)>>2)];
 var $vfn_i=(($vtable_i+44)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($tmpcast55,$16);
 var $19=$__pat;
 var $20=HEAP32[(($ref_tmp)>>2)];
 tempBigInt=$20;HEAP8[($19)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(3))|0)]=tempBigInt&0xff;
 var $21=$14;
 var $vtable_i28=HEAP32[(($21)>>2)];
 var $vfn_i29=(($vtable_i28+32)|0);
 var $22=HEAP32[(($vfn_i29)>>2)];
 FUNCTION_TABLE[$22]($ref_tmp1,$16);
 var $__size__i46_i_i_i=$__nsn;
 var $23=HEAP8[($__size__i46_i_i_i)];
 var $and_i_i_i_i=$23&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__data__i36_i_i_i=(($__nsn+8)|0);
 var $24=HEAP32[(($__data__i36_i_i_i)>>2)];
 HEAP8[($24)]=0;
 var $__size__i24_i_i_i=(($__nsn+4)|0);
 HEAP32[(($__size__i24_i_i_i)>>2)]=0;
 label=10;break;
 case 9: 
 var $__s_i45_i_i_i=$__nsn;
 var $arrayidx_i_i_i_i=(($__s_i45_i_i_i+1)|0);
 HEAP8[($arrayidx_i_i_i_i)]=0;
 HEAP8[($__size__i46_i_i_i)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1,0); var $25$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i)>>2)]=HEAP32[(($0)>>2)];HEAP32[((($__size__i46_i_i_i)+(4))>>2)]=HEAP32[((($0)+(4))>>2)];HEAP32[((($__size__i46_i_i_i)+(8))>>2)]=HEAP32[((($0)+(8))>>2)];
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp1);
 var $vtable_i34=HEAP32[(($21)>>2)];
 var $vfn_i35=(($vtable_i34+28)|0);
 var $26=HEAP32[(($vfn_i35)>>2)];
 FUNCTION_TABLE[$26]($ref_tmp3,$16);
 var $__size__i46_i_i_i104=$__psn;
 var $27=HEAP8[($__size__i46_i_i_i104)];
 var $and_i_i_i_i106=$27&1;
 var $tobool_i_i_i_i107=(($and_i_i_i_i106<<24)>>24)==0;
 if($tobool_i_i_i_i107){label=14;break;}else{label=13;break;}
 case 13: 
 var $__data__i36_i_i_i114=(($__psn+8)|0);
 var $28=HEAP32[(($__data__i36_i_i_i114)>>2)];
 HEAP8[($28)]=0;
 var $__size__i24_i_i_i121=(($__psn+4)|0);
 HEAP32[(($__size__i24_i_i_i121)>>2)]=0;
 label=15;break;
 case 14: 
 var $__s_i45_i_i_i103=$__psn;
 var $arrayidx_i_i_i_i130=(($__s_i45_i_i_i103+1)|0);
 HEAP8[($arrayidx_i_i_i_i130)]=0;
 HEAP8[($__size__i46_i_i_i104)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1,0); var $29$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i104)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($__size__i46_i_i_i104)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($__size__i46_i_i_i104)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp3);
 var $30=$14;
 var $vtable_i180=HEAP32[(($30)>>2)];
 var $vfn_i181=(($vtable_i180+12)|0);
 var $31=HEAP32[(($vfn_i181)>>2)];
 var $call_i182=FUNCTION_TABLE[$31]($16);
 HEAP8[($__dp)]=$call_i182;
 var $vtable_i185=HEAP32[(($30)>>2)];
 var $vfn_i186=(($vtable_i185+16)|0);
 var $32=HEAP32[(($vfn_i186)>>2)];
 var $call_i187=FUNCTION_TABLE[$32]($16);
 HEAP8[($__ts)]=$call_i187;
 var $vtable_i190=HEAP32[(($21)>>2)];
 var $vfn_i191=(($vtable_i190+20)|0);
 var $33=HEAP32[(($vfn_i191)>>2)];
 FUNCTION_TABLE[$33]($ref_tmp7,$16);
 var $__size__i46_i_i_i260=$__grp;
 var $34=HEAP8[($__size__i46_i_i_i260)];
 var $and_i_i_i_i262=$34&1;
 var $tobool_i_i_i_i263=(($and_i_i_i_i262<<24)>>24)==0;
 if($tobool_i_i_i_i263){label=19;break;}else{label=18;break;}
 case 18: 
 var $__data__i36_i_i_i270=(($__grp+8)|0);
 var $35=HEAP32[(($__data__i36_i_i_i270)>>2)];
 HEAP8[($35)]=0;
 var $__size__i24_i_i_i277=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i277)>>2)]=0;
 label=20;break;
 case 19: 
 var $__s_i45_i_i_i259=$__grp;
 var $arrayidx_i_i_i_i286=(($__s_i45_i_i_i259+1)|0);
 HEAP8[($arrayidx_i_i_i_i286)]=0;
 HEAP8[($__size__i46_i_i_i260)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i260)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($__size__i46_i_i_i260)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($__size__i46_i_i_i260)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp7);
 var $vtable_i336=HEAP32[(($21)>>2)];
 var $vfn_i337=(($vtable_i336+24)|0);
 var $37=HEAP32[(($vfn_i337)>>2)];
 FUNCTION_TABLE[$37]($ref_tmp9,$16);
 var $__size__i46_i_i_i406=$__sym;
 var $38=HEAP8[($__size__i46_i_i_i406)];
 var $and_i_i_i_i408=$38&1;
 var $tobool_i_i_i_i409=(($and_i_i_i_i408<<24)>>24)==0;
 if($tobool_i_i_i_i409){label=24;break;}else{label=23;break;}
 case 23: 
 var $__data__i36_i_i_i416=(($__sym+8)|0);
 var $39=HEAP32[(($__data__i36_i_i_i416)>>2)];
 HEAP8[($39)]=0;
 var $__size__i24_i_i_i423=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i423)>>2)]=0;
 label=25;break;
 case 24: 
 var $__s_i45_i_i_i405=$__sym;
 var $arrayidx_i_i_i_i432=(($__s_i45_i_i_i405+1)|0);
 HEAP8[($arrayidx_i_i_i_i432)]=0;
 HEAP8[($__size__i46_i_i_i406)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1,0); var $40$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i406)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($__size__i46_i_i_i406)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($__size__i46_i_i_i406)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp9);
 var $41=$14;
 var $vtable_i482=HEAP32[(($41)>>2)];
 var $vfn_i483=(($vtable_i482+36)|0);
 var $42=HEAP32[(($vfn_i483)>>2)];
 var $call_i484=FUNCTION_TABLE[$42]($16);
 var $storemerge=$call_i484;label=54;break;
 case 28: 
 var $tmpcast=$ref_tmp14;
 var $__locale__i60=(($__loc)|0);
 var $43=HEAP32[(($__locale__i60)>>2)];
 var $44=$__p_i_i_i59;
 var $45=HEAP32[((14128)>>2)];
 var $cmp_i_i_i61=($45|0)==-1;
 if($cmp_i_i_i61){label=30;break;}else{label=29;break;}
 case 29: 
 var $ref_tmp_i_sroa_0_0__idx_i_i62=(($__p_i_i_i59)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i62)>>2)]=14128;
 var $ref_tmp_i_sroa_1_4__idx6_i_i63=(($__p_i_i_i59+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i63)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i64=(($__p_i_i_i59+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i64)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14128,$44,272);
 label=30;break;
 case 30: 
 var $46=HEAP32[((14132)>>2)];
 var $sub_i_i66=((($46)-(1))|0);
 var $__end__i_i_i_i67=(($43+12)|0);
 var $47=HEAP32[(($__end__i_i_i_i67)>>2)];
 var $__begin__i_i_i_i68=(($43+8)|0);
 var $48=HEAP32[(($__begin__i_i_i_i68)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i69=$47;
 var $sub_ptr_rhs_cast_i_i_i_i70=$48;
 var $sub_ptr_sub_i_i_i_i71=((($sub_ptr_lhs_cast_i_i_i_i69)-($sub_ptr_rhs_cast_i_i_i_i70))|0);
 var $sub_ptr_div_i_i_i_i72=$sub_ptr_sub_i_i_i_i71>>2;
 var $cmp_i_i1_i73=($sub_ptr_div_i_i_i_i72>>>0)>($sub_i_i66>>>0);
 if($cmp_i_i1_i73){label=31;break;}else{label=32;break;}
 case 31: 
 var $arrayidx_i_i_i_i75=(($48+($sub_i_i66<<2))|0);
 var $49=HEAP32[(($arrayidx_i_i_i_i75)>>2)];
 var $tobool_i_i_i76=($49|0)==0;
 if($tobool_i_i_i76){label=32;break;}else{label=33;break;}
 case 32: 
 var $exception_i_i78=___cxa_allocate_exception(4);
 var $50=$exception_i_i78;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($exception_i_i78,8536,(376));
 throw "Reached an unreachable!";
 case 33: 
 var $51=$49;
 var $52=$49;
 var $vtable_i489=HEAP32[(($52)>>2)];
 var $vfn_i490=(($vtable_i489+44)|0);
 var $53=HEAP32[(($vfn_i490)>>2)];
 FUNCTION_TABLE[$53]($tmpcast,$51);
 var $54=$__pat;
 var $55=HEAP32[(($ref_tmp14)>>2)];
 tempBigInt=$55;HEAP8[($54)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(3))|0)]=tempBigInt&0xff;
 var $56=$49;
 var $vtable_i493=HEAP32[(($56)>>2)];
 var $vfn_i494=(($vtable_i493+32)|0);
 var $57=HEAP32[(($vfn_i494)>>2)];
 FUNCTION_TABLE[$57]($ref_tmp15,$51);
 var $__size__i46_i_i_i563=$__nsn;
 var $58=HEAP8[($__size__i46_i_i_i563)];
 var $and_i_i_i_i565=$58&1;
 var $tobool_i_i_i_i566=(($and_i_i_i_i565<<24)>>24)==0;
 if($tobool_i_i_i_i566){label=35;break;}else{label=34;break;}
 case 34: 
 var $__data__i36_i_i_i573=(($__nsn+8)|0);
 var $59=HEAP32[(($__data__i36_i_i_i573)>>2)];
 HEAP8[($59)]=0;
 var $__size__i24_i_i_i580=(($__nsn+4)|0);
 HEAP32[(($__size__i24_i_i_i580)>>2)]=0;
 label=36;break;
 case 35: 
 var $__s_i45_i_i_i562=$__nsn;
 var $arrayidx_i_i_i_i589=(($__s_i45_i_i_i562+1)|0);
 HEAP8[($arrayidx_i_i_i_i589)]=0;
 HEAP8[($__size__i46_i_i_i563)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i563)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($__size__i46_i_i_i563)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($__size__i46_i_i_i563)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp15);
 var $vtable_i639=HEAP32[(($56)>>2)];
 var $vfn_i640=(($vtable_i639+28)|0);
 var $61=HEAP32[(($vfn_i640)>>2)];
 FUNCTION_TABLE[$61]($ref_tmp17,$51);
 var $__size__i46_i_i_i709=$__psn;
 var $62=HEAP8[($__size__i46_i_i_i709)];
 var $and_i_i_i_i711=$62&1;
 var $tobool_i_i_i_i712=(($and_i_i_i_i711<<24)>>24)==0;
 if($tobool_i_i_i_i712){label=40;break;}else{label=39;break;}
 case 39: 
 var $__data__i36_i_i_i719=(($__psn+8)|0);
 var $63=HEAP32[(($__data__i36_i_i_i719)>>2)];
 HEAP8[($63)]=0;
 var $__size__i24_i_i_i726=(($__psn+4)|0);
 HEAP32[(($__size__i24_i_i_i726)>>2)]=0;
 label=41;break;
 case 40: 
 var $__s_i45_i_i_i708=$__psn;
 var $arrayidx_i_i_i_i735=(($__s_i45_i_i_i708+1)|0);
 HEAP8[($arrayidx_i_i_i_i735)]=0;
 HEAP8[($__size__i46_i_i_i709)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i709)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($__size__i46_i_i_i709)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($__size__i46_i_i_i709)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp17);
 var $65=$49;
 var $vtable_i785=HEAP32[(($65)>>2)];
 var $vfn_i786=(($vtable_i785+12)|0);
 var $66=HEAP32[(($vfn_i786)>>2)];
 var $call_i787=FUNCTION_TABLE[$66]($51);
 HEAP8[($__dp)]=$call_i787;
 var $vtable_i790=HEAP32[(($65)>>2)];
 var $vfn_i791=(($vtable_i790+16)|0);
 var $67=HEAP32[(($vfn_i791)>>2)];
 var $call_i792=FUNCTION_TABLE[$67]($51);
 HEAP8[($__ts)]=$call_i792;
 var $vtable_i795=HEAP32[(($56)>>2)];
 var $vfn_i796=(($vtable_i795+20)|0);
 var $68=HEAP32[(($vfn_i796)>>2)];
 FUNCTION_TABLE[$68]($ref_tmp21,$51);
 var $__size__i46_i_i_i865=$__grp;
 var $69=HEAP8[($__size__i46_i_i_i865)];
 var $and_i_i_i_i867=$69&1;
 var $tobool_i_i_i_i868=(($and_i_i_i_i867<<24)>>24)==0;
 if($tobool_i_i_i_i868){label=45;break;}else{label=44;break;}
 case 44: 
 var $__data__i36_i_i_i875=(($__grp+8)|0);
 var $70=HEAP32[(($__data__i36_i_i_i875)>>2)];
 HEAP8[($70)]=0;
 var $__size__i24_i_i_i882=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i882)>>2)]=0;
 label=46;break;
 case 45: 
 var $__s_i45_i_i_i864=$__grp;
 var $arrayidx_i_i_i_i891=(($__s_i45_i_i_i864+1)|0);
 HEAP8[($arrayidx_i_i_i_i891)]=0;
 HEAP8[($__size__i46_i_i_i865)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1,0); var $71$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i865)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($__size__i46_i_i_i865)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($__size__i46_i_i_i865)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp21);
 var $vtable_i941=HEAP32[(($56)>>2)];
 var $vfn_i942=(($vtable_i941+24)|0);
 var $72=HEAP32[(($vfn_i942)>>2)];
 FUNCTION_TABLE[$72]($ref_tmp23,$51);
 var $__size__i46_i_i_i1011=$__sym;
 var $73=HEAP8[($__size__i46_i_i_i1011)];
 var $and_i_i_i_i1013=$73&1;
 var $tobool_i_i_i_i1014=(($and_i_i_i_i1013<<24)>>24)==0;
 if($tobool_i_i_i_i1014){label=50;break;}else{label=49;break;}
 case 49: 
 var $__data__i36_i_i_i1021=(($__sym+8)|0);
 var $74=HEAP32[(($__data__i36_i_i_i1021)>>2)];
 HEAP8[($74)]=0;
 var $__size__i24_i_i_i1028=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i1028)>>2)]=0;
 label=51;break;
 case 50: 
 var $__s_i45_i_i_i1010=$__sym;
 var $arrayidx_i_i_i_i1037=(($__s_i45_i_i_i1010+1)|0);
 HEAP8[($arrayidx_i_i_i_i1037)]=0;
 HEAP8[($__size__i46_i_i_i1011)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1,0); var $75$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i1011)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($__size__i46_i_i_i1011)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($__size__i46_i_i_i1011)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp23);
 var $76=$49;
 var $vtable_i1087=HEAP32[(($76)>>2)];
 var $vfn_i1088=(($vtable_i1087+36)|0);
 var $77=HEAP32[(($vfn_i1088)>>2)];
 var $call_i1089=FUNCTION_TABLE[$77]($51);
 var $storemerge=$call_i1089;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i=$__grouping;
 var $__size__i_i=$__grouping;
 var $0=HEAP8[($__size__i_i)];
 var $conv_i_i=($0&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($__grouping+4)|0);
 var $1=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$1;label=4;break;
 case 3: 
 var $shr_i_i24=$conv_i_i>>>1;
 var $cond_i=$shr_i_i24;label=4;break;
 case 4: 
 var $cond_i;
 var $cmp=($cond_i|0)==0;
 if($cmp){label=24;break;}else{label=5;break;}
 case 5: 
 var $cmp_i_i=($__g|0)==($__g_end|0);
 if($cmp_i_i){var $4=$0;label=9;break;}else{label=6;break;}
 case 6: 
 var $incdec_ptr_i_i43=((($__g_end)-(4))|0);
 var $cmp1_i_i44=($incdec_ptr_i_i43>>>0)>($__g>>>0);
 if($cmp1_i_i44){var $__first_addr_i_i_045=$__g;var $incdec_ptr_i_i46=$incdec_ptr_i_i43;label=7;break;}else{var $4=$0;label=9;break;}
 case 7: 
 var $incdec_ptr_i_i46;
 var $__first_addr_i_i_045;
 var $2=HEAP32[(($__first_addr_i_i_045)>>2)];
 var $3=HEAP32[(($incdec_ptr_i_i46)>>2)];
 HEAP32[(($__first_addr_i_i_045)>>2)]=$3;
 HEAP32[(($incdec_ptr_i_i46)>>2)]=$2;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_045+4)|0);
 var $incdec_ptr_i_i=((($incdec_ptr_i_i46)-(4))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_045=$incdec_ptr2_i_i;var $incdec_ptr_i_i46=$incdec_ptr_i_i;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre_pre=HEAP8[($__size__i_i)];
 var $4=$_pre_pre;label=9;break;
 case 9: 
 var $4;
 var $and_i_i_i=$4&1;
 var $tobool_i_i_i=(($and_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i){label=11;break;}else{label=10;break;}
 case 10: 
 var $__data__i21_i_i=(($__grouping+8)|0);
 var $5=HEAP32[(($__data__i21_i_i)>>2)];
 var $cond_i_i=$5;label=12;break;
 case 11: 
 var $arrayidx_i_i_i=(($__s_i_i+1)|0);
 var $cond_i_i=$arrayidx_i_i_i;label=12;break;
 case 12: 
 var $cond_i_i;
 var $conv_i_i53=($4&255);
 var $and_i_i54=$conv_i_i53&1;
 var $tobool_i_i55=($and_i_i54|0)==0;
 if($tobool_i_i55){label=14;break;}else{label=13;break;}
 case 13: 
 var $__size__i23_i62=(($__grouping+4)|0);
 var $6=HEAP32[(($__size__i23_i62)>>2)];
 var $cond_i74=$6;label=15;break;
 case 14: 
 var $shr_i_i7225=$conv_i_i53>>>1;
 var $cond_i74=$shr_i_i7225;label=15;break;
 case 15: 
 var $cond_i74;
 var $add_ptr3=((($__g_end)-(4))|0);
 var $cmp432=($add_ptr3>>>0)>($__g>>>0);
 var $7=HEAP8[($cond_i_i)];
 var $conv33=(($7<<24)>>24);
 var $cmp5_not34=(($7<<24)>>24)<1;
 var $cmp935=(($7<<24)>>24)==127;
 var $or_cond36=$cmp5_not34|$cmp935;
 if($cmp432){label=16;break;}else{var $conv_lcssa=$conv33;var $or_cond_lcssa=$or_cond36;label=21;break;}
 case 16: 
 var $add_ptr=(($cond_i_i+$cond_i74)|0);
 var $sub_ptr_lhs_cast=$add_ptr;
 var $__ig_037=$cond_i_i;var $__r_038=$__g;var $conv39=$conv33;var $or_cond40=$or_cond36;label=17;break;
 case 17: 
 var $or_cond40;
 var $conv39;
 var $__r_038;
 var $__ig_037;
 if($or_cond40){label=20;break;}else{label=18;break;}
 case 18: 
 var $8=HEAP32[(($__r_038)>>2)];
 var $cmp12=($conv39|0)==($8|0);
 if($cmp12){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 20: 
 var $sub_ptr_rhs_cast=$__ig_037;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp15=($sub_ptr_sub|0)>1;
 var $incdec_ptr=(($__ig_037+1)|0);
 var $incdec_ptr___ig_0=($cmp15?$incdec_ptr:$__ig_037);
 var $incdec_ptr18=(($__r_038+4)|0);
 var $cmp4=($incdec_ptr18>>>0)<($add_ptr3>>>0);
 var $9=HEAP8[($incdec_ptr___ig_0)];
 var $conv=(($9<<24)>>24);
 var $cmp5_not=(($9<<24)>>24)<1;
 var $cmp9=(($9<<24)>>24)==127;
 var $or_cond=$cmp5_not|$cmp9;
 if($cmp4){var $__ig_037=$incdec_ptr___ig_0;var $__r_038=$incdec_ptr18;var $conv39=$conv;var $or_cond40=$or_cond;label=17;break;}else{var $conv_lcssa=$conv;var $or_cond_lcssa=$or_cond;label=21;break;}
 case 21: 
 var $or_cond_lcssa;
 var $conv_lcssa;
 if($or_cond_lcssa){label=24;break;}else{label=22;break;}
 case 22: 
 var $10=HEAP32[(($add_ptr3)>>2)];
 var $cmp28=($conv_lcssa>>>0)<($10>>>0);
 var $cmp30=($10|0)==0;
 var $or_cond28=$cmp28|$cmp30;
 if($or_cond28){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+600)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $agg_tmp=(sp)+(448);
 var $__atoms=(sp)+(456);
 var $__nbuf=(sp)+(496);
 var $arraydecay=(($__wbuf)|0);
 var $__first__i_i_i_i_i=(($__wb)|0);
 HEAP32[(($__first__i_i_i_i_i)>>2)]=$arraydecay;
 var $__second__i_i_i_i_i=(($__wb+4)|0);
 HEAP32[(($__second__i_i_i_i_i)>>2)]=446;
 var $add_ptr=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=14;break; }
 case 2: 
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i23=($2|0)==-1;
 if($cmp_i_i_i23){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=15;break; }
 case 4: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i25=($6|0)==0;
 if($tobool_i_i_i25){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=15;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 HEAP8[($__neg)]=0;
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($agg_tmp)|0);
 HEAP32[(($11)>>2)]=$10;
 var $__fmtflags__i=(($__iob+4)|0);
 var $12=HEAP32[(($__fmtflags__i)>>2)];
 var $call8=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$agg_tmp,$__intl,$__loc,$12,$__err,$__neg,$8,$__wb,$__wn,$add_ptr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=15;break; }
 case 9: 
 if($call8){label=10;break;}else{label=34;break;}
 case 10: 
 var $arraydecay9=(($__atoms)|0);
 var $13=$6;
 var $vtable_i=HEAP32[(($13)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $14=HEAP32[(($vfn_i)>>2)];
 var $call_i78=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($8,2152,2162,$arraydecay9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=15;break; }
 case 11: 
 var $arraydecay12=(($__nbuf)|0);
 var $15=HEAP32[(($__wn)>>2)];
 var $16=HEAP32[(($__first__i_i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast=$15;
 var $sub_ptr_rhs_cast=$16;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>392;
 if($cmp){label=12;break;}else{var $__nc_0=$arraydecay12;var $__h_sroa_0_1=0;label=19;break;}
 case 12: 
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $add=((($sub_ptr_div)+(2))|0);
 var $call23=_malloc($add);
 var $cmp25=($call23|0)==0;
 if($cmp25){label=13;break;}else{var $__nc_0=$call23;var $__h_sroa_0_1=$call23;label=19;break;}
 case 13: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__nc_0=0;var $__h_sroa_0_1=0;label=19;break; } else { var $__h_sroa_0_0=0;label=16;break; }
 case 14: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $18=$17$0;
 var $19=$17$1;
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $57=$arraydecay;var $exn_slot_136=$18;var $ehselector_slot_138=$19;label=54;break;
 case 15: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1); var $20$1 = tempRet0;
 var $21=$20$0;
 var $22=$20$1;
 var $ehselector_slot_0=$22;var $exn_slot_0=$21;label=53;break;
 case 16: 
 var $__h_sroa_0_0;
 var $23$0 = ___cxa_find_matching_catch(-1, -1); var $23$1 = tempRet0;
 var $eh_lpad_body$1=$23$1;var $eh_lpad_body$0=$23$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=17;break;
 case 17: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $24=$eh_lpad_body$0;
 var $25=$eh_lpad_body$1;
 var $tobool_i_i_i191=($__h_sroa_0_0_lpad_body|0)==0;
 if($tobool_i_i_i191){var $ehselector_slot_0=$25;var $exn_slot_0=$24;label=53;break;}else{label=18;break;}
 case 18: 
 _free($__h_sroa_0_0_lpad_body);
 var $ehselector_slot_0=$25;var $exn_slot_0=$24;label=53;break;
 case 19: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $26=HEAP8[($__neg)];
 var $27=$26&1;
 var $tobool30=(($27<<24)>>24)==0;
 if($tobool30){var $__nc_1=$__nc_0;label=21;break;}else{label=20;break;}
 case 20: 
 var $incdec_ptr=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$incdec_ptr;label=21;break;
 case 21: 
 var $__nc_1;
 var $cmp3431=($16>>>0)<($15>>>0);
 if($cmp3431){label=22;break;}else{var $__nc_2_lcssa=$__nc_1;label=27;break;}
 case 22: 
 var $add_ptr_i=(($__atoms+40)|0);
 var $sub_ptr_rhs_cast42=$__atoms;
 var $__nc_232=$__nc_1;var $__w_033=$16;label=23;break;
 case 23: 
 var $__w_033;
 var $__nc_232;
 var $__first_addr_i_0=$arraydecay9;label=24;break;
 case 24: 
 var $__first_addr_i_0;
 var $cmp_i=($__first_addr_i_0|0)==($add_ptr_i|0);
 if($cmp_i){var $__first_addr_i_0_lcssa=$add_ptr_i;label=26;break;}else{label=25;break;}
 case 25: 
 var $28=HEAP32[(($__first_addr_i_0)>>2)];
 var $29=HEAP32[(($__w_033)>>2)];
 var $cmp1_i=($28|0)==($29|0);
 var $incdec_ptr_i=(($__first_addr_i_0+4)|0);
 if($cmp1_i){var $__first_addr_i_0_lcssa=$__first_addr_i_0;label=26;break;}else{var $__first_addr_i_0=$incdec_ptr_i;label=24;break;}
 case 26: 
 var $__first_addr_i_0_lcssa;
 var $sub_ptr_lhs_cast41=$__first_addr_i_0_lcssa;
 var $sub_ptr_sub43=((($sub_ptr_lhs_cast41)-($sub_ptr_rhs_cast42))|0);
 var $sub_ptr_div44=$sub_ptr_sub43>>2;
 var $arrayidx=((2152+$sub_ptr_div44)|0);
 var $30=HEAP8[($arrayidx)];
 HEAP8[($__nc_232)]=$30;
 var $incdec_ptr45=(($__w_033+4)|0);
 var $incdec_ptr46=(($__nc_232+1)|0);
 var $31=HEAP32[(($__wn)>>2)];
 var $cmp34=($incdec_ptr45>>>0)<($31>>>0);
 if($cmp34){var $__nc_232=$incdec_ptr46;var $__w_033=$incdec_ptr45;label=23;break;}else{var $__nc_2_lcssa=$incdec_ptr46;label=27;break;}
 case 27: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $call49=_sscanf($arraydecay12,1456,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $cmp50=($call49|0)==1;
 if($cmp50){label=32;break;}else{label=28;break;}
 case 28: 
 var $exception_i=___cxa_allocate_exception(8);
 var $32=$exception_i;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($32,1408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=31;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i,8552,(46)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=16;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___cxa_free_exception($exception_i);
 var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=17;break;
 case 32: 
 var $tobool_i_i_i248=($__h_sroa_0_1|0)==0;
 if($tobool_i_i_i248){label=34;break;}else{label=33;break;}
 case 33: 
 _free($__h_sroa_0_1);
 label=34;break;
 case 34: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $34=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i220=($34|0)==0;
 if($tobool_i_i_i220){var $40=0;label=40;break;}else{label=35;break;}
 case 35: 
 var $__ninp__i_i_i_i=(($34+12)|0);
 var $35=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($34+16)|0);
 var $36=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($35|0)==($36|0);
 if($cmp_i_i_i_i){label=36;break;}else{label=37;break;}
 case 36: 
 var $37=$34;
 var $vtable_i_i_i_i=HEAP32[(($37)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $38=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i223=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i223;label=38;break; } else { label=15;break; }
 case 37: 
 var $39=HEAP32[(($35)>>2)];
 var $retval_i_i_i_i_0=$39;label=38;break;
 case 38: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=39;break;}else{var $40=$34;label=40;break;}
 case 39: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $40=0;label=40;break;
 case 40: 
 var $40;
 var $cmp_i_i_i=($40|0)==0;
 var $41=HEAP32[(($9)>>2)];
 var $tobool_i12_i_i=($41|0)==0;
 if($tobool_i12_i_i){label=46;break;}else{label=41;break;}
 case 41: 
 var $__ninp__i_i15_i_i=(($41+12)|0);
 var $42=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($41+16)|0);
 var $43=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($42|0)==($43|0);
 if($cmp_i_i17_i_i){label=42;break;}else{label=43;break;}
 case 42: 
 var $44=$41;
 var $vtable_i_i19_i_i=HEAP32[(($44)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $45=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i224;label=44;break; } else { label=15;break; }
 case 43: 
 var $46=HEAP32[(($42)>>2)];
 var $retval_i_i7_i_i_0=$46;label=44;break;
 case 44: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=45;break;}else{label=47;break;}
 case 45: 
 HEAP32[(($9)>>2)]=0;
 label=46;break;
 case 46: 
 if($cmp_i_i_i){label=48;break;}else{label=49;break;}
 case 47: 
 var $cmp_i30_i_i=($41|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i^$cmp_i30_i_i;
 if($cmp_i_itmp){label=49;break;}else{label=48;break;}
 case 48: 
 var $47=HEAP32[(($__err)>>2)];
 var $or=$47|2;
 HEAP32[(($__err)>>2)]=$or;
 label=49;break;
 case 49: 
 var $48=(($agg_result)|0);
 HEAP32[(($48)>>2)]=$40;
 var $49=HEAP32[(($__locale__i)>>2)];
 var $50=(($49)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($50);
 var $51=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i135=($51|0)==0;
 if($tobool_i_i_i135){label=52;break;}else{label=50;break;}
 case 50: 
 var $52=HEAP32[(($__second__i_i_i_i_i)>>2)];
 var $53=$51;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=51;break; }
 case 51: 
 var $54$0 = ___cxa_find_matching_catch(-1, -1,0); var $54$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 52: 
 STACKTOP=sp;return;
 case 53: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $55=HEAP32[(($__locale__i)>>2)];
 var $56=(($55)|0);
 var $call_i30=__ZNSt3__114__shared_count16__release_sharedEv($56);
 var $_pre=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i=($_pre|0)==0;
 if($tobool_i_i_i){var $exn_slot_137=$exn_slot_0;var $ehselector_slot_139=$ehselector_slot_0;label=56;break;}else{var $57=$_pre;var $exn_slot_136=$exn_slot_0;var $ehselector_slot_138=$ehselector_slot_0;label=54;break;}
 case 54: 
 var $ehselector_slot_138;
 var $exn_slot_136;
 var $57;
 var $58=HEAP32[(($__second__i_i_i_i_i)>>2)];
 var $59=$57;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($59) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $exn_slot_137=$exn_slot_136;var $ehselector_slot_139=$ehselector_slot_138;label=56;break; } else { label=55;break; }
 case 55: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 56: 
 var $ehselector_slot_139;
 var $exn_slot_137;
 var $lpad_val$0=$exn_slot_137;
 var $lpad_val$1=0;
 var $lpad_val60$0=$lpad_val$0;
 var $lpad_val60$1=$ehselector_slot_139;
 ___resumeException($lpad_val60$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__we_addr=sp;
 var $__gbuf=(sp)+(8);
 var $__pat=(sp)+(408);
 var $__dp=(sp)+(416);
 var $__ts=(sp)+(424);
 var $__grp=(sp)+(432);
 var $__size__i_i1837=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__we_addr)>>2)]=$__we;
 var $arraydecay=(($__gbuf)|0);
 HEAP32[(($__size__i_i1837)>>2)]=0; HEAP32[((($__size__i_i1837)+(4))>>2)]=0; HEAP32[((($__size__i_i1837)+(8))>>2)]=0;
 var $__size__i_i_i1789=$__sym;
 var $__size__i_i874=$__psn;
 var $__size__i_i915=$__nsn;
 var $__size__i_i2244=$__spaces;
 HEAP32[(($__size__i_i_i1789)>>2)]=0; HEAP32[((($__size__i_i_i1789)+(4))>>2)]=0; HEAP32[((($__size__i_i_i1789)+(8))>>2)]=0;
 HEAP32[(($__size__i_i874)>>2)]=0; HEAP32[((($__size__i_i874)+(4))>>2)]=0; HEAP32[((($__size__i_i874)+(8))>>2)]=0;
 HEAP32[(($__size__i_i915)>>2)]=0; HEAP32[((($__size__i_i915)+(4))>>2)]=0; HEAP32[((($__size__i_i915)+(8))>>2)]=0;
 HEAP32[(($__size__i_i2244)>>2)]=0; HEAP32[((($__size__i_i2244)+(4))>>2)]=0; HEAP32[((($__size__i_i2244)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=26;break; }
 case 2: 
 var $add_ptr=(($__gbuf+400)|0);
 var $__first__i_i_i552=(($__wb)|0);
 var $0=HEAP32[(($__first__i_i_i552)>>2)];
 HEAP32[(($__wn)>>2)]=$0;
 var $__sbuf__i_i_i608=(($__b)|0);
 var $__sbuf__i11_i_i629=(($__e)|0);
 var $1=$__ct;
 var $__data__i_i_i1324=(($__nsn+4)|0);
 var $__data__i21_i_i1316=(($__nsn+8)|0);
 var $__data__i_i_i=(($__psn+4)|0);
 var $__data__i21_i_i=(($__psn+8)|0);
 var $and218=$__flags&512;
 var $cmp120219=($and218|0)!=0;
 var $__data__i_i_i1807=(($__sym+4)|0);
 var $__data__i21_i_i1894=(($__sym+8)|0);
 var $__data__i_i_i2388=(($__spaces+4)|0);
 var $__data__i21_i_i2725=(($__spaces+8)|0);
 var $arrayidx114=(($__pat+3)|0);
 var $__size__i23_i1847=(($__grp+4)|0);
 var $__gb_sroa_1_4_load189212327=446;var $2=$arraydecay;var $__gb_sroa_0_0_load179197330=$arraydecay;var $add_ptr191333=$add_ptr;var $__trailing_sign_0336=0;var $__p_0338=0;label=3;break;
 case 3: 
 var $__p_0338;
 var $__trailing_sign_0336;
 var $add_ptr191333;
 var $__gb_sroa_0_0_load179197330;
 var $2;
 var $__gb_sroa_1_4_load189212327;
 var $3=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i609=($3|0)==0;
 if($tobool_i_i_i609){var $9=1;label=10;break;}else{label=4;break;}
 case 4: 
 var $__ninp__i_i_i_i612=(($3+12)|0);
 var $4=HEAP32[(($__ninp__i_i_i_i612)>>2)];
 var $__einp__i_i_i_i613=(($3+16)|0);
 var $5=HEAP32[(($__einp__i_i_i_i613)>>2)];
 var $cmp_i_i_i_i614=($4|0)==($5|0);
 if($cmp_i_i_i_i614){label=5;break;}else{label=6;break;}
 case 5: 
 var $6=$3;
 var $vtable_i_i_i_i616=HEAP32[(($6)>>2)];
 var $vfn_i_i_i_i617=(($vtable_i_i_i_i616+36)|0);
 var $7=HEAP32[(($vfn_i_i_i_i617)>>2)];
 var $call_i_i_i_i652=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$7]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i599_0=$call_i_i_i_i652;label=7;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 6: 
 var $8=HEAP32[(($4)>>2)];
 var $retval_i_i_i_i599_0=$8;label=7;break;
 case 7: 
 var $retval_i_i_i_i599_0;
 var $cmp_i7_i_i_i621=($retval_i_i_i_i599_0|0)==-1;
 if($cmp_i7_i_i_i621){label=9;break;}else{label=8;break;}
 case 8: 
 var $_pre394=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp=($_pre394|0)==0;
 var $9=$phitmp;label=10;break;
 case 9: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $9=1;label=10;break;
 case 10: 
 var $9;
 var $10=HEAP32[(($__sbuf__i11_i_i629)>>2)];
 var $tobool_i12_i_i630=($10|0)==0;
 if($tobool_i12_i_i630){label=16;break;}else{label=11;break;}
 case 11: 
 var $__ninp__i_i15_i_i634=(($10+12)|0);
 var $11=HEAP32[(($__ninp__i_i15_i_i634)>>2)];
 var $__einp__i_i16_i_i635=(($10+16)|0);
 var $12=HEAP32[(($__einp__i_i16_i_i635)>>2)];
 var $cmp_i_i17_i_i636=($11|0)==($12|0);
 if($cmp_i_i17_i_i636){label=12;break;}else{label=13;break;}
 case 12: 
 var $13=$10;
 var $vtable_i_i19_i_i638=HEAP32[(($13)>>2)];
 var $vfn_i_i20_i_i639=(($vtable_i_i19_i_i638+36)|0);
 var $14=HEAP32[(($vfn_i_i20_i_i639)>>2)];
 var $call_i_i21_i_i654=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i593_0=$call_i_i21_i_i654;label=14;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 13: 
 var $15=HEAP32[(($11)>>2)];
 var $retval_i_i7_i_i593_0=$15;label=14;break;
 case 14: 
 var $retval_i_i7_i_i593_0;
 var $cmp_i7_i25_i_i643=($retval_i_i7_i_i593_0|0)==-1;
 if($cmp_i7_i25_i_i643){label=15;break;}else{label=17;break;}
 case 15: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=16;break;
 case 16: 
 if($9){var $__gb_sroa_1_4_load189212_lcssa=$__gb_sroa_1_4_load189212327;var $_lcssa=$2;var $__gb_sroa_0_0_load179197_lcssa=$__gb_sroa_0_0_load179197330;var $__trailing_sign_0_lcssa=$__trailing_sign_0336;label=256;break;}else{var $16=0;label=18;break;}
 case 17: 
 var $cmp_i30_i_i648=($10|0)==0;
 var $lnot_i=$9^$cmp_i30_i_i648;
 if($lnot_i){var $16=$10;label=18;break;}else{var $__gb_sroa_1_4_load189212_lcssa=$__gb_sroa_1_4_load189212327;var $_lcssa=$2;var $__gb_sroa_0_0_load179197_lcssa=$__gb_sroa_0_0_load179197330;var $__trailing_sign_0_lcssa=$__trailing_sign_0336;label=256;break;}
 case 18: 
 var $16;
 var $arrayidx=(($__pat+$__p_0338)|0);
 var $17=HEAP8[($arrayidx)];
 var $conv=(($17<<24)>>24);
 switch(($conv|0)){case 2:{ label=107;break;}case 4:{ var $__ng_0=0;var $add_ptr194=$add_ptr191333;var $__gb_sroa_0_0_load179200=$__gb_sroa_0_0_load179197330;var $183=$2;var $__gb_sroa_1_4_load189210=$__gb_sroa_1_4_load189212327;label=151;break;}case 1:{ label=30;break;}case 0:{ label=41;break;}case 3:{ label=66;break;}default:{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}}break;
 case 19: 
 var $lpad_loopexit224$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit224$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit224$1;var $lpad_phi$0=$lpad_loopexit224$0;var $18=$_lcssa;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189212_lcssa;label=27;break;
 case 20: 
 var $__gb_sroa_1_4_load189205_ph_ph;
 var $_ph_ph;
 var $lpad_loopexit228$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit228$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit228$1;var $lpad_phi$0=$lpad_loopexit228$0;var $18=$_ph_ph;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189205_ph_ph;label=27;break;
 case 21: 
 var $lpad_loopexit241$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit241$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit241$1;var $lpad_phi$0=$lpad_loopexit241$0;var $18=$220;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189207;label=27;break;
 case 22: 
 var $lpad_loopexit245$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit245$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit245$1;var $lpad_phi$0=$lpad_loopexit245$0;var $18=$2;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189212327;label=27;break;
 case 23: 
 var $lpad_loopexit252$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit252$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit252$1;var $lpad_phi$0=$lpad_loopexit252$0;var $18=$2;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189212327;label=27;break;
 case 24: 
 var $lpad_loopexit256$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit256$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit256$1;var $lpad_phi$0=$lpad_loopexit256$0;var $18=$2;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189212327;label=27;break;
 case 25: 
 var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph;
 var $_ph_ph227_ph_ph_ph_ph_ph;
 var $lpad_loopexit259$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit259$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit259$1;var $lpad_phi$0=$lpad_loopexit259$0;var $18=$_ph_ph227_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load189205=$__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph;label=27;break;
 case 26: 
 var $lpad_nonloopexit260$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit260$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit260$1;var $lpad_phi$0=$lpad_nonloopexit260$0;var $18=$arraydecay;var $__gb_sroa_1_4_load189205=446;label=27;break;
 case 27: 
 var $__gb_sroa_1_4_load189205;
 var $18;
 var $lpad_phi$0;
 var $lpad_phi$1;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $tobool_i_i_i677=($18|0)==0;
 if($tobool_i_i_i677){label=294;break;}else{label=28;break;}
 case 28: 
 var $19=$18;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load189205]($19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=29;break; }
 case 29: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 var $cond=($__p_0338|0)==3;
 if($cond){var $__gb_sroa_1_4_load189212_lcssa=$__gb_sroa_1_4_load189212327;var $_lcssa=$2;var $__gb_sroa_0_0_load179197_lcssa=$__gb_sroa_0_0_load179197330;var $__trailing_sign_0_lcssa=$__trailing_sign_0336;label=256;break;}else{label=31;break;}
 case 31: 
 var $21=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i693=(($21+12)|0);
 var $22=HEAP32[(($__ninp__i_i693)>>2)];
 var $__einp__i_i694=(($21+16)|0);
 var $23=HEAP32[(($__einp__i_i694)>>2)];
 var $cmp_i_i695=($22|0)==($23|0);
 if($cmp_i_i695){label=32;break;}else{label=33;break;}
 case 32: 
 var $24=$21;
 var $vtable_i_i696=HEAP32[(($24)>>2)];
 var $vfn_i_i697=(($vtable_i_i696+36)|0);
 var $25=HEAP32[(($vfn_i_i697)>>2)];
 var $call_i_i702=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i687_0=$call_i_i702;label=34;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 33: 
 var $26=HEAP32[(($22)>>2)];
 var $retval_i_i687_0=$26;label=34;break;
 case 34: 
 var $retval_i_i687_0;
 var $vtable_i=HEAP32[(($1)>>2)];
 var $vfn_i=(($vtable_i+12)|0);
 var $27=HEAP32[(($vfn_i)>>2)];
 var $call_i706=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]($__ct,8192,$retval_i_i687_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 35: 
 if($call_i706){label=36;break;}else{label=40;break;}
 case 36: 
 var $28=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i715=(($28+12)|0);
 var $29=HEAP32[(($__ninp__i_i715)>>2)];
 var $__einp__i_i716=(($28+16)|0);
 var $30=HEAP32[(($__einp__i_i716)>>2)];
 var $cmp_i_i717=($29|0)==($30|0);
 if($cmp_i_i717){label=37;break;}else{label=38;break;}
 case 37: 
 var $31=$28;
 var $vtable_i_i718=HEAP32[(($31)>>2)];
 var $vfn_i_i719=(($vtable_i_i718+40)|0);
 var $32=HEAP32[(($vfn_i_i719)>>2)];
 var $call_i_i727=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i709_0=$call_i_i727;label=39;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 38: 
 var $incdec_ptr_i_i722=(($29+4)|0);
 HEAP32[(($__ninp__i_i715)>>2)]=$incdec_ptr_i_i722;
 var $33=HEAP32[(($29)>>2)];
 var $retval_i_i709_0=$33;label=39;break;
 case 39: 
 var $retval_i_i709_0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$retval_i_i709_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 40: 
 var $34=HEAP32[(($__err)>>2)];
 var $or=$34|4;
 HEAP32[(($__err)>>2)]=$or;
 var $retval_0=0;var $322=$2;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212327;label=290;break;
 case 41: 
 var $cmp16=($__p_0338|0)==3;
 if($cmp16){var $__gb_sroa_1_4_load189212_lcssa=$__gb_sroa_1_4_load189212327;var $_lcssa=$2;var $__gb_sroa_0_0_load179197_lcssa=$__gb_sroa_0_0_load179197330;var $__trailing_sign_0_lcssa=$__trailing_sign_0336;label=256;break;}else{var $35=$16;label=42;break;}
 case 42: 
 var $35;
 var $36=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i749=($36|0)==0;
 if($tobool_i_i_i749){var $42=1;label=49;break;}else{label=43;break;}
 case 43: 
 var $__ninp__i_i_i_i752=(($36+12)|0);
 var $37=HEAP32[(($__ninp__i_i_i_i752)>>2)];
 var $__einp__i_i_i_i753=(($36+16)|0);
 var $38=HEAP32[(($__einp__i_i_i_i753)>>2)];
 var $cmp_i_i_i_i754=($37|0)==($38|0);
 if($cmp_i_i_i_i754){label=44;break;}else{label=45;break;}
 case 44: 
 var $39=$36;
 var $vtable_i_i_i_i756=HEAP32[(($39)>>2)];
 var $vfn_i_i_i_i757=(($vtable_i_i_i_i756+36)|0);
 var $40=HEAP32[(($vfn_i_i_i_i757)>>2)];
 var $call_i_i_i_i793=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i739_0=$call_i_i_i_i793;label=46;break; } else { label=24;break; }
 case 45: 
 var $41=HEAP32[(($37)>>2)];
 var $retval_i_i_i_i739_0=$41;label=46;break;
 case 46: 
 var $retval_i_i_i_i739_0;
 var $cmp_i7_i_i_i761=($retval_i_i_i_i739_0|0)==-1;
 if($cmp_i7_i_i_i761){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre395=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp412=($_pre395|0)==0;
 var $42=$phitmp412;label=49;break;
 case 48: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $42=1;label=49;break;
 case 49: 
 var $42;
 var $tobool_i12_i_i770=($35|0)==0;
 if($tobool_i12_i_i770){label=55;break;}else{label=50;break;}
 case 50: 
 var $__ninp__i_i15_i_i774=(($35+12)|0);
 var $43=HEAP32[(($__ninp__i_i15_i_i774)>>2)];
 var $__einp__i_i16_i_i775=(($35+16)|0);
 var $44=HEAP32[(($__einp__i_i16_i_i775)>>2)];
 var $cmp_i_i17_i_i776=($43|0)==($44|0);
 if($cmp_i_i17_i_i776){label=51;break;}else{label=52;break;}
 case 51: 
 var $45=$35;
 var $vtable_i_i19_i_i778=HEAP32[(($45)>>2)];
 var $vfn_i_i20_i_i779=(($vtable_i_i19_i_i778+36)|0);
 var $46=HEAP32[(($vfn_i_i20_i_i779)>>2)];
 var $call_i_i21_i_i795=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i733_0=$call_i_i21_i_i795;label=53;break; } else { label=24;break; }
 case 52: 
 var $47=HEAP32[(($43)>>2)];
 var $retval_i_i7_i_i733_0=$47;label=53;break;
 case 53: 
 var $retval_i_i7_i_i733_0;
 var $cmp_i7_i25_i_i783=($retval_i_i7_i_i733_0|0)==-1;
 if($cmp_i7_i25_i_i783){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=55;break;
 case 55: 
 if($42){var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}else{var $48=0;label=57;break;}
 case 56: 
 var $cmp_i30_i_i788=($35|0)==0;
 var $lnot_i791=$42^$cmp_i30_i_i788;
 if($lnot_i791){var $48=$35;label=57;break;}else{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}
 case 57: 
 var $48;
 var $49=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i804=(($49+12)|0);
 var $50=HEAP32[(($__ninp__i_i804)>>2)];
 var $__einp__i_i805=(($49+16)|0);
 var $51=HEAP32[(($__einp__i_i805)>>2)];
 var $cmp_i_i806=($50|0)==($51|0);
 if($cmp_i_i806){label=58;break;}else{label=59;break;}
 case 58: 
 var $52=$49;
 var $vtable_i_i807=HEAP32[(($52)>>2)];
 var $vfn_i_i808=(($vtable_i_i807+36)|0);
 var $53=HEAP32[(($vfn_i_i808)>>2)];
 var $call_i_i813=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i798_0=$call_i_i813;label=60;break; } else { label=24;break; }
 case 59: 
 var $54=HEAP32[(($50)>>2)];
 var $retval_i_i798_0=$54;label=60;break;
 case 60: 
 var $retval_i_i798_0;
 var $vtable_i819=HEAP32[(($1)>>2)];
 var $vfn_i820=(($vtable_i819+12)|0);
 var $55=HEAP32[(($vfn_i820)>>2)];
 var $call_i821=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($__ct,8192,$retval_i_i798_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=24;break; }
 case 61: 
 if($call_i821){label=62;break;}else{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}
 case 62: 
 var $56=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i837=(($56+12)|0);
 var $57=HEAP32[(($__ninp__i_i837)>>2)];
 var $__einp__i_i838=(($56+16)|0);
 var $58=HEAP32[(($__einp__i_i838)>>2)];
 var $cmp_i_i839=($57|0)==($58|0);
 if($cmp_i_i839){label=63;break;}else{label=64;break;}
 case 63: 
 var $59=$56;
 var $vtable_i_i840=HEAP32[(($59)>>2)];
 var $vfn_i_i841=(($vtable_i_i840+40)|0);
 var $60=HEAP32[(($vfn_i_i841)>>2)];
 var $call_i_i852=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i830_0=$call_i_i852;label=65;break; } else { label=24;break; }
 case 64: 
 var $incdec_ptr_i_i844=(($57+4)|0);
 HEAP32[(($__ninp__i_i837)>>2)]=$incdec_ptr_i_i844;
 var $61=HEAP32[(($57)>>2)];
 var $retval_i_i830_0=$61;label=65;break;
 case 65: 
 var $retval_i_i830_0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$retval_i_i830_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $35=$48;label=42;break; } else { label=24;break; }
 case 66: 
 var $62=HEAP8[($__size__i_i874)];
 var $conv_i_i875=($62&255);
 var $and_i_i876=$conv_i_i875&1;
 var $tobool_i_i877=($and_i_i876|0)==0;
 var $63=HEAP32[(($__data__i_i_i)>>2)];
 var $shr_i_i894108=$conv_i_i875>>>1;
 var $cond_i896=($tobool_i_i877?$shr_i_i894108:$63);
 var $64=HEAP8[($__size__i_i915)];
 var $conv_i_i916=($64&255);
 var $and_i_i917=$conv_i_i916&1;
 var $tobool_i_i918=($and_i_i917|0)==0;
 var $65=HEAP32[(($__data__i_i_i1324)>>2)];
 var $shr_i_i935109=$conv_i_i916>>>1;
 var $cond_i937=($tobool_i_i918?$shr_i_i935109:$65);
 var $add=(((-$cond_i937))|0);
 var $cmp35=($cond_i896|0)==($add|0);
 if($cmp35){var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}else{label=67;break;}
 case 67: 
 var $66=HEAP32[(($__data__i_i_i)>>2)];
 var $shr_i_i994110=$conv_i_i875>>>1;
 var $cond_i996=($tobool_i_i877?$shr_i_i994110:$66);
 var $cmp38=($cond_i996|0)==0;
 if($cmp38){label=69;break;}else{label=68;break;}
 case 68: 
 var $67=HEAP32[(($__data__i_i_i1324)>>2)];
 var $shr_i_i1035111=$conv_i_i916>>>1;
 var $cond_i1037=($tobool_i_i918?$shr_i_i1035111:$67);
 var $cmp40=($cond_i1037|0)==0;
 if($cmp40){label=69;break;}else{label=89;break;}
 case 69: 
 var $68=HEAP32[(($__data__i_i_i)>>2)];
 var $shr_i_i1084114=$conv_i_i875>>>1;
 var $cond_i1086=($tobool_i_i877?$shr_i_i1084114:$68);
 var $cmp43=($cond_i1086|0)==0;
 var $69=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1273=(($69+12)|0);
 var $70=HEAP32[(($__ninp__i_i1273)>>2)];
 var $__einp__i_i1274=(($69+16)|0);
 var $71=HEAP32[(($__einp__i_i1274)>>2)];
 var $cmp_i_i1275=($70|0)==($71|0);
 if($cmp43){label=80;break;}else{label=70;break;}
 case 70: 
 if($cmp_i_i1275){label=71;break;}else{label=73;break;}
 case 71: 
 var $72=$69;
 var $vtable_i_i1116=HEAP32[(($72)>>2)];
 var $vfn_i_i1117=(($vtable_i_i1116+36)|0);
 var $73=HEAP32[(($vfn_i_i1117)>>2)];
 var $call_i_i1122=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 72: 
 var $_pre397=HEAP8[($__size__i_i874)];
 var $retval_i_i1107_0=$call_i_i1122;var $75=$_pre397;label=74;break;
 case 73: 
 var $74=HEAP32[(($70)>>2)];
 var $retval_i_i1107_0=$74;var $75=$62;label=74;break;
 case 74: 
 var $75;
 var $retval_i_i1107_0;
 var $and_i_i_i=$75&1;
 var $tobool_i_i_i1137=(($and_i_i_i<<24)>>24)==0;
 var $76=HEAP32[(($__data__i21_i_i)>>2)];
 var $__data__i_i_i_=($tobool_i_i_i1137?$__data__i_i_i:$76);
 var $77=HEAP32[(($__data__i_i_i_)>>2)];
 var $cmp49=($retval_i_i1107_0|0)==($77|0);
 if($cmp49){label=75;break;}else{label=79;break;}
 case 75: 
 var $78=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1213=(($78+12)|0);
 var $79=HEAP32[(($__ninp__i_i1213)>>2)];
 var $__einp__i_i1214=(($78+16)|0);
 var $80=HEAP32[(($__einp__i_i1214)>>2)];
 var $cmp_i_i1215=($79|0)==($80|0);
 if($cmp_i_i1215){label=76;break;}else{label=77;break;}
 case 76: 
 var $81=$78;
 var $vtable_i_i1216=HEAP32[(($81)>>2)];
 var $vfn_i_i1217=(($vtable_i_i1216+40)|0);
 var $82=HEAP32[(($vfn_i_i1217)>>2)];
 var $call_i_i1223=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$82]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 77: 
 var $incdec_ptr_i_i1220=(($79+4)|0);
 HEAP32[(($__ninp__i_i1213)>>2)]=$incdec_ptr_i_i1220;
 label=78;break;
 case 78: 
 var $83=HEAP8[($__size__i_i874)];
 var $conv_i_i1243=($83&255);
 var $and_i_i1244=$conv_i_i1243&1;
 var $tobool_i_i1245=($and_i_i1244|0)==0;
 var $84=HEAP32[(($__data__i_i_i)>>2)];
 var $shr_i_i1262116=$conv_i_i1243>>>1;
 var $cond_i1264=($tobool_i_i1245?$shr_i_i1262116:$84);
 var $cmp54=($cond_i1264>>>0)>1;
 var $__psn___trailing_sign_0=($cmp54?$__psn:$__trailing_sign_0336);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;
 case 79: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;
 case 80: 
 if($cmp_i_i1275){label=81;break;}else{label=83;break;}
 case 81: 
 var $85=$69;
 var $vtable_i_i1276=HEAP32[(($85)>>2)];
 var $vfn_i_i1277=(($vtable_i_i1276+36)|0);
 var $86=HEAP32[(($vfn_i_i1277)>>2)];
 var $call_i_i1282=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 82: 
 var $_pre396=HEAP8[($__size__i_i915)];
 var $retval_i_i1267_0=$call_i_i1282;var $88=$_pre396;label=84;break;
 case 83: 
 var $87=HEAP32[(($70)>>2)];
 var $retval_i_i1267_0=$87;var $88=$64;label=84;break;
 case 84: 
 var $88;
 var $retval_i_i1267_0;
 var $and_i_i_i1308=$88&1;
 var $tobool_i_i_i1309=(($and_i_i_i1308<<24)>>24)==0;
 var $89=HEAP32[(($__data__i21_i_i1316)>>2)];
 var $__data__i_i_i1324_=($tobool_i_i_i1309?$__data__i_i_i1324:$89);
 var $90=HEAP32[(($__data__i_i_i1324_)>>2)];
 var $cmp64=($retval_i_i1267_0|0)==($90|0);
 if($cmp64){label=85;break;}else{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}
 case 85: 
 var $91=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1356=(($91+12)|0);
 var $92=HEAP32[(($__ninp__i_i1356)>>2)];
 var $__einp__i_i1357=(($91+16)|0);
 var $93=HEAP32[(($__einp__i_i1357)>>2)];
 var $cmp_i_i1358=($92|0)==($93|0);
 if($cmp_i_i1358){label=86;break;}else{label=87;break;}
 case 86: 
 var $94=$91;
 var $vtable_i_i1359=HEAP32[(($94)>>2)];
 var $vfn_i_i1360=(($vtable_i_i1359+40)|0);
 var $95=HEAP32[(($vfn_i_i1360)>>2)];
 var $call_i_i1366=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($91) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 87: 
 var $incdec_ptr_i_i1363=(($92+4)|0);
 HEAP32[(($__ninp__i_i1356)>>2)]=$incdec_ptr_i_i1363;
 label=88;break;
 case 88: 
 HEAP8[($__neg)]=1;
 var $96=HEAP8[($__size__i_i915)];
 var $conv_i_i1386=($96&255);
 var $and_i_i1387=$conv_i_i1386&1;
 var $tobool_i_i1388=($and_i_i1387|0)==0;
 var $97=HEAP32[(($__data__i_i_i1324)>>2)];
 var $shr_i_i1405115=$conv_i_i1386>>>1;
 var $cond_i1407=($tobool_i_i1388?$shr_i_i1405115:$97);
 var $cmp69=($cond_i1407>>>0)>1;
 var $__nsn___trailing_sign_0=($cmp69?$__nsn:$__trailing_sign_0336);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;
 case 89: 
 var $98=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1434=(($98+12)|0);
 var $99=HEAP32[(($__ninp__i_i1434)>>2)];
 var $__einp__i_i1435=(($98+16)|0);
 var $100=HEAP32[(($__einp__i_i1435)>>2)];
 var $cmp_i_i1436=($99|0)==($100|0);
 if($cmp_i_i1436){label=90;break;}else{label=92;break;}
 case 90: 
 var $101=$98;
 var $vtable_i_i1437=HEAP32[(($101)>>2)];
 var $vfn_i_i1438=(($vtable_i_i1437+36)|0);
 var $102=HEAP32[(($vfn_i_i1438)>>2)];
 var $call_i_i1443=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$102]($98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 91: 
 var $_pre398=HEAP8[($__size__i_i874)];
 var $retval_i_i1428_0=$call_i_i1443;var $104=$_pre398;label=93;break;
 case 92: 
 var $103=HEAP32[(($99)>>2)];
 var $retval_i_i1428_0=$103;var $104=$62;label=93;break;
 case 93: 
 var $104;
 var $retval_i_i1428_0;
 var $and_i_i_i1469=$104&1;
 var $tobool_i_i_i1470=(($and_i_i_i1469<<24)>>24)==0;
 var $105=HEAP32[(($__data__i21_i_i)>>2)];
 var $__data__i_i_i_422=($tobool_i_i_i1470?$__data__i_i_i:$105);
 var $106=HEAP32[(($__data__i_i_i_422)>>2)];
 var $cmp79=($retval_i_i1428_0|0)==($106|0);
 var $107=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1564=(($107+12)|0);
 var $108=HEAP32[(($__ninp__i_i1564)>>2)];
 var $__einp__i_i1565=(($107+16)|0);
 var $109=HEAP32[(($__einp__i_i1565)>>2)];
 var $cmp_i_i1566=($108|0)==($109|0);
 if($cmp79){label=94;break;}else{label=98;break;}
 case 94: 
 if($cmp_i_i1566){label=95;break;}else{label=96;break;}
 case 95: 
 var $110=$107;
 var $vtable_i_i1567=HEAP32[(($110)>>2)];
 var $vfn_i_i1568=(($vtable_i_i1567+40)|0);
 var $111=HEAP32[(($vfn_i_i1568)>>2)];
 var $call_i_i1574=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]($107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 96: 
 var $incdec_ptr_i_i1571=(($108+4)|0);
 HEAP32[(($__ninp__i_i1564)>>2)]=$incdec_ptr_i_i1571;
 label=97;break;
 case 97: 
 var $112=HEAP8[($__size__i_i874)];
 var $conv_i_i1594=($112&255);
 var $and_i_i1595=$conv_i_i1594&1;
 var $tobool_i_i1596=($and_i_i1595|0)==0;
 var $113=HEAP32[(($__data__i_i_i)>>2)];
 var $shr_i_i1613113=$conv_i_i1594>>>1;
 var $cond_i1615=($tobool_i_i1596?$shr_i_i1613113:$113);
 var $cmp84=($cond_i1615>>>0)>1;
 var $__psn___trailing_sign_0117=($cmp84?$__psn:$__trailing_sign_0336);
 var $__trailing_sign_1=$__psn___trailing_sign_0117;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;
 case 98: 
 if($cmp_i_i1566){label=99;break;}else{label=100;break;}
 case 99: 
 var $114=$107;
 var $vtable_i_i1627=HEAP32[(($114)>>2)];
 var $vfn_i_i1628=(($vtable_i_i1627+36)|0);
 var $115=HEAP32[(($vfn_i_i1628)>>2)];
 var $call_i_i1633=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i1618_0=$call_i_i1633;label=101;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 100: 
 var $116=HEAP32[(($108)>>2)];
 var $retval_i_i1618_0=$116;label=101;break;
 case 101: 
 var $retval_i_i1618_0;
 var $117=HEAP8[($__size__i_i915)];
 var $and_i_i_i1659=$117&1;
 var $tobool_i_i_i1660=(($and_i_i_i1659<<24)>>24)==0;
 var $118=HEAP32[(($__data__i21_i_i1316)>>2)];
 var $__data__i_i_i1324_423=($tobool_i_i_i1660?$__data__i_i_i1324:$118);
 var $119=HEAP32[(($__data__i_i_i1324_423)>>2)];
 var $cmp92=($retval_i_i1618_0|0)==($119|0);
 if($cmp92){label=102;break;}else{label=106;break;}
 case 102: 
 var $120=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1688=(($120+12)|0);
 var $121=HEAP32[(($__ninp__i_i1688)>>2)];
 var $__einp__i_i1689=(($120+16)|0);
 var $122=HEAP32[(($__einp__i_i1689)>>2)];
 var $cmp_i_i1690=($121|0)==($122|0);
 if($cmp_i_i1690){label=103;break;}else{label=104;break;}
 case 103: 
 var $123=$120;
 var $vtable_i_i1691=HEAP32[(($123)>>2)];
 var $vfn_i_i1692=(($vtable_i_i1691+40)|0);
 var $124=HEAP32[(($vfn_i_i1692)>>2)];
 var $call_i_i1698=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$124]($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$2;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189212327;label=25;break; }
 case 104: 
 var $incdec_ptr_i_i1695=(($121+4)|0);
 HEAP32[(($__ninp__i_i1688)>>2)]=$incdec_ptr_i_i1695;
 label=105;break;
 case 105: 
 HEAP8[($__neg)]=1;
 var $125=HEAP8[($__size__i_i915)];
 var $conv_i_i1718=($125&255);
 var $and_i_i1719=$conv_i_i1718&1;
 var $tobool_i_i1720=($and_i_i1719|0)==0;
 var $126=HEAP32[(($__data__i_i_i1324)>>2)];
 var $shr_i_i1737112=$conv_i_i1718>>>1;
 var $cond_i1739=($tobool_i_i1720?$shr_i_i1737112:$126);
 var $cmp97=($cond_i1739>>>0)>1;
 var $__nsn___trailing_sign_0118=($cmp97?$__nsn:$__trailing_sign_0336);
 var $__trailing_sign_1=$__nsn___trailing_sign_0118;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;
 case 106: 
 var $127=HEAP32[(($__err)>>2)];
 var $or101=$127|4;
 HEAP32[(($__err)>>2)]=$or101;
 var $retval_0=0;var $322=$2;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212327;label=290;break;
 case 107: 
 var $tobool108=($__trailing_sign_0336|0)!=0;
 var $cmp110=($__p_0338>>>0)<2;
 var $or_cond=$tobool108|$cmp110;
 if($or_cond){label=111;break;}else{label=108;break;}
 case 108: 
 var $cmp111=($__p_0338|0)==2;
 if($cmp111){label=109;break;}else{var $129=0;label=110;break;}
 case 109: 
 var $128=HEAP8[($arrayidx114)];
 var $cmp116=(($128<<24)>>24)!=0;
 var $129=$cmp116;label=110;break;
 case 110: 
 var $129;
 var $brmerge=$cmp120219|$129;
 if($brmerge){label=111;break;}else{var $__trailing_sign_1=0;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}
 case 111: 
 var $130=HEAP8[($__size__i_i_i1789)];
 var $and_i_i_i1791=$130&1;
 var $tobool_i_i_i1792=(($and_i_i_i1791<<24)>>24)==0;
 var $131=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_=($tobool_i_i_i1792?$__data__i_i_i1807:$131);
 var $cmp128=($__p_0338|0)==0;
 if($cmp128){var $__sym_curr_char_sroa_0_0=$__data__i_i_i1807_;var $151=$130;var $150=$16;label=124;break;}else{label=112;break;}
 case 112: 
 var $sub=((($__p_0338)-(1))|0);
 var $arrayidx130=(($__pat+$sub)|0);
 var $132=HEAP8[($arrayidx130)];
 var $switch=($132&255)<2;
 if($switch){var $__sym_space_end_sroa_0_0=$__data__i_i_i1807_;var $133=$130;label=113;break;}else{var $__sym_curr_char_sroa_0_0=$__data__i_i_i1807_;var $151=$130;var $150=$16;label=124;break;}
 case 113: 
 var $133;
 var $__sym_space_end_sroa_0_0;
 var $and_i_i_i1886=$133&1;
 var $tobool_i_i_i1887=(($and_i_i_i1886<<24)>>24)==0;
 var $134=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_424=($tobool_i_i_i1887?$__data__i_i_i1807:$134);
 var $conv_i_i22_i=($133&255);
 var $and_i_i23_i=$conv_i_i22_i&1;
 var $tobool_i_i24_i=($and_i_i23_i|0)==0;
 var $135=HEAP32[(($__data__i_i_i1807)>>2)];
 var $shr_i_i_i104=$conv_i_i22_i>>>1;
 var $cond_i34_i=($tobool_i_i24_i?$shr_i_i_i104:$135);
 var $add_ptr_i1906=(($__data__i_i_i1807_424+($cond_i34_i<<2))|0);
 var $lnot_i1922=($__sym_space_end_sroa_0_0|0)==($add_ptr_i1906|0);
 if($lnot_i1922){var $138=$133;label=118;break;}else{label=114;break;}
 case 114: 
 var $136=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
 var $vtable_i2014=HEAP32[(($1)>>2)];
 var $vfn_i2015=(($vtable_i2014+12)|0);
 var $137=HEAP32[(($vfn_i2015)>>2)];
 var $call_i2016=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]($__ct,8192,$136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=115;break; } else { label=22;break; }
 case 115: 
 if($call_i2016){label=116;break;}else{label=117;break;}
 case 116: 
 var $incdec_ptr_i=(($__sym_space_end_sroa_0_0+4)|0);
 var $_pre399=HEAP8[($__size__i_i_i1789)];
 var $__sym_space_end_sroa_0_0=$incdec_ptr_i;var $133=$_pre399;label=113;break;
 case 117: 
 var $_pre400=HEAP8[($__size__i_i_i1789)];
 var $138=$_pre400;label=118;break;
 case 118: 
 var $138;
 var $and_i_i_i2048=$138&1;
 var $tobool_i_i_i2049=(($and_i_i_i2048<<24)>>24)==0;
 var $139=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_425=($tobool_i_i_i2049?$__data__i_i_i1807:$139);
 var $sub_ptr_lhs_cast_i=$__sym_space_end_sroa_0_0;
 var $sub_ptr_rhs_cast_i=$__data__i_i_i1807_425;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i=$sub_ptr_sub_i>>2;
 var $140=HEAP8[($__size__i_i2244)];
 var $conv_i_i2245=($140&255);
 var $and_i_i2246=$conv_i_i2245&1;
 var $tobool_i_i2247=($and_i_i2246|0)==0;
 var $141=HEAP32[(($__data__i_i_i2388)>>2)];
 var $shr_i_i2264105=$conv_i_i2245>>>1;
 var $cond_i2266=($tobool_i_i2247?$shr_i_i2264105:$141);
 var $cmp155=($sub_ptr_div_i>>>0)>($cond_i2266>>>0);
 if($cmp155){label=123;break;}else{label=119;break;}
 case 119: 
 var $and_i_i_i2372=$140&1;
 var $tobool_i_i_i2373=(($and_i_i_i2372<<24)>>24)==0;
 var $142=HEAP32[(($__data__i21_i_i2725)>>2)];
 var $__data__i_i_i2388_=($tobool_i_i_i2373?$__data__i_i_i2388:$142);
 var $143=HEAP32[(($__data__i_i_i2388)>>2)];
 var $shr_i_i_i2420106=$conv_i_i2245>>>1;
 var $cond_i34_i2422=($tobool_i_i2247?$shr_i_i_i2420106:$143);
 var $add_ptr_i2423_sum=((($cond_i34_i2422)-($sub_ptr_div_i))|0);
 var $add_ptr_i_i_i=(($__data__i_i_i2388_+($add_ptr_i2423_sum<<2))|0);
 var $144=HEAP32[(($__data__i21_i_i2725)>>2)];
 var $__data__i_i_i2388_426=($tobool_i_i_i2373?$__data__i_i_i2388:$144);
 var $145=HEAP32[(($__data__i_i_i2388)>>2)];
 var $shr_i_i_i2765107=$conv_i_i2245>>>1;
 var $cond_i34_i2767=($tobool_i_i2247?$shr_i_i_i2765107:$145);
 var $add_ptr_i2768=(($__data__i_i_i2388_426+($cond_i34_i2767<<2))|0);
 var $146=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_427=($tobool_i_i_i2049?$__data__i_i_i1807:$146);
 var $lnot_i_i_i249=($add_ptr_i_i_i|0)==($add_ptr_i2768|0);
 if($lnot_i_i_i249){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $151=$138;var $150=$16;label=124;break;}else{var $agg_tmp4_i_sroa_0_0250=$add_ptr_i_i_i;var $agg_tmp29_i_sroa_0_0251=$__data__i_i_i1807_427;label=120;break;}
 case 120: 
 var $agg_tmp29_i_sroa_0_0251;
 var $agg_tmp4_i_sroa_0_0250;
 var $147=HEAP32[(($agg_tmp4_i_sroa_0_0250)>>2)];
 var $148=HEAP32[(($agg_tmp29_i_sroa_0_0251)>>2)];
 var $cmp_i_i_i2622=($147|0)==($148|0);
 if($cmp_i_i_i2622){label=121;break;}else{label=123;break;}
 case 121: 
 var $incdec_ptr_i9_i_i=(($agg_tmp4_i_sroa_0_0250+4)|0);
 var $lnot_i_i_i=($incdec_ptr_i9_i_i|0)==($add_ptr_i2768|0);
 if($lnot_i_i_i){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $151=$138;var $150=$16;label=124;break;}else{label=122;break;}
 case 122: 
 var $incdec_ptr_i_i_i=(($agg_tmp29_i_sroa_0_0251+4)|0);
 var $agg_tmp4_i_sroa_0_0250=$incdec_ptr_i9_i_i;var $agg_tmp29_i_sroa_0_0251=$incdec_ptr_i_i_i;label=120;break;
 case 123: 
 var $149=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_428=($tobool_i_i_i2049?$__data__i_i_i1807:$149);
 var $__sym_curr_char_sroa_0_0=$__data__i_i_i1807_428;var $151=$138;var $150=$16;label=124;break;
 case 124: 
 var $150;
 var $151;
 var $__sym_curr_char_sroa_0_0;
 var $and_i_i_i2484=$151&1;
 var $tobool_i_i_i2485=(($and_i_i_i2484<<24)>>24)==0;
 var $152=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_429=($tobool_i_i_i2485?$__data__i_i_i1807:$152);
 var $conv_i_i22_i2512=($151&255);
 var $and_i_i23_i2513=$conv_i_i22_i2512&1;
 var $tobool_i_i24_i2514=($and_i_i23_i2513|0)==0;
 var $153=HEAP32[(($__data__i_i_i1807)>>2)];
 var $shr_i_i_i2532102=$conv_i_i22_i2512>>>1;
 var $cond_i34_i2534=($tobool_i_i24_i2514?$shr_i_i_i2532102:$153);
 var $add_ptr_i2535=(($__data__i_i_i1807_429+($cond_i34_i2534<<2))|0);
 var $lnot_i2446=($__sym_curr_char_sroa_0_0|0)==($add_ptr_i2535|0);
 if($lnot_i2446){label=148;break;}else{label=125;break;}
 case 125: 
 var $154=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i2287=($154|0)==0;
 if($tobool_i_i_i2287){var $160=1;label=132;break;}else{label=126;break;}
 case 126: 
 var $__ninp__i_i_i_i2290=(($154+12)|0);
 var $155=HEAP32[(($__ninp__i_i_i_i2290)>>2)];
 var $__einp__i_i_i_i2291=(($154+16)|0);
 var $156=HEAP32[(($__einp__i_i_i_i2291)>>2)];
 var $cmp_i_i_i_i2292=($155|0)==($156|0);
 if($cmp_i_i_i_i2292){label=127;break;}else{label=128;break;}
 case 127: 
 var $157=$154;
 var $vtable_i_i_i_i2294=HEAP32[(($157)>>2)];
 var $vfn_i_i_i_i2295=(($vtable_i_i_i_i2294+36)|0);
 var $158=HEAP32[(($vfn_i_i_i_i2295)>>2)];
 var $call_i_i_i_i2331=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i2277_0=$call_i_i_i_i2331;label=129;break; } else { label=23;break; }
 case 128: 
 var $159=HEAP32[(($155)>>2)];
 var $retval_i_i_i_i2277_0=$159;label=129;break;
 case 129: 
 var $retval_i_i_i_i2277_0;
 var $cmp_i7_i_i_i2299=($retval_i_i_i_i2277_0|0)==-1;
 if($cmp_i7_i_i_i2299){label=131;break;}else{label=130;break;}
 case 130: 
 var $_pre401=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp411=($_pre401|0)==0;
 var $160=$phitmp411;label=132;break;
 case 131: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $160=1;label=132;break;
 case 132: 
 var $160;
 var $tobool_i12_i_i2308=($150|0)==0;
 if($tobool_i12_i_i2308){label=138;break;}else{label=133;break;}
 case 133: 
 var $__ninp__i_i15_i_i2312=(($150+12)|0);
 var $161=HEAP32[(($__ninp__i_i15_i_i2312)>>2)];
 var $__einp__i_i16_i_i2313=(($150+16)|0);
 var $162=HEAP32[(($__einp__i_i16_i_i2313)>>2)];
 var $cmp_i_i17_i_i2314=($161|0)==($162|0);
 if($cmp_i_i17_i_i2314){label=134;break;}else{label=135;break;}
 case 134: 
 var $163=$150;
 var $vtable_i_i19_i_i2316=HEAP32[(($163)>>2)];
 var $vfn_i_i20_i_i2317=(($vtable_i_i19_i_i2316+36)|0);
 var $164=HEAP32[(($vfn_i_i20_i_i2317)>>2)];
 var $call_i_i21_i_i2333=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i2271_0=$call_i_i21_i_i2333;label=136;break; } else { label=23;break; }
 case 135: 
 var $165=HEAP32[(($161)>>2)];
 var $retval_i_i7_i_i2271_0=$165;label=136;break;
 case 136: 
 var $retval_i_i7_i_i2271_0;
 var $cmp_i7_i25_i_i2321=($retval_i_i7_i_i2271_0|0)==-1;
 if($cmp_i7_i25_i_i2321){label=137;break;}else{label=139;break;}
 case 137: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=138;break;
 case 138: 
 if($160){label=148;break;}else{var $166=0;label=140;break;}
 case 139: 
 var $cmp_i30_i_i2326=($150|0)==0;
 var $lnot_i2329=$160^$cmp_i30_i_i2326;
 if($lnot_i2329){var $166=$150;label=140;break;}else{label=148;break;}
 case 140: 
 var $166;
 var $167=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i2216=(($167+12)|0);
 var $168=HEAP32[(($__ninp__i_i2216)>>2)];
 var $__einp__i_i2217=(($167+16)|0);
 var $169=HEAP32[(($__einp__i_i2217)>>2)];
 var $cmp_i_i2218=($168|0)==($169|0);
 if($cmp_i_i2218){label=141;break;}else{label=142;break;}
 case 141: 
 var $170=$167;
 var $vtable_i_i2219=HEAP32[(($170)>>2)];
 var $vfn_i_i2220=(($vtable_i_i2219+36)|0);
 var $171=HEAP32[(($vfn_i_i2220)>>2)];
 var $call_i_i2225=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$171]($167) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i2210_0=$call_i_i2225;label=143;break; } else { label=23;break; }
 case 142: 
 var $172=HEAP32[(($168)>>2)];
 var $retval_i_i2210_0=$172;label=143;break;
 case 143: 
 var $retval_i_i2210_0;
 var $173=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
 var $cmp178=($retval_i_i2210_0|0)==($173|0);
 if($cmp178){label=144;break;}else{label=148;break;}
 case 144: 
 var $174=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i2189=(($174+12)|0);
 var $175=HEAP32[(($__ninp__i_i2189)>>2)];
 var $__einp__i_i2190=(($174+16)|0);
 var $176=HEAP32[(($__einp__i_i2190)>>2)];
 var $cmp_i_i2191=($175|0)==($176|0);
 if($cmp_i_i2191){label=145;break;}else{label=146;break;}
 case 145: 
 var $177=$174;
 var $vtable_i_i2192=HEAP32[(($177)>>2)];
 var $vfn_i_i2193=(($vtable_i_i2192+40)|0);
 var $178=HEAP32[(($vfn_i_i2193)>>2)];
 var $call_i_i2199=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($174) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=23;break; }
 case 146: 
 var $incdec_ptr_i_i2196=(($175+4)|0);
 HEAP32[(($__ninp__i_i2189)>>2)]=$incdec_ptr_i_i2196;
 label=147;break;
 case 147: 
 var $incdec_ptr_i2181=(($__sym_curr_char_sroa_0_0+4)|0);
 var $_pre=HEAP8[($__size__i_i_i1789)];
 var $__sym_curr_char_sroa_0_0=$incdec_ptr_i2181;var $151=$_pre;var $150=$166;label=124;break;
 case 148: 
 if($cmp120219){label=149;break;}else{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}
 case 149: 
 var $179=HEAP8[($__size__i_i_i1789)];
 var $and_i_i_i2122=$179&1;
 var $tobool_i_i_i2123=(($and_i_i_i2122<<24)>>24)==0;
 var $180=HEAP32[(($__data__i21_i_i1894)>>2)];
 var $__data__i_i_i1807_430=($tobool_i_i_i2123?$__data__i_i_i1807:$180);
 var $conv_i_i22_i2150=($179&255);
 var $and_i_i23_i2151=$conv_i_i22_i2150&1;
 var $tobool_i_i24_i2152=($and_i_i23_i2151|0)==0;
 var $181=HEAP32[(($__data__i_i_i1807)>>2)];
 var $shr_i_i_i2170103=$conv_i_i22_i2150>>>1;
 var $cond_i34_i2172=($tobool_i_i24_i2152?$shr_i_i_i2170103:$181);
 var $add_ptr_i2173=(($__data__i_i_i1807_430+($cond_i34_i2172<<2))|0);
 var $lnot_i2084=($__sym_curr_char_sroa_0_0|0)==($add_ptr_i2173|0);
 if($lnot_i2084){var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr191333;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179197330;var $289=$2;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189212327;label=255;break;}else{label=150;break;}
 case 150: 
 var $182=HEAP32[(($__err)>>2)];
 var $or190=$182|4;
 HEAP32[(($__err)>>2)]=$or190;
 var $retval_0=0;var $322=$2;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212327;label=290;break;
 case 151: 
 var $__gb_sroa_1_4_load189210;
 var $183;
 var $__gb_sroa_0_0_load179200;
 var $add_ptr194;
 var $__ng_0;
 var $184=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i1962=($184|0)==0;
 if($tobool_i_i_i1962){var $190=1;label=158;break;}else{label=152;break;}
 case 152: 
 var $__ninp__i_i_i_i1965=(($184+12)|0);
 var $185=HEAP32[(($__ninp__i_i_i_i1965)>>2)];
 var $__einp__i_i_i_i1966=(($184+16)|0);
 var $186=HEAP32[(($__einp__i_i_i_i1966)>>2)];
 var $cmp_i_i_i_i1967=($185|0)==($186|0);
 if($cmp_i_i_i_i1967){label=153;break;}else{label=154;break;}
 case 153: 
 var $187=$184;
 var $vtable_i_i_i_i1969=HEAP32[(($187)>>2)];
 var $vfn_i_i_i_i1970=(($vtable_i_i_i_i1969+36)|0);
 var $188=HEAP32[(($vfn_i_i_i_i1970)>>2)];
 var $call_i_i_i_i2006=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i1952_0=$call_i_i_i_i2006;label=155;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 154: 
 var $189=HEAP32[(($185)>>2)];
 var $retval_i_i_i_i1952_0=$189;label=155;break;
 case 155: 
 var $retval_i_i_i_i1952_0;
 var $cmp_i7_i_i_i1974=($retval_i_i_i_i1952_0|0)==-1;
 if($cmp_i7_i_i_i1974){label=157;break;}else{label=156;break;}
 case 156: 
 var $_pre402=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp408=($_pre402|0)==0;
 var $190=$phitmp408;label=158;break;
 case 157: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $190=1;label=158;break;
 case 158: 
 var $190;
 var $191=HEAP32[(($__sbuf__i11_i_i629)>>2)];
 var $tobool_i12_i_i1983=($191|0)==0;
 if($tobool_i12_i_i1983){label=164;break;}else{label=159;break;}
 case 159: 
 var $__ninp__i_i15_i_i1987=(($191+12)|0);
 var $192=HEAP32[(($__ninp__i_i15_i_i1987)>>2)];
 var $__einp__i_i16_i_i1988=(($191+16)|0);
 var $193=HEAP32[(($__einp__i_i16_i_i1988)>>2)];
 var $cmp_i_i17_i_i1989=($192|0)==($193|0);
 if($cmp_i_i17_i_i1989){label=160;break;}else{label=161;break;}
 case 160: 
 var $194=$191;
 var $vtable_i_i19_i_i1991=HEAP32[(($194)>>2)];
 var $vfn_i_i20_i_i1992=(($vtable_i_i19_i_i1991+36)|0);
 var $195=HEAP32[(($vfn_i_i20_i_i1992)>>2)];
 var $call_i_i21_i_i2008=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i1946_0=$call_i_i21_i_i2008;label=162;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 161: 
 var $196=HEAP32[(($192)>>2)];
 var $retval_i_i7_i_i1946_0=$196;label=162;break;
 case 162: 
 var $retval_i_i7_i_i1946_0;
 var $cmp_i7_i25_i_i1996=($retval_i_i7_i_i1946_0|0)==-1;
 if($cmp_i7_i25_i_i1996){label=163;break;}else{label=165;break;}
 case 163: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=164;break;
 case 164: 
 if($190){label=189;break;}else{label=166;break;}
 case 165: 
 var $cmp_i30_i_i2001=($191|0)==0;
 var $lnot_i2004=$190^$cmp_i30_i_i2001;
 if($lnot_i2004){label=166;break;}else{label=189;break;}
 case 166: 
 var $197=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1930=(($197+12)|0);
 var $198=HEAP32[(($__ninp__i_i1930)>>2)];
 var $__einp__i_i1931=(($197+16)|0);
 var $199=HEAP32[(($__einp__i_i1931)>>2)];
 var $cmp_i_i1932=($198|0)==($199|0);
 if($cmp_i_i1932){label=167;break;}else{label=168;break;}
 case 167: 
 var $200=$197;
 var $vtable_i_i1933=HEAP32[(($200)>>2)];
 var $vfn_i_i1934=(($vtable_i_i1933+36)|0);
 var $201=HEAP32[(($vfn_i_i1934)>>2)];
 var $call_i_i1939=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i1924_0=$call_i_i1939;label=169;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 168: 
 var $202=HEAP32[(($198)>>2)];
 var $retval_i_i1924_0=$202;label=169;break;
 case 169: 
 var $retval_i_i1924_0;
 var $vtable_i1913=HEAP32[(($1)>>2)];
 var $vfn_i1914=(($vtable_i1913+12)|0);
 var $203=HEAP32[(($vfn_i1914)>>2)];
 var $call_i1915=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($__ct,2048,$retval_i_i1924_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 170: 
 if($call_i1915){label=171;break;}else{label=175;break;}
 case 171: 
 var $204=HEAP32[(($__wn)>>2)];
 var $205=HEAP32[(($__we_addr)>>2)];
 var $cmp205=($204|0)==($205|0);
 if($cmp205){label=172;break;}else{var $206=$204;label=174;break;}
 case 172: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we_addr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=173;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 173: 
 var $_pre403=HEAP32[(($__wn)>>2)];
 var $206=$_pre403;label=174;break;
 case 174: 
 var $206;
 var $incdec_ptr=(($206+4)|0);
 HEAP32[(($__wn)>>2)]=$incdec_ptr;
 HEAP32[(($206)>>2)]=$retval_i_i1924_0;
 var $inc=((($__ng_0)+(1))|0);
 var $__ng_1=$inc;var $add_ptr195=$add_ptr194;var $__gb_sroa_0_0_load179201=$__gb_sroa_0_0_load179200;var $212=$183;var $__gb_sroa_1_4_load189208=$__gb_sroa_1_4_load189210;label=186;break;
 case 175: 
 var $207=HEAP8[($__size__i_i1837)];
 var $conv_i_i1838=($207&255);
 var $and_i_i1839=$conv_i_i1838&1;
 var $tobool_i_i1840=($and_i_i1839|0)==0;
 var $208=HEAP32[(($__size__i23_i1847)>>2)];
 var $shr_i_i1857101=$conv_i_i1838>>>1;
 var $cond_i1859=($tobool_i_i1840?$shr_i_i1857101:$208);
 var $cmp211=($cond_i1859|0)==0;
 var $cmp213=($__ng_0|0)==0;
 var $or_cond119=$cmp211|$cmp213;
 if($or_cond119){label=189;break;}else{label=176;break;}
 case 176: 
 var $209=HEAP32[(($__ts)>>2)];
 var $cmp215=($retval_i_i1924_0|0)==($209|0);
 if($cmp215){label=177;break;}else{label=189;break;}
 case 177: 
 var $cmp217=($__gb_sroa_0_0_load179200|0)==($add_ptr194|0);
 if($cmp217){label=178;break;}else{var $add_ptr196=$add_ptr194;var $__gb_sroa_0_0_load179202=$__gb_sroa_0_0_load179200;var $211=$183;var $__gb_sroa_1_4_load189209=$__gb_sroa_1_4_load189210;label=185;break;}
 case 178: 
 var $cmp_i=($__gb_sroa_1_4_load189210|0)!=((446)|0);
 var $sub_ptr_lhs_cast_i121=$__gb_sroa_0_0_load179200;
 var $sub_ptr_rhs_cast_i122=$183;
 var $sub_ptr_sub_i123=((($sub_ptr_lhs_cast_i121)-($sub_ptr_rhs_cast_i122))|0);
 var $cmp3_i=($sub_ptr_sub_i123>>>0)<2147483647;
 var $mul4_i=$sub_ptr_sub_i123<<1;
 var $cond_i124=($cmp3_i?$mul4_i:-1);
 var $sub_ptr_div10_i=$sub_ptr_sub_i123>>2;
 if($cmp_i){label=179;break;}else{var $cond15_i=0;label=180;break;}
 case 179: 
 var $phitmp_i=$183;
 var $cond15_i=$phitmp_i;label=180;break;
 case 180: 
 var $cond15_i;
 var $call16_i=_realloc($cond15_i,$cond_i124);
 var $210=$call16_i;
 var $cmp17_i=($call16_i|0)==0;
 if($cmp17_i){label=181;break;}else{label=182;break;}
 case 181: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { var $_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189210;label=20;break; }
 case 182: 
 var $tobool_i_i_i125=($183|0)==0;
 var $or_cond222=$cmp_i|$tobool_i_i_i125;
 if($or_cond222){label=184;break;}else{label=183;break;}
 case 183: 
 label=184;break;
 case 184: 
 var $div24_i=$cond_i124>>>2;
 var $add_ptr_i128=(($210+($sub_ptr_div10_i<<2))|0);
 var $add_ptr27_i=(($210+($div24_i<<2))|0);
 var $add_ptr196=$add_ptr27_i;var $__gb_sroa_0_0_load179202=$add_ptr_i128;var $211=$210;var $__gb_sroa_1_4_load189209=234;label=185;break;
 case 185: 
 var $__gb_sroa_1_4_load189209;
 var $211;
 var $__gb_sroa_0_0_load179202;
 var $add_ptr196;
 var $incdec_ptr221=(($__gb_sroa_0_0_load179202+4)|0);
 HEAP32[(($__gb_sroa_0_0_load179202)>>2)]=$__ng_0;
 var $__ng_1=0;var $add_ptr195=$add_ptr196;var $__gb_sroa_0_0_load179201=$incdec_ptr221;var $212=$211;var $__gb_sroa_1_4_load189208=$__gb_sroa_1_4_load189209;label=186;break;
 case 186: 
 var $__gb_sroa_1_4_load189208;
 var $212;
 var $__gb_sroa_0_0_load179201;
 var $add_ptr195;
 var $__ng_1;
 var $213=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1756=(($213+12)|0);
 var $214=HEAP32[(($__ninp__i_i1756)>>2)];
 var $__einp__i_i1757=(($213+16)|0);
 var $215=HEAP32[(($__einp__i_i1757)>>2)];
 var $cmp_i_i1758=($214|0)==($215|0);
 if($cmp_i_i1758){label=187;break;}else{label=188;break;}
 case 187: 
 var $216=$213;
 var $vtable_i_i1759=HEAP32[(($216)>>2)];
 var $vfn_i_i1760=(($vtable_i_i1759+40)|0);
 var $217=HEAP32[(($vfn_i_i1760)>>2)];
 var $call_i_i1766=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($213) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $add_ptr194=$add_ptr195;var $__gb_sroa_0_0_load179200=$__gb_sroa_0_0_load179201;var $183=$212;var $__gb_sroa_1_4_load189210=$__gb_sroa_1_4_load189208;label=151;break; } else { var $_ph_ph=$212;var $__gb_sroa_1_4_load189205_ph_ph=$__gb_sroa_1_4_load189208;label=20;break; }
 case 188: 
 var $incdec_ptr_i_i1763=(($214+4)|0);
 HEAP32[(($__ninp__i_i1756)>>2)]=$incdec_ptr_i_i1763;
 var $__ng_0=$__ng_1;var $add_ptr194=$add_ptr195;var $__gb_sroa_0_0_load179200=$__gb_sroa_0_0_load179201;var $183=$212;var $__gb_sroa_1_4_load189210=$__gb_sroa_1_4_load189208;label=151;break;
 case 189: 
 var $cmp228=($183|0)==($__gb_sroa_0_0_load179200|0);
 var $cmp230=($__ng_0|0)==0;
 var $or_cond120=$cmp228|$cmp230;
 if($or_cond120){var $add_ptr193=$add_ptr194;var $__gb_sroa_0_0_load179199=$__gb_sroa_0_0_load179200;var $220=$183;var $__gb_sroa_1_4_load189207=$__gb_sroa_1_4_load189210;label=199;break;}else{label=190;break;}
 case 190: 
 var $cmp232=($__gb_sroa_0_0_load179200|0)==($add_ptr194|0);
 if($cmp232){label=191;break;}else{var $add_ptr190=$add_ptr194;var $__gb_sroa_0_0_load179203=$__gb_sroa_0_0_load179200;var $219=$183;var $__gb_sroa_1_4_load189206=$__gb_sroa_1_4_load189210;label=198;break;}
 case 191: 
 var $cmp_i130=($__gb_sroa_1_4_load189210|0)!=((446)|0);
 var $sub_ptr_lhs_cast_i132=$__gb_sroa_0_0_load179200;
 var $sub_ptr_rhs_cast_i133=$183;
 var $sub_ptr_sub_i134=((($sub_ptr_lhs_cast_i132)-($sub_ptr_rhs_cast_i133))|0);
 var $cmp3_i135=($sub_ptr_sub_i134>>>0)<2147483647;
 var $mul4_i136=$sub_ptr_sub_i134<<1;
 var $cond_i137=($cmp3_i135?$mul4_i136:-1);
 var $sub_ptr_div10_i140=$sub_ptr_sub_i134>>2;
 if($cmp_i130){label=192;break;}else{var $cond15_i143=0;label=193;break;}
 case 192: 
 var $phitmp_i141=$183;
 var $cond15_i143=$phitmp_i141;label=193;break;
 case 193: 
 var $cond15_i143;
 var $call16_i144=_realloc($cond15_i143,$cond_i137);
 var $218=$call16_i144;
 var $cmp17_i145=($call16_i144|0)==0;
 if($cmp17_i145){label=194;break;}else{label=195;break;}
 case 194: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$183;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189210;label=25;break; }
 case 195: 
 var $tobool_i_i_i151=($183|0)==0;
 var $or_cond223=$cmp_i130|$tobool_i_i_i151;
 if($or_cond223){label=197;break;}else{label=196;break;}
 case 196: 
 label=197;break;
 case 197: 
 var $div24_i157=$cond_i137>>>2;
 var $add_ptr_i158=(($218+($sub_ptr_div10_i140<<2))|0);
 var $add_ptr27_i159=(($218+($div24_i157<<2))|0);
 var $add_ptr190=$add_ptr27_i159;var $__gb_sroa_0_0_load179203=$add_ptr_i158;var $219=$218;var $__gb_sroa_1_4_load189206=234;label=198;break;
 case 198: 
 var $__gb_sroa_1_4_load189206;
 var $219;
 var $__gb_sroa_0_0_load179203;
 var $add_ptr190;
 var $incdec_ptr236=(($__gb_sroa_0_0_load179203+4)|0);
 HEAP32[(($__gb_sroa_0_0_load179203)>>2)]=$__ng_0;
 var $add_ptr193=$add_ptr190;var $__gb_sroa_0_0_load179199=$incdec_ptr236;var $220=$219;var $__gb_sroa_1_4_load189207=$__gb_sroa_1_4_load189206;label=199;break;
 case 199: 
 var $__gb_sroa_1_4_load189207;
 var $220;
 var $__gb_sroa_0_0_load179199;
 var $add_ptr193;
 var $221=HEAP32[(($__fd)>>2)];
 var $cmp238=($221|0)>0;
 if($cmp238){label=200;break;}else{label=253;break;}
 case 200: 
 var $222=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i1510=($222|0)==0;
 if($tobool_i_i_i1510){var $228=1;label=207;break;}else{label=201;break;}
 case 201: 
 var $__ninp__i_i_i_i1513=(($222+12)|0);
 var $223=HEAP32[(($__ninp__i_i_i_i1513)>>2)];
 var $__einp__i_i_i_i1514=(($222+16)|0);
 var $224=HEAP32[(($__einp__i_i_i_i1514)>>2)];
 var $cmp_i_i_i_i1515=($223|0)==($224|0);
 if($cmp_i_i_i_i1515){label=202;break;}else{label=203;break;}
 case 202: 
 var $225=$222;
 var $vtable_i_i_i_i1517=HEAP32[(($225)>>2)];
 var $vfn_i_i_i_i1518=(($vtable_i_i_i_i1517+36)|0);
 var $226=HEAP32[(($vfn_i_i_i_i1518)>>2)];
 var $call_i_i_i_i1553=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$226]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i1500_0=$call_i_i_i_i1553;label=204;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$220;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189207;label=25;break; }
 case 203: 
 var $227=HEAP32[(($223)>>2)];
 var $retval_i_i_i_i1500_0=$227;label=204;break;
 case 204: 
 var $retval_i_i_i_i1500_0;
 var $cmp_i7_i_i_i1522=($retval_i_i_i_i1500_0|0)==-1;
 if($cmp_i7_i_i_i1522){label=206;break;}else{label=205;break;}
 case 205: 
 var $_pre404=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp409=($_pre404|0)==0;
 var $228=$phitmp409;label=207;break;
 case 206: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $228=1;label=207;break;
 case 207: 
 var $228;
 var $229=HEAP32[(($__sbuf__i11_i_i629)>>2)];
 var $tobool_i12_i_i1531=($229|0)==0;
 if($tobool_i12_i_i1531){label=213;break;}else{label=208;break;}
 case 208: 
 var $__ninp__i_i15_i_i1535=(($229+12)|0);
 var $230=HEAP32[(($__ninp__i_i15_i_i1535)>>2)];
 var $__einp__i_i16_i_i1536=(($229+16)|0);
 var $231=HEAP32[(($__einp__i_i16_i_i1536)>>2)];
 var $cmp_i_i17_i_i1537=($230|0)==($231|0);
 if($cmp_i_i17_i_i1537){label=209;break;}else{label=210;break;}
 case 209: 
 var $232=$229;
 var $vtable_i_i19_i_i1539=HEAP32[(($232)>>2)];
 var $vfn_i_i20_i_i1540=(($vtable_i_i19_i_i1539+36)|0);
 var $233=HEAP32[(($vfn_i_i20_i_i1540)>>2)];
 var $call_i_i21_i_i1555=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$233]($229) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i1494_0=$call_i_i21_i_i1555;label=211;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$220;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189207;label=25;break; }
 case 210: 
 var $234=HEAP32[(($230)>>2)];
 var $retval_i_i7_i_i1494_0=$234;label=211;break;
 case 211: 
 var $retval_i_i7_i_i1494_0;
 var $cmp_i7_i25_i_i1544=($retval_i_i7_i_i1494_0|0)==-1;
 if($cmp_i7_i25_i_i1544){label=212;break;}else{label=214;break;}
 case 212: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=213;break;
 case 213: 
 if($228){label=219;break;}else{var $235=0;label=215;break;}
 case 214: 
 var $cmp_i30_i_i1549=($229|0)==0;
 var $cmp_i_i1551tmp=$228^$cmp_i30_i_i1549;
 if($cmp_i_i1551tmp){var $235=$229;label=215;break;}else{label=219;break;}
 case 215: 
 var $235;
 var $236=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1416=(($236+12)|0);
 var $237=HEAP32[(($__ninp__i_i1416)>>2)];
 var $__einp__i_i1417=(($236+16)|0);
 var $238=HEAP32[(($__einp__i_i1417)>>2)];
 var $cmp_i_i1418=($237|0)==($238|0);
 if($cmp_i_i1418){label=216;break;}else{label=217;break;}
 case 216: 
 var $239=$236;
 var $vtable_i_i1419=HEAP32[(($239)>>2)];
 var $vfn_i_i1420=(($vtable_i_i1419+36)|0);
 var $240=HEAP32[(($vfn_i_i1420)>>2)];
 var $call_i_i1425=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$240]($236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i1410_0=$call_i_i1425;label=218;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$220;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189207;label=25;break; }
 case 217: 
 var $241=HEAP32[(($237)>>2)];
 var $retval_i_i1410_0=$241;label=218;break;
 case 218: 
 var $retval_i_i1410_0;
 var $242=HEAP32[(($__dp)>>2)];
 var $cmp245=($retval_i_i1410_0|0)==($242|0);
 if($cmp245){label=220;break;}else{label=219;break;}
 case 219: 
 var $243=HEAP32[(($__err)>>2)];
 var $or247=$243|4;
 HEAP32[(($__err)>>2)]=$or247;
 var $retval_0=0;var $322=$220;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189207;label=290;break;
 case 220: 
 var $244=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1337=(($244+12)|0);
 var $245=HEAP32[(($__ninp__i_i1337)>>2)];
 var $__einp__i_i1338=(($244+16)|0);
 var $246=HEAP32[(($__einp__i_i1338)>>2)];
 var $cmp_i_i1339=($245|0)==($246|0);
 if($cmp_i_i1339){label=221;break;}else{label=222;break;}
 case 221: 
 var $247=$244;
 var $vtable_i_i1340=HEAP32[(($247)>>2)];
 var $vfn_i_i1341=(($vtable_i_i1340+40)|0);
 var $248=HEAP32[(($vfn_i_i1341)>>2)];
 var $call_i_i1347=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $250=$235;var $249=$221;label=223;break; } else { var $_ph_ph227_ph_ph_ph_ph_ph=$220;var $__gb_sroa_1_4_load189205_ph_ph226_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load189207;label=25;break; }
 case 222: 
 var $incdec_ptr_i_i1344=(($245+4)|0);
 HEAP32[(($__ninp__i_i1337)>>2)]=$incdec_ptr_i_i1344;
 var $250=$235;var $249=$221;label=223;break;
 case 223: 
 var $249;
 var $250;
 var $251=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i1159=($251|0)==0;
 if($tobool_i_i_i1159){var $257=1;label=230;break;}else{label=224;break;}
 case 224: 
 var $__ninp__i_i_i_i1162=(($251+12)|0);
 var $252=HEAP32[(($__ninp__i_i_i_i1162)>>2)];
 var $__einp__i_i_i_i1163=(($251+16)|0);
 var $253=HEAP32[(($__einp__i_i_i_i1163)>>2)];
 var $cmp_i_i_i_i1164=($252|0)==($253|0);
 if($cmp_i_i_i_i1164){label=225;break;}else{label=226;break;}
 case 225: 
 var $254=$251;
 var $vtable_i_i_i_i1166=HEAP32[(($254)>>2)];
 var $vfn_i_i_i_i1167=(($vtable_i_i_i_i1166+36)|0);
 var $255=HEAP32[(($vfn_i_i_i_i1167)>>2)];
 var $call_i_i_i_i1202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i1149_0=$call_i_i_i_i1202;label=227;break; } else { label=21;break; }
 case 226: 
 var $256=HEAP32[(($252)>>2)];
 var $retval_i_i_i_i1149_0=$256;label=227;break;
 case 227: 
 var $retval_i_i_i_i1149_0;
 var $cmp_i7_i_i_i1171=($retval_i_i_i_i1149_0|0)==-1;
 if($cmp_i7_i_i_i1171){label=229;break;}else{label=228;break;}
 case 228: 
 var $_pre405=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp410=($_pre405|0)==0;
 var $257=$phitmp410;label=230;break;
 case 229: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $257=1;label=230;break;
 case 230: 
 var $257;
 var $tobool_i12_i_i1180=($250|0)==0;
 if($tobool_i12_i_i1180){label=236;break;}else{label=231;break;}
 case 231: 
 var $__ninp__i_i15_i_i1184=(($250+12)|0);
 var $258=HEAP32[(($__ninp__i_i15_i_i1184)>>2)];
 var $__einp__i_i16_i_i1185=(($250+16)|0);
 var $259=HEAP32[(($__einp__i_i16_i_i1185)>>2)];
 var $cmp_i_i17_i_i1186=($258|0)==($259|0);
 if($cmp_i_i17_i_i1186){label=232;break;}else{label=233;break;}
 case 232: 
 var $260=$250;
 var $vtable_i_i19_i_i1188=HEAP32[(($260)>>2)];
 var $vfn_i_i20_i_i1189=(($vtable_i_i19_i_i1188+36)|0);
 var $261=HEAP32[(($vfn_i_i20_i_i1189)>>2)];
 var $call_i_i21_i_i1204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$261]($250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i1143_0=$call_i_i21_i_i1204;label=234;break; } else { label=21;break; }
 case 233: 
 var $262=HEAP32[(($258)>>2)];
 var $retval_i_i7_i_i1143_0=$262;label=234;break;
 case 234: 
 var $retval_i_i7_i_i1143_0;
 var $cmp_i7_i25_i_i1193=($retval_i_i7_i_i1143_0|0)==-1;
 if($cmp_i7_i25_i_i1193){label=235;break;}else{label=237;break;}
 case 235: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=236;break;
 case 236: 
 if($257){label=243;break;}else{var $263=0;label=238;break;}
 case 237: 
 var $cmp_i30_i_i1198=($250|0)==0;
 var $cmp_i_i1200tmp=$257^$cmp_i30_i_i1198;
 if($cmp_i_i1200tmp){var $263=$250;label=238;break;}else{label=243;break;}
 case 238: 
 var $263;
 var $264=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i1095=(($264+12)|0);
 var $265=HEAP32[(($__ninp__i_i1095)>>2)];
 var $__einp__i_i1096=(($264+16)|0);
 var $266=HEAP32[(($__einp__i_i1096)>>2)];
 var $cmp_i_i1097=($265|0)==($266|0);
 if($cmp_i_i1097){label=239;break;}else{label=240;break;}
 case 239: 
 var $267=$264;
 var $vtable_i_i1098=HEAP32[(($267)>>2)];
 var $vfn_i_i1099=(($vtable_i_i1098+36)|0);
 var $268=HEAP32[(($vfn_i_i1099)>>2)];
 var $call_i_i1104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$268]($264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i1089_0=$call_i_i1104;label=241;break; } else { label=21;break; }
 case 240: 
 var $269=HEAP32[(($265)>>2)];
 var $retval_i_i1089_0=$269;label=241;break;
 case 241: 
 var $retval_i_i1089_0;
 var $vtable_i1043=HEAP32[(($1)>>2)];
 var $vfn_i1044=(($vtable_i1043+12)|0);
 var $270=HEAP32[(($vfn_i1044)>>2)];
 var $call_i1045=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$270]($__ct,2048,$retval_i_i1089_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=21;break; }
 case 242: 
 if($call_i1045){label=244;break;}else{label=243;break;}
 case 243: 
 var $271=HEAP32[(($__err)>>2)];
 var $or262=$271|4;
 HEAP32[(($__err)>>2)]=$or262;
 var $retval_0=0;var $322=$220;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189207;label=290;break;
 case 244: 
 var $272=HEAP32[(($__wn)>>2)];
 var $273=HEAP32[(($__we_addr)>>2)];
 var $cmp264=($272|0)==($273|0);
 if($cmp264){label=245;break;}else{label=246;break;}
 case 245: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$__we_addr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=21;break; }
 case 246: 
 var $274=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i946=(($274+12)|0);
 var $275=HEAP32[(($__ninp__i_i946)>>2)];
 var $__einp__i_i947=(($274+16)|0);
 var $276=HEAP32[(($__einp__i_i947)>>2)];
 var $cmp_i_i948=($275|0)==($276|0);
 if($cmp_i_i948){label=247;break;}else{label=248;break;}
 case 247: 
 var $277=$274;
 var $vtable_i_i949=HEAP32[(($277)>>2)];
 var $vfn_i_i950=(($vtable_i_i949+36)|0);
 var $278=HEAP32[(($vfn_i_i950)>>2)];
 var $call_i_i955=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$278]($274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i940_0=$call_i_i955;label=249;break; } else { label=21;break; }
 case 248: 
 var $279=HEAP32[(($275)>>2)];
 var $retval_i_i940_0=$279;label=249;break;
 case 249: 
 var $retval_i_i940_0;
 var $280=HEAP32[(($__wn)>>2)];
 var $incdec_ptr270=(($280+4)|0);
 HEAP32[(($__wn)>>2)]=$incdec_ptr270;
 HEAP32[(($280)>>2)]=$retval_i_i940_0;
 var $dec=((($249)-(1))|0);
 HEAP32[(($__fd)>>2)]=$dec;
 var $281=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i578=(($281+12)|0);
 var $282=HEAP32[(($__ninp__i_i578)>>2)];
 var $__einp__i_i579=(($281+16)|0);
 var $283=HEAP32[(($__einp__i_i579)>>2)];
 var $cmp_i_i580=($282|0)==($283|0);
 if($cmp_i_i580){label=250;break;}else{label=252;break;}
 case 250: 
 var $284=$281;
 var $vtable_i_i581=HEAP32[(($284)>>2)];
 var $vfn_i_i582=(($vtable_i_i581+40)|0);
 var $285=HEAP32[(($vfn_i_i582)>>2)];
 var $call_i_i588=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($281) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=21;break; }
 case 251: 
 var $cmp252=($dec|0)>0;
 if($cmp252){var $250=$263;var $249=$dec;label=223;break;}else{label=253;break;}
 case 252: 
 var $incdec_ptr_i_i585=(($282+4)|0);
 HEAP32[(($__ninp__i_i578)>>2)]=$incdec_ptr_i_i585;
 label=251;break;
 case 253: 
 var $286=HEAP32[(($__wn)>>2)];
 var $287=HEAP32[(($__first__i_i_i552)>>2)];
 var $cmp277=($286|0)==($287|0);
 if($cmp277){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_0336;var $add_ptr192=$add_ptr193;var $__gb_sroa_0_0_load179198=$__gb_sroa_0_0_load179199;var $289=$220;var $__gb_sroa_1_4_load189211=$__gb_sroa_1_4_load189207;label=255;break;}
 case 254: 
 var $288=HEAP32[(($__err)>>2)];
 var $or279=$288|4;
 HEAP32[(($__err)>>2)]=$or279;
 var $retval_0=0;var $322=$220;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189207;label=290;break;
 case 255: 
 var $__gb_sroa_1_4_load189211;
 var $289;
 var $__gb_sroa_0_0_load179198;
 var $add_ptr192;
 var $__trailing_sign_1;
 var $inc282=((($__p_0338)+(1))|0);
 var $cmp=($inc282>>>0)<4;
 if($cmp){var $__gb_sroa_1_4_load189212327=$__gb_sroa_1_4_load189211;var $2=$289;var $__gb_sroa_0_0_load179197330=$__gb_sroa_0_0_load179198;var $add_ptr191333=$add_ptr192;var $__trailing_sign_0336=$__trailing_sign_1;var $__p_0338=$inc282;label=3;break;}else{var $__gb_sroa_1_4_load189212_lcssa=$__gb_sroa_1_4_load189211;var $_lcssa=$289;var $__gb_sroa_0_0_load179197_lcssa=$__gb_sroa_0_0_load179198;var $__trailing_sign_0_lcssa=$__trailing_sign_1;label=256;break;}
 case 256: 
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load179197_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load189212_lcssa;
 var $tobool284=($__trailing_sign_0_lcssa|0)==0;
 if($tobool284){label=287;break;}else{label=257;break;}
 case 257: 
 var $__size__i_i=$__trailing_sign_0_lcssa;
 var $__data__i_i_i_i=(($__trailing_sign_0_lcssa+4)|0);
 var $__data__i21_i_i_i=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;label=258;break;
 case 258: 
 var $__i_0;
 var $290=HEAP8[($__size__i_i)];
 var $conv_i_i562=($290&255);
 var $and_i_i=$conv_i_i562&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=260;break;}else{label=259;break;}
 case 259: 
 var $291=HEAP32[(($__data__i_i_i_i)>>2)];
 var $cond_i=$291;label=261;break;
 case 260: 
 var $shr_i_i100=$conv_i_i562>>>1;
 var $cond_i=$shr_i_i100;label=261;break;
 case 261: 
 var $cond_i;
 var $cmp289=($__i_0>>>0)<($cond_i>>>0);
 if($cmp289){label=262;break;}else{label=287;break;}
 case 262: 
 var $292=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $tobool_i_i_i506=($292|0)==0;
 if($tobool_i_i_i506){var $298=1;label=269;break;}else{label=263;break;}
 case 263: 
 var $__ninp__i_i_i_i=(($292+12)|0);
 var $293=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($292+16)|0);
 var $294=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($293|0)==($294|0);
 if($cmp_i_i_i_i){label=264;break;}else{label=265;break;}
 case 264: 
 var $295=$292;
 var $vtable_i_i_i_i=HEAP32[(($295)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $296=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i511=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$296]($292) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i511;label=266;break; } else { label=19;break; }
 case 265: 
 var $297=HEAP32[(($293)>>2)];
 var $retval_i_i_i_i_0=$297;label=266;break;
 case 266: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=268;break;}else{label=267;break;}
 case 267: 
 var $_pre406=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $phitmp407=($_pre406|0)==0;
 var $298=$phitmp407;label=269;break;
 case 268: 
 HEAP32[(($__sbuf__i_i_i608)>>2)]=0;
 var $298=1;label=269;break;
 case 269: 
 var $298;
 var $299=HEAP32[(($__sbuf__i11_i_i629)>>2)];
 var $tobool_i12_i_i=($299|0)==0;
 if($tobool_i12_i_i){label=275;break;}else{label=270;break;}
 case 270: 
 var $__ninp__i_i15_i_i=(($299+12)|0);
 var $300=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($299+16)|0);
 var $301=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($300|0)==($301|0);
 if($cmp_i_i17_i_i){label=271;break;}else{label=272;break;}
 case 271: 
 var $302=$299;
 var $vtable_i_i19_i_i=HEAP32[(($302)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $303=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i512=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$303]($299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i512;label=273;break; } else { label=19;break; }
 case 272: 
 var $304=HEAP32[(($300)>>2)];
 var $retval_i_i7_i_i_0=$304;label=273;break;
 case 273: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=274;break;}else{label=276;break;}
 case 274: 
 HEAP32[(($__sbuf__i11_i_i629)>>2)]=0;
 label=275;break;
 case 275: 
 if($298){label=283;break;}else{label=277;break;}
 case 276: 
 var $cmp_i30_i_i=($299|0)==0;
 var $cmp_i_i510tmp=$298^$cmp_i30_i_i;
 if($cmp_i_i510tmp){label=277;break;}else{label=283;break;}
 case 277: 
 var $305=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i459=(($305+12)|0);
 var $306=HEAP32[(($__ninp__i_i459)>>2)];
 var $__einp__i_i460=(($305+16)|0);
 var $307=HEAP32[(($__einp__i_i460)>>2)];
 var $cmp_i_i461=($306|0)==($307|0);
 if($cmp_i_i461){label=278;break;}else{label=279;break;}
 case 278: 
 var $308=$305;
 var $vtable_i_i462=HEAP32[(($308)>>2)];
 var $vfn_i_i463=(($vtable_i_i462+36)|0);
 var $309=HEAP32[(($vfn_i_i463)>>2)];
 var $call_i_i468=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$309]($305) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i453_0=$call_i_i468;label=280;break; } else { label=19;break; }
 case 279: 
 var $310=HEAP32[(($306)>>2)];
 var $retval_i_i453_0=$310;label=280;break;
 case 280: 
 var $retval_i_i453_0;
 var $311=HEAP8[($__size__i_i)];
 var $and_i_i_i_i=$311&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){var $cond_i_i_i=$__data__i_i_i_i;label=282;break;}else{label=281;break;}
 case 281: 
 var $312=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$312;label=282;break;
 case 282: 
 var $cond_i_i_i;
 var $add_ptr_i=(($cond_i_i_i+($__i_0<<2))|0);
 var $313=HEAP32[(($add_ptr_i)>>2)];
 var $cmp298=($retval_i_i453_0|0)==($313|0);
 if($cmp298){label=284;break;}else{label=283;break;}
 case 283: 
 var $314=HEAP32[(($__err)>>2)];
 var $or300=$314|4;
 HEAP32[(($__err)>>2)]=$or300;
 var $retval_0=0;var $322=$_lcssa;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212_lcssa;label=290;break;
 case 284: 
 var $inc303=((($__i_0)+(1))|0);
 var $315=HEAP32[(($__sbuf__i_i_i608)>>2)];
 var $__ninp__i_i=(($315+12)|0);
 var $316=HEAP32[(($__ninp__i_i)>>2)];
 var $__einp__i_i=(($315+16)|0);
 var $317=HEAP32[(($__einp__i_i)>>2)];
 var $cmp_i_i=($316|0)==($317|0);
 if($cmp_i_i){label=285;break;}else{label=286;break;}
 case 285: 
 var $318=$315;
 var $vtable_i_i=HEAP32[(($318)>>2)];
 var $vfn_i_i=(($vtable_i_i+40)|0);
 var $319=HEAP32[(($vfn_i_i)>>2)];
 var $call_i_i405=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$319]($315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$inc303;label=258;break; } else { label=19;break; }
 case 286: 
 var $incdec_ptr_i_i=(($316+4)|0);
 HEAP32[(($__ninp__i_i)>>2)]=$incdec_ptr_i_i;
 var $__i_0=$inc303;label=258;break;
 case 287: 
 var $cmp309=($_lcssa|0)==($__gb_sroa_0_0_load179197_lcssa|0);
 if($cmp309){var $retval_0=1;var $322=$__gb_sroa_0_0_load179197_lcssa;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212_lcssa;label=290;break;}else{label=288;break;}
 case 288: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load179197_lcssa,$__et);
 var $320=HEAP32[(($__et)>>2)];
 var $tobool314=($320|0)==0;
 if($tobool314){var $retval_0=1;var $322=$_lcssa;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212_lcssa;label=290;break;}else{label=289;break;}
 case 289: 
 var $321=HEAP32[(($__err)>>2)];
 var $or316=$321|4;
 HEAP32[(($__err)>>2)]=$or316;
 var $retval_0=0;var $322=$_lcssa;var $__gb_sroa_1_4_load189213=$__gb_sroa_1_4_load189212_lcssa;label=290;break;
 case 290: 
 var $__gb_sroa_1_4_load189213;
 var $322;
 var $retval_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $tobool_i_i_i=($322|0)==0;
 if($tobool_i_i_i){label=293;break;}else{label=291;break;}
 case 291: 
 var $323=$322;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load189213]($323) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=293;break; } else { label=292;break; }
 case 292: 
 var $324$0 = ___cxa_find_matching_catch(-1, -1,0); var $324$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 293: 
 STACKTOP=sp;return $retval_0;
 case 294: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+456)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__loc=(sp)+(432);
 var $__neg=(sp)+(440);
 var $agg_tmp=(sp)+(448);
 var $arraydecay=(($__wbuf)|0);
 var $__first__i_i_i_i_i=(($__wb)|0);
 HEAP32[(($__first__i_i_i_i_i)>>2)]=$arraydecay;
 var $__second__i_i_i_i_i=(($__wb+4)|0);
 HEAP32[(($__second__i_i_i_i_i)>>2)]=446;
 var $add_ptr=(($__wbuf+400)|0);
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i12=($2|0)==-1;
 if($cmp_i_i_i12){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=41;break; }
 case 4: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i14=($6|0)==0;
 if($tobool_i_i_i14){label=6;break;}else{label=8;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=41;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $8=$6;
 HEAP8[($__neg)]=0;
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($agg_tmp)|0);
 HEAP32[(($11)>>2)]=$10;
 var $__fmtflags__i=(($__iob+4)|0);
 var $12=HEAP32[(($__fmtflags__i)>>2)];
 var $call8=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$agg_tmp,$__intl,$__loc,$12,$__err,$__neg,$8,$__wb,$__wn,$add_ptr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=41;break; }
 case 9: 
 if($call8){label=10;break;}else{label=22;break;}
 case 10: 
 var $__size__i46_i=$__v;
 var $13=HEAP8[($__size__i46_i)];
 var $and_i_i=$13&1;
 var $tobool_i_i=(($and_i_i<<24)>>24)==0;
 if($tobool_i_i){label=12;break;}else{label=11;break;}
 case 11: 
 var $__data__i36_i=(($__v+8)|0);
 var $14=HEAP32[(($__data__i36_i)>>2)];
 HEAP32[(($14)>>2)]=0;
 var $__size__i24_i=(($__v+4)|0);
 HEAP32[(($__size__i24_i)>>2)]=0;
 label=13;break;
 case 12: 
 var $__data__i_i=(($__v+4)|0);
 HEAP32[(($__data__i_i)>>2)]=0;
 HEAP8[($__size__i46_i)]=0;
 label=13;break;
 case 13: 
 var $15=HEAP8[($__neg)];
 var $16=$15&1;
 var $tobool9=(($16<<24)>>24)==0;
 var $_pre19=$6;
 if($tobool9){label=17;break;}else{label=14;break;}
 case 14: 
 var $vtable_i=HEAP32[(($_pre19)>>2)];
 var $vfn_i=(($vtable_i+44)|0);
 var $17=HEAP32[(($vfn_i)>>2)];
 var $call_i85=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]($8,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=41;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$call_i85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=41;break; }
 case 16: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 var $20=$18$1;
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $50=$arraydecay;var $ehselector_slot_022=$20;var $exn_slot_024=$19;label=42;break;
 case 17: 
 var $vtable_i89=HEAP32[(($_pre19)>>2)];
 var $vfn_i90=(($vtable_i89+44)|0);
 var $21=HEAP32[(($vfn_i90)>>2)];
 var $call_i91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($8,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=41;break; }
 case 18: 
 var $22=HEAP32[(($__first__i_i_i_i_i)>>2)];
 var $23=HEAP32[(($__wn)>>2)];
 var $add_ptr17=((($23)-(4))|0);
 var $__w_0=$22;label=19;break;
 case 19: 
 var $__w_0;
 var $cmp=($__w_0>>>0)<($add_ptr17>>>0);
 if($cmp){label=20;break;}else{label=21;break;}
 case 20: 
 var $24=HEAP32[(($__w_0)>>2)];
 var $cmp18=($24|0)==($call_i91|0);
 var $incdec_ptr=(($__w_0+4)|0);
 if($cmp18){var $__w_0=$incdec_ptr;label=19;break;}else{label=21;break;}
 case 21: 
 var $call22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w_0,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=41;break; }
 case 22: 
 var $__sbuf__i_i_i=(($__b)|0);
 var $25=HEAP32[(($__sbuf__i_i_i)>>2)];
 var $tobool_i_i_i104=($25|0)==0;
 if($tobool_i_i_i104){var $31=0;label=28;break;}else{label=23;break;}
 case 23: 
 var $__ninp__i_i_i_i=(($25+12)|0);
 var $26=HEAP32[(($__ninp__i_i_i_i)>>2)];
 var $__einp__i_i_i_i=(($25+16)|0);
 var $27=HEAP32[(($__einp__i_i_i_i)>>2)];
 var $cmp_i_i_i_i=($26|0)==($27|0);
 if($cmp_i_i_i_i){label=24;break;}else{label=25;break;}
 case 24: 
 var $28=$25;
 var $vtable_i_i_i_i=HEAP32[(($28)>>2)];
 var $vfn_i_i_i_i=(($vtable_i_i_i_i+36)|0);
 var $29=HEAP32[(($vfn_i_i_i_i)>>2)];
 var $call_i_i_i_i108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i_i_i_0=$call_i_i_i_i108;label=26;break; } else { label=41;break; }
 case 25: 
 var $30=HEAP32[(($26)>>2)];
 var $retval_i_i_i_i_0=$30;label=26;break;
 case 26: 
 var $retval_i_i_i_i_0;
 var $cmp_i7_i_i_i=($retval_i_i_i_i_0|0)==-1;
 if($cmp_i7_i_i_i){label=27;break;}else{var $31=$25;label=28;break;}
 case 27: 
 HEAP32[(($__sbuf__i_i_i)>>2)]=0;
 var $31=0;label=28;break;
 case 28: 
 var $31;
 var $cmp_i_i_i=($31|0)==0;
 var $tobool_i12_i_i=($10|0)==0;
 if($tobool_i12_i_i){label=34;break;}else{label=29;break;}
 case 29: 
 var $__ninp__i_i15_i_i=(($10+12)|0);
 var $32=HEAP32[(($__ninp__i_i15_i_i)>>2)];
 var $__einp__i_i16_i_i=(($10+16)|0);
 var $33=HEAP32[(($__einp__i_i16_i_i)>>2)];
 var $cmp_i_i17_i_i=($32|0)==($33|0);
 if($cmp_i_i17_i_i){label=30;break;}else{label=31;break;}
 case 30: 
 var $34=$10;
 var $vtable_i_i19_i_i=HEAP32[(($34)>>2)];
 var $vfn_i_i20_i_i=(($vtable_i_i19_i_i+36)|0);
 var $35=HEAP32[(($vfn_i_i20_i_i)>>2)];
 var $call_i_i21_i_i109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_i_i7_i_i_0=$call_i_i21_i_i109;label=32;break; } else { label=41;break; }
 case 31: 
 var $36=HEAP32[(($32)>>2)];
 var $retval_i_i7_i_i_0=$36;label=32;break;
 case 32: 
 var $retval_i_i7_i_i_0;
 var $cmp_i7_i25_i_i=($retval_i_i7_i_i_0|0)==-1;
 if($cmp_i7_i25_i_i){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($9)>>2)]=0;
 label=34;break;
 case 34: 
 if($cmp_i_i_i){label=36;break;}else{label=37;break;}
 case 35: 
 var $cmp_i30_i_i=($10|0)==0;
 var $cmp_i_itmp=$cmp_i_i_i^$cmp_i30_i_i;
 if($cmp_i_itmp){label=37;break;}else{label=36;break;}
 case 36: 
 var $37=HEAP32[(($__err)>>2)];
 var $or=$37|2;
 HEAP32[(($__err)>>2)]=$or;
 label=37;break;
 case 37: 
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$31;
 var $39=HEAP32[(($__locale__i)>>2)];
 var $40=(($39)|0);
 var $call_i18=__ZNSt3__114__shared_count16__release_sharedEv($40);
 var $41=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i74=($41|0)==0;
 if($tobool_i_i_i74){label=40;break;}else{label=38;break;}
 case 38: 
 var $42=HEAP32[(($__second__i_i_i_i_i)>>2)];
 var $43=$41;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1); var $45$1 = tempRet0;
 var $46=$45$0;
 var $47=$45$1;
 var $48=HEAP32[(($__locale__i)>>2)];
 var $49=(($48)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($49);
 var $_pre=HEAP32[(($__first__i_i_i_i_i)>>2)];
 HEAP32[(($__first__i_i_i_i_i)>>2)]=0;
 var $tobool_i_i_i=($_pre|0)==0;
 if($tobool_i_i_i){var $ehselector_slot_023=$47;var $exn_slot_025=$46;label=44;break;}else{var $50=$_pre;var $ehselector_slot_022=$47;var $exn_slot_024=$46;label=42;break;}
 case 42: 
 var $exn_slot_024;
 var $ehselector_slot_022;
 var $50;
 var $51=HEAP32[(($__second__i_i_i_i_i)>>2)];
 var $52=$50;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $ehselector_slot_023=$ehselector_slot_022;var $exn_slot_025=$exn_slot_024;label=44;break; } else { label=43;break; }
 case 43: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1,0); var $53$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 44: 
 var $exn_slot_025;
 var $ehselector_slot_023;
 var $lpad_val$0=$exn_slot_025;
 var $lpad_val$1=0;
 var $lpad_val28$0=$lpad_val$0;
 var $lpad_val28$1=$ehselector_slot_023;
 ___resumeException($lpad_val28$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i=$this;
 var $sub_ptr_rhs_cast_i_i=$__first;
 var $0=HEAP8[($__size__i_i)];
 var $conv_i_i=($0&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__size__i23_i=(($this+4)|0);
 var $1=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$1;label=4;break;
 case 3: 
 var $shr_i_i16=$conv_i_i>>>1;
 var $cond_i=$shr_i_i16;label=4;break;
 case 4: 
 var $cond_i;
 var $and_i_i75=$0&1;
 var $tobool_i_i76=(($and_i_i75<<24)>>24)==0;
 if($tobool_i_i76){var $cond_i84=1;var $4=$0;label=6;break;}else{label=5;break;}
 case 5: 
 var $__cap__i_i=(($this)|0);
 var $2=HEAP32[(($__cap__i_i)>>2)];
 var $and_i11_i=$2&-2;
 var $phitmp=((($and_i11_i)-(1))|0);
 var $3=(($2)&255);
 var $cond_i84=$phitmp;var $4=$3;label=6;break;
 case 6: 
 var $4;
 var $cond_i84;
 var $sub_ptr_lhs_cast_i_i=$__last;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $sub_ptr_div_i_i=$sub_ptr_sub_i_i>>2;
 var $tobool=($sub_ptr_div_i_i|0)==0;
 if($tobool){label=19;break;}else{label=7;break;}
 case 7: 
 var $sub=((($cond_i84)-($cond_i))|0);
 var $cmp=($sub>>>0)<($sub_ptr_div_i_i>>>0);
 if($cmp){label=8;break;}else{var $5=$4;label=9;break;}
 case 8: 
 var $add=((($cond_i)+($sub_ptr_div_i_i))|0);
 var $sub5=((($add)-($cond_i84))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$cond_i84,$sub5,$cond_i,$cond_i,0,0);
 var $_pre=HEAP8[($__size__i_i)];
 var $5=$_pre;label=9;break;
 case 9: 
 var $5;
 var $and_i_i45=$5&1;
 var $tobool_i_i46=(($and_i_i45<<24)>>24)==0;
 if($tobool_i_i46){label=11;break;}else{label=10;break;}
 case 10: 
 var $__data__i21_i=(($this+8)|0);
 var $6=HEAP32[(($__data__i21_i)>>2)];
 var $cond_i61=$6;label=12;break;
 case 11: 
 var $__data__i_i=(($this+4)|0);
 var $cond_i61=$__data__i_i;label=12;break;
 case 12: 
 var $cond_i61;
 var $add_ptr=(($cond_i61+($cond_i<<2))|0);
 var $cmp717=($__first|0)==($__last|0);
 if($cmp717){var $__p_0_lcssa=$add_ptr;label=16;break;}else{label=13;break;}
 case 13: 
 var $scevgep=((($__last)-(4))|0);
 var $scevgep20=$scevgep;
 var $7=(((-$sub_ptr_rhs_cast_i_i))|0);
 var $uglygep=(($scevgep20+$7)|0);
 var $uglygep21=$uglygep;
 var $8=$uglygep21>>>2;
 var $9=((($cond_i)+($8))|0);
 var $10=((($9)+(1))|0);
 var $__first_addr_018=$__first;var $__p_019=$add_ptr;label=14;break;
 case 14: 
 var $__p_019;
 var $__first_addr_018;
 var $11=HEAP32[(($__first_addr_018)>>2)];
 HEAP32[(($__p_019)>>2)]=$11;
 var $incdec_ptr=(($__p_019+4)|0);
 var $incdec_ptr8=(($__first_addr_018+4)|0);
 var $cmp7=($incdec_ptr8|0)==($__last|0);
 if($cmp7){label=15;break;}else{var $__first_addr_018=$incdec_ptr8;var $__p_019=$incdec_ptr;label=14;break;}
 case 15: 
 var $scevgep22=(($cond_i61+($10<<2))|0);
 var $__p_0_lcssa=$scevgep22;label=16;break;
 case 16: 
 var $__p_0_lcssa;
 HEAP32[(($__p_0_lcssa)>>2)]=0;
 var $add9=((($cond_i)+($sub_ptr_div_i_i))|0);
 var $12=HEAP8[($__size__i_i)];
 var $and_i_i24=$12&1;
 var $tobool_i_i25=(($and_i_i24<<24)>>24)==0;
 if($tobool_i_i25){label=18;break;}else{label=17;break;}
 case 17: 
 var $__size__i21_i=(($this+4)|0);
 HEAP32[(($__size__i21_i)>>2)]=$add9;
 label=19;break;
 case 18: 
 var $shl_i_i=$add9<<1;
 var $conv_i6_i=(($shl_i_i)&255);
 HEAP8[($__size__i_i)]=$conv_i6_i;
 label=19;break;
 case 19: 
 return $this;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i58=sp;
 var $__p_i_i_i=(sp)+(16);
 var $ref_tmp=(sp)+(32);
 var $ref_tmp1=(sp)+(40);
 var $0=$ref_tmp1;
 var $ref_tmp3=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$ref_tmp3;
 var $ref_tmp7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$ref_tmp7;
 var $ref_tmp9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$ref_tmp9;
 var $ref_tmp14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $ref_tmp15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=$ref_tmp15;
 var $ref_tmp17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$ref_tmp17;
 var $ref_tmp21=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$ref_tmp21;
 var $ref_tmp23=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$ref_tmp23;
 if($__intl){label=2;break;}else{label=28;break;}
 case 2: 
 var $tmpcast55=$ref_tmp;
 var $__locale__i=(($__loc)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 var $9=$__p_i_i_i;
 var $10=HEAP32[((14104)>>2)];
 var $cmp_i_i_i56=($10|0)==-1;
 if($cmp_i_i_i56){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=14104;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14104,$9,272);
 label=4;break;
 case 4: 
 var $11=HEAP32[((14108)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 7: 
 var $16=$14;
 var $17=$14;
 var $vtable_i=HEAP32[(($17)>>2)];
 var $vfn_i=(($vtable_i+44)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($tmpcast55,$16);
 var $19=$__pat;
 var $20=HEAP32[(($ref_tmp)>>2)];
 tempBigInt=$20;HEAP8[($19)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(3))|0)]=tempBigInt&0xff;
 var $21=$14;
 var $vtable_i28=HEAP32[(($21)>>2)];
 var $vfn_i29=(($vtable_i28+32)|0);
 var $22=HEAP32[(($vfn_i29)>>2)];
 FUNCTION_TABLE[$22]($ref_tmp1,$16);
 var $__size__i46_i_i_i=$__nsn;
 var $23=HEAP8[($__size__i46_i_i_i)];
 var $and_i_i_i_i=$23&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__data__i36_i_i_i=(($__nsn+8)|0);
 var $24=HEAP32[(($__data__i36_i_i_i)>>2)];
 HEAP32[(($24)>>2)]=0;
 var $__size__i24_i_i_i=(($__nsn+4)|0);
 HEAP32[(($__size__i24_i_i_i)>>2)]=0;
 label=10;break;
 case 9: 
 var $__data__i_i_i_i=(($__nsn+4)|0);
 HEAP32[(($__data__i_i_i_i)>>2)]=0;
 HEAP8[($__size__i46_i_i_i)]=0;
 label=10;break;
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=11;break; }
 case 11: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1,0); var $25$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 12: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i)>>2)]=HEAP32[(($0)>>2)];HEAP32[((($__size__i46_i_i_i)+(4))>>2)]=HEAP32[((($0)+(4))>>2)];HEAP32[((($__size__i46_i_i_i)+(8))>>2)]=HEAP32[((($0)+(8))>>2)];
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp1);
 var $vtable_i34=HEAP32[(($21)>>2)];
 var $vfn_i35=(($vtable_i34+28)|0);
 var $26=HEAP32[(($vfn_i35)>>2)];
 FUNCTION_TABLE[$26]($ref_tmp3,$16);
 var $__size__i46_i_i_i104=$__psn;
 var $27=HEAP8[($__size__i46_i_i_i104)];
 var $and_i_i_i_i106=$27&1;
 var $tobool_i_i_i_i107=(($and_i_i_i_i106<<24)>>24)==0;
 if($tobool_i_i_i_i107){label=14;break;}else{label=13;break;}
 case 13: 
 var $__data__i36_i_i_i114=(($__psn+8)|0);
 var $28=HEAP32[(($__data__i36_i_i_i114)>>2)];
 HEAP32[(($28)>>2)]=0;
 var $__size__i24_i_i_i121=(($__psn+4)|0);
 HEAP32[(($__size__i24_i_i_i121)>>2)]=0;
 label=15;break;
 case 14: 
 var $__data__i_i_i_i129=(($__psn+4)|0);
 HEAP32[(($__data__i_i_i_i129)>>2)]=0;
 HEAP8[($__size__i46_i_i_i104)]=0;
 label=15;break;
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1,0); var $29$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 17: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i104)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($__size__i46_i_i_i104)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($__size__i46_i_i_i104)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp3);
 var $30=$14;
 var $vtable_i180=HEAP32[(($30)>>2)];
 var $vfn_i181=(($vtable_i180+12)|0);
 var $31=HEAP32[(($vfn_i181)>>2)];
 var $call_i182=FUNCTION_TABLE[$31]($16);
 HEAP32[(($__dp)>>2)]=$call_i182;
 var $vtable_i185=HEAP32[(($30)>>2)];
 var $vfn_i186=(($vtable_i185+16)|0);
 var $32=HEAP32[(($vfn_i186)>>2)];
 var $call_i187=FUNCTION_TABLE[$32]($16);
 HEAP32[(($__ts)>>2)]=$call_i187;
 var $33=$14;
 var $vtable_i190=HEAP32[(($33)>>2)];
 var $vfn_i191=(($vtable_i190+20)|0);
 var $34=HEAP32[(($vfn_i191)>>2)];
 FUNCTION_TABLE[$34]($ref_tmp7,$16);
 var $__size__i46_i_i_i260=$__grp;
 var $35=HEAP8[($__size__i46_i_i_i260)];
 var $and_i_i_i_i262=$35&1;
 var $tobool_i_i_i_i263=(($and_i_i_i_i262<<24)>>24)==0;
 if($tobool_i_i_i_i263){label=19;break;}else{label=18;break;}
 case 18: 
 var $__data__i36_i_i_i270=(($__grp+8)|0);
 var $36=HEAP32[(($__data__i36_i_i_i270)>>2)];
 HEAP8[($36)]=0;
 var $__size__i24_i_i_i277=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i277)>>2)]=0;
 label=20;break;
 case 19: 
 var $__s_i45_i_i_i259=$__grp;
 var $arrayidx_i_i_i_i286=(($__s_i45_i_i_i259+1)|0);
 HEAP8[($arrayidx_i_i_i_i286)]=0;
 HEAP8[($__size__i46_i_i_i260)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=21;break; }
 case 21: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1,0); var $37$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 22: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i260)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($__size__i46_i_i_i260)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($__size__i46_i_i_i260)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp7);
 var $vtable_i333=HEAP32[(($21)>>2)];
 var $vfn_i334=(($vtable_i333+24)|0);
 var $38=HEAP32[(($vfn_i334)>>2)];
 FUNCTION_TABLE[$38]($ref_tmp9,$16);
 var $__size__i46_i_i_i403=$__sym;
 var $39=HEAP8[($__size__i46_i_i_i403)];
 var $and_i_i_i_i405=$39&1;
 var $tobool_i_i_i_i406=(($and_i_i_i_i405<<24)>>24)==0;
 if($tobool_i_i_i_i406){label=24;break;}else{label=23;break;}
 case 23: 
 var $__data__i36_i_i_i413=(($__sym+8)|0);
 var $40=HEAP32[(($__data__i36_i_i_i413)>>2)];
 HEAP32[(($40)>>2)]=0;
 var $__size__i24_i_i_i420=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i420)>>2)]=0;
 label=25;break;
 case 24: 
 var $__data__i_i_i_i428=(($__sym+4)|0);
 HEAP32[(($__data__i_i_i_i428)>>2)]=0;
 HEAP8[($__size__i46_i_i_i403)]=0;
 label=25;break;
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=26;break; }
 case 26: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1,0); var $41$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 27: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i403)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($__size__i46_i_i_i403)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($__size__i46_i_i_i403)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp9);
 var $vtable_i479=HEAP32[(($30)>>2)];
 var $vfn_i480=(($vtable_i479+36)|0);
 var $42=HEAP32[(($vfn_i480)>>2)];
 var $call_i481=FUNCTION_TABLE[$42]($16);
 var $storemerge=$call_i481;label=54;break;
 case 28: 
 var $tmpcast=$ref_tmp14;
 var $__locale__i59=(($__loc)|0);
 var $43=HEAP32[(($__locale__i59)>>2)];
 var $44=$__p_i_i_i58;
 var $45=HEAP32[((14112)>>2)];
 var $cmp_i_i_i60=($45|0)==-1;
 if($cmp_i_i_i60){label=30;break;}else{label=29;break;}
 case 29: 
 var $ref_tmp_i_sroa_0_0__idx_i_i61=(($__p_i_i_i58)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i61)>>2)]=14112;
 var $ref_tmp_i_sroa_1_4__idx6_i_i62=(($__p_i_i_i58+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i62)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i63=(($__p_i_i_i58+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i63)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14112,$44,272);
 label=30;break;
 case 30: 
 var $46=HEAP32[((14116)>>2)];
 var $sub_i_i65=((($46)-(1))|0);
 var $__end__i_i_i_i66=(($43+12)|0);
 var $47=HEAP32[(($__end__i_i_i_i66)>>2)];
 var $__begin__i_i_i_i67=(($43+8)|0);
 var $48=HEAP32[(($__begin__i_i_i_i67)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i68=$47;
 var $sub_ptr_rhs_cast_i_i_i_i69=$48;
 var $sub_ptr_sub_i_i_i_i70=((($sub_ptr_lhs_cast_i_i_i_i68)-($sub_ptr_rhs_cast_i_i_i_i69))|0);
 var $sub_ptr_div_i_i_i_i71=$sub_ptr_sub_i_i_i_i70>>2;
 var $cmp_i_i1_i72=($sub_ptr_div_i_i_i_i71>>>0)>($sub_i_i65>>>0);
 if($cmp_i_i1_i72){label=31;break;}else{label=32;break;}
 case 31: 
 var $arrayidx_i_i_i_i74=(($48+($sub_i_i65<<2))|0);
 var $49=HEAP32[(($arrayidx_i_i_i_i74)>>2)];
 var $tobool_i_i_i75=($49|0)==0;
 if($tobool_i_i_i75){label=32;break;}else{label=33;break;}
 case 32: 
 var $exception_i_i77=___cxa_allocate_exception(4);
 var $50=$exception_i_i77;
 __ZNSt8bad_castC2Ev($50);
 ___cxa_throw($exception_i_i77,8536,(376));
 throw "Reached an unreachable!";
 case 33: 
 var $51=$49;
 var $52=$49;
 var $vtable_i486=HEAP32[(($52)>>2)];
 var $vfn_i487=(($vtable_i486+44)|0);
 var $53=HEAP32[(($vfn_i487)>>2)];
 FUNCTION_TABLE[$53]($tmpcast,$51);
 var $54=$__pat;
 var $55=HEAP32[(($ref_tmp14)>>2)];
 tempBigInt=$55;HEAP8[($54)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($54)+(3))|0)]=tempBigInt&0xff;
 var $56=$49;
 var $vtable_i490=HEAP32[(($56)>>2)];
 var $vfn_i491=(($vtable_i490+32)|0);
 var $57=HEAP32[(($vfn_i491)>>2)];
 FUNCTION_TABLE[$57]($ref_tmp15,$51);
 var $__size__i46_i_i_i560=$__nsn;
 var $58=HEAP8[($__size__i46_i_i_i560)];
 var $and_i_i_i_i562=$58&1;
 var $tobool_i_i_i_i563=(($and_i_i_i_i562<<24)>>24)==0;
 if($tobool_i_i_i_i563){label=35;break;}else{label=34;break;}
 case 34: 
 var $__data__i36_i_i_i570=(($__nsn+8)|0);
 var $59=HEAP32[(($__data__i36_i_i_i570)>>2)];
 HEAP32[(($59)>>2)]=0;
 var $__size__i24_i_i_i577=(($__nsn+4)|0);
 HEAP32[(($__size__i24_i_i_i577)>>2)]=0;
 label=36;break;
 case 35: 
 var $__data__i_i_i_i585=(($__nsn+4)|0);
 HEAP32[(($__data__i_i_i_i585)>>2)]=0;
 HEAP8[($__size__i46_i_i_i560)]=0;
 label=36;break;
 case 36: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=37;break; }
 case 37: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 38: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i560)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($__size__i46_i_i_i560)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($__size__i46_i_i_i560)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp15);
 var $vtable_i636=HEAP32[(($56)>>2)];
 var $vfn_i637=(($vtable_i636+28)|0);
 var $61=HEAP32[(($vfn_i637)>>2)];
 FUNCTION_TABLE[$61]($ref_tmp17,$51);
 var $__size__i46_i_i_i706=$__psn;
 var $62=HEAP8[($__size__i46_i_i_i706)];
 var $and_i_i_i_i708=$62&1;
 var $tobool_i_i_i_i709=(($and_i_i_i_i708<<24)>>24)==0;
 if($tobool_i_i_i_i709){label=40;break;}else{label=39;break;}
 case 39: 
 var $__data__i36_i_i_i716=(($__psn+8)|0);
 var $63=HEAP32[(($__data__i36_i_i_i716)>>2)];
 HEAP32[(($63)>>2)]=0;
 var $__size__i24_i_i_i723=(($__psn+4)|0);
 HEAP32[(($__size__i24_i_i_i723)>>2)]=0;
 label=41;break;
 case 40: 
 var $__data__i_i_i_i731=(($__psn+4)|0);
 HEAP32[(($__data__i_i_i_i731)>>2)]=0;
 HEAP8[($__size__i46_i_i_i706)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 43: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i706)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($__size__i46_i_i_i706)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($__size__i46_i_i_i706)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp17);
 var $65=$49;
 var $vtable_i782=HEAP32[(($65)>>2)];
 var $vfn_i783=(($vtable_i782+12)|0);
 var $66=HEAP32[(($vfn_i783)>>2)];
 var $call_i784=FUNCTION_TABLE[$66]($51);
 HEAP32[(($__dp)>>2)]=$call_i784;
 var $vtable_i787=HEAP32[(($65)>>2)];
 var $vfn_i788=(($vtable_i787+16)|0);
 var $67=HEAP32[(($vfn_i788)>>2)];
 var $call_i789=FUNCTION_TABLE[$67]($51);
 HEAP32[(($__ts)>>2)]=$call_i789;
 var $68=$49;
 var $vtable_i792=HEAP32[(($68)>>2)];
 var $vfn_i793=(($vtable_i792+20)|0);
 var $69=HEAP32[(($vfn_i793)>>2)];
 FUNCTION_TABLE[$69]($ref_tmp21,$51);
 var $__size__i46_i_i_i862=$__grp;
 var $70=HEAP8[($__size__i46_i_i_i862)];
 var $and_i_i_i_i864=$70&1;
 var $tobool_i_i_i_i865=(($and_i_i_i_i864<<24)>>24)==0;
 if($tobool_i_i_i_i865){label=45;break;}else{label=44;break;}
 case 44: 
 var $__data__i36_i_i_i872=(($__grp+8)|0);
 var $71=HEAP32[(($__data__i36_i_i_i872)>>2)];
 HEAP8[($71)]=0;
 var $__size__i24_i_i_i879=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i879)>>2)]=0;
 label=46;break;
 case 45: 
 var $__s_i45_i_i_i861=$__grp;
 var $arrayidx_i_i_i_i888=(($__s_i45_i_i_i861+1)|0);
 HEAP8[($arrayidx_i_i_i_i888)]=0;
 HEAP8[($__size__i46_i_i_i862)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i862)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($__size__i46_i_i_i862)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($__size__i46_i_i_i862)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp21);
 var $vtable_i938=HEAP32[(($56)>>2)];
 var $vfn_i939=(($vtable_i938+24)|0);
 var $73=HEAP32[(($vfn_i939)>>2)];
 FUNCTION_TABLE[$73]($ref_tmp23,$51);
 var $__size__i46_i_i_i1008=$__sym;
 var $74=HEAP8[($__size__i46_i_i_i1008)];
 var $and_i_i_i_i1010=$74&1;
 var $tobool_i_i_i_i1011=(($and_i_i_i_i1010<<24)>>24)==0;
 if($tobool_i_i_i_i1011){label=50;break;}else{label=49;break;}
 case 49: 
 var $__data__i36_i_i_i1018=(($__sym+8)|0);
 var $75=HEAP32[(($__data__i36_i_i_i1018)>>2)];
 HEAP32[(($75)>>2)]=0;
 var $__size__i24_i_i_i1025=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i1025)>>2)]=0;
 label=51;break;
 case 50: 
 var $__data__i_i_i_i1033=(($__sym+4)|0);
 HEAP32[(($__data__i_i_i_i1033)>>2)]=0;
 HEAP8[($__size__i46_i_i_i1008)]=0;
 label=51;break;
 case 51: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=52;break; }
 case 52: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1,0); var $76$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 53: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i1008)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($__size__i46_i_i_i1008)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($__size__i46_i_i_i1008)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp23);
 var $vtable_i1084=HEAP32[(($65)>>2)];
 var $vfn_i1085=(($vtable_i1084+36)|0);
 var $77=HEAP32[(($vfn_i1085)>>2)];
 var $call_i1086=FUNCTION_TABLE[$77]($51);
 var $storemerge=$call_i1086;label=54;break;
 case 54: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__second__i_i_i=(($__b+4)|0);
 var $0=HEAP32[(($__second__i_i_i)>>2)];
 var $cmp=($0|0)!=((446)|0);
 var $1=HEAP32[(($__e)>>2)];
 var $__first__i_i_i56=(($__b)|0);
 var $2=HEAP32[(($__first__i_i_i56)>>2)];
 var $sub_ptr_lhs_cast=$1;
 var $sub_ptr_rhs_cast=$2;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp3=($sub_ptr_sub>>>0)<2147483647;
 var $mul4=$sub_ptr_sub<<1;
 var $cond=($cmp3?$mul4:-1);
 var $3=HEAP32[(($__n)>>2)];
 var $sub_ptr_lhs_cast7=$3;
 var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div10=$sub_ptr_sub9>>2;
 if($cmp){label=2;break;}else{var $cond15=0;label=3;break;}
 case 2: 
 var $phitmp=$2;
 var $cond15=$phitmp;label=3;break;
 case 3: 
 var $cond15;
 var $call16=_realloc($cond15,$cond);
 var $4=$call16;
 var $cmp17=($call16|0)==0;
 if($cmp17){label=4;break;}else{label=5;break;}
 case 4: 
 __ZSt17__throw_bad_allocv();
 label=5;break;
 case 5: 
 if($cmp){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($__first__i_i_i56)>>2)]=$4;
 var $8=$4;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($__first__i_i_i56)>>2)];
 HEAP32[(($__first__i_i_i56)>>2)]=$4;
 var $tobool_i_i=($_pr|0)==0;
 if($tobool_i_i){var $8=$4;label=11;break;}else{label=8;break;}
 case 8: 
 var $5=HEAP32[(($__second__i_i_i)>>2)];
 var $6=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5]($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($__first__i_i_i56)>>2)];
 var $8=$_pre;label=11;break;
 case 10: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 11: 
 var $8;
 HEAP32[(($__second__i_i_i)>>2)]=234;
 var $div24=$cond>>>2;
 var $add_ptr=(($8+($sub_ptr_div10<<2))|0);
 HEAP32[(($__n)>>2)]=$add_ptr;
 var $9=HEAP32[(($__first__i_i_i56)>>2)];
 var $add_ptr27=(($9+($div24<<2))|0);
 HEAP32[(($__e)>>2)]=$add_ptr27;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(232);
 var $__pat=(sp)+(240);
 var $__dp=(sp)+(248);
 var $__ts=(sp)+(256);
 var $__grp=(sp)+(264);
 var $__grp64=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i354=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $agg_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$arraydecay;
 var $arraydecay2=(($__digits)|0);
 var $call=_snprintf($arraydecay,100,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $cmp=($call>>>0)>99;
 if($cmp){label=2;break;}else{var $__db_0=$arraydecay2;var $__n_0=$call;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $0=HEAP8[(276352)];
 var $guard_uninitialized_i=(($0<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $1=___cxa_guard_acquire(276352);
 var $tobool_i=($1|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 var $eh_lpad_body$1=$2$1;var $eh_lpad_body$0=$2$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $3=HEAP32[((12216)>>2)];
 var $call6=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $4=HEAP32[(($__bb)>>2)];
 var $cmp7=($4|0)==0;
 if($cmp7){label=9;break;}else{var $8=$4;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $8=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $eh_lpad_body$1=$5$1;var $eh_lpad_body$0=$5$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $6=$eh_lpad_body$0;
 var $7=$eh_lpad_body$1;
 var $ehselector_slot_2=$7;var $exn_slot_2=$6;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=60;break;
 case 13: 
 var $8;
 var $call11=_malloc($call6);
 var $lnot_i=($call11|0)==0;
 if($lnot_i){label=14;break;}else{var $__db_0=$call11;var $__n_0=$call6;var $__hn_sroa_0_1=$8;var $__hd_sroa_0_1=$call11;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=0;var $__n_0=$call6;var $__hn_sroa_0_1=$8;var $__hd_sroa_0_1=0;label=15;break; } else { var $__hn_sroa_0_0=$8;var $__hd_sroa_0_0=0;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $__locale__i=(($__loc)|0);
 var $9=HEAP32[(($__locale__i)>>2)];
 var $10=$__p_i_i_i;
 var $11=HEAP32[((13648)>>2)];
 var $cmp_i_i_i51=($11|0)==-1;
 if($cmp_i_i_i51){label=18;break;}else{label=17;break;}
 case 17: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$10,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $12=HEAP32[((13652)>>2)];
 var $sub_i_i=((($12)-(1))|0);
 var $__end__i_i_i_i=(($9+12)|0);
 var $13=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($9+8)|0);
 var $14=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$13;
 var $sub_ptr_rhs_cast_i_i_i_i=$14;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=19;break;}else{label=20;break;}
 case 19: 
 var $arrayidx_i_i_i_i=(($14+($sub_i_i<<2))|0);
 var $15=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i53=($15|0)==0;
 if($tobool_i_i_i53){label=20;break;}else{label=22;break;}
 case 20: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $16=$exception_i_i;
 __ZNSt8bad_castC2Ev($16);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $17=$15;
 var $18=HEAP32[(($__bb)>>2)];
 var $add_ptr=(($18+$__n_0)|0);
 var $19=$15;
 var $vtable_i=HEAP32[(($19)>>2)];
 var $vfn_i=(($vtable_i+32)|0);
 var $20=HEAP32[(($vfn_i)>>2)];
 var $call_i160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$20]($17,$18,$add_ptr,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $cmp24=($__n_0|0)==0;
 if($cmp24){var $23=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $21=HEAP32[(($__bb)>>2)];
 var $22=HEAP8[($21)];
 var $cmp25=(($22<<24)>>24)==45;
 var $23=$cmp25;label=25;break;
 case 25: 
 var $23;
 HEAP32[(($__grp64)>>2)]=0; HEAP32[((($__grp64)+(4))>>2)]=0; HEAP32[((($__grp64)+(8))>>2)]=0;
 HEAP32[(($__size__i_i354)>>2)]=0; HEAP32[((($__size__i_i354)+(4))>>2)]=0; HEAP32[((($__size__i_i354)+(8))>>2)]=0;
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$23,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $arraydecay30=(($__mbuf)|0);
 var $24=HEAP32[(($__fd)>>2)];
 var $cmp32=($__n_0|0)>($24|0);
 if($cmp32){label=27;break;}else{label=34;break;}
 case 27: 
 var $sub=((($__n_0)-($24))|0);
 var $mul33=$sub<<1;
 var $25=HEAP8[($__size__i_i)];
 var $conv_i_i=($25&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=29;break;}else{label=28;break;}
 case 28: 
 var $__size__i23_i=(($__sn+4)|0);
 var $26=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$26;label=30;break;
 case 29: 
 var $shr_i_i49=$conv_i_i>>>1;
 var $cond_i=$shr_i_i49;label=30;break;
 case 30: 
 var $cond_i;
 var $27=HEAP8[($__size__i_i354)];
 var $conv_i_i355=($27&255);
 var $and_i_i356=$conv_i_i355&1;
 var $tobool_i_i357=($and_i_i356|0)==0;
 if($tobool_i_i357){label=32;break;}else{label=31;break;}
 case 31: 
 var $__size__i23_i364=(($__sym+4)|0);
 var $28=HEAP32[(($__size__i23_i364)>>2)];
 var $cond_i376=$28;label=33;break;
 case 32: 
 var $shr_i_i37450=$conv_i_i355>>>1;
 var $cond_i376=$shr_i_i37450;label=33;break;
 case 33: 
 var $cond_i376;
 var $add63=$mul33|1;
 var $add36=((($add63)+($cond_i))|0);
 var $add37=((($add36)+($cond_i376))|0);
 var $add37_pn=$add37;label=41;break;
 case 34: 
 var $29=HEAP8[($__size__i_i)];
 var $conv_i_i427=($29&255);
 var $and_i_i428=$conv_i_i427&1;
 var $tobool_i_i429=($and_i_i428|0)==0;
 if($tobool_i_i429){label=36;break;}else{label=35;break;}
 case 35: 
 var $__size__i23_i436=(($__sn+4)|0);
 var $30=HEAP32[(($__size__i23_i436)>>2)];
 var $cond_i448=$30;label=37;break;
 case 36: 
 var $shr_i_i44647=$conv_i_i427>>>1;
 var $cond_i448=$shr_i_i44647;label=37;break;
 case 37: 
 var $cond_i448;
 var $31=HEAP8[($__size__i_i354)];
 var $conv_i_i468=($31&255);
 var $and_i_i469=$conv_i_i468&1;
 var $tobool_i_i470=($and_i_i469|0)==0;
 if($tobool_i_i470){label=39;break;}else{label=38;break;}
 case 38: 
 var $__size__i23_i477=(($__sym+4)|0);
 var $32=HEAP32[(($__size__i23_i477)>>2)];
 var $cond_i489=$32;label=40;break;
 case 39: 
 var $shr_i_i48748=$conv_i_i468>>>1;
 var $cond_i489=$shr_i_i48748;label=40;break;
 case 40: 
 var $cond_i489;
 var $add41=((($cond_i448)+(2))|0);
 var $add42=((($add41)+($cond_i489))|0);
 var $add37_pn=$add42;label=41;break;
 case 41: 
 var $add37_pn;
 var $cond=((($add37_pn)+($24))|0);
 var $cmp44=($cond>>>0)>100;
 if($cmp44){label=42;break;}else{var $__mb_0=$arraydecay30;var $__hw_sroa_0_1=0;label=49;break;}
 case 42: 
 var $call49=_malloc($cond);
 var $cmp51=($call49|0)==0;
 if($cmp51){label=43;break;}else{var $__mb_0=$call49;var $__hw_sroa_0_1=$call49;label=49;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=0;var $__hw_sroa_0_1=0;label=49;break; } else { label=44;break; }
 case 44: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=$33$0;
 var $35=$33$1;
 var $ehselector_slot_0=$35;var $exn_slot_0=$34;label=58;break;
 case 45: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=$36$1;
 var $ehselector_slot_1=$38;var $exn_slot_1=$37;label=59;break;
 case 46: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 var $40=$39$0;
 var $41=$39$1;
 var $ehselector_slot_0=$41;var $exn_slot_0=$40;label=58;break;
 case 47: 
 var $42$0 = ___cxa_find_matching_catch(-1, -1); var $42$1 = tempRet0;
 var $43=$42$0;
 var $44=$42$1;
 var $tobool_i_i_i548=($__hw_sroa_0_1|0)==0;
 if($tobool_i_i_i548){var $ehselector_slot_0=$44;var $exn_slot_0=$43;label=58;break;}else{label=48;break;}
 case 48: 
 _free($__hw_sroa_0_1);
 var $ehselector_slot_0=$44;var $exn_slot_0=$43;label=58;break;
 case 49: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $__fmtflags__i=(($__iob+4)|0);
 var $45=HEAP32[(($__fmtflags__i)>>2)];
 var $add_ptr58=(($__db_0+$__n_0)|0);
 var $46=HEAP8[($__dp)];
 var $47=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$45,$__db_0,$add_ptr58,$17,$23,$__pat,$46,$47,$__grp,$__sym,$__sn,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=47;break; }
 case 50: 
 var $48=(($__s)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_tmp)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=HEAP32[(($__mi)>>2)];
 var $52=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$__mb_0,$51,$52,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=47;break; }
 case 51: 
 var $tobool_i_i_i581=($__hw_sroa_0_1|0)==0;
 if($tobool_i_i_i581){label=53;break;}else{label=52;break;}
 case 52: 
 _free($__hw_sroa_0_1);
 label=53;break;
 case 53: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $53=HEAP32[(($__locale__i)>>2)];
 var $54=(($53)|0);
 var $call_i56=__ZNSt3__114__shared_count16__release_sharedEv($54);
 var $tobool_i_i_i400=($__hd_sroa_0_1|0)==0;
 if($tobool_i_i_i400){label=55;break;}else{label=54;break;}
 case 54: 
 _free($__hd_sroa_0_1);
 label=55;break;
 case 55: 
 var $tobool_i_i_i317=($__hn_sroa_0_1|0)==0;
 if($tobool_i_i_i317){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__hn_sroa_0_1);
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
 case 58: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $ehselector_slot_1=$ehselector_slot_0;var $exn_slot_1=$exn_slot_0;label=59;break;
 case 59: 
 var $exn_slot_1;
 var $ehselector_slot_1;
 var $55=HEAP32[(($__locale__i)>>2)];
 var $56=(($55)|0);
 var $call_i58=__ZNSt3__114__shared_count16__release_sharedEv($56);
 var $ehselector_slot_2=$ehselector_slot_1;var $exn_slot_2=$exn_slot_1;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=60;break;
 case 60: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $exn_slot_2;
 var $ehselector_slot_2;
 var $tobool_i_i_i194=($__hd_sroa_0_2|0)==0;
 if($tobool_i_i_i194){label=62;break;}else{label=61;break;}
 case 61: 
 _free($__hd_sroa_0_2);
 label=62;break;
 case 62: 
 var $tobool_i_i_i=($__hn_sroa_0_2|0)==0;
 if($tobool_i_i_i){label=64;break;}else{label=63;break;}
 case 63: 
 _free($__hn_sroa_0_2);
 label=64;break;
 case 64: 
 var $lpad_val$0=$exn_slot_2;
 var $lpad_val$1=0;
 var $lpad_val67$0=$lpad_val$0;
 var $lpad_val67$1=$ehselector_slot_2;
 ___resumeException($lpad_val67$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i63=sp;
 var $__p_i_i_i=(sp)+(16);
 var $ref_tmp=(sp)+(32);
 var $tmpcast59=$ref_tmp;
 var $ref_tmp4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $0=$ref_tmp4;
 var $ref_tmp6=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast58=$ref_tmp6;
 var $ref_tmp7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$ref_tmp7;
 var $ref_tmp11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$ref_tmp11;
 var $ref_tmp13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$ref_tmp13;
 var $ref_tmp21=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast57=$ref_tmp21;
 var $ref_tmp22=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=$ref_tmp22;
 var $ref_tmp25=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$ref_tmp25;
 var $ref_tmp26=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$ref_tmp26;
 var $ref_tmp31=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$ref_tmp31;
 var $ref_tmp33=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$ref_tmp33;
 var $__locale__i=(($__loc)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $9=$__p_i_i_i;
 var $10=HEAP32[((14120)>>2)];
 var $cmp_i_i_i60=($10|0)==-1;
 if($cmp_i_i_i60){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=14120;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14120,$9,272);
 label=4;break;
 case 4: 
 var $11=HEAP32[((14124)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i62=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i62)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 7: 
 var $16=$14;
 var $17=$14;
 var $vtable_i=HEAP32[(($17)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $vfn_i=(($vtable_i+44)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($tmpcast59,$16);
 var $19=$__pat;
 var $20=HEAP32[(($ref_tmp)>>2)];
 tempBigInt=$20;HEAP8[($19)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(3))|0)]=tempBigInt&0xff;
 var $21=$14;
 var $vtable_i39=HEAP32[(($21)>>2)];
 var $vfn_i40=(($vtable_i39+32)|0);
 var $22=HEAP32[(($vfn_i40)>>2)];
 FUNCTION_TABLE[$22]($ref_tmp4,$16);
 var $__size__i46_i_i_i=$__sn;
 var $23=HEAP8[($__size__i46_i_i_i)];
 var $and_i_i_i_i=$23&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=10;break;}else{label=9;break;}
 case 9: 
 var $__data__i36_i_i_i=(($__sn+8)|0);
 var $24=HEAP32[(($__data__i36_i_i_i)>>2)];
 HEAP8[($24)]=0;
 var $__size__i24_i_i_i=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i)>>2)]=0;
 label=11;break;
 case 10: 
 var $__s_i45_i_i_i=$__sn;
 var $arrayidx_i_i_i_i=(($__s_i45_i_i_i+1)|0);
 HEAP8[($arrayidx_i_i_i_i)]=0;
 HEAP8[($__size__i46_i_i_i)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1,0); var $25$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i)>>2)]=HEAP32[(($0)>>2)];HEAP32[((($__size__i46_i_i_i)+(4))>>2)]=HEAP32[((($0)+(4))>>2)];HEAP32[((($__size__i46_i_i_i)+(8))>>2)]=HEAP32[((($0)+(8))>>2)];
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp4);
 label=20;break;
 case 14: 
 var $vfn_i46=(($vtable_i+40)|0);
 var $26=HEAP32[(($vfn_i46)>>2)];
 FUNCTION_TABLE[$26]($tmpcast58,$16);
 var $27=$__pat;
 var $28=HEAP32[(($ref_tmp6)>>2)];
 tempBigInt=$28;HEAP8[($27)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(3))|0)]=tempBigInt&0xff;
 var $29=$14;
 var $vtable_i49=HEAP32[(($29)>>2)];
 var $vfn_i50=(($vtable_i49+28)|0);
 var $30=HEAP32[(($vfn_i50)>>2)];
 FUNCTION_TABLE[$30]($ref_tmp7,$16);
 var $__size__i46_i_i_i119=$__sn;
 var $31=HEAP8[($__size__i46_i_i_i119)];
 var $and_i_i_i_i121=$31&1;
 var $tobool_i_i_i_i122=(($and_i_i_i_i121<<24)>>24)==0;
 if($tobool_i_i_i_i122){label=16;break;}else{label=15;break;}
 case 15: 
 var $__data__i36_i_i_i129=(($__sn+8)|0);
 var $32=HEAP32[(($__data__i36_i_i_i129)>>2)];
 HEAP8[($32)]=0;
 var $__size__i24_i_i_i136=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i136)>>2)]=0;
 label=17;break;
 case 16: 
 var $__s_i45_i_i_i118=$__sn;
 var $arrayidx_i_i_i_i145=(($__s_i45_i_i_i118+1)|0);
 HEAP8[($arrayidx_i_i_i_i145)]=0;
 HEAP8[($__size__i46_i_i_i119)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i119)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($__size__i46_i_i_i119)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($__size__i46_i_i_i119)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp7);
 label=20;break;
 case 20: 
 var $34=$14;
 var $vtable_i195=HEAP32[(($34)>>2)];
 var $vfn_i196=(($vtable_i195+12)|0);
 var $35=HEAP32[(($vfn_i196)>>2)];
 var $call_i197=FUNCTION_TABLE[$35]($16);
 HEAP8[($__dp)]=$call_i197;
 var $vtable_i200=HEAP32[(($34)>>2)];
 var $vfn_i201=(($vtable_i200+16)|0);
 var $36=HEAP32[(($vfn_i201)>>2)];
 var $call_i202=FUNCTION_TABLE[$36]($16);
 HEAP8[($__ts)]=$call_i202;
 var $37=$14;
 var $vtable_i205=HEAP32[(($37)>>2)];
 var $vfn_i206=(($vtable_i205+20)|0);
 var $38=HEAP32[(($vfn_i206)>>2)];
 FUNCTION_TABLE[$38]($ref_tmp11,$16);
 var $__size__i46_i_i_i275=$__grp;
 var $39=HEAP8[($__size__i46_i_i_i275)];
 var $and_i_i_i_i277=$39&1;
 var $tobool_i_i_i_i278=(($and_i_i_i_i277<<24)>>24)==0;
 if($tobool_i_i_i_i278){label=22;break;}else{label=21;break;}
 case 21: 
 var $__data__i36_i_i_i285=(($__grp+8)|0);
 var $40=HEAP32[(($__data__i36_i_i_i285)>>2)];
 HEAP8[($40)]=0;
 var $__size__i24_i_i_i292=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i292)>>2)]=0;
 label=23;break;
 case 22: 
 var $__s_i45_i_i_i274=$__grp;
 var $arrayidx_i_i_i_i301=(($__s_i45_i_i_i274+1)|0);
 HEAP8[($arrayidx_i_i_i_i301)]=0;
 HEAP8[($__size__i46_i_i_i275)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1,0); var $41$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i275)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($__size__i46_i_i_i275)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($__size__i46_i_i_i275)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp11);
 var $vtable_i351=HEAP32[(($37)>>2)];
 var $vfn_i352=(($vtable_i351+24)|0);
 var $42=HEAP32[(($vfn_i352)>>2)];
 FUNCTION_TABLE[$42]($ref_tmp13,$16);
 var $__size__i46_i_i_i421=$__sym;
 var $43=HEAP8[($__size__i46_i_i_i421)];
 var $and_i_i_i_i423=$43&1;
 var $tobool_i_i_i_i424=(($and_i_i_i_i423<<24)>>24)==0;
 if($tobool_i_i_i_i424){label=27;break;}else{label=26;break;}
 case 26: 
 var $__data__i36_i_i_i431=(($__sym+8)|0);
 var $44=HEAP32[(($__data__i36_i_i_i431)>>2)];
 HEAP8[($44)]=0;
 var $__size__i24_i_i_i438=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i438)>>2)]=0;
 label=28;break;
 case 27: 
 var $__s_i45_i_i_i420=$__sym;
 var $arrayidx_i_i_i_i447=(($__s_i45_i_i_i420+1)|0);
 HEAP8[($arrayidx_i_i_i_i447)]=0;
 HEAP8[($__size__i46_i_i_i421)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $45$0 = ___cxa_find_matching_catch(-1, -1,0); var $45$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i421)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($__size__i46_i_i_i421)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($__size__i46_i_i_i421)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp13);
 var $46=$14;
 var $vtable_i497=HEAP32[(($46)>>2)];
 var $vfn_i498=(($vtable_i497+36)|0);
 var $47=HEAP32[(($vfn_i498)>>2)];
 var $call_i499=FUNCTION_TABLE[$47]($16);
 var $storemerge=$call_i499;label=60;break;
 case 31: 
 var $48=$__p_i_i_i63;
 var $49=HEAP32[((14128)>>2)];
 var $cmp_i_i_i65=($49|0)==-1;
 if($cmp_i_i_i65){label=33;break;}else{label=32;break;}
 case 32: 
 var $ref_tmp_i_sroa_0_0__idx_i_i66=(($__p_i_i_i63)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i66)>>2)]=14128;
 var $ref_tmp_i_sroa_1_4__idx6_i_i67=(($__p_i_i_i63+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i67)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i68=(($__p_i_i_i63+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i68)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14128,$48,272);
 label=33;break;
 case 33: 
 var $50=HEAP32[((14132)>>2)];
 var $sub_i_i70=((($50)-(1))|0);
 var $__end__i_i_i_i71=(($8+12)|0);
 var $51=HEAP32[(($__end__i_i_i_i71)>>2)];
 var $__begin__i_i_i_i72=(($8+8)|0);
 var $52=HEAP32[(($__begin__i_i_i_i72)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i73=$51;
 var $sub_ptr_rhs_cast_i_i_i_i74=$52;
 var $sub_ptr_sub_i_i_i_i75=((($sub_ptr_lhs_cast_i_i_i_i73)-($sub_ptr_rhs_cast_i_i_i_i74))|0);
 var $sub_ptr_div_i_i_i_i76=$sub_ptr_sub_i_i_i_i75>>2;
 var $cmp_i_i1_i77=($sub_ptr_div_i_i_i_i76>>>0)>($sub_i_i70>>>0);
 if($cmp_i_i1_i77){label=34;break;}else{label=35;break;}
 case 34: 
 var $arrayidx_i_i_i_i79=(($52+($sub_i_i70<<2))|0);
 var $53=HEAP32[(($arrayidx_i_i_i_i79)>>2)];
 var $tobool_i_i_i80=($53|0)==0;
 if($tobool_i_i_i80){label=35;break;}else{label=36;break;}
 case 35: 
 var $exception_i_i82=___cxa_allocate_exception(4);
 var $54=$exception_i_i82;
 __ZNSt8bad_castC2Ev($54);
 ___cxa_throw($exception_i_i82,8536,(376));
 throw "Reached an unreachable!";
 case 36: 
 var $55=$53;
 var $56=$53;
 var $vtable_i504=HEAP32[(($56)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $vfn_i505=(($vtable_i504+44)|0);
 var $57=HEAP32[(($vfn_i505)>>2)];
 FUNCTION_TABLE[$57]($tmpcast57,$55);
 var $58=$__pat;
 var $59=HEAP32[(($ref_tmp21)>>2)];
 tempBigInt=$59;HEAP8[($58)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(3))|0)]=tempBigInt&0xff;
 var $60=$53;
 var $vtable_i508=HEAP32[(($60)>>2)];
 var $vfn_i509=(($vtable_i508+32)|0);
 var $61=HEAP32[(($vfn_i509)>>2)];
 FUNCTION_TABLE[$61]($ref_tmp22,$55);
 var $__size__i46_i_i_i578=$__sn;
 var $62=HEAP8[($__size__i46_i_i_i578)];
 var $and_i_i_i_i580=$62&1;
 var $tobool_i_i_i_i581=(($and_i_i_i_i580<<24)>>24)==0;
 if($tobool_i_i_i_i581){label=39;break;}else{label=38;break;}
 case 38: 
 var $__data__i36_i_i_i588=(($__sn+8)|0);
 var $63=HEAP32[(($__data__i36_i_i_i588)>>2)];
 HEAP8[($63)]=0;
 var $__size__i24_i_i_i595=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i595)>>2)]=0;
 label=40;break;
 case 39: 
 var $__s_i45_i_i_i577=$__sn;
 var $arrayidx_i_i_i_i604=(($__s_i45_i_i_i577+1)|0);
 HEAP8[($arrayidx_i_i_i_i604)]=0;
 HEAP8[($__size__i46_i_i_i578)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i578)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($__size__i46_i_i_i578)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($__size__i46_i_i_i578)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp22);
 label=49;break;
 case 43: 
 var $vfn_i655=(($vtable_i504+40)|0);
 var $65=HEAP32[(($vfn_i655)>>2)];
 FUNCTION_TABLE[$65]($tmpcast,$55);
 var $66=$__pat;
 var $67=HEAP32[(($ref_tmp25)>>2)];
 tempBigInt=$67;HEAP8[($66)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(3))|0)]=tempBigInt&0xff;
 var $68=$53;
 var $vtable_i658=HEAP32[(($68)>>2)];
 var $vfn_i659=(($vtable_i658+28)|0);
 var $69=HEAP32[(($vfn_i659)>>2)];
 FUNCTION_TABLE[$69]($ref_tmp26,$55);
 var $__size__i46_i_i_i728=$__sn;
 var $70=HEAP8[($__size__i46_i_i_i728)];
 var $and_i_i_i_i730=$70&1;
 var $tobool_i_i_i_i731=(($and_i_i_i_i730<<24)>>24)==0;
 if($tobool_i_i_i_i731){label=45;break;}else{label=44;break;}
 case 44: 
 var $__data__i36_i_i_i738=(($__sn+8)|0);
 var $71=HEAP32[(($__data__i36_i_i_i738)>>2)];
 HEAP8[($71)]=0;
 var $__size__i24_i_i_i745=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i745)>>2)]=0;
 label=46;break;
 case 45: 
 var $__s_i45_i_i_i727=$__sn;
 var $arrayidx_i_i_i_i754=(($__s_i45_i_i_i727+1)|0);
 HEAP8[($arrayidx_i_i_i_i754)]=0;
 HEAP8[($__size__i46_i_i_i728)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i728)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($__size__i46_i_i_i728)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($__size__i46_i_i_i728)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp26);
 label=49;break;
 case 49: 
 var $73=$53;
 var $vtable_i804=HEAP32[(($73)>>2)];
 var $vfn_i805=(($vtable_i804+12)|0);
 var $74=HEAP32[(($vfn_i805)>>2)];
 var $call_i806=FUNCTION_TABLE[$74]($55);
 HEAP8[($__dp)]=$call_i806;
 var $vtable_i809=HEAP32[(($73)>>2)];
 var $vfn_i810=(($vtable_i809+16)|0);
 var $75=HEAP32[(($vfn_i810)>>2)];
 var $call_i811=FUNCTION_TABLE[$75]($55);
 HEAP8[($__ts)]=$call_i811;
 var $76=$53;
 var $vtable_i814=HEAP32[(($76)>>2)];
 var $vfn_i815=(($vtable_i814+20)|0);
 var $77=HEAP32[(($vfn_i815)>>2)];
 FUNCTION_TABLE[$77]($ref_tmp31,$55);
 var $__size__i46_i_i_i884=$__grp;
 var $78=HEAP8[($__size__i46_i_i_i884)];
 var $and_i_i_i_i886=$78&1;
 var $tobool_i_i_i_i887=(($and_i_i_i_i886<<24)>>24)==0;
 if($tobool_i_i_i_i887){label=51;break;}else{label=50;break;}
 case 50: 
 var $__data__i36_i_i_i894=(($__grp+8)|0);
 var $79=HEAP32[(($__data__i36_i_i_i894)>>2)];
 HEAP8[($79)]=0;
 var $__size__i24_i_i_i901=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i901)>>2)]=0;
 label=52;break;
 case 51: 
 var $__s_i45_i_i_i883=$__grp;
 var $arrayidx_i_i_i_i910=(($__s_i45_i_i_i883+1)|0);
 HEAP8[($arrayidx_i_i_i_i910)]=0;
 HEAP8[($__size__i46_i_i_i884)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i884)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($__size__i46_i_i_i884)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($__size__i46_i_i_i884)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp31);
 var $vtable_i960=HEAP32[(($76)>>2)];
 var $vfn_i961=(($vtable_i960+24)|0);
 var $81=HEAP32[(($vfn_i961)>>2)];
 FUNCTION_TABLE[$81]($ref_tmp33,$55);
 var $__size__i46_i_i_i1030=$__sym;
 var $82=HEAP8[($__size__i46_i_i_i1030)];
 var $and_i_i_i_i1032=$82&1;
 var $tobool_i_i_i_i1033=(($and_i_i_i_i1032<<24)>>24)==0;
 if($tobool_i_i_i_i1033){label=56;break;}else{label=55;break;}
 case 55: 
 var $__data__i36_i_i_i1040=(($__sym+8)|0);
 var $83=HEAP32[(($__data__i36_i_i_i1040)>>2)];
 HEAP8[($83)]=0;
 var $__size__i24_i_i_i1047=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i1047)>>2)]=0;
 label=57;break;
 case 56: 
 var $__s_i45_i_i_i1029=$__sym;
 var $arrayidx_i_i_i_i1056=(($__s_i45_i_i_i1029+1)|0);
 HEAP8[($arrayidx_i_i_i_i1056)]=0;
 HEAP8[($__size__i46_i_i_i1030)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i1030)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($__size__i46_i_i_i1030)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($__size__i46_i_i_i1030)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp33);
 var $85=$53;
 var $vtable_i1106=HEAP32[(($85)>>2)];
 var $vfn_i1107=(($vtable_i1106+36)|0);
 var $86=HEAP32[(($vfn_i1107)>>2)];
 var $call_i1108=FUNCTION_TABLE[$86]($55);
 var $storemerge=$call_i1108;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $0=$__ct;
 var $__s_i_i_i=$__sn;
 var $__size__i_i_i=$__sn;
 var $arrayidx_i_i_i_i468=(($__s_i_i_i+1)|0);
 var $__data__i21_i_i_i459=(($__sn+8)|0);
 var $__size__i23_i_i=(($__sn+4)|0);
 var $__s_i_i_i497=$__sym;
 var $__size__i_i_i498=$__sym;
 var $and=$__flags&512;
 var $tobool=($and|0)==0;
 var $arrayidx_i_i_i575=(($__s_i_i_i497+1)|0);
 var $__size__i23_i_i706=(($__sym+4)|0);
 var $__data__i21_i_i676=(($__sym+8)|0);
 var $__tab__i=(($__ct+8)|0);
 var $cmp24=($__fd|0)>0;
 var $__s_i_i_i392=$__grp;
 var $__size__i_i_i393=$__grp;
 var $arrayidx_i_i_i_i369=(($__s_i_i_i392+1)|0);
 var $__data__i21_i_i_i360=(($__grp+8)|0);
 var $__size__i23_i311=(($__grp+4)|0);
 var $1=(((-$__fd))|0);
 var $__db_addr_0121=$__db;var $__p_0122=0;label=2;break;
 case 2: 
 var $__p_0122;
 var $__db_addr_0121;
 var $arrayidx=(($__pat+$__p_0122)|0);
 var $2=HEAP8[($arrayidx)];
 var $conv=(($2<<24)>>24);
 switch(($conv|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $__db_addr_2=$__db_addr_0121;label=62;break;}}break;
 case 3: 
 var $3=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$3;
 var $__db_addr_2=$__db_addr_0121;label=62;break;
 case 4: 
 var $4=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$4;
 var $vtable_i=HEAP32[(($0)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $5=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$5]($__ct,32);
 var $6=HEAP32[(($__me)>>2)];
 var $incdec_ptr=(($6+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr;
 HEAP8[($6)]=$call_i;
 var $__db_addr_2=$__db_addr_0121;label=62;break;
 case 5: 
 var $7=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($7&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $8=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i_i=$8;label=8;break;
 case 7: 
 var $shr_i_i_i90=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i90;label=8;break;
 case 8: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){var $__db_addr_2=$__db_addr_0121;label=62;break;}else{label=9;break;}
 case 9: 
 var $and_i_i_i_i451=$7&1;
 var $tobool_i_i_i_i452=(($and_i_i_i_i451<<24)>>24)==0;
 if($tobool_i_i_i_i452){var $cond_i_i_i470=$arrayidx_i_i_i_i468;label=11;break;}else{label=10;break;}
 case 10: 
 var $9=HEAP32[(($__data__i21_i_i_i459)>>2)];
 var $cond_i_i_i470=$9;label=11;break;
 case 11: 
 var $cond_i_i_i470;
 var $10=HEAP8[($cond_i_i_i470)];
 var $11=HEAP32[(($__me)>>2)];
 var $incdec_ptr5=(($11+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr5;
 HEAP8[($11)]=$10;
 var $__db_addr_2=$__db_addr_0121;label=62;break;
 case 12: 
 var $12=HEAP8[($__size__i_i_i498)];
 var $conv_i_i_i499=($12&255);
 var $and_i_i_i500=$conv_i_i_i499&1;
 var $tobool_i_i_i501=($and_i_i_i500|0)==0;
 if($tobool_i_i_i501){label=14;break;}else{label=13;break;}
 case 13: 
 var $13=HEAP32[(($__size__i23_i_i706)>>2)];
 var $cond_i_i520=$13;label=15;break;
 case 14: 
 var $shr_i_i_i51888=$conv_i_i_i499>>>1;
 var $cond_i_i520=$shr_i_i_i51888;label=15;break;
 case 15: 
 var $cond_i_i520;
 var $cmp_i521=($cond_i_i520|0)==0;
 var $brmerge=$cmp_i521|$tobool;
 if($brmerge){var $__db_addr_2=$__db_addr_0121;label=62;break;}else{label=16;break;}
 case 16: 
 var $and_i_i_i558=$12&1;
 var $tobool_i_i_i559=(($and_i_i_i558<<24)>>24)==0;
 if($tobool_i_i_i559){var $cond_i_i687=$arrayidx_i_i_i575;var $cond_i_i577138=$arrayidx_i_i_i575;label=18;break;}else{label=17;break;}
 case 17: 
 var $14=HEAP32[(($__data__i21_i_i676)>>2)];
 var $cond_i_i687=$14;var $cond_i_i577138=$14;label=18;break;
 case 18: 
 var $cond_i_i577138;
 var $cond_i_i687;
 if($tobool_i_i_i501){label=20;break;}else{label=19;break;}
 case 19: 
 var $15=HEAP32[(($__size__i23_i_i706)>>2)];
 var $cond_i34_i718=$15;label=21;break;
 case 20: 
 var $shr_i_i_i71689=$conv_i_i_i499>>>1;
 var $cond_i34_i718=$shr_i_i_i71689;label=21;break;
 case 21: 
 var $cond_i34_i718;
 var $add_ptr_i719=(($cond_i_i687+$cond_i34_i718)|0);
 var $16=HEAP32[(($__me)>>2)];
 var $lnot_i_i_i621117=($cond_i_i577138|0)==($add_ptr_i719|0);
 if($lnot_i_i_i621117){var $__result_addr_i_i599_0_lcssa=$16;label=23;break;}else{var $agg_tmp7_i601_sroa_0_0118=$cond_i_i577138;var $__result_addr_i_i599_0119=$16;label=22;break;}
 case 22: 
 var $__result_addr_i_i599_0119;
 var $agg_tmp7_i601_sroa_0_0118;
 var $17=HEAP8[($agg_tmp7_i601_sroa_0_0118)];
 HEAP8[($__result_addr_i_i599_0119)]=$17;
 var $incdec_ptr_i_i_i627=(($agg_tmp7_i601_sroa_0_0118+1)|0);
 var $incdec_ptr_i_i628=(($__result_addr_i_i599_0119+1)|0);
 var $lnot_i_i_i621=($incdec_ptr_i_i_i627|0)==($add_ptr_i719|0);
 if($lnot_i_i_i621){var $__result_addr_i_i599_0_lcssa=$incdec_ptr_i_i628;label=23;break;}else{var $agg_tmp7_i601_sroa_0_0118=$incdec_ptr_i_i_i627;var $__result_addr_i_i599_0119=$incdec_ptr_i_i628;label=22;break;}
 case 23: 
 var $__result_addr_i_i599_0_lcssa;
 HEAP32[(($__me)>>2)]=$__result_addr_i_i599_0_lcssa;
 var $__db_addr_2=$__db_addr_0121;label=62;break;
 case 24: 
 var $18=HEAP32[(($__me)>>2)];
 var $incdec_ptr15=(($__db_addr_0121+1)|0);
 var $incdec_ptr15___db_addr_0=($__neg?$incdec_ptr15:$__db_addr_0121);
 var $__d_0=$incdec_ptr15___db_addr_0;label=25;break;
 case 25: 
 var $__d_0;
 var $cmp18=($__d_0>>>0)<($__de>>>0);
 if($cmp18){label=26;break;}else{label=28;break;}
 case 26: 
 var $19=HEAP8[($__d_0)];
 var $tobool_i=(($19<<24)>>24)<0;
 if($tobool_i){label=28;break;}else{label=27;break;}
 case 27: 
 var $conv_i=(($19<<24)>>24);
 var $20=HEAP32[(($__tab__i)>>2)];
 var $arrayidx_i=(($20+($conv_i<<1))|0);
 var $21=HEAP16[(($arrayidx_i)>>1)];
 var $and_i=$21&2048;
 var $cmp_i527=(($and_i<<16)>>16)==0;
 var $incdec_ptr23=(($__d_0+1)|0);
 if($cmp_i527){label=28;break;}else{var $__d_0=$incdec_ptr23;label=25;break;}
 case 28: 
 var $__d_0_lcssa127=$__d_0;
 if($cmp24){label=29;break;}else{var $__d_2=$__d_0;label=38;break;}
 case 29: 
 var $cmp2796=($__d_0>>>0)>($incdec_ptr15___db_addr_0>>>0);
 if($cmp2796){label=30;break;}else{var $__f_0_lcssa141=$__fd;var $__d_1_lcssa143=$__d_0;label=34;break;}
 case 30: 
 var $22=(((-$__d_0_lcssa127))|0);
 var $scevgep=(($incdec_ptr15___db_addr_0+$22)|0);
 var $scevgep128=$scevgep;
 var $23=($scevgep128>>>0)<($1>>>0);
 var $umax=($23?$1:$scevgep128);
 var $umax129=$umax;
 var $scevgep130=(($umax129+$__fd)|0);
 var $scevgep130131=$scevgep130;
 var $__d_199=$__d_0;var $__f_0100=$__fd;var $24=$18;label=31;break;
 case 31: 
 var $24;
 var $__f_0100;
 var $__d_199;
 var $incdec_ptr30=((($__d_199)-(1))|0);
 var $25=HEAP8[($incdec_ptr30)];
 var $incdec_ptr31=(($24+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr31;
 HEAP8[($24)]=$25;
 var $dec=((($__f_0100)-(1))|0);
 var $cmp27=($incdec_ptr30>>>0)>($incdec_ptr15___db_addr_0>>>0);
 var $cmp28=($dec|0)>0;
 var $or_cond=$cmp27&$cmp28;
 if($or_cond){label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_199=$incdec_ptr30;var $__f_0100=$dec;var $24=$_pre;label=31;break;
 case 33: 
 var $scevgep132=(($__d_0+$umax)|0);
 if($cmp28){var $__f_0_lcssa141=$scevgep130131;var $__d_1_lcssa143=$scevgep132;label=34;break;}else{var $cond=0;var $__f_0_lcssa140=$scevgep130131;var $__d_1_lcssa142=$scevgep132;label=35;break;}
 case 34: 
 var $__d_1_lcssa143;
 var $__f_0_lcssa141;
 var $vtable_i476=HEAP32[(($0)>>2)];
 var $vfn_i477=(($vtable_i476+28)|0);
 var $26=HEAP32[(($vfn_i477)>>2)];
 var $call_i478=FUNCTION_TABLE[$26]($__ct,48);
 var $cond=$call_i478;var $__f_0_lcssa140=$__f_0_lcssa141;var $__d_1_lcssa142=$__d_1_lcssa143;label=35;break;
 case 35: 
 var $__d_1_lcssa142;
 var $__f_0_lcssa140;
 var $cond;
 var $cmp37104=($__f_0_lcssa140|0)>0;
 var $27=HEAP32[(($__me)>>2)];
 var $incdec_ptr39105=(($27+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr39105;
 if($cmp37104){var $__f_1106=$__f_0_lcssa140;var $28=$27;label=36;break;}else{var $_lcssa=$27;label=37;break;}
 case 36: 
 var $28;
 var $__f_1106;
 HEAP8[($28)]=$cond;
 var $dec41=((($__f_1106)-(1))|0);
 var $cmp37=($dec41|0)>0;
 var $29=HEAP32[(($__me)>>2)];
 var $incdec_ptr39=(($29+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr39;
 if($cmp37){var $__f_1106=$dec41;var $28=$29;label=36;break;}else{var $_lcssa=$29;label=37;break;}
 case 37: 
 var $_lcssa;
 HEAP8[($_lcssa)]=$__dp;
 var $__d_2=$__d_1_lcssa142;label=38;break;
 case 38: 
 var $__d_2;
 var $cmp45=($__d_2|0)==($incdec_ptr15___db_addr_0|0);
 if($cmp45){label=39;break;}else{label=40;break;}
 case 39: 
 var $vtable_i421=HEAP32[(($0)>>2)];
 var $vfn_i422=(($vtable_i421+28)|0);
 var $30=HEAP32[(($vfn_i422)>>2)];
 var $call_i423=FUNCTION_TABLE[$30]($__ct,48);
 var $31=HEAP32[(($__me)>>2)];
 var $incdec_ptr48=(($31+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr48;
 HEAP8[($31)]=$call_i423;
 label=59;break;
 case 40: 
 var $32=HEAP8[($__size__i_i_i393)];
 var $conv_i_i_i394=($32&255);
 var $and_i_i_i395=$conv_i_i_i394&1;
 var $tobool_i_i_i396=($and_i_i_i395|0)==0;
 if($tobool_i_i_i396){label=42;break;}else{label=41;break;}
 case 41: 
 var $33=HEAP32[(($__size__i23_i311)>>2)];
 var $cond_i_i415=$33;label=43;break;
 case 42: 
 var $shr_i_i_i41386=$conv_i_i_i394>>>1;
 var $cond_i_i415=$shr_i_i_i41386;label=43;break;
 case 43: 
 var $cond_i_i415;
 var $cmp_i416=($cond_i_i415|0)==0;
 if($cmp_i416){var $__d_3109=$__d_2;var $__ng_0110=0;var $__ig_0111=0;var $__gl_0112=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $and_i_i_i_i352=$32&1;
 var $tobool_i_i_i_i353=(($and_i_i_i_i352<<24)>>24)==0;
 if($tobool_i_i_i_i353){var $cond_i_i_i371=$arrayidx_i_i_i_i369;label=46;break;}else{label=45;break;}
 case 45: 
 var $34=HEAP32[(($__data__i21_i_i_i360)>>2)];
 var $cond_i_i_i371=$34;label=46;break;
 case 46: 
 var $cond_i_i_i371;
 var $35=HEAP8[($cond_i_i_i371)];
 var $conv54=(($35<<24)>>24);
 var $__d_3109=$__d_2;var $__ng_0110=0;var $__ig_0111=0;var $__gl_0112=$conv54;label=47;break;
 case 47: 
 var $__gl_0112;
 var $__ig_0111;
 var $__ng_0110;
 var $__d_3109;
 var $cmp58=($__ng_0110|0)==($__gl_0112|0);
 if($cmp58){label=48;break;}else{var $__gl_1=$__gl_0112;var $__ig_1=$__ig_0111;var $__ng_1=$__ng_0110;label=58;break;}
 case 48: 
 var $36=HEAP32[(($__me)>>2)];
 var $incdec_ptr60=(($36+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr60;
 HEAP8[($36)]=$__ts;
 var $inc=((($__ig_0111)+(1))|0);
 var $37=HEAP8[($__size__i_i_i393)];
 var $conv_i_i302=($37&255);
 var $and_i_i303=$conv_i_i302&1;
 var $tobool_i_i304=($and_i_i303|0)==0;
 if($tobool_i_i304){label=50;break;}else{label=49;break;}
 case 49: 
 var $38=HEAP32[(($__size__i23_i311)>>2)];
 var $cond_i323=$38;label=51;break;
 case 50: 
 var $shr_i_i32187=$conv_i_i302>>>1;
 var $cond_i323=$shr_i_i32187;label=51;break;
 case 51: 
 var $cond_i323;
 var $cmp62=($inc>>>0)<($cond_i323>>>0);
 if($cmp62){label=52;break;}else{var $__gl_1=$__gl_0112;var $__ig_1=$inc;var $__ng_1=0;label=58;break;}
 case 52: 
 var $and_i_i_i_i262=$37&1;
 var $tobool_i_i_i_i263=(($and_i_i_i_i262<<24)>>24)==0;
 if($tobool_i_i_i_i263){var $cond_i_i_i281=$arrayidx_i_i_i_i369;label=54;break;}else{label=53;break;}
 case 53: 
 var $39=HEAP32[(($__data__i21_i_i_i360)>>2)];
 var $cond_i_i_i281=$39;label=54;break;
 case 54: 
 var $cond_i_i_i281;
 var $add_ptr_i282=(($cond_i_i_i281+$inc)|0);
 var $40=HEAP8[($add_ptr_i282)];
 var $cmp68=(($40<<24)>>24)==127;
 if($cmp68){var $__gl_1=-1;var $__ig_1=$inc;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($tobool_i_i_i_i263){var $cond_i_i_i=$arrayidx_i_i_i_i369;label=57;break;}else{label=56;break;}
 case 56: 
 var $41=HEAP32[(($__data__i21_i_i_i360)>>2)];
 var $cond_i_i_i=$41;label=57;break;
 case 57: 
 var $cond_i_i_i;
 var $add_ptr_i234=(($cond_i_i_i+$inc)|0);
 var $42=HEAP8[($add_ptr_i234)];
 var $conv73=(($42<<24)>>24);
 var $__gl_1=$conv73;var $__ig_1=$inc;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $incdec_ptr78=((($__d_3109)-(1))|0);
 var $43=HEAP8[($incdec_ptr78)];
 var $44=HEAP32[(($__me)>>2)];
 var $incdec_ptr79=(($44+1)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr79;
 HEAP8[($44)]=$43;
 var $inc80=((($__ng_1)+(1))|0);
 var $cmp57=($incdec_ptr78|0)==($incdec_ptr15___db_addr_0|0);
 if($cmp57){label=59;break;}else{var $__d_3109=$incdec_ptr78;var $__ng_0110=$inc80;var $__ig_0111=$__ig_1;var $__gl_0112=$__gl_1;label=47;break;}
 case 59: 
 var $45=HEAP32[(($__me)>>2)];
 var $cmp_i_i=($18|0)==($45|0);
 if($cmp_i_i){var $__db_addr_2=$incdec_ptr15___db_addr_0;label=62;break;}else{label=60;break;}
 case 60: 
 var $incdec_ptr_i_i221113=((($45)-(1))|0);
 var $cmp1_i_i114=($18>>>0)<($incdec_ptr_i_i221113>>>0);
 if($cmp1_i_i114){var $__first_addr_i_i_0115=$18;var $incdec_ptr_i_i221116=$incdec_ptr_i_i221113;label=61;break;}else{var $__db_addr_2=$incdec_ptr15___db_addr_0;label=62;break;}
 case 61: 
 var $incdec_ptr_i_i221116;
 var $__first_addr_i_i_0115;
 var $46=HEAP8[($__first_addr_i_i_0115)];
 var $47=HEAP8[($incdec_ptr_i_i221116)];
 HEAP8[($__first_addr_i_i_0115)]=$47;
 HEAP8[($incdec_ptr_i_i221116)]=$46;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_0115+1)|0);
 var $incdec_ptr_i_i221=((($incdec_ptr_i_i221116)-(1))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i221>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_0115=$incdec_ptr2_i_i;var $incdec_ptr_i_i221116=$incdec_ptr_i_i221;label=61;break;}else{var $__db_addr_2=$incdec_ptr15___db_addr_0;label=62;break;}
 case 62: 
 var $__db_addr_2;
 var $inc83=((($__p_0122)+(1))|0);
 var $cmp=($inc83>>>0)<4;
 if($cmp){var $__db_addr_0121=$__db_addr_2;var $__p_0122=$inc83;label=2;break;}else{label=63;break;}
 case 63: 
 var $48=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($48&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=65;break;}else{label=64;break;}
 case 64: 
 var $49=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i=$49;label=66;break;
 case 65: 
 var $shr_i_i84=$conv_i_i>>>1;
 var $cond_i=$shr_i_i84;label=66;break;
 case 66: 
 var $cond_i;
 var $cmp86=($cond_i>>>0)>1;
 if($cmp86){label=67;break;}else{label=75;break;}
 case 67: 
 var $and_i_i_i186=$48&1;
 var $tobool_i_i_i187=(($and_i_i_i186<<24)>>24)==0;
 if($tobool_i_i_i187){var $cond_i_i146=$arrayidx_i_i_i_i468;var $cond_i_i205144=$arrayidx_i_i_i_i468;label=69;break;}else{label=68;break;}
 case 68: 
 var $50=HEAP32[(($__data__i21_i_i_i459)>>2)];
 var $cond_i_i146=$50;var $cond_i_i205144=$50;label=69;break;
 case 69: 
 var $cond_i_i205144;
 var $cond_i_i146;
 if($tobool_i_i){label=71;break;}else{label=70;break;}
 case 70: 
 var $51=HEAP32[(($__size__i23_i_i)>>2)];
 var $cond_i34_i=$51;label=72;break;
 case 71: 
 var $shr_i_i_i15585=$conv_i_i>>>1;
 var $cond_i34_i=$shr_i_i_i15585;label=72;break;
 case 72: 
 var $cond_i34_i;
 var $add_ptr_i=(($cond_i_i146+$cond_i34_i)|0);
 var $52=HEAP32[(($__me)>>2)];
 var $agg_tmp7_i_sroa_0_092=(($cond_i_i205144+1)|0);
 var $lnot_i_i_i93=($agg_tmp7_i_sroa_0_092|0)==($add_ptr_i|0);
 if($lnot_i_i_i93){var $__result_addr_i_i_0_lcssa=$52;label=74;break;}else{var $__result_addr_i_i_094=$52;var $agg_tmp7_i_sroa_0_095=$agg_tmp7_i_sroa_0_092;label=73;break;}
 case 73: 
 var $agg_tmp7_i_sroa_0_095;
 var $__result_addr_i_i_094;
 var $53=HEAP8[($agg_tmp7_i_sroa_0_095)];
 HEAP8[($__result_addr_i_i_094)]=$53;
 var $incdec_ptr_i_i=(($__result_addr_i_i_094+1)|0);
 var $agg_tmp7_i_sroa_0_0=(($agg_tmp7_i_sroa_0_095+1)|0);
 var $lnot_i_i_i=($agg_tmp7_i_sroa_0_0|0)==($add_ptr_i|0);
 if($lnot_i_i_i){var $__result_addr_i_i_0_lcssa=$incdec_ptr_i_i;label=74;break;}else{var $__result_addr_i_i_094=$incdec_ptr_i_i;var $agg_tmp7_i_sroa_0_095=$agg_tmp7_i_sroa_0_0;label=73;break;}
 case 74: 
 var $__result_addr_i_i_0_lcssa;
 HEAP32[(($__me)>>2)]=$__result_addr_i_i_0_lcssa;
 label=75;break;
 case 75: 
 var $and92=$__flags&176;
 if(($and92|0)==32){ label=76;break;}else if(($and92|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $54=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$54;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp49=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i452=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i395=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $agg_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13648)>>2)];
 var $cmp_i_i_i36=($2|0)==-1;
 if($cmp_i_i_i36){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $3=HEAP32[((13652)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i38=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i38)>>2)];
 var $tobool_i_i_i39=($6|0)==0;
 if($tobool_i_i_i39){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $__s_i_i=$__digits;
 var $__size__i_i=$__digits;
 var $9=HEAP8[($__size__i_i)];
 var $conv_i_i=($9&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__size__i23_i=(($__digits+4)|0);
 var $10=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$10;label=10;break;
 case 9: 
 var $shr_i_i28=$conv_i_i>>>1;
 var $cond_i=$shr_i_i28;label=10;break;
 case 10: 
 var $cond_i;
 var $cmp=($cond_i|0)==0;
 if($cmp){var $15=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $and_i_i_i_i=$9&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=13;break;}else{label=12;break;}
 case 12: 
 var $__data__i21_i_i_i=(($__digits+8)|0);
 var $11=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$11;label=14;break;
 case 13: 
 var $arrayidx_i_i_i_i=(($__s_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;label=14;break;
 case 14: 
 var $cond_i_i_i;
 var $12=HEAP8[($cond_i_i_i)];
 var $13=$6;
 var $vtable_i=HEAP32[(($13)>>2)];
 var $vfn_i=(($vtable_i+28)|0);
 var $14=HEAP32[(($vfn_i)>>2)];
 var $call_i59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($8,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $cmp8=(($12<<24)>>24)==(($call_i59<<24)>>24);
 var $15=$cmp8;label=16;break;
 case 16: 
 var $15;
 HEAP32[(($__grp49)>>2)]=0; HEAP32[((($__grp49)+(4))>>2)]=0; HEAP32[((($__grp49)+(8))>>2)]=0;
 HEAP32[(($__size__i_i452)>>2)]=0; HEAP32[((($__size__i_i452)+(4))>>2)]=0; HEAP32[((($__size__i_i452)+(8))>>2)]=0;
 HEAP32[(($__size__i_i395)>>2)]=0; HEAP32[((($__size__i_i395)+(4))>>2)]=0; HEAP32[((($__size__i_i395)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$15,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $arraydecay=(($__mbuf)|0);
 var $16=HEAP8[($__size__i_i)];
 var $conv_i_i180=($16&255);
 var $and_i_i181=$conv_i_i180&1;
 var $tobool_i_i182=($and_i_i181|0)==0;
 if($tobool_i_i182){label=19;break;}else{label=18;break;}
 case 18: 
 var $__size__i23_i189=(($__digits+4)|0);
 var $17=HEAP32[(($__size__i23_i189)>>2)];
 var $cond_i201=$17;label=20;break;
 case 19: 
 var $shr_i_i19929=$conv_i_i180>>>1;
 var $cond_i201=$shr_i_i19929;label=20;break;
 case 20: 
 var $cond_i201;
 var $18=HEAP32[(($__fd)>>2)];
 var $cmp14=($cond_i201|0)>($18|0);
 if($cmp14){label=21;break;}else{label=31;break;}
 case 21: 
 if($tobool_i_i182){label=23;break;}else{label=22;break;}
 case 22: 
 var $__size__i23_i364=(($__digits+4)|0);
 var $19=HEAP32[(($__size__i23_i364)>>2)];
 var $cond_i376=$19;label=24;break;
 case 23: 
 var $shr_i_i37433=$conv_i_i180>>>1;
 var $cond_i376=$shr_i_i37433;label=24;break;
 case 24: 
 var $cond_i376;
 var $sub=((($cond_i376)-($18))|0);
 var $mul=$sub<<1;
 var $20=HEAP8[($__size__i_i395)];
 var $conv_i_i396=($20&255);
 var $and_i_i397=$conv_i_i396&1;
 var $tobool_i_i398=($and_i_i397|0)==0;
 if($tobool_i_i398){label=26;break;}else{label=25;break;}
 case 25: 
 var $__size__i23_i405=(($__sn+4)|0);
 var $21=HEAP32[(($__size__i23_i405)>>2)];
 var $cond_i417=$21;label=27;break;
 case 26: 
 var $shr_i_i41534=$conv_i_i396>>>1;
 var $cond_i417=$shr_i_i41534;label=27;break;
 case 27: 
 var $cond_i417;
 var $22=HEAP8[($__size__i_i452)];
 var $conv_i_i453=($22&255);
 var $and_i_i454=$conv_i_i453&1;
 var $tobool_i_i455=($and_i_i454|0)==0;
 if($tobool_i_i455){label=29;break;}else{label=28;break;}
 case 28: 
 var $__size__i23_i462=(($__sym+4)|0);
 var $23=HEAP32[(($__size__i23_i462)>>2)];
 var $cond_i474=$23;label=30;break;
 case 29: 
 var $shr_i_i47235=$conv_i_i453>>>1;
 var $cond_i474=$shr_i_i47235;label=30;break;
 case 30: 
 var $cond_i474;
 var $add48=$mul|1;
 var $add18=((($add48)+($cond_i417))|0);
 var $add19=((($add18)+($cond_i474))|0);
 var $add19_pn=$add19;label=38;break;
 case 31: 
 var $24=HEAP8[($__size__i_i395)];
 var $conv_i_i494=($24&255);
 var $and_i_i495=$conv_i_i494&1;
 var $tobool_i_i496=($and_i_i495|0)==0;
 if($tobool_i_i496){label=33;break;}else{label=32;break;}
 case 32: 
 var $__size__i23_i503=(($__sn+4)|0);
 var $25=HEAP32[(($__size__i23_i503)>>2)];
 var $cond_i515=$25;label=34;break;
 case 33: 
 var $shr_i_i51330=$conv_i_i494>>>1;
 var $cond_i515=$shr_i_i51330;label=34;break;
 case 34: 
 var $cond_i515;
 var $26=HEAP8[($__size__i_i452)];
 var $conv_i_i535=($26&255);
 var $and_i_i536=$conv_i_i535&1;
 var $tobool_i_i537=($and_i_i536|0)==0;
 if($tobool_i_i537){label=36;break;}else{label=35;break;}
 case 35: 
 var $__size__i23_i544=(($__sym+4)|0);
 var $27=HEAP32[(($__size__i23_i544)>>2)];
 var $cond_i556=$27;label=37;break;
 case 36: 
 var $shr_i_i55431=$conv_i_i535>>>1;
 var $cond_i556=$shr_i_i55431;label=37;break;
 case 37: 
 var $cond_i556;
 var $add23=((($cond_i515)+(2))|0);
 var $add24=((($add23)+($cond_i556))|0);
 var $add19_pn=$add24;label=38;break;
 case 38: 
 var $add19_pn;
 var $cond=((($add19_pn)+($18))|0);
 var $cmp26=($cond>>>0)>100;
 if($cmp26){label=39;break;}else{var $__mb_0=$arraydecay;var $__h_sroa_0_1=0;var $40=$16;label=47;break;}
 case 39: 
 var $call30=_malloc($cond);
 var $cmp32=($call30|0)==0;
 if($cmp32){label=40;break;}else{var $__mb_0=$call30;var $__h_sroa_0_1=$call30;var $40=$16;label=47;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 var $_pre=HEAP8[($__size__i_i)];
 var $__mb_0=0;var $__h_sroa_0_1=0;var $40=$_pre;label=47;break;
 case 42: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 var $30=$28$1;
 var $ehselector_slot_0=$30;var $exn_slot_0=$29;label=58;break;
 case 43: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $ehselector_slot_1=$33;var $exn_slot_1=$32;label=59;break;
 case 44: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 var $35=$34$0;
 var $36=$34$1;
 var $ehselector_slot_0=$36;var $exn_slot_0=$35;label=58;break;
 case 45: 
 var $37$0 = ___cxa_find_matching_catch(-1, -1); var $37$1 = tempRet0;
 var $38=$37$0;
 var $39=$37$1;
 var $tobool_i_i_i328=($__h_sroa_0_1|0)==0;
 if($tobool_i_i_i328){var $ehselector_slot_0=$39;var $exn_slot_0=$38;label=58;break;}else{label=46;break;}
 case 46: 
 _free($__h_sroa_0_1);
 var $ehselector_slot_0=$39;var $exn_slot_0=$38;label=58;break;
 case 47: 
 var $40;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $__fmtflags__i=(($__iob+4)|0);
 var $41=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i_i_i283=$40&1;
 var $tobool_i_i_i284=(($and_i_i_i283<<24)>>24)==0;
 if($tobool_i_i_i284){label=49;break;}else{label=48;break;}
 case 48: 
 var $__data__i21_i_i291=(($__digits+8)|0);
 var $42=HEAP32[(($__data__i21_i_i291)>>2)];
 var $cond_i_i=$42;var $cond_i_i30250=$42;label=50;break;
 case 49: 
 var $arrayidx_i_i_i300=(($__s_i_i+1)|0);
 var $arrayidx_i_i_i258=(($__s_i_i+1)|0);
 var $cond_i_i=$arrayidx_i_i_i258;var $cond_i_i30250=$arrayidx_i_i_i300;label=50;break;
 case 50: 
 var $cond_i_i30250;
 var $cond_i_i;
 var $conv_i_i221=($40&255);
 var $and_i_i222=$conv_i_i221&1;
 var $tobool_i_i223=($and_i_i222|0)==0;
 if($tobool_i_i223){label=52;break;}else{label=51;break;}
 case 51: 
 var $__size__i23_i230=(($__digits+4)|0);
 var $43=HEAP32[(($__size__i23_i230)>>2)];
 var $cond_i242=$43;label=53;break;
 case 52: 
 var $shr_i_i24032=$conv_i_i221>>>1;
 var $cond_i242=$shr_i_i24032;label=53;break;
 case 53: 
 var $cond_i242;
 var $add_ptr=(($cond_i_i+$cond_i242)|0);
 var $44=HEAP8[($__dp)];
 var $45=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$41,$cond_i_i30250,$add_ptr,$8,$15,$__pat,$44,$45,$__grp,$__sym,$__sn,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=45;break; }
 case 54: 
 var $46=(($__s)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=(($agg_tmp)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=HEAP32[(($__mi)>>2)];
 var $50=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$__mb_0,$49,$50,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=45;break; }
 case 55: 
 var $tobool_i_i_i=($__h_sroa_0_1|0)==0;
 if($tobool_i_i_i){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__h_sroa_0_1);
 label=57;break;
 case 57: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $51=HEAP32[(($__locale__i)>>2)];
 var $52=(($51)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($52);
 STACKTOP=sp;return;
 case 58: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $ehselector_slot_1=$ehselector_slot_0;var $exn_slot_1=$exn_slot_0;label=59;break;
 case 59: 
 var $exn_slot_1;
 var $ehselector_slot_1;
 var $53=HEAP32[(($__locale__i)>>2)];
 var $54=(($53)|0);
 var $call_i43=__ZNSt3__114__shared_count16__release_sharedEv($54);
 var $lpad_val$0=$exn_slot_1;
 var $lpad_val$1=0;
 var $lpad_val47$0=$lpad_val$0;
 var $lpad_val47$1=$ehselector_slot_1;
 ___resumeException($lpad_val47$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__loc=(sp)+(528);
 var $__pat=(sp)+(536);
 var $__dp=(sp)+(544);
 var $__ts=(sp)+(552);
 var $__grp=(sp)+(560);
 var $__grp63=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i351=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $agg_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $arraydecay=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$arraydecay;
 var $arraydecay2=(($__digits)|0);
 var $call=_snprintf($arraydecay,100,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $cmp=($call>>>0)>99;
 if($cmp){label=2;break;}else{var $__db_0=$arraydecay2;var $__n_0=$call;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=15;break;}
 case 2: 
 var $0=HEAP8[(276352)];
 var $guard_uninitialized_i=(($0<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $1=___cxa_guard_acquire(276352);
 var $tobool_i=($1|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 var $eh_lpad_body$1=$2$1;var $eh_lpad_body$0=$2$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $3=HEAP32[((12216)>>2)];
 var $call6=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,1400,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $4=HEAP32[(($__bb)>>2)];
 var $cmp7=($4|0)==0;
 if($cmp7){label=9;break;}else{var $8=$4;label=13;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 var $_pre=HEAP32[(($__bb)>>2)];
 var $8=$_pre;label=13;break;
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $eh_lpad_body$1=$5$1;var $eh_lpad_body$0=$5$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $6=$eh_lpad_body$0;
 var $7=$eh_lpad_body$1;
 var $ehselector_slot_2=$7;var $exn_slot_2=$6;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=59;break;
 case 13: 
 var $8;
 var $mul=$call6<<2;
 var $call11=_malloc($mul);
 var $9=$call11;
 var $lnot_i=($call11|0)==0;
 if($lnot_i){label=14;break;}else{var $__db_0=$9;var $__n_0=$call6;var $__hn_sroa_0_1=$8;var $__hd_sroa_0_1=$9;label=15;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__db_0=$9;var $__n_0=$call6;var $__hn_sroa_0_1=$8;var $__hd_sroa_0_1=$9;label=15;break; } else { var $__hn_sroa_0_0=$8;var $__hd_sroa_0_0=$9;label=11;break; }
 case 15: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 (function() { try { __THREW__ = 0; return __ZNKSt3__18ios_base6getlocEv($__loc,$__iob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { var $__hn_sroa_0_0=$__hn_sroa_0_1;var $__hd_sroa_0_0=$__hd_sroa_0_1;label=11;break; }
 case 16: 
 var $__locale__i=(($__loc)|0);
 var $10=HEAP32[(($__locale__i)>>2)];
 var $11=$__p_i_i_i;
 var $12=HEAP32[((13640)>>2)];
 var $cmp_i_i_i51=($12|0)==-1;
 if($cmp_i_i_i51){label=18;break;}else{label=17;break;}
 case 17: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$11,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=44;break; }
 case 18: 
 var $13=HEAP32[((13644)>>2)];
 var $sub_i_i=((($13)-(1))|0);
 var $__end__i_i_i_i=(($10+12)|0);
 var $14=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($10+8)|0);
 var $15=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$14;
 var $sub_ptr_rhs_cast_i_i_i_i=$15;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=19;break;}else{label=20;break;}
 case 19: 
 var $arrayidx_i_i_i_i=(($15+($sub_i_i<<2))|0);
 var $16=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i53=($16|0)==0;
 if($tobool_i_i_i53){label=20;break;}else{label=22;break;}
 case 20: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $17=$exception_i_i;
 __ZNSt8bad_castC2Ev($17);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=44;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $18=$16;
 var $19=HEAP32[(($__bb)>>2)];
 var $add_ptr=(($19+$__n_0)|0);
 var $20=$16;
 var $vtable_i=HEAP32[(($20)>>2)];
 var $vfn_i=(($vtable_i+48)|0);
 var $21=HEAP32[(($vfn_i)>>2)];
 var $call_i159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]($18,$19,$add_ptr,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=44;break; }
 case 23: 
 var $cmp24=($__n_0|0)==0;
 if($cmp24){var $24=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $22=HEAP32[(($__bb)>>2)];
 var $23=HEAP8[($22)];
 var $cmp25=(($23<<24)>>24)==45;
 var $24=$cmp25;label=25;break;
 case 25: 
 var $24;
 HEAP32[(($__grp63)>>2)]=0; HEAP32[((($__grp63)+(4))>>2)]=0; HEAP32[((($__grp63)+(8))>>2)]=0;
 HEAP32[(($__size__i_i351)>>2)]=0; HEAP32[((($__size__i_i351)+(4))>>2)]=0; HEAP32[((($__size__i_i351)+(8))>>2)]=0;
 HEAP32[(($__size__i_i)>>2)]=0; HEAP32[((($__size__i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$24,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=45;break; }
 case 26: 
 var $arraydecay30=(($__mbuf)|0);
 var $25=HEAP32[(($__fd)>>2)];
 var $cmp32=($__n_0|0)>($25|0);
 if($cmp32){label=27;break;}else{label=34;break;}
 case 27: 
 var $sub=((($__n_0)-($25))|0);
 var $mul33=$sub<<1;
 var $26=HEAP8[($__size__i_i)];
 var $conv_i_i=($26&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=29;break;}else{label=28;break;}
 case 28: 
 var $__size__i23_i=(($__sn+4)|0);
 var $27=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$27;label=30;break;
 case 29: 
 var $shr_i_i49=$conv_i_i>>>1;
 var $cond_i=$shr_i_i49;label=30;break;
 case 30: 
 var $cond_i;
 var $28=HEAP8[($__size__i_i351)];
 var $conv_i_i352=($28&255);
 var $and_i_i353=$conv_i_i352&1;
 var $tobool_i_i354=($and_i_i353|0)==0;
 if($tobool_i_i354){label=32;break;}else{label=31;break;}
 case 31: 
 var $__size__i23_i361=(($__sym+4)|0);
 var $29=HEAP32[(($__size__i23_i361)>>2)];
 var $cond_i373=$29;label=33;break;
 case 32: 
 var $shr_i_i37150=$conv_i_i352>>>1;
 var $cond_i373=$shr_i_i37150;label=33;break;
 case 33: 
 var $cond_i373;
 var $add62=$mul33|1;
 var $add36=((($add62)+($cond_i))|0);
 var $add37=((($add36)+($cond_i373))|0);
 var $add37_pn=$add37;label=41;break;
 case 34: 
 var $30=HEAP8[($__size__i_i)];
 var $conv_i_i424=($30&255);
 var $and_i_i425=$conv_i_i424&1;
 var $tobool_i_i426=($and_i_i425|0)==0;
 if($tobool_i_i426){label=36;break;}else{label=35;break;}
 case 35: 
 var $__size__i23_i433=(($__sn+4)|0);
 var $31=HEAP32[(($__size__i23_i433)>>2)];
 var $cond_i445=$31;label=37;break;
 case 36: 
 var $shr_i_i44347=$conv_i_i424>>>1;
 var $cond_i445=$shr_i_i44347;label=37;break;
 case 37: 
 var $cond_i445;
 var $32=HEAP8[($__size__i_i351)];
 var $conv_i_i465=($32&255);
 var $and_i_i466=$conv_i_i465&1;
 var $tobool_i_i467=($and_i_i466|0)==0;
 if($tobool_i_i467){label=39;break;}else{label=38;break;}
 case 38: 
 var $__size__i23_i474=(($__sym+4)|0);
 var $33=HEAP32[(($__size__i23_i474)>>2)];
 var $cond_i486=$33;label=40;break;
 case 39: 
 var $shr_i_i48448=$conv_i_i465>>>1;
 var $cond_i486=$shr_i_i48448;label=40;break;
 case 40: 
 var $cond_i486;
 var $add41=((($cond_i445)+(2))|0);
 var $add42=((($add41)+($cond_i486))|0);
 var $add37_pn=$add42;label=41;break;
 case 41: 
 var $add37_pn;
 var $cond=((($add37_pn)+($25))|0);
 var $cmp44=($cond>>>0)>100;
 if($cmp44){label=42;break;}else{var $__mb_0=$arraydecay30;var $__hw_sroa_0_1=0;label=48;break;}
 case 42: 
 var $mul46=$cond<<2;
 var $call49=_malloc($mul46);
 var $34=$call49;
 var $cmp51=($call49|0)==0;
 if($cmp51){label=43;break;}else{var $__mb_0=$34;var $__hw_sroa_0_1=$34;label=48;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__mb_0=$34;var $__hw_sroa_0_1=$34;label=48;break; } else { var $__hw_sroa_0_0=$34;label=46;break; }
 case 44: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 var $ehselector_slot_1=$37;var $exn_slot_1=$36;label=58;break;
 case 45: 
 var $38$0 = ___cxa_find_matching_catch(-1, -1); var $38$1 = tempRet0;
 var $39=$38$0;
 var $40=$38$1;
 var $ehselector_slot_0=$40;var $exn_slot_0=$39;label=57;break;
 case 46: 
 var $__hw_sroa_0_0;
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 var $42=$41$0;
 var $43=$41$1;
 var $tobool_i_i_i545=($__hw_sroa_0_0|0)==0;
 if($tobool_i_i_i545){var $ehselector_slot_0=$43;var $exn_slot_0=$42;label=57;break;}else{label=47;break;}
 case 47: 
 var $44=$__hw_sroa_0_0;
 _free($44);
 var $ehselector_slot_0=$43;var $exn_slot_0=$42;label=57;break;
 case 48: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $__fmtflags__i=(($__iob+4)|0);
 var $45=HEAP32[(($__fmtflags__i)>>2)];
 var $add_ptr58=(($__db_0+($__n_0<<2))|0);
 var $46=HEAP32[(($__dp)>>2)];
 var $47=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$45,$__db_0,$add_ptr58,$18,$24,$__pat,$46,$47,$__grp,$__sym,$__sn,$25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 49: 
 var $48=(($__s)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($agg_tmp)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=HEAP32[(($__mi)>>2)];
 var $52=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$__mb_0,$51,$52,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=46;break; }
 case 50: 
 var $tobool_i_i_i578=($__hw_sroa_0_1|0)==0;
 if($tobool_i_i_i578){label=52;break;}else{label=51;break;}
 case 51: 
 var $53=$__hw_sroa_0_1;
 _free($53);
 label=52;break;
 case 52: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $54=HEAP32[(($__locale__i)>>2)];
 var $55=(($54)|0);
 var $call_i56=__ZNSt3__114__shared_count16__release_sharedEv($55);
 var $tobool_i_i_i397=($__hd_sroa_0_1|0)==0;
 if($tobool_i_i_i397){label=54;break;}else{label=53;break;}
 case 53: 
 var $56=$__hd_sroa_0_1;
 _free($56);
 label=54;break;
 case 54: 
 var $tobool_i_i_i314=($__hn_sroa_0_1|0)==0;
 if($tobool_i_i_i314){label=56;break;}else{label=55;break;}
 case 55: 
 _free($__hn_sroa_0_1);
 label=56;break;
 case 56: 
 STACKTOP=sp;return;
 case 57: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $ehselector_slot_1=$ehselector_slot_0;var $exn_slot_1=$exn_slot_0;label=58;break;
 case 58: 
 var $exn_slot_1;
 var $ehselector_slot_1;
 var $57=HEAP32[(($__locale__i)>>2)];
 var $58=(($57)|0);
 var $call_i58=__ZNSt3__114__shared_count16__release_sharedEv($58);
 var $ehselector_slot_2=$ehselector_slot_1;var $exn_slot_2=$exn_slot_1;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=59;break;
 case 59: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $exn_slot_2;
 var $ehselector_slot_2;
 var $tobool_i_i_i193=($__hd_sroa_0_2|0)==0;
 if($tobool_i_i_i193){label=61;break;}else{label=60;break;}
 case 60: 
 var $59=$__hd_sroa_0_2;
 _free($59);
 label=61;break;
 case 61: 
 var $tobool_i_i_i=($__hn_sroa_0_2|0)==0;
 if($tobool_i_i_i){label=63;break;}else{label=62;break;}
 case 62: 
 _free($__hn_sroa_0_2);
 label=63;break;
 case 63: 
 var $lpad_val$0=$exn_slot_2;
 var $lpad_val$1=0;
 var $lpad_val67$0=$lpad_val$0;
 var $lpad_val67$1=$ehselector_slot_2;
 ___resumeException($lpad_val67$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i62=sp;
 var $__p_i_i_i=(sp)+(16);
 var $ref_tmp=(sp)+(32);
 var $tmpcast59=$ref_tmp;
 var $ref_tmp4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $0=$ref_tmp4;
 var $ref_tmp6=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast58=$ref_tmp6;
 var $ref_tmp7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$ref_tmp7;
 var $ref_tmp11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$ref_tmp11;
 var $ref_tmp13=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$ref_tmp13;
 var $ref_tmp21=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast57=$ref_tmp21;
 var $ref_tmp22=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=$ref_tmp22;
 var $ref_tmp25=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$ref_tmp25;
 var $ref_tmp26=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=$ref_tmp26;
 var $ref_tmp31=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$ref_tmp31;
 var $ref_tmp33=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=$ref_tmp33;
 var $__locale__i=(($__loc)|0);
 var $8=HEAP32[(($__locale__i)>>2)];
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $9=$__p_i_i_i;
 var $10=HEAP32[((14104)>>2)];
 var $cmp_i_i_i60=($10|0)==-1;
 if($cmp_i_i_i60){label=4;break;}else{label=3;break;}
 case 3: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=14104;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14104,$9,272);
 label=4;break;
 case 4: 
 var $11=HEAP32[((14108)>>2)];
 var $sub_i_i=((($11)-(1))|0);
 var $__end__i_i_i_i=(($8+12)|0);
 var $12=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($8+8)|0);
 var $13=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$12;
 var $sub_ptr_rhs_cast_i_i_i_i=$13;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $arrayidx_i_i_i_i=(($13+($sub_i_i<<2))|0);
 var $14=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i=($14|0)==0;
 if($tobool_i_i_i){label=6;break;}else{label=7;break;}
 case 6: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $15=$exception_i_i;
 __ZNSt8bad_castC2Ev($15);
 ___cxa_throw($exception_i_i,8536,(376));
 throw "Reached an unreachable!";
 case 7: 
 var $16=$14;
 var $17=$14;
 var $vtable_i=HEAP32[(($17)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $vfn_i=(($vtable_i+44)|0);
 var $18=HEAP32[(($vfn_i)>>2)];
 FUNCTION_TABLE[$18]($tmpcast59,$16);
 var $19=$__pat;
 var $20=HEAP32[(($ref_tmp)>>2)];
 tempBigInt=$20;HEAP8[($19)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($19)+(3))|0)]=tempBigInt&0xff;
 var $21=$14;
 var $vtable_i39=HEAP32[(($21)>>2)];
 var $vfn_i40=(($vtable_i39+32)|0);
 var $22=HEAP32[(($vfn_i40)>>2)];
 FUNCTION_TABLE[$22]($ref_tmp4,$16);
 var $__size__i46_i_i_i=$__sn;
 var $23=HEAP8[($__size__i46_i_i_i)];
 var $and_i_i_i_i=$23&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=10;break;}else{label=9;break;}
 case 9: 
 var $__data__i36_i_i_i=(($__sn+8)|0);
 var $24=HEAP32[(($__data__i36_i_i_i)>>2)];
 HEAP32[(($24)>>2)]=0;
 var $__size__i24_i_i_i=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i)>>2)]=0;
 label=11;break;
 case 10: 
 var $__data__i_i_i_i=(($__sn+4)|0);
 HEAP32[(($__data__i_i_i_i)>>2)]=0;
 HEAP8[($__size__i46_i_i_i)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1,0); var $25$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i)>>2)]=HEAP32[(($0)>>2)];HEAP32[((($__size__i46_i_i_i)+(4))>>2)]=HEAP32[((($0)+(4))>>2)];HEAP32[((($__size__i46_i_i_i)+(8))>>2)]=HEAP32[((($0)+(8))>>2)];
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp4);
 label=20;break;
 case 14: 
 var $vfn_i46=(($vtable_i+40)|0);
 var $26=HEAP32[(($vfn_i46)>>2)];
 FUNCTION_TABLE[$26]($tmpcast58,$16);
 var $27=$__pat;
 var $28=HEAP32[(($ref_tmp6)>>2)];
 tempBigInt=$28;HEAP8[($27)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($27)+(3))|0)]=tempBigInt&0xff;
 var $29=$14;
 var $vtable_i49=HEAP32[(($29)>>2)];
 var $vfn_i50=(($vtable_i49+28)|0);
 var $30=HEAP32[(($vfn_i50)>>2)];
 FUNCTION_TABLE[$30]($ref_tmp7,$16);
 var $__size__i46_i_i_i119=$__sn;
 var $31=HEAP8[($__size__i46_i_i_i119)];
 var $and_i_i_i_i121=$31&1;
 var $tobool_i_i_i_i122=(($and_i_i_i_i121<<24)>>24)==0;
 if($tobool_i_i_i_i122){label=16;break;}else{label=15;break;}
 case 15: 
 var $__data__i36_i_i_i129=(($__sn+8)|0);
 var $32=HEAP32[(($__data__i36_i_i_i129)>>2)];
 HEAP32[(($32)>>2)]=0;
 var $__size__i24_i_i_i136=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i136)>>2)]=0;
 label=17;break;
 case 16: 
 var $__data__i_i_i_i144=(($__sn+4)|0);
 HEAP32[(($__data__i_i_i_i144)>>2)]=0;
 HEAP8[($__size__i46_i_i_i119)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i119)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($__size__i46_i_i_i119)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($__size__i46_i_i_i119)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp7);
 label=20;break;
 case 20: 
 var $34=$14;
 var $vtable_i195=HEAP32[(($34)>>2)];
 var $vfn_i196=(($vtable_i195+12)|0);
 var $35=HEAP32[(($vfn_i196)>>2)];
 var $call_i197=FUNCTION_TABLE[$35]($16);
 HEAP32[(($__dp)>>2)]=$call_i197;
 var $vtable_i200=HEAP32[(($34)>>2)];
 var $vfn_i201=(($vtable_i200+16)|0);
 var $36=HEAP32[(($vfn_i201)>>2)];
 var $call_i202=FUNCTION_TABLE[$36]($16);
 HEAP32[(($__ts)>>2)]=$call_i202;
 var $37=$14;
 var $vtable_i205=HEAP32[(($37)>>2)];
 var $vfn_i206=(($vtable_i205+20)|0);
 var $38=HEAP32[(($vfn_i206)>>2)];
 FUNCTION_TABLE[$38]($ref_tmp11,$16);
 var $__size__i46_i_i_i275=$__grp;
 var $39=HEAP8[($__size__i46_i_i_i275)];
 var $and_i_i_i_i277=$39&1;
 var $tobool_i_i_i_i278=(($and_i_i_i_i277<<24)>>24)==0;
 if($tobool_i_i_i_i278){label=22;break;}else{label=21;break;}
 case 21: 
 var $__data__i36_i_i_i285=(($__grp+8)|0);
 var $40=HEAP32[(($__data__i36_i_i_i285)>>2)];
 HEAP8[($40)]=0;
 var $__size__i24_i_i_i292=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i292)>>2)]=0;
 label=23;break;
 case 22: 
 var $__s_i45_i_i_i274=$__grp;
 var $arrayidx_i_i_i_i301=(($__s_i45_i_i_i274+1)|0);
 HEAP8[($arrayidx_i_i_i_i301)]=0;
 HEAP8[($__size__i46_i_i_i275)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1,0); var $41$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i275)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($__size__i46_i_i_i275)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($__size__i46_i_i_i275)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp11);
 var $42=$14;
 var $vtable_i348=HEAP32[(($42)>>2)];
 var $vfn_i349=(($vtable_i348+24)|0);
 var $43=HEAP32[(($vfn_i349)>>2)];
 FUNCTION_TABLE[$43]($ref_tmp13,$16);
 var $__size__i46_i_i_i418=$__sym;
 var $44=HEAP8[($__size__i46_i_i_i418)];
 var $and_i_i_i_i420=$44&1;
 var $tobool_i_i_i_i421=(($and_i_i_i_i420<<24)>>24)==0;
 if($tobool_i_i_i_i421){label=27;break;}else{label=26;break;}
 case 26: 
 var $__data__i36_i_i_i428=(($__sym+8)|0);
 var $45=HEAP32[(($__data__i36_i_i_i428)>>2)];
 HEAP32[(($45)>>2)]=0;
 var $__size__i24_i_i_i435=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i435)>>2)]=0;
 label=28;break;
 case 27: 
 var $__data__i_i_i_i443=(($__sym+4)|0);
 HEAP32[(($__data__i_i_i_i443)>>2)]=0;
 HEAP8[($__size__i46_i_i_i418)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i418)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($__size__i46_i_i_i418)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($__size__i46_i_i_i418)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp13);
 var $vtable_i494=HEAP32[(($34)>>2)];
 var $vfn_i495=(($vtable_i494+36)|0);
 var $47=HEAP32[(($vfn_i495)>>2)];
 var $call_i496=FUNCTION_TABLE[$47]($16);
 var $storemerge=$call_i496;label=60;break;
 case 31: 
 var $48=$__p_i_i_i62;
 var $49=HEAP32[((14112)>>2)];
 var $cmp_i_i_i64=($49|0)==-1;
 if($cmp_i_i_i64){label=33;break;}else{label=32;break;}
 case 32: 
 var $ref_tmp_i_sroa_0_0__idx_i_i65=(($__p_i_i_i62)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i65)>>2)]=14112;
 var $ref_tmp_i_sroa_1_4__idx6_i_i66=(($__p_i_i_i62+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i66)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i67=(($__p_i_i_i62+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i67)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(14112,$48,272);
 label=33;break;
 case 33: 
 var $50=HEAP32[((14116)>>2)];
 var $sub_i_i69=((($50)-(1))|0);
 var $__end__i_i_i_i70=(($8+12)|0);
 var $51=HEAP32[(($__end__i_i_i_i70)>>2)];
 var $__begin__i_i_i_i71=(($8+8)|0);
 var $52=HEAP32[(($__begin__i_i_i_i71)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i72=$51;
 var $sub_ptr_rhs_cast_i_i_i_i73=$52;
 var $sub_ptr_sub_i_i_i_i74=((($sub_ptr_lhs_cast_i_i_i_i72)-($sub_ptr_rhs_cast_i_i_i_i73))|0);
 var $sub_ptr_div_i_i_i_i75=$sub_ptr_sub_i_i_i_i74>>2;
 var $cmp_i_i1_i76=($sub_ptr_div_i_i_i_i75>>>0)>($sub_i_i69>>>0);
 if($cmp_i_i1_i76){label=34;break;}else{label=35;break;}
 case 34: 
 var $arrayidx_i_i_i_i78=(($52+($sub_i_i69<<2))|0);
 var $53=HEAP32[(($arrayidx_i_i_i_i78)>>2)];
 var $tobool_i_i_i79=($53|0)==0;
 if($tobool_i_i_i79){label=35;break;}else{label=36;break;}
 case 35: 
 var $exception_i_i81=___cxa_allocate_exception(4);
 var $54=$exception_i_i81;
 __ZNSt8bad_castC2Ev($54);
 ___cxa_throw($exception_i_i81,8536,(376));
 throw "Reached an unreachable!";
 case 36: 
 var $55=$53;
 var $56=$53;
 var $vtable_i501=HEAP32[(($56)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $vfn_i502=(($vtable_i501+44)|0);
 var $57=HEAP32[(($vfn_i502)>>2)];
 FUNCTION_TABLE[$57]($tmpcast57,$55);
 var $58=$__pat;
 var $59=HEAP32[(($ref_tmp21)>>2)];
 tempBigInt=$59;HEAP8[($58)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(3))|0)]=tempBigInt&0xff;
 var $60=$53;
 var $vtable_i505=HEAP32[(($60)>>2)];
 var $vfn_i506=(($vtable_i505+32)|0);
 var $61=HEAP32[(($vfn_i506)>>2)];
 FUNCTION_TABLE[$61]($ref_tmp22,$55);
 var $__size__i46_i_i_i575=$__sn;
 var $62=HEAP8[($__size__i46_i_i_i575)];
 var $and_i_i_i_i577=$62&1;
 var $tobool_i_i_i_i578=(($and_i_i_i_i577<<24)>>24)==0;
 if($tobool_i_i_i_i578){label=39;break;}else{label=38;break;}
 case 38: 
 var $__data__i36_i_i_i585=(($__sn+8)|0);
 var $63=HEAP32[(($__data__i36_i_i_i585)>>2)];
 HEAP32[(($63)>>2)]=0;
 var $__size__i24_i_i_i592=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i592)>>2)]=0;
 label=40;break;
 case 39: 
 var $__data__i_i_i_i600=(($__sn+4)|0);
 HEAP32[(($__data__i_i_i_i600)>>2)]=0;
 HEAP8[($__size__i46_i_i_i575)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1,0); var $64$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i575)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($__size__i46_i_i_i575)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($__size__i46_i_i_i575)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 HEAP32[(($4)>>2)]=0; HEAP32[((($4)+(4))>>2)]=0; HEAP32[((($4)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp22);
 label=49;break;
 case 43: 
 var $vfn_i652=(($vtable_i501+40)|0);
 var $65=HEAP32[(($vfn_i652)>>2)];
 FUNCTION_TABLE[$65]($tmpcast,$55);
 var $66=$__pat;
 var $67=HEAP32[(($ref_tmp25)>>2)];
 tempBigInt=$67;HEAP8[($66)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(3))|0)]=tempBigInt&0xff;
 var $68=$53;
 var $vtable_i655=HEAP32[(($68)>>2)];
 var $vfn_i656=(($vtable_i655+28)|0);
 var $69=HEAP32[(($vfn_i656)>>2)];
 FUNCTION_TABLE[$69]($ref_tmp26,$55);
 var $__size__i46_i_i_i725=$__sn;
 var $70=HEAP8[($__size__i46_i_i_i725)];
 var $and_i_i_i_i727=$70&1;
 var $tobool_i_i_i_i728=(($and_i_i_i_i727<<24)>>24)==0;
 if($tobool_i_i_i_i728){label=45;break;}else{label=44;break;}
 case 44: 
 var $__data__i36_i_i_i735=(($__sn+8)|0);
 var $71=HEAP32[(($__data__i36_i_i_i735)>>2)];
 HEAP32[(($71)>>2)]=0;
 var $__size__i24_i_i_i742=(($__sn+4)|0);
 HEAP32[(($__size__i24_i_i_i742)>>2)]=0;
 label=46;break;
 case 45: 
 var $__data__i_i_i_i750=(($__sn+4)|0);
 HEAP32[(($__data__i_i_i_i750)>>2)]=0;
 HEAP8[($__size__i46_i_i_i725)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i725)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($__size__i46_i_i_i725)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($__size__i46_i_i_i725)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 HEAP32[(($5)>>2)]=0; HEAP32[((($5)+(4))>>2)]=0; HEAP32[((($5)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp26);
 label=49;break;
 case 49: 
 var $73=$53;
 var $vtable_i801=HEAP32[(($73)>>2)];
 var $vfn_i802=(($vtable_i801+12)|0);
 var $74=HEAP32[(($vfn_i802)>>2)];
 var $call_i803=FUNCTION_TABLE[$74]($55);
 HEAP32[(($__dp)>>2)]=$call_i803;
 var $vtable_i806=HEAP32[(($73)>>2)];
 var $vfn_i807=(($vtable_i806+16)|0);
 var $75=HEAP32[(($vfn_i807)>>2)];
 var $call_i808=FUNCTION_TABLE[$75]($55);
 HEAP32[(($__ts)>>2)]=$call_i808;
 var $76=$53;
 var $vtable_i811=HEAP32[(($76)>>2)];
 var $vfn_i812=(($vtable_i811+20)|0);
 var $77=HEAP32[(($vfn_i812)>>2)];
 FUNCTION_TABLE[$77]($ref_tmp31,$55);
 var $__size__i46_i_i_i881=$__grp;
 var $78=HEAP8[($__size__i46_i_i_i881)];
 var $and_i_i_i_i883=$78&1;
 var $tobool_i_i_i_i884=(($and_i_i_i_i883<<24)>>24)==0;
 if($tobool_i_i_i_i884){label=51;break;}else{label=50;break;}
 case 50: 
 var $__data__i36_i_i_i891=(($__grp+8)|0);
 var $79=HEAP32[(($__data__i36_i_i_i891)>>2)];
 HEAP8[($79)]=0;
 var $__size__i24_i_i_i898=(($__grp+4)|0);
 HEAP32[(($__size__i24_i_i_i898)>>2)]=0;
 label=52;break;
 case 51: 
 var $__s_i45_i_i_i880=$__grp;
 var $arrayidx_i_i_i_i907=(($__s_i45_i_i_i880+1)|0);
 HEAP8[($arrayidx_i_i_i_i907)]=0;
 HEAP8[($__size__i46_i_i_i881)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i881)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($__size__i46_i_i_i881)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($__size__i46_i_i_i881)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ref_tmp31);
 var $81=$53;
 var $vtable_i957=HEAP32[(($81)>>2)];
 var $vfn_i958=(($vtable_i957+24)|0);
 var $82=HEAP32[(($vfn_i958)>>2)];
 FUNCTION_TABLE[$82]($ref_tmp33,$55);
 var $__size__i46_i_i_i1027=$__sym;
 var $83=HEAP8[($__size__i46_i_i_i1027)];
 var $and_i_i_i_i1029=$83&1;
 var $tobool_i_i_i_i1030=(($and_i_i_i_i1029<<24)>>24)==0;
 if($tobool_i_i_i_i1030){label=56;break;}else{label=55;break;}
 case 55: 
 var $__data__i36_i_i_i1037=(($__sym+8)|0);
 var $84=HEAP32[(($__data__i36_i_i_i1037)>>2)];
 HEAP32[(($84)>>2)]=0;
 var $__size__i24_i_i_i1044=(($__sym+4)|0);
 HEAP32[(($__size__i24_i_i_i1044)>>2)]=0;
 label=57;break;
 case 56: 
 var $__data__i_i_i_i1052=(($__sym+4)|0);
 HEAP32[(($__data__i_i_i_i1052)>>2)]=0;
 HEAP8[($__size__i46_i_i_i1027)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($__size__i46_i_i_i1027)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($__size__i46_i_i_i1027)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($__size__i46_i_i_i1027)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($ref_tmp33);
 var $vtable_i1103=HEAP32[(($73)>>2)];
 var $vfn_i1104=(($vtable_i1103+36)|0);
 var $86=HEAP32[(($vfn_i1104)>>2)];
 var $call_i1105=FUNCTION_TABLE[$86]($55);
 var $storemerge=$call_i1105;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $0=$__ct;
 var $__size__i_i_i=$__sn;
 var $__data__i_i_i_i465=(($__sn+4)|0);
 var $__data__i21_i_i_i457=(($__sn+8)|0);
 var $__size__i_i_i495=$__sym;
 var $and=$__flags&512;
 var $tobool=($and|0)==0;
 var $__data__i_i_i569=(($__sym+4)|0);
 var $__data__i21_i_i671=(($__sym+8)|0);
 var $1=$__ct;
 var $cmp24=($__fd|0)>0;
 var $__s_i_i_i391=$__grp;
 var $__size__i_i_i392=$__grp;
 var $arrayidx_i_i_i_i368=(($__s_i_i_i391+1)|0);
 var $__data__i21_i_i_i359=(($__grp+8)|0);
 var $__size__i23_i311=(($__grp+4)|0);
 var $__db_addr_0119=$__db;var $__p_0120=0;label=2;break;
 case 2: 
 var $__p_0120;
 var $__db_addr_0119;
 var $arrayidx=(($__pat+$__p_0120)|0);
 var $2=HEAP8[($arrayidx)];
 var $conv=(($2<<24)>>24);
 switch(($conv|0)){case 2:{ label=12;break;}case 4:{ label=28;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $__db_addr_2=$__db_addr_0119;label=63;break;}}break;
 case 3: 
 var $3=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$3;
 var $__db_addr_2=$__db_addr_0119;label=63;break;
 case 4: 
 var $4=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$4;
 var $vtable_i=HEAP32[(($0)>>2)];
 var $vfn_i=(($vtable_i+44)|0);
 var $5=HEAP32[(($vfn_i)>>2)];
 var $call_i=FUNCTION_TABLE[$5]($__ct,32);
 var $6=HEAP32[(($__me)>>2)];
 var $incdec_ptr=(($6+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr;
 HEAP32[(($6)>>2)]=$call_i;
 var $__db_addr_2=$__db_addr_0119;label=63;break;
 case 5: 
 var $7=HEAP8[($__size__i_i_i)];
 var $conv_i_i_i=($7&255);
 var $and_i_i_i=$conv_i_i_i&1;
 var $tobool_i_i_i=($and_i_i_i|0)==0;
 if($tobool_i_i_i){label=7;break;}else{label=6;break;}
 case 6: 
 var $8=HEAP32[(($__data__i_i_i_i465)>>2)];
 var $cond_i_i=$8;label=8;break;
 case 7: 
 var $shr_i_i_i89=$conv_i_i_i>>>1;
 var $cond_i_i=$shr_i_i_i89;label=8;break;
 case 8: 
 var $cond_i_i;
 var $cmp_i=($cond_i_i|0)==0;
 if($cmp_i){var $__db_addr_2=$__db_addr_0119;label=63;break;}else{label=9;break;}
 case 9: 
 var $and_i_i_i_i449=$7&1;
 var $tobool_i_i_i_i450=(($and_i_i_i_i449<<24)>>24)==0;
 if($tobool_i_i_i_i450){var $cond_i_i_i468=$__data__i_i_i_i465;label=11;break;}else{label=10;break;}
 case 10: 
 var $9=HEAP32[(($__data__i21_i_i_i457)>>2)];
 var $cond_i_i_i468=$9;label=11;break;
 case 11: 
 var $cond_i_i_i468;
 var $10=HEAP32[(($cond_i_i_i468)>>2)];
 var $11=HEAP32[(($__me)>>2)];
 var $incdec_ptr5=(($11+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr5;
 HEAP32[(($11)>>2)]=$10;
 var $__db_addr_2=$__db_addr_0119;label=63;break;
 case 12: 
 var $12=HEAP8[($__size__i_i_i495)];
 var $conv_i_i_i496=($12&255);
 var $and_i_i_i497=$conv_i_i_i496&1;
 var $tobool_i_i_i498=($and_i_i_i497|0)==0;
 if($tobool_i_i_i498){label=14;break;}else{label=13;break;}
 case 13: 
 var $13=HEAP32[(($__data__i_i_i569)>>2)];
 var $cond_i_i517=$13;label=15;break;
 case 14: 
 var $shr_i_i_i51587=$conv_i_i_i496>>>1;
 var $cond_i_i517=$shr_i_i_i51587;label=15;break;
 case 15: 
 var $cond_i_i517;
 var $cmp_i518=($cond_i_i517|0)==0;
 var $brmerge=$cmp_i518|$tobool;
 if($brmerge){var $__db_addr_2=$__db_addr_0119;label=63;break;}else{label=16;break;}
 case 16: 
 var $and_i_i_i553=$12&1;
 var $tobool_i_i_i554=(($and_i_i_i553<<24)>>24)==0;
 if($tobool_i_i_i554){label=18;break;}else{label=17;break;}
 case 17: 
 var $14=HEAP32[(($__data__i21_i_i671)>>2)];
 var $cond_i_i682=$14;var $cond_i_i572136=$14;var $cond_i_i572131138_in=$14;label=19;break;
 case 18: 
 var $cond_i_i682=$__data__i_i_i569;var $cond_i_i572136=$__data__i_i_i569;var $cond_i_i572131138_in=$__data__i_i_i569;label=19;break;
 case 19: 
 var $cond_i_i572131138_in;
 var $cond_i_i572136;
 var $cond_i_i682;
 var $cond_i_i572131138=$cond_i_i572131138_in;
 if($tobool_i_i_i498){label=21;break;}else{label=20;break;}
 case 20: 
 var $15=HEAP32[(($__data__i_i_i569)>>2)];
 var $cond_i34_i713=$15;label=22;break;
 case 21: 
 var $shr_i_i_i71188=$conv_i_i_i496>>>1;
 var $cond_i34_i713=$shr_i_i_i71188;label=22;break;
 case 22: 
 var $cond_i34_i713;
 var $add_ptr_i714=(($cond_i_i682+($cond_i34_i713<<2))|0);
 var $16=HEAP32[(($__me)>>2)];
 var $lnot_i_i_i616115=($cond_i_i572136|0)==($add_ptr_i714|0);
 if($lnot_i_i_i616115){var $__result_addr_i_i594_0_lcssa=$16;label=27;break;}else{label=23;break;}
 case 23: 
 var $scevgep128_sum=((($cond_i34_i713)-(1))|0);
 var $scevgep129=(($cond_i_i682+($scevgep128_sum<<2))|0);
 var $scevgep129130=$scevgep129;
 var $17=(((-$cond_i_i572131138))|0);
 var $uglygep132=(($scevgep129130+$17)|0);
 var $uglygep132133=$uglygep132;
 var $18=$uglygep132133>>>2;
 var $agg_tmp7_i596_sroa_0_0116=$cond_i_i572136;var $__result_addr_i_i594_0117=$16;label=24;break;
 case 24: 
 var $__result_addr_i_i594_0117;
 var $agg_tmp7_i596_sroa_0_0116;
 var $19=HEAP32[(($agg_tmp7_i596_sroa_0_0116)>>2)];
 HEAP32[(($__result_addr_i_i594_0117)>>2)]=$19;
 var $incdec_ptr_i_i_i622=(($agg_tmp7_i596_sroa_0_0116+4)|0);
 var $lnot_i_i_i616=($incdec_ptr_i_i_i622|0)==($add_ptr_i714|0);
 if($lnot_i_i_i616){label=26;break;}else{label=25;break;}
 case 25: 
 var $incdec_ptr_i_i623=(($__result_addr_i_i594_0117+4)|0);
 var $agg_tmp7_i596_sroa_0_0116=$incdec_ptr_i_i_i622;var $__result_addr_i_i594_0117=$incdec_ptr_i_i623;label=24;break;
 case 26: 
 var $scevgep127_sum=((($18)+(1))|0);
 var $scevgep134=(($16+($scevgep127_sum<<2))|0);
 var $__result_addr_i_i594_0_lcssa=$scevgep134;label=27;break;
 case 27: 
 var $__result_addr_i_i594_0_lcssa;
 HEAP32[(($__me)>>2)]=$__result_addr_i_i594_0_lcssa;
 var $__db_addr_2=$__db_addr_0119;label=63;break;
 case 28: 
 var $20=HEAP32[(($__me)>>2)];
 var $incdec_ptr15=(($__db_addr_0119+4)|0);
 var $incdec_ptr15___db_addr_0=($__neg?$incdec_ptr15:$__db_addr_0119);
 var $__d_0=$incdec_ptr15___db_addr_0;label=29;break;
 case 29: 
 var $__d_0;
 var $cmp18=($__d_0>>>0)<($__de>>>0);
 if($cmp18){label=30;break;}else{label=31;break;}
 case 30: 
 var $21=HEAP32[(($__d_0)>>2)];
 var $vtable_i523=HEAP32[(($1)>>2)];
 var $vfn_i524=(($vtable_i523+12)|0);
 var $22=HEAP32[(($vfn_i524)>>2)];
 var $call_i525=FUNCTION_TABLE[$22]($__ct,2048,$21);
 var $incdec_ptr23=(($__d_0+4)|0);
 if($call_i525){var $__d_0=$incdec_ptr23;label=29;break;}else{label=31;break;}
 case 31: 
 if($cmp24){label=32;break;}else{var $__d_2=$__d_0;label=39;break;}
 case 32: 
 var $cmp2794=($__d_0>>>0)>($incdec_ptr15___db_addr_0>>>0);
 if($cmp2794){var $__d_197=$__d_0;var $__f_098=$__fd;label=33;break;}else{var $__f_0_lcssa141=$__fd;var $__d_1_lcssa143=$__d_0;label=35;break;}
 case 33: 
 var $__f_098;
 var $__d_197;
 var $incdec_ptr30=((($__d_197)-(4))|0);
 var $23=HEAP32[(($incdec_ptr30)>>2)];
 var $24=HEAP32[(($__me)>>2)];
 var $incdec_ptr31=(($24+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr31;
 HEAP32[(($24)>>2)]=$23;
 var $dec=((($__f_098)-(1))|0);
 var $cmp27=($incdec_ptr30>>>0)>($incdec_ptr15___db_addr_0>>>0);
 var $cmp28=($dec|0)>0;
 var $or_cond=$cmp27&$cmp28;
 if($or_cond){var $__d_197=$incdec_ptr30;var $__f_098=$dec;label=33;break;}else{label=34;break;}
 case 34: 
 if($cmp28){var $__f_0_lcssa141=$dec;var $__d_1_lcssa143=$incdec_ptr30;label=35;break;}else{var $cond=0;var $__f_0_lcssa140=$dec;var $__d_1_lcssa142=$incdec_ptr30;label=36;break;}
 case 35: 
 var $__d_1_lcssa143;
 var $__f_0_lcssa141;
 var $vtable_i473=HEAP32[(($0)>>2)];
 var $vfn_i474=(($vtable_i473+44)|0);
 var $25=HEAP32[(($vfn_i474)>>2)];
 var $call_i475=FUNCTION_TABLE[$25]($__ct,48);
 var $cond=$call_i475;var $__f_0_lcssa140=$__f_0_lcssa141;var $__d_1_lcssa142=$__d_1_lcssa143;label=36;break;
 case 36: 
 var $__d_1_lcssa142;
 var $__f_0_lcssa140;
 var $cond;
 var $cmp37102=($__f_0_lcssa140|0)>0;
 var $26=HEAP32[(($__me)>>2)];
 var $incdec_ptr39103=(($26+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr39103;
 if($cmp37102){var $__f_1104=$__f_0_lcssa140;var $27=$26;label=37;break;}else{var $_lcssa=$26;label=38;break;}
 case 37: 
 var $27;
 var $__f_1104;
 HEAP32[(($27)>>2)]=$cond;
 var $dec41=((($__f_1104)-(1))|0);
 var $cmp37=($dec41|0)>0;
 var $28=HEAP32[(($__me)>>2)];
 var $incdec_ptr39=(($28+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr39;
 if($cmp37){var $__f_1104=$dec41;var $27=$28;label=37;break;}else{var $_lcssa=$28;label=38;break;}
 case 38: 
 var $_lcssa;
 HEAP32[(($_lcssa)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa142;label=39;break;
 case 39: 
 var $__d_2;
 var $cmp45=($__d_2|0)==($incdec_ptr15___db_addr_0|0);
 if($cmp45){label=40;break;}else{label=41;break;}
 case 40: 
 var $vtable_i419=HEAP32[(($0)>>2)];
 var $vfn_i420=(($vtable_i419+44)|0);
 var $29=HEAP32[(($vfn_i420)>>2)];
 var $call_i421=FUNCTION_TABLE[$29]($__ct,48);
 var $30=HEAP32[(($__me)>>2)];
 var $incdec_ptr48=(($30+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr48;
 HEAP32[(($30)>>2)]=$call_i421;
 label=60;break;
 case 41: 
 var $31=HEAP8[($__size__i_i_i392)];
 var $conv_i_i_i393=($31&255);
 var $and_i_i_i394=$conv_i_i_i393&1;
 var $tobool_i_i_i395=($and_i_i_i394|0)==0;
 if($tobool_i_i_i395){label=43;break;}else{label=42;break;}
 case 42: 
 var $32=HEAP32[(($__size__i23_i311)>>2)];
 var $cond_i_i414=$32;label=44;break;
 case 43: 
 var $shr_i_i_i41285=$conv_i_i_i393>>>1;
 var $cond_i_i414=$shr_i_i_i41285;label=44;break;
 case 44: 
 var $cond_i_i414;
 var $cmp_i415=($cond_i_i414|0)==0;
 if($cmp_i415){var $__d_3107=$__d_2;var $__ng_0108=0;var $__ig_0109=0;var $__gl_0110=-1;label=48;break;}else{label=45;break;}
 case 45: 
 var $and_i_i_i_i351=$31&1;
 var $tobool_i_i_i_i352=(($and_i_i_i_i351<<24)>>24)==0;
 if($tobool_i_i_i_i352){var $cond_i_i_i370=$arrayidx_i_i_i_i368;label=47;break;}else{label=46;break;}
 case 46: 
 var $33=HEAP32[(($__data__i21_i_i_i359)>>2)];
 var $cond_i_i_i370=$33;label=47;break;
 case 47: 
 var $cond_i_i_i370;
 var $34=HEAP8[($cond_i_i_i370)];
 var $conv54=(($34<<24)>>24);
 var $__d_3107=$__d_2;var $__ng_0108=0;var $__ig_0109=0;var $__gl_0110=$conv54;label=48;break;
 case 48: 
 var $__gl_0110;
 var $__ig_0109;
 var $__ng_0108;
 var $__d_3107;
 var $cmp58=($__ng_0108|0)==($__gl_0110|0);
 if($cmp58){label=49;break;}else{var $__gl_1=$__gl_0110;var $__ig_1=$__ig_0109;var $__ng_1=$__ng_0108;label=59;break;}
 case 49: 
 var $35=HEAP32[(($__me)>>2)];
 var $incdec_ptr60=(($35+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr60;
 HEAP32[(($35)>>2)]=$__ts;
 var $inc=((($__ig_0109)+(1))|0);
 var $36=HEAP8[($__size__i_i_i392)];
 var $conv_i_i302=($36&255);
 var $and_i_i303=$conv_i_i302&1;
 var $tobool_i_i304=($and_i_i303|0)==0;
 if($tobool_i_i304){label=51;break;}else{label=50;break;}
 case 50: 
 var $37=HEAP32[(($__size__i23_i311)>>2)];
 var $cond_i323=$37;label=52;break;
 case 51: 
 var $shr_i_i32186=$conv_i_i302>>>1;
 var $cond_i323=$shr_i_i32186;label=52;break;
 case 52: 
 var $cond_i323;
 var $cmp62=($inc>>>0)<($cond_i323>>>0);
 if($cmp62){label=53;break;}else{var $__gl_1=$__gl_0110;var $__ig_1=$inc;var $__ng_1=0;label=59;break;}
 case 53: 
 var $and_i_i_i_i262=$36&1;
 var $tobool_i_i_i_i263=(($and_i_i_i_i262<<24)>>24)==0;
 if($tobool_i_i_i_i263){var $cond_i_i_i281=$arrayidx_i_i_i_i368;label=55;break;}else{label=54;break;}
 case 54: 
 var $38=HEAP32[(($__data__i21_i_i_i359)>>2)];
 var $cond_i_i_i281=$38;label=55;break;
 case 55: 
 var $cond_i_i_i281;
 var $add_ptr_i282=(($cond_i_i_i281+$inc)|0);
 var $39=HEAP8[($add_ptr_i282)];
 var $cmp68=(($39<<24)>>24)==127;
 if($cmp68){var $__gl_1=-1;var $__ig_1=$inc;var $__ng_1=0;label=59;break;}else{label=56;break;}
 case 56: 
 if($tobool_i_i_i_i263){var $cond_i_i_i=$arrayidx_i_i_i_i368;label=58;break;}else{label=57;break;}
 case 57: 
 var $40=HEAP32[(($__data__i21_i_i_i359)>>2)];
 var $cond_i_i_i=$40;label=58;break;
 case 58: 
 var $cond_i_i_i;
 var $add_ptr_i234=(($cond_i_i_i+$inc)|0);
 var $41=HEAP8[($add_ptr_i234)];
 var $conv73=(($41<<24)>>24);
 var $__gl_1=$conv73;var $__ig_1=$inc;var $__ng_1=0;label=59;break;
 case 59: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $incdec_ptr78=((($__d_3107)-(4))|0);
 var $42=HEAP32[(($incdec_ptr78)>>2)];
 var $43=HEAP32[(($__me)>>2)];
 var $incdec_ptr79=(($43+4)|0);
 HEAP32[(($__me)>>2)]=$incdec_ptr79;
 HEAP32[(($43)>>2)]=$42;
 var $inc80=((($__ng_1)+(1))|0);
 var $cmp57=($incdec_ptr78|0)==($incdec_ptr15___db_addr_0|0);
 if($cmp57){label=60;break;}else{var $__d_3107=$incdec_ptr78;var $__ng_0108=$inc80;var $__ig_0109=$__ig_1;var $__gl_0110=$__gl_1;label=48;break;}
 case 60: 
 var $44=HEAP32[(($__me)>>2)];
 var $cmp_i_i=($20|0)==($44|0);
 if($cmp_i_i){var $__db_addr_2=$incdec_ptr15___db_addr_0;label=63;break;}else{label=61;break;}
 case 61: 
 var $incdec_ptr_i_i221111=((($44)-(4))|0);
 var $cmp1_i_i112=($20>>>0)<($incdec_ptr_i_i221111>>>0);
 if($cmp1_i_i112){var $__first_addr_i_i_0113=$20;var $incdec_ptr_i_i221114=$incdec_ptr_i_i221111;label=62;break;}else{var $__db_addr_2=$incdec_ptr15___db_addr_0;label=63;break;}
 case 62: 
 var $incdec_ptr_i_i221114;
 var $__first_addr_i_i_0113;
 var $45=HEAP32[(($__first_addr_i_i_0113)>>2)];
 var $46=HEAP32[(($incdec_ptr_i_i221114)>>2)];
 HEAP32[(($__first_addr_i_i_0113)>>2)]=$46;
 HEAP32[(($incdec_ptr_i_i221114)>>2)]=$45;
 var $incdec_ptr2_i_i=(($__first_addr_i_i_0113+4)|0);
 var $incdec_ptr_i_i221=((($incdec_ptr_i_i221114)-(4))|0);
 var $cmp1_i_i=($incdec_ptr2_i_i>>>0)<($incdec_ptr_i_i221>>>0);
 if($cmp1_i_i){var $__first_addr_i_i_0113=$incdec_ptr2_i_i;var $incdec_ptr_i_i221114=$incdec_ptr_i_i221;label=62;break;}else{var $__db_addr_2=$incdec_ptr15___db_addr_0;label=63;break;}
 case 63: 
 var $__db_addr_2;
 var $inc83=((($__p_0120)+(1))|0);
 var $cmp=($inc83>>>0)<4;
 if($cmp){var $__db_addr_0119=$__db_addr_2;var $__p_0120=$inc83;label=2;break;}else{label=64;break;}
 case 64: 
 var $47=HEAP8[($__size__i_i_i)];
 var $conv_i_i=($47&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=66;break;}else{label=65;break;}
 case 65: 
 var $48=HEAP32[(($__data__i_i_i_i465)>>2)];
 var $cond_i=$48;label=67;break;
 case 66: 
 var $shr_i_i83=$conv_i_i>>>1;
 var $cond_i=$shr_i_i83;label=67;break;
 case 67: 
 var $cond_i;
 var $cmp86=($cond_i>>>0)>1;
 if($cmp86){label=68;break;}else{label=79;break;}
 case 68: 
 var $and_i_i_i186=$47&1;
 var $tobool_i_i_i187=(($and_i_i_i186<<24)>>24)==0;
 if($tobool_i_i_i187){label=70;break;}else{label=69;break;}
 case 69: 
 var $49=HEAP32[(($__data__i21_i_i_i457)>>2)];
 var $cond_i_i146=$49;var $cond_i_i205145=$49;var $cond_i_i205122147_in=$49;label=71;break;
 case 70: 
 var $cond_i_i146=$__data__i_i_i_i465;var $cond_i_i205145=$__data__i_i_i_i465;var $cond_i_i205122147_in=$__data__i_i_i_i465;label=71;break;
 case 71: 
 var $cond_i_i205122147_in;
 var $cond_i_i205145;
 var $cond_i_i146;
 var $cond_i_i205122147=$cond_i_i205122147_in;
 if($tobool_i_i){label=73;break;}else{label=72;break;}
 case 72: 
 var $50=HEAP32[(($__data__i_i_i_i465)>>2)];
 var $cond_i34_i=$50;label=74;break;
 case 73: 
 var $shr_i_i_i15584=$conv_i_i>>>1;
 var $cond_i34_i=$shr_i_i_i15584;label=74;break;
 case 74: 
 var $cond_i34_i;
 var $add_ptr_i=(($cond_i_i146+($cond_i34_i<<2))|0);
 var $51=HEAP32[(($__me)>>2)];
 var $agg_tmp7_i_sroa_0_090=(($cond_i_i205145+4)|0);
 var $lnot_i_i_i91=($agg_tmp7_i_sroa_0_090|0)==($add_ptr_i|0);
 if($lnot_i_i_i91){var $__result_addr_i_i_0_lcssa=$51;label=78;break;}else{label=75;break;}
 case 75: 
 var $52=((($cond_i34_i)-(2))|0);
 var $scevgep=(($cond_i_i146+($52<<2))|0);
 var $scevgep121=$scevgep;
 var $53=(((-$cond_i_i205122147))|0);
 var $uglygep=(($scevgep121+$53)|0);
 var $uglygep123=$uglygep;
 var $54=$uglygep123>>>2;
 var $55=((($54)+(1))|0);
 var $__result_addr_i_i_092=$51;var $agg_tmp7_i_sroa_0_093=$agg_tmp7_i_sroa_0_090;label=76;break;
 case 76: 
 var $agg_tmp7_i_sroa_0_093;
 var $__result_addr_i_i_092;
 var $56=HEAP32[(($agg_tmp7_i_sroa_0_093)>>2)];
 HEAP32[(($__result_addr_i_i_092)>>2)]=$56;
 var $incdec_ptr_i_i=(($__result_addr_i_i_092+4)|0);
 var $agg_tmp7_i_sroa_0_0=(($agg_tmp7_i_sroa_0_093+4)|0);
 var $lnot_i_i_i=($agg_tmp7_i_sroa_0_0|0)==($add_ptr_i|0);
 if($lnot_i_i_i){label=77;break;}else{var $__result_addr_i_i_092=$incdec_ptr_i_i;var $agg_tmp7_i_sroa_0_093=$agg_tmp7_i_sroa_0_0;label=76;break;}
 case 77: 
 var $scevgep124=(($51+($55<<2))|0);
 var $__result_addr_i_i_0_lcssa=$scevgep124;label=78;break;
 case 78: 
 var $__result_addr_i_i_0_lcssa;
 HEAP32[(($__me)>>2)]=$__result_addr_i_i_0_lcssa;
 label=79;break;
 case 79: 
 var $and92=$__flags&176;
 if(($and92|0)==32){ label=80;break;}else if(($and92|0)==16){ label=82;break;}else{label=81;break;}
 case 80: 
 var $57=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$57;
 label=82;break;
 case 81: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=82;break;
 case 82: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__loc=(sp)+(16);
 var $__pat=(sp)+(24);
 var $__dp=(sp)+(32);
 var $__ts=(sp)+(40);
 var $__grp=(sp)+(48);
 var $__grp47=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i450=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__size__i_i393=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $agg_tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 var $__locale__i=(($__loc)|0);
 var $0=HEAP32[(($__locale__i)>>2)];
 var $1=$__p_i_i_i;
 var $2=HEAP32[((13640)>>2)];
 var $cmp_i_i_i36=($2|0)==-1;
 if($cmp_i_i_i36){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$1,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $3=HEAP32[((13644)>>2)];
 var $sub_i_i=((($3)-(1))|0);
 var $__end__i_i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i_i)>>2)];
 var $__begin__i_i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i_i=$5;
 var $sub_ptr_sub_i_i_i_i=((($sub_ptr_lhs_cast_i_i_i_i)-($sub_ptr_rhs_cast_i_i_i_i))|0);
 var $sub_ptr_div_i_i_i_i=$sub_ptr_sub_i_i_i_i>>2;
 var $cmp_i_i1_i=($sub_ptr_div_i_i_i_i>>>0)>($sub_i_i>>>0);
 if($cmp_i_i1_i){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i_i=(($5+($sub_i_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i_i)>>2)];
 var $tobool_i_i_i38=($6|0)==0;
 if($tobool_i_i_i38){label=5;break;}else{label=7;break;}
 case 5: 
 var $exception_i_i=___cxa_allocate_exception(4);
 var $7=$exception_i_i;
 __ZNSt8bad_castC2Ev($7);
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i_i,8536,(376)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $8=$6;
 var $__size__i_i=$__digits;
 var $9=HEAP8[($__size__i_i)];
 var $conv_i_i=($9&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=9;break;}else{label=8;break;}
 case 8: 
 var $__size__i23_i=(($__digits+4)|0);
 var $10=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$10;label=10;break;
 case 9: 
 var $shr_i_i28=$conv_i_i>>>1;
 var $cond_i=$shr_i_i28;label=10;break;
 case 10: 
 var $cond_i;
 var $cmp=($cond_i|0)==0;
 if($cmp){var $15=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $and_i_i_i_i=$9&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=13;break;}else{label=12;break;}
 case 12: 
 var $__data__i21_i_i_i=(($__digits+8)|0);
 var $11=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$11;label=14;break;
 case 13: 
 var $__data__i_i_i_i=(($__digits+4)|0);
 var $cond_i_i_i=$__data__i_i_i_i;label=14;break;
 case 14: 
 var $cond_i_i_i;
 var $12=HEAP32[(($cond_i_i_i)>>2)];
 var $13=$6;
 var $vtable_i=HEAP32[(($13)>>2)];
 var $vfn_i=(($vtable_i+44)|0);
 var $14=HEAP32[(($vfn_i)>>2)];
 var $call_i58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$14]($8,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 var $cmp7=($12|0)==($call_i58|0);
 var $15=$cmp7;label=16;break;
 case 16: 
 var $15;
 HEAP32[(($__grp47)>>2)]=0; HEAP32[((($__grp47)+(4))>>2)]=0; HEAP32[((($__grp47)+(8))>>2)]=0;
 HEAP32[(($__size__i_i450)>>2)]=0; HEAP32[((($__size__i_i450)+(4))>>2)]=0; HEAP32[((($__size__i_i450)+(8))>>2)]=0;
 HEAP32[(($__size__i_i393)>>2)]=0; HEAP32[((($__size__i_i393)+(4))>>2)]=0; HEAP32[((($__size__i_i393)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$15,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $arraydecay=(($__mbuf)|0);
 var $16=HEAP8[($__size__i_i)];
 var $conv_i_i178=($16&255);
 var $and_i_i179=$conv_i_i178&1;
 var $tobool_i_i180=($and_i_i179|0)==0;
 if($tobool_i_i180){label=19;break;}else{label=18;break;}
 case 18: 
 var $__size__i23_i187=(($__digits+4)|0);
 var $17=HEAP32[(($__size__i23_i187)>>2)];
 var $cond_i199=$17;label=20;break;
 case 19: 
 var $shr_i_i19729=$conv_i_i178>>>1;
 var $cond_i199=$shr_i_i19729;label=20;break;
 case 20: 
 var $cond_i199;
 var $18=HEAP32[(($__fd)>>2)];
 var $cmp13=($cond_i199|0)>($18|0);
 if($cmp13){label=21;break;}else{label=31;break;}
 case 21: 
 if($tobool_i_i180){label=23;break;}else{label=22;break;}
 case 22: 
 var $__size__i23_i362=(($__digits+4)|0);
 var $19=HEAP32[(($__size__i23_i362)>>2)];
 var $cond_i374=$19;label=24;break;
 case 23: 
 var $shr_i_i37233=$conv_i_i178>>>1;
 var $cond_i374=$shr_i_i37233;label=24;break;
 case 24: 
 var $cond_i374;
 var $sub=((($cond_i374)-($18))|0);
 var $mul=$sub<<1;
 var $20=HEAP8[($__size__i_i393)];
 var $conv_i_i394=($20&255);
 var $and_i_i395=$conv_i_i394&1;
 var $tobool_i_i396=($and_i_i395|0)==0;
 if($tobool_i_i396){label=26;break;}else{label=25;break;}
 case 25: 
 var $__size__i23_i403=(($__sn+4)|0);
 var $21=HEAP32[(($__size__i23_i403)>>2)];
 var $cond_i415=$21;label=27;break;
 case 26: 
 var $shr_i_i41334=$conv_i_i394>>>1;
 var $cond_i415=$shr_i_i41334;label=27;break;
 case 27: 
 var $cond_i415;
 var $22=HEAP8[($__size__i_i450)];
 var $conv_i_i451=($22&255);
 var $and_i_i452=$conv_i_i451&1;
 var $tobool_i_i453=($and_i_i452|0)==0;
 if($tobool_i_i453){label=29;break;}else{label=28;break;}
 case 28: 
 var $__size__i23_i460=(($__sym+4)|0);
 var $23=HEAP32[(($__size__i23_i460)>>2)];
 var $cond_i472=$23;label=30;break;
 case 29: 
 var $shr_i_i47035=$conv_i_i451>>>1;
 var $cond_i472=$shr_i_i47035;label=30;break;
 case 30: 
 var $cond_i472;
 var $add46=$mul|1;
 var $add17=((($add46)+($cond_i415))|0);
 var $add18=((($add17)+($cond_i472))|0);
 var $add18_pn=$add18;label=38;break;
 case 31: 
 var $24=HEAP8[($__size__i_i393)];
 var $conv_i_i492=($24&255);
 var $and_i_i493=$conv_i_i492&1;
 var $tobool_i_i494=($and_i_i493|0)==0;
 if($tobool_i_i494){label=33;break;}else{label=32;break;}
 case 32: 
 var $__size__i23_i501=(($__sn+4)|0);
 var $25=HEAP32[(($__size__i23_i501)>>2)];
 var $cond_i513=$25;label=34;break;
 case 33: 
 var $shr_i_i51130=$conv_i_i492>>>1;
 var $cond_i513=$shr_i_i51130;label=34;break;
 case 34: 
 var $cond_i513;
 var $26=HEAP8[($__size__i_i450)];
 var $conv_i_i533=($26&255);
 var $and_i_i534=$conv_i_i533&1;
 var $tobool_i_i535=($and_i_i534|0)==0;
 if($tobool_i_i535){label=36;break;}else{label=35;break;}
 case 35: 
 var $__size__i23_i542=(($__sym+4)|0);
 var $27=HEAP32[(($__size__i23_i542)>>2)];
 var $cond_i554=$27;label=37;break;
 case 36: 
 var $shr_i_i55231=$conv_i_i533>>>1;
 var $cond_i554=$shr_i_i55231;label=37;break;
 case 37: 
 var $cond_i554;
 var $add22=((($cond_i513)+(2))|0);
 var $add23=((($add22)+($cond_i554))|0);
 var $add18_pn=$add23;label=38;break;
 case 38: 
 var $add18_pn;
 var $cond=((($add18_pn)+($18))|0);
 var $cmp25=($cond>>>0)>100;
 if($cmp25){label=39;break;}else{var $__mb_0=$arraydecay;var $__h_sroa_0_1=0;var $39=$16;label=46;break;}
 case 39: 
 var $mul26=$cond<<2;
 var $call29=_malloc($mul26);
 var $28=$call29;
 var $cmp31=($call29|0)==0;
 if($cmp31){label=40;break;}else{var $__mb_0=$28;var $__h_sroa_0_1=$28;var $39=$16;label=46;break;}
 case 40: 
 (function() { try { __THREW__ = 0; return __ZSt17__throw_bad_allocv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $__h_sroa_0_0=$28;label=44;break; }
 case 41: 
 var $_pre=HEAP8[($__size__i_i)];
 var $__mb_0=$28;var $__h_sroa_0_1=$28;var $39=$_pre;label=46;break;
 case 42: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 var $ehselector_slot_1=$31;var $exn_slot_1=$30;label=58;break;
 case 43: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 var $33=$32$0;
 var $34=$32$1;
 var $ehselector_slot_0=$34;var $exn_slot_0=$33;label=57;break;
 case 44: 
 var $__h_sroa_0_0;
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 var $tobool_i_i_i326=($__h_sroa_0_0|0)==0;
 if($tobool_i_i_i326){var $ehselector_slot_0=$37;var $exn_slot_0=$36;label=57;break;}else{label=45;break;}
 case 45: 
 var $38=$__h_sroa_0_0;
 _free($38);
 var $ehselector_slot_0=$37;var $exn_slot_0=$36;label=57;break;
 case 46: 
 var $39;
 var $__h_sroa_0_1;
 var $__mb_0;
 var $__fmtflags__i=(($__iob+4)|0);
 var $40=HEAP32[(($__fmtflags__i)>>2)];
 var $and_i_i_i281=$39&1;
 var $tobool_i_i_i282=(($and_i_i_i281<<24)>>24)==0;
 if($tobool_i_i_i282){label=48;break;}else{label=47;break;}
 case 47: 
 var $__data__i21_i_i289=(($__digits+8)|0);
 var $41=HEAP32[(($__data__i21_i_i289)>>2)];
 var $cond_i_i=$41;var $cond_i_i30048=$41;label=49;break;
 case 48: 
 var $__data__i_i_i297=(($__digits+4)|0);
 var $__data__i_i_i=(($__digits+4)|0);
 var $cond_i_i=$__data__i_i_i;var $cond_i_i30048=$__data__i_i_i297;label=49;break;
 case 49: 
 var $cond_i_i30048;
 var $cond_i_i;
 var $conv_i_i219=($39&255);
 var $and_i_i220=$conv_i_i219&1;
 var $tobool_i_i221=($and_i_i220|0)==0;
 if($tobool_i_i221){label=51;break;}else{label=50;break;}
 case 50: 
 var $__size__i23_i228=(($__digits+4)|0);
 var $42=HEAP32[(($__size__i23_i228)>>2)];
 var $cond_i240=$42;label=52;break;
 case 51: 
 var $shr_i_i23832=$conv_i_i219>>>1;
 var $cond_i240=$shr_i_i23832;label=52;break;
 case 52: 
 var $cond_i240;
 var $add_ptr=(($cond_i_i+($cond_i240<<2))|0);
 var $43=HEAP32[(($__dp)>>2)];
 var $44=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$40,$cond_i_i30048,$add_ptr,$8,$15,$__pat,$43,$44,$__grp,$__sym,$__sn,$18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 53: 
 var $45=(($__s)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($agg_tmp)|0);
 HEAP32[(($47)>>2)]=$46;
 var $48=HEAP32[(($__mi)>>2)];
 var $49=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$agg_tmp,$__mb_0,$48,$49,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 54: 
 var $tobool_i_i_i=($__h_sroa_0_1|0)==0;
 if($tobool_i_i_i){label=56;break;}else{label=55;break;}
 case 55: 
 var $50=$__h_sroa_0_1;
 _free($50);
 label=56;break;
 case 56: 
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $51=HEAP32[(($__locale__i)>>2)];
 var $52=(($51)|0);
 var $call_i=__ZNSt3__114__shared_count16__release_sharedEv($52);
 STACKTOP=sp;return;
 case 57: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 var $ehselector_slot_1=$ehselector_slot_0;var $exn_slot_1=$exn_slot_0;label=58;break;
 case 58: 
 var $exn_slot_1;
 var $ehselector_slot_1;
 var $53=HEAP32[(($__locale__i)>>2)];
 var $54=(($53)|0);
 var $call_i42=__ZNSt3__114__shared_count16__release_sharedEv($54);
 var $lpad_val$0=$exn_slot_1;
 var $lpad_val$1=0;
 var $lpad_val46$0=$lpad_val$0;
 var $lpad_val46$1=$ehselector_slot_1;
 ___resumeException($lpad_val46$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i_i_i=$__nm;
 var $1=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$1&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i_i=(($__nm+8)|0);
 var $2=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$2;label=4;break;
 case 3: 
 var $__s_i_i_i_i=$__nm;
 var $arrayidx_i_i_i_i=(($__s_i_i_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;label=4;break;
 case 4: 
 var $cond_i_i_i;
 var $call2=_catopen($cond_i_i_i,1);
 var $3=$call2;
 var $not_cmp=($call2|0)!=-1;
 var $shr=($not_cmp&1);
 var $__cat_0=$3>>>($shr>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $__size__i_i_i_i=$__ndflt;
 HEAP32[(($__size__i_i_i_i)>>2)]=0; HEAP32[((($__size__i_i_i_i)+(4))>>2)]=0; HEAP32[((($__size__i_i_i_i)+(8))>>2)]=0;
 var $agg_result26=$agg_result;
 var $__s_i_i_i_i125=$__dflt;
 var $__size__i_i_i_i126=$__dflt;
 var $0=HEAP8[($__size__i_i_i_i126)];
 var $and_i_i_i_i128=$0&1;
 var $tobool_i_i_i_i129=(($and_i_i_i_i128<<24)>>24)==0;
 if($tobool_i_i_i_i129){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i_i136=(($__dflt+8)|0);
 var $1=HEAP32[(($__data__i21_i_i_i136)>>2)];
 var $cond_i_i_i205=$1;var $cond_i_i_i14728=$1;label=4;break;
 case 3: 
 var $arrayidx_i_i_i_i145=(($__s_i_i_i_i125+1)|0);
 var $arrayidx_i_i_i_i203=(($__s_i_i_i_i125+1)|0);
 var $cond_i_i_i205=$arrayidx_i_i_i_i203;var $cond_i_i_i14728=$arrayidx_i_i_i_i145;label=4;break;
 case 4: 
 var $cond_i_i_i14728;
 var $cond_i_i_i205;
 var $conv_i_i=($0&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i=(($__dflt+4)|0);
 var $2=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i=$2;label=7;break;
 case 6: 
 var $shr_i_i17=$conv_i_i>>>1;
 var $cond_i=$shr_i_i17;label=7;break;
 case 7: 
 var $cond_i;
 var $add_ptr=(($cond_i_i_i205+$cond_i)|0);
 var $cmp_i9323=($cond_i_i_i14728>>>0)<($add_ptr>>>0);
 if($cmp_i9323){var $__wb_addr_i_024=$cond_i_i_i14728;label=9;break;}else{label=8;break;}
 case 8: 
 var $cmp30=($__c|0)==-1;
 var $shl31=$__c<<1;
 var $3=$shl31;
 var $4=($cmp30?-1:$3);
 var $11=$4;label=16;break;
 case 9: 
 var $__wb_addr_i_024;
 var $5=HEAP8[($__wb_addr_i_024)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 var $incdec_ptr_i99=(($__wb_addr_i_024+1)|0);
 var $cmp_i93=($incdec_ptr_i99>>>0)<($add_ptr>>>0);
 if($cmp_i93){var $__wb_addr_i_024=$incdec_ptr_i99;label=9;break;}else{label=11;break;}
 case 11: 
 var $_pre=HEAP8[($__size__i_i_i_i)];
 var $phitmp=$_pre&1;
 var $phitmp27=(($phitmp<<24)>>24)==0;
 var $cmp=($__c|0)==-1;
 var $shl=$__c<<1;
 var $6=$shl;
 var $7=($cmp?-1:$6);
 if($phitmp27){var $11=$7;label=16;break;}else{label=15;break;}
 case 12: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit21$1;var $lpad_phi$0=$lpad_loopexit21$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit22$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit22$1;var $lpad_phi$0=$lpad_nonloopexit22$0;label=14;break;
 case 14: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $8=$lpad_phi$0;
 var $9=$lpad_phi$1;
 var $ehselector_slot_0=$9;var $exn_slot_0=$8;label=23;break;
 case 15: 
 var $__data__i21_i_i_i=(($__ndflt+8)|0);
 var $10=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$10;var $12=$7;label=17;break;
 case 16: 
 var $11;
 var $__s_i_i_i_i=$__ndflt;
 var $arrayidx_i_i_i_i=(($__s_i_i_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;var $12=$11;label=17;break;
 case 17: 
 var $12;
 var $cond_i_i_i;
 var $call10=(function() { try { __THREW__ = 0; return _catgets($12,$__set,$__msgid,$cond_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 HEAP32[(($agg_result26)>>2)]=0; HEAP32[((($agg_result26)+(4))>>2)]=0; HEAP32[((($agg_result26)+(8))>>2)]=0;
 var $call16=_strlen($call10);
 var $add_ptr17=(($call10+$call16)|0);
 var $cmp_i18=($call16|0)>0;
 if($cmp_i18){var $__nb_addr_i_019=$call10;label=19;break;}else{label=22;break;}
 case 19: 
 var $__nb_addr_i_019;
 var $13=HEAP8[($__nb_addr_i_019)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg_result,$13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=21;break; }
 case 20: 
 var $incdec_ptr_i=(($__nb_addr_i_019+1)|0);
 var $cmp_i=($incdec_ptr_i>>>0)<($add_ptr17>>>0);
 if($cmp_i){var $__nb_addr_i_019=$incdec_ptr_i;label=19;break;}else{label=22;break;}
 case 21: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$14$0;
 var $16=$14$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg_result);
 var $ehselector_slot_0=$16;var $exn_slot_0=$15;label=23;break;
 case 22: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 23: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val20$0=$lpad_val$0;
 var $lpad_val20$1=$ehselector_slot_0;
 ___resumeException($lpad_val20$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;
 var $cmp=($__c|0)==-1;
 var $shl=$__c<<1;
 var $0=$shl;
 var $1=($cmp?-1:$0);
 var $call=_catclose($1);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__size__i_i_i_i=$__nm;
 var $1=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$1&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i_i=(($__nm+8)|0);
 var $2=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i=$2;label=4;break;
 case 3: 
 var $__s_i_i_i_i=$__nm;
 var $arrayidx_i_i_i_i=(($__s_i_i_i_i+1)|0);
 var $cond_i_i_i=$arrayidx_i_i_i_i;label=4;break;
 case 4: 
 var $cond_i_i_i;
 var $call2=_catopen($cond_i_i_i,1);
 var $3=$call2;
 var $not_cmp=($call2|0)!=-1;
 var $shr=($not_cmp&1);
 var $__cat_0=$3>>>($shr>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i232=sp;
 var $__buf_i234=(sp)+(8);
 var $__bn_i235=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $__size__i_i_i_i202=$__ndflt;
 var $temp_lvalue=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $temp_lvalue12=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__size__i_i_i_i202)>>2)]=0; HEAP32[((($__size__i_i_i_i202)+(4))>>2)]=0; HEAP32[((($__size__i_i_i_i202)+(8))>>2)]=0;
 var $agg_result59=$agg_result;
 var $0=(($temp_lvalue)|0);
 var $1=(($temp_lvalue)|0);
 var $__shared_owners__i_i_i_i_i=(($temp_lvalue+4)|0);
 HEAP32[(($__shared_owners__i_i_i_i_i)>>2)]=0;
 HEAP32[(($1)>>2)]=4160;
 var $__size__i_i_i_i=$__dflt;
 var $2=HEAP8[($__size__i_i_i_i)];
 var $and_i_i_i_i=$2&1;
 var $tobool_i_i_i_i=(($and_i_i_i_i<<24)>>24)==0;
 if($tobool_i_i_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $__data__i21_i_i_i=(($__dflt+8)|0);
 var $3=HEAP32[(($__data__i21_i_i_i)>>2)];
 var $cond_i_i_i105=$3;var $cond_i_i_i63=$3;label=4;break;
 case 3: 
 var $__data__i_i_i_i=(($__dflt+4)|0);
 var $__data__i_i_i_i102=(($__dflt+4)|0);
 var $cond_i_i_i105=$__data__i_i_i_i102;var $cond_i_i_i63=$__data__i_i_i_i;label=4;break;
 case 4: 
 var $cond_i_i_i63;
 var $cond_i_i_i105;
 var $conv_i_i=($2&255);
 var $and_i_i=$conv_i_i&1;
 var $tobool_i_i=($and_i_i|0)==0;
 if($tobool_i_i){label=6;break;}else{label=5;break;}
 case 5: 
 var $__size__i23_i=(($__dflt+4)|0);
 var $4=HEAP32[(($__size__i23_i)>>2)];
 var $cond_i118=$4;label=7;break;
 case 6: 
 var $shr_i_i30=$conv_i_i>>>1;
 var $cond_i118=$shr_i_i30;label=7;break;
 case 7: 
 var $cond_i118;
 var $add_ptr=(($cond_i_i_i105+($cond_i118<<2))|0);
 var $cmp_i23856=($cond_i_i_i63>>>0)<($add_ptr>>>0);
 if($cmp_i23856){label=8;break;}else{label=21;break;}
 case 8: 
 var $5=$temp_lvalue;
 var $arraydecay_i245=(($__buf_i234)|0);
 var $add_ptr_i246=(($__buf_i234+32)|0);
 var $__wb_addr_i_057=$cond_i_i_i63;var $vtable_i243=4160;label=9;break;
 case 9: 
 var $vtable_i243;
 var $__wb_addr_i_057;
 HEAP32[(($__wn_i)>>2)]=$__wb_addr_i_057;
 var $vfn_i244=(($vtable_i243+12)|0);
 var $6=HEAP32[(($vfn_i244)>>2)];
 var $call_i260=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6]($0,$__mb_i232,$__wb_addr_i_057,$add_ptr,$__wn_i,$arraydecay_i245,$add_ptr_i246,$__bn_i235) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $cmp4_i=($call_i260|0)==2;
 var $7=HEAP32[(($__wn_i)>>2)];
 var $cmp5_i=($7|0)==($__wb_addr_i_057|0);
 var $or_cond31=$cmp4_i|$cmp5_i;
 if($or_cond31){label=12;break;}else{label=11;break;}
 case 11: 
 var $8=HEAP32[(($__bn_i235)>>2)];
 var $cmp7_i25151=($arraydecay_i245>>>0)<($8>>>0);
 if($cmp7_i25151){var $__p_i236_052=$arraydecay_i245;label=16;break;}else{var $13=$7;label=19;break;}
 case 12: 
 var $exception_i=___cxa_allocate_exception(8);
 var $9=$exception_i;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($9,928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i,8552,(46)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=25;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 ___cxa_free_exception($exception_i);
 var $eh_lpad_body$1=$10$1;var $eh_lpad_body$0=$10$0;label=26;break;
 case 16: 
 var $__p_i236_052;
 var $11=HEAP8[($__p_i236_052)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=23;break; }
 case 17: 
 var $incdec_ptr_i257=(($__p_i236_052+1)|0);
 var $12=HEAP32[(($__bn_i235)>>2)];
 var $cmp7_i251=($incdec_ptr_i257>>>0)<($12>>>0);
 if($cmp7_i251){var $__p_i236_052=$incdec_ptr_i257;label=16;break;}else{label=18;break;}
 case 18: 
 var $_pre60=HEAP32[(($__wn_i)>>2)];
 var $13=$_pre60;label=19;break;
 case 19: 
 var $13;
 var $cmp_i238=($13>>>0)<($add_ptr>>>0);
 if($cmp_i238){label=20;break;}else{label=21;break;}
 case 20: 
 var $vtable_i243_pre=HEAP32[(($5)>>2)];
 var $__wb_addr_i_057=$13;var $vtable_i243=$vtable_i243_pre;label=9;break;
 case 21: 
 var $14=(($temp_lvalue)|0);
 __ZNSt3__114__shared_countD2Ev($14);
 var $cmp=($__c|0)==-1;
 var $shl=$__c<<1;
 var $15=$shl;
 var $16=($cmp?-1:$15);
 var $17=HEAP8[($__size__i_i_i_i202)];
 var $and_i_i_i_i204=$17&1;
 var $tobool_i_i_i_i205=(($and_i_i_i_i204<<24)>>24)==0;
 if($tobool_i_i_i_i205){label=28;break;}else{label=27;break;}
 case 22: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 var $19=$18$0;
 var $20=$18$1;
 var $ehselector_slot_0=$20;var $exn_slot_0=$19;label=49;break;
 case 23: 
 var $lpad_loopexit49$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit49$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit49$1;var $eh_lpad_body$0=$lpad_loopexit49$0;label=26;break;
 case 24: 
 var $lpad_loopexit53$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit53$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit53$1;var $eh_lpad_body$0=$lpad_loopexit53$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit54$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit54$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit54$1;var $eh_lpad_body$0=$lpad_nonloopexit54$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $21=$eh_lpad_body$0;
 var $22=$eh_lpad_body$1;
 var $23=(($temp_lvalue)|0);
 __ZNSt3__114__shared_countD2Ev($23);
 var $ehselector_slot_0=$22;var $exn_slot_0=$21;label=49;break;
 case 27: 
 var $__data__i21_i_i_i212=(($__ndflt+8)|0);
 var $24=HEAP32[(($__data__i21_i_i_i212)>>2)];
 var $cond_i_i_i223=$24;label=29;break;
 case 28: 
 var $__s_i_i_i_i201=$__ndflt;
 var $arrayidx_i_i_i_i221=(($__s_i_i_i_i201+1)|0);
 var $cond_i_i_i223=$arrayidx_i_i_i_i221;label=29;break;
 case 29: 
 var $cond_i_i_i223;
 var $call11=(function() { try { __THREW__ = 0; return _catgets($16,$__set,$__msgid,$cond_i_i_i223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=22;break; }
 case 30: 
 HEAP32[(($agg_result59)>>2)]=0; HEAP32[((($agg_result59)+(4))>>2)]=0; HEAP32[((($agg_result59)+(8))>>2)]=0;
 var $25=(($temp_lvalue12)|0);
 var $26=(($temp_lvalue12)|0);
 var $__shared_owners__i_i_i_i_i145=(($temp_lvalue12+4)|0);
 HEAP32[(($__shared_owners__i_i_i_i_i145)>>2)]=0;
 HEAP32[(($26)>>2)]=4104;
 var $call19=_strlen($call11);
 var $add_ptr20=(($call11+$call19)|0);
 var $cmp_i46=($call19|0)<1;
 if($cmp_i46){label=44;break;}else{label=31;break;}
 case 31: 
 var $27=$temp_lvalue12;
 var $sub_ptr_lhs_cast_i=$add_ptr20;
 var $arraydecay_i=(($__buf_i)|0);
 var $add_ptr5_i=(($__buf_i+128)|0);
 var $__nb_addr_i_047=$call11;var $vtable_i=4104;label=32;break;
 case 32: 
 var $vtable_i;
 var $__nb_addr_i_047;
 HEAP32[(($__nn_i)>>2)]=$__nb_addr_i_047;
 var $vfn_i=(($vtable_i+16)|0);
 var $28=HEAP32[(($vfn_i)>>2)];
 var $sub_ptr_rhs_cast_i=$__nb_addr_i_047;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $cmp3_i=($sub_ptr_sub_i|0)>32;
 var $add_ptr_i=(($__nb_addr_i_047+32)|0);
 var $cond_i=($cmp3_i?$add_ptr_i:$add_ptr20);
 var $call_i46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]($25,$__mb_i,$__nb_addr_i_047,$cond_i,$__nn_i,$arraydecay_i,$add_ptr5_i,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=46;break; }
 case 33: 
 var $cmp6_i=($call_i46|0)==2;
 var $29=HEAP32[(($__nn_i)>>2)];
 var $cmp7_i=($29|0)==($__nb_addr_i_047|0);
 var $or_cond33=$cmp6_i|$cmp7_i;
 if($or_cond33){label=35;break;}else{label=34;break;}
 case 34: 
 var $30=HEAP32[(($__bn_i)>>2)];
 var $cmp9_i41=($arraydecay_i>>>0)<($30>>>0);
 if($cmp9_i41){var $__p_i_042=$arraydecay_i;label=39;break;}else{var $35=$29;label=42;break;}
 case 35: 
 var $exception_i34=___cxa_allocate_exception(8);
 var $31=$exception_i34;
 (function() { try { __THREW__ = 0; return __ZNSt13runtime_errorC2EPKc($31,928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=38;break; }
 case 36: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception_i34,8552,(46)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=47;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 ___cxa_free_exception($exception_i34);
 var $eh_lpad_body38$1=$32$1;var $eh_lpad_body38$0=$32$0;label=48;break;
 case 39: 
 var $__p_i_042;
 var $33=HEAP32[(($__p_i_042)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg_result,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $incdec_ptr_i=(($__p_i_042+4)|0);
 var $34=HEAP32[(($__bn_i)>>2)];
 var $cmp9_i=($incdec_ptr_i>>>0)<($34>>>0);
 if($cmp9_i){var $__p_i_042=$incdec_ptr_i;label=39;break;}else{label=41;break;}
 case 41: 
 var $_pre=HEAP32[(($__nn_i)>>2)];
 var $35=$_pre;label=42;break;
 case 42: 
 var $35;
 var $cmp_i=($35>>>0)<($add_ptr20>>>0);
 if($cmp_i){label=43;break;}else{label=44;break;}
 case 43: 
 var $vtable_i_pre=HEAP32[(($27)>>2)];
 var $__nb_addr_i_047=$35;var $vtable_i=$vtable_i_pre;label=32;break;
 case 44: 
 var $36=(($temp_lvalue12)|0);
 __ZNSt3__114__shared_countD2Ev($36);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP=sp;return;
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body38$1=$lpad_loopexit$1;var $eh_lpad_body38$0=$lpad_loopexit$0;label=48;break;
 case 46: 
 var $lpad_loopexit43$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit43$1 = tempRet0;
 var $eh_lpad_body38$1=$lpad_loopexit43$1;var $eh_lpad_body38$0=$lpad_loopexit43$0;label=48;break;
 case 47: 
 var $lpad_nonloopexit44$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit44$1 = tempRet0;
 var $eh_lpad_body38$1=$lpad_nonloopexit44$1;var $eh_lpad_body38$0=$lpad_nonloopexit44$0;label=48;break;
 case 48: 
 var $eh_lpad_body38$0;
 var $eh_lpad_body38$1;
 var $37=$eh_lpad_body38$0;
 var $38=$eh_lpad_body38$1;
 var $39=(($temp_lvalue12)|0);
 __ZNSt3__114__shared_countD2Ev($39);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg_result);
 var $ehselector_slot_0=$38;var $exn_slot_0=$37;label=49;break;
 case 49: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val24$0=$lpad_val$0;
 var $lpad_val24$1=$ehselector_slot_0;
 ___resumeException($lpad_val24$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;
 var $cmp=($__c|0)==-1;
 var $shl=$__c<<1;
 var $0=$shl;
 var $1=($cmp?-1:$0);
 var $call=_catclose($1);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3624;
 var $__l=(($this+8)|0);
 var $1=HEAP32[(($__l)>>2)];
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=2;break;}else{label=6;break;}
 case 2: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((12216)>>2)]=$call_i;
 label=6;break;
 case 5: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 label=9;break;
 case 6: 
 var $5=HEAP32[((12216)>>2)];
 var $cmp=($1|0)==($5|0);
 if($cmp){label=10;break;}else{label=7;break;}
 case 7: 
 var $6=HEAP32[(($__l)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 label=9;break;
 case 9: 
 var $8=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($8);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $9=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($9);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $exception=___cxa_allocate_exception(8);
 var $0=$exception;
 (function() { try { __THREW__ = 0; return __ZNSt11logic_errorC2EPKc($0,1392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $1=$exception;
 HEAP32[(($1)>>2)]=2560;
 ___cxa_throw($exception,8568,(76));
 throw "Reached an unreachable!";
 case 3: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 ___cxa_free_exception($exception);
 ___resumeException($2$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i278=sp;
 var $__p_i_i_i268=(sp)+(16);
 var $__p_i_i_i258=(sp)+(32);
 var $__p_i_i_i239=(sp)+(48);
 var $__p_i_i_i227=(sp)+(64);
 var $__p_i_i_i217=(sp)+(80);
 var $__p_i_i_i207=(sp)+(96);
 var $__p_i_i_i197=(sp)+(112);
 var $__p_i_i_i187=(sp)+(128);
 var $__p_i_i_i177=(sp)+(144);
 var $__p_i_i_i167=(sp)+(160);
 var $__p_i_i_i157=(sp)+(176);
 var $__p_i_i_i147=(sp)+(192);
 var $__p_i_i_i137=(sp)+(208);
 var $__p_i_i_i127=(sp)+(224);
 var $__p_i_i_i117=(sp)+(240);
 var $__p_i_i_i107=(sp)+(256);
 var $__p_i_i_i97=(sp)+(272);
 var $__p_i_i_i87=(sp)+(288);
 var $__p_i_i_i77=(sp)+(304);
 var $__p_i_i_i67=(sp)+(320);
 var $__p_i_i_i57=(sp)+(336);
 var $__p_i_i_i47=(sp)+(352);
 var $__p_i_i_i36=(sp)+(368);
 var $__p_i_i_i26=(sp)+(384);
 var $__p_i_i_i16=(sp)+(400);
 var $__p_i_i_i6=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $sub_i=((($refs)-(1))|0);
 var $0=(($this)|0);
 var $__shared_owners__i_i=(($this+4)|0);
 HEAP32[(($__shared_owners__i_i)>>2)]=$sub_i;
 HEAP32[(($0)>>2)]=3880;
 var $__begin__i_i2=(($this+8)|0);
 var $__end__i_i=(($this+12)|0);
 var $__first__i_i_i_i_i=(($this+16)|0);
 var $__allocated__i_i_i_i_i_i_i=(($this+136)|0);
 HEAP8[($__allocated__i_i_i_i_i_i_i)]=1;
 var $buf__i_i_i_i=(($this+24)|0);
 var $1=$buf__i_i_i_i;
 HEAP32[(($__end__i_i)>>2)]=$1;
 HEAP32[(($__begin__i_i2)>>2)]=$1;
 var $add_ptr_i_i288=(($buf__i_i_i_i+112)|0);
 var $add_ptr_i_i=$add_ptr_i_i288;
 HEAP32[(($__first__i_i_i_i_i)>>2)]=$add_ptr_i_i;
 var $__n_addr_0_i_i=28;var $2=$1;label=2;break;
 case 2: 
 var $2;
 var $__n_addr_0_i_i;
 var $new_isnull_i_i_i_i=($2|0)==0;
 if($new_isnull_i_i_i_i){var $3=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($2)>>2)]=0;
 var $_pre2_i_i=HEAP32[(($__end__i_i)>>2)];
 var $3=$_pre2_i_i;label=4;break;
 case 4: 
 var $3;
 var $incdec_ptr_i_i=(($3+4)|0);
 HEAP32[(($__end__i_i)>>2)]=$incdec_ptr_i_i;
 var $dec_i_i=((($__n_addr_0_i_i)-(1))|0);
 var $cmp_i8_i=($dec_i_i|0)==0;
 if($cmp_i8_i){label=5;break;}else{var $__n_addr_0_i_i=$dec_i_i;var $2=$incdec_ptr_i_i;label=2;break;}
 case 5: 
 var $name_=(($this+144)|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($name_,1384,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=110;break; }
 case 6: 
 var $4=HEAP32[(($__begin__i_i2)>>2)];
 var $5=HEAP32[(($__end__i_i)>>2)];
 var $cmp_i_i_i289=($4|0)==($5|0);
 if($cmp_i_i_i289){label=8;break;}else{label=7;break;}
 case 7: 
 var $6=$4;
 var $scevgep=((($5)-(4))|0);
 var $scevgep290=$scevgep;
 var $7=(((-$6))|0);
 var $uglygep=(($scevgep290+$7)|0);
 var $uglygep291=$uglygep;
 var $8=$uglygep291>>>2;
 var $9=$8^-1;
 var $scevgep292=(($5+($9<<2))|0);
 HEAP32[(($__end__i_i)>>2)]=$scevgep292;
 label=8;break;
 case 8: 
 HEAP32[((12348)>>2)]=0;
 HEAP32[((12344)>>2)]=3584;
 var $10=$__p_i_i_i;
 var $11=HEAP32[((13328)>>2)];
 var $cmp_i_i_i4=($11|0)==-1;
 if($cmp_i_i_i4){label=10;break;}else{label=9;break;}
 case 9: 
 var $ref_tmp_i_sroa_0_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i)>>2)]=13328;
 var $ref_tmp_i_sroa_1_4__idx6_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13328,$10,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=111;break; }
 case 10: 
 var $12=HEAP32[((13332)>>2)];
 var $sub_i_i=((($12)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12344,$sub_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=111;break; }
 case 11: 
 HEAP32[((12340)>>2)]=0;
 HEAP32[((12336)>>2)]=3544;
 var $13=$__p_i_i_i6;
 var $14=HEAP32[((13320)>>2)];
 var $cmp_i_i_i7=($14|0)==-1;
 if($cmp_i_i_i7){label=13;break;}else{label=12;break;}
 case 12: 
 var $ref_tmp_i_sroa_0_0__idx_i_i8=(($__p_i_i_i6)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i8)>>2)]=13320;
 var $ref_tmp_i_sroa_1_4__idx6_i_i9=(($__p_i_i_i6+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i9)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i10=(($__p_i_i_i6+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i10)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13320,$13,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=111;break; }
 case 13: 
 var $15=HEAP32[((13324)>>2)];
 var $sub_i_i12=((($15)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12336,$sub_i_i12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=111;break; }
 case 14: 
 HEAP32[((12548)>>2)]=0;
 HEAP32[((12544)>>2)]=3992;
 HEAP32[((12552)>>2)]=0;
 HEAP8[(12556)]=0;
 var $call_i_i_i=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=15;break; }
 case 15: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 16: 
 var $17=HEAP32[(($call_i_i_i)>>2)];
 HEAP32[((12552)>>2)]=$17;
 var $18=$__p_i_i_i16;
 var $19=HEAP32[((13648)>>2)];
 var $cmp_i_i_i17=($19|0)==-1;
 if($cmp_i_i_i17){label=18;break;}else{label=17;break;}
 case 17: 
 var $ref_tmp_i_sroa_0_0__idx_i_i18=(($__p_i_i_i16)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i18)>>2)]=13648;
 var $ref_tmp_i_sroa_1_4__idx6_i_i19=(($__p_i_i_i16+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i19)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i20=(($__p_i_i_i16+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i20)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13648,$18,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=111;break; }
 case 18: 
 var $20=HEAP32[((13652)>>2)];
 var $sub_i_i22=((($20)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12544,$sub_i_i22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=111;break; }
 case 19: 
 HEAP32[((12540)>>2)]=0;
 HEAP32[((12536)>>2)]=3912;
 var $21=$__p_i_i_i26;
 var $22=HEAP32[((13640)>>2)];
 var $cmp_i_i_i27=($22|0)==-1;
 if($cmp_i_i_i27){label=21;break;}else{label=20;break;}
 case 20: 
 var $ref_tmp_i_sroa_0_0__idx_i_i28=(($__p_i_i_i26)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i28)>>2)]=13640;
 var $ref_tmp_i_sroa_1_4__idx6_i_i29=(($__p_i_i_i26+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i29)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i30=(($__p_i_i_i26+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i30)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13640,$21,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=111;break; }
 case 21: 
 var $23=HEAP32[((13644)>>2)];
 var $sub_i_i32=((($23)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12536,$sub_i_i32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=111;break; }
 case 22: 
 HEAP32[((12356)>>2)]=0;
 HEAP32[((12352)>>2)]=3680;
 var $24=$__p_i_i_i36;
 var $25=HEAP32[((13344)>>2)];
 var $cmp_i_i_i37=($25|0)==-1;
 if($cmp_i_i_i37){label=24;break;}else{label=23;break;}
 case 23: 
 var $ref_tmp_i_sroa_0_0__idx_i_i38=(($__p_i_i_i36)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i38)>>2)]=13344;
 var $ref_tmp_i_sroa_1_4__idx6_i_i39=(($__p_i_i_i36+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i39)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i40=(($__p_i_i_i36+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i40)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13344,$24,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=111;break; }
 case 24: 
 var $26=HEAP32[((13348)>>2)];
 var $sub_i_i42=((($26)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12352,$sub_i_i42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=111;break; }
 case 25: 
 HEAP32[((2140)>>2)]=0;
 HEAP32[((2136)>>2)]=3624;
 var $27=HEAP8[(276352)];
 var $guard_uninitialized_i_i_i=(($27<<24)>>24)==0;
 if($guard_uninitialized_i_i_i){label=26;break;}else{label=30;break;}
 case 26: 
 var $28=___cxa_guard_acquire(276352);
 var $tobool_i_i_i=($28|0)==0;
 if($tobool_i_i_i){label=30;break;}else{label=27;break;}
 case 27: 
 var $call_i_i_i46=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 28: 
 HEAP32[((12216)>>2)]=$call_i_i_i46;
 label=30;break;
 case 29: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(2136);
 var $eh_lpad_body$1=$29$1;var $eh_lpad_body$0=$29$0;label=112;break;
 case 30: 
 var $30=HEAP32[((12216)>>2)];
 HEAP32[((2144)>>2)]=$30;
 var $31=$__p_i_i_i47;
 var $32=HEAP32[((13336)>>2)];
 var $cmp_i_i_i48=($32|0)==-1;
 if($cmp_i_i_i48){label=32;break;}else{label=31;break;}
 case 31: 
 var $ref_tmp_i_sroa_0_0__idx_i_i49=(($__p_i_i_i47)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i49)>>2)]=13336;
 var $ref_tmp_i_sroa_1_4__idx6_i_i50=(($__p_i_i_i47+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i50)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i51=(($__p_i_i_i47+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i51)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13336,$31,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=111;break; }
 case 32: 
 var $33=HEAP32[((13340)>>2)];
 var $sub_i_i53=((($33)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2136,$sub_i_i53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=111;break; }
 case 33: 
 HEAP32[((12364)>>2)]=0;
 HEAP32[((12360)>>2)]=3736;
 var $34=$__p_i_i_i57;
 var $35=HEAP32[((13352)>>2)];
 var $cmp_i_i_i58=($35|0)==-1;
 if($cmp_i_i_i58){label=35;break;}else{label=34;break;}
 case 34: 
 var $ref_tmp_i_sroa_0_0__idx_i_i59=(($__p_i_i_i57)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i59)>>2)]=13352;
 var $ref_tmp_i_sroa_1_4__idx6_i_i60=(($__p_i_i_i57+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i60)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i61=(($__p_i_i_i57+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i61)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13352,$34,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=111;break; }
 case 35: 
 var $36=HEAP32[((13356)>>2)];
 var $sub_i_i63=((($36)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12360,$sub_i_i63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=111;break; }
 case 36: 
 HEAP32[((12372)>>2)]=0;
 HEAP32[((12368)>>2)]=3792;
 var $37=$__p_i_i_i67;
 var $38=HEAP32[((13360)>>2)];
 var $cmp_i_i_i68=($38|0)==-1;
 if($cmp_i_i_i68){label=38;break;}else{label=37;break;}
 case 37: 
 var $ref_tmp_i_sroa_0_0__idx_i_i69=(($__p_i_i_i67)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i69)>>2)]=13360;
 var $ref_tmp_i_sroa_1_4__idx6_i_i70=(($__p_i_i_i67+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i70)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i71=(($__p_i_i_i67+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i71)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13360,$37,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=111;break; }
 case 38: 
 var $39=HEAP32[((13364)>>2)];
 var $sub_i_i73=((($39)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12368,$sub_i_i73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=111;break; }
 case 39: 
 HEAP32[((12268)>>2)]=0;
 HEAP32[((12264)>>2)]=3088;
 HEAP8[(12272)]=46;
 HEAP8[(12273)]=44;
 HEAP32[((12276)>>2)]=0; HEAP32[((12280)>>2)]=0; HEAP32[((12284)>>2)]=0;
 var $40=$__p_i_i_i77;
 var $41=HEAP32[((13264)>>2)];
 var $cmp_i_i_i78=($41|0)==-1;
 if($cmp_i_i_i78){label=41;break;}else{label=40;break;}
 case 40: 
 var $ref_tmp_i_sroa_0_0__idx_i_i79=(($__p_i_i_i77)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i79)>>2)]=13264;
 var $ref_tmp_i_sroa_1_4__idx6_i_i80=(($__p_i_i_i77+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i80)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i81=(($__p_i_i_i77+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i81)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13264,$40,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=111;break; }
 case 41: 
 var $42=HEAP32[((13268)>>2)];
 var $sub_i_i83=((($42)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12264,$sub_i_i83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=111;break; }
 case 42: 
 HEAP32[((2108)>>2)]=0;
 HEAP32[((2104)>>2)]=3040;
 HEAP32[((2112)>>2)]=46;
 HEAP32[((2116)>>2)]=44;
 HEAP32[((2120)>>2)]=0; HEAP32[((2124)>>2)]=0; HEAP32[((2128)>>2)]=0;
 var $43=$__p_i_i_i87;
 var $44=HEAP32[((13256)>>2)];
 var $cmp_i_i_i88=($44|0)==-1;
 if($cmp_i_i_i88){label=44;break;}else{label=43;break;}
 case 43: 
 var $ref_tmp_i_sroa_0_0__idx_i_i89=(($__p_i_i_i87)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i89)>>2)]=13256;
 var $ref_tmp_i_sroa_1_4__idx6_i_i90=(($__p_i_i_i87+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i90)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i91=(($__p_i_i_i87+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i91)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13256,$43,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=111;break; }
 case 44: 
 var $45=HEAP32[((13260)>>2)];
 var $sub_i_i93=((($45)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2104,$sub_i_i93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=111;break; }
 case 45: 
 HEAP32[((12332)>>2)]=0;
 HEAP32[((12328)>>2)]=3472;
 var $46=$__p_i_i_i97;
 var $47=HEAP32[((13312)>>2)];
 var $cmp_i_i_i98=($47|0)==-1;
 if($cmp_i_i_i98){label=47;break;}else{label=46;break;}
 case 46: 
 var $ref_tmp_i_sroa_0_0__idx_i_i99=(($__p_i_i_i97)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i99)>>2)]=13312;
 var $ref_tmp_i_sroa_1_4__idx6_i_i100=(($__p_i_i_i97+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i100)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i101=(($__p_i_i_i97+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i101)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13312,$46,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=111;break; }
 case 47: 
 var $48=HEAP32[((13316)>>2)];
 var $sub_i_i103=((($48)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12328,$sub_i_i103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=111;break; }
 case 48: 
 HEAP32[((12324)>>2)]=0;
 HEAP32[((12320)>>2)]=3400;
 var $49=$__p_i_i_i107;
 var $50=HEAP32[((13304)>>2)];
 var $cmp_i_i_i108=($50|0)==-1;
 if($cmp_i_i_i108){label=50;break;}else{label=49;break;}
 case 49: 
 var $ref_tmp_i_sroa_0_0__idx_i_i109=(($__p_i_i_i107)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i109)>>2)]=13304;
 var $ref_tmp_i_sroa_1_4__idx6_i_i110=(($__p_i_i_i107+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i110)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i111=(($__p_i_i_i107+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i111)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13304,$49,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=111;break; }
 case 50: 
 var $51=HEAP32[((13308)>>2)];
 var $sub_i_i113=((($51)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12320,$sub_i_i113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=111;break; }
 case 51: 
 HEAP32[((12316)>>2)]=0;
 HEAP32[((12312)>>2)]=3336;
 var $52=$__p_i_i_i117;
 var $53=HEAP32[((13296)>>2)];
 var $cmp_i_i_i118=($53|0)==-1;
 if($cmp_i_i_i118){label=53;break;}else{label=52;break;}
 case 52: 
 var $ref_tmp_i_sroa_0_0__idx_i_i119=(($__p_i_i_i117)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i119)>>2)]=13296;
 var $ref_tmp_i_sroa_1_4__idx6_i_i120=(($__p_i_i_i117+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i120)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i121=(($__p_i_i_i117+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i121)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13296,$52,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=111;break; }
 case 53: 
 var $54=HEAP32[((13300)>>2)];
 var $sub_i_i123=((($54)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12312,$sub_i_i123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=111;break; }
 case 54: 
 HEAP32[((12308)>>2)]=0;
 HEAP32[((12304)>>2)]=3272;
 var $55=$__p_i_i_i127;
 var $56=HEAP32[((13288)>>2)];
 var $cmp_i_i_i128=($56|0)==-1;
 if($cmp_i_i_i128){label=56;break;}else{label=55;break;}
 case 55: 
 var $ref_tmp_i_sroa_0_0__idx_i_i129=(($__p_i_i_i127)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i129)>>2)]=13288;
 var $ref_tmp_i_sroa_1_4__idx6_i_i130=(($__p_i_i_i127+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i130)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i131=(($__p_i_i_i127+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i131)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13288,$55,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=111;break; }
 case 56: 
 var $57=HEAP32[((13292)>>2)];
 var $sub_i_i133=((($57)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12304,$sub_i_i133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=111;break; }
 case 57: 
 HEAP32[((12588)>>2)]=0;
 HEAP32[((12584)>>2)]=4920;
 var $58=$__p_i_i_i137;
 var $59=HEAP32[((14128)>>2)];
 var $cmp_i_i_i138=($59|0)==-1;
 if($cmp_i_i_i138){label=59;break;}else{label=58;break;}
 case 58: 
 var $ref_tmp_i_sroa_0_0__idx_i_i139=(($__p_i_i_i137)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i139)>>2)]=14128;
 var $ref_tmp_i_sroa_1_4__idx6_i_i140=(($__p_i_i_i137+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i140)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i141=(($__p_i_i_i137+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i141)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14128,$58,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=111;break; }
 case 59: 
 var $60=HEAP32[((14132)>>2)];
 var $sub_i_i143=((($60)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12584,$sub_i_i143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=111;break; }
 case 60: 
 HEAP32[((12580)>>2)]=0;
 HEAP32[((12576)>>2)]=4856;
 var $61=$__p_i_i_i147;
 var $62=HEAP32[((14120)>>2)];
 var $cmp_i_i_i148=($62|0)==-1;
 if($cmp_i_i_i148){label=62;break;}else{label=61;break;}
 case 61: 
 var $ref_tmp_i_sroa_0_0__idx_i_i149=(($__p_i_i_i147)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i149)>>2)]=14120;
 var $ref_tmp_i_sroa_1_4__idx6_i_i150=(($__p_i_i_i147+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i150)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i151=(($__p_i_i_i147+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i151)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14120,$61,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=111;break; }
 case 62: 
 var $63=HEAP32[((14124)>>2)];
 var $sub_i_i153=((($63)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12576,$sub_i_i153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=111;break; }
 case 63: 
 HEAP32[((12572)>>2)]=0;
 HEAP32[((12568)>>2)]=4792;
 var $64=$__p_i_i_i157;
 var $65=HEAP32[((14112)>>2)];
 var $cmp_i_i_i158=($65|0)==-1;
 if($cmp_i_i_i158){label=65;break;}else{label=64;break;}
 case 64: 
 var $ref_tmp_i_sroa_0_0__idx_i_i159=(($__p_i_i_i157)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i159)>>2)]=14112;
 var $ref_tmp_i_sroa_1_4__idx6_i_i160=(($__p_i_i_i157+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i160)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i161=(($__p_i_i_i157+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i161)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14112,$64,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=111;break; }
 case 65: 
 var $66=HEAP32[((14116)>>2)];
 var $sub_i_i163=((($66)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12568,$sub_i_i163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=111;break; }
 case 66: 
 HEAP32[((12564)>>2)]=0;
 HEAP32[((12560)>>2)]=4728;
 var $67=$__p_i_i_i167;
 var $68=HEAP32[((14104)>>2)];
 var $cmp_i_i_i168=($68|0)==-1;
 if($cmp_i_i_i168){label=68;break;}else{label=67;break;}
 case 67: 
 var $ref_tmp_i_sroa_0_0__idx_i_i169=(($__p_i_i_i167)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i169)>>2)]=14104;
 var $ref_tmp_i_sroa_1_4__idx6_i_i170=(($__p_i_i_i167+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i170)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i171=(($__p_i_i_i167+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i171)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(14104,$67,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=111;break; }
 case 68: 
 var $69=HEAP32[((14108)>>2)];
 var $sub_i_i173=((($69)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12560,$sub_i_i173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=111;break; }
 case 69: 
 HEAP32[((12260)>>2)]=0;
 HEAP32[((12256)>>2)]=2744;
 var $70=$__p_i_i_i177;
 var $71=HEAP32[((13216)>>2)];
 var $cmp_i_i_i178=($71|0)==-1;
 if($cmp_i_i_i178){label=71;break;}else{label=70;break;}
 case 70: 
 var $ref_tmp_i_sroa_0_0__idx_i_i179=(($__p_i_i_i177)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i179)>>2)]=13216;
 var $ref_tmp_i_sroa_1_4__idx6_i_i180=(($__p_i_i_i177+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i180)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i181=(($__p_i_i_i177+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i181)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13216,$70,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=111;break; }
 case 71: 
 var $72=HEAP32[((13220)>>2)];
 var $sub_i_i183=((($72)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12256,$sub_i_i183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=111;break; }
 case 72: 
 HEAP32[((12252)>>2)]=0;
 HEAP32[((12248)>>2)]=2704;
 var $73=$__p_i_i_i187;
 var $74=HEAP32[((13208)>>2)];
 var $cmp_i_i_i188=($74|0)==-1;
 if($cmp_i_i_i188){label=74;break;}else{label=73;break;}
 case 73: 
 var $ref_tmp_i_sroa_0_0__idx_i_i189=(($__p_i_i_i187)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i189)>>2)]=13208;
 var $ref_tmp_i_sroa_1_4__idx6_i_i190=(($__p_i_i_i187+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i190)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i191=(($__p_i_i_i187+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i191)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13208,$73,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=111;break; }
 case 74: 
 var $75=HEAP32[((13212)>>2)];
 var $sub_i_i193=((($75)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12248,$sub_i_i193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=111;break; }
 case 75: 
 HEAP32[((12244)>>2)]=0;
 HEAP32[((12240)>>2)]=2664;
 var $76=$__p_i_i_i197;
 var $77=HEAP32[((13200)>>2)];
 var $cmp_i_i_i198=($77|0)==-1;
 if($cmp_i_i_i198){label=77;break;}else{label=76;break;}
 case 76: 
 var $ref_tmp_i_sroa_0_0__idx_i_i199=(($__p_i_i_i197)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i199)>>2)]=13200;
 var $ref_tmp_i_sroa_1_4__idx6_i_i200=(($__p_i_i_i197+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i200)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i201=(($__p_i_i_i197+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i201)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13200,$76,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=111;break; }
 case 77: 
 var $78=HEAP32[((13204)>>2)];
 var $sub_i_i203=((($78)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12240,$sub_i_i203) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=111;break; }
 case 78: 
 HEAP32[((12236)>>2)]=0;
 HEAP32[((12232)>>2)]=2624;
 var $79=$__p_i_i_i207;
 var $80=HEAP32[((13192)>>2)];
 var $cmp_i_i_i208=($80|0)==-1;
 if($cmp_i_i_i208){label=80;break;}else{label=79;break;}
 case 79: 
 var $ref_tmp_i_sroa_0_0__idx_i_i209=(($__p_i_i_i207)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i209)>>2)]=13192;
 var $ref_tmp_i_sroa_1_4__idx6_i_i210=(($__p_i_i_i207+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i210)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i211=(($__p_i_i_i207+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i211)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13192,$79,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=111;break; }
 case 80: 
 var $81=HEAP32[((13196)>>2)];
 var $sub_i_i213=((($81)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12232,$sub_i_i213) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=111;break; }
 case 81: 
 HEAP32[((2092)>>2)]=0;
 HEAP32[((2088)>>2)]=2944;
 HEAP32[((2096)>>2)]=2992;
 var $82=$__p_i_i_i217;
 var $83=HEAP32[((13248)>>2)];
 var $cmp_i_i_i218=($83|0)==-1;
 if($cmp_i_i_i218){label=83;break;}else{label=82;break;}
 case 82: 
 var $ref_tmp_i_sroa_0_0__idx_i_i219=(($__p_i_i_i217)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i219)>>2)]=13248;
 var $ref_tmp_i_sroa_1_4__idx6_i_i220=(($__p_i_i_i217+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i220)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i221=(($__p_i_i_i217+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i221)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13248,$82,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=111;break; }
 case 83: 
 var $84=HEAP32[((13252)>>2)];
 var $sub_i_i223=((($84)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2088,$sub_i_i223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=111;break; }
 case 84: 
 HEAP32[((2076)>>2)]=0;
 HEAP32[((2072)>>2)]=2848;
 HEAP32[((2080)>>2)]=2896;
 var $85=$__p_i_i_i227;
 var $86=HEAP32[((13240)>>2)];
 var $cmp_i_i_i228=($86|0)==-1;
 if($cmp_i_i_i228){label=86;break;}else{label=85;break;}
 case 85: 
 var $ref_tmp_i_sroa_0_0__idx_i_i229=(($__p_i_i_i227)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i229)>>2)]=13240;
 var $ref_tmp_i_sroa_1_4__idx6_i_i230=(($__p_i_i_i227+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i230)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i231=(($__p_i_i_i227+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i231)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13240,$85,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=111;break; }
 case 86: 
 var $87=HEAP32[((13244)>>2)];
 var $sub_i_i233=((($87)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2072,$sub_i_i233) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=111;break; }
 case 87: 
 HEAP32[((2060)>>2)]=0;
 HEAP32[((2056)>>2)]=3848;
 var $88=HEAP8[(276352)];
 var $guard_uninitialized_i_i=(($88<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=88;break;}else{label=92;break;}
 case 88: 
 var $89=___cxa_guard_acquire(276352);
 var $tobool_i_i=($89|0)==0;
 if($tobool_i_i){label=92;break;}else{label=89;break;}
 case 89: 
 var $call_i_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 90: 
 HEAP32[((12216)>>2)]=$call_i_i;
 label=92;break;
 case 91: 
 var $90$0 = ___cxa_find_matching_catch(-1, -1); var $90$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(2056);
 var $eh_lpad_body$1=$90$1;var $eh_lpad_body$0=$90$0;label=112;break;
 case 92: 
 var $91=HEAP32[((12216)>>2)];
 HEAP32[((2064)>>2)]=$91;
 HEAP32[((2056)>>2)]=2816;
 var $92=$__p_i_i_i239;
 var $93=HEAP32[((13232)>>2)];
 var $cmp_i_i_i240=($93|0)==-1;
 if($cmp_i_i_i240){label=94;break;}else{label=93;break;}
 case 93: 
 var $ref_tmp_i_sroa_0_0__idx_i_i241=(($__p_i_i_i239)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i241)>>2)]=13232;
 var $ref_tmp_i_sroa_1_4__idx6_i_i242=(($__p_i_i_i239+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i242)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i243=(($__p_i_i_i239+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i243)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13232,$92,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=111;break; }
 case 94: 
 var $94=HEAP32[((13236)>>2)];
 var $sub_i_i245=((($94)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2056,$sub_i_i245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=111;break; }
 case 95: 
 HEAP32[((2044)>>2)]=0;
 HEAP32[((2040)>>2)]=3848;
 var $95=HEAP8[(276352)];
 var $guard_uninitialized_i_i249=(($95<<24)>>24)==0;
 if($guard_uninitialized_i_i249){label=96;break;}else{label=100;break;}
 case 96: 
 var $96=___cxa_guard_acquire(276352);
 var $tobool_i_i250=($96|0)==0;
 if($tobool_i_i250){label=100;break;}else{label=97;break;}
 case 97: 
 var $call_i_i252=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=98;break; } else { label=99;break; }
 case 98: 
 HEAP32[((12216)>>2)]=$call_i_i252;
 label=100;break;
 case 99: 
 var $97$0 = ___cxa_find_matching_catch(-1, -1); var $97$1 = tempRet0;
 __ZNSt3__114__shared_countD2Ev(2040);
 var $eh_lpad_body$1=$97$1;var $eh_lpad_body$0=$97$0;label=112;break;
 case 100: 
 var $98=HEAP32[((12216)>>2)];
 HEAP32[((2048)>>2)]=$98;
 HEAP32[((2040)>>2)]=2784;
 var $99=$__p_i_i_i258;
 var $100=HEAP32[((13224)>>2)];
 var $cmp_i_i_i259=($100|0)==-1;
 if($cmp_i_i_i259){label=102;break;}else{label=101;break;}
 case 101: 
 var $ref_tmp_i_sroa_0_0__idx_i_i260=(($__p_i_i_i258)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i260)>>2)]=13224;
 var $ref_tmp_i_sroa_1_4__idx6_i_i261=(($__p_i_i_i258+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i261)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i262=(($__p_i_i_i258+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i262)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13224,$99,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=111;break; }
 case 102: 
 var $101=HEAP32[((13228)>>2)];
 var $sub_i_i264=((($101)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,2040,$sub_i_i264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=111;break; }
 case 103: 
 HEAP32[((12300)>>2)]=0;
 HEAP32[((12296)>>2)]=3176;
 var $102=$__p_i_i_i268;
 var $103=HEAP32[((13280)>>2)];
 var $cmp_i_i_i269=($103|0)==-1;
 if($cmp_i_i_i269){label=105;break;}else{label=104;break;}
 case 104: 
 var $ref_tmp_i_sroa_0_0__idx_i_i270=(($__p_i_i_i268)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i270)>>2)]=13280;
 var $ref_tmp_i_sroa_1_4__idx6_i_i271=(($__p_i_i_i268+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i271)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i272=(($__p_i_i_i268+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i272)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13280,$102,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=111;break; }
 case 105: 
 var $104=HEAP32[((13284)>>2)];
 var $sub_i_i274=((($104)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12296,$sub_i_i274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=111;break; }
 case 106: 
 HEAP32[((12292)>>2)]=0;
 HEAP32[((12288)>>2)]=3136;
 var $105=$__p_i_i_i278;
 var $106=HEAP32[((13272)>>2)];
 var $cmp_i_i_i279=($106|0)==-1;
 if($cmp_i_i_i279){label=108;break;}else{label=107;break;}
 case 107: 
 var $ref_tmp_i_sroa_0_0__idx_i_i280=(($__p_i_i_i278)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i_i280)>>2)]=13272;
 var $ref_tmp_i_sroa_1_4__idx6_i_i281=(($__p_i_i_i278+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i_i281)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i_i282=(($__p_i_i_i278+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i_i282)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(13272,$105,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=111;break; }
 case 108: 
 var $107=HEAP32[((13276)>>2)];
 var $sub_i_i284=((($107)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,12288,$sub_i_i284) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=111;break; }
 case 109: 
 STACKTOP=sp;return;
 case 110: 
 var $108$0 = ___cxa_find_matching_catch(-1, -1); var $108$1 = tempRet0;
 var $109=$108$0;
 var $110=$108$1;
 var $ehselector_slot_0=$110;var $exn_slot_0=$109;label=113;break;
 case 111: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $eh_lpad_body$1=$111$1;var $eh_lpad_body$0=$111$0;label=112;break;
 case 112: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $112=$eh_lpad_body$0;
 var $113=$eh_lpad_body$1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($name_);
 var $ehselector_slot_0=$113;var $exn_slot_0=$112;label=113;break;
 case 113: 
 var $exn_slot_0;
 var $ehselector_slot_0;
 var $114=HEAP32[(($__begin__i_i2)>>2)];
 var $115=$114;
 var $cmp_i_i_i3=($114|0)==0;
 if($cmp_i_i_i3){label=119;break;}else{label=114;break;}
 case 114: 
 var $116=HEAP32[(($__end__i_i)>>2)];
 var $cmp_i_i2_i_i_i=($114|0)==($116|0);
 if($cmp_i_i2_i_i_i){label=116;break;}else{label=115;break;}
 case 115: 
 var $scevgep_i_i_i=((($116)-(4))|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $117=(((-$115))|0);
 var $uglygep_i_i_i=(($scevgep3_i_i_i+$117)|0);
 var $uglygep4_i_i_i=$uglygep_i_i_i;
 var $118=$uglygep4_i_i_i>>>2;
 var $119=$118^-1;
 var $scevgep5_i_i_i=(($116+($119<<2))|0);
 HEAP32[(($__end__i_i)>>2)]=$scevgep5_i_i_i;
 label=116;break;
 case 116: 
 var $__second__i_i_i_i_i_i=(($this+24)|0);
 var $120=$__second__i_i_i_i_i_i;
 var $cmp_i_i6_i_i_i=($114|0)==($120|0);
 if($cmp_i_i6_i_i_i){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($__allocated__i_i_i_i_i_i_i)]=0;
 label=119;break;
 case 118: 
 var $121=$114;
 __ZdlPv($121);
 label=119;break;
 case 119: 
 var $122=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($122);
 var $lpad_val$0=$exn_slot_0;
 var $lpad_val$1=0;
 var $lpad_val90$0=$lpad_val$0;
 var $lpad_val90$1=$ehselector_slot_0;
 ___resumeException($lpad_val90$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($f)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 var $facets_=(($this+8)|0);
 var $__end__i=(($this+12)|0);
 var $1=HEAP32[(($__end__i)>>2)];
 var $__begin__i=(($facets_)|0);
 var $2=HEAP32[(($__begin__i)>>2)];
 var $sub_ptr_lhs_cast_i=$1;
 var $sub_ptr_rhs_cast_i=$2;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i=$sub_ptr_sub_i>>2;
 var $cmp=($sub_ptr_div_i>>>0)>($id>>>0);
 if($cmp){var $7=$2;label=11;break;}else{label=2;break;}
 case 2: 
 var $add=((($id)+(1))|0);
 var $cmp_i=($sub_ptr_div_i>>>0)<($add>>>0);
 if($cmp_i){label=3;break;}else{label=5;break;}
 case 3: 
 var $sub_i=((($add)-($sub_ptr_div_i))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($facets_,$sub_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=8;break; }
 case 4: 
 var $_pre14=HEAP32[(($__begin__i)>>2)];
 var $7=$_pre14;label=11;break;
 case 5: 
 var $cmp2_i=($sub_ptr_div_i>>>0)>($add>>>0);
 if($cmp2_i){label=6;break;}else{var $7=$2;label=11;break;}
 case 6: 
 var $add_ptr_i=(($2+($add<<2))|0);
 var $cmp_i_i6_i=($add_ptr_i|0)==($1|0);
 if($cmp_i_i6_i){var $7=$2;label=11;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i=((($1)-(4))|0);
 var $scevgep7_i=$scevgep_i;
 var $scevgep89_i=$add_ptr_i;
 var $3=(((-$scevgep89_i))|0);
 var $uglygep_i=(($scevgep7_i+$3)|0);
 var $uglygep10_i=$uglygep_i;
 var $4=$uglygep10_i>>>2;
 var $5=$4^-1;
 var $scevgep11_i=(($1+($5<<2))|0);
 HEAP32[(($__end__i)>>2)]=$scevgep11_i;
 var $7=$2;label=11;break;
 case 8: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 var $tobool_i_i8=($f|0)==0;
 if($tobool_i_i8){label=10;break;}else{label=9;break;}
 case 9: 
 var $call_i_i9=__ZNSt3__114__shared_count16__release_sharedEv($0);
 label=10;break;
 case 10: 
 ___resumeException($6$0)
 case 11: 
 var $7;
 var $arrayidx_i=(($7+($id<<2))|0);
 var $8=HEAP32[(($arrayidx_i)>>2)];
 var $tobool=($8|0)==0;
 if($tobool){var $10=$7;label=13;break;}else{label=12;break;}
 case 12: 
 var $9=(($8)|0);
 var $call10=__ZNSt3__114__shared_count16__release_sharedEv($9);
 var $_pre=HEAP32[(($__begin__i)>>2)];
 var $10=$_pre;label=13;break;
 case 13: 
 var $10;
 var $arrayidx_i24=(($10+($id<<2))|0);
 HEAP32[(($arrayidx_i24)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;
 __ZNSt3__16locale5__impD2Ev($this);
 var $0=$this;
 __ZdlPv($0);
 return;
}
function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3880;
 var $__end__i=(($this+12)|0);
 var $1=HEAP32[(($__end__i)>>2)];
 var $__begin__i=(($this+8)|0);
 var $2=HEAP32[(($__begin__i)>>2)];
 var $cmp8=($1|0)==($2|0);
 if($cmp8){label=5;break;}else{var $i_09=0;var $4=$2;var $3=$1;label=2;break;}
 case 2: 
 var $3;
 var $4;
 var $i_09;
 var $arrayidx_i=(($4+($i_09<<2))|0);
 var $5=HEAP32[(($arrayidx_i)>>2)];
 var $tobool=($5|0)==0;
 if($tobool){var $8=$3;var $7=$4;label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($5)|0);
 var $call7=__ZNSt3__114__shared_count16__release_sharedEv($6);
 var $_pre=HEAP32[(($__end__i)>>2)];
 var $_pre10=HEAP32[(($__begin__i)>>2)];
 var $8=$_pre;var $7=$_pre10;label=4;break;
 case 4: 
 var $7;
 var $8;
 var $inc=((($i_09)+(1))|0);
 var $sub_ptr_lhs_cast_i=$8;
 var $sub_ptr_rhs_cast_i=$7;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i=$sub_ptr_sub_i>>2;
 var $cmp=($inc>>>0)<($sub_ptr_div_i>>>0);
 if($cmp){var $i_09=$inc;var $4=$7;var $3=$8;label=2;break;}else{label=5;break;}
 case 5: 
 var $name_=(($this+144)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($name_);
 var $9=HEAP32[(($__begin__i)>>2)];
 var $10=$9;
 var $cmp_i_i_i=($9|0)==0;
 if($cmp_i_i_i){label=11;break;}else{label=6;break;}
 case 6: 
 var $11=HEAP32[(($__end__i)>>2)];
 var $cmp_i_i2_i_i_i=($9|0)==($11|0);
 if($cmp_i_i2_i_i_i){label=8;break;}else{label=7;break;}
 case 7: 
 var $scevgep_i_i_i=((($11)-(4))|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $12=(((-$10))|0);
 var $uglygep_i_i_i=(($scevgep3_i_i_i+$12)|0);
 var $uglygep4_i_i_i=$uglygep_i_i_i;
 var $13=$uglygep4_i_i_i>>>2;
 var $14=$13^-1;
 var $scevgep5_i_i_i=(($11+($14<<2))|0);
 HEAP32[(($__end__i)>>2)]=$scevgep5_i_i_i;
 label=8;break;
 case 8: 
 var $__second__i_i_i_i_i_i=(($this+24)|0);
 var $15=$__second__i_i_i_i_i_i;
 var $cmp_i_i6_i_i_i=($9|0)==($15|0);
 if($cmp_i_i6_i_i_i){label=9;break;}else{label=10;break;}
 case 9: 
 var $__allocated__i_i_i_i_i=(($this+136)|0);
 HEAP8[($__allocated__i_i_i_i_i)]=0;
 label=11;break;
 case 10: 
 var $16=$9;
 __ZdlPv($16);
 label=11;break;
 case 11: 
 var $17=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($17);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale8__globalEv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276336)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=8;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276336);
 var $tobool=($1|0)==0;
 if($tobool){label=8;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276344)];
 var $guard_uninitialized_i_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i_i){label=4;break;}else{label=7;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276344);
 var $tobool_i_i=($3|0)==0;
 if($tobool_i_i){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(12376,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((12200)>>2)]=12376;
 HEAP32[((12192)>>2)]=12200;
 label=7;break;
 case 7: 
 var $4=HEAP32[((12192)>>2)];
 var $__locale_2_i_i=(($4)|0);
 var $5=HEAP32[(($__locale_2_i_i)>>2)];
 HEAP32[((12208)>>2)]=$5;
 var $6=(($5)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($6);
 HEAP32[((12184)>>2)]=12208;
 label=8;break;
 case 8: 
 var $7=HEAP32[((12184)>>2)];
 return $7;
 case 9: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1); var $8$1 = tempRet0;
 ___resumeException($8$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=(function() { try { __THREW__ = 0; return __ZNSt3__16locale8__globalEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $__locale_=(($this)|0);
 var $__locale_2=(($call)|0);
 var $0=HEAP32[(($__locale_2)>>2)];
 HEAP32[(($__locale_)>>2)]=$0;
 var $1=(($0)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
 case 3: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1,0); var $2$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l){
 var label=0;
 var $__locale_=(($this)|0);
 var $__locale_2=(($l)|0);
 var $0=HEAP32[(($__locale_2)>>2)];
 HEAP32[(($__locale_)>>2)]=$0;
 var $1=(($0)|0);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
}
function __ZNSt3__16localeD2Ev($this){
 var label=0;
 var $__locale_=(($this)|0);
 var $0=HEAP32[(($__locale_)>>2)];
 var $1=(($0)|0);
 var $call=__ZNSt3__114__shared_count16__release_sharedEv($1);
 return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $__locale_=(($this)|0);
 var $0=HEAP32[(($__locale_)>>2)];
 var $1=$__p_i_i;
 var $__state__i_i=(($x)|0);
 var $2=HEAP32[(($__state__i_i)>>2)];
 var $cmp_i_i=($2|0)==-1;
 if($cmp_i_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $ref_tmp_i_sroa_0_0__idx_i=(($__p_i_i)|0);
 HEAP32[(($ref_tmp_i_sroa_0_0__idx_i)>>2)]=$x;
 var $ref_tmp_i_sroa_1_4__idx6_i=(($__p_i_i+4)|0);
 HEAP32[(($ref_tmp_i_sroa_1_4__idx6_i)>>2)]=(28);
 var $ref_tmp_i_sroa_2_8__idx7_i=(($__p_i_i+8)|0);
 HEAP32[(($ref_tmp_i_sroa_2_8__idx7_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($__state__i_i,$1,272);
 label=3;break;
 case 3: 
 var $__id__i=(($x+4)|0);
 var $3=HEAP32[(($__id__i)>>2)];
 var $sub_i=((($3)-(1))|0);
 var $__end__i_i_i=(($0+12)|0);
 var $4=HEAP32[(($__end__i_i_i)>>2)];
 var $__begin__i_i_i=(($0+8)|0);
 var $5=HEAP32[(($__begin__i_i_i)>>2)];
 var $sub_ptr_lhs_cast_i_i_i=$4;
 var $sub_ptr_rhs_cast_i_i_i=$5;
 var $sub_ptr_sub_i_i_i=((($sub_ptr_lhs_cast_i_i_i)-($sub_ptr_rhs_cast_i_i_i))|0);
 var $sub_ptr_div_i_i_i=$sub_ptr_sub_i_i_i>>2;
 var $cmp_i_i1=($sub_ptr_div_i_i_i>>>0)>($sub_i>>>0);
 if($cmp_i_i1){label=4;break;}else{label=5;break;}
 case 4: 
 var $arrayidx_i_i_i=(($5+($sub_i<<2))|0);
 var $6=HEAP32[(($arrayidx_i_i_i)>>2)];
 var $tobool_i_i=($6|0)==0;
 if($tobool_i_i){label=5;break;}else{label=6;break;}
 case 5: 
 var $exception_i=___cxa_allocate_exception(4);
 var $7=$exception_i;
 __ZNSt8bad_castC2Ev($7);
 ___cxa_throw($exception_i,8536,(376));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $6;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isnull=($this|0)==0;
 if($isnull){label=3;break;}else{label=2;break;}
 case 2: 
 var $0=$this;
 var $vtable=HEAP32[(($0)>>2)];
 var $vfn=(($vtable+4)|0);
 var $1=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$1]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this){
 var label=0;
 var $0=(tempValue=HEAP32[((13368)>>2)],HEAP32[((13368)>>2)]=tempValue+1,tempValue);
 var $1=((($0)+(1))|0);
 var $__id_=(($this+4)|0);
 HEAP32[(($__id_)>>2)]=$1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $cond=0;label=5;break;}
 case 2: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $1=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($1+($c<<1))|0);
 var $2=HEAP16[(($arrayidx)>>1)];
 var $and2=$2&$m;
 var $cmp=(($and2<<16)>>16)!=0;
 var $cond=$cmp;label=5;break;
 case 5: 
 var $cond;
 return $cond;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($low|0)==($high|0);
 if($cmp6){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_07=$low;var $vec_addr_08=$vec;label=2;break;}
 case 2: 
 var $vec_addr_08;
 var $low_addr_07;
 var $0=HEAP32[(($low_addr_07)>>2)];
 var $isascii=($0>>>0)<128;
 if($isascii){label=3;break;}else{var $cond_off0=0;label=6;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($0<<1))|0);
 var $3=HEAP16[(($arrayidx)>>1)];
 var $cond_off0=$3;label=6;break;
 case 6: 
 var $cond_off0;
 HEAP16[(($vec_addr_08)>>1)]=$cond_off0;
 var $incdec_ptr=(($low_addr_07+4)|0);
 var $incdec_ptr4=(($vec_addr_08+2)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_07=$incdec_ptr;var $vec_addr_08=$incdec_ptr4;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp7=($low|0)==($high|0);
 if($cmp7){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_08=$low;label=2;break;}
 case 2: 
 var $low_addr_08;
 var $0=HEAP32[(($low_addr_08)>>2)];
 var $isascii=($0>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($0<<1))|0);
 var $3=HEAP16[(($arrayidx)>>1)];
 var $and5=$3&$m;
 var $tobool4=(($and5<<16)>>16)==0;
 if($tobool4){label=6;break;}else{var $low_addr_0_lcssa=$low_addr_08;label=7;break;}
 case 6: 
 var $incdec_ptr=(($low_addr_08+4)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_08=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $low_addr_0=$low;label=2;break;
 case 2: 
 var $low_addr_0;
 var $cmp=($low_addr_0|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{label=3;break;}
 case 3: 
 var $0=HEAP32[(($low_addr_0)>>2)];
 var $isascii=($0>>>0)<128;
 if($isascii){label=4;break;}else{var $low_addr_0_lcssa=$low_addr_0;label=7;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($0<<1))|0);
 var $3=HEAP16[(($arrayidx)>>1)];
 var $and5=$3&$m;
 var $tobool4=(($and5<<16)>>16)==0;
 var $incdec_ptr=(($low_addr_0+4)|0);
 if($tobool4){var $low_addr_0_lcssa=$low_addr_0;label=7;break;}else{var $low_addr_0=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $cond=$c;label=5;break;}
 case 2: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $1=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($1+($c<<2))|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $cond=$2;label=5;break;
 case 5: 
 var $cond;
 return $cond;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($low|0)==($high|0);
 if($cmp6){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_07=$low;label=2;break;}
 case 2: 
 var $low_addr_07;
 var $0=HEAP32[(($low_addr_07)>>2)];
 var $isascii=($0>>>0)<128;
 if($isascii){label=3;break;}else{var $cond=$0;label=6;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($0<<2))|0);
 var $3=HEAP32[(($arrayidx)>>2)];
 var $cond=$3;label=6;break;
 case 6: 
 var $cond;
 HEAP32[(($low_addr_07)>>2)]=$cond;
 var $incdec_ptr=(($low_addr_07+4)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_07=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $cond=$c;label=5;break;}
 case 2: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $1=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($1+($c<<2))|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $cond=$2;label=5;break;
 case 5: 
 var $cond;
 return $cond;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($low|0)==($high|0);
 if($cmp6){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_07=$low;label=2;break;}
 case 2: 
 var $low_addr_07;
 var $0=HEAP32[(($low_addr_07)>>2)];
 var $isascii=($0>>>0)<128;
 if($isascii){label=3;break;}else{var $cond=$0;label=6;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($0<<2))|0);
 var $3=HEAP32[(($arrayidx)>>2)];
 var $cond=$3;label=6;break;
 case 6: 
 var $cond;
 HEAP32[(($low_addr_07)>>2)]=$cond;
 var $incdec_ptr=(($low_addr_07+4)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_07=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;
 var $conv=(($c<<24)>>24);
 return $conv;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp4=($low|0)==($high|0);
 if($cmp4){var $low_addr_0_lcssa=$low;label=3;break;}else{var $low_addr_05=$low;var $dest_addr_06=$dest;label=2;break;}
 case 2: 
 var $dest_addr_06;
 var $low_addr_05;
 var $0=HEAP8[($low_addr_05)];
 var $conv=(($0<<24)>>24);
 HEAP32[(($dest_addr_06)>>2)]=$conv;
 var $incdec_ptr=(($low_addr_05+1)|0);
 var $incdec_ptr2=(($dest_addr_06+4)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=3;break;}else{var $low_addr_05=$incdec_ptr;var $dest_addr_06=$incdec_ptr2;label=2;break;}
 case 3: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;
 var $isascii=($c>>>0)<128;
 var $conv=(($c)&255);
 var $retval_0=($isascii?$conv:$dfault);
 return $retval_0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp6=($low|0)==($high|0);
 if($cmp6){var $low_addr_0_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low10=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep9=$scevgep;
 var $0=(((-$low10))|0);
 var $uglygep=(($scevgep9+$0)|0);
 var $uglygep11=$uglygep;
 var $1=$uglygep11>>>2;
 var $2=((($1)+(1))|0);
 var $low_addr_07=$low;var $dest_addr_08=$dest;label=3;break;
 case 3: 
 var $dest_addr_08;
 var $low_addr_07;
 var $3=HEAP32[(($low_addr_07)>>2)];
 var $isascii=($3>>>0)<128;
 var $conv=(($3)&255);
 var $conv_dfault=($isascii?$conv:$dfault);
 HEAP8[($dest_addr_08)]=$conv_dfault;
 var $incdec_ptr=(($low_addr_07+4)|0);
 var $incdec_ptr2=(($dest_addr_08+1)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){label=4;break;}else{var $low_addr_07=$incdec_ptr;var $dest_addr_08=$incdec_ptr2;label=3;break;}
 case 4: 
 var $scevgep12=(($low+($2<<2))|0);
 var $low_addr_0_lcssa=$scevgep12;label=5;break;
 case 5: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3992;
 var $__tab__i=(($this+8)|0);
 var $1=HEAP32[(($__tab__i)>>2)];
 var $tobool_i=($1|0)==0;
 if($tobool_i){label=4;break;}else{label=2;break;}
 case 2: 
 var $__del__i=(($this+12)|0);
 var $2=HEAP8[($__del__i)];
 var $3=$2&1;
 var $tobool2_i=(($3<<24)>>24)==0;
 if($tobool2_i){label=4;break;}else{label=3;break;}
 case 3: 
 var $4=$1;
 __ZdaPv($4);
 label=4;break;
 case 4: 
 var $5=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($5);
 var $6=$this;
 __ZdlPv($6);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3992;
 var $__tab_=(($this+8)|0);
 var $1=HEAP32[(($__tab_)>>2)];
 var $tobool=($1|0)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $__del_=(($this+12)|0);
 var $2=HEAP8[($__del_)];
 var $3=$2&1;
 var $tobool2=(($3<<24)>>24)==0;
 if($tobool2){label=4;break;}else{label=3;break;}
 case 3: 
 var $4=$1;
 __ZdaPv($4);
 label=4;break;
 case 4: 
 var $5=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($5);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool=(($c<<24)>>24)<0;
 if($tobool){var $cond=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $idxprom=($c&255);
 var $1=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($1+($idxprom<<2))|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $conv3=(($2)&255);
 var $cond=$conv3;label=5;break;
 case 5: 
 var $cond;
 return $cond;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp7=($low|0)==($high|0);
 if($cmp7){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_08=$low;label=2;break;}
 case 2: 
 var $low_addr_08;
 var $0=HEAP8[($low_addr_08)];
 var $tobool=(($0<<24)>>24)<0;
 if($tobool){var $cond=$0;label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $conv2=(($0<<24)>>24);
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($conv2<<2))|0);
 var $3=HEAP32[(($arrayidx)>>2)];
 var $conv4=(($3)&255);
 var $cond=$conv4;label=6;break;
 case 6: 
 var $cond;
 HEAP8[($low_addr_08)]=$cond;
 var $incdec_ptr=(($low_addr_08+1)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_08=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $conv=(($c<<24)>>24);
 var $tobool=(($c<<24)>>24)<0;
 if($tobool){var $cond=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1,0); var $0$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $1=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($1+($conv<<2))|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $conv4=(($2)&255);
 var $cond=$conv4;label=5;break;
 case 5: 
 var $cond;
 return $cond;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp7=($low|0)==($high|0);
 if($cmp7){var $low_addr_0_lcssa=$low;label=7;break;}else{var $low_addr_08=$low;label=2;break;}
 case 2: 
 var $low_addr_08;
 var $0=HEAP8[($low_addr_08)];
 var $tobool=(($0<<24)>>24)<0;
 if($tobool){var $cond=$0;label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $conv2=(($0<<24)>>24);
 var $2=HEAP32[(($call_i)>>2)];
 var $arrayidx=(($2+($conv2<<2))|0);
 var $3=HEAP32[(($arrayidx)>>2)];
 var $conv4=(($3)&255);
 var $cond=$conv4;label=6;break;
 case 6: 
 var $cond;
 HEAP8[($low_addr_08)]=$cond;
 var $incdec_ptr=(($low_addr_08+1)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=7;break;}else{var $low_addr_08=$incdec_ptr;label=2;break;}
 case 7: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;
 return $c;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp4=($low|0)==($high|0);
 if($cmp4){var $low_addr_0_lcssa=$low;label=3;break;}else{var $low_addr_05=$low;var $dest_addr_06=$dest;label=2;break;}
 case 2: 
 var $dest_addr_06;
 var $low_addr_05;
 var $0=HEAP8[($low_addr_05)];
 HEAP8[($dest_addr_06)]=$0;
 var $incdec_ptr=(($low_addr_05+1)|0);
 var $incdec_ptr2=(($dest_addr_06+1)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=3;break;}else{var $low_addr_05=$incdec_ptr;var $dest_addr_06=$incdec_ptr2;label=2;break;}
 case 3: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;
 var $tobool=(($c<<24)>>24)<0;
 var $dfault_c=($tobool?$dfault:$c);
 return $dfault_c;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp7=($low|0)==($high|0);
 if($cmp7){var $low_addr_0_lcssa=$low;label=3;break;}else{var $low_addr_08=$low;var $dest_addr_09=$dest;label=2;break;}
 case 2: 
 var $dest_addr_09;
 var $low_addr_08;
 var $0=HEAP8[($low_addr_08)];
 var $tobool=(($0<<24)>>24)<0;
 var $dfault_=($tobool?$dfault:$0);
 HEAP8[($dest_addr_09)]=$dfault_;
 var $incdec_ptr=(($low_addr_08+1)|0);
 var $incdec_ptr2=(($dest_addr_09+1)|0);
 var $cmp=($incdec_ptr|0)==($high|0);
 if($cmp){var $low_addr_0_lcssa=$high;label=3;break;}else{var $low_addr_08=$incdec_ptr;var $dest_addr_09=$incdec_ptr2;label=2;break;}
 case 3: 
 var $low_addr_0_lcssa;
 return $low_addr_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;
 var $sub_ptr_lhs_cast=$end;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp_i_i_i=($sub_ptr_sub>>>0)<($mx>>>0);
 var $_sroa_speculated=($cmp_i_i_i?$sub_ptr_sub:$mx);
 return $_sroa_speculated;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $0=$this;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $tmp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $cmp=($fend_0|0)==($frm_end|0);
 if($cmp){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $0=HEAP32[(($fend_0)>>2)];
 var $cmp2=($0|0)==0;
 var $incdec_ptr=(($fend_0+4)|0);
 if($cmp2){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$incdec_ptr;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $cmp494=($frm|0)==($frm_end|0);
 var $cmp595=($to|0)==($to_end|0);
 var $or_cond96=$cmp494|$cmp595;
 if($or_cond96){var $28=$frm;label=49;break;}else{label=5;break;}
 case 5: 
 var $1=$st;
 var $sub_ptr_lhs_cast7=$to_end;
 var $__l=(($this+8)|0);
 var $arraydecay=(($tmp)|0);
 var $to_addr_097=$to;var $frm_addr_098=$frm;var $fend_199=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_199;
 var $frm_addr_098;
 var $to_addr_097;
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$2$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$2$1;
 var $sub_ptr_lhs_cast=$fend_199;
 var $sub_ptr_rhs_cast=$frm_addr_098;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $sub_ptr_rhs_cast8=$to_addr_097;
 var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast8))|0);
 var $3=HEAP32[(($__l)>>2)];
 var $call_i=_uselocale($3);
 var $call1_i=(function() { try { __THREW__ = 0; return _wcsnrtombs($to_addr_097,$frm_nxt,$sub_ptr_div,$sub_ptr_sub9,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $tobool_i_i_i37_i=($call_i|0)==0;
 if($tobool_i_i_i37_i){label=14;break;}else{label=8;break;}
 case 8: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i|0)==0;
 if($tobool_i_i_i_i){label=13;break;}else{label=11;break;}
 case 11: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($5$0)
 case 14: 
 if(($call1_i|0)==-1){ label=15;break;}else if(($call1_i|0)==0){ var $retval_0=1;label=50;break;}else{label=27;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$to_addr_097;
 var $7=HEAP32[(($frm_nxt)>>2)];
 var $cmp1366=($frm_addr_098|0)==($7|0);
 if($cmp1366){var $frm_addr_1_lcssa=$frm_addr_098;label=26;break;}else{var $frm_addr_167=$frm_addr_098;var $8=$to_addr_097;label=16;break;}
 case 16: 
 var $8;
 var $frm_addr_167;
 var $9=HEAP32[(($frm_addr_167)>>2)];
 var $10=HEAP32[(($__l)>>2)];
 var $call_i115=_uselocale($10);
 var $call1_i124=(function() { try { __THREW__ = 0; return _wcrtomb($8,$9,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $tobool_i_i_i37_i136=($call_i115|0)==0;
 if($tobool_i_i_i37_i136){label=24;break;}else{label=18;break;}
 case 18: 
 var $call6_i_i_i42_i142=(function() { try { __THREW__ = 0; return _uselocale($call_i115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $tobool_i_i_i_i157=($call_i115|0)==0;
 if($tobool_i_i_i_i157){label=23;break;}else{label=21;break;}
 case 21: 
 var $call6_i_i_i_i163=(function() { try { __THREW__ = 0; return _uselocale($call_i115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($12$0)
 case 24: 
 var $cmp17=($call1_i124|0)==-1;
 if($cmp17){var $frm_addr_1_lcssa=$frm_addr_167;label=26;break;}else{label=25;break;}
 case 25: 
 var $14=HEAP32[(($to_nxt)>>2)];
 var $add_ptr=(($14+$call1_i124)|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr;
 var $incdec_ptr21=(($frm_addr_167+4)|0);
 var $15=HEAP32[(($frm_nxt)>>2)];
 var $cmp13=($incdec_ptr21|0)==($15|0);
 if($cmp13){var $frm_addr_1_lcssa=$incdec_ptr21;label=26;break;}else{var $frm_addr_167=$incdec_ptr21;var $8=$add_ptr;label=16;break;}
 case 26: 
 var $frm_addr_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$frm_addr_1_lcssa;
 var $retval_0=2;label=50;break;
 case 27: 
 var $16=HEAP32[(($to_nxt)>>2)];
 var $add_ptr27=(($16+$call1_i)|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr27;
 var $cmp28=($add_ptr27|0)==($to_end|0);
 if($cmp28){label=48;break;}else{label=28;break;}
 case 28: 
 var $cmp31=($fend_199|0)==($frm_end|0);
 if($cmp31){label=29;break;}else{label=30;break;}
 case 29: 
 var $_pre129=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $27=$add_ptr27;var $26=$_pre129;label=47;break;
 case 30: 
 var $17=HEAP32[(($__l)>>2)];
 var $call_i223=_uselocale($17);
 var $call1_i232=(function() { try { __THREW__ = 0; return _wcrtomb($arraydecay,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 31: 
 var $tobool_i_i_i37_i244=($call_i223|0)==0;
 if($tobool_i_i_i37_i244){label=38;break;}else{label=32;break;}
 case 32: 
 var $call6_i_i_i42_i250=(function() { try { __THREW__ = 0; return _uselocale($call_i223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 33: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 34: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1); var $19$1 = tempRet0;
 var $tobool_i_i_i_i265=($call_i223|0)==0;
 if($tobool_i_i_i_i265){label=37;break;}else{label=35;break;}
 case 35: 
 var $call6_i_i_i_i271=(function() { try { __THREW__ = 0; return _uselocale($call_i223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=36;break; }
 case 36: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 ___resumeException($19$0)
 case 38: 
 var $cmp35=($call1_i232|0)==-1;
 if($cmp35){var $retval_0=2;label=50;break;}else{label=39;break;}
 case 39: 
 var $21=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast39=$21;
 var $sub_ptr_sub40=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast39))|0);
 var $cmp41=($call1_i232>>>0)>($sub_ptr_sub40>>>0);
 if($cmp41){var $retval_0=1;label=50;break;}else{label=40;break;}
 case 40: 
 var $tobool68=($call1_i232|0)==0;
 if($tobool68){label=43;break;}else{var $n_069=$call1_i232;var $p_070=$arraydecay;var $22=$21;label=41;break;}
 case 41: 
 var $22;
 var $p_070;
 var $n_069;
 var $23=HEAP8[($p_070)];
 var $incdec_ptr49=(($22+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr49;
 HEAP8[($22)]=$23;
 var $dec=((($n_069)-(1))|0);
 var $tobool=($dec|0)==0;
 if($tobool){label=43;break;}else{label=42;break;}
 case 42: 
 var $incdec_ptr48=(($p_070+1)|0);
 var $_pre130=HEAP32[(($to_nxt)>>2)];
 var $n_069=$dec;var $p_070=$incdec_ptr48;var $22=$_pre130;label=41;break;
 case 43: 
 var $24=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr52=(($24+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr52;
 var $fend_2=$incdec_ptr52;label=44;break;
 case 44: 
 var $fend_2;
 var $cmp54=($fend_2|0)==($frm_end|0);
 if($cmp54){var $fend_2_lcssa=$frm_end;label=46;break;}else{label=45;break;}
 case 45: 
 var $25=HEAP32[(($fend_2)>>2)];
 var $cmp56=($25|0)==0;
 var $incdec_ptr60=(($fend_2+4)|0);
 if($cmp56){var $fend_2_lcssa=$fend_2;label=46;break;}else{var $fend_2=$incdec_ptr60;label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre128=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $27=$_pre128;var $26=$incdec_ptr52;label=47;break;
 case 47: 
 var $26;
 var $27;
 var $fend_3;
 var $cmp4=($26|0)==($frm_end|0);
 var $cmp5=($27|0)==($to_end|0);
 var $or_cond=$cmp4|$cmp5;
 if($or_cond){var $28=$26;label=49;break;}else{var $to_addr_097=$27;var $frm_addr_098=$26;var $fend_199=$fend_3;label=6;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $28=$_pre;label=49;break;
 case 49: 
 var $28;
 var $not_cmp65=($28|0)!=($frm_end|0);
 var $cond=($not_cmp65&1);
 var $retval_0=$cond;label=50;break;
 case 50: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $save_state=sp;
 var $tmpcast=$save_state;
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $cmp=($fend_0|0)==($frm_end|0);
 if($cmp){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $0=HEAP8[($fend_0)];
 var $cmp2=(($0<<24)>>24)==0;
 var $incdec_ptr=(($fend_0+1)|0);
 if($cmp2){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$incdec_ptr;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $cmp4107=($frm|0)==($frm_end|0);
 var $cmp5108=($to|0)==($to_end|0);
 var $or_cond109=$cmp4107|$cmp5108;
 if($or_cond109){var $24=$frm;label=48;break;}else{label=5;break;}
 case 5: 
 var $1=$st;
 var $sub_ptr_lhs_cast7=$to_end;
 var $__l=(($this+8)|0);
 var $to_addr_0110=$to;var $frm_addr_0111=$frm;var $fend_1112=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1112;
 var $frm_addr_0111;
 var $to_addr_0110;
 var $ld$0$0=(($1)|0);
 var $2$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($1+4)|0);
 var $2$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$2$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$2$1;
 var $sub_ptr_lhs_cast=$fend_1112;
 var $sub_ptr_rhs_cast=$frm_addr_0111;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_rhs_cast8=$to_addr_0110;
 var $sub_ptr_sub9=((($sub_ptr_lhs_cast7)-($sub_ptr_rhs_cast8))|0);
 var $sub_ptr_div=$sub_ptr_sub9>>2;
 var $3=HEAP32[(($__l)>>2)];
 var $call_i=_uselocale($3);
 var $call1_i=(function() { try { __THREW__ = 0; return _mbsnrtowcs($to_addr_0110,$frm_nxt,$sub_ptr_sub,$sub_ptr_div,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $tobool_i_i_i37_i=($call_i|0)==0;
 if($tobool_i_i_i37_i){label=14;break;}else{label=8;break;}
 case 8: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 9: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1); var $5$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i|0)==0;
 if($tobool_i_i_i_i){label=13;break;}else{label=11;break;}
 case 11: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 ___resumeException($5$0)
 case 14: 
 if(($call1_i|0)==-1){ label=15;break;}else if(($call1_i|0)==0){ var $retval_0=2;label=49;break;}else{label=31;break;}
 case 15: 
 HEAP32[(($to_nxt)>>2)]=$to_addr_0110;
 var $7=HEAP32[(($frm_nxt)>>2)];
 var $cmp1376=($frm_addr_0111|0)==($7|0);
 if($cmp1376){var $frm_addr_1_lcssa=$frm_addr_0111;label=30;break;}else{var $storemerge77=$to_addr_0110;var $frm_addr_178=$frm_addr_0111;label=16;break;}
 case 16: 
 var $frm_addr_178;
 var $storemerge77;
 var $sub_ptr_rhs_cast16=$frm_addr_178;
 var $sub_ptr_sub17=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast16))|0);
 var $8=HEAP32[(($__l)>>2)];
 var $call_i108=_uselocale($8);
 var $call1_i117=(function() { try { __THREW__ = 0; return _mbrtowc($storemerge77,$frm_addr_178,$sub_ptr_sub17,$tmpcast) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $tobool_i_i_i37_i129=($call_i108|0)==0;
 if($tobool_i_i_i37_i129){label=24;break;}else{label=18;break;}
 case 18: 
 var $call6_i_i_i42_i135=(function() { try { __THREW__ = 0; return _uselocale($call_i108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 19: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;
 var $tobool_i_i_i_i150=($call_i108|0)==0;
 if($tobool_i_i_i_i150){label=23;break;}else{label=21;break;}
 case 21: 
 var $call6_i_i_i_i156=(function() { try { __THREW__ = 0; return _uselocale($call_i108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=22;break; }
 case 22: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1,0); var $11$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 23: 
 ___resumeException($10$0)
 case 24: 
 if(($call1_i117|0)==0){ label=25;break;}else if(($call1_i117|0)==-1){ label=26;break;}else if(($call1_i117|0)==-2){ label=27;break;}else{label=28;break;}
 case 25: 
 var $incdec_ptr20=(($frm_addr_178+1)|0);
 var $frm_addr_2=$incdec_ptr20;label=29;break;
 case 26: 
 HEAP32[(($frm_nxt)>>2)]=$frm_addr_178;
 var $retval_0=2;label=49;break;
 case 27: 
 HEAP32[(($frm_nxt)>>2)]=$frm_addr_178;
 var $retval_0=1;label=49;break;
 case 28: 
 var $add_ptr=(($frm_addr_178+$call1_i117)|0);
 var $frm_addr_2=$add_ptr;label=29;break;
 case 29: 
 var $frm_addr_2;
 var $12=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr24=(($12+4)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr24;
 var $13=HEAP32[(($frm_nxt)>>2)];
 var $cmp13=($frm_addr_2|0)==($13|0);
 if($cmp13){var $frm_addr_1_lcssa=$frm_addr_2;label=30;break;}else{var $storemerge77=$incdec_ptr24;var $frm_addr_178=$frm_addr_2;label=16;break;}
 case 30: 
 var $frm_addr_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$frm_addr_1_lcssa;
 var $not_cmp26=($frm_addr_1_lcssa|0)!=($frm_end|0);
 var $cond=($not_cmp26&1);
 var $retval_0=$cond;label=49;break;
 case 31: 
 var $14=HEAP32[(($to_nxt)>>2)];
 var $add_ptr31=(($14+($call1_i<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr31;
 var $cmp32=($add_ptr31|0)==($to_end|0);
 if($cmp32){label=47;break;}else{label=32;break;}
 case 32: 
 var $cmp35=($fend_1112|0)==($frm_end|0);
 var $_pre151=HEAP32[(($frm_nxt)>>2)];
 if($cmp35){var $fend_3=$frm_end;var $23=$add_ptr31;var $22=$_pre151;label=46;break;}else{label=33;break;}
 case 33: 
 var $15=HEAP32[(($__l)>>2)];
 var $call_i217=_uselocale($15);
 var $call1_i226=(function() { try { __THREW__ = 0; return _mbrtowc($add_ptr31,$_pre151,1,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 34: 
 var $tobool_i_i_i37_i238=($call_i217|0)==0;
 if($tobool_i_i_i37_i238){label=41;break;}else{label=35;break;}
 case 35: 
 var $call6_i_i_i42_i244=(function() { try { __THREW__ = 0; return _uselocale($call_i217) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=36;break; }
 case 36: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1,0); var $16$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 37: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $tobool_i_i_i_i259=($call_i217|0)==0;
 if($tobool_i_i_i_i259){label=40;break;}else{label=38;break;}
 case 38: 
 var $call6_i_i_i_i265=(function() { try { __THREW__ = 0; return _uselocale($call_i217) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=39;break; }
 case 39: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 40: 
 ___resumeException($17$0)
 case 41: 
 var $cmp39=($call1_i226|0)==0;
 if($cmp39){label=42;break;}else{var $retval_0=2;label=49;break;}
 case 42: 
 var $19=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr42=(($19+4)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr42;
 var $20=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr43=(($20+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr43;
 var $fend_2=$incdec_ptr43;label=43;break;
 case 43: 
 var $fend_2;
 var $cmp45=($fend_2|0)==($frm_end|0);
 if($cmp45){var $fend_2_lcssa=$frm_end;label=45;break;}else{label=44;break;}
 case 44: 
 var $21=HEAP8[($fend_2)];
 var $cmp48=(($21<<24)>>24)==0;
 var $incdec_ptr52=(($fend_2+1)|0);
 if($cmp48){var $fend_2_lcssa=$fend_2;label=45;break;}else{var $fend_2=$incdec_ptr52;label=43;break;}
 case 45: 
 var $fend_2_lcssa;
 var $_pre150=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $23=$_pre150;var $22=$incdec_ptr43;label=46;break;
 case 46: 
 var $22;
 var $23;
 var $fend_3;
 var $cmp4=($22|0)==($frm_end|0);
 var $cmp5=($23|0)==($to_end|0);
 var $or_cond=$cmp4|$cmp5;
 if($or_cond){var $24=$22;label=48;break;}else{var $to_addr_0110=$23;var $frm_addr_0111=$22;var $fend_1112=$fend_3;label=6;break;}
 case 47: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $24=$_pre;label=48;break;
 case 48: 
 var $24;
 var $not_cmp57=($24|0)!=($frm_end|0);
 var $cond58=($not_cmp57&1);
 var $retval_0=$cond58;label=49;break;
 case 49: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp=sp;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $arraydecay=(($tmp)|0);
 var $__l=(($this+8)|0);
 var $0=HEAP32[(($__l)>>2)];
 var $call_i=_uselocale($0);
 var $call1_i=(function() { try { __THREW__ = 0; return _wcrtomb($arraydecay,0,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $tobool_i_i_i37_i=($call_i|0)==0;
 if($tobool_i_i_i37_i){label=9;break;}else{label=3;break;}
 case 3: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=4;break; }
 case 4: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i|0)==0;
 if($tobool_i_i_i_i){label=8;break;}else{label=6;break;}
 case 6: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=7;break; }
 case 7: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 8: 
 ___resumeException($2$0)
 case 9: 
 if(($call1_i|0)==-1|($call1_i|0)==0){ var $retval_0=2;label=14;break;}else{label=10;break;}
 case 10: 
 var $dec=((($call1_i)-(1))|0);
 var $4=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_lhs_cast=$to_end;
 var $sub_ptr_rhs_cast=$4;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp4=($dec>>>0)>($sub_ptr_sub>>>0);
 if($cmp4){var $retval_0=1;label=14;break;}else{label=11;break;}
 case 11: 
 var $tobool12=($dec|0)==0;
 if($tobool12){var $retval_0=0;label=14;break;}else{var $n_013=$dec;var $p_014=$arraydecay;var $5=$4;label=12;break;}
 case 12: 
 var $5;
 var $p_014;
 var $n_013;
 var $6=HEAP8[($p_014)];
 var $incdec_ptr9=(($5+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr9;
 HEAP8[($5)]=$6;
 var $dec10=((($n_013)-(1))|0);
 var $tobool=($dec10|0)==0;
 if($tobool){var $retval_0=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $incdec_ptr=(($p_014+1)|0);
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $n_013=$dec10;var $p_014=$incdec_ptr;var $5=$_pre;label=12;break;
 case 14: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__l=(($this+8)|0);
 var $0=HEAP32[(($__l)>>2)];
 var $call_i10=(function() { try { __THREW__ = 0; return _uselocale($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=16;break; }
 case 2: 
 var $call1_i=(function() { try { __THREW__ = 0; return _mbtowc(0,0,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 var $tobool_i_i_i37_i=($call_i10|0)==0;
 if($tobool_i_i_i37_i){label=9;break;}else{label=4;break;}
 case 4: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=5;break; }
 case 5: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1,0); var $2$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i10|0)==0;
 if($tobool_i_i_i_i){label=17;break;}else{label=7;break;}
 case 7: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 8: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 var $cmp=($call1_i|0)==0;
 if($cmp){label=10;break;}else{var $retval_0=-1;label=15;break;}
 case 10: 
 var $4=HEAP32[(($__l)>>2)];
 var $cmp3=($4|0)==0;
 if($cmp3){var $retval_0=1;label=15;break;}else{label=11;break;}
 case 11: 
 var $call_i64=(function() { try { __THREW__ = 0; return _uselocale($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=16;break; }
 case 12: 
 var $tobool_i_i_i_i54=($call_i64|0)==0;
 if($tobool_i_i_i_i54){var $retval_0=0;label=15;break;}else{label=13;break;}
 case 13: 
 var $call6_i_i_i_i58=(function() { try { __THREW__ = 0; return _uselocale($call_i64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $retval_0=0;label=15;break; } else { label=14;break; }
 case 14: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1,0); var $5$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 var $retval_0;
 return $retval_0;
 case 16: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 label=17;break;
 case 17: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp19=($mx|0)==0;
 var $cmp220=($frm|0)==($frm_end|0);
 var $or_cond21=$cmp19|$cmp220;
 if($or_cond21){var $nbytes_0_lcssa=0;label=15;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$frm_end;
 var $__l=(($this+8)|0);
 var $frm_addr_022=$frm;var $nbytes_023=0;var $nwchar_t_024=0;label=3;break;
 case 3: 
 var $nwchar_t_024;
 var $nbytes_023;
 var $frm_addr_022;
 var $sub_ptr_rhs_cast=$frm_addr_022;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $0=HEAP32[(($__l)>>2)];
 var $call_i=_uselocale($0);
 var $call1_i=(function() { try { __THREW__ = 0; return _mbrlen($frm_addr_022,$sub_ptr_sub,$st) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 var $tobool_i_i_i37_i=($call_i|0)==0;
 if($tobool_i_i_i37_i){label=11;break;}else{label=5;break;}
 case 5: 
 var $call6_i_i_i42_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 6: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 7: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1); var $2$1 = tempRet0;
 var $tobool_i_i_i_i=($call_i|0)==0;
 if($tobool_i_i_i_i){label=10;break;}else{label=8;break;}
 case 8: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=9;break; }
 case 9: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1,0); var $3$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 ___resumeException($2$0)
 case 11: 
 if(($call1_i|0)==0){ label=12;break;}else if(($call1_i|0)==-1|($call1_i|0)==-2){ var $nbytes_0_lcssa=$nbytes_023;label=15;break;}else{label=13;break;}
 case 12: 
 var $incdec_ptr=(($frm_addr_022+1)|0);
 var $call1_i_pn=1;var $frm_addr_1=$incdec_ptr;label=14;break;
 case 13: 
 var $add_ptr=(($frm_addr_022+$call1_i)|0);
 var $call1_i_pn=$call1_i;var $frm_addr_1=$add_ptr;label=14;break;
 case 14: 
 var $frm_addr_1;
 var $call1_i_pn;
 var $nbytes_1=((($call1_i_pn)+($nbytes_023))|0);
 var $inc4=((($nwchar_t_024)+(1))|0);
 var $cmp=($inc4>>>0)>=($mx>>>0);
 var $cmp2=($frm_addr_1|0)==($frm_end|0);
 var $or_cond=$cmp|$cmp2;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=15;break;}else{var $frm_addr_022=$frm_addr_1;var $nbytes_023=$nbytes_1;var $nwchar_t_024=$inc4;label=3;break;}
 case 15: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__l=(($this+8)|0);
 var $0=HEAP32[(($__l)>>2)];
 var $cmp=($0|0)==0;
 if($cmp){var $cond=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $call_i3=(function() { try { __THREW__ = 0; return _uselocale($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $tobool_i_i_i_i=($call_i3|0)==0;
 if($tobool_i_i_i_i){var $cond=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $call6_i_i_i_i=(function() { try { __THREW__ = 0; return _uselocale($call_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $cond=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $1$0 = ___cxa_find_matching_catch(-1, -1,0); var $1$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $cond;
 return $cond;
 case 7: 
 var $2$0 = ___cxa_find_matching_catch(-1, -1,0); var $2$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $call=__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $1=HEAP32[(($_frm_nxt)>>2)];
 var $sub_ptr_lhs_cast=$1;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>1;
 var $add_ptr=(($frm+($sub_ptr_div<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $2=HEAP32[(($_to_nxt)>>2)];
 var $sub_ptr_lhs_cast2=$2;
 var $sub_ptr_rhs_cast3=$to;
 var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
 var $add_ptr5=(($to+$sub_ptr_sub4)|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr5;
 STACKTOP=sp;return $call;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $and=$mode&2;
 var $tobool=($and|0)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$to_end;
 var $sub_ptr_rhs_cast=$to;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)<3;
 if($cmp){var $retval_0=1;label=26;break;}else{label=3;break;}
 case 3: 
 var $incdec_ptr=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr;
 HEAP8[($to)]=-17;
 var $0=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr2=(($0+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr2;
 HEAP8[($0)]=-69;
 var $1=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr3=(($1+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr3;
 HEAP8[($1)]=-65;
 label=4;break;
 case 4: 
 var $sub_ptr_lhs_cast67=$frm_end;
 var $2=HEAP32[(($frm_nxt)>>2)];
 var $cmp568=($2>>>0)<($frm_end>>>0);
 if($cmp568){label=5;break;}else{var $retval_0=0;label=26;break;}
 case 5: 
 var $sub_ptr_lhs_cast12=$to_end;
 var $3=$2;label=6;break;
 case 6: 
 var $3;
 var $4=HEAP16[(($3)>>1)];
 var $conv=($4&65535);
 var $cmp6=($conv>>>0)>($Maxcode>>>0);
 if($cmp6){var $retval_0=2;label=26;break;}else{label=7;break;}
 case 7: 
 var $cmp10=($4&65535)<128;
 if($cmp10){label=8;break;}else{label=10;break;}
 case 8: 
 var $5=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast13=$5;
 var $sub_ptr_sub14=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast13))|0);
 var $cmp15=($sub_ptr_sub14|0)<1;
 if($cmp15){var $retval_0=1;label=26;break;}else{label=9;break;}
 case 9: 
 var $conv18=(($4)&255);
 var $incdec_ptr19=(($5+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr19;
 HEAP8[($5)]=$conv18;
 label=25;break;
 case 10: 
 var $cmp21=($4&65535)<2048;
 if($cmp21){label=11;break;}else{label=13;break;}
 case 11: 
 var $6=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast24=$6;
 var $sub_ptr_sub25=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast24))|0);
 var $cmp26=($sub_ptr_sub25|0)<2;
 if($cmp26){var $retval_0=1;label=26;break;}else{label=12;break;}
 case 12: 
 var $shr67=$conv>>>6;
 var $or=$shr67|192;
 var $conv30=(($or)&255);
 var $incdec_ptr31=(($6+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr31;
 HEAP8[($6)]=$conv30;
 var $and33=$conv&63;
 var $or34=$and33|128;
 var $conv35=(($or34)&255);
 var $7=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr36=(($7+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr36;
 HEAP8[($7)]=$conv35;
 label=25;break;
 case 13: 
 var $cmp39=($4&65535)<55296;
 if($cmp39){label=14;break;}else{label=16;break;}
 case 14: 
 var $8=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast42=$8;
 var $sub_ptr_sub43=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast42))|0);
 var $cmp44=($sub_ptr_sub43|0)<3;
 if($cmp44){var $retval_0=1;label=26;break;}else{label=15;break;}
 case 15: 
 var $shr4865=$conv>>>12;
 var $or49=$shr4865|224;
 var $conv50=(($or49)&255);
 var $incdec_ptr51=(($8+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr51;
 HEAP8[($8)]=$conv50;
 var $and53=$conv>>>6;
 var $shr5466=$and53&63;
 var $or55=$shr5466|128;
 var $conv56=(($or55)&255);
 var $9=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr57=(($9+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr57;
 HEAP8[($9)]=$conv56;
 var $and59=$conv&63;
 var $or60=$and59|128;
 var $conv61=(($or60)&255);
 var $10=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr62=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr62;
 HEAP8[($10)]=$conv61;
 label=25;break;
 case 16: 
 var $cmp65=($4&65535)<56320;
 if($cmp65){label=17;break;}else{label=22;break;}
 case 17: 
 var $sub_ptr_rhs_cast68=$3;
 var $sub_ptr_sub69=((($sub_ptr_lhs_cast67)-($sub_ptr_rhs_cast68))|0);
 var $cmp70=($sub_ptr_sub69|0)<4;
 if($cmp70){var $retval_0=1;label=26;break;}else{label=18;break;}
 case 18: 
 var $arrayidx=(($3+2)|0);
 var $11=HEAP16[(($arrayidx)>>1)];
 var $conv73=($11&65535);
 var $and74=$conv73&64512;
 var $cmp75=($and74|0)==56320;
 if($cmp75){label=19;break;}else{var $retval_0=2;label=26;break;}
 case 19: 
 var $12=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast79=$12;
 var $sub_ptr_sub80=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast79))|0);
 var $cmp81=($sub_ptr_sub80|0)<4;
 if($cmp81){var $retval_0=1;label=26;break;}else{label=20;break;}
 case 20: 
 var $and85=$conv&960;
 var $add=$and85<<10;
 var $shl=((($add)+(65536))|0);
 var $and88=$conv<<10;
 var $shl89=$and88&64512;
 var $add90=$shl|$shl89;
 var $and92=$conv73&1023;
 var $add93=$add90|$and92;
 var $cmp94=($add93>>>0)>($Maxcode>>>0);
 if($cmp94){var $retval_0=2;label=26;break;}else{label=21;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$arrayidx;
 var $shr10061=$and85>>>6;
 var $add101=((($shr10061)+(1))|0);
 var $shr10462=$add101>>>2;
 var $or105=$shr10462|240;
 var $conv106=(($or105)&255);
 var $13=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr107=(($13+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr107;
 HEAP8[($13)]=$conv106;
 var $and109=$add101<<4;
 var $shl110=$and109&48;
 var $and113=$conv>>>2;
 var $shr11463=$and113&15;
 var $or111=$shr11463|$shl110;
 var $or115=$or111|128;
 var $conv116=(($or115)&255);
 var $14=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr117=(($14+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr117;
 HEAP8[($14)]=$conv116;
 var $and119=$conv<<4;
 var $shl120=$and119&48;
 var $and123=$conv73>>>6;
 var $shr12464=$and123&15;
 var $or121=$shl120|$shr12464;
 var $or125=$or121|128;
 var $conv126=(($or125)&255);
 var $15=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr127=(($15+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr127;
 HEAP8[($15)]=$conv126;
 var $and129=$conv73&63;
 var $or130=$and129|128;
 var $conv131=(($or130)&255);
 var $16=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr132=(($16+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr132;
 HEAP8[($16)]=$conv131;
 label=25;break;
 case 22: 
 var $cmp135=($4&65535)<57344;
 if($cmp135){var $retval_0=2;label=26;break;}else{label=23;break;}
 case 23: 
 var $17=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast139=$17;
 var $sub_ptr_sub140=((($sub_ptr_lhs_cast12)-($sub_ptr_rhs_cast139))|0);
 var $cmp141=($sub_ptr_sub140|0)<3;
 if($cmp141){var $retval_0=1;label=26;break;}else{label=24;break;}
 case 24: 
 var $shr14559=$conv>>>12;
 var $or146=$shr14559|224;
 var $conv147=(($or146)&255);
 var $incdec_ptr148=(($17+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr148;
 HEAP8[($17)]=$conv147;
 var $and150=$conv>>>6;
 var $shr15160=$and150&63;
 var $or152=$shr15160|128;
 var $conv153=(($or152)&255);
 var $18=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr154=(($18+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr154;
 HEAP8[($18)]=$conv153;
 var $and156=$conv&63;
 var $or157=$and156|128;
 var $conv158=(($or157)&255);
 var $19=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr159=(($19+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr159;
 HEAP8[($19)]=$conv158;
 label=25;break;
 case 25: 
 var $20=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr165=(($20+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr165;
 var $cmp5=($incdec_ptr165>>>0)<($frm_end>>>0);
 if($cmp5){var $3=$incdec_ptr165;label=6;break;}else{var $retval_0=0;label=26;break;}
 case 26: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $call=__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $1=HEAP32[(($_frm_nxt)>>2)];
 var $sub_ptr_lhs_cast=$1;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $add_ptr=(($frm+$sub_ptr_sub)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $2=HEAP32[(($_to_nxt)>>2)];
 var $sub_ptr_lhs_cast2=$2;
 var $sub_ptr_rhs_cast3=$to;
 var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
 var $sub_ptr_div=$sub_ptr_sub4>>1;
 var $add_ptr5=(($to+($sub_ptr_div<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr5;
 STACKTOP=sp;return $call;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $and=$mode&4;
 var $tobool=($and|0)==0;
 var $_pre73=HEAP32[(($frm_nxt)>>2)];
 if($tobool){var $3=$_pre73;label=7;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$frm_end;
 var $sub_ptr_rhs_cast=$_pre73;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>2;
 if($cmp){label=3;break;}else{var $3=$_pre73;label=7;break;}
 case 3: 
 var $0=HEAP8[($_pre73)];
 var $cmp1=(($0<<24)>>24)==-17;
 if($cmp1){label=4;break;}else{var $3=$_pre73;label=7;break;}
 case 4: 
 var $arrayidx3=(($_pre73+1)|0);
 var $1=HEAP8[($arrayidx3)];
 var $cmp5=(($1<<24)>>24)==-69;
 if($cmp5){label=5;break;}else{var $3=$_pre73;label=7;break;}
 case 5: 
 var $arrayidx7=(($_pre73+2)|0);
 var $2=HEAP8[($arrayidx7)];
 var $cmp9=(($2<<24)>>24)==-65;
 if($cmp9){label=6;break;}else{var $3=$_pre73;label=7;break;}
 case 6: 
 var $add_ptr=(($_pre73+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $3=$add_ptr;label=7;break;
 case 7: 
 var $3;
 var $cmp1270=($3>>>0)<($frm_end>>>0);
 if($cmp1270){label=8;break;}else{var $21=$3;label=40;break;}
 case 8: 
 var $sub_ptr_lhs_cast29=$frm_end;
 var $sub_ptr_lhs_cast148=$to_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $5=$_pre;var $4=$3;label=9;break;
 case 9: 
 var $4;
 var $5;
 var $cmp13=($5>>>0)<($to_end>>>0);
 if($cmp13){label=10;break;}else{var $21=$4;label=40;break;}
 case 10: 
 var $6=HEAP8[($4)];
 var $conv14=($6&255);
 var $cmp15=($conv14>>>0)>($Maxcode>>>0);
 if($cmp15){var $retval_0=2;label=41;break;}else{label=11;break;}
 case 11: 
 var $cmp19=(($6<<24)>>24)>-1;
 if($cmp19){label=12;break;}else{label=13;break;}
 case 12: 
 var $conv21=($6&255);
 HEAP16[(($5)>>1)]=$conv21;
 var $7=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr=(($7+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr;
 label=39;break;
 case 13: 
 var $cmp23=($6&255)<194;
 if($cmp23){var $retval_0=2;label=41;break;}else{label=14;break;}
 case 14: 
 var $cmp27=($6&255)<224;
 if($cmp27){label=15;break;}else{label=19;break;}
 case 15: 
 var $sub_ptr_rhs_cast30=$4;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<2;
 if($cmp32){var $retval_0=1;label=41;break;}else{label=16;break;}
 case 16: 
 var $arrayidx35=(($4+1)|0);
 var $8=HEAP8[($arrayidx35)];
 var $conv36=($8&255);
 var $and37=$conv36&192;
 var $cmp38=($and37|0)==128;
 if($cmp38){label=17;break;}else{var $retval_0=2;label=41;break;}
 case 17: 
 var $and42=$conv14<<6;
 var $shl=$and42&1984;
 var $and44=$conv36&63;
 var $or=$and44|$shl;
 var $cmp47=($or>>>0)>($Maxcode>>>0);
 if($cmp47){var $retval_0=2;label=41;break;}else{label=18;break;}
 case 18: 
 var $conv45=(($or)&65535);
 HEAP16[(($5)>>1)]=$conv45;
 var $9=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr50=(($9+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr50;
 label=39;break;
 case 19: 
 var $cmp53=($6&255)<240;
 if($cmp53){label=20;break;}else{label=28;break;}
 case 20: 
 var $sub_ptr_rhs_cast56=$4;
 var $sub_ptr_sub57=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast56))|0);
 var $cmp58=($sub_ptr_sub57|0)<3;
 if($cmp58){var $retval_0=1;label=41;break;}else{label=21;break;}
 case 21: 
 var $arrayidx62=(($4+1)|0);
 var $10=HEAP8[($arrayidx62)];
 var $arrayidx63=(($4+2)|0);
 var $11=HEAP8[($arrayidx63)];
 if(($conv14|0)==224){ label=22;break;}else if(($conv14|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $and66=$10&-32;
 var $cmp67=(($and66<<24)>>24)==-96;
 if($cmp67){label=25;break;}else{var $retval_0=2;label=41;break;}
 case 23: 
 var $and72=$10&-32;
 var $cmp73=(($and72<<24)>>24)==-128;
 if($cmp73){label=25;break;}else{var $retval_0=2;label=41;break;}
 case 24: 
 var $and77=$10&-64;
 var $cmp78=(($and77<<24)>>24)==-128;
 if($cmp78){label=25;break;}else{var $retval_0=2;label=41;break;}
 case 25: 
 var $conv81=($11&255);
 var $and82=$conv81&192;
 var $cmp83=($and82|0)==128;
 if($cmp83){label=26;break;}else{var $retval_0=2;label=41;break;}
 case 26: 
 var $and88=$conv14<<12;
 var $conv90=($10&255);
 var $and91=$conv90<<6;
 var $shl92=$and91&4032;
 var $or93=$shl92|$and88;
 var $and95=$conv81&63;
 var $or96=$or93|$and95;
 var $conv98=$or96&65535;
 var $cmp99=($conv98>>>0)>($Maxcode>>>0);
 if($cmp99){var $retval_0=2;label=41;break;}else{label=27;break;}
 case 27: 
 var $conv97=(($or96)&65535);
 HEAP16[(($5)>>1)]=$conv97;
 var $12=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr102=(($12+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr102;
 label=39;break;
 case 28: 
 var $cmp105=($6&255)<245;
 if($cmp105){label=29;break;}else{var $retval_0=2;label=41;break;}
 case 29: 
 var $sub_ptr_rhs_cast108=$4;
 var $sub_ptr_sub109=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast108))|0);
 var $cmp110=($sub_ptr_sub109|0)<4;
 if($cmp110){var $retval_0=1;label=41;break;}else{label=30;break;}
 case 30: 
 var $arrayidx114=(($4+1)|0);
 var $13=HEAP8[($arrayidx114)];
 var $arrayidx116=(($4+2)|0);
 var $14=HEAP8[($arrayidx116)];
 var $arrayidx117=(($4+3)|0);
 var $15=HEAP8[($arrayidx117)];
 if(($conv14|0)==240){ label=31;break;}else if(($conv14|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($13)+(112))&255);
 var $16=($_off&255)<48;
 if($16){label=34;break;}else{var $retval_0=2;label=41;break;}
 case 32: 
 var $and129=$13&-16;
 var $cmp130=(($and129<<24)>>24)==-128;
 if($cmp130){label=34;break;}else{var $retval_0=2;label=41;break;}
 case 33: 
 var $and135=$13&-64;
 var $cmp136=(($and135<<24)>>24)==-128;
 if($cmp136){label=34;break;}else{var $retval_0=2;label=41;break;}
 case 34: 
 var $conv140=($14&255);
 var $and141=$conv140&192;
 var $cmp142=($and141|0)==128;
 if($cmp142){label=35;break;}else{var $retval_0=2;label=41;break;}
 case 35: 
 var $conv143=($15&255);
 var $and144=$conv143&192;
 var $cmp145=($and144|0)==128;
 if($cmp145){label=36;break;}else{var $retval_0=2;label=41;break;}
 case 36: 
 var $sub_ptr_rhs_cast149=$5;
 var $sub_ptr_sub150=((($sub_ptr_lhs_cast148)-($sub_ptr_rhs_cast149))|0);
 var $cmp151=($sub_ptr_sub150|0)<4;
 if($cmp151){var $retval_0=1;label=41;break;}else{label=37;break;}
 case 37: 
 var $and155=$conv14&7;
 var $shl156=$and155<<18;
 var $conv157=($13&255);
 var $and158=$conv157<<12;
 var $shl159=$and158&258048;
 var $add=$shl159|$shl156;
 var $and161=$conv140<<6;
 var $shl162=$and161&4032;
 var $add163=$add|$shl162;
 var $and165=$conv143&63;
 var $add166=$add163|$and165;
 var $cmp167=($add166>>>0)>($Maxcode>>>0);
 if($cmp167){var $retval_0=2;label=41;break;}else{label=38;break;}
 case 38: 
 var $shl172=$and155<<2;
 var $and174=$conv157>>>4;
 var $shr67=$and174&3;
 var $or175=$shr67|$shl172;
 var $sub=$or175<<6;
 var $shl176=((($sub)+(16320))|0);
 var $and179=$conv157<<2;
 var $shl180=$and179&60;
 var $and183=$conv140>>>4;
 var $shr18468=$and183&3;
 var $or177=$shl180|$shr18468;
 var $or181=$or177|$shl176;
 var $or185=$or181|55296;
 var $conv186=(($or185)&65535);
 HEAP16[(($5)>>1)]=$conv186;
 var $shl189=$and161&960;
 var $or190=$and165|$shl189;
 var $or193=$or190|56320;
 var $conv194=(($or193)&65535);
 var $17=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr195=(($17+2)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr195;
 HEAP16[(($incdec_ptr195)>>1)]=$conv194;
 var $18=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr196=(($18+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr196;
 label=39;break;
 case 39: 
 var $19=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr203=(($19+2)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr203;
 var $20=HEAP32[(($frm_nxt)>>2)];
 var $cmp12=($20>>>0)<($frm_end>>>0);
 if($cmp12){var $5=$incdec_ptr203;var $4=$20;label=9;break;}else{var $21=$20;label=40;break;}
 case 40: 
 var $21;
 var $cmp204=($21>>>0)<($frm_end>>>0);
 var $cond=($cmp204&1);
 var $retval_0=$cond;label=41;break;
 case 41: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $call=__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $call;
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $and=$mode&4;
 var $tobool=($and|0)==0;
 if($tobool){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$frm_end;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>2;
 if($cmp){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $0=HEAP8[($frm)];
 var $cmp1=(($0<<24)>>24)==-17;
 if($cmp1){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $arrayidx3=(($frm+1)|0);
 var $1=HEAP8[($arrayidx3)];
 var $cmp5=(($1<<24)>>24)==-69;
 if($cmp5){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $arrayidx7=(($frm+2)|0);
 var $2=HEAP8[($arrayidx7)];
 var $cmp9=(($2<<24)>>24)==-65;
 var $add_ptr=(($frm+3)|0);
 var $add_ptr_frm=($cmp9?$add_ptr:$frm);
 var $frm_nxt_1_ph=$add_ptr_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $cmp1277=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $cmp1378=($mx|0)!=0;
 var $or_cond79=$cmp1277&$cmp1378;
 if($or_cond79){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $sub_ptr_lhs_cast28=$frm_end;
 var $nchar16_t_080=0;var $frm_nxt_181=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_181;
 var $nchar16_t_080;
 var $3=HEAP8[($frm_nxt_181)];
 var $conv14=($3&255);
 var $cmp15=($conv14>>>0)>($Maxcode>>>0);
 if($cmp15){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=9;break;}
 case 9: 
 var $cmp19=(($3<<24)>>24)>-1;
 if($cmp19){label=10;break;}else{label=11;break;}
 case 10: 
 var $incdec_ptr=(($frm_nxt_181+1)|0);
 var $frm_nxt_2=$incdec_ptr;var $nchar16_t_1=$nchar16_t_080;label=43;break;
 case 11: 
 var $cmp22=($3&255)<194;
 if($cmp22){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=12;break;}
 case 12: 
 var $cmp26=($3&255)<224;
 if($cmp26){label=13;break;}else{label=17;break;}
 case 13: 
 var $sub_ptr_rhs_cast29=$frm_nxt_181;
 var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0);
 var $cmp31=($sub_ptr_sub30|0)<2;
 if($cmp31){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=14;break;}
 case 14: 
 var $arrayidx32=(($frm_nxt_181+1)|0);
 var $4=HEAP8[($arrayidx32)];
 var $conv33=($4&255);
 var $and34=$conv33&192;
 var $cmp35=($and34|0)==128;
 if($cmp35){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 15: 
 var $and39=$conv14<<6;
 var $shl=$and39&1984;
 var $and42=$conv33&63;
 var $or=$and42|$shl;
 var $cmp45=($or>>>0)>($Maxcode>>>0);
 if($cmp45){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=16;break;}
 case 16: 
 var $add_ptr48=(($frm_nxt_181+2)|0);
 var $frm_nxt_2=$add_ptr48;var $nchar16_t_1=$nchar16_t_080;label=43;break;
 case 17: 
 var $cmp51=($3&255)<240;
 if($cmp51){label=18;break;}else{label=29;break;}
 case 18: 
 var $sub_ptr_rhs_cast54=$frm_nxt_181;
 var $sub_ptr_sub55=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast54))|0);
 var $cmp56=($sub_ptr_sub55|0)<3;
 if($cmp56){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=19;break;}
 case 19: 
 var $arrayidx59=(($frm_nxt_181+1)|0);
 var $5=HEAP8[($arrayidx59)];
 var $arrayidx60=(($frm_nxt_181+2)|0);
 var $6=HEAP8[($arrayidx60)];
 if(($conv14|0)==224){ label=20;break;}else if(($conv14|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $and63=$5&-32;
 var $cmp64=(($and63<<24)>>24)==-96;
 if($cmp64){label=26;break;}else{label=21;break;}
 case 21: 
 var $sub_ptr_rhs_cast67=$frm;
 var $sub_ptr_sub68=((($sub_ptr_rhs_cast54)-($sub_ptr_rhs_cast67))|0);
 var $retval_0=$sub_ptr_sub68;label=45;break;
 case 22: 
 var $and72=$5&-32;
 var $cmp73=(($and72<<24)>>24)==-128;
 if($cmp73){label=26;break;}else{label=23;break;}
 case 23: 
 var $sub_ptr_rhs_cast76=$frm;
 var $sub_ptr_sub77=((($sub_ptr_rhs_cast54)-($sub_ptr_rhs_cast76))|0);
 var $retval_0=$sub_ptr_sub77;label=45;break;
 case 24: 
 var $and80=$5&-64;
 var $cmp81=(($and80<<24)>>24)==-128;
 if($cmp81){label=26;break;}else{label=25;break;}
 case 25: 
 var $sub_ptr_rhs_cast84=$frm;
 var $sub_ptr_sub85=((($sub_ptr_rhs_cast54)-($sub_ptr_rhs_cast84))|0);
 var $retval_0=$sub_ptr_sub85;label=45;break;
 case 26: 
 var $conv87=($6&255);
 var $and88=$conv87&192;
 var $cmp89=($and88|0)==128;
 if($cmp89){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 27: 
 var $and93=$conv14<<12;
 var $shl94=$and93&61440;
 var $conv95=($5&255);
 var $and96=$conv95<<6;
 var $shl97=$and96&4032;
 var $or98=$shl97|$shl94;
 var $and100=$conv87&63;
 var $or101=$or98|$and100;
 var $cmp102=($or101>>>0)>($Maxcode>>>0);
 if($cmp102){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=28;break;}
 case 28: 
 var $add_ptr105=(($frm_nxt_181+3)|0);
 var $frm_nxt_2=$add_ptr105;var $nchar16_t_1=$nchar16_t_080;label=43;break;
 case 29: 
 var $cmp108=($3&255)<245;
 if($cmp108){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 30: 
 var $sub_ptr_rhs_cast111=$frm_nxt_181;
 var $sub_ptr_sub112=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast111))|0);
 var $cmp113=($sub_ptr_sub112|0)<4;
 if($cmp113){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=31;break;}
 case 31: 
 var $sub=((($mx)-($nchar16_t_080))|0);
 var $cmp115=($sub>>>0)<2;
 if($cmp115){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=32;break;}
 case 32: 
 var $arrayidx119=(($frm_nxt_181+1)|0);
 var $7=HEAP8[($arrayidx119)];
 var $arrayidx121=(($frm_nxt_181+2)|0);
 var $8=HEAP8[($arrayidx121)];
 var $arrayidx122=(($frm_nxt_181+3)|0);
 var $9=HEAP8[($arrayidx122)];
 if(($conv14|0)==240){ label=33;break;}else if(($conv14|0)==244){ label=35;break;}else{label=37;break;}
 case 33: 
 var $_off=((($7)+(112))&255);
 var $10=($_off&255)<48;
 if($10){label=39;break;}else{label=34;break;}
 case 34: 
 var $sub_ptr_rhs_cast132=$frm;
 var $sub_ptr_sub133=((($sub_ptr_rhs_cast111)-($sub_ptr_rhs_cast132))|0);
 var $retval_0=$sub_ptr_sub133;label=45;break;
 case 35: 
 var $and137=$7&-16;
 var $cmp138=(($and137<<24)>>24)==-128;
 if($cmp138){label=39;break;}else{label=36;break;}
 case 36: 
 var $sub_ptr_rhs_cast141=$frm;
 var $sub_ptr_sub142=((($sub_ptr_rhs_cast111)-($sub_ptr_rhs_cast141))|0);
 var $retval_0=$sub_ptr_sub142;label=45;break;
 case 37: 
 var $and146=$7&-64;
 var $cmp147=(($and146<<24)>>24)==-128;
 if($cmp147){label=39;break;}else{label=38;break;}
 case 38: 
 var $sub_ptr_rhs_cast150=$frm;
 var $sub_ptr_sub151=((($sub_ptr_rhs_cast111)-($sub_ptr_rhs_cast150))|0);
 var $retval_0=$sub_ptr_sub151;label=45;break;
 case 39: 
 var $conv154=($8&255);
 var $and155=$conv154&192;
 var $cmp156=($and155|0)==128;
 if($cmp156){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 40: 
 var $conv158=($9&255);
 var $and159=$conv158&192;
 var $cmp160=($and159|0)==128;
 if($cmp160){label=41;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}
 case 41: 
 var $and164=$conv14<<18;
 var $shl165=$and164&1835008;
 var $conv166=($7&255);
 var $and167=$conv166<<12;
 var $shl168=$and167&258048;
 var $add=$shl168|$shl165;
 var $and170=$conv154<<6;
 var $shl171=$and170&4032;
 var $add172=$add|$shl171;
 var $and174=$conv158&63;
 var $add175=$add172|$and174;
 var $cmp176=($add175>>>0)>($Maxcode>>>0);
 if($cmp176){var $frm_nxt_1_lcssa=$frm_nxt_181;label=44;break;}else{label=42;break;}
 case 42: 
 var $inc=((($nchar16_t_080)+(1))|0);
 var $add_ptr179=(($frm_nxt_181+4)|0);
 var $frm_nxt_2=$add_ptr179;var $nchar16_t_1=$inc;label=43;break;
 case 43: 
 var $nchar16_t_1;
 var $frm_nxt_2;
 var $inc186=((($nchar16_t_1)+(1))|0);
 var $cmp12=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $cmp13=($inc186>>>0)<($mx>>>0);
 var $or_cond=$cmp12&$cmp13;
 if($or_cond){var $nchar16_t_080=$inc186;var $frm_nxt_181=$frm_nxt_2;label=8;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 44: 
 var $frm_nxt_1_lcssa;
 var $sub_ptr_lhs_cast187=$frm_nxt_1_lcssa;
 var $sub_ptr_rhs_cast188=$frm;
 var $sub_ptr_sub189=((($sub_ptr_lhs_cast187)-($sub_ptr_rhs_cast188))|0);
 var $retval_0=$sub_ptr_sub189;label=45;break;
 case 45: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $call=__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $1=HEAP32[(($_frm_nxt)>>2)];
 var $sub_ptr_lhs_cast=$1;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $add_ptr=(($frm+($sub_ptr_div<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $2=HEAP32[(($_to_nxt)>>2)];
 var $sub_ptr_lhs_cast2=$2;
 var $sub_ptr_rhs_cast3=$to;
 var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
 var $add_ptr5=(($to+$sub_ptr_sub4)|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr5;
 STACKTOP=sp;return $call;
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $and=$mode&2;
 var $tobool=($and|0)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$to_end;
 var $sub_ptr_rhs_cast=$to;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)<3;
 if($cmp){var $retval_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $incdec_ptr=(($to+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr;
 HEAP8[($to)]=-17;
 var $0=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr2=(($0+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr2;
 HEAP8[($0)]=-69;
 var $1=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr3=(($1+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr3;
 HEAP8[($1)]=-65;
 label=4;break;
 case 4: 
 var $2=HEAP32[(($frm_nxt)>>2)];
 var $cmp538=($2>>>0)<($frm_end>>>0);
 if($cmp538){label=5;break;}else{var $retval_0=0;label=19;break;}
 case 5: 
 var $sub_ptr_lhs_cast13=$to_end;
 var $3=$2;label=6;break;
 case 6: 
 var $3;
 var $4=HEAP32[(($3)>>2)];
 var $and6=$4&-2048;
 var $cmp7=($and6|0)==55296;
 var $cmp8=($4>>>0)>($Maxcode>>>0);
 var $or_cond=$cmp7|$cmp8;
 if($or_cond){var $retval_0=2;label=19;break;}else{label=7;break;}
 case 7: 
 var $cmp11=($4>>>0)<128;
 if($cmp11){label=8;break;}else{label=10;break;}
 case 8: 
 var $5=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast14=$5;
 var $sub_ptr_sub15=((($sub_ptr_lhs_cast13)-($sub_ptr_rhs_cast14))|0);
 var $cmp16=($sub_ptr_sub15|0)<1;
 if($cmp16){var $retval_0=1;label=19;break;}else{label=9;break;}
 case 9: 
 var $conv=(($4)&255);
 var $incdec_ptr19=(($5+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr19;
 HEAP8[($5)]=$conv;
 label=18;break;
 case 10: 
 var $cmp20=($4>>>0)<2048;
 if($cmp20){label=11;break;}else{label=13;break;}
 case 11: 
 var $6=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast23=$6;
 var $sub_ptr_sub24=((($sub_ptr_lhs_cast13)-($sub_ptr_rhs_cast23))|0);
 var $cmp25=($sub_ptr_sub24|0)<2;
 if($cmp25){var $retval_0=1;label=19;break;}else{label=12;break;}
 case 12: 
 var $shr=$4>>>6;
 var $or=$shr|192;
 var $conv28=(($or)&255);
 var $incdec_ptr29=(($6+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr29;
 HEAP8[($6)]=$conv28;
 var $and30=$4&63;
 var $or31=$and30|128;
 var $conv32=(($or31)&255);
 var $7=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr33=(($7+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr33;
 HEAP8[($7)]=$conv32;
 label=18;break;
 case 13: 
 var $cmp35=($4>>>0)<65536;
 var $8=HEAP32[(($to_nxt)>>2)];
 var $sub_ptr_rhs_cast38=$8;
 var $sub_ptr_sub39=((($sub_ptr_lhs_cast13)-($sub_ptr_rhs_cast38))|0);
 if($cmp35){label=14;break;}else{label=16;break;}
 case 14: 
 var $cmp40=($sub_ptr_sub39|0)<3;
 if($cmp40){var $retval_0=1;label=19;break;}else{label=15;break;}
 case 15: 
 var $shr43=$4>>>12;
 var $or44=$shr43|224;
 var $conv45=(($or44)&255);
 var $incdec_ptr46=(($8+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr46;
 HEAP8[($8)]=$conv45;
 var $and47=$4>>>6;
 var $shr48=$and47&63;
 var $or49=$shr48|128;
 var $conv50=(($or49)&255);
 var $9=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr51=(($9+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr51;
 HEAP8[($9)]=$conv50;
 var $and52=$4&63;
 var $or53=$and52|128;
 var $conv54=(($or53)&255);
 var $10=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr55=(($10+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr55;
 HEAP8[($10)]=$conv54;
 label=18;break;
 case 16: 
 var $cmp60=($sub_ptr_sub39|0)<4;
 if($cmp60){var $retval_0=1;label=19;break;}else{label=17;break;}
 case 17: 
 var $shr63=$4>>>18;
 var $or64=$shr63|240;
 var $conv65=(($or64)&255);
 var $incdec_ptr66=(($8+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr66;
 HEAP8[($8)]=$conv65;
 var $and67=$4>>>12;
 var $shr68=$and67&63;
 var $or69=$shr68|128;
 var $conv70=(($or69)&255);
 var $11=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr71=(($11+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr71;
 HEAP8[($11)]=$conv70;
 var $and72=$4>>>6;
 var $shr73=$and72&63;
 var $or74=$shr73|128;
 var $conv75=(($or74)&255);
 var $12=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr76=(($12+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr76;
 HEAP8[($12)]=$conv75;
 var $and77=$4&63;
 var $or78=$and77|128;
 var $conv79=(($or78)&255);
 var $13=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr80=(($13+1)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr80;
 HEAP8[($13)]=$conv79;
 label=18;break;
 case 18: 
 var $14=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr84=(($14+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr84;
 var $cmp5=($incdec_ptr84>>>0)<($frm_end>>>0);
 if($cmp5){var $3=$incdec_ptr84;label=6;break;}else{var $retval_0=0;label=19;break;}
 case 19: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_frm_nxt=sp;
 var $_to_nxt=(sp)+(8);
 HEAP32[(($_frm_nxt)>>2)]=$frm;
 HEAP32[(($_to_nxt)>>2)]=$to;
 var $call=__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0);
 var $1=HEAP32[(($_frm_nxt)>>2)];
 var $sub_ptr_lhs_cast=$1;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $add_ptr=(($frm+$sub_ptr_sub)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $2=HEAP32[(($_to_nxt)>>2)];
 var $sub_ptr_lhs_cast2=$2;
 var $sub_ptr_rhs_cast3=$to;
 var $sub_ptr_sub4=((($sub_ptr_lhs_cast2)-($sub_ptr_rhs_cast3))|0);
 var $sub_ptr_div=$sub_ptr_sub4>>2;
 var $add_ptr5=(($to+($sub_ptr_div<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$add_ptr5;
 STACKTOP=sp;return $call;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 var $and=$mode&4;
 var $tobool=($and|0)==0;
 var $_pre63=HEAP32[(($frm_nxt)>>2)];
 if($tobool){var $3=$_pre63;label=7;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$frm_end;
 var $sub_ptr_rhs_cast=$_pre63;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>2;
 if($cmp){label=3;break;}else{var $3=$_pre63;label=7;break;}
 case 3: 
 var $0=HEAP8[($_pre63)];
 var $cmp1=(($0<<24)>>24)==-17;
 if($cmp1){label=4;break;}else{var $3=$_pre63;label=7;break;}
 case 4: 
 var $arrayidx3=(($_pre63+1)|0);
 var $1=HEAP8[($arrayidx3)];
 var $cmp5=(($1<<24)>>24)==-69;
 if($cmp5){label=5;break;}else{var $3=$_pre63;label=7;break;}
 case 5: 
 var $arrayidx7=(($_pre63+2)|0);
 var $2=HEAP8[($arrayidx7)];
 var $cmp9=(($2<<24)>>24)==-65;
 if($cmp9){label=6;break;}else{var $3=$_pre63;label=7;break;}
 case 6: 
 var $add_ptr=(($_pre63+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr;
 var $3=$add_ptr;label=7;break;
 case 7: 
 var $3;
 var $cmp1260=($3>>>0)<($frm_end>>>0);
 if($cmp1260){label=8;break;}else{var $20=$3;label=39;break;}
 case 8: 
 var $sub_ptr_lhs_cast29=$frm_end;
 var $_pre=HEAP32[(($to_nxt)>>2)];
 var $5=$_pre;var $4=$3;label=9;break;
 case 9: 
 var $4;
 var $5;
 var $cmp13=($5>>>0)<($to_end>>>0);
 if($cmp13){label=10;break;}else{var $20=$4;label=39;break;}
 case 10: 
 var $6=HEAP8[($4)];
 var $conv14=($6&255);
 var $cmp15=(($6<<24)>>24)>-1;
 if($cmp15){label=11;break;}else{label=13;break;}
 case 11: 
 var $cmp18=($conv14>>>0)>($Maxcode>>>0);
 if($cmp18){var $retval_0=2;label=40;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($5)>>2)]=$conv14;
 var $7=HEAP32[(($frm_nxt)>>2)];
 var $incdec_ptr=(($7+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$incdec_ptr;
 label=38;break;
 case 13: 
 var $cmp23=($6&255)<194;
 if($cmp23){var $retval_0=2;label=40;break;}else{label=14;break;}
 case 14: 
 var $cmp27=($6&255)<224;
 if($cmp27){label=15;break;}else{label=19;break;}
 case 15: 
 var $sub_ptr_rhs_cast30=$4;
 var $sub_ptr_sub31=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast30))|0);
 var $cmp32=($sub_ptr_sub31|0)<2;
 if($cmp32){var $retval_0=1;label=40;break;}else{label=16;break;}
 case 16: 
 var $arrayidx35=(($4+1)|0);
 var $8=HEAP8[($arrayidx35)];
 var $conv36=($8&255);
 var $and37=$conv36&192;
 var $cmp38=($and37|0)==128;
 if($cmp38){label=17;break;}else{var $retval_0=2;label=40;break;}
 case 17: 
 var $and42=$conv14<<6;
 var $shl=$and42&1984;
 var $and44=$conv36&63;
 var $or=$and44|$shl;
 var $cmp45=($or>>>0)>($Maxcode>>>0);
 if($cmp45){var $retval_0=2;label=40;break;}else{label=18;break;}
 case 18: 
 HEAP32[(($5)>>2)]=$or;
 var $9=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr48=(($9+2)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr48;
 label=38;break;
 case 19: 
 var $cmp51=($6&255)<240;
 if($cmp51){label=20;break;}else{label=28;break;}
 case 20: 
 var $sub_ptr_rhs_cast54=$4;
 var $sub_ptr_sub55=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast54))|0);
 var $cmp56=($sub_ptr_sub55|0)<3;
 if($cmp56){var $retval_0=1;label=40;break;}else{label=21;break;}
 case 21: 
 var $arrayidx60=(($4+1)|0);
 var $10=HEAP8[($arrayidx60)];
 var $arrayidx61=(($4+2)|0);
 var $11=HEAP8[($arrayidx61)];
 if(($conv14|0)==224){ label=22;break;}else if(($conv14|0)==237){ label=23;break;}else{label=24;break;}
 case 22: 
 var $and64=$10&-32;
 var $cmp65=(($and64<<24)>>24)==-96;
 if($cmp65){label=25;break;}else{var $retval_0=2;label=40;break;}
 case 23: 
 var $and70=$10&-32;
 var $cmp71=(($and70<<24)>>24)==-128;
 if($cmp71){label=25;break;}else{var $retval_0=2;label=40;break;}
 case 24: 
 var $and75=$10&-64;
 var $cmp76=(($and75<<24)>>24)==-128;
 if($cmp76){label=25;break;}else{var $retval_0=2;label=40;break;}
 case 25: 
 var $conv79=($11&255);
 var $and80=$conv79&192;
 var $cmp81=($and80|0)==128;
 if($cmp81){label=26;break;}else{var $retval_0=2;label=40;break;}
 case 26: 
 var $and86=$conv14<<12;
 var $shl87=$and86&61440;
 var $conv88=($10&255);
 var $and89=$conv88<<6;
 var $shl90=$and89&4032;
 var $or91=$shl90|$shl87;
 var $and93=$conv79&63;
 var $or94=$or91|$and93;
 var $cmp95=($or94>>>0)>($Maxcode>>>0);
 if($cmp95){var $retval_0=2;label=40;break;}else{label=27;break;}
 case 27: 
 HEAP32[(($5)>>2)]=$or94;
 var $12=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr98=(($12+3)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr98;
 label=38;break;
 case 28: 
 var $cmp101=($6&255)<245;
 if($cmp101){label=29;break;}else{var $retval_0=2;label=40;break;}
 case 29: 
 var $sub_ptr_rhs_cast104=$4;
 var $sub_ptr_sub105=((($sub_ptr_lhs_cast29)-($sub_ptr_rhs_cast104))|0);
 var $cmp106=($sub_ptr_sub105|0)<4;
 if($cmp106){var $retval_0=1;label=40;break;}else{label=30;break;}
 case 30: 
 var $arrayidx110=(($4+1)|0);
 var $13=HEAP8[($arrayidx110)];
 var $arrayidx112=(($4+2)|0);
 var $14=HEAP8[($arrayidx112)];
 var $arrayidx113=(($4+3)|0);
 var $15=HEAP8[($arrayidx113)];
 if(($conv14|0)==240){ label=31;break;}else if(($conv14|0)==244){ label=32;break;}else{label=33;break;}
 case 31: 
 var $_off=((($13)+(112))&255);
 var $16=($_off&255)<48;
 if($16){label=34;break;}else{var $retval_0=2;label=40;break;}
 case 32: 
 var $and125=$13&-16;
 var $cmp126=(($and125<<24)>>24)==-128;
 if($cmp126){label=34;break;}else{var $retval_0=2;label=40;break;}
 case 33: 
 var $and131=$13&-64;
 var $cmp132=(($and131<<24)>>24)==-128;
 if($cmp132){label=34;break;}else{var $retval_0=2;label=40;break;}
 case 34: 
 var $conv136=($14&255);
 var $and137=$conv136&192;
 var $cmp138=($and137|0)==128;
 if($cmp138){label=35;break;}else{var $retval_0=2;label=40;break;}
 case 35: 
 var $conv139=($15&255);
 var $and140=$conv139&192;
 var $cmp141=($and140|0)==128;
 if($cmp141){label=36;break;}else{var $retval_0=2;label=40;break;}
 case 36: 
 var $and146=$conv14<<18;
 var $shl147=$and146&1835008;
 var $conv148=($13&255);
 var $and149=$conv148<<12;
 var $shl150=$and149&258048;
 var $or151=$shl150|$shl147;
 var $and153=$conv136<<6;
 var $shl154=$and153&4032;
 var $or155=$or151|$shl154;
 var $and157=$conv139&63;
 var $or158=$or155|$and157;
 var $cmp159=($or158>>>0)>($Maxcode>>>0);
 if($cmp159){var $retval_0=2;label=40;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($5)>>2)]=$or158;
 var $17=HEAP32[(($frm_nxt)>>2)];
 var $add_ptr162=(($17+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$add_ptr162;
 label=38;break;
 case 38: 
 var $18=HEAP32[(($to_nxt)>>2)];
 var $incdec_ptr169=(($18+4)|0);
 HEAP32[(($to_nxt)>>2)]=$incdec_ptr169;
 var $19=HEAP32[(($frm_nxt)>>2)];
 var $cmp12=($19>>>0)<($frm_end>>>0);
 if($cmp12){var $5=$incdec_ptr169;var $4=$19;label=9;break;}else{var $20=$19;label=39;break;}
 case 39: 
 var $20;
 var $cmp170=($20>>>0)<($frm_end>>>0);
 var $cond=($cmp170&1);
 var $retval_0=$cond;label=40;break;
 case 40: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 var $call=__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0);
 return $call;
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $and=$mode&4;
 var $tobool=($and|0)==0;
 if($tobool){var $frm_nxt_1_ph=$frm;label=6;break;}else{label=2;break;}
 case 2: 
 var $sub_ptr_lhs_cast=$frm_end;
 var $sub_ptr_rhs_cast=$frm;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $cmp=($sub_ptr_sub|0)>2;
 if($cmp){label=3;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 3: 
 var $0=HEAP8[($frm)];
 var $cmp1=(($0<<24)>>24)==-17;
 if($cmp1){label=4;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 4: 
 var $arrayidx3=(($frm+1)|0);
 var $1=HEAP8[($arrayidx3)];
 var $cmp5=(($1<<24)>>24)==-69;
 if($cmp5){label=5;break;}else{var $frm_nxt_1_ph=$frm;label=6;break;}
 case 5: 
 var $arrayidx7=(($frm+2)|0);
 var $2=HEAP8[($arrayidx7)];
 var $cmp9=(($2<<24)>>24)==-65;
 var $add_ptr=(($frm+3)|0);
 var $add_ptr_frm=($cmp9?$add_ptr:$frm);
 var $frm_nxt_1_ph=$add_ptr_frm;label=6;break;
 case 6: 
 var $frm_nxt_1_ph;
 var $cmp1273=($frm_nxt_1_ph>>>0)<($frm_end>>>0);
 var $cmp1374=($mx|0)!=0;
 var $or_cond75=$cmp1273&$cmp1374;
 if($or_cond75){label=7;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_1_ph;label=44;break;}
 case 7: 
 var $sub_ptr_lhs_cast28=$frm_end;
 var $nchar32_t_076=1;var $frm_nxt_177=$frm_nxt_1_ph;label=8;break;
 case 8: 
 var $frm_nxt_177;
 var $nchar32_t_076;
 var $3=HEAP8[($frm_nxt_177)];
 var $conv14=($3&255);
 var $cmp15=(($3<<24)>>24)>-1;
 if($cmp15){label=9;break;}else{label=11;break;}
 case 9: 
 var $cmp18=($conv14>>>0)>($Maxcode>>>0);
 if($cmp18){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=10;break;}
 case 10: 
 var $incdec_ptr=(($frm_nxt_177+1)|0);
 var $frm_nxt_2=$incdec_ptr;label=42;break;
 case 11: 
 var $cmp22=($3&255)<194;
 if($cmp22){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=12;break;}
 case 12: 
 var $cmp26=($3&255)<224;
 if($cmp26){label=13;break;}else{label=17;break;}
 case 13: 
 var $sub_ptr_rhs_cast29=$frm_nxt_177;
 var $sub_ptr_sub30=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast29))|0);
 var $cmp31=($sub_ptr_sub30|0)<2;
 if($cmp31){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=14;break;}
 case 14: 
 var $arrayidx32=(($frm_nxt_177+1)|0);
 var $4=HEAP8[($arrayidx32)];
 var $conv33=($4&255);
 var $and34=$conv33&192;
 var $cmp35=($and34|0)==128;
 if($cmp35){label=15;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}
 case 15: 
 var $and39=$conv14<<6;
 var $shl=$and39&1984;
 var $and42=$conv33&63;
 var $or=$and42|$shl;
 var $cmp43=($or>>>0)>($Maxcode>>>0);
 if($cmp43){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=16;break;}
 case 16: 
 var $add_ptr46=(($frm_nxt_177+2)|0);
 var $frm_nxt_2=$add_ptr46;label=42;break;
 case 17: 
 var $cmp49=($3&255)<240;
 if($cmp49){label=18;break;}else{label=29;break;}
 case 18: 
 var $sub_ptr_rhs_cast52=$frm_nxt_177;
 var $sub_ptr_sub53=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast52))|0);
 var $cmp54=($sub_ptr_sub53|0)<3;
 if($cmp54){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=19;break;}
 case 19: 
 var $arrayidx57=(($frm_nxt_177+1)|0);
 var $5=HEAP8[($arrayidx57)];
 var $arrayidx58=(($frm_nxt_177+2)|0);
 var $6=HEAP8[($arrayidx58)];
 if(($conv14|0)==224){ label=20;break;}else if(($conv14|0)==237){ label=22;break;}else{label=24;break;}
 case 20: 
 var $and61=$5&-32;
 var $cmp62=(($and61<<24)>>24)==-96;
 if($cmp62){label=26;break;}else{label=21;break;}
 case 21: 
 var $sub_ptr_rhs_cast65=$frm;
 var $sub_ptr_sub66=((($sub_ptr_rhs_cast52)-($sub_ptr_rhs_cast65))|0);
 var $retval_0=$sub_ptr_sub66;label=45;break;
 case 22: 
 var $and70=$5&-32;
 var $cmp71=(($and70<<24)>>24)==-128;
 if($cmp71){label=26;break;}else{label=23;break;}
 case 23: 
 var $sub_ptr_rhs_cast74=$frm;
 var $sub_ptr_sub75=((($sub_ptr_rhs_cast52)-($sub_ptr_rhs_cast74))|0);
 var $retval_0=$sub_ptr_sub75;label=45;break;
 case 24: 
 var $and78=$5&-64;
 var $cmp79=(($and78<<24)>>24)==-128;
 if($cmp79){label=26;break;}else{label=25;break;}
 case 25: 
 var $sub_ptr_rhs_cast82=$frm;
 var $sub_ptr_sub83=((($sub_ptr_rhs_cast52)-($sub_ptr_rhs_cast82))|0);
 var $retval_0=$sub_ptr_sub83;label=45;break;
 case 26: 
 var $conv85=($6&255);
 var $and86=$conv85&192;
 var $cmp87=($and86|0)==128;
 if($cmp87){label=27;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}
 case 27: 
 var $and91=$conv14<<12;
 var $shl92=$and91&61440;
 var $conv93=($5&255);
 var $and94=$conv93<<6;
 var $shl95=$and94&4032;
 var $or96=$shl95|$shl92;
 var $and98=$conv85&63;
 var $or99=$or96|$and98;
 var $cmp100=($or99>>>0)>($Maxcode>>>0);
 if($cmp100){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=28;break;}
 case 28: 
 var $add_ptr103=(($frm_nxt_177+3)|0);
 var $frm_nxt_2=$add_ptr103;label=42;break;
 case 29: 
 var $cmp106=($3&255)<245;
 if($cmp106){label=30;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}
 case 30: 
 var $sub_ptr_rhs_cast109=$frm_nxt_177;
 var $sub_ptr_sub110=((($sub_ptr_lhs_cast28)-($sub_ptr_rhs_cast109))|0);
 var $cmp111=($sub_ptr_sub110|0)<4;
 if($cmp111){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=31;break;}
 case 31: 
 var $arrayidx115=(($frm_nxt_177+1)|0);
 var $7=HEAP8[($arrayidx115)];
 var $arrayidx117=(($frm_nxt_177+2)|0);
 var $8=HEAP8[($arrayidx117)];
 var $arrayidx118=(($frm_nxt_177+3)|0);
 var $9=HEAP8[($arrayidx118)];
 if(($conv14|0)==240){ label=32;break;}else if(($conv14|0)==244){ label=34;break;}else{label=36;break;}
 case 32: 
 var $_off=((($7)+(112))&255);
 var $10=($_off&255)<48;
 if($10){label=38;break;}else{label=33;break;}
 case 33: 
 var $sub_ptr_rhs_cast128=$frm;
 var $sub_ptr_sub129=((($sub_ptr_rhs_cast109)-($sub_ptr_rhs_cast128))|0);
 var $retval_0=$sub_ptr_sub129;label=45;break;
 case 34: 
 var $and133=$7&-16;
 var $cmp134=(($and133<<24)>>24)==-128;
 if($cmp134){label=38;break;}else{label=35;break;}
 case 35: 
 var $sub_ptr_rhs_cast137=$frm;
 var $sub_ptr_sub138=((($sub_ptr_rhs_cast109)-($sub_ptr_rhs_cast137))|0);
 var $retval_0=$sub_ptr_sub138;label=45;break;
 case 36: 
 var $and142=$7&-64;
 var $cmp143=(($and142<<24)>>24)==-128;
 if($cmp143){label=38;break;}else{label=37;break;}
 case 37: 
 var $sub_ptr_rhs_cast146=$frm;
 var $sub_ptr_sub147=((($sub_ptr_rhs_cast109)-($sub_ptr_rhs_cast146))|0);
 var $retval_0=$sub_ptr_sub147;label=45;break;
 case 38: 
 var $conv150=($8&255);
 var $and151=$conv150&192;
 var $cmp152=($and151|0)==128;
 if($cmp152){label=39;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}
 case 39: 
 var $conv154=($9&255);
 var $and155=$conv154&192;
 var $cmp156=($and155|0)==128;
 if($cmp156){label=40;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}
 case 40: 
 var $and160=$conv14<<18;
 var $shl161=$and160&1835008;
 var $conv162=($7&255);
 var $and163=$conv162<<12;
 var $shl164=$and163&258048;
 var $or165=$shl164|$shl161;
 var $and167=$conv150<<6;
 var $shl168=$and167&4032;
 var $or169=$or165|$shl168;
 var $and171=$conv154&63;
 var $or172=$or169|$and171;
 var $cmp173=($or172>>>0)>($Maxcode>>>0);
 if($cmp173){var $frm_nxt_1_lcssa=$frm_nxt_177;label=44;break;}else{label=41;break;}
 case 41: 
 var $add_ptr176=(($frm_nxt_177+4)|0);
 var $frm_nxt_2=$add_ptr176;label=42;break;
 case 42: 
 var $frm_nxt_2;
 var $cmp12=($frm_nxt_2>>>0)<($frm_end>>>0);
 var $cmp13=($nchar32_t_076>>>0)<($mx>>>0);
 var $or_cond=$cmp12&$cmp13;
 if($or_cond){label=43;break;}else{var $frm_nxt_1_lcssa=$frm_nxt_2;label=44;break;}
 case 43: 
 var $phitmp=((($nchar32_t_076)+(1))|0);
 var $nchar32_t_076=$phitmp;var $frm_nxt_177=$frm_nxt_2;label=8;break;
 case 44: 
 var $frm_nxt_1_lcssa;
 var $sub_ptr_lhs_cast183=$frm_nxt_1_lcssa;
 var $sub_ptr_rhs_cast184=$frm;
 var $sub_ptr_sub185=((($sub_ptr_lhs_cast183)-($sub_ptr_rhs_cast184))|0);
 var $retval_0=$sub_ptr_sub185;label=45;break;
 case 45: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3088;
 var $__grouping__i=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping__i);
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3088;
 var $__grouping_=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping_);
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3040;
 var $__grouping__i=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping__i);
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 var $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=3040;
 var $__grouping_=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping_);
 var $1=(($this)|0);
 __ZNSt3__114__shared_countD2Ev($1);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;
 var $__decimal_point_=(($this+8)|0);
 var $0=HEAP8[($__decimal_point_)];
 return $0;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;
 var $__decimal_point_=(($this+8)|0);
 var $0=HEAP32[(($__decimal_point_)>>2)];
 return $0;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;
 var $__thousands_sep_=(($this+9)|0);
 var $0=HEAP8[($__thousands_sep_)];
 return $0;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;
 var $__thousands_sep_=(($this+12)|0);
 var $0=HEAP32[(($__thousands_sep_)>>2)];
 return $0;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;
 var $__grouping_=(($this+12)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$__grouping_);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;
 var $__grouping_=(($this+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg_result,$__grouping_);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1328,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;
 var $call_i_i_i=_wcslen(1304);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,1304,$call_i_i_i);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,1296,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;
 var $call_i_i_i=_wcslen(1264);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg_result,1264,$call_i_i_i);
 return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276432)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=21;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276432);
 var $tobool=($1|0)==0;
 if($tobool){label=21;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276320)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276320);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11728, 0, 168)|0;
 var $4=_atexit(808,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i19_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11728,1576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $call_i23_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11740,1568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $call_i27_i3=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11752,1560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $call_i31_i4=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11764,1544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $call_i35_i5=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11776,1528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $call_i39_i6=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11788,1520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $call_i43_i7=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11800,1504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $call_i47_i8=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11812,1496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $call_i51_i9=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11824,1488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $call_i55_i10=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11836,1480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $call_i59_i11=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11848,1472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $call_i63_i12=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11860,1464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $call_i67_i13=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11872,1432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $call_i_i14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11884,1424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((12688)>>2)]=11728;
 label=21;break;
 case 21: 
 var $5=HEAP32[((12688)>>2)];
 return $5;
 case 22: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276376)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=21;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276376);
 var $tobool=($1|0)==0;
 if($tobool){label=21;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276296)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276296);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(10984, 0, 168)|0;
 var $4=_atexit(406,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i19_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10984,1952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 var $call_i23_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10996,1920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 var $call_i27_i3=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11008,1888) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 var $call_i31_i4=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11020,1848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 var $call_i35_i5=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11032,1808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 var $call_i39_i6=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11044,1776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 var $call_i43_i7=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11056,1736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 var $call_i47_i8=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11068,1720) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 var $call_i51_i9=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11080,1664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $call_i55_i10=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11092,1648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 var $call_i59_i11=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11104,1632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 var $call_i63_i12=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11116,1616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 var $call_i67_i13=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11128,1600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 var $call_i_i14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11140,1584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((12600)>>2)]=10984;
 label=21;break;
 case 21: 
 var $5=HEAP32[((12600)>>2)];
 return $5;
 case 22: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276424)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=31;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276424);
 var $tobool=($1|0)==0;
 if($tobool){label=31;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276312)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276312);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11440, 0, 288)|0;
 var $4=_atexit(450,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i29_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11440,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $call_i33_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11452,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $call_i37_i3=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11464,264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $call_i41_i4=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11476,256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $call_i45_i5=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11488,248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $call_i49_i6=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11500,240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $call_i53_i7=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11512,232) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $call_i57_i8=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11524,224) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $call_i61_i9=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11536,168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $call_i65_i10=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11548,160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $call_i69_i11=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11560,144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $call_i73_i12=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11572,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $call_i77_i13=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11584,120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $call_i81_i14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11596,112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $call_i85_i15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11608,104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $call_i89_i16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11620,96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $call_i93_i17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11632,248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $call_i97_i18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11644,88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $call_i101_i19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11656,80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $call_i105_i20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11668,2016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $call_i109_i21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11680,2008) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $call_i113_i22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11692,2000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $call_i117_i23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11704,1992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $call_i_i24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11716,1984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((12680)>>2)]=11440;
 label=31;break;
 case 31: 
 var $5=HEAP32[((12680)>>2)];
 return $5;
 case 32: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276368)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=31;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276368);
 var $tobool=($1|0)==0;
 if($tobool){label=31;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276288)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276288);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(10696, 0, 288)|0;
 var $4=_atexit(348,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i29_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10696,832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 var $call_i33_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10708,792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 var $call_i37_i3=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10720,768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $call_i41_i4=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10732,736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 var $call_i45_i5=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10744,424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 var $call_i49_i6=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10756,712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $call_i53_i7=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10768,688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 var $call_i57_i8=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10780,656) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 var $call_i61_i9=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10792,616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 var $call_i65_i10=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10804,584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 var $call_i69_i11=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10816,544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 var $call_i73_i12=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10828,504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 var $call_i77_i13=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10840,488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 var $call_i81_i14=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10852,472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 var $call_i85_i15=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10864,456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 var $call_i89_i16=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10876,440) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 var $call_i93_i17=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10888,424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 var $call_i97_i18=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10900,408) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 var $call_i101_i19=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10912,392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 var $call_i105_i20=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10924,376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $call_i109_i21=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10936,360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 var $call_i113_i22=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10948,344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $call_i117_i23=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10960,328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $call_i_i24=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10972,312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((12592)>>2)]=10696;
 label=31;break;
 case 31: 
 var $5=HEAP32[((12592)>>2)];
 return $5;
 case 32: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276440)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=9;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276440);
 var $tobool=($1|0)==0;
 if($tobool){label=9;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276328)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276328);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11896, 0, 288)|0;
 var $4=_atexit(344,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i7_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11896,872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $call_i_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11908,864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((12696)>>2)]=11896;
 label=9;break;
 case 9: 
 var $5=HEAP32[((12696)>>2)];
 return $5;
 case 10: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276384)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=9;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276384);
 var $tobool=($1|0)==0;
 if($tobool){label=9;break;}else{label=3;break;}
 case 3: 
 var $2=HEAP8[(276304)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=4;break;}else{label=6;break;}
 case 4: 
 var $3=___cxa_guard_acquire(276304);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(11152, 0, 288)|0;
 var $4=_atexit(760,0,___dso_handle);
 label=6;break;
 case 6: 
 var $call_i7_i1=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11152,896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $call_i_i2=(function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11164,880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((12608)>>2)]=11152;
 label=9;break;
 case 9: 
 var $5=HEAP32[((12608)>>2)];
 return $5;
 case 10: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1); var $6$1 = tempRet0;
 ___resumeException($6$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276448)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=5;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276448);
 var $tobool=($1|0)==0;
 if($tobool){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12704,1240,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $2=_atexit((800),12704,___dso_handle);
 label=5;break;
 case 5: 
 return 12704;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276392)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=6;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276392);
 var $tobool=($1|0)==0;
 if($tobool){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i_i3=(function() { try { __THREW__ = 0; return _wcslen(1200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12616,1200,$call_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $2=_atexit((530),12616,___dso_handle);
 label=6;break;
 case 6: 
 return 12616;
 case 7: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276472)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=5;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276472);
 var $tobool=($1|0)==0;
 if($tobool){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12752,1184,8) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $2=_atexit((800),12752,___dso_handle);
 label=5;break;
 case 5: 
 return 12752;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276416)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=6;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276416);
 var $tobool=($1|0)==0;
 if($tobool){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i_i3=(function() { try { __THREW__ = 0; return _wcslen(1128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12664,1128,$call_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $2=_atexit((530),12664,___dso_handle);
 label=6;break;
 case 6: 
 return 12664;
 case 7: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276464)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=5;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276464);
 var $tobool=($1|0)==0;
 if($tobool){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12736,1104,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $2=_atexit((800),12736,___dso_handle);
 label=5;break;
 case 5: 
 return 12736;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276408)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=6;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276408);
 var $tobool=($1|0)==0;
 if($tobool){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i_i3=(function() { try { __THREW__ = 0; return _wcslen(1016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12648,1016,$call_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $2=_atexit((530),12648,___dso_handle);
 label=6;break;
 case 6: 
 return 12648;
 case 7: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276456)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=5;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276456);
 var $tobool=($1|0)==0;
 if($tobool){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(12720,1000,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $2=_atexit((800),12720,___dso_handle);
 label=5;break;
 case 5: 
 return 12720;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP8[(276400)];
 var $guard_uninitialized=(($0<<24)>>24)==0;
 if($guard_uninitialized){label=2;break;}else{label=6;break;}
 case 2: 
 var $1=___cxa_guard_acquire(276400);
 var $tobool=($1|0)==0;
 if($tobool){label=6;break;}else{label=3;break;}
 case 3: 
 var $call_i_i_i3=(function() { try { __THREW__ = 0; return _wcslen(952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(12632,952,$call_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=7;break; }
 case 5: 
 var $2=_atexit((530),12632,___dso_handle);
 label=6;break;
 case 6: 
 return 12632;
 case 7: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=13;break;}else{label=2;break;}
 case 2: 
 var $call=___errno_location();
 var $0=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 7: 
 var $4=HEAP32[((12216)>>2)];
 var $call3=_strtold_l($__a,$__p2,$4);
 var $5=HEAP32[(($call)>>2)];
 var $cmp5=($5|0)==0;
 if($cmp5){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($call)>>2)]=$0;
 label=9;break;
 case 9: 
 var $6=HEAP32[(($__p2)>>2)];
 var $cmp8=($6|0)==($__a_end|0);
 if($cmp8){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=14;break;
 case 11: 
 var $cmp10=($5|0)==34;
 if($cmp10){label=12;break;}else{var $retval_0=$call3;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=$call3;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=14;break;
 case 14: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=13;break;}else{label=2;break;}
 case 2: 
 var $call=___errno_location();
 var $0=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 7: 
 var $4=HEAP32[((12216)>>2)];
 var $call3=_strtold_l($__a,$__p2,$4);
 var $5=HEAP32[(($call)>>2)];
 var $cmp5=($5|0)==0;
 if($cmp5){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($call)>>2)]=$0;
 label=9;break;
 case 9: 
 var $6=HEAP32[(($__p2)>>2)];
 var $cmp8=($6|0)==($__a_end|0);
 if($cmp8){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=14;break;
 case 11: 
 var $cmp10=($5|0)==34;
 if($cmp10){label=12;break;}else{var $retval_0=$call3;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=$call3;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=14;break;
 case 14: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=14;break;}else{label=2;break;}
 case 2: 
 var $call=___errno_location();
 var $0=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 7: 
 var $4=HEAP32[((12216)>>2)];
 var $call3=_strtold_l($__a,$__p2,$4);
 var $5=HEAP32[(($call)>>2)];
 var $cmp5=($5|0)==0;
 if($cmp5){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($call)>>2)]=$0;
 label=9;break;
 case 9: 
 var $6=HEAP32[(($__p2)>>2)];
 var $cmp8=($6|0)==($__a_end|0);
 if($cmp8){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=15;break;
 case 11: 
 var $cmp10=($5|0)==34;
 if($cmp10){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $conv=$call3;
 var $retval_0=$conv;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=15;break;
 case 15: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=15;break;}else{label=2;break;}
 case 2: 
 var $0=HEAP8[($__a)];
 var $cmp1=(($0<<24)>>24)==45;
 if($cmp1){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=0;var $retval_0$0=0;label=16;break;
 case 4: 
 var $call=___errno_location();
 var $1=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=5;break;}else{label=9;break;}
 case 5: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=9;break;}else{label=6;break;}
 case 6: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((12216)>>2)]=$call_i;
 label=9;break;
 case 8: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 9: 
 var $5=HEAP32[((12216)>>2)];
 var $call5$0=_strtoull($__a,$__p2,$__base,$5);
 var $call5$1=tempRet0;
 var $6=HEAP32[(($call)>>2)];
 var $cmp7=($6|0)==0;
 if($cmp7){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($call)>>2)]=$1;
 label=11;break;
 case 11: 
 var $7=HEAP32[(($__p2)>>2)];
 var $cmp11=($7|0)==($__a_end|0);
 if($cmp11){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=0;var $retval_0$0=0;label=16;break;
 case 13: 
 var $cmp13=($6|0)==34;
 if($cmp13){label=14;break;}else{var $retval_0$1=$call5$1;var $retval_0$0=$call5$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=-1;var $retval_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=0;var $retval_0$0=0;label=16;break;
 case 16: 
 var $retval_0$0;
 var $retval_0$1;
 STACKTOP=sp;return (tempRet0=$retval_0$1,$retval_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=16;break;}else{label=2;break;}
 case 2: 
 var $0=HEAP8[($__a)];
 var $cmp1=(($0<<24)>>24)==45;
 if($cmp1){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 4: 
 var $call=___errno_location();
 var $1=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=5;break;}else{label=9;break;}
 case 5: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=9;break;}else{label=6;break;}
 case 6: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((12216)>>2)]=$call_i;
 label=9;break;
 case 8: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 9: 
 var $5=HEAP32[((12216)>>2)];
 var $call5$0=_strtoull($__a,$__p2,$__base,$5);
 var $call5$1=tempRet0;
 var $6=HEAP32[(($call)>>2)];
 var $cmp7=($6|0)==0;
 if($cmp7){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($call)>>2)]=$1;
 label=11;break;
 case 11: 
 var $7=HEAP32[(($__p2)>>2)];
 var $cmp11=($7|0)==($__a_end|0);
 if($cmp11){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 13: 
 var $cmp13=($6|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $cmp16=(($call5$1>>>0) > ($$etemp$0$1>>>0)) | (((($call5$1>>>0) == ($$etemp$0$1>>>0) & ($call5$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$cmp13|$cmp16;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=-1;label=17;break;
 case 15: 
 var $conv21$0=$call5$0;
 var $conv21=$conv21$0;
 var $retval_0=$conv21;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 17: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=16;break;}else{label=2;break;}
 case 2: 
 var $0=HEAP8[($__a)];
 var $cmp1=(($0<<24)>>24)==45;
 if($cmp1){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 4: 
 var $call=___errno_location();
 var $1=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=5;break;}else{label=9;break;}
 case 5: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=9;break;}else{label=6;break;}
 case 6: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((12216)>>2)]=$call_i;
 label=9;break;
 case 8: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 9: 
 var $5=HEAP32[((12216)>>2)];
 var $call5$0=_strtoull($__a,$__p2,$__base,$5);
 var $call5$1=tempRet0;
 var $6=HEAP32[(($call)>>2)];
 var $cmp7=($6|0)==0;
 if($cmp7){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($call)>>2)]=$1;
 label=11;break;
 case 11: 
 var $7=HEAP32[(($__p2)>>2)];
 var $cmp11=($7|0)==($__a_end|0);
 if($cmp11){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 13: 
 var $cmp13=($6|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $cmp16=(($call5$1>>>0) > ($$etemp$0$1>>>0)) | (((($call5$1>>>0) == ($$etemp$0$1>>>0) & ($call5$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$cmp13|$cmp16;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=-1;label=17;break;
 case 15: 
 var $conv21$0=$call5$0;
 var $conv21=$conv21$0;
 var $retval_0=$conv21;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 17: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=16;break;}else{label=2;break;}
 case 2: 
 var $0=HEAP8[($__a)];
 var $cmp1=(($0<<24)>>24)==45;
 if($cmp1){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 4: 
 var $call=___errno_location();
 var $1=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $2=HEAP8[(276352)];
 var $guard_uninitialized_i=(($2<<24)>>24)==0;
 if($guard_uninitialized_i){label=5;break;}else{label=9;break;}
 case 5: 
 var $3=___cxa_guard_acquire(276352);
 var $tobool_i=($3|0)==0;
 if($tobool_i){label=9;break;}else{label=6;break;}
 case 6: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((12216)>>2)]=$call_i;
 label=9;break;
 case 8: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1); var $4$1 = tempRet0;
 ___resumeException($4$0)
 case 9: 
 var $5=HEAP32[((12216)>>2)];
 var $call5$0=_strtoull($__a,$__p2,$__base,$5);
 var $call5$1=tempRet0;
 var $6=HEAP32[(($call)>>2)];
 var $cmp7=($6|0)==0;
 if($cmp7){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($call)>>2)]=$1;
 label=11;break;
 case 11: 
 var $7=HEAP32[(($__p2)>>2)];
 var $cmp11=($7|0)==($__a_end|0);
 if($cmp11){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 13: 
 var $cmp13=($6|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $cmp16=(($call5$1>>>0) > ($$etemp$0$1>>>0)) | (((($call5$1>>>0) == ($$etemp$0$1>>>0) & ($call5$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$cmp13|$cmp16;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=-1;label=17;break;
 case 15: 
 var $conv21$0=$call5$0;
 var $conv21=$conv21$0&65535;
 var $retval_0=$conv21;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=17;break;
 case 17: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=13;break;}else{label=2;break;}
 case 2: 
 var $call=___errno_location();
 var $0=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 7: 
 var $4=HEAP32[((12216)>>2)];
 var $call3$0=_strtoll($__a,$__p2,$__base,$4);
 var $call3$1=tempRet0;
 var $5=HEAP32[(($call)>>2)];
 var $cmp5=($5|0)==0;
 if($cmp5){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($call)>>2)]=$0;
 label=9;break;
 case 9: 
 var $6=HEAP32[(($__p2)>>2)];
 var $cmp8=($6|0)==($__a_end|0);
 if($cmp8){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=0;var $retval_0$0=0;label=14;break;
 case 11: 
 var $cmp10=($5|0)==34;
 if($cmp10){label=12;break;}else{var $retval_0$1=$call3$1;var $retval_0$0=$call3$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $cmp17=(($call3$1|0) > ($$etemp$0$1|0)) | (((($call3$1|0) == ($$etemp$0$1|0) & ($call3$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($cmp17?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($cmp17?$$etemp$1$1:$$etemp$2$1);
 var $retval_0$1=$_$1;var $retval_0$0=$_$0;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0$1=0;var $retval_0$0=0;label=14;break;
 case 14: 
 var $retval_0$0;
 var $retval_0$1;
 STACKTOP=sp;return (tempRet0=$retval_0$1,$retval_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $cmp=($__a|0)==($__a_end|0);
 if($cmp){label=14;break;}else{label=2;break;}
 case 2: 
 var $call=___errno_location();
 var $0=HEAP32[(($call)>>2)];
 HEAP32[(($call)>>2)]=0;
 var $1=HEAP8[(276352)];
 var $guard_uninitialized_i=(($1<<24)>>24)==0;
 if($guard_uninitialized_i){label=3;break;}else{label=7;break;}
 case 3: 
 var $2=___cxa_guard_acquire(276352);
 var $tobool_i=($2|0)==0;
 if($tobool_i){label=7;break;}else{label=4;break;}
 case 4: 
 var $call_i=(function() { try { __THREW__ = 0; return _newlocale(2147483647,1384,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((12216)>>2)]=$call_i;
 label=7;break;
 case 6: 
 var $3$0 = ___cxa_find_matching_catch(-1, -1); var $3$1 = tempRet0;
 ___resumeException($3$0)
 case 7: 
 var $4=HEAP32[((12216)>>2)];
 var $call3$0=_strtoll($__a,$__p2,$__base,$4);
 var $call3$1=tempRet0;
 var $5=HEAP32[(($call)>>2)];
 var $cmp5=($5|0)==0;
 if($cmp5){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($call)>>2)]=$0;
 label=9;break;
 case 9: 
 var $6=HEAP32[(($__p2)>>2)];
 var $cmp8=($6|0)==($__a_end|0);
 if($cmp8){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=15;break;
 case 11: 
 var $cmp10=($5|0)==34;
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $cmp12=(($call3$1|0) < ($$etemp$0$1|0)) | (((($call3$1|0) == ($$etemp$0$1|0) & ($call3$0>>>0) <  ($$etemp$0$0>>>0))));
 var $or_cond=$cmp10|$cmp12;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $cmp16=(($call3$1|0) > ($$etemp$1$1|0)) | (((($call3$1|0) == ($$etemp$1$1|0) & ($call3$0>>>0) >  ($$etemp$1$0>>>0))));
 var $or_cond9=$or_cond|$cmp16;
 if($or_cond9){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $cmp18=(($call3$1|0) > ($$etemp$2$1|0)) | (((($call3$1|0) == ($$etemp$2$1|0) & ($call3$0>>>0) >  ($$etemp$2$0>>>0))));
 var $_=($cmp18?2147483647:-2147483648);
 var $retval_0=$_;label=15;break;
 case 13: 
 var $conv25$0=$call3$0;
 var $conv25=$conv25$0;
 var $retval_0=$conv25;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $retval_0=0;label=15;break;
 case 15: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $value_i_i_i_i_idx=$__vp;
 var $value_i_i_i_i_idx_val=HEAP32[(($value_i_i_i_i_idx)>>2)];
 var $value_i_i_i_i_idx1=(($__vp+4)|0);
 var $0=$value_i_i_i_i_idx1;
 var $ld$0$0=(($0)|0);
 var $value_i_i_i_i_idx1_val$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($0+4)|0);
 var $value_i_i_i_i_idx1_val$1=HEAP32[(($ld$1$1)>>2)];
 var $memptr_adj_i=$value_i_i_i_i_idx1_val$1;
 var $1=$value_i_i_i_i_idx_val;
 var $2=(($1+$memptr_adj_i)|0);
 var $this_adjusted_i=$2;
 var $memptr_ptr_i=$value_i_i_i_i_idx1_val$0;
 var $3=$memptr_ptr_i&1;
 var $memptr_isvirtual_i=($3|0)==0;
 if($memptr_isvirtual_i){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$2;
 var $memptr_vtable_i=HEAP32[(($4)>>2)];
 var $5=((($memptr_ptr_i)-(1))|0);
 var $6=(($memptr_vtable_i+$5)|0);
 var $7=$6;
 var $memptr_virtualfn_i=HEAP32[(($7)>>2)];
 var $8=$memptr_virtualfn_i;label=4;break;
 case 3: 
 var $memptr_nonvirtualfn_i=$memptr_ptr_i;
 var $8=$memptr_nonvirtualfn_i;label=4;break;
 case 4: 
 var $8;
 FUNCTION_TABLE[$8]($this_adjusted_i);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__first__i_i_i=(($this+8)|0);
 var $0=HEAP32[(($__first__i_i_i)>>2)];
 var $__end_=(($this+4)|0);
 var $1=HEAP32[(($__end_)>>2)];
 var $sub_ptr_lhs_cast=$0;
 var $sub_ptr_rhs_cast=$1;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $cmp=($sub_ptr_div>>>0)<($__n>>>0);
 if($cmp){label=5;break;}else{var $__n_addr_0_i=$__n;var $2=$1;label=2;break;}
 case 2: 
 var $2;
 var $__n_addr_0_i;
 var $new_isnull_i_i_i=($2|0)==0;
 if($new_isnull_i_i_i){var $3=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($2)>>2)]=0;
 var $_pre2_i=HEAP32[(($__end_)>>2)];
 var $3=$_pre2_i;label=4;break;
 case 4: 
 var $3;
 var $incdec_ptr_i=(($3+4)|0);
 HEAP32[(($__end_)>>2)]=$incdec_ptr_i;
 var $dec_i=((($__n_addr_0_i)-(1))|0);
 var $cmp_i12=($dec_i|0)==0;
 if($cmp_i12){label=20;break;}else{var $__n_addr_0_i=$dec_i;var $2=$incdec_ptr_i;label=2;break;}
 case 5: 
 var $__second__i_i_i=(($this+16)|0);
 var $__begin__i=(($this)|0);
 var $4=HEAP32[(($__begin__i)>>2)];
 var $sub_ptr_rhs_cast_i=$4;
 var $sub_ptr_sub_i=((($sub_ptr_rhs_cast)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i=$sub_ptr_sub_i>>2;
 var $add=((($sub_ptr_div_i)+($__n))|0);
 var $cmp_i=($add>>>0)>1073741823;
 if($cmp_i){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
 throw "Reached an unreachable!";
 case 7: 
 var $sub_ptr_sub_i_i_i=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast_i))|0);
 var $sub_ptr_div_i_i_i=$sub_ptr_sub_i_i_i>>2;
 var $cmp3_i=($sub_ptr_div_i_i_i>>>0)>536870910;
 if($cmp3_i){var $retval_i_03945=1073741823;label=11;break;}else{label=8;break;}
 case 8: 
 var $mul_i=$sub_ptr_sub_i_i_i>>1;
 var $cmp_i_i_i_i=($mul_i>>>0)<($add>>>0);
 var $_sroa_speculated=($cmp_i_i_i_i?$add:$mul_i);
 var $cmp_i_i=($_sroa_speculated|0)==0;
 if($cmp_i_i){var $cond_i_i=0;var $retval_i_040=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $__allocated__i_i_i_i27=(($this+128)|0);
 var $5=HEAP8[($__allocated__i_i_i_i27)];
 var $6=$5&1;
 var $tobool_i_i_i_i=(($6<<24)>>24)==0;
 var $cmp_i_i_i_i28=($_sroa_speculated>>>0)<29;
 var $or_cond_i_i=$tobool_i_i_i_i&$cmp_i_i_i_i28;
 if($or_cond_i_i){label=10;break;}else{var $retval_i_03945=$_sroa_speculated;label=11;break;}
 case 10: 
 HEAP8[($__allocated__i_i_i_i27)]=1;
 var $7=$__second__i_i_i;
 var $cond_i_i=$7;var $retval_i_040=$_sroa_speculated;label=12;break;
 case 11: 
 var $retval_i_03945;
 var $mul_i_i_i_i=$retval_i_03945<<2;
 var $call_i_i_i_i=__Znwj($mul_i_i_i_i);
 var $8=$call_i_i_i_i;
 var $cond_i_i=$8;var $retval_i_040=$retval_i_03945;label=12;break;
 case 12: 
 var $retval_i_040;
 var $cond_i_i;
 var $add_ptr_i_i31=(($cond_i_i+($sub_ptr_div_i<<2))|0);
 var $__n_addr_0_i18=$__n;var $9=$add_ptr_i_i31;label=13;break;
 case 13: 
 var $9;
 var $__n_addr_0_i18;
 var $new_isnull_i_i_i19=($9|0)==0;
 if($new_isnull_i_i_i19){var $10=0;label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($9)>>2)]=0;
 var $10=$9;label=15;break;
 case 15: 
 var $10;
 var $incdec_ptr_i23=(($10+4)|0);
 var $dec_i24=((($__n_addr_0_i18)-(1))|0);
 var $cmp_i25=($dec_i24|0)==0;
 if($cmp_i25){label=16;break;}else{var $__n_addr_0_i18=$dec_i24;var $9=$incdec_ptr_i23;label=13;break;}
 case 16: 
 var $add_ptr5_i_i=(($cond_i_i+($retval_i_040<<2))|0);
 var $11=HEAP32[(($__begin__i)>>2)];
 var $12=HEAP32[(($__end_)>>2)];
 var $sub_ptr_lhs_cast_i_i=$12;
 var $sub_ptr_rhs_cast_i_i=$11;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $sub_ptr_div_i_i=$sub_ptr_sub_i_i>>2;
 var $add_ptr_i_i31_sum=((($sub_ptr_div_i)-($sub_ptr_div_i_i))|0);
 var $add_ptr_i_i=(($cond_i_i+($add_ptr_i_i31_sum<<2))|0);
 var $13=$add_ptr_i_i;
 var $14=$11;
 assert($sub_ptr_sub_i_i % 1 === 0);(_memcpy($13, $14, $sub_ptr_sub_i_i)|0);
 HEAP32[(($__begin__i)>>2)]=$add_ptr_i_i;
 HEAP32[(($__end_)>>2)]=$incdec_ptr_i23;
 HEAP32[(($__first__i_i_i)>>2)]=$add_ptr5_i_i;
 var $tobool_i_i=($11|0)==0;
 if($tobool_i_i){label=20;break;}else{label=17;break;}
 case 17: 
 var $15=$__second__i_i_i;
 var $cmp_i_i_i_i13=($11|0)==($15|0);
 if($cmp_i_i_i_i13){label=18;break;}else{label=19;break;}
 case 18: 
 var $__allocated__i_i_i_i=(($this+128)|0);
 HEAP8[($__allocated__i_i_i_i)]=0;
 label=20;break;
 case 19: 
 __ZdlPv($14);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11332);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11320);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11308);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11296);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11284);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11272);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11260);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11248);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11236);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11224);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11212);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11200);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11188);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11176);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11164);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11152);
 return;
}
function ___cxx_global_array_dtor53($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12040);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12028);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12016);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12004);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11992);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11980);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11968);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11956);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11944);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11932);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11920);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11908);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11896);
 return;
}
function ___cxx_global_array_dtor56($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10972);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10960);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10948);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10936);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10924);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10912);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10900);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10888);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10876);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10864);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10852);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10840);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10828);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10816);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10804);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10792);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10780);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10768);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10756);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10744);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10732);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10720);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10708);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10696);
 return;
}
function ___cxx_global_array_dtor81($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11716);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11704);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11692);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11680);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11668);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11656);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11644);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11632);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11620);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11608);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11596);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11584);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11572);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11560);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11548);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11536);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11524);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11512);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11500);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11488);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11476);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11464);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11452);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11440);
 return;
}
function ___cxx_global_array_dtor105($0){
 var label=0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11140);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11128);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11116);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11104);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11092);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11080);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11068);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11056);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11044);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11032);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11020);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11008);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10996);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10984);
 return;
}
function ___cxx_global_array_dtor120($0){
 var label=0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11884);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11872);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11860);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11848);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11836);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11824);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11812);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11800);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11788);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11776);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11764);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11752);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11740);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11728);
 return;
}
function _mbrlen($s,$n,$st){
 var label=0;
 var $tobool=($st|0)!=0;
 var $cond=($tobool?$st:10216);
 var $call=_mbrtowc(0,$s,$n,$cond);
 return $call;
}
function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc_addr=sp;
 HEAP32[(($wc_addr)>>2)]=$wc;
 var $tobool=($st|0)==0;
 var $st_addr_0=($tobool?10208:$st);
 var $0=(($st_addr_0)|0);
 var $1=HEAP32[(($0)>>2)];
 var $tobool1=($src|0)==0;
 if($tobool1){label=2;break;}else{label=3;break;}
 case 2: 
 var $tobool3=($1|0)==0;
 if($tobool3){var $retval_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $tobool6=($wc|0)==0;
 if($tobool6){label=4;break;}else{var $3=$wc;label=5;break;}
 case 4: 
 var $2=$wc_addr;
 HEAP32[(($wc_addr)>>2)]=$2;
 var $3=$2;label=5;break;
 case 5: 
 var $3;
 var $tobool10=($n|0)==0;
 if($tobool10){var $retval_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $tobool13=($1|0)==0;
 if($tobool13){label=7;break;}else{var $s_0=$src;var $c_0=$1;var $n_addr_0=$n;label=11;break;}
 case 7: 
 var $4=HEAP8[($src)];
 var $conv=($4&255);
 var $cmp=(($4<<24)>>24)>-1;
 if($cmp){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$conv;
 var $tobool18=(($4<<24)>>24)!=0;
 var $lnot_ext=($tobool18&1);
 var $retval_0=$lnot_ext;label=19;break;
 case 9: 
 var $sub=((($conv)-(194))|0);
 var $cmp22=($sub>>>0)>50;
 if($cmp22){label=18;break;}else{label=10;break;}
 case 10: 
 var $incdec_ptr=(($src+1)|0);
 var $arrayidx=((___fsmu8+($sub<<2))|0);
 var $5=HEAP32[(($arrayidx)>>2)];
 var $dec=((($n)-(1))|0);
 var $s_0=$incdec_ptr;var $c_0=$5;var $n_addr_0=$dec;label=11;break;
 case 11: 
 var $n_addr_0;
 var $c_0;
 var $s_0;
 var $tobool29=($n_addr_0|0)==0;
 if($tobool29){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $6=HEAP8[($s_0)];
 var $conv31=($6&255);
 var $shr24=$conv31>>>3;
 var $sub32=((($shr24)-(16))|0);
 var $shr35=$c_0>>26;
 var $add=((($shr24)+($shr35))|0);
 var $or=$sub32|$add;
 var $tobool36=($or>>>0)>7;
 if($tobool36){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $n_addr_1=$n_addr_0;var $7=$6;label=13;break;}
 case 13: 
 var $7;
 var $n_addr_1;
 var $c_1;
 var $s_1;
 var $shl=$c_1<<6;
 var $incdec_ptr39=(($s_1+1)|0);
 var $conv40=($7&255);
 var $sub41=((($conv40)-(128))|0);
 var $or42=$sub41|$shl;
 var $dec43=((($n_addr_1)-(1))|0);
 var $tobool45=($or42|0)<0;
 if($tobool45){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($0)>>2)]=0;
 HEAP32[(($3)>>2)]=$or42;
 var $sub47=((($n)-($dec43))|0);
 var $retval_0=$sub47;label=19;break;
 case 15: 
 var $tobool49=($dec43|0)==0;
 if($tobool49){var $c_2=$or42;label=17;break;}else{label=16;break;}
 case 16: 
 var $8=HEAP8[($incdec_ptr39)];
 var $conv51=($8&255);
 var $sub52=((($conv51)-(128))|0);
 var $cmp53=($sub52>>>0)>63;
 if($cmp53){label=18;break;}else{var $s_1=$incdec_ptr39;var $c_1=$or42;var $n_addr_1=$dec43;var $7=$8;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($0)>>2)]=$c_2;
 var $retval_0=-2;label=19;break;
 case 18: 
 HEAP32[(($0)>>2)]=0;
 var $call=___errno_location();
 HEAP32[(($call)>>2)]=84;
 var $retval_0=-1;label=19;break;
 case 19: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1032)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf=sp;
 var $s=(sp)+(1024);
 var $0=HEAP32[(($src)>>2)];
 HEAP32[(($s)>>2)]=$0;
 var $tobool=($wcs|0)!=0;
 var $arraydecay=(($wbuf)|0);
 var $wn_addr_0_ph=($tobool?$wn:256);
 var $ws_0_ph=($tobool?$wcs:$arraydecay);
 var $tobool150=($0|0)==0;
 var $tobool251=($wn_addr_0_ph|0)==0;
 var $or_cond52=$tobool150|$tobool251;
 if($or_cond52){var $cnt_1=0;var $n_addr_1=$n;var $wn_addr_2=$wn_addr_0_ph;var $ws_048=$ws_0_ph;var $2=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $arraydecay10=(($wbuf)|0);
 var $wn_addr_053=$wn_addr_0_ph;var $n_addr_054=$n;var $cnt_055=0;var $ws_056=$ws_0_ph;var $_pr67=$0;label=3;break;
 case 3: 
 var $_pr67;
 var $ws_056;
 var $cnt_055;
 var $n_addr_054;
 var $wn_addr_053;
 var $div=$n_addr_054>>>2;
 var $cmp=($div>>>0)>=($wn_addr_053>>>0);
 var $cmp3=($n_addr_054>>>0)>131;
 var $or_cond34=$cmp|$cmp3;
 if($or_cond34){label=4;break;}else{var $cnt_1=$cnt_055;var $n_addr_1=$n_addr_054;var $wn_addr_2=$wn_addr_053;var $ws_048=$ws_056;var $2=$_pr67;label=9;break;}
 case 4: 
 var $wn_addr_0_div=($cmp?$wn_addr_053:$div);
 var $sub=((($n_addr_054)-($wn_addr_0_div))|0);
 var $call=_mbsrtowcs($ws_056,$s,$wn_addr_0_div,$st);
 var $tobool7=($call|0)==-1;
 if($tobool7){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($s)>>2)];
 var $cnt_1=-1;var $n_addr_1=$sub;var $wn_addr_2=0;var $ws_048=$ws_056;var $2=$_pr_pre;label=9;break;
 case 6: 
 var $cmp11=($ws_056|0)==($arraydecay10|0);
 if($cmp11){var $ws_1=$arraydecay10;var $wn_addr_1=$wn_addr_053;label=8;break;}else{label=7;break;}
 case 7: 
 var $add_ptr=(($ws_056+($call<<2))|0);
 var $sub13=((($wn_addr_053)-($call))|0);
 var $ws_1=$add_ptr;var $wn_addr_1=$sub13;label=8;break;
 case 8: 
 var $wn_addr_1;
 var $ws_1;
 var $add15=((($call)+($cnt_055))|0);
 var $1=HEAP32[(($s)>>2)];
 var $tobool1=($1|0)==0;
 var $tobool2=($wn_addr_1|0)==0;
 var $or_cond=$tobool1|$tobool2;
 if($or_cond){var $cnt_1=$add15;var $n_addr_1=$sub;var $wn_addr_2=$wn_addr_1;var $ws_048=$ws_1;var $2=$1;label=9;break;}else{var $wn_addr_053=$wn_addr_1;var $n_addr_054=$sub;var $cnt_055=$add15;var $ws_056=$ws_1;var $_pr67=$1;label=3;break;}
 case 9: 
 var $2;
 var $ws_048;
 var $wn_addr_2;
 var $n_addr_1;
 var $cnt_1;
 var $tobool16=($2|0)==0;
 if($tobool16){var $cnt_3=$cnt_1;label=16;break;}else{label=10;break;}
 case 10: 
 var $tobool1937=($wn_addr_2|0)==0;
 var $tobool2138=($n_addr_1|0)==0;
 var $or_cond3539=$tobool1937|$tobool2138;
 if($or_cond3539){var $cnt_3=$cnt_1;label=16;break;}else{var $wn_addr_340=$wn_addr_2;var $n_addr_241=$n_addr_1;var $cnt_242=$cnt_1;var $ws_243=$ws_048;var $3=$2;label=11;break;}
 case 11: 
 var $3;
 var $ws_243;
 var $cnt_242;
 var $n_addr_241;
 var $wn_addr_340;
 var $call24=_mbrtowc($ws_243,$3,$n_addr_241,$st);
 var $add25=((($call24)+(2))|0);
 var $cmp26=($add25>>>0)<3;
 if($cmp26){label=12;break;}else{label=15;break;}
 case 12: 
 if(($call24|0)==0){ label=13;break;}else if(($call24|0)==-1){ var $cnt_3=-1;label=16;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($s)>>2)]=0;
 var $cnt_3=$cnt_242;label=16;break;
 case 14: 
 var $4=(($st)|0);
 HEAP32[(($4)>>2)]=0;
 var $cnt_3=$cnt_242;label=16;break;
 case 15: 
 var $5=HEAP32[(($s)>>2)];
 var $add_ptr36=(($5+$call24)|0);
 HEAP32[(($s)>>2)]=$add_ptr36;
 var $sub37=((($n_addr_241)-($call24))|0);
 var $incdec_ptr=(($ws_243+4)|0);
 var $dec=((($wn_addr_340)-(1))|0);
 var $inc=((($cnt_242)+(1))|0);
 var $tobool19=($dec|0)==0;
 var $tobool21=($n_addr_241|0)==($call24|0);
 var $or_cond35=$tobool19|$tobool21;
 if($or_cond35){var $cnt_3=$inc;label=16;break;}else{var $wn_addr_340=$dec;var $n_addr_241=$sub37;var $cnt_242=$inc;var $ws_243=$incdec_ptr;var $3=$add_ptr36;label=11;break;}
 case 16: 
 var $cnt_3;
 if($tobool){label=17;break;}else{label=18;break;}
 case 17: 
 var $6=HEAP32[(($s)>>2)];
 HEAP32[(($src)>>2)]=$6;
 label=18;break;
 case 18: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=HEAP32[(($src)>>2)];
 var $tobool=($st|0)==0;
 if($tobool){label=5;break;}else{label=2;break;}
 case 2: 
 var $1=(($st)|0);
 var $2=HEAP32[(($1)>>2)];
 var $tobool1=($2|0)==0;
 if($tobool1){label=5;break;}else{label=3;break;}
 case 3: 
 var $tobool2=($ws|0)==0;
 if($tobool2){var $c_2=$2;var $s_3=$0;var $wn_addr_3=$wn;label=16;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($1)>>2)]=0;
 var $c_4=$2;var $s_8=$0;var $ws_addr_3=$ws;var $wn_addr_7=$wn;label=36;break;
 case 5: 
 var $tobool4=($ws|0)==0;
 if($tobool4){var $s_0=$0;var $wn_addr_0=$wn;label=7;break;}else{var $s_5_ph=$0;var $ws_addr_0_ph=$ws;var $wn_addr_4_ph=$wn;label=6;break;}
 case 6: 
 var $wn_addr_4_ph;
 var $ws_addr_0_ph;
 var $s_5_ph;
 var $tobool6988=($wn_addr_4_ph|0)==0;
 if($tobool6988){var $retval_0=$wn;label=53;break;}else{var $wn_addr_489=$wn_addr_4_ph;var $ws_addr_090=$ws_addr_0_ph;var $s_591=$s_5_ph;label=26;break;}
 case 7: 
 var $wn_addr_0;
 var $s_0;
 var $3=HEAP8[($s_0)];
 var $conv=($3&255);
 var $sub=((($conv)-(1))|0);
 var $cmp=($sub>>>0)<127;
 if($cmp){label=8;break;}else{var $s_2=$s_0;var $wn_addr_2=$wn_addr_0;var $11=$3;label=12;break;}
 case 8: 
 var $4=$s_0;
 var $rem=$4&3;
 var $cmp8=($rem|0)==0;
 if($cmp8){label=9;break;}else{var $s_2=$s_0;var $wn_addr_2=$wn_addr_0;var $11=$3;label=12;break;}
 case 9: 
 var $5=$s_0;
 var $6=HEAP32[(($5)>>2)];
 var $sub1174=((($6)-(16843009))|0);
 var $or75=$sub1174|$6;
 var $and76=$or75&-2139062144;
 var $lnot77=($and76|0)==0;
 var $7=(($6)&255);
 if($lnot77){var $wn_addr_178=$wn_addr_0;var $s_179=$s_0;label=10;break;}else{var $s_2=$s_0;var $wn_addr_2=$wn_addr_0;var $11=$7;label=12;break;}
 case 10: 
 var $s_179;
 var $wn_addr_178;
 var $add_ptr=(($s_179+4)|0);
 var $sub13=((($wn_addr_178)-(4))|0);
 var $8=$add_ptr;
 var $9=HEAP32[(($8)>>2)];
 var $sub11=((($9)-(16843009))|0);
 var $or=$sub11|$9;
 var $and=$or&-2139062144;
 var $lnot=($and|0)==0;
 if($lnot){var $wn_addr_178=$sub13;var $s_179=$add_ptr;label=10;break;}else{label=11;break;}
 case 11: 
 var $10=(($9)&255);
 var $s_2=$add_ptr;var $wn_addr_2=$sub13;var $11=$10;label=12;break;
 case 12: 
 var $11;
 var $wn_addr_2;
 var $s_2;
 var $conv15=($11&255);
 var $sub16=((($conv15)-(1))|0);
 var $cmp17=($sub16>>>0)<127;
 if($cmp17){label=13;break;}else{label=14;break;}
 case 13: 
 var $incdec_ptr=(($s_2+1)|0);
 var $dec=((($wn_addr_2)-(1))|0);
 var $s_0=$incdec_ptr;var $wn_addr_0=$dec;label=7;break;
 case 14: 
 var $sub22=((($conv15)-(194))|0);
 var $cmp23=($sub22>>>0)>50;
 if($cmp23){var $wn_addr_8101=$wn_addr_2;var $ws_addr_4103=$ws;var $s_10105=$s_2;label=47;break;}else{label=15;break;}
 case 15: 
 var $incdec_ptr27=(($s_2+1)|0);
 var $arrayidx=((___fsmu8+($sub22<<2))|0);
 var $12=HEAP32[(($arrayidx)>>2)];
 var $c_2=$12;var $s_3=$incdec_ptr27;var $wn_addr_3=$wn_addr_2;label=16;break;
 case 16: 
 var $wn_addr_3;
 var $s_3;
 var $c_2;
 var $13=HEAP8[($s_3)];
 var $conv30=($13&255);
 var $shr72=$conv30>>>3;
 var $sub31=((($shr72)-(16))|0);
 var $shr34=$c_2>>26;
 var $add=((($shr72)+($shr34))|0);
 var $or35=$sub31|$add;
 var $tobool37=($or35>>>0)>7;
 if($tobool37){label=17;break;}else{label=18;break;}
 case 17: 
 var $incdec_ptr39=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$incdec_ptr39;var $ws_addr_4=$ws;var $wn_addr_8=$wn_addr_3;label=46;break;
 case 18: 
 var $incdec_ptr41=(($s_3+1)|0);
 var $and42=$c_2&33554432;
 var $tobool43=($and42|0)==0;
 if($tobool43){var $s_4=$incdec_ptr41;label=25;break;}else{label=19;break;}
 case 19: 
 var $14=HEAP8[($incdec_ptr41)];
 var $conv45=($14&255);
 var $sub46=((($conv45)-(128))|0);
 var $cmp47=($sub46>>>0)>63;
 if($cmp47){label=20;break;}else{label=21;break;}
 case 20: 
 var $add_ptr50=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$add_ptr50;var $ws_addr_4=$ws;var $wn_addr_8=$wn_addr_3;label=46;break;
 case 21: 
 var $incdec_ptr52=(($s_3+2)|0);
 var $and53=$c_2&524288;
 var $tobool54=($and53|0)==0;
 if($tobool54){var $s_4=$incdec_ptr52;label=25;break;}else{label=22;break;}
 case 22: 
 var $15=HEAP8[($incdec_ptr52)];
 var $conv56=($15&255);
 var $sub57=((($conv56)-(128))|0);
 var $cmp58=($sub57>>>0)>63;
 if($cmp58){label=23;break;}else{label=24;break;}
 case 23: 
 var $add_ptr61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$add_ptr61;var $ws_addr_4=$ws;var $wn_addr_8=$wn_addr_3;label=46;break;
 case 24: 
 var $incdec_ptr63=(($s_3+3)|0);
 var $s_4=$incdec_ptr63;label=25;break;
 case 25: 
 var $s_4;
 var $dec66=((($wn_addr_3)-(1))|0);
 var $s_0=$s_4;var $wn_addr_0=$dec66;label=7;break;
 case 26: 
 var $s_591;
 var $ws_addr_090;
 var $wn_addr_489;
 var $16=HEAP8[($s_591)];
 var $conv72=($16&255);
 var $sub73=((($conv72)-(1))|0);
 var $cmp74=($sub73>>>0)<127;
 if($cmp74){label=27;break;}else{var $s_7=$s_591;var $ws_addr_2=$ws_addr_090;var $wn_addr_6=$wn_addr_489;var $24=$16;label=32;break;}
 case 27: 
 var $17=$s_591;
 var $rem77=$17&3;
 var $cmp78=($rem77|0)==0;
 var $cmp8281=($wn_addr_489>>>0)>3;
 var $or_cond=$cmp78&$cmp8281;
 if($or_cond){var $wn_addr_582=$wn_addr_489;var $ws_addr_183=$ws_addr_090;var $s_684=$s_591;label=28;break;}else{var $s_7=$s_591;var $ws_addr_2=$ws_addr_090;var $wn_addr_6=$wn_addr_489;var $24=$16;label=32;break;}
 case 28: 
 var $s_684;
 var $ws_addr_183;
 var $wn_addr_582;
 var $18=$s_684;
 var $19=HEAP32[(($18)>>2)];
 var $sub84=((($19)-(16843009))|0);
 var $or85=$sub84|$19;
 var $and86=$or85&-2139062144;
 var $lnot88=($and86|0)==0;
 if($lnot88){label=29;break;}else{label=30;break;}
 case 29: 
 var $incdec_ptr90=(($s_684+1)|0);
 var $conv91=$19&255;
 var $incdec_ptr92=(($ws_addr_183+4)|0);
 HEAP32[(($ws_addr_183)>>2)]=$conv91;
 var $incdec_ptr93=(($s_684+2)|0);
 var $20=HEAP8[($incdec_ptr90)];
 var $conv94=($20&255);
 var $incdec_ptr95=(($ws_addr_183+8)|0);
 HEAP32[(($incdec_ptr92)>>2)]=$conv94;
 var $incdec_ptr96=(($s_684+3)|0);
 var $21=HEAP8[($incdec_ptr93)];
 var $conv97=($21&255);
 var $incdec_ptr98=(($ws_addr_183+12)|0);
 HEAP32[(($incdec_ptr95)>>2)]=$conv97;
 var $incdec_ptr99=(($s_684+4)|0);
 var $22=HEAP8[($incdec_ptr96)];
 var $conv100=($22&255);
 var $incdec_ptr101=(($ws_addr_183+16)|0);
 HEAP32[(($incdec_ptr98)>>2)]=$conv100;
 var $sub102=((($wn_addr_582)-(4))|0);
 var $cmp82=($sub102>>>0)>3;
 if($cmp82){var $wn_addr_582=$sub102;var $ws_addr_183=$incdec_ptr101;var $s_684=$incdec_ptr99;label=28;break;}else{label=31;break;}
 case 30: 
 var $23=(($19)&255);
 var $s_7=$s_684;var $ws_addr_2=$ws_addr_183;var $wn_addr_6=$wn_addr_582;var $24=$23;label=32;break;
 case 31: 
 var $_pre_pre=HEAP8[($incdec_ptr99)];
 var $s_7=$incdec_ptr99;var $ws_addr_2=$incdec_ptr101;var $wn_addr_6=$sub102;var $24=$_pre_pre;label=32;break;
 case 32: 
 var $24;
 var $wn_addr_6;
 var $ws_addr_2;
 var $s_7;
 var $conv105=($24&255);
 var $sub106=((($conv105)-(1))|0);
 var $cmp107=($sub106>>>0)<127;
 if($cmp107){label=33;break;}else{label=34;break;}
 case 33: 
 var $incdec_ptr110=(($s_7+1)|0);
 var $incdec_ptr112=(($ws_addr_2+4)|0);
 HEAP32[(($ws_addr_2)>>2)]=$conv105;
 var $dec113=((($wn_addr_6)-(1))|0);
 var $tobool69=($dec113|0)==0;
 if($tobool69){var $retval_0=$wn;label=53;break;}else{var $wn_addr_489=$dec113;var $ws_addr_090=$incdec_ptr112;var $s_591=$incdec_ptr110;label=26;break;}
 case 34: 
 var $sub116=((($conv105)-(194))|0);
 var $cmp117=($sub116>>>0)>50;
 if($cmp117){var $wn_addr_8101=$wn_addr_6;var $ws_addr_4103=$ws_addr_2;var $s_10105=$s_7;label=47;break;}else{label=35;break;}
 case 35: 
 var $incdec_ptr121=(($s_7+1)|0);
 var $arrayidx124=((___fsmu8+($sub116<<2))|0);
 var $25=HEAP32[(($arrayidx124)>>2)];
 var $c_4=$25;var $s_8=$incdec_ptr121;var $ws_addr_3=$ws_addr_2;var $wn_addr_7=$wn_addr_6;label=36;break;
 case 36: 
 var $wn_addr_7;
 var $ws_addr_3;
 var $s_8;
 var $c_4;
 var $26=HEAP8[($s_8)];
 var $conv125=($26&255);
 var $shr12673=$conv125>>>3;
 var $sub127=((($shr12673)-(16))|0);
 var $shr130=$c_4>>26;
 var $add131=((($shr12673)+($shr130))|0);
 var $or132=$sub127|$add131;
 var $tobool134=($or132>>>0)>7;
 if($tobool134){label=37;break;}else{label=38;break;}
 case 37: 
 var $incdec_ptr136=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$incdec_ptr136;var $ws_addr_4=$ws_addr_3;var $wn_addr_8=$wn_addr_7;label=46;break;
 case 38: 
 var $shl=$c_4<<6;
 var $incdec_ptr138=(($s_8+1)|0);
 var $sub140=((($conv125)-(128))|0);
 var $or141=$sub140|$shl;
 var $tobool143=($or141|0)<0;
 if($tobool143){label=39;break;}else{var $c_5=$or141;var $s_9=$incdec_ptr138;label=45;break;}
 case 39: 
 var $27=HEAP8[($incdec_ptr138)];
 var $conv145=($27&255);
 var $sub146=((($conv145)-(128))|0);
 var $cmp147=($sub146>>>0)>63;
 if($cmp147){label=40;break;}else{label=41;break;}
 case 40: 
 var $add_ptr150=((($s_8)-(1))|0);
 var $c_6=$or141;var $s_10=$add_ptr150;var $ws_addr_4=$ws_addr_3;var $wn_addr_8=$wn_addr_7;label=46;break;
 case 41: 
 var $shl152=$or141<<6;
 var $incdec_ptr153=(($s_8+2)|0);
 var $or156=$sub146|$shl152;
 var $tobool158=($or156|0)<0;
 if($tobool158){label=42;break;}else{var $c_5=$or156;var $s_9=$incdec_ptr153;label=45;break;}
 case 42: 
 var $28=HEAP8[($incdec_ptr153)];
 var $conv160=($28&255);
 var $sub161=((($conv160)-(128))|0);
 var $cmp162=($sub161>>>0)>63;
 if($cmp162){label=43;break;}else{label=44;break;}
 case 43: 
 var $add_ptr165=((($s_8)-(1))|0);
 var $c_6=$or156;var $s_10=$add_ptr165;var $ws_addr_4=$ws_addr_3;var $wn_addr_8=$wn_addr_7;label=46;break;
 case 44: 
 var $shl167=$or156<<6;
 var $incdec_ptr168=(($s_8+3)|0);
 var $or171=$sub161|$shl167;
 var $c_5=$or171;var $s_9=$incdec_ptr168;label=45;break;
 case 45: 
 var $s_9;
 var $c_5;
 var $incdec_ptr174=(($ws_addr_3+4)|0);
 HEAP32[(($ws_addr_3)>>2)]=$c_5;
 var $dec175=((($wn_addr_7)-(1))|0);
 var $s_5_ph=$s_9;var $ws_addr_0_ph=$incdec_ptr174;var $wn_addr_4_ph=$dec175;label=6;break;
 case 46: 
 var $wn_addr_8;
 var $ws_addr_4;
 var $s_10;
 var $c_6;
 var $tobool178=($c_6|0)==0;
 if($tobool178){var $wn_addr_8101=$wn_addr_8;var $ws_addr_4103=$ws_addr_4;var $s_10105=$s_10;label=47;break;}else{var $ws_addr_4102=$ws_addr_4;var $s_10104=$s_10;label=51;break;}
 case 47: 
 var $s_10105;
 var $ws_addr_4103;
 var $wn_addr_8101;
 var $29=HEAP8[($s_10105)];
 var $tobool180=(($29<<24)>>24)==0;
 if($tobool180){label=48;break;}else{var $ws_addr_4102=$ws_addr_4103;var $s_10104=$s_10105;label=51;break;}
 case 48: 
 var $tobool182=($ws_addr_4103|0)==0;
 if($tobool182){label=50;break;}else{label=49;break;}
 case 49: 
 HEAP32[(($ws_addr_4103)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=50;break;
 case 50: 
 var $sub185=((($wn)-($wn_addr_8101))|0);
 var $retval_0=$sub185;label=53;break;
 case 51: 
 var $s_10104;
 var $ws_addr_4102;
 var $call=___errno_location();
 HEAP32[(($call)>>2)]=84;
 var $tobool187=($ws_addr_4102|0)==0;
 if($tobool187){var $retval_0=-1;label=53;break;}else{label=52;break;}
 case 52: 
 HEAP32[(($src)>>2)]=$s_10104;
 var $retval_0=-1;label=53;break;
 case 53: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbtowc($wc,$src,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wc_addr=sp;
 HEAP32[(($wc_addr)>>2)]=$wc;
 var $tobool=($src|0)==0;
 if($tobool){var $retval_0=0;label=19;break;}else{label=2;break;}
 case 2: 
 var $tobool1=($n|0)==0;
 if($tobool1){label=18;break;}else{label=3;break;}
 case 3: 
 var $tobool4=($wc|0)==0;
 if($tobool4){label=4;break;}else{var $1=$wc;label=5;break;}
 case 4: 
 var $0=$wc_addr;
 HEAP32[(($wc_addr)>>2)]=$0;
 var $1=$0;label=5;break;
 case 5: 
 var $1;
 var $2=HEAP8[($src)];
 var $conv=($2&255);
 var $cmp=(($2<<24)>>24)>-1;
 if($cmp){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($1)>>2)]=$conv;
 var $tobool10=(($2<<24)>>24)!=0;
 var $lnot_ext=($tobool10&1);
 var $retval_0=$lnot_ext;label=19;break;
 case 7: 
 var $sub=((($conv)-(194))|0);
 var $cmp14=($sub>>>0)>50;
 if($cmp14){label=18;break;}else{label=8;break;}
 case 8: 
 var $incdec_ptr=(($src+1)|0);
 var $arrayidx=((___fsmu8+($sub<<2))|0);
 var $3=HEAP32[(($arrayidx)>>2)];
 var $cmp20=($n>>>0)<4;
 if($cmp20){label=9;break;}else{label=10;break;}
 case 9: 
 var $mul=((($n)*(6))&-1);
 var $sub22=((($mul)-(6))|0);
 var $4=-2147483648>>>($sub22>>>0);
 var $and22=$3&$4;
 var $tobool23=($and22|0)==0;
 if($tobool23){label=10;break;}else{label=18;break;}
 case 10: 
 var $5=HEAP8[($incdec_ptr)];
 var $conv26=($5&255);
 var $shr21=$conv26>>>3;
 var $sub27=((($shr21)-(16))|0);
 var $shr30=$3>>26;
 var $add=((($shr21)+($shr30))|0);
 var $or=$sub27|$add;
 var $tobool32=($or>>>0)>7;
 if($tobool32){label=18;break;}else{label=11;break;}
 case 11: 
 var $shl35=$3<<6;
 var $sub38=((($conv26)-(128))|0);
 var $or39=$sub38|$shl35;
 var $tobool41=($or39|0)<0;
 if($tobool41){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($1)>>2)]=$or39;
 var $retval_0=2;label=19;break;
 case 13: 
 var $incdec_ptr36=(($src+2)|0);
 var $6=HEAP8[($incdec_ptr36)];
 var $conv44=($6&255);
 var $sub45=((($conv44)-(128))|0);
 var $cmp46=($sub45>>>0)>63;
 if($cmp46){label=18;break;}else{label=14;break;}
 case 14: 
 var $shl50=$or39<<6;
 var $or54=$sub45|$shl50;
 var $tobool56=($or54|0)<0;
 if($tobool56){label=16;break;}else{label=15;break;}
 case 15: 
 HEAP32[(($1)>>2)]=$or54;
 var $retval_0=3;label=19;break;
 case 16: 
 var $incdec_ptr51=(($src+3)|0);
 var $7=HEAP8[($incdec_ptr51)];
 var $conv59=($7&255);
 var $sub60=((($conv59)-(128))|0);
 var $cmp61=($sub60>>>0)>63;
 if($cmp61){label=18;break;}else{label=17;break;}
 case 17: 
 var $shl65=$or54<<6;
 var $or69=$sub60|$shl65;
 HEAP32[(($1)>>2)]=$or69;
 var $retval_0=4;label=19;break;
 case 18: 
 var $call=___errno_location();
 HEAP32[(($call)>>2)]=84;
 var $retval_0=-1;label=19;break;
 case 19: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s,$wc,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool=($s|0)==0;
 if($tobool){var $retval_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $cmp=($wc>>>0)<128;
 if($cmp){label=3;break;}else{label=4;break;}
 case 3: 
 var $conv=(($wc)&255);
 HEAP8[($s)]=$conv;
 var $retval_0=1;label=11;break;
 case 4: 
 var $cmp2=($wc>>>0)<2048;
 if($cmp2){label=5;break;}else{label=6;break;}
 case 5: 
 var $shr28=$wc>>>6;
 var $or=$shr28|192;
 var $conv5=(($or)&255);
 var $incdec_ptr=(($s+1)|0);
 HEAP8[($s)]=$conv5;
 var $and=$wc&63;
 var $or6=$and|128;
 var $conv7=(($or6)&255);
 HEAP8[($incdec_ptr)]=$conv7;
 var $retval_0=2;label=11;break;
 case 6: 
 var $cmp9=($wc>>>0)<55296;
 var $sub=((($wc)-(57344))|0);
 var $cmp11=($sub>>>0)<8192;
 var $or_cond=$cmp9|$cmp11;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $shr1426=$wc>>>12;
 var $or15=$shr1426|224;
 var $conv16=(($or15)&255);
 var $incdec_ptr17=(($s+1)|0);
 HEAP8[($s)]=$conv16;
 var $shr1827=$wc>>>6;
 var $and19=$shr1827&63;
 var $or20=$and19|128;
 var $conv21=(($or20)&255);
 var $incdec_ptr22=(($s+2)|0);
 HEAP8[($incdec_ptr17)]=$conv21;
 var $and23=$wc&63;
 var $or24=$and23|128;
 var $conv25=(($or24)&255);
 HEAP8[($incdec_ptr22)]=$conv25;
 var $retval_0=3;label=11;break;
 case 8: 
 var $sub27=((($wc)-(65536))|0);
 var $cmp28=($sub27>>>0)<1048576;
 if($cmp28){label=9;break;}else{label=10;break;}
 case 9: 
 var $shr3123=$wc>>>18;
 var $or32=$shr3123|240;
 var $conv33=(($or32)&255);
 var $incdec_ptr34=(($s+1)|0);
 HEAP8[($s)]=$conv33;
 var $shr3524=$wc>>>12;
 var $and36=$shr3524&63;
 var $or37=$and36|128;
 var $conv38=(($or37)&255);
 var $incdec_ptr39=(($s+2)|0);
 HEAP8[($incdec_ptr34)]=$conv38;
 var $shr4025=$wc>>>6;
 var $and41=$shr4025&63;
 var $or42=$and41|128;
 var $conv43=(($or42)&255);
 var $incdec_ptr44=(($s+3)|0);
 HEAP8[($incdec_ptr39)]=$conv43;
 var $and45=$wc&63;
 var $or46=$and45|128;
 var $conv47=(($or46)&255);
 HEAP8[($incdec_ptr44)]=$conv47;
 var $retval_0=4;label=11;break;
 case 10: 
 var $call=___errno_location();
 HEAP32[(($call)>>2)]=84;
 var $retval_0=-1;label=11;break;
 case 11: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $ws=(sp)+(256);
 var $0=HEAP32[(($wcs)>>2)];
 HEAP32[(($ws)>>2)]=$0;
 var $tobool=($dst|0)!=0;
 var $arraydecay=(($buf)|0);
 var $n_addr_0_ph=($tobool?$n:256);
 var $s_0_ph=($tobool?$dst:$arraydecay);
 var $tobool148=($0|0)==0;
 var $tobool249=($n_addr_0_ph|0)==0;
 var $or_cond50=$tobool148|$tobool249;
 if($or_cond50){var $cnt_1=0;var $wn_addr_1=$wn;var $n_addr_2=$n_addr_0_ph;var $s_046=$s_0_ph;var $2=$0;label=9;break;}else{label=2;break;}
 case 2: 
 var $arraydecay10=(($buf)|0);
 var $n_addr_051=$n_addr_0_ph;var $wn_addr_052=$wn;var $cnt_053=0;var $s_054=$s_0_ph;var $_pr65=$0;label=3;break;
 case 3: 
 var $_pr65;
 var $s_054;
 var $cnt_053;
 var $wn_addr_052;
 var $n_addr_051;
 var $cmp=($wn_addr_052>>>0)>=($n_addr_051>>>0);
 var $cmp3=($wn_addr_052>>>0)>32;
 var $or_cond32=$cmp|$cmp3;
 if($or_cond32){label=4;break;}else{var $cnt_1=$cnt_053;var $wn_addr_1=$wn_addr_052;var $n_addr_2=$n_addr_051;var $s_046=$s_054;var $2=$_pr65;label=9;break;}
 case 4: 
 var $n_addr_0_wn_addr_0=($cmp?$n_addr_051:$wn_addr_052);
 var $sub=((($wn_addr_052)-($n_addr_0_wn_addr_0))|0);
 var $call=_wcsrtombs($s_054,$ws,$n_addr_0_wn_addr_0,0);
 var $tobool7=($call|0)==-1;
 if($tobool7){label=5;break;}else{label=6;break;}
 case 5: 
 var $_pr_pre=HEAP32[(($ws)>>2)];
 var $cnt_1=-1;var $wn_addr_1=$sub;var $n_addr_2=0;var $s_046=$s_054;var $2=$_pr_pre;label=9;break;
 case 6: 
 var $cmp11=($s_054|0)==($arraydecay10|0);
 if($cmp11){var $s_1=$arraydecay10;var $n_addr_1=$n_addr_051;label=8;break;}else{label=7;break;}
 case 7: 
 var $add_ptr=(($s_054+$call)|0);
 var $sub13=((($n_addr_051)-($call))|0);
 var $s_1=$add_ptr;var $n_addr_1=$sub13;label=8;break;
 case 8: 
 var $n_addr_1;
 var $s_1;
 var $add15=((($call)+($cnt_053))|0);
 var $1=HEAP32[(($ws)>>2)];
 var $tobool1=($1|0)==0;
 var $tobool2=($n_addr_1|0)==0;
 var $or_cond=$tobool1|$tobool2;
 if($or_cond){var $cnt_1=$add15;var $wn_addr_1=$sub;var $n_addr_2=$n_addr_1;var $s_046=$s_1;var $2=$1;label=9;break;}else{var $n_addr_051=$n_addr_1;var $wn_addr_052=$sub;var $cnt_053=$add15;var $s_054=$s_1;var $_pr65=$1;label=3;break;}
 case 9: 
 var $2;
 var $s_046;
 var $n_addr_2;
 var $wn_addr_1;
 var $cnt_1;
 var $tobool16=($2|0)==0;
 if($tobool16){var $cnt_3=$cnt_1;label=15;break;}else{label=10;break;}
 case 10: 
 var $tobool1935=($n_addr_2|0)==0;
 var $tobool2136=($wn_addr_1|0)==0;
 var $or_cond3337=$tobool1935|$tobool2136;
 if($or_cond3337){var $cnt_3=$cnt_1;label=15;break;}else{var $n_addr_338=$n_addr_2;var $wn_addr_239=$wn_addr_1;var $cnt_240=$cnt_1;var $s_241=$s_046;var $3=$2;label=11;break;}
 case 11: 
 var $3;
 var $s_241;
 var $cnt_240;
 var $wn_addr_239;
 var $n_addr_338;
 var $4=HEAP32[(($3)>>2)];
 var $call24=_wcrtomb($s_241,$4,0);
 var $add25=((($call24)+(1))|0);
 var $cmp26=($add25>>>0)<2;
 if($cmp26){label=12;break;}else{label=14;break;}
 case 12: 
 var $tobool28=($call24|0)==0;
 if($tobool28){label=13;break;}else{var $cnt_3=-1;label=15;break;}
 case 13: 
 HEAP32[(($ws)>>2)]=0;
 var $cnt_3=$cnt_240;label=15;break;
 case 14: 
 var $5=HEAP32[(($ws)>>2)];
 var $incdec_ptr=(($5+4)|0);
 HEAP32[(($ws)>>2)]=$incdec_ptr;
 var $dec=((($wn_addr_239)-(1))|0);
 var $add_ptr33=(($s_241+$call24)|0);
 var $sub34=((($n_addr_338)-($call24))|0);
 var $inc=((($cnt_240)+(1))|0);
 var $tobool19=($n_addr_338|0)==($call24|0);
 var $tobool21=($dec|0)==0;
 var $or_cond33=$tobool19|$tobool21;
 if($or_cond33){var $cnt_3=$inc;label=15;break;}else{var $n_addr_338=$sub34;var $wn_addr_239=$dec;var $cnt_240=$inc;var $s_241=$add_ptr33;var $3=$incdec_ptr;label=11;break;}
 case 15: 
 var $cnt_3;
 if($tobool){label=16;break;}else{label=17;break;}
 case 16: 
 var $6=HEAP32[(($ws)>>2)];
 HEAP32[(($wcs)>>2)]=$6;
 label=17;break;
 case 17: 
 STACKTOP=sp;return $cnt_3;
  default: assert(0, "bad label: " + label);
 }
}
function _wcsrtombs($s,$ws,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf=sp;
 var $tobool=($s|0)==0;
 if($tobool){label=4;break;}else{label=2;break;}
 case 2: 
 var $cmp863=($n>>>0)>3;
 if($cmp863){label=3;break;}else{var $n_addr_2_lcssa=$n;var $s_addr_0_lcssa=$s;label=9;break;}
 case 3: 
 var $_pre79=HEAP32[(($ws)>>2)];
 var $n_addr_264=$n;var $s_addr_065=$s;var $4=$_pre79;label=8;break;
 case 4: 
 var $0=HEAP32[(($ws)>>2)];
 var $arraydecay=(($buf)|0);
 var $1=HEAP32[(($0)>>2)];
 var $tobool145=($1|0)==0;
 if($tobool145){var $retval_0=0;label=26;break;}else{var $n_addr_046=0;var $ws2_047=$0;var $2=$1;label=5;break;}
 case 5: 
 var $2;
 var $ws2_047;
 var $n_addr_046;
 var $cmp=($2>>>0)>127;
 if($cmp){label=6;break;}else{var $call_pn=1;label=7;break;}
 case 6: 
 var $call=_wcrtomb($arraydecay,$2,0);
 var $tobool3=($call|0)==-1;
 if($tobool3){var $retval_0=-1;label=26;break;}else{var $call_pn=$call;label=7;break;}
 case 7: 
 var $call_pn;
 var $n_addr_1=((($call_pn)+($n_addr_046))|0);
 var $incdec_ptr=(($ws2_047+4)|0);
 var $3=HEAP32[(($incdec_ptr)>>2)];
 var $tobool1=($3|0)==0;
 if($tobool1){var $retval_0=$n_addr_1;label=26;break;}else{var $n_addr_046=$n_addr_1;var $ws2_047=$incdec_ptr;var $2=$3;label=5;break;}
 case 8: 
 var $4;
 var $s_addr_065;
 var $n_addr_264;
 var $5=HEAP32[(($4)>>2)];
 var $tobool9=($5|0)==0;
 if($tobool9){var $n_addr_2_lcssa=$n_addr_264;var $s_addr_0_lcssa=$s_addr_065;label=9;break;}else{label=11;break;}
 case 9: 
 var $s_addr_0_lcssa;
 var $n_addr_2_lcssa;
 var $tobool2256=($n_addr_2_lcssa|0)==0;
 if($tobool2256){var $n_addr_452=0;label=25;break;}else{label=10;break;}
 case 10: 
 var $arraydecay30=(($buf)|0);
 var $_pre=HEAP32[(($ws)>>2)];
 var $n_addr_457=$n_addr_2_lcssa;var $s_addr_258=$s_addr_0_lcssa;var $7=$_pre;label=16;break;
 case 11: 
 var $cmp10=($5>>>0)>127;
 if($cmp10){label=12;break;}else{label=14;break;}
 case 12: 
 var $call12=_wcrtomb($s_addr_065,$5,0);
 var $tobool14=($call12|0)==-1;
 if($tobool14){var $retval_0=-1;label=26;break;}else{label=13;break;}
 case 13: 
 var $add_ptr=(($s_addr_065+$call12)|0);
 var $sub=((($n_addr_264)-($call12))|0);
 var $s_addr_1=$add_ptr;var $n_addr_3=$sub;var $6=$4;label=15;break;
 case 14: 
 var $conv=(($5)&255);
 var $incdec_ptr18=(($s_addr_065+1)|0);
 HEAP8[($s_addr_065)]=$conv;
 var $dec=((($n_addr_264)-(1))|0);
 var $_pre80=HEAP32[(($ws)>>2)];
 var $s_addr_1=$incdec_ptr18;var $n_addr_3=$dec;var $6=$_pre80;label=15;break;
 case 15: 
 var $6;
 var $n_addr_3;
 var $s_addr_1;
 var $incdec_ptr20=(($6+4)|0);
 HEAP32[(($ws)>>2)]=$incdec_ptr20;
 var $cmp8=($n_addr_3>>>0)>3;
 if($cmp8){var $n_addr_264=$n_addr_3;var $s_addr_065=$s_addr_1;var $4=$incdec_ptr20;label=8;break;}else{var $n_addr_2_lcssa=$n_addr_3;var $s_addr_0_lcssa=$s_addr_1;label=9;break;}
 case 16: 
 var $7;
 var $s_addr_258;
 var $n_addr_457;
 var $8=HEAP32[(($7)>>2)];
 var $tobool24=($8|0)==0;
 if($tobool24){label=24;break;}else{label=17;break;}
 case 17: 
 var $cmp27=($8>>>0)>127;
 if($cmp27){label=18;break;}else{label=22;break;}
 case 18: 
 var $call31=_wcrtomb($arraydecay30,$8,0);
 var $tobool33=($call31|0)==-1;
 if($tobool33){var $retval_0=-1;label=26;break;}else{label=19;break;}
 case 19: 
 var $cmp36=($call31>>>0)>($n_addr_457>>>0);
 if($cmp36){label=20;break;}else{label=21;break;}
 case 20: 
 var $sub39=((($n)-($n_addr_457))|0);
 var $retval_0=$sub39;label=26;break;
 case 21: 
 var $9=HEAP32[(($7)>>2)];
 var $call41=_wcrtomb($s_addr_258,$9,0);
 var $add_ptr42=(($s_addr_258+$call31)|0);
 var $sub43=((($n_addr_457)-($call31))|0);
 var $s_addr_3=$add_ptr42;var $n_addr_5=$sub43;var $10=$7;label=23;break;
 case 22: 
 var $conv45=(($8)&255);
 var $incdec_ptr46=(($s_addr_258+1)|0);
 HEAP8[($s_addr_258)]=$conv45;
 var $dec47=((($n_addr_457)-(1))|0);
 var $_pre78=HEAP32[(($ws)>>2)];
 var $s_addr_3=$incdec_ptr46;var $n_addr_5=$dec47;var $10=$_pre78;label=23;break;
 case 23: 
 var $10;
 var $n_addr_5;
 var $s_addr_3;
 var $incdec_ptr49=(($10+4)|0);
 HEAP32[(($ws)>>2)]=$incdec_ptr49;
 var $tobool22=($n_addr_5|0)==0;
 if($tobool22){var $n_addr_452=0;label=25;break;}else{var $n_addr_457=$n_addr_5;var $s_addr_258=$s_addr_3;var $7=$incdec_ptr49;label=16;break;}
 case 24: 
 HEAP8[($s_addr_258)]=0;
 var $n_addr_452=$n_addr_457;label=25;break;
 case 25: 
 var $n_addr_452;
 HEAP32[(($ws)>>2)]=0;
 var $sub54=((($n)-($n_addr_452))|0);
 var $retval_0=$sub54;label=26;break;
 case 26: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcslen($s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_addr_0=$s;label=2;break;
 case 2: 
 var $s_addr_0;
 var $0=HEAP32[(($s_addr_0)>>2)];
 var $tobool=($0|0)==0;
 var $incdec_ptr=(($s_addr_0+4)|0);
 if($tobool){label=3;break;}else{var $s_addr_0=$incdec_ptr;label=2;break;}
 case 3: 
 var $sub_ptr_lhs_cast=$s_addr_0;
 var $sub_ptr_rhs_cast=$s;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 return $sub_ptr_div;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemcpy($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool2=($n|0)==0;
 if($tobool2){label=3;break;}else{var $s_addr_03=$s;var $n_addr_04=$n;var $d_addr_05=$d;label=2;break;}
 case 2: 
 var $d_addr_05;
 var $n_addr_04;
 var $s_addr_03;
 var $dec=((($n_addr_04)-(1))|0);
 var $incdec_ptr=(($s_addr_03+4)|0);
 var $0=HEAP32[(($s_addr_03)>>2)];
 var $incdec_ptr1=(($d_addr_05+4)|0);
 HEAP32[(($d_addr_05)>>2)]=$0;
 var $tobool=($dec|0)==0;
 if($tobool){label=3;break;}else{var $s_addr_03=$incdec_ptr;var $n_addr_04=$dec;var $d_addr_05=$incdec_ptr1;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemmove($d,$s,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $sub_ptr_lhs_cast=$d;
 var $sub_ptr_rhs_cast=$s;
 var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
 var $sub_ptr_div=$sub_ptr_sub>>2;
 var $cmp=($sub_ptr_div>>>0)<($n>>>0);
 var $tobool11=($n|0)==0;
 if($cmp){label=3;break;}else{label=2;break;}
 case 2: 
 if($tobool11){label=6;break;}else{var $s_addr_015=$s;var $n_addr_116=$n;var $d_addr_017=$d;label=5;break;}
 case 3: 
 if($tobool11){label=6;break;}else{var $dec12_in=$n;label=4;break;}
 case 4: 
 var $dec12_in;
 var $dec12=((($dec12_in)-(1))|0);
 var $arrayidx=(($s+($dec12<<2))|0);
 var $0=HEAP32[(($arrayidx)>>2)];
 var $arrayidx1=(($d+($dec12<<2))|0);
 HEAP32[(($arrayidx1)>>2)]=$0;
 var $tobool=($dec12|0)==0;
 if($tobool){label=6;break;}else{var $dec12_in=$dec12;label=4;break;}
 case 5: 
 var $d_addr_017;
 var $n_addr_116;
 var $s_addr_015;
 var $dec3=((($n_addr_116)-(1))|0);
 var $incdec_ptr=(($s_addr_015+4)|0);
 var $1=HEAP32[(($s_addr_015)>>2)];
 var $incdec_ptr6=(($d_addr_017+4)|0);
 HEAP32[(($d_addr_017)>>2)]=$1;
 var $tobool4=($dec3|0)==0;
 if($tobool4){label=6;break;}else{var $s_addr_015=$incdec_ptr;var $n_addr_116=$dec3;var $d_addr_017=$incdec_ptr6;label=5;break;}
 case 6: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function _wmemset($d,$c,$n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool2=($n|0)==0;
 if($tobool2){label=3;break;}else{var $n_addr_03=$n;var $d_addr_04=$d;label=2;break;}
 case 2: 
 var $d_addr_04;
 var $n_addr_03;
 var $dec=((($n_addr_03)-(1))|0);
 var $incdec_ptr=(($d_addr_04+4)|0);
 HEAP32[(($d_addr_04)>>2)]=$c;
 var $tobool=($dec|0)==0;
 if($tobool){label=3;break;}else{var $n_addr_03=$dec;var $d_addr_04=$incdec_ptr;label=2;break;}
 case 3: 
 return $d;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9type_infoD2Ev($this){
 var label=0;
 return;
}
function __ZNSt8bad_castC2Ev($this){
 var label=0;
 var $0=(($this)|0);
 HEAP32[(($0)>>2)]=2496;
 return;
}
function __ZNSt8bad_castD0Ev($this){
 var label=0;
 var $0=$this;
 __ZdlPv($0);
 return;
}
function __ZNSt8bad_castD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt8bad_cast4whatEv($this){
 var label=0;
 return 1344;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt9type_infoD2Ev($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt9type_infoD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt9type_infoD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;
 var $0=(($this)|0);
 __ZNSt9type_infoD2Ev($0);
 var $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $0=(($this)|0);
 var $1=(($thrown_type)|0);
 var $cmp_i=($0|0)==($1|0);
 if($cmp_i){var $retval_0=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $2=($thrown_type|0)==0;
 if($2){var $retval_0=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $3=$thrown_type;
 var $4=___dynamic_cast($3,10064,10048,-1);
 var $5=$4;
 var $cmp=($4|0)==0;
 if($cmp){var $retval_0=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $6=$info;
 _memset($6, 0, 56)|0;
 var $dst_type=(($info)|0);
 HEAP32[(($dst_type)>>2)]=$5;
 var $static_type=(($info+8)|0);
 HEAP32[(($static_type)>>2)]=$this;
 var $src2dst_offset=(($info+12)|0);
 HEAP32[(($src2dst_offset)>>2)]=-1;
 var $number_of_dst_type=(($info+48)|0);
 HEAP32[(($number_of_dst_type)>>2)]=1;
 var $7=$4;
 var $vtable=HEAP32[(($7)>>2)];
 var $vfn=(($vtable+28)|0);
 var $8=HEAP32[(($vfn)>>2)];
 var $9=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$8]($5,$info,$9,1);
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $10=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp4=($10|0)==1;
 if($cmp4){label=5;break;}else{var $retval_0=0;label=6;break;}
 case 5: 
 var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
 var $11=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$11;
 var $retval_0=1;label=6;break;
 case 6: 
 var $retval_0;
 STACKTOP=sp;return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $static_type=(($info+8)|0);
 var $0=HEAP32[(($static_type)>>2)];
 var $cmp_i=($0|0)==($this|0);
 if($cmp_i){label=2;break;}else{label=8;break;}
 case 2: 
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $1=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp_i2=($1|0)==0;
 if($cmp_i2){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$adjustedPtr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 label=8;break;
 case 4: 
 var $cmp4_i=($1|0)==($adjustedPtr|0);
 if($cmp4_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $path_dst_ptr_to_static_ptr6_i=(($info+24)|0);
 var $2=HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)];
 var $cmp7_i=($2|0)==2;
 if($cmp7_i){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $number_to_static_ptr11_i=(($info+36)|0);
 var $3=HEAP32[(($number_to_static_ptr11_i)>>2)];
 var $add_i=((($3)+(1))|0);
 HEAP32[(($number_to_static_ptr11_i)>>2)]=$add_i;
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=2;
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=8;break;}
 case 2: 
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $3=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp_i5=($3|0)==0;
 if($cmp_i5){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$adjustedPtr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 label=9;break;
 case 4: 
 var $cmp4_i=($3|0)==($adjustedPtr|0);
 if($cmp4_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $path_dst_ptr_to_static_ptr6_i=(($info+24)|0);
 var $4=HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)];
 var $cmp7_i=($4|0)==2;
 if($cmp7_i){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $number_to_static_ptr11_i=(($info+36)|0);
 var $5=HEAP32[(($number_to_static_ptr11_i)>>2)];
 var $add_i=((($5)+(1))|0);
 HEAP32[(($number_to_static_ptr11_i)>>2)]=$add_i;
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=2;
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=9;break;
 case 8: 
 var $__base_type=(($this+8)|0);
 var $6=HEAP32[(($__base_type)>>2)];
 var $7=$6;
 var $vtable=HEAP32[(($7)>>2)];
 var $vfn=(($vtable+28)|0);
 var $8=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$8]($6,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=8;break;}
 case 2: 
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $3=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp_i13=($3|0)==0;
 if($cmp_i13){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$adjustedPtr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 label=16;break;
 case 4: 
 var $cmp4_i=($3|0)==($adjustedPtr|0);
 if($cmp4_i){label=5;break;}else{label=7;break;}
 case 5: 
 var $path_dst_ptr_to_static_ptr6_i=(($info+24)|0);
 var $4=HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)];
 var $cmp7_i=($4|0)==2;
 if($cmp7_i){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($path_dst_ptr_to_static_ptr6_i)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $number_to_static_ptr11_i=(($info+36)|0);
 var $5=HEAP32[(($number_to_static_ptr11_i)>>2)];
 var $add_i=((($5)+(1))|0);
 HEAP32[(($number_to_static_ptr11_i)>>2)]=$add_i;
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=2;
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=16;break;
 case 8: 
 var $__base_count=(($this+12)|0);
 var $6=HEAP32[(($__base_count)>>2)];
 var $add_ptr=(($this+16+($6<<3))|0);
 var $__offset_flags_i15=(($this+20)|0);
 var $7=HEAP32[(($__offset_flags_i15)>>2)];
 var $shr_i16=$7>>8;
 var $and_i17=$7&1;
 var $tobool_i18=($and_i17|0)==0;
 if($tobool_i18){var $offset_to_base_0_i21=$shr_i16;label=10;break;}else{label=9;break;}
 case 9: 
 var $8=$adjustedPtr;
 var $9=HEAP32[(($8)>>2)];
 var $add_ptr_i19=(($9+$shr_i16)|0);
 var $10=$add_ptr_i19;
 var $11=HEAP32[(($10)>>2)];
 var $offset_to_base_0_i21=$11;label=10;break;
 case 10: 
 var $offset_to_base_0_i21;
 var $__base_type_i22=(($this+16)|0);
 var $12=HEAP32[(($__base_type_i22)>>2)];
 var $13=$12;
 var $vtable3_i23=HEAP32[(($13)>>2)];
 var $vfn_i24=(($vtable3_i23+28)|0);
 var $14=HEAP32[(($vfn_i24)>>2)];
 var $add_ptr4_i25=(($adjustedPtr+$offset_to_base_0_i21)|0);
 var $and6_i26=$7&2;
 var $tobool7_i27=($and6_i26|0)!=0;
 var $cond_i28=($tobool7_i27?$path_below:2);
 FUNCTION_TABLE[$14]($12,$info,$add_ptr4_i25,$cond_i28);
 var $cmp=($6|0)>1;
 if($cmp){label=11;break;}else{label=16;break;}
 case 11: 
 var $incdec_ptr=(($this+24)|0);
 var $search_done=(($info+54)|0);
 var $15=$adjustedPtr;
 var $p_0=$incdec_ptr;label=12;break;
 case 12: 
 var $p_0;
 var $__offset_flags_i=(($p_0+4)|0);
 var $16=HEAP32[(($__offset_flags_i)>>2)];
 var $shr_i=$16>>8;
 var $and_i=$16&1;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $offset_to_base_0_i=$shr_i;label=14;break;}else{label=13;break;}
 case 13: 
 var $17=HEAP32[(($15)>>2)];
 var $add_ptr_i=(($17+$shr_i)|0);
 var $18=$add_ptr_i;
 var $19=HEAP32[(($18)>>2)];
 var $offset_to_base_0_i=$19;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $__base_type_i=(($p_0)|0);
 var $20=HEAP32[(($__base_type_i)>>2)];
 var $21=$20;
 var $vtable3_i=HEAP32[(($21)>>2)];
 var $vfn_i=(($vtable3_i+28)|0);
 var $22=HEAP32[(($vfn_i)>>2)];
 var $add_ptr4_i=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $and6_i=$16&2;
 var $tobool7_i=($and6_i|0)!=0;
 var $cond_i=($tobool7_i?$path_below:2);
 FUNCTION_TABLE[$22]($20,$info,$add_ptr4_i,$cond_i);
 var $23=HEAP8[($search_done)];
 var $24=$23&1;
 var $tobool=(($24<<24)>>24)==0;
 if($tobool){label=15;break;}else{label=16;break;}
 case 15: 
 var $incdec_ptr6=(($p_0+8)|0);
 var $cmp7=($incdec_ptr6>>>0)<($add_ptr>>>0);
 if($cmp7){var $p_0=$incdec_ptr6;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $0=$static_ptr;
 var $1=HEAP32[(($0)>>2)];
 var $arrayidx=((($1)-(8))|0);
 var $2=HEAP32[(($arrayidx)>>2)];
 var $3=$2;
 var $add_ptr=(($static_ptr+$3)|0);
 var $arrayidx1=((($1)-(4))|0);
 var $4=HEAP32[(($arrayidx1)>>2)];
 var $5=$4;
 var $dst_type2=(($info)|0);
 HEAP32[(($dst_type2)>>2)]=$dst_type;
 var $static_ptr3=(($info+4)|0);
 HEAP32[(($static_ptr3)>>2)]=$static_ptr;
 var $static_type4=(($info+8)|0);
 HEAP32[(($static_type4)>>2)]=$static_type;
 var $src2dst_offset5=(($info+12)|0);
 HEAP32[(($src2dst_offset5)>>2)]=$src2dst_offset;
 var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
 var $dst_ptr_not_leading_to_static_ptr=(($info+20)|0);
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $path_dynamic_ptr_to_static_ptr=(($info+28)|0);
 var $path_dynamic_ptr_to_dst_ptr=(($info+32)|0);
 var $number_to_dst_ptr=(($info+40)|0);
 var $6=$4;
 var $7=(($dst_type)|0);
 var $cmp_i=($6|0)==($7|0);
 var $8=$dst_ptr_leading_to_static_ptr;
 _memset($8, 0, 39)|0;
 if($cmp_i){label=2;break;}else{label=3;break;}
 case 2: 
 var $number_of_dst_type=(($info+48)|0);
 HEAP32[(($number_of_dst_type)>>2)]=1;
 var $9=$4;
 var $vtable7=HEAP32[(($9)>>2)];
 var $vfn=(($vtable7+20)|0);
 var $10=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$10]($5,$info,$add_ptr,$add_ptr,1,0);
 var $11=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp=($11|0)==1;
 var $add_ptr_=($cmp?$add_ptr:0);
 STACKTOP=sp;return $add_ptr_;
 case 3: 
 var $number_to_static_ptr=(($info+36)|0);
 var $12=$4;
 var $vtable10=HEAP32[(($12)>>2)];
 var $vfn11=(($vtable10+24)|0);
 var $13=HEAP32[(($vfn11)>>2)];
 FUNCTION_TABLE[$13]($5,$info,$add_ptr,1,0);
 var $14=HEAP32[(($number_to_static_ptr)>>2)];
 if(($14|0)==0){ label=4;break;}else if(($14|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $15=HEAP32[(($number_to_dst_ptr)>>2)];
 var $cmp14=($15|0)==1;
 if($cmp14){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $16=HEAP32[(($path_dynamic_ptr_to_static_ptr)>>2)];
 var $cmp16=($16|0)==1;
 if($cmp16){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $17=HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)];
 var $cmp19=($17|0)==1;
 var $18=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
 var $_=($cmp19?$18:0);
 var $dst_ptr_0=$_;label=12;break;
 case 7: 
 var $19=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp25=($19|0)==1;
 if($cmp25){label=11;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[(($number_to_dst_ptr)>>2)];
 var $cmp27=($20|0)==0;
 if($cmp27){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $21=HEAP32[(($path_dynamic_ptr_to_static_ptr)>>2)];
 var $cmp30=($21|0)==1;
 if($cmp30){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $22=HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)];
 var $cmp33=($22|0)==1;
 if($cmp33){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $23=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
 var $dst_ptr_0=$23;label=12;break;
 case 12: 
 var $dst_ptr_0;
 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=5;break;}
 case 2: 
 var $static_ptr_i=(($info+4)|0);
 var $3=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i73=($3|0)==($current_ptr|0);
 if($cmp_i73){label=3;break;}else{label=53;break;}
 case 3: 
 var $path_dynamic_ptr_to_static_ptr_i=(($info+28)|0);
 var $4=HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)];
 var $cmp2_i=($4|0)==1;
 if($cmp2_i){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $dst_type=(($info)|0);
 var $5=HEAP32[(($dst_type)>>2)];
 var $6=(($5)|0);
 var $cmp_i90=($0|0)==($6|0);
 if($cmp_i90){label=6;break;}else{label=29;break;}
 case 6: 
 var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
 var $7=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
 var $cmp=($7|0)==($current_ptr|0);
 if($cmp){label=8;break;}else{label=7;break;}
 case 7: 
 var $dst_ptr_not_leading_to_static_ptr=(($info+20)|0);
 var $8=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
 var $cmp5=($8|0)==($current_ptr|0);
 if($cmp5){label=8;break;}else{label=10;break;}
 case 8: 
 var $cmp7=($path_below|0)==1;
 if($cmp7){label=9;break;}else{label=53;break;}
 case 9: 
 var $path_dynamic_ptr_to_dst_ptr=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=1;
 label=53;break;
 case 10: 
 var $path_dynamic_ptr_to_dst_ptr10=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr10)>>2)]=$path_below;
 var $is_dst_type_derived_from_static_type=(($info+44)|0);
 var $9=HEAP32[(($is_dst_type_derived_from_static_type)>>2)];
 var $cmp11=($9|0)==4;
 if($cmp11){label=53;break;}else{label=11;break;}
 case 11: 
 var $__base_count=(($this+12)|0);
 var $10=HEAP32[(($__base_count)>>2)];
 var $add_ptr=(($this+16+($10<<3))|0);
 var $cmp16137=($10|0)>0;
 if($cmp16137){label=12;break;}else{var $is_dst_type_derived_from_static_type13_2_off0146=0;label=23;break;}
 case 12: 
 var $arraydecay=(($this+16)|0);
 var $found_our_static_ptr=(($info+52)|0);
 var $found_any_static_type=(($info+53)|0);
 var $search_done=(($info+54)|0);
 var $__flags34=(($this+8)|0);
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $11=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off0138=0;var $p_0139=$arraydecay;var $is_dst_type_derived_from_static_type13_0_off0140=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type13_0_off0140;
 var $p_0139;
 var $does_dst_type_point_to_our_static_type_0_off0138;
 HEAP8[($found_our_static_ptr)]=0;
 HEAP8[($found_any_static_type)]=0;
 var $__offset_flags_i106=(($p_0139+4)|0);
 var $12=HEAP32[(($__offset_flags_i106)>>2)];
 var $shr_i107=$12>>8;
 var $and_i108=$12&1;
 var $tobool_i109=($and_i108|0)==0;
 if($tobool_i109){var $offset_to_base_0_i112=$shr_i107;label=15;break;}else{label=14;break;}
 case 14: 
 var $13=HEAP32[(($11)>>2)];
 var $add_ptr_i110=(($13+$shr_i107)|0);
 var $14=$add_ptr_i110;
 var $15=HEAP32[(($14)>>2)];
 var $offset_to_base_0_i112=$15;label=15;break;
 case 15: 
 var $offset_to_base_0_i112;
 var $__base_type_i113=(($p_0139)|0);
 var $16=HEAP32[(($__base_type_i113)>>2)];
 var $17=$16;
 var $vtable3_i114=HEAP32[(($17)>>2)];
 var $vfn_i115=(($vtable3_i114+20)|0);
 var $18=HEAP32[(($vfn_i115)>>2)];
 var $add_ptr4_i116=(($current_ptr+$offset_to_base_0_i112)|0);
 var $and6_i117=$12>>>1;
 var $19=$and6_i117&1;
 var $20=(((2)-($19))|0);
 FUNCTION_TABLE[$18]($16,$info,$current_ptr,$add_ptr4_i116,$20,$use_strcmp);
 var $21=HEAP8[($search_done)];
 var $22=$21&1;
 var $tobool18=(($22<<24)>>24)==0;
 if($tobool18){label=16;break;}else{var $is_dst_type_derived_from_static_type13_2_off0=$is_dst_type_derived_from_static_type13_0_off0140;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off0138;label=22;break;}
 case 16: 
 var $23=HEAP8[($found_any_static_type)];
 var $24=$23&1;
 var $tobool22=(($24<<24)>>24)==0;
 if($tobool22){var $is_dst_type_derived_from_static_type13_1_off0=$is_dst_type_derived_from_static_type13_0_off0140;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off0138;label=21;break;}else{label=17;break;}
 case 17: 
 var $25=HEAP8[($found_our_static_ptr)];
 var $26=$25&1;
 var $tobool25=(($26<<24)>>24)==0;
 if($tobool25){label=20;break;}else{label=18;break;}
 case 18: 
 var $27=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp27=($27|0)==1;
 if($cmp27){label=27;break;}else{label=19;break;}
 case 19: 
 var $28=HEAP32[(($__flags34)>>2)];
 var $and=$28&2;
 var $tobool30=($and|0)==0;
 if($tobool30){label=27;break;}else{var $is_dst_type_derived_from_static_type13_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $29=HEAP32[(($__flags34)>>2)];
 var $and35=$29&1;
 var $tobool36=($and35|0)==0;
 if($tobool36){var $is_dst_type_derived_from_static_type13_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off0138;label=22;break;}else{var $is_dst_type_derived_from_static_type13_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off0138;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type13_1_off0;
 var $incdec_ptr=(($p_0139+8)|0);
 var $cmp16=($incdec_ptr>>>0)<($add_ptr>>>0);
 if($cmp16){var $does_dst_type_point_to_our_static_type_0_off0138=$does_dst_type_point_to_our_static_type_1_off0;var $p_0139=$incdec_ptr;var $is_dst_type_derived_from_static_type13_0_off0140=$is_dst_type_derived_from_static_type13_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type13_2_off0=$is_dst_type_derived_from_static_type13_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type13_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type13_2_off0147=$is_dst_type_derived_from_static_type13_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type13_2_off0146=$is_dst_type_derived_from_static_type13_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type13_2_off0146;
 HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)]=$current_ptr;
 var $number_to_dst_ptr=(($info+40)|0);
 var $30=HEAP32[(($number_to_dst_ptr)>>2)];
 var $add=((($30)+(1))|0);
 HEAP32[(($number_to_dst_ptr)>>2)]=$add;
 var $number_to_static_ptr=(($info+36)|0);
 var $31=HEAP32[(($number_to_static_ptr)>>2)];
 var $cmp44=($31|0)==1;
 if($cmp44){label=24;break;}else{var $is_dst_type_derived_from_static_type13_2_off0147=$is_dst_type_derived_from_static_type13_2_off0146;label=26;break;}
 case 24: 
 var $path_dst_ptr_to_static_ptr45=(($info+24)|0);
 var $32=HEAP32[(($path_dst_ptr_to_static_ptr45)>>2)];
 var $cmp46=($32|0)==2;
 if($cmp46){label=25;break;}else{var $is_dst_type_derived_from_static_type13_2_off0147=$is_dst_type_derived_from_static_type13_2_off0146;label=26;break;}
 case 25: 
 var $search_done48=(($info+54)|0);
 HEAP8[($search_done48)]=1;
 if($is_dst_type_derived_from_static_type13_2_off0146){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type13_2_off0147;
 if($is_dst_type_derived_from_static_type13_2_off0147){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=4;
 label=53;break;
 case 29: 
 var $__base_count63=(($this+12)|0);
 var $33=HEAP32[(($__base_count63)>>2)];
 var $add_ptr64=(($this+16+($33<<3))|0);
 var $__offset_flags_i120=(($this+20)|0);
 var $34=HEAP32[(($__offset_flags_i120)>>2)];
 var $shr_i121=$34>>8;
 var $and_i122=$34&1;
 var $tobool_i123=($and_i122|0)==0;
 if($tobool_i123){var $offset_to_base_0_i126=$shr_i121;label=31;break;}else{label=30;break;}
 case 30: 
 var $35=$current_ptr;
 var $36=HEAP32[(($35)>>2)];
 var $add_ptr_i124=(($36+$shr_i121)|0);
 var $37=$add_ptr_i124;
 var $38=HEAP32[(($37)>>2)];
 var $offset_to_base_0_i126=$38;label=31;break;
 case 31: 
 var $offset_to_base_0_i126;
 var $__base_type_i127=(($this+16)|0);
 var $39=HEAP32[(($__base_type_i127)>>2)];
 var $40=$39;
 var $vtable3_i128=HEAP32[(($40)>>2)];
 var $vfn_i129=(($vtable3_i128+24)|0);
 var $41=HEAP32[(($vfn_i129)>>2)];
 var $add_ptr4_i130=(($current_ptr+$offset_to_base_0_i126)|0);
 var $and6_i131=$34&2;
 var $tobool7_i132=($and6_i131|0)!=0;
 var $cond_i133=($tobool7_i132?$path_below:2);
 FUNCTION_TABLE[$41]($39,$info,$add_ptr4_i130,$cond_i133,$use_strcmp);
 var $incdec_ptr69=(($this+24)|0);
 var $cmp70=($33|0)>1;
 if($cmp70){label=32;break;}else{label=53;break;}
 case 32: 
 var $__flags72=(($this+8)|0);
 var $42=HEAP32[(($__flags72)>>2)];
 var $and73=$42&2;
 var $tobool74=($and73|0)==0;
 if($tobool74){label=33;break;}else{label=34;break;}
 case 33: 
 var $number_to_static_ptr76=(($info+36)|0);
 var $43=HEAP32[(($number_to_static_ptr76)>>2)];
 var $cmp77=($43|0)==1;
 if($cmp77){label=34;break;}else{label=39;break;}
 case 34: 
 var $search_done79=(($info+54)|0);
 var $44=$current_ptr;
 var $p65_0=$incdec_ptr69;label=35;break;
 case 35: 
 var $p65_0;
 var $45=HEAP8[($search_done79)];
 var $46=$45&1;
 var $tobool80=(($46<<24)>>24)==0;
 if($tobool80){label=36;break;}else{label=53;break;}
 case 36: 
 var $__offset_flags_i91=(($p65_0+4)|0);
 var $47=HEAP32[(($__offset_flags_i91)>>2)];
 var $shr_i92=$47>>8;
 var $and_i93=$47&1;
 var $tobool_i94=($and_i93|0)==0;
 if($tobool_i94){var $offset_to_base_0_i97=$shr_i92;label=38;break;}else{label=37;break;}
 case 37: 
 var $48=HEAP32[(($44)>>2)];
 var $add_ptr_i95=(($48+$shr_i92)|0);
 var $49=$add_ptr_i95;
 var $50=HEAP32[(($49)>>2)];
 var $offset_to_base_0_i97=$50;label=38;break;
 case 38: 
 var $offset_to_base_0_i97;
 var $__base_type_i98=(($p65_0)|0);
 var $51=HEAP32[(($__base_type_i98)>>2)];
 var $52=$51;
 var $vtable3_i99=HEAP32[(($52)>>2)];
 var $vfn_i100=(($vtable3_i99+24)|0);
 var $53=HEAP32[(($vfn_i100)>>2)];
 var $add_ptr4_i101=(($current_ptr+$offset_to_base_0_i97)|0);
 var $and6_i102=$47&2;
 var $tobool7_i103=($and6_i102|0)!=0;
 var $cond_i104=($tobool7_i103?$path_below:2);
 FUNCTION_TABLE[$53]($51,$info,$add_ptr4_i101,$cond_i104,$use_strcmp);
 var $incdec_ptr84=(($p65_0+8)|0);
 var $cmp85=($incdec_ptr84>>>0)<($add_ptr64>>>0);
 if($cmp85){var $p65_0=$incdec_ptr84;label=35;break;}else{label=53;break;}
 case 39: 
 var $and88=$42&1;
 var $tobool89=($and88|0)==0;
 if($tobool89){label=41;break;}else{label=40;break;}
 case 40: 
 var $path_dst_ptr_to_static_ptr99=(($info+24)|0);
 var $search_done92=(($info+54)|0);
 var $54=$current_ptr;
 var $p65_1=$incdec_ptr69;label=42;break;
 case 41: 
 var $search_done110=(($info+54)|0);
 var $55=$current_ptr;
 var $p65_2=$incdec_ptr69;label=48;break;
 case 42: 
 var $p65_1;
 var $56=HEAP8[($search_done92)];
 var $57=$56&1;
 var $tobool93=(($57<<24)>>24)==0;
 if($tobool93){label=43;break;}else{label=53;break;}
 case 43: 
 var $58=HEAP32[(($number_to_static_ptr76)>>2)];
 var $cmp97=($58|0)==1;
 if($cmp97){label=44;break;}else{label=45;break;}
 case 44: 
 var $59=HEAP32[(($path_dst_ptr_to_static_ptr99)>>2)];
 var $cmp100=($59|0)==1;
 if($cmp100){label=53;break;}else{label=45;break;}
 case 45: 
 var $__offset_flags_i75=(($p65_1+4)|0);
 var $60=HEAP32[(($__offset_flags_i75)>>2)];
 var $shr_i76=$60>>8;
 var $and_i77=$60&1;
 var $tobool_i78=($and_i77|0)==0;
 if($tobool_i78){var $offset_to_base_0_i81=$shr_i76;label=47;break;}else{label=46;break;}
 case 46: 
 var $61=HEAP32[(($54)>>2)];
 var $add_ptr_i79=(($61+$shr_i76)|0);
 var $62=$add_ptr_i79;
 var $63=HEAP32[(($62)>>2)];
 var $offset_to_base_0_i81=$63;label=47;break;
 case 47: 
 var $offset_to_base_0_i81;
 var $__base_type_i82=(($p65_1)|0);
 var $64=HEAP32[(($__base_type_i82)>>2)];
 var $65=$64;
 var $vtable3_i83=HEAP32[(($65)>>2)];
 var $vfn_i84=(($vtable3_i83+24)|0);
 var $66=HEAP32[(($vfn_i84)>>2)];
 var $add_ptr4_i85=(($current_ptr+$offset_to_base_0_i81)|0);
 var $and6_i86=$60&2;
 var $tobool7_i87=($and6_i86|0)!=0;
 var $cond_i88=($tobool7_i87?$path_below:2);
 FUNCTION_TABLE[$66]($64,$info,$add_ptr4_i85,$cond_i88,$use_strcmp);
 var $incdec_ptr105=(($p65_1+8)|0);
 var $cmp106=($incdec_ptr105>>>0)<($add_ptr64>>>0);
 if($cmp106){var $p65_1=$incdec_ptr105;label=42;break;}else{label=53;break;}
 case 48: 
 var $p65_2;
 var $67=HEAP8[($search_done110)];
 var $68=$67&1;
 var $tobool111=(($68<<24)>>24)==0;
 if($tobool111){label=49;break;}else{label=53;break;}
 case 49: 
 var $69=HEAP32[(($number_to_static_ptr76)>>2)];
 var $cmp115=($69|0)==1;
 if($cmp115){label=53;break;}else{label=50;break;}
 case 50: 
 var $__offset_flags_i=(($p65_2+4)|0);
 var $70=HEAP32[(($__offset_flags_i)>>2)];
 var $shr_i=$70>>8;
 var $and_i=$70&1;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $offset_to_base_0_i=$shr_i;label=52;break;}else{label=51;break;}
 case 51: 
 var $71=HEAP32[(($55)>>2)];
 var $add_ptr_i=(($71+$shr_i)|0);
 var $72=$add_ptr_i;
 var $73=HEAP32[(($72)>>2)];
 var $offset_to_base_0_i=$73;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $__base_type_i=(($p65_2)|0);
 var $74=HEAP32[(($__base_type_i)>>2)];
 var $75=$74;
 var $vtable3_i=HEAP32[(($75)>>2)];
 var $vfn_i=(($vtable3_i+24)|0);
 var $76=HEAP32[(($vfn_i)>>2)];
 var $add_ptr4_i=(($current_ptr+$offset_to_base_0_i)|0);
 var $and6_i=$70&2;
 var $tobool7_i=($and6_i|0)!=0;
 var $cond_i=($tobool7_i?$path_below:2);
 FUNCTION_TABLE[$76]($74,$info,$add_ptr4_i,$cond_i,$use_strcmp);
 var $incdec_ptr120=(($p65_2+8)|0);
 var $cmp121=($incdec_ptr120>>>0)<($add_ptr64>>>0);
 if($cmp121){var $p65_2=$incdec_ptr120;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=5;break;}
 case 2: 
 var $static_ptr_i=(($info+4)|0);
 var $3=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i32=($3|0)==($current_ptr|0);
 if($cmp_i32){label=3;break;}else{label=20;break;}
 case 3: 
 var $path_dynamic_ptr_to_static_ptr_i=(($info+28)|0);
 var $4=HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)];
 var $cmp2_i=($4|0)==1;
 if($cmp2_i){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $dst_type=(($info)|0);
 var $5=HEAP32[(($dst_type)>>2)];
 var $6=(($5)|0);
 var $cmp_i33=($0|0)==($6|0);
 if($cmp_i33){label=6;break;}else{label=19;break;}
 case 6: 
 var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
 var $7=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
 var $cmp=($7|0)==($current_ptr|0);
 if($cmp){label=8;break;}else{label=7;break;}
 case 7: 
 var $dst_ptr_not_leading_to_static_ptr=(($info+20)|0);
 var $8=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
 var $cmp5=($8|0)==($current_ptr|0);
 if($cmp5){label=8;break;}else{label=10;break;}
 case 8: 
 var $cmp7=($path_below|0)==1;
 if($cmp7){label=9;break;}else{label=20;break;}
 case 9: 
 var $path_dynamic_ptr_to_dst_ptr=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=1;
 label=20;break;
 case 10: 
 var $path_dynamic_ptr_to_dst_ptr10=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr10)>>2)]=$path_below;
 var $is_dst_type_derived_from_static_type=(($info+44)|0);
 var $9=HEAP32[(($is_dst_type_derived_from_static_type)>>2)];
 var $cmp11=($9|0)==4;
 if($cmp11){label=20;break;}else{label=11;break;}
 case 11: 
 var $found_our_static_ptr=(($info+52)|0);
 HEAP8[($found_our_static_ptr)]=0;
 var $found_any_static_type=(($info+53)|0);
 HEAP8[($found_any_static_type)]=0;
 var $__base_type=(($this+8)|0);
 var $10=HEAP32[(($__base_type)>>2)];
 var $11=$10;
 var $vtable=HEAP32[(($11)>>2)];
 var $vfn=(($vtable+20)|0);
 var $12=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$12]($10,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $13=HEAP8[($found_any_static_type)];
 var $14=$13&1;
 var $tobool16=(($14<<24)>>24)==0;
 if($tobool16){var $is_dst_type_derived_from_static_type13_0_off034=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $15=HEAP8[($found_our_static_ptr)];
 var $16=$15&1;
 var $not_tobool19=(($16<<24)>>24)==0;
 if($not_tobool19){var $is_dst_type_derived_from_static_type13_0_off034=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type13_0_off034;
 HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)]=$current_ptr;
 var $number_to_dst_ptr=(($info+40)|0);
 var $17=HEAP32[(($number_to_dst_ptr)>>2)];
 var $add=((($17)+(1))|0);
 HEAP32[(($number_to_dst_ptr)>>2)]=$add;
 var $number_to_static_ptr=(($info+36)|0);
 var $18=HEAP32[(($number_to_static_ptr)>>2)];
 var $cmp26=($18|0)==1;
 if($cmp26){label=14;break;}else{label=16;break;}
 case 14: 
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $19=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp27=($19|0)==2;
 if($cmp27){label=15;break;}else{label=16;break;}
 case 15: 
 var $search_done=(($info+54)|0);
 HEAP8[($search_done)]=1;
 if($is_dst_type_derived_from_static_type13_0_off034){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type13_0_off034){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=4;
 label=20;break;
 case 19: 
 var $__base_type40=(($this+8)|0);
 var $20=HEAP32[(($__base_type40)>>2)];
 var $21=$20;
 var $vtable41=HEAP32[(($21)>>2)];
 var $vfn42=(($vtable41+24)|0);
 var $22=HEAP32[(($vfn42)>>2)];
 FUNCTION_TABLE[$22]($20,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $static_type=(($info+8)|0);
 var $0=HEAP32[(($static_type)>>2)];
 var $cmp_i=($0|0)==($this|0);
 if($cmp_i){label=2;break;}else{label=5;break;}
 case 2: 
 var $static_ptr_i=(($info+4)|0);
 var $1=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i20=($1|0)==($current_ptr|0);
 if($cmp_i20){label=3;break;}else{label=14;break;}
 case 3: 
 var $path_dynamic_ptr_to_static_ptr_i=(($info+28)|0);
 var $2=HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)];
 var $cmp2_i=($2|0)==1;
 if($cmp2_i){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($path_dynamic_ptr_to_static_ptr_i)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $dst_type=(($info)|0);
 var $3=HEAP32[(($dst_type)>>2)];
 var $cmp_i19=($3|0)==($this|0);
 if($cmp_i19){label=6;break;}else{label=14;break;}
 case 6: 
 var $dst_ptr_leading_to_static_ptr=(($info+16)|0);
 var $4=HEAP32[(($dst_ptr_leading_to_static_ptr)>>2)];
 var $cmp=($4|0)==($current_ptr|0);
 if($cmp){label=8;break;}else{label=7;break;}
 case 7: 
 var $dst_ptr_not_leading_to_static_ptr=(($info+20)|0);
 var $5=HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)];
 var $cmp5=($5|0)==($current_ptr|0);
 if($cmp5){label=8;break;}else{label=10;break;}
 case 8: 
 var $cmp7=($path_below|0)==1;
 if($cmp7){label=9;break;}else{label=14;break;}
 case 9: 
 var $path_dynamic_ptr_to_dst_ptr=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr)>>2)]=1;
 label=14;break;
 case 10: 
 var $path_dynamic_ptr_to_dst_ptr10=(($info+32)|0);
 HEAP32[(($path_dynamic_ptr_to_dst_ptr10)>>2)]=$path_below;
 HEAP32[(($dst_ptr_not_leading_to_static_ptr)>>2)]=$current_ptr;
 var $number_to_dst_ptr=(($info+40)|0);
 var $6=HEAP32[(($number_to_dst_ptr)>>2)];
 var $add=((($6)+(1))|0);
 HEAP32[(($number_to_dst_ptr)>>2)]=$add;
 var $number_to_static_ptr=(($info+36)|0);
 var $7=HEAP32[(($number_to_static_ptr)>>2)];
 var $cmp12=($7|0)==1;
 if($cmp12){label=11;break;}else{label=13;break;}
 case 11: 
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $8=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp13=($8|0)==2;
 if($cmp13){label=12;break;}else{label=13;break;}
 case 12: 
 var $search_done=(($info+54)|0);
 HEAP8[($search_done)]=1;
 label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type=(($info+44)|0);
 HEAP32[(($is_dst_type_derived_from_static_type)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=12;break;}
 case 2: 
 var $found_any_static_type_i=(($info+53)|0);
 HEAP8[($found_any_static_type_i)]=1;
 var $static_ptr_i=(($info+4)|0);
 var $3=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i27=($3|0)==($current_ptr|0);
 if($cmp_i27){label=3;break;}else{label=26;break;}
 case 3: 
 var $found_our_static_ptr_i=(($info+52)|0);
 HEAP8[($found_our_static_ptr_i)]=1;
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $4=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp2_i=($4|0)==0;
 if($cmp2_i){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$dst_ptr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 var $number_of_dst_type_i=(($info+48)|0);
 var $5=HEAP32[(($number_of_dst_type_i)>>2)];
 var $cmp5_i=($5|0)==1;
 var $cmp7_i=($path_below|0)==1;
 var $or_cond_i=$cmp5_i&$cmp7_i;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=26;break;
 case 6: 
 var $cmp10_i=($4|0)==($dst_ptr|0);
 if($cmp10_i){label=7;break;}else{label=11;break;}
 case 7: 
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 var $6=HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)];
 var $cmp13_i=($6|0)==2;
 if($cmp13_i){label=8;break;}else{var $7=$6;label=9;break;}
 case 8: 
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=$path_below;
 var $7=$path_below;label=9;break;
 case 9: 
 var $7;
 var $number_of_dst_type17_i=(($info+48)|0);
 var $8=HEAP32[(($number_of_dst_type17_i)>>2)];
 var $cmp18_i=($8|0)==1;
 var $cmp21_i=($7|0)==1;
 var $or_cond19_i=$cmp18_i&$cmp21_i;
 if($or_cond19_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $search_done23_i=(($info+54)|0);
 HEAP8[($search_done23_i)]=1;
 label=26;break;
 case 11: 
 var $number_to_static_ptr26_i=(($info+36)|0);
 var $9=HEAP32[(($number_to_static_ptr26_i)>>2)];
 var $add_i=((($9)+(1))|0);
 HEAP32[(($number_to_static_ptr26_i)>>2)]=$add_i;
 var $search_done27_i=(($info+54)|0);
 HEAP8[($search_done27_i)]=1;
 label=26;break;
 case 12: 
 var $found_our_static_ptr2=(($info+52)|0);
 var $10=HEAP8[($found_our_static_ptr2)];
 var $11=$10&1;
 var $found_any_static_type5=(($info+53)|0);
 var $12=HEAP8[($found_any_static_type5)];
 var $13=$12&1;
 var $__base_count=(($this+12)|0);
 var $14=HEAP32[(($__base_count)>>2)];
 var $add_ptr=(($this+16+($14<<3))|0);
 HEAP8[($found_our_static_ptr2)]=0;
 HEAP8[($found_any_static_type5)]=0;
 var $__offset_flags_i29=(($this+20)|0);
 var $15=HEAP32[(($__offset_flags_i29)>>2)];
 var $shr_i30=$15>>8;
 var $and_i31=$15&1;
 var $tobool_i32=($and_i31|0)==0;
 if($tobool_i32){var $offset_to_base_0_i35=$shr_i30;label=14;break;}else{label=13;break;}
 case 13: 
 var $16=$current_ptr;
 var $17=HEAP32[(($16)>>2)];
 var $add_ptr_i33=(($17+$shr_i30)|0);
 var $18=$add_ptr_i33;
 var $19=HEAP32[(($18)>>2)];
 var $offset_to_base_0_i35=$19;label=14;break;
 case 14: 
 var $offset_to_base_0_i35;
 var $__base_type_i36=(($this+16)|0);
 var $20=HEAP32[(($__base_type_i36)>>2)];
 var $21=$20;
 var $vtable3_i37=HEAP32[(($21)>>2)];
 var $vfn_i38=(($vtable3_i37+20)|0);
 var $22=HEAP32[(($vfn_i38)>>2)];
 var $add_ptr4_i39=(($current_ptr+$offset_to_base_0_i35)|0);
 var $and6_i40=$15&2;
 var $tobool7_i41=($and6_i40|0)!=0;
 var $cond_i42=($tobool7_i41?$path_below:2);
 FUNCTION_TABLE[$22]($20,$info,$dst_ptr,$add_ptr4_i39,$cond_i42,$use_strcmp);
 var $cmp=($14|0)>1;
 if($cmp){label=15;break;}else{label=25;break;}
 case 15: 
 var $incdec_ptr=(($this+24)|0);
 var $path_dst_ptr_to_static_ptr=(($info+24)|0);
 var $__flags=(($this+8)|0);
 var $search_done=(($info+54)|0);
 var $23=$current_ptr;
 var $p_0=$incdec_ptr;label=16;break;
 case 16: 
 var $p_0;
 var $24=HEAP8[($search_done)];
 var $25=$24&1;
 var $tobool14=(($25<<24)>>24)==0;
 if($tobool14){label=17;break;}else{label=25;break;}
 case 17: 
 var $26=HEAP8[($found_our_static_ptr2)];
 var $27=$26&1;
 var $tobool17=(($27<<24)>>24)==0;
 if($tobool17){label=20;break;}else{label=18;break;}
 case 18: 
 var $28=HEAP32[(($path_dst_ptr_to_static_ptr)>>2)];
 var $cmp19=($28|0)==1;
 if($cmp19){label=25;break;}else{label=19;break;}
 case 19: 
 var $29=HEAP32[(($__flags)>>2)];
 var $and=$29&2;
 var $tobool22=($and|0)==0;
 if($tobool22){label=25;break;}else{label=22;break;}
 case 20: 
 var $30=HEAP8[($found_any_static_type5)];
 var $31=$30&1;
 var $tobool27=(($31<<24)>>24)==0;
 if($tobool27){label=22;break;}else{label=21;break;}
 case 21: 
 var $32=HEAP32[(($__flags)>>2)];
 var $and30=$32&1;
 var $tobool31=($and30|0)==0;
 if($tobool31){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($found_our_static_ptr2)]=0;
 HEAP8[($found_any_static_type5)]=0;
 var $__offset_flags_i=(($p_0+4)|0);
 var $33=HEAP32[(($__offset_flags_i)>>2)];
 var $shr_i=$33>>8;
 var $and_i=$33&1;
 var $tobool_i=($and_i|0)==0;
 if($tobool_i){var $offset_to_base_0_i=$shr_i;label=24;break;}else{label=23;break;}
 case 23: 
 var $34=HEAP32[(($23)>>2)];
 var $add_ptr_i=(($34+$shr_i)|0);
 var $35=$add_ptr_i;
 var $36=HEAP32[(($35)>>2)];
 var $offset_to_base_0_i=$36;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $__base_type_i=(($p_0)|0);
 var $37=HEAP32[(($__base_type_i)>>2)];
 var $38=$37;
 var $vtable3_i=HEAP32[(($38)>>2)];
 var $vfn_i=(($vtable3_i+20)|0);
 var $39=HEAP32[(($vfn_i)>>2)];
 var $add_ptr4_i=(($current_ptr+$offset_to_base_0_i)|0);
 var $and6_i=$33&2;
 var $tobool7_i=($and6_i|0)!=0;
 var $cond_i=($tobool7_i?$path_below:2);
 FUNCTION_TABLE[$39]($37,$info,$dst_ptr,$add_ptr4_i,$cond_i,$use_strcmp);
 var $incdec_ptr39=(($p_0+8)|0);
 var $cmp40=($incdec_ptr39>>>0)<($add_ptr>>>0);
 if($cmp40){var $p_0=$incdec_ptr39;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($found_our_static_ptr2)]=$11;
 HEAP8[($found_any_static_type5)]=$13;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($this)|0);
 var $static_type=(($info+8)|0);
 var $1=HEAP32[(($static_type)>>2)];
 var $2=(($1)|0);
 var $cmp_i=($0|0)==($2|0);
 if($cmp_i){label=2;break;}else{label=12;break;}
 case 2: 
 var $found_any_static_type_i=(($info+53)|0);
 HEAP8[($found_any_static_type_i)]=1;
 var $static_ptr_i=(($info+4)|0);
 var $3=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i7=($3|0)==($current_ptr|0);
 if($cmp_i7){label=3;break;}else{label=13;break;}
 case 3: 
 var $found_our_static_ptr_i=(($info+52)|0);
 HEAP8[($found_our_static_ptr_i)]=1;
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $4=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp2_i=($4|0)==0;
 if($cmp2_i){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$dst_ptr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 var $number_of_dst_type_i=(($info+48)|0);
 var $5=HEAP32[(($number_of_dst_type_i)>>2)];
 var $cmp5_i=($5|0)==1;
 var $cmp7_i=($path_below|0)==1;
 var $or_cond_i=$cmp5_i&$cmp7_i;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=13;break;
 case 6: 
 var $cmp10_i=($4|0)==($dst_ptr|0);
 if($cmp10_i){label=7;break;}else{label=11;break;}
 case 7: 
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 var $6=HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)];
 var $cmp13_i=($6|0)==2;
 if($cmp13_i){label=8;break;}else{var $7=$6;label=9;break;}
 case 8: 
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=$path_below;
 var $7=$path_below;label=9;break;
 case 9: 
 var $7;
 var $number_of_dst_type17_i=(($info+48)|0);
 var $8=HEAP32[(($number_of_dst_type17_i)>>2)];
 var $cmp18_i=($8|0)==1;
 var $cmp21_i=($7|0)==1;
 var $or_cond19_i=$cmp18_i&$cmp21_i;
 if($or_cond19_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $search_done23_i=(($info+54)|0);
 HEAP8[($search_done23_i)]=1;
 label=13;break;
 case 11: 
 var $number_to_static_ptr26_i=(($info+36)|0);
 var $9=HEAP32[(($number_to_static_ptr26_i)>>2)];
 var $add_i=((($9)+(1))|0);
 HEAP32[(($number_to_static_ptr26_i)>>2)]=$add_i;
 var $search_done27_i=(($info+54)|0);
 HEAP8[($search_done27_i)]=1;
 label=13;break;
 case 12: 
 var $__base_type=(($this+8)|0);
 var $10=HEAP32[(($__base_type)>>2)];
 var $11=$10;
 var $vtable=HEAP32[(($11)>>2)];
 var $vfn=(($vtable+20)|0);
 var $12=HEAP32[(($vfn)>>2)];
 FUNCTION_TABLE[$12]($10,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $static_type=(($info+8)|0);
 var $0=HEAP32[(($static_type)>>2)];
 var $cmp_i=($0|0)==($this|0);
 if($cmp_i){label=2;break;}else{label=12;break;}
 case 2: 
 var $found_any_static_type_i=(($info+53)|0);
 HEAP8[($found_any_static_type_i)]=1;
 var $static_ptr_i=(($info+4)|0);
 var $1=HEAP32[(($static_ptr_i)>>2)];
 var $cmp_i2=($1|0)==($current_ptr|0);
 if($cmp_i2){label=3;break;}else{label=12;break;}
 case 3: 
 var $found_our_static_ptr_i=(($info+52)|0);
 HEAP8[($found_our_static_ptr_i)]=1;
 var $dst_ptr_leading_to_static_ptr_i=(($info+16)|0);
 var $2=HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)];
 var $cmp2_i=($2|0)==0;
 if($cmp2_i){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($dst_ptr_leading_to_static_ptr_i)>>2)]=$dst_ptr;
 var $path_dst_ptr_to_static_ptr_i=(($info+24)|0);
 HEAP32[(($path_dst_ptr_to_static_ptr_i)>>2)]=$path_below;
 var $number_to_static_ptr_i=(($info+36)|0);
 HEAP32[(($number_to_static_ptr_i)>>2)]=1;
 var $number_of_dst_type_i=(($info+48)|0);
 var $3=HEAP32[(($number_of_dst_type_i)>>2)];
 var $cmp5_i=($3|0)==1;
 var $cmp7_i=($path_below|0)==1;
 var $or_cond_i=$cmp5_i&$cmp7_i;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $search_done_i=(($info+54)|0);
 HEAP8[($search_done_i)]=1;
 label=12;break;
 case 6: 
 var $cmp10_i=($2|0)==($dst_ptr|0);
 if($cmp10_i){label=7;break;}else{label=11;break;}
 case 7: 
 var $path_dst_ptr_to_static_ptr12_i=(($info+24)|0);
 var $4=HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)];
 var $cmp13_i=($4|0)==2;
 if($cmp13_i){label=8;break;}else{var $5=$4;label=9;break;}
 case 8: 
 HEAP32[(($path_dst_ptr_to_static_ptr12_i)>>2)]=$path_below;
 var $5=$path_below;label=9;break;
 case 9: 
 var $5;
 var $number_of_dst_type17_i=(($info+48)|0);
 var $6=HEAP32[(($number_of_dst_type17_i)>>2)];
 var $cmp18_i=($6|0)==1;
 var $cmp21_i=($5|0)==1;
 var $or_cond19_i=$cmp18_i&$cmp21_i;
 if($or_cond19_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $search_done23_i=(($info+54)|0);
 HEAP8[($search_done23_i)]=1;
 label=12;break;
 case 11: 
 var $number_to_static_ptr26_i=(($info+36)|0);
 var $7=HEAP32[(($number_to_static_ptr26_i)>>2)];
 var $add_i=((($7)+(1))|0);
 HEAP32[(($number_to_static_ptr26_i)>>2)]=$add_i;
 var $search_done27_i=(($info+54)|0);
 HEAP8[($search_done27_i)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($bytes>>>0)<245;
 if($cmp){label=2;break;}else{label=78;break;}
 case 2: 
 var $cmp1=($bytes>>>0)<11;
 if($cmp1){var $cond=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $add2=((($bytes)+(11))|0);
 var $and=$add2&-8;
 var $cond=$and;label=4;break;
 case 4: 
 var $cond;
 var $shr=$cond>>>3;
 var $0=HEAP32[((10224)>>2)];
 var $shr3=$0>>>($shr>>>0);
 var $and4=$shr3&3;
 var $cmp5=($and4|0)==0;
 if($cmp5){label=12;break;}else{label=5;break;}
 case 5: 
 var $neg=$shr3&1;
 var $and7=$neg^1;
 var $add8=((($and7)+($shr))|0);
 var $shl=$add8<<1;
 var $arrayidx=((10264+($shl<<2))|0);
 var $1=$arrayidx;
 var $arrayidx_sum=((($shl)+(2))|0);
 var $2=((10264+($arrayidx_sum<<2))|0);
 var $3=HEAP32[(($2)>>2)];
 var $fd9=(($3+8)|0);
 var $4=HEAP32[(($fd9)>>2)];
 var $cmp10=($1|0)==($4|0);
 if($cmp10){label=6;break;}else{label=7;break;}
 case 6: 
 var $shl12=1<<$add8;
 var $neg13=$shl12^-1;
 var $and14=$0&$neg13;
 HEAP32[((10224)>>2)]=$and14;
 label=11;break;
 case 7: 
 var $5=$4;
 var $6=HEAP32[((10240)>>2)];
 var $cmp15=($5>>>0)<($6>>>0);
 if($cmp15){label=10;break;}else{label=8;break;}
 case 8: 
 var $bk=(($4+12)|0);
 var $7=HEAP32[(($bk)>>2)];
 var $cmp16=($7|0)==($3|0);
 if($cmp16){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($bk)>>2)]=$1;
 HEAP32[(($2)>>2)]=$4;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $shl22=$add8<<3;
 var $or23=$shl22|3;
 var $head=(($3+4)|0);
 HEAP32[(($head)>>2)]=$or23;
 var $8=$3;
 var $add_ptr_sum106=$shl22|4;
 var $head25=(($8+$add_ptr_sum106)|0);
 var $9=$head25;
 var $10=HEAP32[(($9)>>2)];
 var $or26=$10|1;
 HEAP32[(($9)>>2)]=$or26;
 var $11=$fd9;
 var $mem_0=$11;label=341;break;
 case 12: 
 var $12=HEAP32[((10232)>>2)];
 var $cmp29=($cond>>>0)>($12>>>0);
 if($cmp29){label=13;break;}else{var $nb_0=$cond;label=160;break;}
 case 13: 
 var $cmp31=($shr3|0)==0;
 if($cmp31){label=27;break;}else{label=14;break;}
 case 14: 
 var $shl35=$shr3<<$shr;
 var $shl37=2<<$shr;
 var $sub=(((-$shl37))|0);
 var $or40=$shl37|$sub;
 var $and41=$shl35&$or40;
 var $sub42=(((-$and41))|0);
 var $and43=$and41&$sub42;
 var $sub44=((($and43)-(1))|0);
 var $shr45=$sub44>>>12;
 var $and46=$shr45&16;
 var $shr47=$sub44>>>($and46>>>0);
 var $shr48=$shr47>>>5;
 var $and49=$shr48&8;
 var $add50=$and49|$and46;
 var $shr51=$shr47>>>($and49>>>0);
 var $shr52=$shr51>>>2;
 var $and53=$shr52&4;
 var $add54=$add50|$and53;
 var $shr55=$shr51>>>($and53>>>0);
 var $shr56=$shr55>>>1;
 var $and57=$shr56&2;
 var $add58=$add54|$and57;
 var $shr59=$shr55>>>($and57>>>0);
 var $shr60=$shr59>>>1;
 var $and61=$shr60&1;
 var $add62=$add58|$and61;
 var $shr63=$shr59>>>($and61>>>0);
 var $add64=((($add62)+($shr63))|0);
 var $shl65=$add64<<1;
 var $arrayidx66=((10264+($shl65<<2))|0);
 var $13=$arrayidx66;
 var $arrayidx66_sum=((($shl65)+(2))|0);
 var $14=((10264+($arrayidx66_sum<<2))|0);
 var $15=HEAP32[(($14)>>2)];
 var $fd69=(($15+8)|0);
 var $16=HEAP32[(($fd69)>>2)];
 var $cmp70=($13|0)==($16|0);
 if($cmp70){label=15;break;}else{label=16;break;}
 case 15: 
 var $shl72=1<<$add64;
 var $neg73=$shl72^-1;
 var $and74=$0&$neg73;
 HEAP32[((10224)>>2)]=$and74;
 label=20;break;
 case 16: 
 var $17=$16;
 var $18=HEAP32[((10240)>>2)];
 var $cmp76=($17>>>0)<($18>>>0);
 if($cmp76){label=19;break;}else{label=17;break;}
 case 17: 
 var $bk78=(($16+12)|0);
 var $19=HEAP32[(($bk78)>>2)];
 var $cmp79=($19|0)==($15|0);
 if($cmp79){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($bk78)>>2)]=$13;
 HEAP32[(($14)>>2)]=$16;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $shl90=$add64<<3;
 var $sub91=((($shl90)-($cond))|0);
 var $or93=$cond|3;
 var $head94=(($15+4)|0);
 HEAP32[(($head94)>>2)]=$or93;
 var $20=$15;
 var $add_ptr95=(($20+$cond)|0);
 var $21=$add_ptr95;
 var $or96=$sub91|1;
 var $add_ptr95_sum103=$cond|4;
 var $head97=(($20+$add_ptr95_sum103)|0);
 var $22=$head97;
 HEAP32[(($22)>>2)]=$or96;
 var $add_ptr98=(($20+$shl90)|0);
 var $prev_foot=$add_ptr98;
 HEAP32[(($prev_foot)>>2)]=$sub91;
 var $23=HEAP32[((10232)>>2)];
 var $cmp99=($23|0)==0;
 if($cmp99){label=26;break;}else{label=21;break;}
 case 21: 
 var $24=HEAP32[((10244)>>2)];
 var $shr101=$23>>>3;
 var $shl102=$shr101<<1;
 var $arrayidx103=((10264+($shl102<<2))|0);
 var $25=$arrayidx103;
 var $26=HEAP32[((10224)>>2)];
 var $shl105=1<<$shr101;
 var $and106=$26&$shl105;
 var $tobool107=($and106|0)==0;
 if($tobool107){label=22;break;}else{label=23;break;}
 case 22: 
 var $or110=$26|$shl105;
 HEAP32[((10224)>>2)]=$or110;
 var $arrayidx103_sum_pre=((($shl102)+(2))|0);
 var $_pre=((10264+($arrayidx103_sum_pre<<2))|0);
 var $F104_0=$25;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $arrayidx103_sum104=((($shl102)+(2))|0);
 var $27=((10264+($arrayidx103_sum104<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[((10240)>>2)];
 var $cmp113=($29>>>0)<($30>>>0);
 if($cmp113){label=24;break;}else{var $F104_0=$28;var $_pre_phi=$27;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F104_0;
 HEAP32[(($_pre_phi)>>2)]=$24;
 var $bk122=(($F104_0+12)|0);
 HEAP32[(($bk122)>>2)]=$24;
 var $fd123=(($24+8)|0);
 HEAP32[(($fd123)>>2)]=$F104_0;
 var $bk124=(($24+12)|0);
 HEAP32[(($bk124)>>2)]=$25;
 label=26;break;
 case 26: 
 HEAP32[((10232)>>2)]=$sub91;
 HEAP32[((10244)>>2)]=$21;
 var $31=$fd69;
 var $mem_0=$31;label=341;break;
 case 27: 
 var $32=HEAP32[((10228)>>2)];
 var $cmp128=($32|0)==0;
 if($cmp128){var $nb_0=$cond;label=160;break;}else{label=28;break;}
 case 28: 
 var $sub_i=(((-$32))|0);
 var $and_i=$32&$sub_i;
 var $sub2_i=((($and_i)-(1))|0);
 var $shr_i=$sub2_i>>>12;
 var $and3_i=$shr_i&16;
 var $shr4_i=$sub2_i>>>($and3_i>>>0);
 var $shr5_i=$shr4_i>>>5;
 var $and6_i=$shr5_i&8;
 var $add_i=$and6_i|$and3_i;
 var $shr7_i=$shr4_i>>>($and6_i>>>0);
 var $shr8_i=$shr7_i>>>2;
 var $and9_i=$shr8_i&4;
 var $add10_i=$add_i|$and9_i;
 var $shr11_i=$shr7_i>>>($and9_i>>>0);
 var $shr12_i=$shr11_i>>>1;
 var $and13_i=$shr12_i&2;
 var $add14_i=$add10_i|$and13_i;
 var $shr15_i=$shr11_i>>>($and13_i>>>0);
 var $shr16_i=$shr15_i>>>1;
 var $and17_i=$shr16_i&1;
 var $add18_i=$add14_i|$and17_i;
 var $shr19_i=$shr15_i>>>($and17_i>>>0);
 var $add20_i=((($add18_i)+($shr19_i))|0);
 var $arrayidx_i=((10528+($add20_i<<2))|0);
 var $33=HEAP32[(($arrayidx_i)>>2)];
 var $head_i=(($33+4)|0);
 var $34=HEAP32[(($head_i)>>2)];
 var $and21_i=$34&-8;
 var $sub22_i=((($and21_i)-($cond))|0);
 var $t_0_i=$33;var $v_0_i=$33;var $rsize_0_i=$sub22_i;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $arrayidx23_i=(($t_0_i+16)|0);
 var $35=HEAP32[(($arrayidx23_i)>>2)];
 var $cmp_i=($35|0)==0;
 if($cmp_i){label=30;break;}else{var $cond7_i=$35;label=31;break;}
 case 30: 
 var $arrayidx27_i=(($t_0_i+20)|0);
 var $36=HEAP32[(($arrayidx27_i)>>2)];
 var $cmp28_i=($36|0)==0;
 if($cmp28_i){label=32;break;}else{var $cond7_i=$36;label=31;break;}
 case 31: 
 var $cond7_i;
 var $head29_i=(($cond7_i+4)|0);
 var $37=HEAP32[(($head29_i)>>2)];
 var $and30_i=$37&-8;
 var $sub31_i=((($and30_i)-($cond))|0);
 var $cmp32_i=($sub31_i>>>0)<($rsize_0_i>>>0);
 var $sub31_rsize_0_i=($cmp32_i?$sub31_i:$rsize_0_i);
 var $cond_v_0_i=($cmp32_i?$cond7_i:$v_0_i);
 var $t_0_i=$cond7_i;var $v_0_i=$cond_v_0_i;var $rsize_0_i=$sub31_rsize_0_i;label=29;break;
 case 32: 
 var $38=$v_0_i;
 var $39=HEAP32[((10240)>>2)];
 var $cmp33_i=($38>>>0)<($39>>>0);
 if($cmp33_i){label=76;break;}else{label=33;break;}
 case 33: 
 var $add_ptr_i=(($38+$cond)|0);
 var $40=$add_ptr_i;
 var $cmp35_i=($38>>>0)<($add_ptr_i>>>0);
 if($cmp35_i){label=34;break;}else{label=76;break;}
 case 34: 
 var $parent_i=(($v_0_i+24)|0);
 var $41=HEAP32[(($parent_i)>>2)];
 var $bk_i=(($v_0_i+12)|0);
 var $42=HEAP32[(($bk_i)>>2)];
 var $cmp40_i=($42|0)==($v_0_i|0);
 if($cmp40_i){label=40;break;}else{label=35;break;}
 case 35: 
 var $fd_i=(($v_0_i+8)|0);
 var $43=HEAP32[(($fd_i)>>2)];
 var $44=$43;
 var $cmp45_i=($44>>>0)<($39>>>0);
 if($cmp45_i){label=39;break;}else{label=36;break;}
 case 36: 
 var $bk47_i=(($43+12)|0);
 var $45=HEAP32[(($bk47_i)>>2)];
 var $cmp48_i=($45|0)==($v_0_i|0);
 if($cmp48_i){label=37;break;}else{label=39;break;}
 case 37: 
 var $fd50_i=(($42+8)|0);
 var $46=HEAP32[(($fd50_i)>>2)];
 var $cmp51_i=($46|0)==($v_0_i|0);
 if($cmp51_i){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($bk47_i)>>2)]=$42;
 HEAP32[(($fd50_i)>>2)]=$43;
 var $R_1_i=$42;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $arrayidx61_i=(($v_0_i+20)|0);
 var $47=HEAP32[(($arrayidx61_i)>>2)];
 var $cmp62_i=($47|0)==0;
 if($cmp62_i){label=41;break;}else{var $R_0_i=$47;var $RP_0_i=$arrayidx61_i;label=42;break;}
 case 41: 
 var $arrayidx65_i=(($v_0_i+16)|0);
 var $48=HEAP32[(($arrayidx65_i)>>2)];
 var $cmp66_i=($48|0)==0;
 if($cmp66_i){var $R_1_i=0;label=47;break;}else{var $R_0_i=$48;var $RP_0_i=$arrayidx65_i;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $arrayidx71_i=(($R_0_i+20)|0);
 var $49=HEAP32[(($arrayidx71_i)>>2)];
 var $cmp72_i=($49|0)==0;
 if($cmp72_i){label=43;break;}else{var $R_0_i=$49;var $RP_0_i=$arrayidx71_i;label=42;break;}
 case 43: 
 var $arrayidx75_i=(($R_0_i+16)|0);
 var $50=HEAP32[(($arrayidx75_i)>>2)];
 var $cmp76_i=($50|0)==0;
 if($cmp76_i){label=44;break;}else{var $R_0_i=$50;var $RP_0_i=$arrayidx75_i;label=42;break;}
 case 44: 
 var $51=$RP_0_i;
 var $cmp81_i=($51>>>0)<($39>>>0);
 if($cmp81_i){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $cmp90_i=($41|0)==0;
 if($cmp90_i){label=67;break;}else{label=48;break;}
 case 48: 
 var $index_i=(($v_0_i+28)|0);
 var $52=HEAP32[(($index_i)>>2)];
 var $arrayidx94_i=((10528+($52<<2))|0);
 var $53=HEAP32[(($arrayidx94_i)>>2)];
 var $cmp95_i=($v_0_i|0)==($53|0);
 if($cmp95_i){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($arrayidx94_i)>>2)]=$R_1_i;
 var $cond5_i=($R_1_i|0)==0;
 if($cond5_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $54=HEAP32[(($index_i)>>2)];
 var $shl_i=1<<$54;
 var $neg_i=$shl_i^-1;
 var $55=HEAP32[((10228)>>2)];
 var $and103_i=$55&$neg_i;
 HEAP32[((10228)>>2)]=$and103_i;
 label=67;break;
 case 51: 
 var $56=$41;
 var $57=HEAP32[((10240)>>2)];
 var $cmp107_i=($56>>>0)<($57>>>0);
 if($cmp107_i){label=55;break;}else{label=52;break;}
 case 52: 
 var $arrayidx113_i=(($41+16)|0);
 var $58=HEAP32[(($arrayidx113_i)>>2)];
 var $cmp114_i=($58|0)==($v_0_i|0);
 if($cmp114_i){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($arrayidx113_i)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $arrayidx121_i=(($41+20)|0);
 HEAP32[(($arrayidx121_i)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $cmp126_i=($R_1_i|0)==0;
 if($cmp126_i){label=67;break;}else{label=57;break;}
 case 57: 
 var $59=$R_1_i;
 var $60=HEAP32[((10240)>>2)];
 var $cmp130_i=($59>>>0)<($60>>>0);
 if($cmp130_i){label=66;break;}else{label=58;break;}
 case 58: 
 var $parent135_i=(($R_1_i+24)|0);
 HEAP32[(($parent135_i)>>2)]=$41;
 var $arrayidx137_i=(($v_0_i+16)|0);
 var $61=HEAP32[(($arrayidx137_i)>>2)];
 var $cmp138_i=($61|0)==0;
 if($cmp138_i){label=62;break;}else{label=59;break;}
 case 59: 
 var $62=$61;
 var $63=HEAP32[((10240)>>2)];
 var $cmp142_i=($62>>>0)<($63>>>0);
 if($cmp142_i){label=61;break;}else{label=60;break;}
 case 60: 
 var $arrayidx148_i=(($R_1_i+16)|0);
 HEAP32[(($arrayidx148_i)>>2)]=$61;
 var $parent149_i=(($61+24)|0);
 HEAP32[(($parent149_i)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $arrayidx154_i=(($v_0_i+20)|0);
 var $64=HEAP32[(($arrayidx154_i)>>2)];
 var $cmp155_i=($64|0)==0;
 if($cmp155_i){label=67;break;}else{label=63;break;}
 case 63: 
 var $65=$64;
 var $66=HEAP32[((10240)>>2)];
 var $cmp159_i=($65>>>0)<($66>>>0);
 if($cmp159_i){label=65;break;}else{label=64;break;}
 case 64: 
 var $arrayidx165_i=(($R_1_i+20)|0);
 HEAP32[(($arrayidx165_i)>>2)]=$64;
 var $parent166_i=(($64+24)|0);
 HEAP32[(($parent166_i)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $cmp174_i=($rsize_0_i>>>0)<16;
 if($cmp174_i){label=68;break;}else{label=69;break;}
 case 68: 
 var $add177_i=((($rsize_0_i)+($cond))|0);
 var $or178_i=$add177_i|3;
 var $head179_i=(($v_0_i+4)|0);
 HEAP32[(($head179_i)>>2)]=$or178_i;
 var $add_ptr181_sum_i=((($add177_i)+(4))|0);
 var $head182_i=(($38+$add_ptr181_sum_i)|0);
 var $67=$head182_i;
 var $68=HEAP32[(($67)>>2)];
 var $or183_i=$68|1;
 HEAP32[(($67)>>2)]=$or183_i;
 label=77;break;
 case 69: 
 var $or186_i=$cond|3;
 var $head187_i=(($v_0_i+4)|0);
 HEAP32[(($head187_i)>>2)]=$or186_i;
 var $or188_i=$rsize_0_i|1;
 var $add_ptr_sum_i175=$cond|4;
 var $head189_i=(($38+$add_ptr_sum_i175)|0);
 var $69=$head189_i;
 HEAP32[(($69)>>2)]=$or188_i;
 var $add_ptr_sum1_i=((($rsize_0_i)+($cond))|0);
 var $add_ptr190_i=(($38+$add_ptr_sum1_i)|0);
 var $prev_foot_i=$add_ptr190_i;
 HEAP32[(($prev_foot_i)>>2)]=$rsize_0_i;
 var $70=HEAP32[((10232)>>2)];
 var $cmp191_i=($70|0)==0;
 if($cmp191_i){label=75;break;}else{label=70;break;}
 case 70: 
 var $71=HEAP32[((10244)>>2)];
 var $shr194_i=$70>>>3;
 var $shl195_i=$shr194_i<<1;
 var $arrayidx196_i=((10264+($shl195_i<<2))|0);
 var $72=$arrayidx196_i;
 var $73=HEAP32[((10224)>>2)];
 var $shl198_i=1<<$shr194_i;
 var $and199_i=$73&$shl198_i;
 var $tobool200_i=($and199_i|0)==0;
 if($tobool200_i){label=71;break;}else{label=72;break;}
 case 71: 
 var $or204_i=$73|$shl198_i;
 HEAP32[((10224)>>2)]=$or204_i;
 var $arrayidx196_sum_pre_i=((($shl195_i)+(2))|0);
 var $_pre_i=((10264+($arrayidx196_sum_pre_i<<2))|0);
 var $F197_0_i=$72;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $arrayidx196_sum2_i=((($shl195_i)+(2))|0);
 var $74=((10264+($arrayidx196_sum2_i<<2))|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=$75;
 var $77=HEAP32[((10240)>>2)];
 var $cmp208_i=($76>>>0)<($77>>>0);
 if($cmp208_i){label=73;break;}else{var $F197_0_i=$75;var $_pre_phi_i=$74;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F197_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$71;
 var $bk218_i=(($F197_0_i+12)|0);
 HEAP32[(($bk218_i)>>2)]=$71;
 var $fd219_i=(($71+8)|0);
 HEAP32[(($fd219_i)>>2)]=$F197_0_i;
 var $bk220_i=(($71+12)|0);
 HEAP32[(($bk220_i)>>2)]=$72;
 label=75;break;
 case 75: 
 HEAP32[((10232)>>2)]=$rsize_0_i;
 HEAP32[((10244)>>2)]=$40;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $add_ptr225_i=(($v_0_i+8)|0);
 var $78=$add_ptr225_i;
 var $cmp130=($add_ptr225_i|0)==0;
 if($cmp130){var $nb_0=$cond;label=160;break;}else{var $mem_0=$78;label=341;break;}
 case 78: 
 var $cmp138=($bytes>>>0)>4294967231;
 if($cmp138){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $add143=((($bytes)+(11))|0);
 var $and144=$add143&-8;
 var $79=HEAP32[((10228)>>2)];
 var $cmp145=($79|0)==0;
 if($cmp145){var $nb_0=$and144;label=160;break;}else{label=80;break;}
 case 80: 
 var $sub_i107=(((-$and144))|0);
 var $shr_i108=$add143>>>8;
 var $cmp_i109=($shr_i108|0)==0;
 if($cmp_i109){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $cmp1_i=($and144>>>0)>16777215;
 if($cmp1_i){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $sub4_i=((($shr_i108)+(1048320))|0);
 var $shr5_i111=$sub4_i>>>16;
 var $and_i112=$shr5_i111&8;
 var $shl_i113=$shr_i108<<$and_i112;
 var $sub6_i=((($shl_i113)+(520192))|0);
 var $shr7_i114=$sub6_i>>>16;
 var $and8_i=$shr7_i114&4;
 var $add_i115=$and8_i|$and_i112;
 var $shl9_i=$shl_i113<<$and8_i;
 var $sub10_i=((($shl9_i)+(245760))|0);
 var $shr11_i116=$sub10_i>>>16;
 var $and12_i=$shr11_i116&2;
 var $add13_i=$add_i115|$and12_i;
 var $sub14_i=(((14)-($add13_i))|0);
 var $shl15_i=$shl9_i<<$and12_i;
 var $shr16_i117=$shl15_i>>>15;
 var $add17_i=((($sub14_i)+($shr16_i117))|0);
 var $shl18_i=$add17_i<<1;
 var $add19_i=((($add17_i)+(7))|0);
 var $shr20_i=$and144>>>($add19_i>>>0);
 var $and21_i118=$shr20_i&1;
 var $add22_i=$and21_i118|$shl18_i;
 var $idx_0_i=$add22_i;label=83;break;
 case 83: 
 var $idx_0_i;
 var $arrayidx_i119=((10528+($idx_0_i<<2))|0);
 var $80=HEAP32[(($arrayidx_i119)>>2)];
 var $cmp24_i=($80|0)==0;
 if($cmp24_i){var $v_2_i=0;var $rsize_2_i=$sub_i107;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $cmp26_i=($idx_0_i|0)==31;
 if($cmp26_i){var $cond_i=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $shr27_i=$idx_0_i>>>1;
 var $sub30_i=(((25)-($shr27_i))|0);
 var $cond_i=$sub30_i;label=86;break;
 case 86: 
 var $cond_i;
 var $shl31_i=$and144<<$cond_i;
 var $v_0_i123=0;var $rsize_0_i122=$sub_i107;var $t_0_i121=$80;var $sizebits_0_i=$shl31_i;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i121;
 var $rsize_0_i122;
 var $v_0_i123;
 var $head_i124=(($t_0_i121+4)|0);
 var $81=HEAP32[(($head_i124)>>2)];
 var $and32_i=$81&-8;
 var $sub33_i=((($and32_i)-($and144))|0);
 var $cmp34_i=($sub33_i>>>0)<($rsize_0_i122>>>0);
 if($cmp34_i){label=88;break;}else{var $v_1_i=$v_0_i123;var $rsize_1_i=$rsize_0_i122;label=89;break;}
 case 88: 
 var $cmp36_i=($and32_i|0)==($and144|0);
 if($cmp36_i){var $v_2_i=$t_0_i121;var $rsize_2_i=$sub33_i;var $t_1_i=$t_0_i121;label=90;break;}else{var $v_1_i=$t_0_i121;var $rsize_1_i=$sub33_i;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $arrayidx40_i=(($t_0_i121+20)|0);
 var $82=HEAP32[(($arrayidx40_i)>>2)];
 var $shr41_i=$sizebits_0_i>>>31;
 var $arrayidx44_i=(($t_0_i121+16+($shr41_i<<2))|0);
 var $83=HEAP32[(($arrayidx44_i)>>2)];
 var $cmp45_i125=($82|0)==0;
 var $cmp46_i=($82|0)==($83|0);
 var $or_cond_i=$cmp45_i125|$cmp46_i;
 var $rst_1_i=($or_cond_i?$rst_0_i:$82);
 var $cmp49_i=($83|0)==0;
 var $shl52_i=$sizebits_0_i<<1;
 if($cmp49_i){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i123=$v_1_i;var $rsize_0_i122=$rsize_1_i;var $t_0_i121=$83;var $sizebits_0_i=$shl52_i;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $cmp54_i=($t_1_i|0)==0;
 var $cmp56_i=($v_2_i|0)==0;
 var $or_cond18_i=$cmp54_i&$cmp56_i;
 if($or_cond18_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $shl59_i=2<<$idx_0_i;
 var $sub62_i=(((-$shl59_i))|0);
 var $or_i=$shl59_i|$sub62_i;
 var $and63_i=$79&$or_i;
 var $cmp64_i=($and63_i|0)==0;
 if($cmp64_i){var $nb_0=$and144;label=160;break;}else{label=92;break;}
 case 92: 
 var $sub66_i=(((-$and63_i))|0);
 var $and67_i=$and63_i&$sub66_i;
 var $sub69_i=((($and67_i)-(1))|0);
 var $shr71_i=$sub69_i>>>12;
 var $and72_i=$shr71_i&16;
 var $shr74_i=$sub69_i>>>($and72_i>>>0);
 var $shr75_i=$shr74_i>>>5;
 var $and76_i=$shr75_i&8;
 var $add77_i=$and76_i|$and72_i;
 var $shr78_i=$shr74_i>>>($and76_i>>>0);
 var $shr79_i=$shr78_i>>>2;
 var $and80_i=$shr79_i&4;
 var $add81_i=$add77_i|$and80_i;
 var $shr82_i=$shr78_i>>>($and80_i>>>0);
 var $shr83_i=$shr82_i>>>1;
 var $and84_i=$shr83_i&2;
 var $add85_i=$add81_i|$and84_i;
 var $shr86_i=$shr82_i>>>($and84_i>>>0);
 var $shr87_i=$shr86_i>>>1;
 var $and88_i=$shr87_i&1;
 var $add89_i=$add85_i|$and88_i;
 var $shr90_i=$shr86_i>>>($and88_i>>>0);
 var $add91_i=((($add89_i)+($shr90_i))|0);
 var $arrayidx93_i=((10528+($add91_i<<2))|0);
 var $84=HEAP32[(($arrayidx93_i)>>2)];
 var $t_2_ph_i=$84;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $cmp9623_i=($t_2_ph_i|0)==0;
 if($cmp9623_i){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_224_i=$t_2_ph_i;var $rsize_325_i=$rsize_2_i;var $v_326_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_326_i;
 var $rsize_325_i;
 var $t_224_i;
 var $head98_i=(($t_224_i+4)|0);
 var $85=HEAP32[(($head98_i)>>2)];
 var $and99_i=$85&-8;
 var $sub100_i=((($and99_i)-($and144))|0);
 var $cmp101_i=($sub100_i>>>0)<($rsize_325_i>>>0);
 var $sub100_rsize_3_i=($cmp101_i?$sub100_i:$rsize_325_i);
 var $t_2_v_3_i=($cmp101_i?$t_224_i:$v_326_i);
 var $arrayidx105_i=(($t_224_i+16)|0);
 var $86=HEAP32[(($arrayidx105_i)>>2)];
 var $cmp106_i=($86|0)==0;
 if($cmp106_i){label=95;break;}else{var $t_224_i=$86;var $rsize_325_i=$sub100_rsize_3_i;var $v_326_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $arrayidx112_i=(($t_224_i+20)|0);
 var $87=HEAP32[(($arrayidx112_i)>>2)];
 var $cmp96_i=($87|0)==0;
 if($cmp96_i){var $rsize_3_lcssa_i=$sub100_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_224_i=$87;var $rsize_325_i=$sub100_rsize_3_i;var $v_326_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $cmp115_i=($v_3_lcssa_i|0)==0;
 if($cmp115_i){var $nb_0=$and144;label=160;break;}else{label=97;break;}
 case 97: 
 var $88=HEAP32[((10232)>>2)];
 var $sub117_i=((($88)-($and144))|0);
 var $cmp118_i=($rsize_3_lcssa_i>>>0)<($sub117_i>>>0);
 if($cmp118_i){label=98;break;}else{var $nb_0=$and144;label=160;break;}
 case 98: 
 var $89=$v_3_lcssa_i;
 var $90=HEAP32[((10240)>>2)];
 var $cmp120_i=($89>>>0)<($90>>>0);
 if($cmp120_i){label=158;break;}else{label=99;break;}
 case 99: 
 var $add_ptr_i128=(($89+$and144)|0);
 var $91=$add_ptr_i128;
 var $cmp122_i=($89>>>0)<($add_ptr_i128>>>0);
 if($cmp122_i){label=100;break;}else{label=158;break;}
 case 100: 
 var $parent_i129=(($v_3_lcssa_i+24)|0);
 var $92=HEAP32[(($parent_i129)>>2)];
 var $bk_i130=(($v_3_lcssa_i+12)|0);
 var $93=HEAP32[(($bk_i130)>>2)];
 var $cmp127_i=($93|0)==($v_3_lcssa_i|0);
 if($cmp127_i){label=106;break;}else{label=101;break;}
 case 101: 
 var $fd_i131=(($v_3_lcssa_i+8)|0);
 var $94=HEAP32[(($fd_i131)>>2)];
 var $95=$94;
 var $cmp132_i=($95>>>0)<($90>>>0);
 if($cmp132_i){label=105;break;}else{label=102;break;}
 case 102: 
 var $bk135_i=(($94+12)|0);
 var $96=HEAP32[(($bk135_i)>>2)];
 var $cmp136_i=($96|0)==($v_3_lcssa_i|0);
 if($cmp136_i){label=103;break;}else{label=105;break;}
 case 103: 
 var $fd138_i=(($93+8)|0);
 var $97=HEAP32[(($fd138_i)>>2)];
 var $cmp139_i=($97|0)==($v_3_lcssa_i|0);
 if($cmp139_i){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($bk135_i)>>2)]=$93;
 HEAP32[(($fd138_i)>>2)]=$94;
 var $R_1_i139=$93;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $arrayidx150_i=(($v_3_lcssa_i+20)|0);
 var $98=HEAP32[(($arrayidx150_i)>>2)];
 var $cmp151_i=($98|0)==0;
 if($cmp151_i){label=107;break;}else{var $R_0_i137=$98;var $RP_0_i136=$arrayidx150_i;label=108;break;}
 case 107: 
 var $arrayidx154_i133=(($v_3_lcssa_i+16)|0);
 var $99=HEAP32[(($arrayidx154_i133)>>2)];
 var $cmp155_i134=($99|0)==0;
 if($cmp155_i134){var $R_1_i139=0;label=113;break;}else{var $R_0_i137=$99;var $RP_0_i136=$arrayidx154_i133;label=108;break;}
 case 108: 
 var $RP_0_i136;
 var $R_0_i137;
 var $arrayidx160_i=(($R_0_i137+20)|0);
 var $100=HEAP32[(($arrayidx160_i)>>2)];
 var $cmp161_i=($100|0)==0;
 if($cmp161_i){label=109;break;}else{var $R_0_i137=$100;var $RP_0_i136=$arrayidx160_i;label=108;break;}
 case 109: 
 var $arrayidx164_i=(($R_0_i137+16)|0);
 var $101=HEAP32[(($arrayidx164_i)>>2)];
 var $cmp165_i=($101|0)==0;
 if($cmp165_i){label=110;break;}else{var $R_0_i137=$101;var $RP_0_i136=$arrayidx164_i;label=108;break;}
 case 110: 
 var $102=$RP_0_i136;
 var $cmp170_i=($102>>>0)<($90>>>0);
 if($cmp170_i){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i136)>>2)]=0;
 var $R_1_i139=$R_0_i137;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i139;
 var $cmp179_i=($92|0)==0;
 if($cmp179_i){label=133;break;}else{label=114;break;}
 case 114: 
 var $index_i140=(($v_3_lcssa_i+28)|0);
 var $103=HEAP32[(($index_i140)>>2)];
 var $arrayidx183_i=((10528+($103<<2))|0);
 var $104=HEAP32[(($arrayidx183_i)>>2)];
 var $cmp184_i=($v_3_lcssa_i|0)==($104|0);
 if($cmp184_i){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($arrayidx183_i)>>2)]=$R_1_i139;
 var $cond20_i=($R_1_i139|0)==0;
 if($cond20_i){label=116;break;}else{label=123;break;}
 case 116: 
 var $105=HEAP32[(($index_i140)>>2)];
 var $shl191_i=1<<$105;
 var $neg_i141=$shl191_i^-1;
 var $106=HEAP32[((10228)>>2)];
 var $and193_i=$106&$neg_i141;
 HEAP32[((10228)>>2)]=$and193_i;
 label=133;break;
 case 117: 
 var $107=$92;
 var $108=HEAP32[((10240)>>2)];
 var $cmp197_i=($107>>>0)<($108>>>0);
 if($cmp197_i){label=121;break;}else{label=118;break;}
 case 118: 
 var $arrayidx203_i=(($92+16)|0);
 var $109=HEAP32[(($arrayidx203_i)>>2)];
 var $cmp204_i=($109|0)==($v_3_lcssa_i|0);
 if($cmp204_i){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($arrayidx203_i)>>2)]=$R_1_i139;
 label=122;break;
 case 120: 
 var $arrayidx211_i=(($92+20)|0);
 HEAP32[(($arrayidx211_i)>>2)]=$R_1_i139;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $cmp216_i=($R_1_i139|0)==0;
 if($cmp216_i){label=133;break;}else{label=123;break;}
 case 123: 
 var $110=$R_1_i139;
 var $111=HEAP32[((10240)>>2)];
 var $cmp220_i=($110>>>0)<($111>>>0);
 if($cmp220_i){label=132;break;}else{label=124;break;}
 case 124: 
 var $parent225_i=(($R_1_i139+24)|0);
 HEAP32[(($parent225_i)>>2)]=$92;
 var $arrayidx227_i=(($v_3_lcssa_i+16)|0);
 var $112=HEAP32[(($arrayidx227_i)>>2)];
 var $cmp228_i=($112|0)==0;
 if($cmp228_i){label=128;break;}else{label=125;break;}
 case 125: 
 var $113=$112;
 var $114=HEAP32[((10240)>>2)];
 var $cmp232_i=($113>>>0)<($114>>>0);
 if($cmp232_i){label=127;break;}else{label=126;break;}
 case 126: 
 var $arrayidx238_i=(($R_1_i139+16)|0);
 HEAP32[(($arrayidx238_i)>>2)]=$112;
 var $parent239_i=(($112+24)|0);
 HEAP32[(($parent239_i)>>2)]=$R_1_i139;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $arrayidx244_i=(($v_3_lcssa_i+20)|0);
 var $115=HEAP32[(($arrayidx244_i)>>2)];
 var $cmp245_i=($115|0)==0;
 if($cmp245_i){label=133;break;}else{label=129;break;}
 case 129: 
 var $116=$115;
 var $117=HEAP32[((10240)>>2)];
 var $cmp249_i=($116>>>0)<($117>>>0);
 if($cmp249_i){label=131;break;}else{label=130;break;}
 case 130: 
 var $arrayidx255_i=(($R_1_i139+20)|0);
 HEAP32[(($arrayidx255_i)>>2)]=$115;
 var $parent256_i=(($115+24)|0);
 HEAP32[(($parent256_i)>>2)]=$R_1_i139;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $cmp264_i=($rsize_3_lcssa_i>>>0)<16;
 if($cmp264_i){label=134;break;}else{label=135;break;}
 case 134: 
 var $add267_i=((($rsize_3_lcssa_i)+($and144))|0);
 var $or269_i=$add267_i|3;
 var $head270_i=(($v_3_lcssa_i+4)|0);
 HEAP32[(($head270_i)>>2)]=$or269_i;
 var $add_ptr272_sum_i=((($add267_i)+(4))|0);
 var $head273_i=(($89+$add_ptr272_sum_i)|0);
 var $118=$head273_i;
 var $119=HEAP32[(($118)>>2)];
 var $or274_i=$119|1;
 HEAP32[(($118)>>2)]=$or274_i;
 label=159;break;
 case 135: 
 var $or277_i=$and144|3;
 var $head278_i=(($v_3_lcssa_i+4)|0);
 HEAP32[(($head278_i)>>2)]=$or277_i;
 var $or279_i=$rsize_3_lcssa_i|1;
 var $add_ptr_sum_i143174=$and144|4;
 var $head280_i=(($89+$add_ptr_sum_i143174)|0);
 var $120=$head280_i;
 HEAP32[(($120)>>2)]=$or279_i;
 var $add_ptr_sum1_i144=((($rsize_3_lcssa_i)+($and144))|0);
 var $add_ptr281_i=(($89+$add_ptr_sum1_i144)|0);
 var $prev_foot_i145=$add_ptr281_i;
 HEAP32[(($prev_foot_i145)>>2)]=$rsize_3_lcssa_i;
 var $shr282_i=$rsize_3_lcssa_i>>>3;
 var $cmp283_i=($rsize_3_lcssa_i>>>0)<256;
 if($cmp283_i){label=136;break;}else{label=141;break;}
 case 136: 
 var $shl287_i=$shr282_i<<1;
 var $arrayidx288_i=((10264+($shl287_i<<2))|0);
 var $121=$arrayidx288_i;
 var $122=HEAP32[((10224)>>2)];
 var $shl290_i=1<<$shr282_i;
 var $and291_i=$122&$shl290_i;
 var $tobool292_i=($and291_i|0)==0;
 if($tobool292_i){label=137;break;}else{label=138;break;}
 case 137: 
 var $or296_i=$122|$shl290_i;
 HEAP32[((10224)>>2)]=$or296_i;
 var $arrayidx288_sum_pre_i=((($shl287_i)+(2))|0);
 var $_pre_i146=((10264+($arrayidx288_sum_pre_i<<2))|0);
 var $F289_0_i=$121;var $_pre_phi_i147=$_pre_i146;label=140;break;
 case 138: 
 var $arrayidx288_sum16_i=((($shl287_i)+(2))|0);
 var $123=((10264+($arrayidx288_sum16_i<<2))|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=$124;
 var $126=HEAP32[((10240)>>2)];
 var $cmp300_i=($125>>>0)<($126>>>0);
 if($cmp300_i){label=139;break;}else{var $F289_0_i=$124;var $_pre_phi_i147=$123;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i147;
 var $F289_0_i;
 HEAP32[(($_pre_phi_i147)>>2)]=$91;
 var $bk310_i=(($F289_0_i+12)|0);
 HEAP32[(($bk310_i)>>2)]=$91;
 var $add_ptr_sum14_i=((($and144)+(8))|0);
 var $fd311_i=(($89+$add_ptr_sum14_i)|0);
 var $127=$fd311_i;
 HEAP32[(($127)>>2)]=$F289_0_i;
 var $add_ptr_sum15_i=((($and144)+(12))|0);
 var $bk312_i=(($89+$add_ptr_sum15_i)|0);
 var $128=$bk312_i;
 HEAP32[(($128)>>2)]=$121;
 label=159;break;
 case 141: 
 var $129=$add_ptr_i128;
 var $shr317_i=$rsize_3_lcssa_i>>>8;
 var $cmp318_i=($shr317_i|0)==0;
 if($cmp318_i){var $I315_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $cmp322_i=($rsize_3_lcssa_i>>>0)>16777215;
 if($cmp322_i){var $I315_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $sub328_i=((($shr317_i)+(1048320))|0);
 var $shr329_i=$sub328_i>>>16;
 var $and330_i=$shr329_i&8;
 var $shl332_i=$shr317_i<<$and330_i;
 var $sub333_i=((($shl332_i)+(520192))|0);
 var $shr334_i=$sub333_i>>>16;
 var $and335_i=$shr334_i&4;
 var $add336_i=$and335_i|$and330_i;
 var $shl337_i=$shl332_i<<$and335_i;
 var $sub338_i=((($shl337_i)+(245760))|0);
 var $shr339_i=$sub338_i>>>16;
 var $and340_i=$shr339_i&2;
 var $add341_i=$add336_i|$and340_i;
 var $sub342_i=(((14)-($add341_i))|0);
 var $shl343_i=$shl337_i<<$and340_i;
 var $shr344_i=$shl343_i>>>15;
 var $add345_i=((($sub342_i)+($shr344_i))|0);
 var $shl346_i=$add345_i<<1;
 var $add347_i=((($add345_i)+(7))|0);
 var $shr348_i=$rsize_3_lcssa_i>>>($add347_i>>>0);
 var $and349_i=$shr348_i&1;
 var $add350_i=$and349_i|$shl346_i;
 var $I315_0_i=$add350_i;label=144;break;
 case 144: 
 var $I315_0_i;
 var $arrayidx354_i=((10528+($I315_0_i<<2))|0);
 var $add_ptr_sum2_i=((($and144)+(28))|0);
 var $index355_i=(($89+$add_ptr_sum2_i)|0);
 var $130=$index355_i;
 HEAP32[(($130)>>2)]=$I315_0_i;
 var $add_ptr_sum3_i=((($and144)+(16))|0);
 var $child356_i=(($89+$add_ptr_sum3_i)|0);
 var $child356_sum_i=((($and144)+(20))|0);
 var $arrayidx357_i=(($89+$child356_sum_i)|0);
 var $131=$arrayidx357_i;
 HEAP32[(($131)>>2)]=0;
 var $arrayidx359_i=$child356_i;
 HEAP32[(($arrayidx359_i)>>2)]=0;
 var $132=HEAP32[((10228)>>2)];
 var $shl361_i=1<<$I315_0_i;
 var $and362_i=$132&$shl361_i;
 var $tobool363_i=($and362_i|0)==0;
 if($tobool363_i){label=145;break;}else{label=146;break;}
 case 145: 
 var $or367_i=$132|$shl361_i;
 HEAP32[((10228)>>2)]=$or367_i;
 HEAP32[(($arrayidx354_i)>>2)]=$129;
 var $133=$arrayidx354_i;
 var $add_ptr_sum4_i=((($and144)+(24))|0);
 var $parent368_i=(($89+$add_ptr_sum4_i)|0);
 var $134=$parent368_i;
 HEAP32[(($134)>>2)]=$133;
 var $add_ptr_sum5_i=((($and144)+(12))|0);
 var $bk369_i=(($89+$add_ptr_sum5_i)|0);
 var $135=$bk369_i;
 HEAP32[(($135)>>2)]=$129;
 var $add_ptr_sum6_i=((($and144)+(8))|0);
 var $fd370_i=(($89+$add_ptr_sum6_i)|0);
 var $136=$fd370_i;
 HEAP32[(($136)>>2)]=$129;
 label=159;break;
 case 146: 
 var $137=HEAP32[(($arrayidx354_i)>>2)];
 var $cmp373_i=($I315_0_i|0)==31;
 if($cmp373_i){var $cond382_i=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $shr377_i=$I315_0_i>>>1;
 var $sub380_i=(((25)-($shr377_i))|0);
 var $cond382_i=$sub380_i;label=148;break;
 case 148: 
 var $cond382_i;
 var $shl383_i=$rsize_3_lcssa_i<<$cond382_i;
 var $K372_0_i=$shl383_i;var $T_0_i=$137;label=149;break;
 case 149: 
 var $T_0_i;
 var $K372_0_i;
 var $head385_i=(($T_0_i+4)|0);
 var $138=HEAP32[(($head385_i)>>2)];
 var $and386_i=$138&-8;
 var $cmp387_i=($and386_i|0)==($rsize_3_lcssa_i|0);
 if($cmp387_i){label=154;break;}else{label=150;break;}
 case 150: 
 var $shr390_i=$K372_0_i>>>31;
 var $arrayidx393_i=(($T_0_i+16+($shr390_i<<2))|0);
 var $139=HEAP32[(($arrayidx393_i)>>2)];
 var $cmp395_i=($139|0)==0;
 var $shl394_i=$K372_0_i<<1;
 if($cmp395_i){label=151;break;}else{var $K372_0_i=$shl394_i;var $T_0_i=$139;label=149;break;}
 case 151: 
 var $140=$arrayidx393_i;
 var $141=HEAP32[((10240)>>2)];
 var $cmp400_i=($140>>>0)<($141>>>0);
 if($cmp400_i){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($arrayidx393_i)>>2)]=$129;
 var $add_ptr_sum11_i=((($and144)+(24))|0);
 var $parent405_i=(($89+$add_ptr_sum11_i)|0);
 var $142=$parent405_i;
 HEAP32[(($142)>>2)]=$T_0_i;
 var $add_ptr_sum12_i=((($and144)+(12))|0);
 var $bk406_i=(($89+$add_ptr_sum12_i)|0);
 var $143=$bk406_i;
 HEAP32[(($143)>>2)]=$129;
 var $add_ptr_sum13_i=((($and144)+(8))|0);
 var $fd407_i=(($89+$add_ptr_sum13_i)|0);
 var $144=$fd407_i;
 HEAP32[(($144)>>2)]=$129;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $fd412_i=(($T_0_i+8)|0);
 var $145=HEAP32[(($fd412_i)>>2)];
 var $146=$T_0_i;
 var $147=HEAP32[((10240)>>2)];
 var $cmp414_i=($146>>>0)<($147>>>0);
 if($cmp414_i){label=157;break;}else{label=155;break;}
 case 155: 
 var $148=$145;
 var $cmp418_i=($148>>>0)<($147>>>0);
 if($cmp418_i){label=157;break;}else{label=156;break;}
 case 156: 
 var $bk425_i=(($145+12)|0);
 HEAP32[(($bk425_i)>>2)]=$129;
 HEAP32[(($fd412_i)>>2)]=$129;
 var $add_ptr_sum8_i=((($and144)+(8))|0);
 var $fd427_i=(($89+$add_ptr_sum8_i)|0);
 var $149=$fd427_i;
 HEAP32[(($149)>>2)]=$145;
 var $add_ptr_sum9_i=((($and144)+(12))|0);
 var $bk428_i=(($89+$add_ptr_sum9_i)|0);
 var $150=$bk428_i;
 HEAP32[(($150)>>2)]=$T_0_i;
 var $add_ptr_sum10_i=((($and144)+(24))|0);
 var $parent429_i=(($89+$add_ptr_sum10_i)|0);
 var $151=$parent429_i;
 HEAP32[(($151)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $add_ptr436_i=(($v_3_lcssa_i+8)|0);
 var $152=$add_ptr436_i;
 var $cmp149=($add_ptr436_i|0)==0;
 if($cmp149){var $nb_0=$and144;label=160;break;}else{var $mem_0=$152;label=341;break;}
 case 160: 
 var $nb_0;
 var $153=HEAP32[((10232)>>2)];
 var $cmp155=($nb_0>>>0)>($153>>>0);
 if($cmp155){label=165;break;}else{label=161;break;}
 case 161: 
 var $sub159=((($153)-($nb_0))|0);
 var $154=HEAP32[((10244)>>2)];
 var $cmp161=($sub159>>>0)>15;
 if($cmp161){label=162;break;}else{label=163;break;}
 case 162: 
 var $155=$154;
 var $add_ptr165=(($155+$nb_0)|0);
 var $156=$add_ptr165;
 HEAP32[((10244)>>2)]=$156;
 HEAP32[((10232)>>2)]=$sub159;
 var $or166=$sub159|1;
 var $add_ptr165_sum=((($nb_0)+(4))|0);
 var $head167=(($155+$add_ptr165_sum)|0);
 var $157=$head167;
 HEAP32[(($157)>>2)]=$or166;
 var $add_ptr168=(($155+$153)|0);
 var $prev_foot169=$add_ptr168;
 HEAP32[(($prev_foot169)>>2)]=$sub159;
 var $or171=$nb_0|3;
 var $head172=(($154+4)|0);
 HEAP32[(($head172)>>2)]=$or171;
 label=164;break;
 case 163: 
 HEAP32[((10232)>>2)]=0;
 HEAP32[((10244)>>2)]=0;
 var $or175=$153|3;
 var $head176=(($154+4)|0);
 HEAP32[(($head176)>>2)]=$or175;
 var $158=$154;
 var $add_ptr177_sum=((($153)+(4))|0);
 var $head178=(($158+$add_ptr177_sum)|0);
 var $159=$head178;
 var $160=HEAP32[(($159)>>2)];
 var $or179=$160|1;
 HEAP32[(($159)>>2)]=$or179;
 label=164;break;
 case 164: 
 var $add_ptr181=(($154+8)|0);
 var $161=$add_ptr181;
 var $mem_0=$161;label=341;break;
 case 165: 
 var $162=HEAP32[((10236)>>2)];
 var $cmp183=($nb_0>>>0)<($162>>>0);
 if($cmp183){label=166;break;}else{label=167;break;}
 case 166: 
 var $sub187=((($162)-($nb_0))|0);
 HEAP32[((10236)>>2)]=$sub187;
 var $163=HEAP32[((10248)>>2)];
 var $164=$163;
 var $add_ptr190=(($164+$nb_0)|0);
 var $165=$add_ptr190;
 HEAP32[((10248)>>2)]=$165;
 var $or191=$sub187|1;
 var $add_ptr190_sum=((($nb_0)+(4))|0);
 var $head192=(($164+$add_ptr190_sum)|0);
 var $166=$head192;
 HEAP32[(($166)>>2)]=$or191;
 var $or194=$nb_0|3;
 var $head195=(($163+4)|0);
 HEAP32[(($head195)>>2)]=$or194;
 var $add_ptr196=(($163+8)|0);
 var $167=$add_ptr196;
 var $mem_0=$167;label=341;break;
 case 167: 
 var $168=HEAP32[((10184)>>2)];
 var $cmp_i148=($168|0)==0;
 if($cmp_i148){label=168;break;}else{label=171;break;}
 case 168: 
 var $call_i_i=_sysconf(30);
 var $sub_i_i=((($call_i_i)-(1))|0);
 var $and_i_i=$sub_i_i&$call_i_i;
 var $cmp1_i_i=($and_i_i|0)==0;
 if($cmp1_i_i){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((10192)>>2)]=$call_i_i;
 HEAP32[((10188)>>2)]=$call_i_i;
 HEAP32[((10196)>>2)]=-1;
 HEAP32[((10200)>>2)]=-1;
 HEAP32[((10204)>>2)]=0;
 HEAP32[((10668)>>2)]=0;
 var $call6_i_i=_time(0);
 var $xor_i_i=$call6_i_i&-16;
 var $and7_i_i=$xor_i_i^1431655768;
 HEAP32[((10184)>>2)]=$and7_i_i;
 label=171;break;
 case 171: 
 var $add_i149=((($nb_0)+(48))|0);
 var $169=HEAP32[((10192)>>2)];
 var $sub_i150=((($nb_0)+(47))|0);
 var $add9_i=((($169)+($sub_i150))|0);
 var $neg_i151=(((-$169))|0);
 var $and11_i=$add9_i&$neg_i151;
 var $cmp12_i=($and11_i>>>0)>($nb_0>>>0);
 if($cmp12_i){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $170=HEAP32[((10664)>>2)];
 var $cmp15_i=($170|0)==0;
 if($cmp15_i){label=174;break;}else{label=173;break;}
 case 173: 
 var $171=HEAP32[((10656)>>2)];
 var $add17_i152=((($171)+($and11_i))|0);
 var $cmp19_i=($add17_i152>>>0)<=($171>>>0);
 var $cmp21_i=($add17_i152>>>0)>($170>>>0);
 var $or_cond1_i=$cmp19_i|$cmp21_i;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $172=HEAP32[((10668)>>2)];
 var $and26_i=$172&4;
 var $tobool27_i=($and26_i|0)==0;
 if($tobool27_i){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $173=HEAP32[((10248)>>2)];
 var $cmp29_i=($173|0)==0;
 if($cmp29_i){label=181;break;}else{label=176;break;}
 case 176: 
 var $174=$173;
 var $sp_0_i_i=10672;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $base_i_i=(($sp_0_i_i)|0);
 var $175=HEAP32[(($base_i_i)>>2)];
 var $cmp_i9_i=($175>>>0)>($174>>>0);
 if($cmp_i9_i){label=179;break;}else{label=178;break;}
 case 178: 
 var $size_i_i=(($sp_0_i_i+4)|0);
 var $176=HEAP32[(($size_i_i)>>2)];
 var $add_ptr_i_i=(($175+$176)|0);
 var $cmp2_i_i=($add_ptr_i_i>>>0)>($174>>>0);
 if($cmp2_i_i){label=180;break;}else{label=179;break;}
 case 179: 
 var $next_i_i=(($sp_0_i_i+8)|0);
 var $177=HEAP32[(($next_i_i)>>2)];
 var $cmp3_i_i=($177|0)==0;
 if($cmp3_i_i){label=181;break;}else{var $sp_0_i_i=$177;label=177;break;}
 case 180: 
 var $cmp32_i154=($sp_0_i_i|0)==0;
 if($cmp32_i154){label=181;break;}else{label=188;break;}
 case 181: 
 var $call34_i=_sbrk(0);
 var $cmp35_i156=($call34_i|0)==-1;
 if($cmp35_i156){var $tsize_0758385_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $178=$call34_i;
 var $179=HEAP32[((10188)>>2)];
 var $sub38_i=((($179)-(1))|0);
 var $and39_i=$sub38_i&$178;
 var $cmp40_i157=($and39_i|0)==0;
 if($cmp40_i157){var $ssize_0_i=$and11_i;label=184;break;}else{label=183;break;}
 case 183: 
 var $add43_i=((($sub38_i)+($178))|0);
 var $neg45_i=(((-$179))|0);
 var $and46_i=$add43_i&$neg45_i;
 var $sub47_i=((($and11_i)-($178))|0);
 var $add48_i=((($sub47_i)+($and46_i))|0);
 var $ssize_0_i=$add48_i;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $180=HEAP32[((10656)>>2)];
 var $add51_i=((($180)+($ssize_0_i))|0);
 var $cmp52_i=($ssize_0_i>>>0)>($nb_0>>>0);
 var $cmp54_i158=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i159=$cmp52_i&$cmp54_i158;
 if($or_cond_i159){label=185;break;}else{var $tsize_0758385_i=0;label=197;break;}
 case 185: 
 var $181=HEAP32[((10664)>>2)];
 var $cmp57_i=($181|0)==0;
 if($cmp57_i){label=187;break;}else{label=186;break;}
 case 186: 
 var $cmp60_i=($add51_i>>>0)<=($180>>>0);
 var $cmp63_i=($add51_i>>>0)>($181>>>0);
 var $or_cond2_i=$cmp60_i|$cmp63_i;
 if($or_cond2_i){var $tsize_0758385_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $call65_i=_sbrk($ssize_0_i);
 var $cmp66_i160=($call65_i|0)==($call34_i|0);
 var $ssize_0__i=($cmp66_i160?$ssize_0_i:0);
 var $call34__i=($cmp66_i160?$call34_i:-1);
 var $tbase_0_i=$call34__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$call65_i;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $182=HEAP32[((10236)>>2)];
 var $add74_i=((($add9_i)-($182))|0);
 var $and77_i=$add74_i&$neg_i151;
 var $cmp78_i=($and77_i>>>0)<2147483647;
 if($cmp78_i){label=189;break;}else{var $tsize_0758385_i=0;label=197;break;}
 case 189: 
 var $call80_i=_sbrk($and77_i);
 var $183=HEAP32[(($base_i_i)>>2)];
 var $184=HEAP32[(($size_i_i)>>2)];
 var $add_ptr_i162=(($183+$184)|0);
 var $cmp82_i=($call80_i|0)==($add_ptr_i162|0);
 var $and77__i=($cmp82_i?$and77_i:0);
 var $call80__i=($cmp82_i?$call80_i:-1);
 var $tbase_0_i=$call80__i;var $tsize_0_i=$and77__i;var $br_0_i=$call80_i;var $ssize_1_i=$and77_i;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $sub109_i=(((-$ssize_1_i))|0);
 var $cmp86_i=($tbase_0_i|0)==-1;
 if($cmp86_i){label=191;break;}else{var $tsize_291_i=$tsize_0_i;var $tbase_292_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $cmp88_i=($br_0_i|0)!=-1;
 var $cmp90_i163=($ssize_1_i>>>0)<2147483647;
 var $or_cond3_i=$cmp88_i&$cmp90_i163;
 var $cmp93_i=($ssize_1_i>>>0)<($add_i149>>>0);
 var $or_cond4_i=$or_cond3_i&$cmp93_i;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $185=HEAP32[((10192)>>2)];
 var $sub96_i=((($sub_i150)-($ssize_1_i))|0);
 var $add98_i=((($sub96_i)+($185))|0);
 var $neg100_i=(((-$185))|0);
 var $and101_i=$add98_i&$neg100_i;
 var $cmp102_i=($and101_i>>>0)<2147483647;
 if($cmp102_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $call104_i=_sbrk($and101_i);
 var $cmp105_i=($call104_i|0)==-1;
 if($cmp105_i){label=195;break;}else{label=194;break;}
 case 194: 
 var $add107_i=((($and101_i)+($ssize_1_i))|0);
 var $ssize_2_i=$add107_i;label=196;break;
 case 195: 
 var $call110_i=_sbrk($sub109_i);
 var $tsize_0758385_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $cmp115_i164=($br_0_i|0)==-1;
 if($cmp115_i164){var $tsize_0758385_i=$tsize_0_i;label=197;break;}else{var $tsize_291_i=$ssize_2_i;var $tbase_292_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0758385_i;
 var $186=HEAP32[((10668)>>2)];
 var $or_i165=$186|4;
 HEAP32[((10668)>>2)]=$or_i165;
 var $tsize_1_i=$tsize_0758385_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $cmp124_i=($and11_i>>>0)<2147483647;
 if($cmp124_i){label=199;break;}else{label=340;break;}
 case 199: 
 var $call128_i=_sbrk($and11_i);
 var $call129_i=_sbrk(0);
 var $notlhs_i=($call128_i|0)!=-1;
 var $notrhs_i=($call129_i|0)!=-1;
 var $or_cond6_not_i=$notrhs_i&$notlhs_i;
 var $cmp134_i=($call128_i>>>0)<($call129_i>>>0);
 var $or_cond7_i=$or_cond6_not_i&$cmp134_i;
 if($or_cond7_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $sub_ptr_lhs_cast_i=$call129_i;
 var $sub_ptr_rhs_cast_i=$call128_i;
 var $sub_ptr_sub_i=((($sub_ptr_lhs_cast_i)-($sub_ptr_rhs_cast_i))|0);
 var $add137_i=((($nb_0)+(40))|0);
 var $cmp138_i166=($sub_ptr_sub_i>>>0)>($add137_i>>>0);
 var $sub_ptr_sub_tsize_1_i=($cmp138_i166?$sub_ptr_sub_i:$tsize_1_i);
 var $call128_tbase_1_i=($cmp138_i166?$call128_i:-1);
 var $cmp144_i=($call128_tbase_1_i|0)==-1;
 if($cmp144_i){label=340;break;}else{var $tsize_291_i=$sub_ptr_sub_tsize_1_i;var $tbase_292_i=$call128_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_292_i;
 var $tsize_291_i;
 var $187=HEAP32[((10656)>>2)];
 var $add147_i=((($187)+($tsize_291_i))|0);
 HEAP32[((10656)>>2)]=$add147_i;
 var $188=HEAP32[((10660)>>2)];
 var $cmp148_i=($add147_i>>>0)>($188>>>0);
 if($cmp148_i){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((10660)>>2)]=$add147_i;
 label=203;break;
 case 203: 
 var $189=HEAP32[((10248)>>2)];
 var $cmp154_i=($189|0)==0;
 if($cmp154_i){label=204;break;}else{var $sp_0105_i=10672;label=211;break;}
 case 204: 
 var $190=HEAP32[((10240)>>2)];
 var $cmp156_i=($190|0)==0;
 var $cmp159_i168=($tbase_292_i>>>0)<($190>>>0);
 var $or_cond8_i=$cmp156_i|$cmp159_i168;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((10240)>>2)]=$tbase_292_i;
 label=206;break;
 case 206: 
 HEAP32[((10672)>>2)]=$tbase_292_i;
 HEAP32[((10676)>>2)]=$tsize_291_i;
 HEAP32[((10684)>>2)]=0;
 var $191=HEAP32[((10184)>>2)];
 HEAP32[((10260)>>2)]=$191;
 HEAP32[((10256)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $shl_i_i=$i_02_i_i<<1;
 var $arrayidx_i_i=((10264+($shl_i_i<<2))|0);
 var $192=$arrayidx_i_i;
 var $arrayidx_sum_i_i=((($shl_i_i)+(3))|0);
 var $193=((10264+($arrayidx_sum_i_i<<2))|0);
 HEAP32[(($193)>>2)]=$192;
 var $arrayidx_sum1_i_i=((($shl_i_i)+(2))|0);
 var $194=((10264+($arrayidx_sum1_i_i<<2))|0);
 HEAP32[(($194)>>2)]=$192;
 var $inc_i_i=((($i_02_i_i)+(1))|0);
 var $cmp_i11_i=($inc_i_i>>>0)<32;
 if($cmp_i11_i){var $i_02_i_i=$inc_i_i;label=207;break;}else{label=208;break;}
 case 208: 
 var $sub169_i=((($tsize_291_i)-(40))|0);
 var $add_ptr_i12_i=(($tbase_292_i+8)|0);
 var $195=$add_ptr_i12_i;
 var $and_i13_i=$195&7;
 var $cmp_i14_i=($and_i13_i|0)==0;
 if($cmp_i14_i){var $cond_i_i=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $196=(((-$195))|0);
 var $and3_i_i=$196&7;
 var $cond_i_i=$and3_i_i;label=210;break;
 case 210: 
 var $cond_i_i;
 var $add_ptr4_i_i=(($tbase_292_i+$cond_i_i)|0);
 var $197=$add_ptr4_i_i;
 var $sub5_i_i=((($sub169_i)-($cond_i_i))|0);
 HEAP32[((10248)>>2)]=$197;
 HEAP32[((10236)>>2)]=$sub5_i_i;
 var $or_i_i=$sub5_i_i|1;
 var $add_ptr4_sum_i_i=((($cond_i_i)+(4))|0);
 var $head_i_i=(($tbase_292_i+$add_ptr4_sum_i_i)|0);
 var $198=$head_i_i;
 HEAP32[(($198)>>2)]=$or_i_i;
 var $add_ptr6_sum_i_i=((($tsize_291_i)-(36))|0);
 var $head7_i_i=(($tbase_292_i+$add_ptr6_sum_i_i)|0);
 var $199=$head7_i_i;
 HEAP32[(($199)>>2)]=40;
 var $200=HEAP32[((10200)>>2)];
 HEAP32[((10252)>>2)]=$200;
 label=338;break;
 case 211: 
 var $sp_0105_i;
 var $base184_i=(($sp_0105_i)|0);
 var $201=HEAP32[(($base184_i)>>2)];
 var $size185_i=(($sp_0105_i+4)|0);
 var $202=HEAP32[(($size185_i)>>2)];
 var $add_ptr186_i=(($201+$202)|0);
 var $cmp187_i=($tbase_292_i|0)==($add_ptr186_i|0);
 if($cmp187_i){label=213;break;}else{label=212;break;}
 case 212: 
 var $next_i=(($sp_0105_i+8)|0);
 var $203=HEAP32[(($next_i)>>2)];
 var $cmp183_i=($203|0)==0;
 if($cmp183_i){label=218;break;}else{var $sp_0105_i=$203;label=211;break;}
 case 213: 
 var $sflags190_i=(($sp_0105_i+12)|0);
 var $204=HEAP32[(($sflags190_i)>>2)];
 var $and191_i=$204&8;
 var $tobool192_i=($and191_i|0)==0;
 if($tobool192_i){label=214;break;}else{label=218;break;}
 case 214: 
 var $205=$189;
 var $cmp200_i=($205>>>0)>=($201>>>0);
 var $cmp206_i=($205>>>0)<($tbase_292_i>>>0);
 var $or_cond94_i=$cmp200_i&$cmp206_i;
 if($or_cond94_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $add209_i=((($202)+($tsize_291_i))|0);
 HEAP32[(($size185_i)>>2)]=$add209_i;
 var $206=HEAP32[((10248)>>2)];
 var $207=HEAP32[((10236)>>2)];
 var $add212_i=((($207)+($tsize_291_i))|0);
 var $208=$206;
 var $add_ptr_i23_i=(($206+8)|0);
 var $209=$add_ptr_i23_i;
 var $and_i24_i=$209&7;
 var $cmp_i25_i=($and_i24_i|0)==0;
 if($cmp_i25_i){var $cond_i28_i=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $210=(((-$209))|0);
 var $and3_i26_i=$210&7;
 var $cond_i28_i=$and3_i26_i;label=217;break;
 case 217: 
 var $cond_i28_i;
 var $add_ptr4_i29_i=(($208+$cond_i28_i)|0);
 var $211=$add_ptr4_i29_i;
 var $sub5_i30_i=((($add212_i)-($cond_i28_i))|0);
 HEAP32[((10248)>>2)]=$211;
 HEAP32[((10236)>>2)]=$sub5_i30_i;
 var $or_i31_i=$sub5_i30_i|1;
 var $add_ptr4_sum_i32_i=((($cond_i28_i)+(4))|0);
 var $head_i33_i=(($208+$add_ptr4_sum_i32_i)|0);
 var $212=$head_i33_i;
 HEAP32[(($212)>>2)]=$or_i31_i;
 var $add_ptr6_sum_i34_i=((($add212_i)+(4))|0);
 var $head7_i35_i=(($208+$add_ptr6_sum_i34_i)|0);
 var $213=$head7_i35_i;
 HEAP32[(($213)>>2)]=40;
 var $214=HEAP32[((10200)>>2)];
 HEAP32[((10252)>>2)]=$214;
 label=338;break;
 case 218: 
 var $215=HEAP32[((10240)>>2)];
 var $cmp215_i=($tbase_292_i>>>0)<($215>>>0);
 if($cmp215_i){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((10240)>>2)]=$tbase_292_i;
 label=220;break;
 case 220: 
 var $add_ptr224_i=(($tbase_292_i+$tsize_291_i)|0);
 var $sp_1101_i=10672;label=221;break;
 case 221: 
 var $sp_1101_i;
 var $base223_i=(($sp_1101_i)|0);
 var $216=HEAP32[(($base223_i)>>2)];
 var $cmp225_i=($216|0)==($add_ptr224_i|0);
 if($cmp225_i){label=223;break;}else{label=222;break;}
 case 222: 
 var $next228_i=(($sp_1101_i+8)|0);
 var $217=HEAP32[(($next228_i)>>2)];
 var $cmp221_i=($217|0)==0;
 if($cmp221_i){label=304;break;}else{var $sp_1101_i=$217;label=221;break;}
 case 223: 
 var $sflags232_i=(($sp_1101_i+12)|0);
 var $218=HEAP32[(($sflags232_i)>>2)];
 var $and233_i=$218&8;
 var $tobool234_i=($and233_i|0)==0;
 if($tobool234_i){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($base223_i)>>2)]=$tbase_292_i;
 var $size242_i=(($sp_1101_i+4)|0);
 var $219=HEAP32[(($size242_i)>>2)];
 var $add243_i=((($219)+($tsize_291_i))|0);
 HEAP32[(($size242_i)>>2)]=$add243_i;
 var $add_ptr_i38_i=(($tbase_292_i+8)|0);
 var $220=$add_ptr_i38_i;
 var $and_i39_i=$220&7;
 var $cmp_i40_i=($and_i39_i|0)==0;
 if($cmp_i40_i){var $cond_i43_i=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $221=(((-$220))|0);
 var $and3_i41_i=$221&7;
 var $cond_i43_i=$and3_i41_i;label=226;break;
 case 226: 
 var $cond_i43_i;
 var $add_ptr4_i44_i=(($tbase_292_i+$cond_i43_i)|0);
 var $add_ptr224_sum_i=((($tsize_291_i)+(8))|0);
 var $add_ptr5_i_i=(($tbase_292_i+$add_ptr224_sum_i)|0);
 var $222=$add_ptr5_i_i;
 var $and6_i45_i=$222&7;
 var $cmp7_i_i=($and6_i45_i|0)==0;
 if($cmp7_i_i){var $cond15_i_i=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $223=(((-$222))|0);
 var $and13_i_i=$223&7;
 var $cond15_i_i=$and13_i_i;label=228;break;
 case 228: 
 var $cond15_i_i;
 var $add_ptr224_sum122_i=((($cond15_i_i)+($tsize_291_i))|0);
 var $add_ptr16_i_i=(($tbase_292_i+$add_ptr224_sum122_i)|0);
 var $224=$add_ptr16_i_i;
 var $sub_ptr_lhs_cast_i47_i=$add_ptr16_i_i;
 var $sub_ptr_rhs_cast_i48_i=$add_ptr4_i44_i;
 var $sub_ptr_sub_i49_i=((($sub_ptr_lhs_cast_i47_i)-($sub_ptr_rhs_cast_i48_i))|0);
 var $add_ptr4_sum_i50_i=((($cond_i43_i)+($nb_0))|0);
 var $add_ptr17_i_i=(($tbase_292_i+$add_ptr4_sum_i50_i)|0);
 var $225=$add_ptr17_i_i;
 var $sub18_i_i=((($sub_ptr_sub_i49_i)-($nb_0))|0);
 var $or19_i_i=$nb_0|3;
 var $add_ptr4_sum1_i_i=((($cond_i43_i)+(4))|0);
 var $head_i51_i=(($tbase_292_i+$add_ptr4_sum1_i_i)|0);
 var $226=$head_i51_i;
 HEAP32[(($226)>>2)]=$or19_i_i;
 var $227=HEAP32[((10248)>>2)];
 var $cmp20_i_i=($224|0)==($227|0);
 if($cmp20_i_i){label=229;break;}else{label=230;break;}
 case 229: 
 var $228=HEAP32[((10236)>>2)];
 var $add_i_i=((($228)+($sub18_i_i))|0);
 HEAP32[((10236)>>2)]=$add_i_i;
 HEAP32[((10248)>>2)]=$225;
 var $or22_i_i=$add_i_i|1;
 var $add_ptr17_sum39_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head23_i_i=(($tbase_292_i+$add_ptr17_sum39_i_i)|0);
 var $229=$head23_i_i;
 HEAP32[(($229)>>2)]=$or22_i_i;
 label=303;break;
 case 230: 
 var $230=HEAP32[((10244)>>2)];
 var $cmp24_i_i=($224|0)==($230|0);
 if($cmp24_i_i){label=231;break;}else{label=232;break;}
 case 231: 
 var $231=HEAP32[((10232)>>2)];
 var $add26_i_i=((($231)+($sub18_i_i))|0);
 HEAP32[((10232)>>2)]=$add26_i_i;
 HEAP32[((10244)>>2)]=$225;
 var $or28_i_i=$add26_i_i|1;
 var $add_ptr17_sum37_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head29_i_i=(($tbase_292_i+$add_ptr17_sum37_i_i)|0);
 var $232=$head29_i_i;
 HEAP32[(($232)>>2)]=$or28_i_i;
 var $add_ptr17_sum38_i_i=((($add26_i_i)+($add_ptr4_sum_i50_i))|0);
 var $add_ptr30_i53_i=(($tbase_292_i+$add_ptr17_sum38_i_i)|0);
 var $prev_foot_i54_i=$add_ptr30_i53_i;
 HEAP32[(($prev_foot_i54_i)>>2)]=$add26_i_i;
 label=303;break;
 case 232: 
 var $add_ptr16_sum_i_i=((($tsize_291_i)+(4))|0);
 var $add_ptr224_sum123_i=((($add_ptr16_sum_i_i)+($cond15_i_i))|0);
 var $head32_i_i=(($tbase_292_i+$add_ptr224_sum123_i)|0);
 var $233=$head32_i_i;
 var $234=HEAP32[(($233)>>2)];
 var $and33_i_i=$234&3;
 var $cmp34_i_i=($and33_i_i|0)==1;
 if($cmp34_i_i){label=233;break;}else{var $oldfirst_0_i_i=$224;var $qsize_0_i_i=$sub18_i_i;label=280;break;}
 case 233: 
 var $and37_i_i=$234&-8;
 var $shr_i55_i=$234>>>3;
 var $cmp38_i_i=($234>>>0)<256;
 if($cmp38_i_i){label=234;break;}else{label=246;break;}
 case 234: 
 var $add_ptr16_sum3233_i_i=$cond15_i_i|8;
 var $add_ptr224_sum133_i=((($add_ptr16_sum3233_i_i)+($tsize_291_i))|0);
 var $fd_i_i=(($tbase_292_i+$add_ptr224_sum133_i)|0);
 var $235=$fd_i_i;
 var $236=HEAP32[(($235)>>2)];
 var $add_ptr16_sum34_i_i=((($tsize_291_i)+(12))|0);
 var $add_ptr224_sum134_i=((($add_ptr16_sum34_i_i)+($cond15_i_i))|0);
 var $bk_i56_i=(($tbase_292_i+$add_ptr224_sum134_i)|0);
 var $237=$bk_i56_i;
 var $238=HEAP32[(($237)>>2)];
 var $shl_i57_i=$shr_i55_i<<1;
 var $arrayidx_i58_i=((10264+($shl_i57_i<<2))|0);
 var $239=$arrayidx_i58_i;
 var $cmp41_i_i=($236|0)==($239|0);
 if($cmp41_i_i){label=237;break;}else{label=235;break;}
 case 235: 
 var $240=$236;
 var $241=HEAP32[((10240)>>2)];
 var $cmp42_i_i=($240>>>0)<($241>>>0);
 if($cmp42_i_i){label=245;break;}else{label=236;break;}
 case 236: 
 var $bk43_i_i=(($236+12)|0);
 var $242=HEAP32[(($bk43_i_i)>>2)];
 var $cmp44_i_i=($242|0)==($224|0);
 if($cmp44_i_i){label=237;break;}else{label=245;break;}
 case 237: 
 var $cmp46_i60_i=($238|0)==($236|0);
 if($cmp46_i60_i){label=238;break;}else{label=239;break;}
 case 238: 
 var $shl48_i_i=1<<$shr_i55_i;
 var $neg_i_i=$shl48_i_i^-1;
 var $243=HEAP32[((10224)>>2)];
 var $and49_i_i=$243&$neg_i_i;
 HEAP32[((10224)>>2)]=$and49_i_i;
 label=279;break;
 case 239: 
 var $cmp54_i_i=($238|0)==($239|0);
 if($cmp54_i_i){label=240;break;}else{label=241;break;}
 case 240: 
 var $fd68_pre_i_i=(($238+8)|0);
 var $fd68_pre_phi_i_i=$fd68_pre_i_i;label=243;break;
 case 241: 
 var $244=$238;
 var $245=HEAP32[((10240)>>2)];
 var $cmp57_i_i=($244>>>0)<($245>>>0);
 if($cmp57_i_i){label=244;break;}else{label=242;break;}
 case 242: 
 var $fd59_i_i=(($238+8)|0);
 var $246=HEAP32[(($fd59_i_i)>>2)];
 var $cmp60_i_i=($246|0)==($224|0);
 if($cmp60_i_i){var $fd68_pre_phi_i_i=$fd59_i_i;label=243;break;}else{label=244;break;}
 case 243: 
 var $fd68_pre_phi_i_i;
 var $bk67_i_i=(($236+12)|0);
 HEAP32[(($bk67_i_i)>>2)]=$238;
 HEAP32[(($fd68_pre_phi_i_i)>>2)]=$236;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $247=$add_ptr16_i_i;
 var $add_ptr16_sum23_i_i=$cond15_i_i|24;
 var $add_ptr224_sum124_i=((($add_ptr16_sum23_i_i)+($tsize_291_i))|0);
 var $parent_i62_i=(($tbase_292_i+$add_ptr224_sum124_i)|0);
 var $248=$parent_i62_i;
 var $249=HEAP32[(($248)>>2)];
 var $add_ptr16_sum4_i_i=((($tsize_291_i)+(12))|0);
 var $add_ptr224_sum125_i=((($add_ptr16_sum4_i_i)+($cond15_i_i))|0);
 var $bk74_i_i=(($tbase_292_i+$add_ptr224_sum125_i)|0);
 var $250=$bk74_i_i;
 var $251=HEAP32[(($250)>>2)];
 var $cmp75_i_i=($251|0)==($247|0);
 if($cmp75_i_i){label=252;break;}else{label=247;break;}
 case 247: 
 var $add_ptr16_sum2930_i_i=$cond15_i_i|8;
 var $add_ptr224_sum126_i=((($add_ptr16_sum2930_i_i)+($tsize_291_i))|0);
 var $fd78_i_i=(($tbase_292_i+$add_ptr224_sum126_i)|0);
 var $252=$fd78_i_i;
 var $253=HEAP32[(($252)>>2)];
 var $254=$253;
 var $255=HEAP32[((10240)>>2)];
 var $cmp81_i_i=($254>>>0)<($255>>>0);
 if($cmp81_i_i){label=251;break;}else{label=248;break;}
 case 248: 
 var $bk82_i_i=(($253+12)|0);
 var $256=HEAP32[(($bk82_i_i)>>2)];
 var $cmp83_i_i=($256|0)==($247|0);
 if($cmp83_i_i){label=249;break;}else{label=251;break;}
 case 249: 
 var $fd85_i_i=(($251+8)|0);
 var $257=HEAP32[(($fd85_i_i)>>2)];
 var $cmp86_i_i=($257|0)==($247|0);
 if($cmp86_i_i){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($bk82_i_i)>>2)]=$251;
 HEAP32[(($fd85_i_i)>>2)]=$253;
 var $R_1_i_i=$251;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $add_ptr16_sum56_i_i=$cond15_i_i|16;
 var $add_ptr224_sum131_i=((($add_ptr16_sum_i_i)+($add_ptr16_sum56_i_i))|0);
 var $arrayidx96_i_i=(($tbase_292_i+$add_ptr224_sum131_i)|0);
 var $258=$arrayidx96_i_i;
 var $259=HEAP32[(($258)>>2)];
 var $cmp97_i_i=($259|0)==0;
 if($cmp97_i_i){label=253;break;}else{var $R_0_i_i=$259;var $RP_0_i_i=$258;label=254;break;}
 case 253: 
 var $add_ptr224_sum132_i=((($add_ptr16_sum56_i_i)+($tsize_291_i))|0);
 var $child_i_i=(($tbase_292_i+$add_ptr224_sum132_i)|0);
 var $arrayidx99_i_i=$child_i_i;
 var $260=HEAP32[(($arrayidx99_i_i)>>2)];
 var $cmp100_i_i=($260|0)==0;
 if($cmp100_i_i){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$260;var $RP_0_i_i=$arrayidx99_i_i;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $arrayidx103_i_i=(($R_0_i_i+20)|0);
 var $261=HEAP32[(($arrayidx103_i_i)>>2)];
 var $cmp104_i_i=($261|0)==0;
 if($cmp104_i_i){label=255;break;}else{var $R_0_i_i=$261;var $RP_0_i_i=$arrayidx103_i_i;label=254;break;}
 case 255: 
 var $arrayidx107_i_i=(($R_0_i_i+16)|0);
 var $262=HEAP32[(($arrayidx107_i_i)>>2)];
 var $cmp108_i_i=($262|0)==0;
 if($cmp108_i_i){label=256;break;}else{var $R_0_i_i=$262;var $RP_0_i_i=$arrayidx107_i_i;label=254;break;}
 case 256: 
 var $263=$RP_0_i_i;
 var $264=HEAP32[((10240)>>2)];
 var $cmp112_i_i=($263>>>0)<($264>>>0);
 if($cmp112_i_i){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $cmp120_i64_i=($249|0)==0;
 if($cmp120_i64_i){label=279;break;}else{label=260;break;}
 case 260: 
 var $add_ptr16_sum26_i_i=((($tsize_291_i)+(28))|0);
 var $add_ptr224_sum127_i=((($add_ptr16_sum26_i_i)+($cond15_i_i))|0);
 var $index_i65_i=(($tbase_292_i+$add_ptr224_sum127_i)|0);
 var $265=$index_i65_i;
 var $266=HEAP32[(($265)>>2)];
 var $arrayidx123_i_i=((10528+($266<<2))|0);
 var $267=HEAP32[(($arrayidx123_i_i)>>2)];
 var $cmp124_i_i=($247|0)==($267|0);
 if($cmp124_i_i){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($arrayidx123_i_i)>>2)]=$R_1_i_i;
 var $cond41_i_i=($R_1_i_i|0)==0;
 if($cond41_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $268=HEAP32[(($265)>>2)];
 var $shl131_i_i=1<<$268;
 var $neg132_i_i=$shl131_i_i^-1;
 var $269=HEAP32[((10228)>>2)];
 var $and133_i_i=$269&$neg132_i_i;
 HEAP32[((10228)>>2)]=$and133_i_i;
 label=279;break;
 case 263: 
 var $270=$249;
 var $271=HEAP32[((10240)>>2)];
 var $cmp137_i_i=($270>>>0)<($271>>>0);
 if($cmp137_i_i){label=267;break;}else{label=264;break;}
 case 264: 
 var $arrayidx143_i_i=(($249+16)|0);
 var $272=HEAP32[(($arrayidx143_i_i)>>2)];
 var $cmp144_i_i=($272|0)==($247|0);
 if($cmp144_i_i){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($arrayidx143_i_i)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $arrayidx151_i_i=(($249+20)|0);
 HEAP32[(($arrayidx151_i_i)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $cmp156_i_i=($R_1_i_i|0)==0;
 if($cmp156_i_i){label=279;break;}else{label=269;break;}
 case 269: 
 var $273=$R_1_i_i;
 var $274=HEAP32[((10240)>>2)];
 var $cmp160_i_i=($273>>>0)<($274>>>0);
 if($cmp160_i_i){label=278;break;}else{label=270;break;}
 case 270: 
 var $parent165_i_i=(($R_1_i_i+24)|0);
 HEAP32[(($parent165_i_i)>>2)]=$249;
 var $add_ptr16_sum2728_i_i=$cond15_i_i|16;
 var $add_ptr224_sum128_i=((($add_ptr16_sum2728_i_i)+($tsize_291_i))|0);
 var $child166_i_i=(($tbase_292_i+$add_ptr224_sum128_i)|0);
 var $arrayidx167_i_i=$child166_i_i;
 var $275=HEAP32[(($arrayidx167_i_i)>>2)];
 var $cmp168_i_i=($275|0)==0;
 if($cmp168_i_i){label=274;break;}else{label=271;break;}
 case 271: 
 var $276=$275;
 var $277=HEAP32[((10240)>>2)];
 var $cmp172_i_i=($276>>>0)<($277>>>0);
 if($cmp172_i_i){label=273;break;}else{label=272;break;}
 case 272: 
 var $arrayidx178_i_i=(($R_1_i_i+16)|0);
 HEAP32[(($arrayidx178_i_i)>>2)]=$275;
 var $parent179_i_i=(($275+24)|0);
 HEAP32[(($parent179_i_i)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $add_ptr224_sum129_i=((($add_ptr16_sum_i_i)+($add_ptr16_sum2728_i_i))|0);
 var $arrayidx184_i_i=(($tbase_292_i+$add_ptr224_sum129_i)|0);
 var $278=$arrayidx184_i_i;
 var $279=HEAP32[(($278)>>2)];
 var $cmp185_i_i=($279|0)==0;
 if($cmp185_i_i){label=279;break;}else{label=275;break;}
 case 275: 
 var $280=$279;
 var $281=HEAP32[((10240)>>2)];
 var $cmp189_i_i=($280>>>0)<($281>>>0);
 if($cmp189_i_i){label=277;break;}else{label=276;break;}
 case 276: 
 var $arrayidx195_i_i=(($R_1_i_i+20)|0);
 HEAP32[(($arrayidx195_i_i)>>2)]=$279;
 var $parent196_i_i=(($279+24)|0);
 HEAP32[(($parent196_i_i)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $add_ptr16_sum7_i_i=$and37_i_i|$cond15_i_i;
 var $add_ptr224_sum130_i=((($add_ptr16_sum7_i_i)+($tsize_291_i))|0);
 var $add_ptr205_i_i=(($tbase_292_i+$add_ptr224_sum130_i)|0);
 var $282=$add_ptr205_i_i;
 var $add206_i_i=((($and37_i_i)+($sub18_i_i))|0);
 var $oldfirst_0_i_i=$282;var $qsize_0_i_i=$add206_i_i;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $head208_i_i=(($oldfirst_0_i_i+4)|0);
 var $283=HEAP32[(($head208_i_i)>>2)];
 var $and209_i_i=$283&-2;
 HEAP32[(($head208_i_i)>>2)]=$and209_i_i;
 var $or210_i_i=$qsize_0_i_i|1;
 var $add_ptr17_sum_i_i=((($add_ptr4_sum_i50_i)+(4))|0);
 var $head211_i_i=(($tbase_292_i+$add_ptr17_sum_i_i)|0);
 var $284=$head211_i_i;
 HEAP32[(($284)>>2)]=$or210_i_i;
 var $add_ptr17_sum8_i_i=((($qsize_0_i_i)+($add_ptr4_sum_i50_i))|0);
 var $add_ptr212_i_i=(($tbase_292_i+$add_ptr17_sum8_i_i)|0);
 var $prev_foot213_i_i=$add_ptr212_i_i;
 HEAP32[(($prev_foot213_i_i)>>2)]=$qsize_0_i_i;
 var $shr214_i_i=$qsize_0_i_i>>>3;
 var $cmp215_i_i=($qsize_0_i_i>>>0)<256;
 if($cmp215_i_i){label=281;break;}else{label=286;break;}
 case 281: 
 var $shl221_i_i=$shr214_i_i<<1;
 var $arrayidx223_i_i=((10264+($shl221_i_i<<2))|0);
 var $285=$arrayidx223_i_i;
 var $286=HEAP32[((10224)>>2)];
 var $shl226_i_i=1<<$shr214_i_i;
 var $and227_i_i=$286&$shl226_i_i;
 var $tobool228_i_i=($and227_i_i|0)==0;
 if($tobool228_i_i){label=282;break;}else{label=283;break;}
 case 282: 
 var $or232_i_i=$286|$shl226_i_i;
 HEAP32[((10224)>>2)]=$or232_i_i;
 var $arrayidx223_sum_pre_i_i=((($shl221_i_i)+(2))|0);
 var $_pre_i67_i=((10264+($arrayidx223_sum_pre_i_i<<2))|0);
 var $F224_0_i_i=$285;var $_pre_phi_i68_i=$_pre_i67_i;label=285;break;
 case 283: 
 var $arrayidx223_sum25_i_i=((($shl221_i_i)+(2))|0);
 var $287=((10264+($arrayidx223_sum25_i_i<<2))|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=$288;
 var $290=HEAP32[((10240)>>2)];
 var $cmp236_i_i=($289>>>0)<($290>>>0);
 if($cmp236_i_i){label=284;break;}else{var $F224_0_i_i=$288;var $_pre_phi_i68_i=$287;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i68_i;
 var $F224_0_i_i;
 HEAP32[(($_pre_phi_i68_i)>>2)]=$225;
 var $bk246_i_i=(($F224_0_i_i+12)|0);
 HEAP32[(($bk246_i_i)>>2)]=$225;
 var $add_ptr17_sum23_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd247_i_i=(($tbase_292_i+$add_ptr17_sum23_i_i)|0);
 var $291=$fd247_i_i;
 HEAP32[(($291)>>2)]=$F224_0_i_i;
 var $add_ptr17_sum24_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk248_i_i=(($tbase_292_i+$add_ptr17_sum24_i_i)|0);
 var $292=$bk248_i_i;
 HEAP32[(($292)>>2)]=$285;
 label=303;break;
 case 286: 
 var $293=$add_ptr17_i_i;
 var $shr253_i_i=$qsize_0_i_i>>>8;
 var $cmp254_i_i=($shr253_i_i|0)==0;
 if($cmp254_i_i){var $I252_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $cmp258_i_i=($qsize_0_i_i>>>0)>16777215;
 if($cmp258_i_i){var $I252_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $sub262_i_i=((($shr253_i_i)+(1048320))|0);
 var $shr263_i_i=$sub262_i_i>>>16;
 var $and264_i_i=$shr263_i_i&8;
 var $shl265_i_i=$shr253_i_i<<$and264_i_i;
 var $sub266_i_i=((($shl265_i_i)+(520192))|0);
 var $shr267_i_i=$sub266_i_i>>>16;
 var $and268_i_i=$shr267_i_i&4;
 var $add269_i_i=$and268_i_i|$and264_i_i;
 var $shl270_i_i=$shl265_i_i<<$and268_i_i;
 var $sub271_i_i=((($shl270_i_i)+(245760))|0);
 var $shr272_i_i=$sub271_i_i>>>16;
 var $and273_i_i=$shr272_i_i&2;
 var $add274_i_i=$add269_i_i|$and273_i_i;
 var $sub275_i_i=(((14)-($add274_i_i))|0);
 var $shl276_i_i=$shl270_i_i<<$and273_i_i;
 var $shr277_i_i=$shl276_i_i>>>15;
 var $add278_i_i=((($sub275_i_i)+($shr277_i_i))|0);
 var $shl279_i_i=$add278_i_i<<1;
 var $add280_i_i=((($add278_i_i)+(7))|0);
 var $shr281_i_i=$qsize_0_i_i>>>($add280_i_i>>>0);
 var $and282_i_i=$shr281_i_i&1;
 var $add283_i_i=$and282_i_i|$shl279_i_i;
 var $I252_0_i_i=$add283_i_i;label=289;break;
 case 289: 
 var $I252_0_i_i;
 var $arrayidx287_i_i=((10528+($I252_0_i_i<<2))|0);
 var $add_ptr17_sum9_i_i=((($add_ptr4_sum_i50_i)+(28))|0);
 var $index288_i_i=(($tbase_292_i+$add_ptr17_sum9_i_i)|0);
 var $294=$index288_i_i;
 HEAP32[(($294)>>2)]=$I252_0_i_i;
 var $add_ptr17_sum10_i_i=((($add_ptr4_sum_i50_i)+(16))|0);
 var $child289_i_i=(($tbase_292_i+$add_ptr17_sum10_i_i)|0);
 var $child289_sum_i_i=((($add_ptr4_sum_i50_i)+(20))|0);
 var $arrayidx290_i_i=(($tbase_292_i+$child289_sum_i_i)|0);
 var $295=$arrayidx290_i_i;
 HEAP32[(($295)>>2)]=0;
 var $arrayidx292_i_i=$child289_i_i;
 HEAP32[(($arrayidx292_i_i)>>2)]=0;
 var $296=HEAP32[((10228)>>2)];
 var $shl294_i_i=1<<$I252_0_i_i;
 var $and295_i_i=$296&$shl294_i_i;
 var $tobool296_i_i=($and295_i_i|0)==0;
 if($tobool296_i_i){label=290;break;}else{label=291;break;}
 case 290: 
 var $or300_i_i=$296|$shl294_i_i;
 HEAP32[((10228)>>2)]=$or300_i_i;
 HEAP32[(($arrayidx287_i_i)>>2)]=$293;
 var $297=$arrayidx287_i_i;
 var $add_ptr17_sum11_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent301_i_i=(($tbase_292_i+$add_ptr17_sum11_i_i)|0);
 var $298=$parent301_i_i;
 HEAP32[(($298)>>2)]=$297;
 var $add_ptr17_sum12_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk302_i_i=(($tbase_292_i+$add_ptr17_sum12_i_i)|0);
 var $299=$bk302_i_i;
 HEAP32[(($299)>>2)]=$293;
 var $add_ptr17_sum13_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd303_i_i=(($tbase_292_i+$add_ptr17_sum13_i_i)|0);
 var $300=$fd303_i_i;
 HEAP32[(($300)>>2)]=$293;
 label=303;break;
 case 291: 
 var $301=HEAP32[(($arrayidx287_i_i)>>2)];
 var $cmp306_i_i=($I252_0_i_i|0)==31;
 if($cmp306_i_i){var $cond315_i_i=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $shr310_i_i=$I252_0_i_i>>>1;
 var $sub313_i_i=(((25)-($shr310_i_i))|0);
 var $cond315_i_i=$sub313_i_i;label=293;break;
 case 293: 
 var $cond315_i_i;
 var $shl316_i_i=$qsize_0_i_i<<$cond315_i_i;
 var $K305_0_i_i=$shl316_i_i;var $T_0_i69_i=$301;label=294;break;
 case 294: 
 var $T_0_i69_i;
 var $K305_0_i_i;
 var $head317_i_i=(($T_0_i69_i+4)|0);
 var $302=HEAP32[(($head317_i_i)>>2)];
 var $and318_i_i=$302&-8;
 var $cmp319_i_i=($and318_i_i|0)==($qsize_0_i_i|0);
 if($cmp319_i_i){label=299;break;}else{label=295;break;}
 case 295: 
 var $shr322_i_i=$K305_0_i_i>>>31;
 var $arrayidx325_i_i=(($T_0_i69_i+16+($shr322_i_i<<2))|0);
 var $303=HEAP32[(($arrayidx325_i_i)>>2)];
 var $cmp327_i_i=($303|0)==0;
 var $shl326_i_i=$K305_0_i_i<<1;
 if($cmp327_i_i){label=296;break;}else{var $K305_0_i_i=$shl326_i_i;var $T_0_i69_i=$303;label=294;break;}
 case 296: 
 var $304=$arrayidx325_i_i;
 var $305=HEAP32[((10240)>>2)];
 var $cmp332_i_i=($304>>>0)<($305>>>0);
 if($cmp332_i_i){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($arrayidx325_i_i)>>2)]=$293;
 var $add_ptr17_sum20_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent337_i_i=(($tbase_292_i+$add_ptr17_sum20_i_i)|0);
 var $306=$parent337_i_i;
 HEAP32[(($306)>>2)]=$T_0_i69_i;
 var $add_ptr17_sum21_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk338_i_i=(($tbase_292_i+$add_ptr17_sum21_i_i)|0);
 var $307=$bk338_i_i;
 HEAP32[(($307)>>2)]=$293;
 var $add_ptr17_sum22_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd339_i_i=(($tbase_292_i+$add_ptr17_sum22_i_i)|0);
 var $308=$fd339_i_i;
 HEAP32[(($308)>>2)]=$293;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $fd344_i_i=(($T_0_i69_i+8)|0);
 var $309=HEAP32[(($fd344_i_i)>>2)];
 var $310=$T_0_i69_i;
 var $311=HEAP32[((10240)>>2)];
 var $cmp346_i_i=($310>>>0)<($311>>>0);
 if($cmp346_i_i){label=302;break;}else{label=300;break;}
 case 300: 
 var $312=$309;
 var $cmp350_i_i=($312>>>0)<($311>>>0);
 if($cmp350_i_i){label=302;break;}else{label=301;break;}
 case 301: 
 var $bk357_i_i=(($309+12)|0);
 HEAP32[(($bk357_i_i)>>2)]=$293;
 HEAP32[(($fd344_i_i)>>2)]=$293;
 var $add_ptr17_sum17_i_i=((($add_ptr4_sum_i50_i)+(8))|0);
 var $fd359_i_i=(($tbase_292_i+$add_ptr17_sum17_i_i)|0);
 var $313=$fd359_i_i;
 HEAP32[(($313)>>2)]=$309;
 var $add_ptr17_sum18_i_i=((($add_ptr4_sum_i50_i)+(12))|0);
 var $bk360_i_i=(($tbase_292_i+$add_ptr17_sum18_i_i)|0);
 var $314=$bk360_i_i;
 HEAP32[(($314)>>2)]=$T_0_i69_i;
 var $add_ptr17_sum19_i_i=((($add_ptr4_sum_i50_i)+(24))|0);
 var $parent361_i_i=(($tbase_292_i+$add_ptr17_sum19_i_i)|0);
 var $315=$parent361_i_i;
 HEAP32[(($315)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $add_ptr4_sum1415_i_i=$cond_i43_i|8;
 var $add_ptr368_i_i=(($tbase_292_i+$add_ptr4_sum1415_i_i)|0);
 var $mem_0=$add_ptr368_i_i;label=341;break;
 case 304: 
 var $316=$189;
 var $sp_0_i_i_i=10672;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $base_i_i_i=(($sp_0_i_i_i)|0);
 var $317=HEAP32[(($base_i_i_i)>>2)];
 var $cmp_i_i_i=($317>>>0)>($316>>>0);
 if($cmp_i_i_i){label=307;break;}else{label=306;break;}
 case 306: 
 var $size_i_i_i=(($sp_0_i_i_i+4)|0);
 var $318=HEAP32[(($size_i_i_i)>>2)];
 var $add_ptr_i_i_i=(($317+$318)|0);
 var $cmp2_i_i_i=($add_ptr_i_i_i>>>0)>($316>>>0);
 if($cmp2_i_i_i){label=308;break;}else{label=307;break;}
 case 307: 
 var $next_i_i_i=(($sp_0_i_i_i+8)|0);
 var $319=HEAP32[(($next_i_i_i)>>2)];
 var $sp_0_i_i_i=$319;label=305;break;
 case 308: 
 var $add_ptr_sum_i_i=((($318)-(47))|0);
 var $add_ptr2_sum_i_i=((($318)-(39))|0);
 var $add_ptr3_i_i=(($317+$add_ptr2_sum_i_i)|0);
 var $320=$add_ptr3_i_i;
 var $and_i15_i=$320&7;
 var $cmp_i16_i=($and_i15_i|0)==0;
 if($cmp_i16_i){var $cond_i18_i=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $321=(((-$320))|0);
 var $and6_i_i=$321&7;
 var $cond_i18_i=$and6_i_i;label=310;break;
 case 310: 
 var $cond_i18_i;
 var $add_ptr2_sum1_i_i=((($add_ptr_sum_i_i)+($cond_i18_i))|0);
 var $add_ptr7_i_i=(($317+$add_ptr2_sum1_i_i)|0);
 var $add_ptr82_i_i=(($189+16)|0);
 var $add_ptr8_i_i=$add_ptr82_i_i;
 var $cmp9_i_i=($add_ptr7_i_i>>>0)<($add_ptr8_i_i>>>0);
 var $cond13_i_i=($cmp9_i_i?$316:$add_ptr7_i_i);
 var $add_ptr14_i_i=(($cond13_i_i+8)|0);
 var $322=$add_ptr14_i_i;
 var $sub16_i_i=((($tsize_291_i)-(40))|0);
 var $add_ptr_i11_i_i=(($tbase_292_i+8)|0);
 var $323=$add_ptr_i11_i_i;
 var $and_i_i_i=$323&7;
 var $cmp_i12_i_i=($and_i_i_i|0)==0;
 if($cmp_i12_i_i){var $cond_i_i_i=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $324=(((-$323))|0);
 var $and3_i_i_i=$324&7;
 var $cond_i_i_i=$and3_i_i_i;label=312;break;
 case 312: 
 var $cond_i_i_i;
 var $add_ptr4_i_i_i=(($tbase_292_i+$cond_i_i_i)|0);
 var $325=$add_ptr4_i_i_i;
 var $sub5_i_i_i=((($sub16_i_i)-($cond_i_i_i))|0);
 HEAP32[((10248)>>2)]=$325;
 HEAP32[((10236)>>2)]=$sub5_i_i_i;
 var $or_i_i_i=$sub5_i_i_i|1;
 var $add_ptr4_sum_i_i_i=((($cond_i_i_i)+(4))|0);
 var $head_i_i_i=(($tbase_292_i+$add_ptr4_sum_i_i_i)|0);
 var $326=$head_i_i_i;
 HEAP32[(($326)>>2)]=$or_i_i_i;
 var $add_ptr6_sum_i_i_i=((($tsize_291_i)-(36))|0);
 var $head7_i_i_i=(($tbase_292_i+$add_ptr6_sum_i_i_i)|0);
 var $327=$head7_i_i_i;
 HEAP32[(($327)>>2)]=40;
 var $328=HEAP32[((10200)>>2)];
 HEAP32[((10252)>>2)]=$328;
 var $head_i19_i=(($cond13_i_i+4)|0);
 var $329=$head_i19_i;
 HEAP32[(($329)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($add_ptr14_i_i)>>2)]=HEAP32[((10672)>>2)];HEAP32[((($add_ptr14_i_i)+(4))>>2)]=HEAP32[((10676)>>2)];HEAP32[((($add_ptr14_i_i)+(8))>>2)]=HEAP32[((10680)>>2)];HEAP32[((($add_ptr14_i_i)+(12))>>2)]=HEAP32[((10684)>>2)];
 HEAP32[((10672)>>2)]=$tbase_292_i;
 HEAP32[((10676)>>2)]=$tsize_291_i;
 HEAP32[((10684)>>2)]=0;
 HEAP32[((10680)>>2)]=$322;
 var $add_ptr2414_i_i=(($cond13_i_i+28)|0);
 var $330=$add_ptr2414_i_i;
 HEAP32[(($330)>>2)]=7;
 var $331=(($cond13_i_i+32)|0);
 var $cmp2715_i_i=($331>>>0)<($add_ptr_i_i_i>>>0);
 if($cmp2715_i_i){var $add_ptr2416_i_i=$330;label=313;break;}else{label=314;break;}
 case 313: 
 var $add_ptr2416_i_i;
 var $332=(($add_ptr2416_i_i+4)|0);
 HEAP32[(($332)>>2)]=7;
 var $333=(($add_ptr2416_i_i+8)|0);
 var $334=$333;
 var $cmp27_i_i=($334>>>0)<($add_ptr_i_i_i>>>0);
 if($cmp27_i_i){var $add_ptr2416_i_i=$332;label=313;break;}else{label=314;break;}
 case 314: 
 var $cmp28_i_i=($cond13_i_i|0)==($316|0);
 if($cmp28_i_i){label=338;break;}else{label=315;break;}
 case 315: 
 var $sub_ptr_lhs_cast_i_i=$cond13_i_i;
 var $sub_ptr_rhs_cast_i_i=$189;
 var $sub_ptr_sub_i_i=((($sub_ptr_lhs_cast_i_i)-($sub_ptr_rhs_cast_i_i))|0);
 var $add_ptr30_i_i=(($316+$sub_ptr_sub_i_i)|0);
 var $add_ptr30_sum_i_i=((($sub_ptr_sub_i_i)+(4))|0);
 var $head31_i_i=(($316+$add_ptr30_sum_i_i)|0);
 var $335=$head31_i_i;
 var $336=HEAP32[(($335)>>2)];
 var $and32_i_i=$336&-2;
 HEAP32[(($335)>>2)]=$and32_i_i;
 var $or33_i_i=$sub_ptr_sub_i_i|1;
 var $head34_i_i=(($189+4)|0);
 HEAP32[(($head34_i_i)>>2)]=$or33_i_i;
 var $prev_foot_i_i=$add_ptr30_i_i;
 HEAP32[(($prev_foot_i_i)>>2)]=$sub_ptr_sub_i_i;
 var $shr_i_i=$sub_ptr_sub_i_i>>>3;
 var $cmp36_i_i=($sub_ptr_sub_i_i>>>0)<256;
 if($cmp36_i_i){label=316;break;}else{label=321;break;}
 case 316: 
 var $shl_i21_i=$shr_i_i<<1;
 var $arrayidx_i22_i=((10264+($shl_i21_i<<2))|0);
 var $337=$arrayidx_i22_i;
 var $338=HEAP32[((10224)>>2)];
 var $shl39_i_i=1<<$shr_i_i;
 var $and40_i_i=$338&$shl39_i_i;
 var $tobool_i_i=($and40_i_i|0)==0;
 if($tobool_i_i){label=317;break;}else{label=318;break;}
 case 317: 
 var $or44_i_i=$338|$shl39_i_i;
 HEAP32[((10224)>>2)]=$or44_i_i;
 var $arrayidx_sum_pre_i_i=((($shl_i21_i)+(2))|0);
 var $_pre_i_i=((10264+($arrayidx_sum_pre_i_i<<2))|0);
 var $F_0_i_i=$337;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $arrayidx_sum10_i_i=((($shl_i21_i)+(2))|0);
 var $339=((10264+($arrayidx_sum10_i_i<<2))|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=$340;
 var $342=HEAP32[((10240)>>2)];
 var $cmp46_i_i=($341>>>0)<($342>>>0);
 if($cmp46_i_i){label=319;break;}else{var $F_0_i_i=$340;var $_pre_phi_i_i=$339;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$189;
 var $bk_i_i=(($F_0_i_i+12)|0);
 HEAP32[(($bk_i_i)>>2)]=$189;
 var $fd54_i_i=(($189+8)|0);
 HEAP32[(($fd54_i_i)>>2)]=$F_0_i_i;
 var $bk55_i_i=(($189+12)|0);
 HEAP32[(($bk55_i_i)>>2)]=$337;
 label=338;break;
 case 321: 
 var $343=$189;
 var $shr58_i_i=$sub_ptr_sub_i_i>>>8;
 var $cmp59_i_i=($shr58_i_i|0)==0;
 if($cmp59_i_i){var $I57_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $cmp63_i_i=($sub_ptr_sub_i_i>>>0)>16777215;
 if($cmp63_i_i){var $I57_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $sub67_i_i=((($shr58_i_i)+(1048320))|0);
 var $shr68_i_i=$sub67_i_i>>>16;
 var $and69_i_i=$shr68_i_i&8;
 var $shl70_i_i=$shr58_i_i<<$and69_i_i;
 var $sub71_i_i=((($shl70_i_i)+(520192))|0);
 var $shr72_i_i=$sub71_i_i>>>16;
 var $and73_i_i=$shr72_i_i&4;
 var $add74_i_i=$and73_i_i|$and69_i_i;
 var $shl75_i_i=$shl70_i_i<<$and73_i_i;
 var $sub76_i_i=((($shl75_i_i)+(245760))|0);
 var $shr77_i_i=$sub76_i_i>>>16;
 var $and78_i_i=$shr77_i_i&2;
 var $add79_i_i=$add74_i_i|$and78_i_i;
 var $sub80_i_i=(((14)-($add79_i_i))|0);
 var $shl81_i_i=$shl75_i_i<<$and78_i_i;
 var $shr82_i_i=$shl81_i_i>>>15;
 var $add83_i_i=((($sub80_i_i)+($shr82_i_i))|0);
 var $shl84_i_i=$add83_i_i<<1;
 var $add85_i_i=((($add83_i_i)+(7))|0);
 var $shr86_i_i=$sub_ptr_sub_i_i>>>($add85_i_i>>>0);
 var $and87_i_i=$shr86_i_i&1;
 var $add88_i_i=$and87_i_i|$shl84_i_i;
 var $I57_0_i_i=$add88_i_i;label=324;break;
 case 324: 
 var $I57_0_i_i;
 var $arrayidx91_i_i=((10528+($I57_0_i_i<<2))|0);
 var $index_i_i=(($189+28)|0);
 var $I57_0_c_i_i=$I57_0_i_i;
 HEAP32[(($index_i_i)>>2)]=$I57_0_c_i_i;
 var $arrayidx92_i_i=(($189+20)|0);
 HEAP32[(($arrayidx92_i_i)>>2)]=0;
 var $344=(($189+16)|0);
 HEAP32[(($344)>>2)]=0;
 var $345=HEAP32[((10228)>>2)];
 var $shl95_i_i=1<<$I57_0_i_i;
 var $and96_i_i=$345&$shl95_i_i;
 var $tobool97_i_i=($and96_i_i|0)==0;
 if($tobool97_i_i){label=325;break;}else{label=326;break;}
 case 325: 
 var $or101_i_i=$345|$shl95_i_i;
 HEAP32[((10228)>>2)]=$or101_i_i;
 HEAP32[(($arrayidx91_i_i)>>2)]=$343;
 var $parent_i_i=(($189+24)|0);
 var $_c_i_i=$arrayidx91_i_i;
 HEAP32[(($parent_i_i)>>2)]=$_c_i_i;
 var $bk102_i_i=(($189+12)|0);
 HEAP32[(($bk102_i_i)>>2)]=$189;
 var $fd103_i_i=(($189+8)|0);
 HEAP32[(($fd103_i_i)>>2)]=$189;
 label=338;break;
 case 326: 
 var $346=HEAP32[(($arrayidx91_i_i)>>2)];
 var $cmp106_i_i=($I57_0_i_i|0)==31;
 if($cmp106_i_i){var $cond115_i_i=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $shr110_i_i=$I57_0_i_i>>>1;
 var $sub113_i_i=(((25)-($shr110_i_i))|0);
 var $cond115_i_i=$sub113_i_i;label=328;break;
 case 328: 
 var $cond115_i_i;
 var $shl116_i_i=$sub_ptr_sub_i_i<<$cond115_i_i;
 var $K105_0_i_i=$shl116_i_i;var $T_0_i_i=$346;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K105_0_i_i;
 var $head118_i_i=(($T_0_i_i+4)|0);
 var $347=HEAP32[(($head118_i_i)>>2)];
 var $and119_i_i=$347&-8;
 var $cmp120_i_i=($and119_i_i|0)==($sub_ptr_sub_i_i|0);
 if($cmp120_i_i){label=334;break;}else{label=330;break;}
 case 330: 
 var $shr123_i_i=$K105_0_i_i>>>31;
 var $arrayidx126_i_i=(($T_0_i_i+16+($shr123_i_i<<2))|0);
 var $348=HEAP32[(($arrayidx126_i_i)>>2)];
 var $cmp128_i_i=($348|0)==0;
 var $shl127_i_i=$K105_0_i_i<<1;
 if($cmp128_i_i){label=331;break;}else{var $K105_0_i_i=$shl127_i_i;var $T_0_i_i=$348;label=329;break;}
 case 331: 
 var $349=$arrayidx126_i_i;
 var $350=HEAP32[((10240)>>2)];
 var $cmp133_i_i=($349>>>0)<($350>>>0);
 if($cmp133_i_i){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($arrayidx126_i_i)>>2)]=$343;
 var $parent138_i_i=(($189+24)|0);
 var $T_0_c7_i_i=$T_0_i_i;
 HEAP32[(($parent138_i_i)>>2)]=$T_0_c7_i_i;
 var $bk139_i_i=(($189+12)|0);
 HEAP32[(($bk139_i_i)>>2)]=$189;
 var $fd140_i_i=(($189+8)|0);
 HEAP32[(($fd140_i_i)>>2)]=$189;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $fd145_i_i=(($T_0_i_i+8)|0);
 var $351=HEAP32[(($fd145_i_i)>>2)];
 var $352=$T_0_i_i;
 var $353=HEAP32[((10240)>>2)];
 var $cmp147_i_i=($352>>>0)<($353>>>0);
 if($cmp147_i_i){label=337;break;}else{label=335;break;}
 case 335: 
 var $354=$351;
 var $cmp150_i_i=($354>>>0)<($353>>>0);
 if($cmp150_i_i){label=337;break;}else{label=336;break;}
 case 336: 
 var $bk155_i_i=(($351+12)|0);
 HEAP32[(($bk155_i_i)>>2)]=$343;
 HEAP32[(($fd145_i_i)>>2)]=$343;
 var $fd157_i_i=(($189+8)|0);
 var $_c6_i_i=$351;
 HEAP32[(($fd157_i_i)>>2)]=$_c6_i_i;
 var $bk158_i_i=(($189+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($bk158_i_i)>>2)]=$T_0_c_i_i;
 var $parent159_i_i=(($189+24)|0);
 HEAP32[(($parent159_i_i)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $355=HEAP32[((10236)>>2)];
 var $cmp250_i=($355>>>0)>($nb_0>>>0);
 if($cmp250_i){label=339;break;}else{label=340;break;}
 case 339: 
 var $sub253_i=((($355)-($nb_0))|0);
 HEAP32[((10236)>>2)]=$sub253_i;
 var $356=HEAP32[((10248)>>2)];
 var $357=$356;
 var $add_ptr255_i=(($357+$nb_0)|0);
 var $358=$add_ptr255_i;
 HEAP32[((10248)>>2)]=$358;
 var $or257_i=$sub253_i|1;
 var $add_ptr255_sum_i=((($nb_0)+(4))|0);
 var $head258_i=(($357+$add_ptr255_sum_i)|0);
 var $359=$head258_i;
 HEAP32[(($359)>>2)]=$or257_i;
 var $or260_i=$nb_0|3;
 var $head261_i=(($356+4)|0);
 HEAP32[(($head261_i)>>2)]=$or260_i;
 var $add_ptr262_i=(($356+8)|0);
 var $360=$add_ptr262_i;
 var $mem_0=$360;label=341;break;
 case 340: 
 var $call265_i=___errno_location();
 HEAP32[(($call265_i)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($mem|0)==0;
 if($cmp){label=140;break;}else{label=2;break;}
 case 2: 
 var $add_ptr=((($mem)-(8))|0);
 var $0=$add_ptr;
 var $1=HEAP32[((10240)>>2)];
 var $cmp1=($add_ptr>>>0)<($1>>>0);
 if($cmp1){label=139;break;}else{label=3;break;}
 case 3: 
 var $head=((($mem)-(4))|0);
 var $2=$head;
 var $3=HEAP32[(($2)>>2)];
 var $and=$3&3;
 var $cmp2=($and|0)==1;
 if($cmp2){label=139;break;}else{label=4;break;}
 case 4: 
 var $and5=$3&-8;
 var $add_ptr_sum=((($and5)-(8))|0);
 var $add_ptr6=(($mem+$add_ptr_sum)|0);
 var $4=$add_ptr6;
 var $and8=$3&1;
 var $tobool9=($and8|0)==0;
 if($tobool9){label=5;break;}else{var $p_0=$0;var $psize_0=$and5;label=56;break;}
 case 5: 
 var $prev_foot=$add_ptr;
 var $5=HEAP32[(($prev_foot)>>2)];
 var $cmp13=($and|0)==0;
 if($cmp13){label=140;break;}else{label=6;break;}
 case 6: 
 var $add_ptr_sum231=(((-8)-($5))|0);
 var $add_ptr16=(($mem+$add_ptr_sum231)|0);
 var $6=$add_ptr16;
 var $add17=((($5)+($and5))|0);
 var $cmp18=($add_ptr16>>>0)<($1>>>0);
 if($cmp18){label=139;break;}else{label=7;break;}
 case 7: 
 var $7=HEAP32[((10244)>>2)];
 var $cmp22=($6|0)==($7|0);
 if($cmp22){label=54;break;}else{label=8;break;}
 case 8: 
 var $shr=$5>>>3;
 var $cmp25=($5>>>0)<256;
 if($cmp25){label=9;break;}else{label=21;break;}
 case 9: 
 var $add_ptr16_sum268=((($add_ptr_sum231)+(8))|0);
 var $fd=(($mem+$add_ptr16_sum268)|0);
 var $8=$fd;
 var $9=HEAP32[(($8)>>2)];
 var $add_ptr16_sum269=((($add_ptr_sum231)+(12))|0);
 var $bk=(($mem+$add_ptr16_sum269)|0);
 var $10=$bk;
 var $11=HEAP32[(($10)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((10264+($shl<<2))|0);
 var $12=$arrayidx;
 var $cmp29=($9|0)==($12|0);
 if($cmp29){label=12;break;}else{label=10;break;}
 case 10: 
 var $13=$9;
 var $cmp31=($13>>>0)<($1>>>0);
 if($cmp31){label=20;break;}else{label=11;break;}
 case 11: 
 var $bk34=(($9+12)|0);
 var $14=HEAP32[(($bk34)>>2)];
 var $cmp35=($14|0)==($6|0);
 if($cmp35){label=12;break;}else{label=20;break;}
 case 12: 
 var $cmp42=($11|0)==($9|0);
 if($cmp42){label=13;break;}else{label=14;break;}
 case 13: 
 var $shl45=1<<$shr;
 var $neg=$shl45^-1;
 var $15=HEAP32[((10224)>>2)];
 var $and46=$15&$neg;
 HEAP32[((10224)>>2)]=$and46;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 14: 
 var $cmp50=($11|0)==($12|0);
 if($cmp50){label=15;break;}else{label=16;break;}
 case 15: 
 var $fd67_pre=(($11+8)|0);
 var $fd67_pre_phi=$fd67_pre;label=18;break;
 case 16: 
 var $16=$11;
 var $cmp53=($16>>>0)<($1>>>0);
 if($cmp53){label=19;break;}else{label=17;break;}
 case 17: 
 var $fd56=(($11+8)|0);
 var $17=HEAP32[(($fd56)>>2)];
 var $cmp57=($17|0)==($6|0);
 if($cmp57){var $fd67_pre_phi=$fd56;label=18;break;}else{label=19;break;}
 case 18: 
 var $fd67_pre_phi;
 var $bk66=(($9+12)|0);
 HEAP32[(($bk66)>>2)]=$11;
 HEAP32[(($fd67_pre_phi)>>2)]=$9;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $18=$add_ptr16;
 var $add_ptr16_sum260=((($add_ptr_sum231)+(24))|0);
 var $parent=(($mem+$add_ptr16_sum260)|0);
 var $19=$parent;
 var $20=HEAP32[(($19)>>2)];
 var $add_ptr16_sum261=((($add_ptr_sum231)+(12))|0);
 var $bk73=(($mem+$add_ptr16_sum261)|0);
 var $21=$bk73;
 var $22=HEAP32[(($21)>>2)];
 var $cmp74=($22|0)==($18|0);
 if($cmp74){label=27;break;}else{label=22;break;}
 case 22: 
 var $add_ptr16_sum265=((($add_ptr_sum231)+(8))|0);
 var $fd78=(($mem+$add_ptr16_sum265)|0);
 var $23=$fd78;
 var $24=HEAP32[(($23)>>2)];
 var $25=$24;
 var $cmp80=($25>>>0)<($1>>>0);
 if($cmp80){label=26;break;}else{label=23;break;}
 case 23: 
 var $bk82=(($24+12)|0);
 var $26=HEAP32[(($bk82)>>2)];
 var $cmp83=($26|0)==($18|0);
 if($cmp83){label=24;break;}else{label=26;break;}
 case 24: 
 var $fd86=(($22+8)|0);
 var $27=HEAP32[(($fd86)>>2)];
 var $cmp87=($27|0)==($18|0);
 if($cmp87){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($bk82)>>2)]=$22;
 HEAP32[(($fd86)>>2)]=$24;
 var $R_1=$22;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $child_sum=((($add_ptr_sum231)+(20))|0);
 var $arrayidx99=(($mem+$child_sum)|0);
 var $28=$arrayidx99;
 var $29=HEAP32[(($28)>>2)];
 var $cmp100=($29|0)==0;
 if($cmp100){label=28;break;}else{var $R_0=$29;var $RP_0=$28;label=29;break;}
 case 28: 
 var $add_ptr16_sum262=((($add_ptr_sum231)+(16))|0);
 var $child=(($mem+$add_ptr16_sum262)|0);
 var $arrayidx103=$child;
 var $30=HEAP32[(($arrayidx103)>>2)];
 var $cmp104=($30|0)==0;
 if($cmp104){var $R_1=0;label=34;break;}else{var $R_0=$30;var $RP_0=$arrayidx103;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $arrayidx108=(($R_0+20)|0);
 var $31=HEAP32[(($arrayidx108)>>2)];
 var $cmp109=($31|0)==0;
 if($cmp109){label=30;break;}else{var $R_0=$31;var $RP_0=$arrayidx108;label=29;break;}
 case 30: 
 var $arrayidx113=(($R_0+16)|0);
 var $32=HEAP32[(($arrayidx113)>>2)];
 var $cmp114=($32|0)==0;
 if($cmp114){label=31;break;}else{var $R_0=$32;var $RP_0=$arrayidx113;label=29;break;}
 case 31: 
 var $33=$RP_0;
 var $cmp118=($33>>>0)<($1>>>0);
 if($cmp118){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $cmp127=($20|0)==0;
 if($cmp127){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=35;break;}
 case 35: 
 var $add_ptr16_sum263=((($add_ptr_sum231)+(28))|0);
 var $index=(($mem+$add_ptr16_sum263)|0);
 var $34=$index;
 var $35=HEAP32[(($34)>>2)];
 var $arrayidx130=((10528+($35<<2))|0);
 var $36=HEAP32[(($arrayidx130)>>2)];
 var $cmp131=($18|0)==($36|0);
 if($cmp131){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($arrayidx130)>>2)]=$R_1;
 var $cond278=($R_1|0)==0;
 if($cond278){label=37;break;}else{label=44;break;}
 case 37: 
 var $37=HEAP32[(($34)>>2)];
 var $shl138=1<<$37;
 var $neg139=$shl138^-1;
 var $38=HEAP32[((10228)>>2)];
 var $and140=$38&$neg139;
 HEAP32[((10228)>>2)]=$and140;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 38: 
 var $39=$20;
 var $40=HEAP32[((10240)>>2)];
 var $cmp143=($39>>>0)<($40>>>0);
 if($cmp143){label=42;break;}else{label=39;break;}
 case 39: 
 var $arrayidx149=(($20+16)|0);
 var $41=HEAP32[(($arrayidx149)>>2)];
 var $cmp150=($41|0)==($18|0);
 if($cmp150){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($arrayidx149)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $arrayidx157=(($20+20)|0);
 HEAP32[(($arrayidx157)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $cmp162=($R_1|0)==0;
 if($cmp162){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=44;break;}
 case 44: 
 var $42=$R_1;
 var $43=HEAP32[((10240)>>2)];
 var $cmp165=($42>>>0)<($43>>>0);
 if($cmp165){label=53;break;}else{label=45;break;}
 case 45: 
 var $parent170=(($R_1+24)|0);
 HEAP32[(($parent170)>>2)]=$20;
 var $add_ptr16_sum264=((($add_ptr_sum231)+(16))|0);
 var $child171=(($mem+$add_ptr16_sum264)|0);
 var $arrayidx172=$child171;
 var $44=HEAP32[(($arrayidx172)>>2)];
 var $cmp173=($44|0)==0;
 if($cmp173){label=49;break;}else{label=46;break;}
 case 46: 
 var $45=$44;
 var $46=HEAP32[((10240)>>2)];
 var $cmp176=($45>>>0)<($46>>>0);
 if($cmp176){label=48;break;}else{label=47;break;}
 case 47: 
 var $arrayidx182=(($R_1+16)|0);
 HEAP32[(($arrayidx182)>>2)]=$44;
 var $parent183=(($44+24)|0);
 HEAP32[(($parent183)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $child171_sum=((($add_ptr_sum231)+(20))|0);
 var $arrayidx188=(($mem+$child171_sum)|0);
 var $47=$arrayidx188;
 var $48=HEAP32[(($47)>>2)];
 var $cmp189=($48|0)==0;
 if($cmp189){var $p_0=$6;var $psize_0=$add17;label=56;break;}else{label=50;break;}
 case 50: 
 var $49=$48;
 var $50=HEAP32[((10240)>>2)];
 var $cmp192=($49>>>0)<($50>>>0);
 if($cmp192){label=52;break;}else{label=51;break;}
 case 51: 
 var $arrayidx198=(($R_1+20)|0);
 HEAP32[(($arrayidx198)>>2)]=$48;
 var $parent199=(($48+24)|0);
 HEAP32[(($parent199)>>2)]=$R_1;
 var $p_0=$6;var $psize_0=$add17;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $add_ptr6_sum=((($and5)-(4))|0);
 var $head209=(($mem+$add_ptr6_sum)|0);
 var $51=$head209;
 var $52=HEAP32[(($51)>>2)];
 var $and210=$52&3;
 var $cmp211=($and210|0)==3;
 if($cmp211){label=55;break;}else{var $p_0=$6;var $psize_0=$add17;label=56;break;}
 case 55: 
 HEAP32[((10232)>>2)]=$add17;
 var $53=HEAP32[(($51)>>2)];
 var $and215=$53&-2;
 HEAP32[(($51)>>2)]=$and215;
 var $or=$add17|1;
 var $add_ptr16_sum=((($add_ptr_sum231)+(4))|0);
 var $head216=(($mem+$add_ptr16_sum)|0);
 var $54=$head216;
 HEAP32[(($54)>>2)]=$or;
 var $prev_foot218=$add_ptr6;
 HEAP32[(($prev_foot218)>>2)]=$add17;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $55=$p_0;
 var $cmp225=($55>>>0)<($add_ptr6>>>0);
 if($cmp225){label=57;break;}else{label=139;break;}
 case 57: 
 var $add_ptr6_sum258=((($and5)-(4))|0);
 var $head228=(($mem+$add_ptr6_sum258)|0);
 var $56=$head228;
 var $57=HEAP32[(($56)>>2)];
 var $and229=$57&1;
 var $phitmp=($and229|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $and237=$57&2;
 var $tobool238=($and237|0)==0;
 if($tobool238){label=59;break;}else{label=112;break;}
 case 59: 
 var $58=HEAP32[((10248)>>2)];
 var $cmp240=($4|0)==($58|0);
 if($cmp240){label=60;break;}else{label=62;break;}
 case 60: 
 var $59=HEAP32[((10236)>>2)];
 var $add243=((($59)+($psize_0))|0);
 HEAP32[((10236)>>2)]=$add243;
 HEAP32[((10248)>>2)]=$p_0;
 var $or244=$add243|1;
 var $head245=(($p_0+4)|0);
 HEAP32[(($head245)>>2)]=$or244;
 var $60=HEAP32[((10244)>>2)];
 var $cmp246=($p_0|0)==($60|0);
 if($cmp246){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((10244)>>2)]=0;
 HEAP32[((10232)>>2)]=0;
 label=140;break;
 case 62: 
 var $61=HEAP32[((10244)>>2)];
 var $cmp251=($4|0)==($61|0);
 if($cmp251){label=63;break;}else{label=64;break;}
 case 63: 
 var $62=HEAP32[((10232)>>2)];
 var $add254=((($62)+($psize_0))|0);
 HEAP32[((10232)>>2)]=$add254;
 HEAP32[((10244)>>2)]=$p_0;
 var $or255=$add254|1;
 var $head256=(($p_0+4)|0);
 HEAP32[(($head256)>>2)]=$or255;
 var $add_ptr257=(($55+$add254)|0);
 var $prev_foot258=$add_ptr257;
 HEAP32[(($prev_foot258)>>2)]=$add254;
 label=140;break;
 case 64: 
 var $and261=$57&-8;
 var $add262=((($and261)+($psize_0))|0);
 var $shr263=$57>>>3;
 var $cmp264=($57>>>0)<256;
 if($cmp264){label=65;break;}else{label=77;break;}
 case 65: 
 var $fd268=(($mem+$and5)|0);
 var $63=$fd268;
 var $64=HEAP32[(($63)>>2)];
 var $add_ptr6_sum252253=$and5|4;
 var $bk270=(($mem+$add_ptr6_sum252253)|0);
 var $65=$bk270;
 var $66=HEAP32[(($65)>>2)];
 var $shl273=$shr263<<1;
 var $arrayidx274=((10264+($shl273<<2))|0);
 var $67=$arrayidx274;
 var $cmp275=($64|0)==($67|0);
 if($cmp275){label=68;break;}else{label=66;break;}
 case 66: 
 var $68=$64;
 var $69=HEAP32[((10240)>>2)];
 var $cmp278=($68>>>0)<($69>>>0);
 if($cmp278){label=76;break;}else{label=67;break;}
 case 67: 
 var $bk281=(($64+12)|0);
 var $70=HEAP32[(($bk281)>>2)];
 var $cmp282=($70|0)==($4|0);
 if($cmp282){label=68;break;}else{label=76;break;}
 case 68: 
 var $cmp291=($66|0)==($64|0);
 if($cmp291){label=69;break;}else{label=70;break;}
 case 69: 
 var $shl294=1<<$shr263;
 var $neg295=$shl294^-1;
 var $71=HEAP32[((10224)>>2)];
 var $and296=$71&$neg295;
 HEAP32[((10224)>>2)]=$and296;
 label=110;break;
 case 70: 
 var $cmp300=($66|0)==($67|0);
 if($cmp300){label=71;break;}else{label=72;break;}
 case 71: 
 var $fd317_pre=(($66+8)|0);
 var $fd317_pre_phi=$fd317_pre;label=74;break;
 case 72: 
 var $72=$66;
 var $73=HEAP32[((10240)>>2)];
 var $cmp303=($72>>>0)<($73>>>0);
 if($cmp303){label=75;break;}else{label=73;break;}
 case 73: 
 var $fd306=(($66+8)|0);
 var $74=HEAP32[(($fd306)>>2)];
 var $cmp307=($74|0)==($4|0);
 if($cmp307){var $fd317_pre_phi=$fd306;label=74;break;}else{label=75;break;}
 case 74: 
 var $fd317_pre_phi;
 var $bk316=(($64+12)|0);
 HEAP32[(($bk316)>>2)]=$66;
 HEAP32[(($fd317_pre_phi)>>2)]=$64;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $75=$add_ptr6;
 var $add_ptr6_sum233=((($and5)+(16))|0);
 var $parent326=(($mem+$add_ptr6_sum233)|0);
 var $76=$parent326;
 var $77=HEAP32[(($76)>>2)];
 var $add_ptr6_sum234235=$and5|4;
 var $bk328=(($mem+$add_ptr6_sum234235)|0);
 var $78=$bk328;
 var $79=HEAP32[(($78)>>2)];
 var $cmp329=($79|0)==($75|0);
 if($cmp329){label=83;break;}else{label=78;break;}
 case 78: 
 var $fd333=(($mem+$and5)|0);
 var $80=$fd333;
 var $81=HEAP32[(($80)>>2)];
 var $82=$81;
 var $83=HEAP32[((10240)>>2)];
 var $cmp335=($82>>>0)<($83>>>0);
 if($cmp335){label=82;break;}else{label=79;break;}
 case 79: 
 var $bk338=(($81+12)|0);
 var $84=HEAP32[(($bk338)>>2)];
 var $cmp339=($84|0)==($75|0);
 if($cmp339){label=80;break;}else{label=82;break;}
 case 80: 
 var $fd342=(($79+8)|0);
 var $85=HEAP32[(($fd342)>>2)];
 var $cmp343=($85|0)==($75|0);
 if($cmp343){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($bk338)>>2)]=$79;
 HEAP32[(($fd342)>>2)]=$81;
 var $R327_1=$79;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $child356_sum=((($and5)+(12))|0);
 var $arrayidx357=(($mem+$child356_sum)|0);
 var $86=$arrayidx357;
 var $87=HEAP32[(($86)>>2)];
 var $cmp358=($87|0)==0;
 if($cmp358){label=84;break;}else{var $R327_0=$87;var $RP355_0=$86;label=85;break;}
 case 84: 
 var $add_ptr6_sum236=((($and5)+(8))|0);
 var $child356=(($mem+$add_ptr6_sum236)|0);
 var $arrayidx362=$child356;
 var $88=HEAP32[(($arrayidx362)>>2)];
 var $cmp363=($88|0)==0;
 if($cmp363){var $R327_1=0;label=90;break;}else{var $R327_0=$88;var $RP355_0=$arrayidx362;label=85;break;}
 case 85: 
 var $RP355_0;
 var $R327_0;
 var $arrayidx369=(($R327_0+20)|0);
 var $89=HEAP32[(($arrayidx369)>>2)];
 var $cmp370=($89|0)==0;
 if($cmp370){label=86;break;}else{var $R327_0=$89;var $RP355_0=$arrayidx369;label=85;break;}
 case 86: 
 var $arrayidx374=(($R327_0+16)|0);
 var $90=HEAP32[(($arrayidx374)>>2)];
 var $cmp375=($90|0)==0;
 if($cmp375){label=87;break;}else{var $R327_0=$90;var $RP355_0=$arrayidx374;label=85;break;}
 case 87: 
 var $91=$RP355_0;
 var $92=HEAP32[((10240)>>2)];
 var $cmp381=($91>>>0)<($92>>>0);
 if($cmp381){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP355_0)>>2)]=0;
 var $R327_1=$R327_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R327_1;
 var $cmp390=($77|0)==0;
 if($cmp390){label=110;break;}else{label=91;break;}
 case 91: 
 var $add_ptr6_sum246=((($and5)+(20))|0);
 var $index394=(($mem+$add_ptr6_sum246)|0);
 var $93=$index394;
 var $94=HEAP32[(($93)>>2)];
 var $arrayidx395=((10528+($94<<2))|0);
 var $95=HEAP32[(($arrayidx395)>>2)];
 var $cmp396=($75|0)==($95|0);
 if($cmp396){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($arrayidx395)>>2)]=$R327_1;
 var $cond279=($R327_1|0)==0;
 if($cond279){label=93;break;}else{label=100;break;}
 case 93: 
 var $96=HEAP32[(($93)>>2)];
 var $shl403=1<<$96;
 var $neg404=$shl403^-1;
 var $97=HEAP32[((10228)>>2)];
 var $and405=$97&$neg404;
 HEAP32[((10228)>>2)]=$and405;
 label=110;break;
 case 94: 
 var $98=$77;
 var $99=HEAP32[((10240)>>2)];
 var $cmp408=($98>>>0)<($99>>>0);
 if($cmp408){label=98;break;}else{label=95;break;}
 case 95: 
 var $arrayidx414=(($77+16)|0);
 var $100=HEAP32[(($arrayidx414)>>2)];
 var $cmp415=($100|0)==($75|0);
 if($cmp415){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($arrayidx414)>>2)]=$R327_1;
 label=99;break;
 case 97: 
 var $arrayidx422=(($77+20)|0);
 HEAP32[(($arrayidx422)>>2)]=$R327_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $cmp427=($R327_1|0)==0;
 if($cmp427){label=110;break;}else{label=100;break;}
 case 100: 
 var $101=$R327_1;
 var $102=HEAP32[((10240)>>2)];
 var $cmp430=($101>>>0)<($102>>>0);
 if($cmp430){label=109;break;}else{label=101;break;}
 case 101: 
 var $parent437=(($R327_1+24)|0);
 HEAP32[(($parent437)>>2)]=$77;
 var $add_ptr6_sum247=((($and5)+(8))|0);
 var $child438=(($mem+$add_ptr6_sum247)|0);
 var $arrayidx439=$child438;
 var $103=HEAP32[(($arrayidx439)>>2)];
 var $cmp440=($103|0)==0;
 if($cmp440){label=105;break;}else{label=102;break;}
 case 102: 
 var $104=$103;
 var $105=HEAP32[((10240)>>2)];
 var $cmp443=($104>>>0)<($105>>>0);
 if($cmp443){label=104;break;}else{label=103;break;}
 case 103: 
 var $arrayidx449=(($R327_1+16)|0);
 HEAP32[(($arrayidx449)>>2)]=$103;
 var $parent450=(($103+24)|0);
 HEAP32[(($parent450)>>2)]=$R327_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $child438_sum=((($and5)+(12))|0);
 var $arrayidx455=(($mem+$child438_sum)|0);
 var $106=$arrayidx455;
 var $107=HEAP32[(($106)>>2)];
 var $cmp456=($107|0)==0;
 if($cmp456){label=110;break;}else{label=106;break;}
 case 106: 
 var $108=$107;
 var $109=HEAP32[((10240)>>2)];
 var $cmp459=($108>>>0)<($109>>>0);
 if($cmp459){label=108;break;}else{label=107;break;}
 case 107: 
 var $arrayidx465=(($R327_1+20)|0);
 HEAP32[(($arrayidx465)>>2)]=$107;
 var $parent466=(($107+24)|0);
 HEAP32[(($parent466)>>2)]=$R327_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $or475=$add262|1;
 var $head476=(($p_0+4)|0);
 HEAP32[(($head476)>>2)]=$or475;
 var $add_ptr477=(($55+$add262)|0);
 var $prev_foot478=$add_ptr477;
 HEAP32[(($prev_foot478)>>2)]=$add262;
 var $110=HEAP32[((10244)>>2)];
 var $cmp479=($p_0|0)==($110|0);
 if($cmp479){label=111;break;}else{var $psize_1=$add262;label=113;break;}
 case 111: 
 HEAP32[((10232)>>2)]=$add262;
 label=140;break;
 case 112: 
 var $and487=$57&-2;
 HEAP32[(($56)>>2)]=$and487;
 var $or488=$psize_0|1;
 var $head489=(($p_0+4)|0);
 HEAP32[(($head489)>>2)]=$or488;
 var $add_ptr490=(($55+$psize_0)|0);
 var $prev_foot491=$add_ptr490;
 HEAP32[(($prev_foot491)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $shr493=$psize_1>>>3;
 var $cmp494=($psize_1>>>0)<256;
 if($cmp494){label=114;break;}else{label=119;break;}
 case 114: 
 var $shl500=$shr493<<1;
 var $arrayidx501=((10264+($shl500<<2))|0);
 var $111=$arrayidx501;
 var $112=HEAP32[((10224)>>2)];
 var $shl503=1<<$shr493;
 var $and504=$112&$shl503;
 var $tobool505=($and504|0)==0;
 if($tobool505){label=115;break;}else{label=116;break;}
 case 115: 
 var $or508=$112|$shl503;
 HEAP32[((10224)>>2)]=$or508;
 var $arrayidx501_sum_pre=((($shl500)+(2))|0);
 var $_pre=((10264+($arrayidx501_sum_pre<<2))|0);
 var $F502_0=$111;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $arrayidx501_sum245=((($shl500)+(2))|0);
 var $113=((10264+($arrayidx501_sum245<<2))|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114;
 var $116=HEAP32[((10240)>>2)];
 var $cmp511=($115>>>0)<($116>>>0);
 if($cmp511){label=117;break;}else{var $F502_0=$114;var $_pre_phi=$113;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F502_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $bk521=(($F502_0+12)|0);
 HEAP32[(($bk521)>>2)]=$p_0;
 var $fd522=(($p_0+8)|0);
 HEAP32[(($fd522)>>2)]=$F502_0;
 var $bk523=(($p_0+12)|0);
 HEAP32[(($bk523)>>2)]=$111;
 label=140;break;
 case 119: 
 var $117=$p_0;
 var $shr527=$psize_1>>>8;
 var $cmp528=($shr527|0)==0;
 if($cmp528){var $I526_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $cmp532=($psize_1>>>0)>16777215;
 if($cmp532){var $I526_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $sub=((($shr527)+(1048320))|0);
 var $shr536=$sub>>>16;
 var $and537=$shr536&8;
 var $shl538=$shr527<<$and537;
 var $sub539=((($shl538)+(520192))|0);
 var $shr540=$sub539>>>16;
 var $and541=$shr540&4;
 var $add542=$and541|$and537;
 var $shl543=$shl538<<$and541;
 var $sub544=((($shl543)+(245760))|0);
 var $shr545=$sub544>>>16;
 var $and546=$shr545&2;
 var $add547=$add542|$and546;
 var $sub548=(((14)-($add547))|0);
 var $shl549=$shl543<<$and546;
 var $shr550=$shl549>>>15;
 var $add551=((($sub548)+($shr550))|0);
 var $shl552=$add551<<1;
 var $add553=((($add551)+(7))|0);
 var $shr554=$psize_1>>>($add553>>>0);
 var $and555=$shr554&1;
 var $add556=$and555|$shl552;
 var $I526_0=$add556;label=122;break;
 case 122: 
 var $I526_0;
 var $arrayidx559=((10528+($I526_0<<2))|0);
 var $index560=(($p_0+28)|0);
 var $I526_0_c=$I526_0;
 HEAP32[(($index560)>>2)]=$I526_0_c;
 var $arrayidx562=(($p_0+20)|0);
 HEAP32[(($arrayidx562)>>2)]=0;
 var $118=(($p_0+16)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=HEAP32[((10228)>>2)];
 var $shl565=1<<$I526_0;
 var $and566=$119&$shl565;
 var $tobool567=($and566|0)==0;
 if($tobool567){label=123;break;}else{label=124;break;}
 case 123: 
 var $or570=$119|$shl565;
 HEAP32[((10228)>>2)]=$or570;
 HEAP32[(($arrayidx559)>>2)]=$117;
 var $parent571=(($p_0+24)|0);
 var $_c=$arrayidx559;
 HEAP32[(($parent571)>>2)]=$_c;
 var $bk572=(($p_0+12)|0);
 HEAP32[(($bk572)>>2)]=$p_0;
 var $fd573=(($p_0+8)|0);
 HEAP32[(($fd573)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $120=HEAP32[(($arrayidx559)>>2)];
 var $cmp576=($I526_0|0)==31;
 if($cmp576){var $cond=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $shr578=$I526_0>>>1;
 var $sub581=(((25)-($shr578))|0);
 var $cond=$sub581;label=126;break;
 case 126: 
 var $cond;
 var $shl582=$psize_1<<$cond;
 var $K575_0=$shl582;var $T_0=$120;label=127;break;
 case 127: 
 var $T_0;
 var $K575_0;
 var $head583=(($T_0+4)|0);
 var $121=HEAP32[(($head583)>>2)];
 var $and584=$121&-8;
 var $cmp585=($and584|0)==($psize_1|0);
 if($cmp585){label=132;break;}else{label=128;break;}
 case 128: 
 var $shr588=$K575_0>>>31;
 var $arrayidx591=(($T_0+16+($shr588<<2))|0);
 var $122=HEAP32[(($arrayidx591)>>2)];
 var $cmp593=($122|0)==0;
 var $shl592=$K575_0<<1;
 if($cmp593){label=129;break;}else{var $K575_0=$shl592;var $T_0=$122;label=127;break;}
 case 129: 
 var $123=$arrayidx591;
 var $124=HEAP32[((10240)>>2)];
 var $cmp597=($123>>>0)<($124>>>0);
 if($cmp597){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($arrayidx591)>>2)]=$117;
 var $parent602=(($p_0+24)|0);
 var $T_0_c242=$T_0;
 HEAP32[(($parent602)>>2)]=$T_0_c242;
 var $bk603=(($p_0+12)|0);
 HEAP32[(($bk603)>>2)]=$p_0;
 var $fd604=(($p_0+8)|0);
 HEAP32[(($fd604)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $fd609=(($T_0+8)|0);
 var $125=HEAP32[(($fd609)>>2)];
 var $126=$T_0;
 var $127=HEAP32[((10240)>>2)];
 var $cmp610=($126>>>0)<($127>>>0);
 if($cmp610){label=135;break;}else{label=133;break;}
 case 133: 
 var $128=$125;
 var $cmp613=($128>>>0)<($127>>>0);
 if($cmp613){label=135;break;}else{label=134;break;}
 case 134: 
 var $bk620=(($125+12)|0);
 HEAP32[(($bk620)>>2)]=$117;
 HEAP32[(($fd609)>>2)]=$117;
 var $fd622=(($p_0+8)|0);
 var $_c241=$125;
 HEAP32[(($fd622)>>2)]=$_c241;
 var $bk623=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($bk623)>>2)]=$T_0_c;
 var $parent624=(($p_0+24)|0);
 HEAP32[(($parent624)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $129=HEAP32[((10256)>>2)];
 var $dec=((($129)-(1))|0);
 HEAP32[((10256)>>2)]=$dec;
 var $cmp628=($dec|0)==0;
 if($cmp628){var $sp_0_in_i=10680;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $cmp_i=($sp_0_i|0)==0;
 var $next4_i=(($sp_0_i+8)|0);
 if($cmp_i){label=138;break;}else{var $sp_0_in_i=$next4_i;label=137;break;}
 case 138: 
 HEAP32[((10256)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($oldmem|0)==0;
 if($cmp){label=2;break;}else{label=3;break;}
 case 2: 
 var $call=_malloc($bytes);
 var $mem_0=$call;label=11;break;
 case 3: 
 var $cmp1=($bytes>>>0)>4294967231;
 if($cmp1){label=4;break;}else{label=5;break;}
 case 4: 
 var $call3=___errno_location();
 HEAP32[(($call3)>>2)]=12;
 var $mem_0=0;label=11;break;
 case 5: 
 var $cmp5=($bytes>>>0)<11;
 if($cmp5){var $cond=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $add6=((($bytes)+(11))|0);
 var $and=$add6&-8;
 var $cond=$and;label=7;break;
 case 7: 
 var $cond;
 var $add_ptr=((($oldmem)-(8))|0);
 var $0=$add_ptr;
 var $call7=_try_realloc_chunk($0,$cond);
 var $cmp8=($call7|0)==0;
 if($cmp8){label=9;break;}else{label=8;break;}
 case 8: 
 var $add_ptr10=(($call7+8)|0);
 var $1=$add_ptr10;
 var $mem_0=$1;label=11;break;
 case 9: 
 var $call12=_malloc($bytes);
 var $cmp13=($call12|0)==0;
 if($cmp13){var $mem_0=0;label=11;break;}else{label=10;break;}
 case 10: 
 var $head=((($oldmem)-(4))|0);
 var $2=$head;
 var $3=HEAP32[(($2)>>2)];
 var $and15=$3&-8;
 var $and17=$3&3;
 var $cmp18=($and17|0)==0;
 var $cond19=($cmp18?8:4);
 var $sub=((($and15)-($cond19))|0);
 var $cmp20=($sub>>>0)<($bytes>>>0);
 var $cond24=($cmp20?$sub:$bytes);
 assert($cond24 % 1 === 0);(_memcpy($call12, $oldmem, $cond24)|0);
 _free($oldmem);
 var $mem_0=$call12;label=11;break;
 case 11: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _try_realloc_chunk($p,$nb){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $head=(($p+4)|0);
 var $0=HEAP32[(($head)>>2)];
 var $and=$0&-8;
 var $1=$p;
 var $add_ptr=(($1+$and)|0);
 var $2=$add_ptr;
 var $3=HEAP32[((10240)>>2)];
 var $cmp=($1>>>0)<($3>>>0);
 if($cmp){label=72;break;}else{label=2;break;}
 case 2: 
 var $and2=$0&3;
 var $cmp3=($and2|0)!=1;
 var $cmp5=($1>>>0)<($add_ptr>>>0);
 var $or_cond=$cmp3&$cmp5;
 if($or_cond){label=3;break;}else{label=72;break;}
 case 3: 
 var $add_ptr_sum2122=$and|4;
 var $head6=(($1+$add_ptr_sum2122)|0);
 var $4=$head6;
 var $5=HEAP32[(($4)>>2)];
 var $and7=$5&1;
 var $phitmp=($and7|0)==0;
 if($phitmp){label=72;break;}else{label=4;break;}
 case 4: 
 var $cmp11=($and2|0)==0;
 if($cmp11){label=5;break;}else{label=9;break;}
 case 5: 
 var $cmp_i=($nb>>>0)<256;
 if($cmp_i){var $newp_0=0;label=73;break;}else{label=6;break;}
 case 6: 
 var $add_i=((($nb)+(4))|0);
 var $cmp1_i=($and>>>0)<($add_i>>>0);
 if($cmp1_i){label=8;break;}else{label=7;break;}
 case 7: 
 var $sub_i=((($and)-($nb))|0);
 var $6=HEAP32[((10192)>>2)];
 var $shl_i=$6<<1;
 var $cmp2_i=($sub_i>>>0)>($shl_i>>>0);
 if($cmp2_i){label=8;break;}else{var $newp_0=$p;label=73;break;}
 case 8: 
 var $newp_0=0;label=73;break;
 case 9: 
 var $cmp13=($and>>>0)<($nb>>>0);
 if($cmp13){label=12;break;}else{label=10;break;}
 case 10: 
 var $sub=((($and)-($nb))|0);
 var $cmp15=($sub>>>0)>15;
 if($cmp15){label=11;break;}else{var $newp_0=$p;label=73;break;}
 case 11: 
 var $add_ptr17=(($1+$nb)|0);
 var $7=$add_ptr17;
 var $and19=$0&1;
 var $or=$and19|$nb;
 var $or20=$or|2;
 HEAP32[(($head)>>2)]=$or20;
 var $add_ptr17_sum=((($nb)+(4))|0);
 var $head23=(($1+$add_ptr17_sum)|0);
 var $8=$head23;
 var $or28=$sub|3;
 HEAP32[(($8)>>2)]=$or28;
 var $9=HEAP32[(($4)>>2)];
 var $or32=$9|1;
 HEAP32[(($4)>>2)]=$or32;
 _dispose_chunk($7,$sub);
 var $newp_0=$p;label=73;break;
 case 12: 
 var $10=HEAP32[((10248)>>2)];
 var $cmp34=($2|0)==($10|0);
 if($cmp34){label=13;break;}else{label=15;break;}
 case 13: 
 var $11=HEAP32[((10236)>>2)];
 var $add=((($11)+($and))|0);
 var $cmp36=($add>>>0)>($nb>>>0);
 if($cmp36){label=14;break;}else{var $newp_0=0;label=73;break;}
 case 14: 
 var $sub40=((($add)-($nb))|0);
 var $add_ptr41=(($1+$nb)|0);
 var $12=$add_ptr41;
 var $and43=$0&1;
 var $or44=$and43|$nb;
 var $or45=$or44|2;
 HEAP32[(($head)>>2)]=$or45;
 var $add_ptr41_sum=((($nb)+(4))|0);
 var $head48=(($1+$add_ptr41_sum)|0);
 var $13=$head48;
 var $or50=$sub40|1;
 HEAP32[(($13)>>2)]=$or50;
 HEAP32[((10248)>>2)]=$12;
 HEAP32[((10236)>>2)]=$sub40;
 var $newp_0=$p;label=73;break;
 case 15: 
 var $14=HEAP32[((10244)>>2)];
 var $cmp56=($2|0)==($14|0);
 if($cmp56){label=16;break;}else{label=21;break;}
 case 16: 
 var $15=HEAP32[((10232)>>2)];
 var $add58=((($15)+($and))|0);
 var $cmp59=($add58>>>0)<($nb>>>0);
 if($cmp59){var $newp_0=0;label=73;break;}else{label=17;break;}
 case 17: 
 var $sub62=((($add58)-($nb))|0);
 var $cmp63=($sub62>>>0)>15;
 if($cmp63){label=18;break;}else{label=19;break;}
 case 18: 
 var $add_ptr66=(($1+$nb)|0);
 var $16=$add_ptr66;
 var $add_ptr67=(($1+$add58)|0);
 var $and69=$0&1;
 var $or70=$and69|$nb;
 var $or71=$or70|2;
 HEAP32[(($head)>>2)]=$or71;
 var $add_ptr66_sum=((($nb)+(4))|0);
 var $head74=(($1+$add_ptr66_sum)|0);
 var $17=$head74;
 var $or76=$sub62|1;
 HEAP32[(($17)>>2)]=$or76;
 var $prev_foot=$add_ptr67;
 HEAP32[(($prev_foot)>>2)]=$sub62;
 var $add_ptr67_sum=((($add58)+(4))|0);
 var $head79=(($1+$add_ptr67_sum)|0);
 var $18=$head79;
 var $19=HEAP32[(($18)>>2)];
 var $and80=$19&-2;
 HEAP32[(($18)>>2)]=$and80;
 var $storemerge=$16;var $storemerge18=$sub62;label=20;break;
 case 19: 
 var $and87=$0&1;
 var $or88=$and87|$add58;
 var $or89=$or88|2;
 HEAP32[(($head)>>2)]=$or89;
 var $add_ptr91_sum=((($add58)+(4))|0);
 var $head92=(($1+$add_ptr91_sum)|0);
 var $20=$head92;
 var $21=HEAP32[(($20)>>2)];
 var $or93=$21|1;
 HEAP32[(($20)>>2)]=$or93;
 var $storemerge=0;var $storemerge18=0;label=20;break;
 case 20: 
 var $storemerge18;
 var $storemerge;
 HEAP32[((10232)>>2)]=$storemerge18;
 HEAP32[((10244)>>2)]=$storemerge;
 var $newp_0=$p;label=73;break;
 case 21: 
 var $and100=$5&2;
 var $tobool101=($and100|0)==0;
 if($tobool101){label=22;break;}else{var $newp_0=0;label=73;break;}
 case 22: 
 var $and104=$5&-8;
 var $add105=((($and104)+($and))|0);
 var $cmp106=($add105>>>0)<($nb>>>0);
 if($cmp106){var $newp_0=0;label=73;break;}else{label=23;break;}
 case 23: 
 var $sub110=((($add105)-($nb))|0);
 var $shr=$5>>>3;
 var $cmp111=($5>>>0)<256;
 if($cmp111){label=24;break;}else{label=36;break;}
 case 24: 
 var $add_ptr_sum12=((($and)+(8))|0);
 var $fd=(($1+$add_ptr_sum12)|0);
 var $22=$fd;
 var $23=HEAP32[(($22)>>2)];
 var $add_ptr_sum13=((($and)+(12))|0);
 var $bk=(($1+$add_ptr_sum13)|0);
 var $24=$bk;
 var $25=HEAP32[(($24)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((10264+($shl<<2))|0);
 var $26=$arrayidx;
 var $cmp114=($23|0)==($26|0);
 if($cmp114){label=27;break;}else{label=25;break;}
 case 25: 
 var $27=$23;
 var $cmp116=($27>>>0)<($3>>>0);
 if($cmp116){label=35;break;}else{label=26;break;}
 case 26: 
 var $bk118=(($23+12)|0);
 var $28=HEAP32[(($bk118)>>2)];
 var $cmp119=($28|0)==($2|0);
 if($cmp119){label=27;break;}else{label=35;break;}
 case 27: 
 var $cmp125=($25|0)==($23|0);
 if($cmp125){label=28;break;}else{label=29;break;}
 case 28: 
 var $shl127=1<<$shr;
 var $neg=$shl127^-1;
 var $29=HEAP32[((10224)>>2)];
 var $and128=$29&$neg;
 HEAP32[((10224)>>2)]=$and128;
 label=69;break;
 case 29: 
 var $cmp133=($25|0)==($26|0);
 if($cmp133){label=30;break;}else{label=31;break;}
 case 30: 
 var $fd148_pre=(($25+8)|0);
 var $fd148_pre_phi=$fd148_pre;label=33;break;
 case 31: 
 var $30=$25;
 var $cmp136=($30>>>0)<($3>>>0);
 if($cmp136){label=34;break;}else{label=32;break;}
 case 32: 
 var $fd138=(($25+8)|0);
 var $31=HEAP32[(($fd138)>>2)];
 var $cmp139=($31|0)==($2|0);
 if($cmp139){var $fd148_pre_phi=$fd138;label=33;break;}else{label=34;break;}
 case 33: 
 var $fd148_pre_phi;
 var $bk147=(($23+12)|0);
 HEAP32[(($bk147)>>2)]=$25;
 HEAP32[(($fd148_pre_phi)>>2)]=$23;
 label=69;break;
 case 34: 
 _abort();
 throw "Reached an unreachable!";
 case 35: 
 _abort();
 throw "Reached an unreachable!";
 case 36: 
 var $32=$add_ptr;
 var $add_ptr_sum=((($and)+(24))|0);
 var $parent=(($1+$add_ptr_sum)|0);
 var $33=$parent;
 var $34=HEAP32[(($33)>>2)];
 var $add_ptr_sum2=((($and)+(12))|0);
 var $bk155=(($1+$add_ptr_sum2)|0);
 var $35=$bk155;
 var $36=HEAP32[(($35)>>2)];
 var $cmp156=($36|0)==($32|0);
 if($cmp156){label=42;break;}else{label=37;break;}
 case 37: 
 var $add_ptr_sum9=((($and)+(8))|0);
 var $fd159=(($1+$add_ptr_sum9)|0);
 var $37=$fd159;
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 var $cmp162=($39>>>0)<($3>>>0);
 if($cmp162){label=41;break;}else{label=38;break;}
 case 38: 
 var $bk164=(($38+12)|0);
 var $40=HEAP32[(($bk164)>>2)];
 var $cmp165=($40|0)==($32|0);
 if($cmp165){label=39;break;}else{label=41;break;}
 case 39: 
 var $fd167=(($36+8)|0);
 var $41=HEAP32[(($fd167)>>2)];
 var $cmp168=($41|0)==($32|0);
 if($cmp168){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($bk164)>>2)]=$36;
 HEAP32[(($fd167)>>2)]=$38;
 var $R_1=$36;label=49;break;
 case 41: 
 _abort();
 throw "Reached an unreachable!";
 case 42: 
 var $child_sum=((($and)+(20))|0);
 var $arrayidx179=(($1+$child_sum)|0);
 var $42=$arrayidx179;
 var $43=HEAP32[(($42)>>2)];
 var $cmp180=($43|0)==0;
 if($cmp180){label=43;break;}else{var $R_0=$43;var $RP_0=$42;label=44;break;}
 case 43: 
 var $add_ptr_sum3=((($and)+(16))|0);
 var $child=(($1+$add_ptr_sum3)|0);
 var $arrayidx182=$child;
 var $44=HEAP32[(($arrayidx182)>>2)];
 var $cmp183=($44|0)==0;
 if($cmp183){var $R_1=0;label=49;break;}else{var $R_0=$44;var $RP_0=$arrayidx182;label=44;break;}
 case 44: 
 var $RP_0;
 var $R_0;
 var $arrayidx186=(($R_0+20)|0);
 var $45=HEAP32[(($arrayidx186)>>2)];
 var $cmp187=($45|0)==0;
 if($cmp187){label=45;break;}else{var $R_0=$45;var $RP_0=$arrayidx186;label=44;break;}
 case 45: 
 var $arrayidx190=(($R_0+16)|0);
 var $46=HEAP32[(($arrayidx190)>>2)];
 var $cmp191=($46|0)==0;
 if($cmp191){label=46;break;}else{var $R_0=$46;var $RP_0=$arrayidx190;label=44;break;}
 case 46: 
 var $47=$RP_0;
 var $cmp195=($47>>>0)<($3>>>0);
 if($cmp195){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $R_1;
 var $cmp203=($34|0)==0;
 if($cmp203){label=69;break;}else{label=50;break;}
 case 50: 
 var $add_ptr_sum7=((($and)+(28))|0);
 var $index=(($1+$add_ptr_sum7)|0);
 var $48=$index;
 var $49=HEAP32[(($48)>>2)];
 var $arrayidx206=((10528+($49<<2))|0);
 var $50=HEAP32[(($arrayidx206)>>2)];
 var $cmp207=($32|0)==($50|0);
 if($cmp207){label=51;break;}else{label=53;break;}
 case 51: 
 HEAP32[(($arrayidx206)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=52;break;}else{label=59;break;}
 case 52: 
 var $51=HEAP32[(($48)>>2)];
 var $shl214=1<<$51;
 var $neg215=$shl214^-1;
 var $52=HEAP32[((10228)>>2)];
 var $and216=$52&$neg215;
 HEAP32[((10228)>>2)]=$and216;
 label=69;break;
 case 53: 
 var $53=$34;
 var $54=HEAP32[((10240)>>2)];
 var $cmp220=($53>>>0)<($54>>>0);
 if($cmp220){label=57;break;}else{label=54;break;}
 case 54: 
 var $arrayidx226=(($34+16)|0);
 var $55=HEAP32[(($arrayidx226)>>2)];
 var $cmp227=($55|0)==($32|0);
 if($cmp227){label=55;break;}else{label=56;break;}
 case 55: 
 HEAP32[(($arrayidx226)>>2)]=$R_1;
 label=58;break;
 case 56: 
 var $arrayidx234=(($34+20)|0);
 HEAP32[(($arrayidx234)>>2)]=$R_1;
 label=58;break;
 case 57: 
 _abort();
 throw "Reached an unreachable!";
 case 58: 
 var $cmp239=($R_1|0)==0;
 if($cmp239){label=69;break;}else{label=59;break;}
 case 59: 
 var $56=$R_1;
 var $57=HEAP32[((10240)>>2)];
 var $cmp243=($56>>>0)<($57>>>0);
 if($cmp243){label=68;break;}else{label=60;break;}
 case 60: 
 var $parent248=(($R_1+24)|0);
 HEAP32[(($parent248)>>2)]=$34;
 var $add_ptr_sum8=((($and)+(16))|0);
 var $child249=(($1+$add_ptr_sum8)|0);
 var $arrayidx250=$child249;
 var $58=HEAP32[(($arrayidx250)>>2)];
 var $cmp251=($58|0)==0;
 if($cmp251){label=64;break;}else{label=61;break;}
 case 61: 
 var $59=$58;
 var $60=HEAP32[((10240)>>2)];
 var $cmp255=($59>>>0)<($60>>>0);
 if($cmp255){label=63;break;}else{label=62;break;}
 case 62: 
 var $arrayidx261=(($R_1+16)|0);
 HEAP32[(($arrayidx261)>>2)]=$58;
 var $parent262=(($58+24)|0);
 HEAP32[(($parent262)>>2)]=$R_1;
 label=64;break;
 case 63: 
 _abort();
 throw "Reached an unreachable!";
 case 64: 
 var $child249_sum=((($and)+(20))|0);
 var $arrayidx267=(($1+$child249_sum)|0);
 var $61=$arrayidx267;
 var $62=HEAP32[(($61)>>2)];
 var $cmp268=($62|0)==0;
 if($cmp268){label=69;break;}else{label=65;break;}
 case 65: 
 var $63=$62;
 var $64=HEAP32[((10240)>>2)];
 var $cmp272=($63>>>0)<($64>>>0);
 if($cmp272){label=67;break;}else{label=66;break;}
 case 66: 
 var $arrayidx278=(($R_1+20)|0);
 HEAP32[(($arrayidx278)>>2)]=$62;
 var $parent279=(($62+24)|0);
 HEAP32[(($parent279)>>2)]=$R_1;
 label=69;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 _abort();
 throw "Reached an unreachable!";
 case 69: 
 var $cmp288=($sub110>>>0)<16;
 if($cmp288){label=70;break;}else{label=71;break;}
 case 70: 
 var $65=HEAP32[(($head)>>2)];
 var $and294=$65&1;
 var $or295=$add105|$and294;
 var $or296=$or295|2;
 HEAP32[(($head)>>2)]=$or296;
 var $add_ptr298_sum6=$add105|4;
 var $head299=(($1+$add_ptr298_sum6)|0);
 var $66=$head299;
 var $67=HEAP32[(($66)>>2)];
 var $or300=$67|1;
 HEAP32[(($66)>>2)]=$or300;
 var $newp_0=$p;label=73;break;
 case 71: 
 var $add_ptr303=(($1+$nb)|0);
 var $68=$add_ptr303;
 var $69=HEAP32[(($head)>>2)];
 var $and305=$69&1;
 var $or306=$and305|$nb;
 var $or307=$or306|2;
 HEAP32[(($head)>>2)]=$or307;
 var $add_ptr303_sum=((($nb)+(4))|0);
 var $head310=(($1+$add_ptr303_sum)|0);
 var $70=$head310;
 var $or315=$sub110|3;
 HEAP32[(($70)>>2)]=$or315;
 var $add_ptr317_sum5=$add105|4;
 var $head318=(($1+$add_ptr317_sum5)|0);
 var $71=$head318;
 var $72=HEAP32[(($71)>>2)];
 var $or319=$72|1;
 HEAP32[(($71)>>2)]=$or319;
 _dispose_chunk($68,$sub110);
 var $newp_0=$p;label=73;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $newp_0;
 return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$p;
 var $add_ptr=(($0+$psize)|0);
 var $1=$add_ptr;
 var $head=(($p+4)|0);
 var $2=HEAP32[(($head)>>2)];
 var $and=$2&1;
 var $tobool=($and|0)==0;
 if($tobool){label=2;break;}else{var $p_addr_0=$p;var $psize_addr_0=$psize;label=54;break;}
 case 2: 
 var $prev_foot=(($p)|0);
 var $3=HEAP32[(($prev_foot)>>2)];
 var $and2=$2&3;
 var $cmp=($and2|0)==0;
 if($cmp){label=134;break;}else{label=3;break;}
 case 3: 
 var $idx_neg=(((-$3))|0);
 var $add_ptr5=(($0+$idx_neg)|0);
 var $4=$add_ptr5;
 var $add6=((($3)+($psize))|0);
 var $5=HEAP32[((10240)>>2)];
 var $cmp7=($add_ptr5>>>0)<($5>>>0);
 if($cmp7){label=53;break;}else{label=4;break;}
 case 4: 
 var $6=HEAP32[((10244)>>2)];
 var $cmp10=($4|0)==($6|0);
 if($cmp10){label=51;break;}else{label=5;break;}
 case 5: 
 var $shr=$3>>>3;
 var $cmp13=($3>>>0)<256;
 if($cmp13){label=6;break;}else{label=18;break;}
 case 6: 
 var $add_ptr5_sum29=(((8)-($3))|0);
 var $fd=(($0+$add_ptr5_sum29)|0);
 var $7=$fd;
 var $8=HEAP32[(($7)>>2)];
 var $add_ptr5_sum30=(((12)-($3))|0);
 var $bk=(($0+$add_ptr5_sum30)|0);
 var $9=$bk;
 var $10=HEAP32[(($9)>>2)];
 var $shl=$shr<<1;
 var $arrayidx=((10264+($shl<<2))|0);
 var $11=$arrayidx;
 var $cmp17=($8|0)==($11|0);
 if($cmp17){label=9;break;}else{label=7;break;}
 case 7: 
 var $12=$8;
 var $cmp20=($12>>>0)<($5>>>0);
 if($cmp20){label=17;break;}else{label=8;break;}
 case 8: 
 var $bk22=(($8+12)|0);
 var $13=HEAP32[(($bk22)>>2)];
 var $cmp23=($13|0)==($4|0);
 if($cmp23){label=9;break;}else{label=17;break;}
 case 9: 
 var $cmp28=($10|0)==($8|0);
 if($cmp28){label=10;break;}else{label=11;break;}
 case 10: 
 var $shl31=1<<$shr;
 var $neg=$shl31^-1;
 var $14=HEAP32[((10224)>>2)];
 var $and32=$14&$neg;
 HEAP32[((10224)>>2)]=$and32;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 11: 
 var $cmp36=($10|0)==($11|0);
 if($cmp36){label=12;break;}else{label=13;break;}
 case 12: 
 var $fd53_pre=(($10+8)|0);
 var $fd53_pre_phi=$fd53_pre;label=15;break;
 case 13: 
 var $15=$10;
 var $cmp40=($15>>>0)<($5>>>0);
 if($cmp40){label=16;break;}else{label=14;break;}
 case 14: 
 var $fd43=(($10+8)|0);
 var $16=HEAP32[(($fd43)>>2)];
 var $cmp44=($16|0)==($4|0);
 if($cmp44){var $fd53_pre_phi=$fd43;label=15;break;}else{label=16;break;}
 case 15: 
 var $fd53_pre_phi;
 var $bk52=(($8+12)|0);
 HEAP32[(($bk52)>>2)]=$10;
 HEAP32[(($fd53_pre_phi)>>2)]=$8;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $17=$add_ptr5;
 var $add_ptr5_sum22=(((24)-($3))|0);
 var $parent=(($0+$add_ptr5_sum22)|0);
 var $18=$parent;
 var $19=HEAP32[(($18)>>2)];
 var $add_ptr5_sum23=(((12)-($3))|0);
 var $bk60=(($0+$add_ptr5_sum23)|0);
 var $20=$bk60;
 var $21=HEAP32[(($20)>>2)];
 var $cmp61=($21|0)==($17|0);
 if($cmp61){label=24;break;}else{label=19;break;}
 case 19: 
 var $add_ptr5_sum27=(((8)-($3))|0);
 var $fd65=(($0+$add_ptr5_sum27)|0);
 var $22=$fd65;
 var $23=HEAP32[(($22)>>2)];
 var $24=$23;
 var $cmp68=($24>>>0)<($5>>>0);
 if($cmp68){label=23;break;}else{label=20;break;}
 case 20: 
 var $bk70=(($23+12)|0);
 var $25=HEAP32[(($bk70)>>2)];
 var $cmp71=($25|0)==($17|0);
 if($cmp71){label=21;break;}else{label=23;break;}
 case 21: 
 var $fd74=(($21+8)|0);
 var $26=HEAP32[(($fd74)>>2)];
 var $cmp75=($26|0)==($17|0);
 if($cmp75){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($bk70)>>2)]=$21;
 HEAP32[(($fd74)>>2)]=$23;
 var $R_1=$21;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $add_ptr5_sum24=(((16)-($3))|0);
 var $child_sum=((($add_ptr5_sum24)+(4))|0);
 var $arrayidx86=(($0+$child_sum)|0);
 var $27=$arrayidx86;
 var $28=HEAP32[(($27)>>2)];
 var $cmp87=($28|0)==0;
 if($cmp87){label=25;break;}else{var $R_0=$28;var $RP_0=$27;label=26;break;}
 case 25: 
 var $child=(($0+$add_ptr5_sum24)|0);
 var $arrayidx90=$child;
 var $29=HEAP32[(($arrayidx90)>>2)];
 var $cmp91=($29|0)==0;
 if($cmp91){var $R_1=0;label=31;break;}else{var $R_0=$29;var $RP_0=$arrayidx90;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $arrayidx95=(($R_0+20)|0);
 var $30=HEAP32[(($arrayidx95)>>2)];
 var $cmp96=($30|0)==0;
 if($cmp96){label=27;break;}else{var $R_0=$30;var $RP_0=$arrayidx95;label=26;break;}
 case 27: 
 var $arrayidx100=(($R_0+16)|0);
 var $31=HEAP32[(($arrayidx100)>>2)];
 var $cmp101=($31|0)==0;
 if($cmp101){label=28;break;}else{var $R_0=$31;var $RP_0=$arrayidx100;label=26;break;}
 case 28: 
 var $32=$RP_0;
 var $cmp106=($32>>>0)<($5>>>0);
 if($cmp106){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $cmp115=($19|0)==0;
 if($cmp115){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=32;break;}
 case 32: 
 var $add_ptr5_sum25=(((28)-($3))|0);
 var $index=(($0+$add_ptr5_sum25)|0);
 var $33=$index;
 var $34=HEAP32[(($33)>>2)];
 var $arrayidx118=((10528+($34<<2))|0);
 var $35=HEAP32[(($arrayidx118)>>2)];
 var $cmp119=($17|0)==($35|0);
 if($cmp119){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($arrayidx118)>>2)]=$R_1;
 var $cond36=($R_1|0)==0;
 if($cond36){label=34;break;}else{label=41;break;}
 case 34: 
 var $36=HEAP32[(($33)>>2)];
 var $shl126=1<<$36;
 var $neg127=$shl126^-1;
 var $37=HEAP32[((10228)>>2)];
 var $and128=$37&$neg127;
 HEAP32[((10228)>>2)]=$and128;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 35: 
 var $38=$19;
 var $39=HEAP32[((10240)>>2)];
 var $cmp132=($38>>>0)<($39>>>0);
 if($cmp132){label=39;break;}else{label=36;break;}
 case 36: 
 var $arrayidx138=(($19+16)|0);
 var $40=HEAP32[(($arrayidx138)>>2)];
 var $cmp139=($40|0)==($17|0);
 if($cmp139){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($arrayidx138)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $arrayidx146=(($19+20)|0);
 HEAP32[(($arrayidx146)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $cmp151=($R_1|0)==0;
 if($cmp151){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=41;break;}
 case 41: 
 var $41=$R_1;
 var $42=HEAP32[((10240)>>2)];
 var $cmp155=($41>>>0)<($42>>>0);
 if($cmp155){label=50;break;}else{label=42;break;}
 case 42: 
 var $parent160=(($R_1+24)|0);
 HEAP32[(($parent160)>>2)]=$19;
 var $add_ptr5_sum26=(((16)-($3))|0);
 var $child161=(($0+$add_ptr5_sum26)|0);
 var $arrayidx162=$child161;
 var $43=HEAP32[(($arrayidx162)>>2)];
 var $cmp163=($43|0)==0;
 if($cmp163){label=46;break;}else{label=43;break;}
 case 43: 
 var $44=$43;
 var $45=HEAP32[((10240)>>2)];
 var $cmp167=($44>>>0)<($45>>>0);
 if($cmp167){label=45;break;}else{label=44;break;}
 case 44: 
 var $arrayidx173=(($R_1+16)|0);
 HEAP32[(($arrayidx173)>>2)]=$43;
 var $parent174=(($43+24)|0);
 HEAP32[(($parent174)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $child161_sum=((($add_ptr5_sum26)+(4))|0);
 var $arrayidx179=(($0+$child161_sum)|0);
 var $46=$arrayidx179;
 var $47=HEAP32[(($46)>>2)];
 var $cmp180=($47|0)==0;
 if($cmp180){var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}else{label=47;break;}
 case 47: 
 var $48=$47;
 var $49=HEAP32[((10240)>>2)];
 var $cmp184=($48>>>0)<($49>>>0);
 if($cmp184){label=49;break;}else{label=48;break;}
 case 48: 
 var $arrayidx190=(($R_1+20)|0);
 HEAP32[(($arrayidx190)>>2)]=$47;
 var $parent191=(($47+24)|0);
 HEAP32[(($parent191)>>2)]=$R_1;
 var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $add_ptr_sum=((($psize)+(4))|0);
 var $head201=(($0+$add_ptr_sum)|0);
 var $50=$head201;
 var $51=HEAP32[(($50)>>2)];
 var $and202=$51&3;
 var $cmp203=($and202|0)==3;
 if($cmp203){label=52;break;}else{var $p_addr_0=$4;var $psize_addr_0=$add6;label=54;break;}
 case 52: 
 HEAP32[((10232)>>2)]=$add6;
 var $52=HEAP32[(($50)>>2)];
 var $and207=$52&-2;
 HEAP32[(($50)>>2)]=$and207;
 var $or=$add6|1;
 var $add_ptr5_sum=(((4)-($3))|0);
 var $head208=(($0+$add_ptr5_sum)|0);
 var $53=$head208;
 HEAP32[(($53)>>2)]=$or;
 var $prev_foot210=$add_ptr;
 HEAP32[(($prev_foot210)>>2)]=$add6;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $psize_addr_0;
 var $p_addr_0;
 var $54=HEAP32[((10240)>>2)];
 var $cmp217=($add_ptr>>>0)<($54>>>0);
 if($cmp217){label=133;break;}else{label=55;break;}
 case 55: 
 var $add_ptr_sum1=((($psize)+(4))|0);
 var $head222=(($0+$add_ptr_sum1)|0);
 var $55=$head222;
 var $56=HEAP32[(($55)>>2)];
 var $and223=$56&2;
 var $tobool224=($and223|0)==0;
 if($tobool224){label=56;break;}else{label=109;break;}
 case 56: 
 var $57=HEAP32[((10248)>>2)];
 var $cmp226=($1|0)==($57|0);
 if($cmp226){label=57;break;}else{label=59;break;}
 case 57: 
 var $58=HEAP32[((10236)>>2)];
 var $add229=((($58)+($psize_addr_0))|0);
 HEAP32[((10236)>>2)]=$add229;
 HEAP32[((10248)>>2)]=$p_addr_0;
 var $or231=$add229|1;
 var $head232=(($p_addr_0+4)|0);
 HEAP32[(($head232)>>2)]=$or231;
 var $59=HEAP32[((10244)>>2)];
 var $cmp234=($p_addr_0|0)==($59|0);
 if($cmp234){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((10244)>>2)]=0;
 HEAP32[((10232)>>2)]=0;
 label=134;break;
 case 59: 
 var $60=HEAP32[((10244)>>2)];
 var $cmp242=($1|0)==($60|0);
 if($cmp242){label=60;break;}else{label=61;break;}
 case 60: 
 var $61=HEAP32[((10232)>>2)];
 var $add246=((($61)+($psize_addr_0))|0);
 HEAP32[((10232)>>2)]=$add246;
 HEAP32[((10244)>>2)]=$p_addr_0;
 var $or248=$add246|1;
 var $head249=(($p_addr_0+4)|0);
 HEAP32[(($head249)>>2)]=$or248;
 var $62=$p_addr_0;
 var $add_ptr250=(($62+$add246)|0);
 var $prev_foot251=$add_ptr250;
 HEAP32[(($prev_foot251)>>2)]=$add246;
 label=134;break;
 case 61: 
 var $and254=$56&-8;
 var $add255=((($and254)+($psize_addr_0))|0);
 var $shr256=$56>>>3;
 var $cmp257=($56>>>0)<256;
 if($cmp257){label=62;break;}else{label=74;break;}
 case 62: 
 var $add_ptr_sum17=((($psize)+(8))|0);
 var $fd261=(($0+$add_ptr_sum17)|0);
 var $63=$fd261;
 var $64=HEAP32[(($63)>>2)];
 var $add_ptr_sum18=((($psize)+(12))|0);
 var $bk263=(($0+$add_ptr_sum18)|0);
 var $65=$bk263;
 var $66=HEAP32[(($65)>>2)];
 var $shl266=$shr256<<1;
 var $arrayidx268=((10264+($shl266<<2))|0);
 var $67=$arrayidx268;
 var $cmp269=($64|0)==($67|0);
 if($cmp269){label=65;break;}else{label=63;break;}
 case 63: 
 var $68=$64;
 var $cmp273=($68>>>0)<($54>>>0);
 if($cmp273){label=73;break;}else{label=64;break;}
 case 64: 
 var $bk276=(($64+12)|0);
 var $69=HEAP32[(($bk276)>>2)];
 var $cmp277=($69|0)==($1|0);
 if($cmp277){label=65;break;}else{label=73;break;}
 case 65: 
 var $cmp286=($66|0)==($64|0);
 if($cmp286){label=66;break;}else{label=67;break;}
 case 66: 
 var $shl289=1<<$shr256;
 var $neg290=$shl289^-1;
 var $70=HEAP32[((10224)>>2)];
 var $and292=$70&$neg290;
 HEAP32[((10224)>>2)]=$and292;
 label=107;break;
 case 67: 
 var $cmp297=($66|0)==($67|0);
 if($cmp297){label=68;break;}else{label=69;break;}
 case 68: 
 var $fd315_pre=(($66+8)|0);
 var $fd315_pre_phi=$fd315_pre;label=71;break;
 case 69: 
 var $71=$66;
 var $cmp301=($71>>>0)<($54>>>0);
 if($cmp301){label=72;break;}else{label=70;break;}
 case 70: 
 var $fd304=(($66+8)|0);
 var $72=HEAP32[(($fd304)>>2)];
 var $cmp305=($72|0)==($1|0);
 if($cmp305){var $fd315_pre_phi=$fd304;label=71;break;}else{label=72;break;}
 case 71: 
 var $fd315_pre_phi;
 var $bk314=(($64+12)|0);
 HEAP32[(($bk314)>>2)]=$66;
 HEAP32[(($fd315_pre_phi)>>2)]=$64;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $73=$add_ptr;
 var $add_ptr_sum2=((($psize)+(24))|0);
 var $parent324=(($0+$add_ptr_sum2)|0);
 var $74=$parent324;
 var $75=HEAP32[(($74)>>2)];
 var $add_ptr_sum3=((($psize)+(12))|0);
 var $bk326=(($0+$add_ptr_sum3)|0);
 var $76=$bk326;
 var $77=HEAP32[(($76)>>2)];
 var $cmp327=($77|0)==($73|0);
 if($cmp327){label=80;break;}else{label=75;break;}
 case 75: 
 var $add_ptr_sum15=((($psize)+(8))|0);
 var $fd331=(($0+$add_ptr_sum15)|0);
 var $78=$fd331;
 var $79=HEAP32[(($78)>>2)];
 var $80=$79;
 var $cmp334=($80>>>0)<($54>>>0);
 if($cmp334){label=79;break;}else{label=76;break;}
 case 76: 
 var $bk337=(($79+12)|0);
 var $81=HEAP32[(($bk337)>>2)];
 var $cmp338=($81|0)==($73|0);
 if($cmp338){label=77;break;}else{label=79;break;}
 case 77: 
 var $fd341=(($77+8)|0);
 var $82=HEAP32[(($fd341)>>2)];
 var $cmp342=($82|0)==($73|0);
 if($cmp342){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($bk337)>>2)]=$77;
 HEAP32[(($fd341)>>2)]=$79;
 var $R325_1=$77;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $child355_sum=((($psize)+(20))|0);
 var $arrayidx356=(($0+$child355_sum)|0);
 var $83=$arrayidx356;
 var $84=HEAP32[(($83)>>2)];
 var $cmp357=($84|0)==0;
 if($cmp357){label=81;break;}else{var $R325_0=$84;var $RP354_0=$83;label=82;break;}
 case 81: 
 var $add_ptr_sum4=((($psize)+(16))|0);
 var $child355=(($0+$add_ptr_sum4)|0);
 var $arrayidx361=$child355;
 var $85=HEAP32[(($arrayidx361)>>2)];
 var $cmp362=($85|0)==0;
 if($cmp362){var $R325_1=0;label=87;break;}else{var $R325_0=$85;var $RP354_0=$arrayidx361;label=82;break;}
 case 82: 
 var $RP354_0;
 var $R325_0;
 var $arrayidx368=(($R325_0+20)|0);
 var $86=HEAP32[(($arrayidx368)>>2)];
 var $cmp369=($86|0)==0;
 if($cmp369){label=83;break;}else{var $R325_0=$86;var $RP354_0=$arrayidx368;label=82;break;}
 case 83: 
 var $arrayidx373=(($R325_0+16)|0);
 var $87=HEAP32[(($arrayidx373)>>2)];
 var $cmp374=($87|0)==0;
 if($cmp374){label=84;break;}else{var $R325_0=$87;var $RP354_0=$arrayidx373;label=82;break;}
 case 84: 
 var $88=$RP354_0;
 var $cmp381=($88>>>0)<($54>>>0);
 if($cmp381){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP354_0)>>2)]=0;
 var $R325_1=$R325_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R325_1;
 var $cmp390=($75|0)==0;
 if($cmp390){label=107;break;}else{label=88;break;}
 case 88: 
 var $add_ptr_sum13=((($psize)+(28))|0);
 var $index394=(($0+$add_ptr_sum13)|0);
 var $89=$index394;
 var $90=HEAP32[(($89)>>2)];
 var $arrayidx396=((10528+($90<<2))|0);
 var $91=HEAP32[(($arrayidx396)>>2)];
 var $cmp397=($73|0)==($91|0);
 if($cmp397){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($arrayidx396)>>2)]=$R325_1;
 var $cond37=($R325_1|0)==0;
 if($cond37){label=90;break;}else{label=97;break;}
 case 90: 
 var $92=HEAP32[(($89)>>2)];
 var $shl404=1<<$92;
 var $neg405=$shl404^-1;
 var $93=HEAP32[((10228)>>2)];
 var $and407=$93&$neg405;
 HEAP32[((10228)>>2)]=$and407;
 label=107;break;
 case 91: 
 var $94=$75;
 var $95=HEAP32[((10240)>>2)];
 var $cmp411=($94>>>0)<($95>>>0);
 if($cmp411){label=95;break;}else{label=92;break;}
 case 92: 
 var $arrayidx417=(($75+16)|0);
 var $96=HEAP32[(($arrayidx417)>>2)];
 var $cmp418=($96|0)==($73|0);
 if($cmp418){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($arrayidx417)>>2)]=$R325_1;
 label=96;break;
 case 94: 
 var $arrayidx425=(($75+20)|0);
 HEAP32[(($arrayidx425)>>2)]=$R325_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $cmp430=($R325_1|0)==0;
 if($cmp430){label=107;break;}else{label=97;break;}
 case 97: 
 var $97=$R325_1;
 var $98=HEAP32[((10240)>>2)];
 var $cmp434=($97>>>0)<($98>>>0);
 if($cmp434){label=106;break;}else{label=98;break;}
 case 98: 
 var $parent441=(($R325_1+24)|0);
 HEAP32[(($parent441)>>2)]=$75;
 var $add_ptr_sum14=((($psize)+(16))|0);
 var $child442=(($0+$add_ptr_sum14)|0);
 var $arrayidx443=$child442;
 var $99=HEAP32[(($arrayidx443)>>2)];
 var $cmp444=($99|0)==0;
 if($cmp444){label=102;break;}else{label=99;break;}
 case 99: 
 var $100=$99;
 var $101=HEAP32[((10240)>>2)];
 var $cmp448=($100>>>0)<($101>>>0);
 if($cmp448){label=101;break;}else{label=100;break;}
 case 100: 
 var $arrayidx454=(($R325_1+16)|0);
 HEAP32[(($arrayidx454)>>2)]=$99;
 var $parent455=(($99+24)|0);
 HEAP32[(($parent455)>>2)]=$R325_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $child442_sum=((($psize)+(20))|0);
 var $arrayidx460=(($0+$child442_sum)|0);
 var $102=$arrayidx460;
 var $103=HEAP32[(($102)>>2)];
 var $cmp461=($103|0)==0;
 if($cmp461){label=107;break;}else{label=103;break;}
 case 103: 
 var $104=$103;
 var $105=HEAP32[((10240)>>2)];
 var $cmp465=($104>>>0)<($105>>>0);
 if($cmp465){label=105;break;}else{label=104;break;}
 case 104: 
 var $arrayidx471=(($R325_1+20)|0);
 HEAP32[(($arrayidx471)>>2)]=$103;
 var $parent472=(($103+24)|0);
 HEAP32[(($parent472)>>2)]=$R325_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $or481=$add255|1;
 var $head482=(($p_addr_0+4)|0);
 HEAP32[(($head482)>>2)]=$or481;
 var $106=$p_addr_0;
 var $add_ptr483=(($106+$add255)|0);
 var $prev_foot484=$add_ptr483;
 HEAP32[(($prev_foot484)>>2)]=$add255;
 var $107=HEAP32[((10244)>>2)];
 var $cmp486=($p_addr_0|0)==($107|0);
 if($cmp486){label=108;break;}else{var $psize_addr_1=$add255;label=110;break;}
 case 108: 
 HEAP32[((10232)>>2)]=$add255;
 label=134;break;
 case 109: 
 var $and495=$56&-2;
 HEAP32[(($55)>>2)]=$and495;
 var $or496=$psize_addr_0|1;
 var $head497=(($p_addr_0+4)|0);
 HEAP32[(($head497)>>2)]=$or496;
 var $108=$p_addr_0;
 var $add_ptr498=(($108+$psize_addr_0)|0);
 var $prev_foot499=$add_ptr498;
 HEAP32[(($prev_foot499)>>2)]=$psize_addr_0;
 var $psize_addr_1=$psize_addr_0;label=110;break;
 case 110: 
 var $psize_addr_1;
 var $shr501=$psize_addr_1>>>3;
 var $cmp502=($psize_addr_1>>>0)<256;
 if($cmp502){label=111;break;}else{label=116;break;}
 case 111: 
 var $shl508=$shr501<<1;
 var $arrayidx510=((10264+($shl508<<2))|0);
 var $109=$arrayidx510;
 var $110=HEAP32[((10224)>>2)];
 var $shl513=1<<$shr501;
 var $and514=$110&$shl513;
 var $tobool515=($and514|0)==0;
 if($tobool515){label=112;break;}else{label=113;break;}
 case 112: 
 var $or519=$110|$shl513;
 HEAP32[((10224)>>2)]=$or519;
 var $arrayidx510_sum_pre=((($shl508)+(2))|0);
 var $_pre=((10264+($arrayidx510_sum_pre<<2))|0);
 var $F511_0=$109;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $arrayidx510_sum12=((($shl508)+(2))|0);
 var $111=((10264+($arrayidx510_sum12<<2))|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112;
 var $114=HEAP32[((10240)>>2)];
 var $cmp523=($113>>>0)<($114>>>0);
 if($cmp523){label=114;break;}else{var $F511_0=$112;var $_pre_phi=$111;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F511_0;
 HEAP32[(($_pre_phi)>>2)]=$p_addr_0;
 var $bk533=(($F511_0+12)|0);
 HEAP32[(($bk533)>>2)]=$p_addr_0;
 var $fd534=(($p_addr_0+8)|0);
 HEAP32[(($fd534)>>2)]=$F511_0;
 var $bk535=(($p_addr_0+12)|0);
 HEAP32[(($bk535)>>2)]=$109;
 label=134;break;
 case 116: 
 var $115=$p_addr_0;
 var $shr540=$psize_addr_1>>>8;
 var $cmp541=($shr540|0)==0;
 if($cmp541){var $I539_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $cmp545=($psize_addr_1>>>0)>16777215;
 if($cmp545){var $I539_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $sub=((($shr540)+(1048320))|0);
 var $shr549=$sub>>>16;
 var $and550=$shr549&8;
 var $shl551=$shr540<<$and550;
 var $sub552=((($shl551)+(520192))|0);
 var $shr553=$sub552>>>16;
 var $and554=$shr553&4;
 var $add555=$and554|$and550;
 var $shl556=$shl551<<$and554;
 var $sub557=((($shl556)+(245760))|0);
 var $shr558=$sub557>>>16;
 var $and559=$shr558&2;
 var $add560=$add555|$and559;
 var $sub561=(((14)-($add560))|0);
 var $shl562=$shl556<<$and559;
 var $shr563=$shl562>>>15;
 var $add564=((($sub561)+($shr563))|0);
 var $shl565=$add564<<1;
 var $add566=((($add564)+(7))|0);
 var $shr567=$psize_addr_1>>>($add566>>>0);
 var $and568=$shr567&1;
 var $add569=$and568|$shl565;
 var $I539_0=$add569;label=119;break;
 case 119: 
 var $I539_0;
 var $arrayidx573=((10528+($I539_0<<2))|0);
 var $index574=(($p_addr_0+28)|0);
 var $I539_0_c=$I539_0;
 HEAP32[(($index574)>>2)]=$I539_0_c;
 var $arrayidx576=(($p_addr_0+20)|0);
 HEAP32[(($arrayidx576)>>2)]=0;
 var $116=(($p_addr_0+16)|0);
 HEAP32[(($116)>>2)]=0;
 var $117=HEAP32[((10228)>>2)];
 var $shl580=1<<$I539_0;
 var $and581=$117&$shl580;
 var $tobool582=($and581|0)==0;
 if($tobool582){label=120;break;}else{label=121;break;}
 case 120: 
 var $or586=$117|$shl580;
 HEAP32[((10228)>>2)]=$or586;
 HEAP32[(($arrayidx573)>>2)]=$115;
 var $parent587=(($p_addr_0+24)|0);
 var $_c=$arrayidx573;
 HEAP32[(($parent587)>>2)]=$_c;
 var $bk588=(($p_addr_0+12)|0);
 HEAP32[(($bk588)>>2)]=$p_addr_0;
 var $fd589=(($p_addr_0+8)|0);
 HEAP32[(($fd589)>>2)]=$p_addr_0;
 label=134;break;
 case 121: 
 var $118=HEAP32[(($arrayidx573)>>2)];
 var $cmp592=($I539_0|0)==31;
 if($cmp592){var $cond=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $shr594=$I539_0>>>1;
 var $sub597=(((25)-($shr594))|0);
 var $cond=$sub597;label=123;break;
 case 123: 
 var $cond;
 var $shl598=$psize_addr_1<<$cond;
 var $K591_0=$shl598;var $T_0=$118;label=124;break;
 case 124: 
 var $T_0;
 var $K591_0;
 var $head599=(($T_0+4)|0);
 var $119=HEAP32[(($head599)>>2)];
 var $and600=$119&-8;
 var $cmp601=($and600|0)==($psize_addr_1|0);
 if($cmp601){label=129;break;}else{label=125;break;}
 case 125: 
 var $shr604=$K591_0>>>31;
 var $arrayidx607=(($T_0+16+($shr604<<2))|0);
 var $120=HEAP32[(($arrayidx607)>>2)];
 var $cmp609=($120|0)==0;
 var $shl608=$K591_0<<1;
 if($cmp609){label=126;break;}else{var $K591_0=$shl608;var $T_0=$120;label=124;break;}
 case 126: 
 var $121=$arrayidx607;
 var $122=HEAP32[((10240)>>2)];
 var $cmp614=($121>>>0)<($122>>>0);
 if($cmp614){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($arrayidx607)>>2)]=$115;
 var $parent619=(($p_addr_0+24)|0);
 var $T_0_c9=$T_0;
 HEAP32[(($parent619)>>2)]=$T_0_c9;
 var $bk620=(($p_addr_0+12)|0);
 HEAP32[(($bk620)>>2)]=$p_addr_0;
 var $fd621=(($p_addr_0+8)|0);
 HEAP32[(($fd621)>>2)]=$p_addr_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $fd626=(($T_0+8)|0);
 var $123=HEAP32[(($fd626)>>2)];
 var $124=$T_0;
 var $125=HEAP32[((10240)>>2)];
 var $cmp628=($124>>>0)<($125>>>0);
 if($cmp628){label=132;break;}else{label=130;break;}
 case 130: 
 var $126=$123;
 var $cmp632=($126>>>0)<($125>>>0);
 if($cmp632){label=132;break;}else{label=131;break;}
 case 131: 
 var $bk639=(($123+12)|0);
 HEAP32[(($bk639)>>2)]=$115;
 HEAP32[(($fd626)>>2)]=$115;
 var $fd641=(($p_addr_0+8)|0);
 var $_c8=$123;
 HEAP32[(($fd641)>>2)]=$_c8;
 var $bk642=(($p_addr_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($bk642)>>2)]=$T_0_c;
 var $parent643=(($p_addr_0+24)|0);
 HEAP32[(($parent643)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Znwj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cmp=($size|0)==0;
 var $_size=($cmp?1:$size);
 label=2;break;
 case 2: 
 var $call=_malloc($_size);
 var $cmp1=($call|0)==0;
 if($cmp1){label=3;break;}else{label=10;break;}
 case 3: 
 var $0=(tempValue=HEAP32[((14136)>>2)],HEAP32[((14136)>>2)]=tempValue+0,tempValue);
 var $tobool=($0|0)==0;
 if($tobool){label=9;break;}else{label=4;break;}
 case 4: 
 var $1=$0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit4$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit4$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit4$1;var $lpad_phi$0=$lpad_loopexit4$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit5$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit5$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit5$1;var $lpad_phi$0=$lpad_nonloopexit5$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $2=$lpad_phi$1;
 var $ehspec_fails=($2|0)<0;
 if($ehspec_fails){label=8;break;}else{label=11;break;}
 case 8: 
 var $3=$lpad_phi$0;
 ___cxa_call_unexpected($3);
 throw "Reached an unreachable!";
 case 9: 
 var $exception=___cxa_allocate_exception(4);
 var $4=$exception;
 HEAP32[(($4)>>2)]=2464;
 (function() { try { __THREW__ = 0; return ___cxa_throw($exception,8520,(72)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $call;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __Znaj($size){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $call=(function() { try { __THREW__ = 0; return __Znwj($size) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 return $call;
 case 3: 
 var $0$0 = ___cxa_find_matching_catch(-1, -1); var $0$1 = tempRet0;
 var $1=$0$1;
 var $ehspec_fails=($1|0)<0;
 if($ehspec_fails){label=4;break;}else{label=5;break;}
 case 4: 
 var $2=$0$0;
 ___cxa_call_unexpected($2);
 throw "Reached an unreachable!";
 case 5: 
 ___resumeException($0$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZdlPv($ptr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tobool=($ptr|0)==0;
 if($tobool){label=3;break;}else{label=2;break;}
 case 2: 
 _free($ptr);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZdaPv($ptr){
 var label=0;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this){
 var label=0;
 var $0=$this;
 __ZdlPv($0);
 return;
}
function __ZNSt9bad_allocD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;
 return 1168;
}
function __ZSt17__throw_bad_allocv(){
 var label=0;
 var $exception=___cxa_allocate_exception(4);
 var $0=$exception;
 HEAP32[(($0)>>2)]=2464;
 ___cxa_throw($exception,8520,(72));
 throw "Reached an unreachable!";
}
function _strtod($string,$endPtr){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $p_0=$string;label=2;break;
 case 2: 
 var $p_0;
 var $0=HEAP8[($p_0)];
 var $conv=(($0<<24)>>24);
 var $call=_isspace($conv);
 var $tobool=($call|0)==0;
 var $add_ptr=(($p_0+1)|0);
 if($tobool){label=3;break;}else{var $p_0=$add_ptr;label=2;break;}
 case 3: 
 var $1=HEAP8[($p_0)];
 if((($1<<24)>>24)==45){ label=4;break;}else if((($1<<24)>>24)==43){ label=5;break;}else{var $p_2=$p_0;var $sign_0=0;label=6;break;}
 case 4: 
 var $p_2=$add_ptr;var $sign_0=1;label=6;break;
 case 5: 
 var $p_2=$add_ptr;var $sign_0=0;label=6;break;
 case 6: 
 var $sign_0;
 var $p_2;
 var $decPt_0=-1;var $mantSize_0=0;var $p_3=$p_2;label=7;break;
 case 7: 
 var $p_3;
 var $mantSize_0;
 var $decPt_0;
 var $2=HEAP8[($p_3)];
 var $conv10=(($2<<24)>>24);
 var $isdigittmp=((($conv10)-(48))|0);
 var $isdigit=($isdigittmp>>>0)<10;
 if($isdigit){var $decPt_1=$decPt_0;label=9;break;}else{label=8;break;}
 case 8: 
 var $cmp14=(($2<<24)>>24)!=46;
 var $cmp16=($decPt_0|0)>-1;
 var $or_cond=$cmp14|$cmp16;
 if($or_cond){label=10;break;}else{var $decPt_1=$mantSize_0;label=9;break;}
 case 9: 
 var $decPt_1;
 var $add_ptr21=(($p_3+1)|0);
 var $add=((($mantSize_0)+(1))|0);
 var $decPt_0=$decPt_1;var $mantSize_0=$add;var $p_3=$add_ptr21;label=7;break;
 case 10: 
 var $idx_neg=(((-$mantSize_0))|0);
 var $add_ptr22=(($p_3+$idx_neg)|0);
 var $cmp23=($decPt_0|0)<0;
 var $not_cmp23=$cmp23^1;
 var $sub=(($not_cmp23<<31)>>31);
 var $mantSize_1=((($sub)+($mantSize_0))|0);
 var $decPt_2=($cmp23?$mantSize_0:$decPt_0);
 var $cmp28=($mantSize_1|0)>18;
 var $3=(((-$mantSize_1))|0);
 var $fracExp_0_p=($cmp28?-18:$3);
 var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
 var $mantSize_2=($cmp28?18:$mantSize_1);
 var $cmp35=($mantSize_2|0)==0;
 if($cmp35){var $p_11=$string;var $fraction_0=0;label=37;break;}else{label=11;break;}
 case 11: 
 var $cmp4078=($mantSize_2|0)>9;
 if($cmp4078){var $p_479=$add_ptr22;var $mantSize_380=$mantSize_2;var $frac1_081=0;label=15;break;}else{label=13;break;}
 case 12: 
 var $phitmp=($add51|0);
 var $phitmp85=($phitmp)*(1000000000);
 var $frac1_0_lcssa89=$phitmp85;var $mantSize_3_lcssa90=9;var $p_4_lcssa91=$p_5;label=14;break;
 case 13: 
 var $cmp5673=($mantSize_2|0)>0;
 if($cmp5673){var $frac1_0_lcssa89=0;var $mantSize_3_lcssa90=$mantSize_2;var $p_4_lcssa91=$add_ptr22;label=14;break;}else{var $frac2_0_lcssa=0;var $frac1_0_lcssa88=0;label=22;break;}
 case 14: 
 var $p_4_lcssa91;
 var $mantSize_3_lcssa90;
 var $frac1_0_lcssa89;
 var $p_674=$p_4_lcssa91;var $mantSize_475=$mantSize_3_lcssa90;var $frac2_076=0;label=18;break;
 case 15: 
 var $frac1_081;
 var $mantSize_380;
 var $p_479;
 var $4=HEAP8[($p_479)];
 var $add_ptr43=(($p_479+1)|0);
 var $cmp44=(($4<<24)>>24)==46;
 if($cmp44){label=16;break;}else{var $c_0_in=$4;var $p_5=$add_ptr43;label=17;break;}
 case 16: 
 var $5=HEAP8[($add_ptr43)];
 var $add_ptr48=(($p_479+2)|0);
 var $c_0_in=$5;var $p_5=$add_ptr48;label=17;break;
 case 17: 
 var $p_5;
 var $c_0_in;
 var $c_0=(($c_0_in<<24)>>24);
 var $mul=((($frac1_081)*(10))&-1);
 var $sub50=((($mul)-(48))|0);
 var $add51=((($sub50)+($c_0))|0);
 var $sub53=((($mantSize_380)-(1))|0);
 var $cmp40=($sub53|0)>9;
 if($cmp40){var $p_479=$p_5;var $mantSize_380=$sub53;var $frac1_081=$add51;label=15;break;}else{label=12;break;}
 case 18: 
 var $frac2_076;
 var $mantSize_475;
 var $p_674;
 var $6=HEAP8[($p_674)];
 var $add_ptr60=(($p_674+1)|0);
 var $cmp61=(($6<<24)>>24)==46;
 if($cmp61){label=19;break;}else{var $c_1_in=$6;var $p_7=$add_ptr60;label=20;break;}
 case 19: 
 var $7=HEAP8[($add_ptr60)];
 var $add_ptr65=(($p_674+2)|0);
 var $c_1_in=$7;var $p_7=$add_ptr65;label=20;break;
 case 20: 
 var $p_7;
 var $c_1_in;
 var $c_1=(($c_1_in<<24)>>24);
 var $mul67=((($frac2_076)*(10))&-1);
 var $sub68=((($mul67)-(48))|0);
 var $add69=((($sub68)+($c_1))|0);
 var $sub71=((($mantSize_475)-(1))|0);
 var $cmp56=($sub71|0)>0;
 if($cmp56){var $p_674=$p_7;var $mantSize_475=$sub71;var $frac2_076=$add69;label=18;break;}else{label=21;break;}
 case 21: 
 var $phitmp86=($add69|0);
 var $frac2_0_lcssa=$phitmp86;var $frac1_0_lcssa88=$frac1_0_lcssa89;label=22;break;
 case 22: 
 var $frac1_0_lcssa88;
 var $frac2_0_lcssa;
 var $add76=($frac1_0_lcssa88)+($frac2_0_lcssa);
 if((($2<<24)>>24)==69|(($2<<24)>>24)==101){ label=23;break;}else{var $exp_1=0;var $p_10=$p_3;var $expSign_1=0;label=28;break;}
 case 23: 
 var $add_ptr86=(($p_3+1)|0);
 var $8=HEAP8[($add_ptr86)];
 if((($8<<24)>>24)==45){ label=24;break;}else if((($8<<24)>>24)==43){ label=25;break;}else{var $p_9_ph=$add_ptr86;var $expSign_0_ph=0;label=26;break;}
 case 24: 
 var $add_ptr91=(($p_3+2)|0);
 var $p_9_ph=$add_ptr91;var $expSign_0_ph=1;label=26;break;
 case 25: 
 var $add_ptr97=(($p_3+2)|0);
 var $p_9_ph=$add_ptr97;var $expSign_0_ph=0;label=26;break;
 case 26: 
 var $expSign_0_ph;
 var $p_9_ph;
 var $9=HEAP8[($p_9_ph)];
 var $conv10166=(($9<<24)>>24);
 var $isdigittmp6067=((($conv10166)-(48))|0);
 var $isdigit6168=($isdigittmp6067>>>0)<10;
 if($isdigit6168){var $p_969=$p_9_ph;var $exp_070=0;var $10=$9;label=27;break;}else{var $exp_1=0;var $p_10=$p_9_ph;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 27: 
 var $10;
 var $exp_070;
 var $p_969;
 var $mul105=((($exp_070)*(10))&-1);
 var $conv106=(($10<<24)>>24);
 var $sub107=((($mul105)-(48))|0);
 var $add108=((($sub107)+($conv106))|0);
 var $add_ptr109=(($p_969+1)|0);
 var $11=HEAP8[($add_ptr109)];
 var $conv101=(($11<<24)>>24);
 var $isdigittmp60=((($conv101)-(48))|0);
 var $isdigit61=($isdigittmp60>>>0)<10;
 if($isdigit61){var $p_969=$add_ptr109;var $exp_070=$add108;var $10=$11;label=27;break;}else{var $exp_1=$add108;var $p_10=$add_ptr109;var $expSign_1=$expSign_0_ph;label=28;break;}
 case 28: 
 var $expSign_1;
 var $p_10;
 var $exp_1;
 var $tobool112=($expSign_1|0)==0;
 var $12=(((-$exp_1))|0);
 var $exp_2_p=($tobool112?$exp_1:$12);
 var $exp_2=((($fracExp_0)+($exp_2_p))|0);
 var $cmp118=($exp_2|0)<0;
 var $sub121=(((-$exp_2))|0);
 var $exp_3=($cmp118?$sub121:$exp_2);
 var $cmp124=($exp_3|0)>511;
 if($cmp124){label=29;break;}else{label=30;break;}
 case 29: 
 var $call127=___errno_location();
 HEAP32[(($call127)>>2)]=34;
 var $dblExp_063=1;var $d_064=8;var $exp_565=511;label=31;break;
 case 30: 
 var $cmp13062=($exp_3|0)==0;
 if($cmp13062){var $dblExp_0_lcssa=1;label=34;break;}else{var $dblExp_063=1;var $d_064=8;var $exp_565=$exp_3;label=31;break;}
 case 31: 
 var $exp_565;
 var $d_064;
 var $dblExp_063;
 var $and=$exp_565&1;
 var $tobool133=($and|0)==0;
 if($tobool133){var $dblExp_1=$dblExp_063;label=33;break;}else{label=32;break;}
 case 32: 
 var $13=HEAPF64[(($d_064)>>3)];
 var $mul135=($dblExp_063)*($13);
 var $dblExp_1=$mul135;label=33;break;
 case 33: 
 var $dblExp_1;
 var $shr=$exp_565>>1;
 var $add_ptr138=(($d_064+8)|0);
 var $cmp130=($shr|0)==0;
 if($cmp130){var $dblExp_0_lcssa=$dblExp_1;label=34;break;}else{var $dblExp_063=$dblExp_1;var $d_064=$add_ptr138;var $exp_565=$shr;label=31;break;}
 case 34: 
 var $dblExp_0_lcssa;
 var $tobool140=($exp_2|0)>-1;
 if($tobool140){label=36;break;}else{label=35;break;}
 case 35: 
 var $div=($add76)/($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$div;label=37;break;
 case 36: 
 var $mul143=($add76)*($dblExp_0_lcssa);
 var $p_11=$p_10;var $fraction_0=$mul143;label=37;break;
 case 37: 
 var $fraction_0;
 var $p_11;
 var $cmp145=($endPtr|0)==0;
 if($cmp145){label=39;break;}else{label=38;break;}
 case 38: 
 HEAP32[(($endPtr)>>2)]=$p_11;
 label=39;break;
 case 39: 
 var $tobool149=($sign_0|0)==0;
 if($tobool149){var $retval_0=$fraction_0;label=41;break;}else{label=40;break;}
 case 40: 
 var $sub151=((-.0))-($fraction_0);
 var $retval_0=$sub151;label=41;break;
 case 41: 
 var $retval_0;
 return $retval_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold_l($nptr,$endptr,$loc){
 var label=0;
 var $call_i=_strtod($nptr,$endptr);
 return $call_i;
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=faust-osc-temp.js.map
  // This should be made to only make a new context if one does not exist

  if (!faust.context)
  {
    faust.context = new webkitAudioContext();
  }

  var OSC_constructor = Module.cwrap('OSC_constructor', 'number', 'number');
  var OSC_destructor = Module.cwrap('OSC_destructor', null, ['number']);
  var OSC_compute = Module.cwrap('OSC_compute', ['number'], ['number', 'number', 'number', 'number']);
  var OSC_getNumInputs = Module.cwrap('OSC_getNumInputs', 'number', 'number');
  var OSC_getNumOutputs = Module.cwrap('OSC_getNumOutputs', 'number', 'number');
  var OSC_getNumParams = Module.cwrap('OSC_getNumParams', 'number', 'number');
  var OSC_getNextParam = Module.cwrap('OSC_getNextParam', 'number', ['number', 'number']);

  faust.osc = function () {
    var that = {};
    
    that.model = {
    };

    that.ptr = OSC_constructor(faust.context.sampleRate);

    // Bind to C++ Member Functions

    that.getNumInputs = function () {
      return OSC_getNumInputs(that.ptr);
    };

    that.getNumOutputs = function () {
      return OSC_getNumOutputs(that.ptr);
    };
    
    that.compute = function (e) {
      var oscOutChans = HEAP32.subarray(that.outs >> 2, (that.outs + that.numOut * that.ptrsize) >> 2);
      var oscInChans = HEAP32.subarray(that.ins >> 2, (that.ins + that.ins * that.ptrsize) >> 2);
      var i, j;
      for (i = 0; i < that.numIn; i++)
      {
        var input = e.inputBuffer.getChannelData(i);
        var oscInput = HEAPF32.subarray(oscInChans[i] >> 2, (oscInChans[i] + that.vectorsize * that.ptrsize) >> 2);
        
        for (j = 0; j < input.length; j++) {
          oscInput[j] = input[j];
        }
      }
      
      OSC_compute(that.ptr, that.vectorsize, that.ins, that.outs);
      
      for (i = 0; i < that.numOut; i++)
      {
        var output = e.outputBuffer.getChannelData(i);
        var oscOutput = HEAPF32.subarray(oscOutChans[i] >> 2, (oscOutChans[i] + that.vectorsize * that.ptrsize) >> 2);
        
        for (j = 0; j < output.length; j++) {
          output[j] = oscOutput[j];
        }
      }
    };

    that.destroy = function () {
      OSC_destructor(that.ptr);
    };
    
    // Connect to another node
    that.connect = function (node) {
      if (node.jsNode)
      {
        that.jsNode.connect(node.jsNode);
      }
      else {
        that.jsNode.connect(node);
      }
      
    };

    // Bind to Web Audio

    that.play = function () {
      that.jsNode.connect(faust.context.destination);
    };

    that.pause = function () {
      that.jsNode.disconnect(faust.context.destination);
    };

    that.setupModel = function () {
      var i;
      var numParams = OSC_getNumParams(that.ptr);
      for (i = 0; i < numParams; i++) {
        //TODO keyptr is allocated on stack, but is it properly freed?
        var keyPtr = allocate(intArrayFromString(''), 'i8', ALLOC_STACK);
        var valPtr = OSC_getNextParam(that.ptr, keyPtr);
        var key = Pointer_stringify(keyPtr);
        that.model[key] = valPtr;
      }
    };
    
    that.update = function (key, val) {
      HEAPF32[that.model[key] >> 2] = val;
    };

    that.init = function () {
      var i;
      that.ptrsize = 4; //assuming poitner in emscripten are 32bits
      that.vectorsize = 2048;
      that.samplesize = 4;
      
      // Get input / output counts
      that.numIn = that.getNumInputs();
      that.numOut = that.getNumOutputs();
      
      // Setup web audio context
      that.jsNode = faust.context.createJavaScriptNode(that.vectorsize, that.numIn, that.numOut);
      that.jsNode.onaudioprocess = that.compute;
      
      // TODO the below calls to malloc are not yet being freed, potential memory leak
      // allocate memory for input / output arrays
      that.ins = Module._malloc(that.ptrsize * that.numIn);
      
      for (i = 0; i < that.numIn; i++) { // assing to our array of pointer elements an array of 32bit floats, one for each channel. currently we assume pointers are 32bits
        HEAP32[(that.ins >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize); // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
      }
      
      that.outs = Module._malloc(that.ptrsize * that.numOut); //ptrsize, change to eight or use Runtime.QUANTUM? or what?
      for (i = 0; i < that.numOut; i++) { // assing to our array of pointer elements an array of 64bit floats, one for each channel. currently we assume pointers are 32bits
        HEAP32[(that.outs >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize); // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
      }
      that.setupModel();
    };

    that.init();
    

    return that;
  };
}());
