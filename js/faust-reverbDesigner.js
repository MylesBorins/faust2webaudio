/*
faust2webaduio

Primarily written by Myles Borins
During the Spring 2013 offering of Music 420b with Julius Smith
A bit during the Summer of 2013 with the help of Joshua Kit Clayton
And finally a sprint during the late fall of 2013 to get everything working
A Special thanks to Yann Orlarey and StÃ©phane Letz

faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
Choose the license that best suits your project. The text of the MIT and GPL
licenses are at the root directory.

*/

/*global webkitAudioContext, Module, HEAPF32, HEAP32, Pointer_stringify, ALLOC_STACK, intArrayFromString, allocate*/

var faust = faust || {};

// Shim AudioConext on webkit
window.AudioContext = window.AudioContext || window.webkitAudioContext || undefined;

(function () {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 14968;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 15008;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(15835);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });


/* memory initializer */ allocate([0,0,0,0,96,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,52,74,83,85,73,0,0,0,50,85,73,0,0,0,0,0,128,58,0,0,80,0,0,0,168,58,0,0,72,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,40,1,0,0,6,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,49,57,82,101,118,101,114,98,68,101,115,105,103,110,101,114,95,119,114,97,112,0,0,0,49,52,82,101,118,101,114,98,68,101,115,105,103,110,101,114,0,0,0,0,0,0,0,0,51,100,115,112,0,0,0,0,128,58,0,0,8,1,0,0,168,58,0,0,240,0,0,0,16,1,0,0,0,0,0,0,168,58,0,0,216,0,0,0,24,1,0,0,0,0,0,0,114,101,118,101,114,98,68,101,115,105,103,110,101,114,0,0,116,111,111,108,116,105,112,0,83,101,101,32,70,97,117,115,116,39,115,32,101,102,102,101,99,116,46,108,105,98,32,102,111,114,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,97,110,100,32,114,101,102,101,114,101,110,99,101,115,0,70,69,69,68,66,65,67,75,32,68,69,76,65,89,32,78,69,84,87,79,82,75,32,40,70,68,78,41,32,82,69,86,69,82,66,69,82,65,84,79,82,44,32,79,82,68,69,82,32,49,54,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,97,110,100,32,67,114,111,115,115,111,118,101,114,32,70,114,101,113,117,101,110,99,105,101,115,0,0,0,0,0,0,48,0,0,0,0,0,0,0,69,97,99,104,32,100,101,108,97,121,45,108,105,110,101,32,115,105,103,110,97,108,32,105,115,32,115,112,108,105,116,32,105,110,116,111,32,102,114,101,113,117,101,110,99,121,45,98,97,110,100,115,32,102,111,114,32,115,101,112,97,114,97,116,101,32,100,101,99,97,121,45,116,105,109,101,32,99,111,110,116,114,111,108,32,105,110,32,101,97,99,104,32,98,97,110,100,0,0,0,0,0,0,0,117,110,105,116,0,0,0,0,72,122,0,0,0,0,0,0,66,97,110,100,32,48,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,66,97,110,100,32,49,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,50,0,0,0,0,0,0,0,66,97,110,100,32,50,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,51,0,0,0,0,0,0,0,66,97,110,100,32,51,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,66,97,110,100,32,68,101,99,97,121,32,84,105,109,101,115,32,40,84,54,48,41,0,0,84,54,48,32,105,115,32,116,104,101,32,54,48,100,66,32,100,101,99,97,121,45,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,46,32,70,111,114,32,99,111,110,99,101,114,116,32,104,97,108,108,115,44,32,97,110,32,111,118,101,114,97,108,108,32,114,101,118,101,114,98,101,114,97,116,105,111,110,32,116,105,109,101,32,40,84,54,48,41,32,110,101,97,114,32,49,46,57,32,115,101,99,111,110,100,115,32,105,115,32,116,121,112,105,99,97,108,32,91,66,101,114,97,110,101,107,32,50,48,48,52,93,46,32,72,101,114,101,32,119,101,32,109,97,121,32,115,101,116,32,84,54,48,32,105,110,100,101,112,101,110,100,101,110,116,108,121,32,105,110,32,101,97,99,104,32,102,114,101,113,117,101,110,99,121,32,98,97,110,100,46,32,32,73,110,32,114,101,97,108,32,114,111,111,109,115,44,32,104,105,103,104,101,114,32,102,114,101,113,117,101,110,99,121,32,98,97,110,100,115,32,103,101,110,101,114,97,108,108,121,32,100,101,99,97,121,32,102,97,115,116,101,114,32,100,117,101,32,116,111,32,97,98,115,111,114,112,116,105,111,110,32,97,110,100,32,115,99,97,116,116,101,114,105,110,103,46,0,0,0,0,0,115,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,82,111,111,109,32,68,105,109,101,110,115,105,111,110,115,0,84,104,105,115,32,108,101,110,103,116,104,32,40,105,110,32,109,101,116,101,114,115,41,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,115,104,111,114,116,101,115,116,32,100,101,108,97,121,45,108,105,110,101,32,117,115,101,100,32,105,110,32,116,104,101,32,70,68,78,32,114,101,118,101,114,98,101,114,97,116,111,114,46,32,32,32,32,32,9,32,32,32,32,32,32,84,104,105,110,107,32,111,102,32,105,116,32,97,115,32,116,104,101,32,115,104,111,114,116,101,115,116,32,119,97,108,108,45,116,111,45,119,97,108,108,32,115,101,112,97,114,97,116,105,111,110,32,105,110,32,116,104,101,32,114,111,111,109,46,0,0,0,0,109,0,0,0,0,0,0,0,109,105,110,32,97,99,111,117,115,116,105,99,32,114,97,121,32,108,101,110,103,116,104,0,84,104,105,115,32,108,101,110,103,116,104,32,40,105,110,32,109,101,116,101,114,115,41,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,108,111,110,103,101,115,116,32,100,101,108,97,121,45,108,105,110,101,32,117,115,101,100,32,105,110,32,116,104,101,32,70,68,78,32,114,101,118,101,114,98,101,114,97,116,111,114,46,32,32,32,32,32,9,32,32,32,32,32,32,84,104,105,110,107,32,111,102,32,105,116,32,97,115,32,116,104,101,32,108,97,114,103,101,115,116,32,119,97,108,108,45,116,111,45,119,97,108,108,32,115,101,112,97,114,97,116,105,111,110,32,105,110,32,116,104,101,32,114,111,111,109,46,0,0,0,0,0,0,109,97,120,32,97,99,111,117,115,116,105,99,32,114,97,121,32,108,101,110,103,116,104,0,73,110,112,117,116,32,67,111,110,116,114,111,108,115,0,0,73,110,112,117,116,32,67,111,110,102,105,103,0,0,0,0,87,104,101,110,32,116,104,105,115,32,105,115,32,99,104,101,99,107,101,100,44,32,116,104,101,32,115,116,101,114,101,111,32,101,120,116,101,114,110,97,108,32,97,117,100,105,111,32,105,110,112,117,116,115,32,97,114,101,32,100,105,115,97,98,108,101,100,32,40,103,111,111,100,32,102,111,114,32,104,101,97,114,105,110,103,32,116,104,101,32,105,109,112,117,108,115,101,32,114,101,115,112,111,110,115,101,32,111,114,32,112,105,110,107,45,110,111,105,115,101,32,114,101,115,112,111,110,115,101,32,97,108,111,110,101,41,0,0,0,0,0,0,0,0,77,117,116,101,32,69,120,116,32,73,110,112,117,116,115,0,80,105,110,107,32,78,111,105,115,101,32,40,111,114,32,49,47,102,32,110,111,105,115,101,41,32,105,115,32,67,111,110,115,116,97,110,116,45,81,32,78,111,105,115,101,32,40,117,115,101,102,117,108,32,102,111,114,32,97,100,106,117,115,116,105,110,103,32,116,104,101,32,69,81,32,115,101,99,116,105,111,110,115,41,0,0,0,0,80,105,110,107,32,78,111,105,115,101,0,0,0,0,0,0,73,109,112,117,108,115,101,32,83,101,108,101,99,116,105,111,110,0,0,0,0,0,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,76,69,70,84,32,99,104,97,110,110,101,108,0,0,76,101,102,116,0,0,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,76,69,70,84,32,97,110,100,32,82,73,71,72,84,32,99,104,97,110,110,101,108,115,0,0,0,0,0,0,0,67,101,110,116,101,114,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,82,73,71,72,84,32,99,104,97,110,110,101,108,0,82,105,103,104,116,0,0,0,82,101,118,101,114,98,32,83,116,97,116,101,0,0,0,0,72,111,108,100,32,100,111,119,110,32,39,81,117,101,110,99,104,39,32,116,111,32,99,108,101,97,114,32,116,104,101,32,114,101,118,101,114,98,101,114,97,116,111,114,0,0,0,0,81,117,101,110,99,104,0,0,79,117,116,112,117,116,32,115,99,97,108,101,32,102,97,99,116,111,114,0,0,0,0,0,100,66,0,0,0,0,0,0,79,117,116,112,117,116,32,76,101,118,101,108,32,40,100,66,41,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,8,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,16,1,0,0,10,0,0,0,11,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([232,12,0,0,12,0,0,0,13,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,168,58,0,0,200,12,0,0,24,19,0,0,0,0,0,0,0,0,0,0,80,13,0,0,14,0,0,0,15,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,168,58,0,0,56,13,0,0,24,19,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,232,13,0,0,16,0,0,0,17,0,0,0,9,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,10,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,13,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,168,58,0,0,200,13,0,0,216,18,0,0,0,0,0,0,0,0,0,0,80,14,0,0,18,0,0,0,19,0,0,0,10,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,14,0,0,0,11,0,0,0,6,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,168,58,0,0,56,14,0,0,216,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,128,58,0,0,96,14,0,0,0,0,0,0,200,14,0,0,20,0,0,0,21,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,48,15,0,0,22,0,0,0,23,0,0,0,18,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,168,58,0,0,184,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,0,0,20,0,0,0,24,0,0,0,17,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,168,58,0,0,240,14,0,0,200,14,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,168,58,0,0,24,15,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,120,15,0,0,25,0,0,0,26,0,0,0,18,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,168,58,0,0,96,15,0,0,48,15,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,128,58,0,0,136,15,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,168,58,0,0,176,15,0,0,168,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,216,18,0,0,27,0,0,0,28,0,0,0,11,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,14,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,13,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,24,19,0,0,29,0,0,0,30,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,80,19,0,0,31,0,0,0,32,0,0,0,248,255,255,255,248,255,255,255,80,19,0,0,33,0,0,0,34,0,0,0,8,0,0,0,0,0,0,0,152,19,0,0,35,0,0,0,36,0,0,0,248,255,255,255,248,255,255,255,152,19,0,0,37,0,0,0,38,0,0,0,4,0,0,0,0,0,0,0,224,19,0,0,39,0,0,0,40,0,0,0,252,255,255,255,252,255,255,255,224,19,0,0,41,0,0,0,42,0,0,0,4,0,0,0,0,0,0,0,40,20,0,0,43,0,0,0,44,0,0,0,252,255,255,255,252,255,255,255,40,20,0,0,45,0,0,0,46,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,17,0,0,47,0,0,0,48,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,24,18,0,0,49,0,0,0,50,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,168,58,0,0,208,17,0,0,120,15,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,128,58,0,0,0,18,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,168,58,0,0,32,18,0,0,24,18,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,168,58,0,0,96,18,0,0,24,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,128,58,0,0,160,18,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,128,58,0,0,224,18,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,8,59,0,0,32,19,0,0,0,0,0,0,1,0,0,0,80,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,8,59,0,0,104,19,0,0,0,0,0,0,1,0,0,0,144,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,8,59,0,0,176,19,0,0,0,0,0,0,1,0,0,0,80,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,8,59,0,0,248,19,0,0,0,0,0,0,1,0,0,0,144,18,0,0,3,244,255,255,0,0,0,0,136,20,0,0,51,0,0,0,52,0,0,0,19,0,0,0,3,0,0,0,9,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,168,58,0,0,104,20,0,0,200,15,0,0,0,0,0,0,0,0,0,0,176,34,0,0,53,0,0,0,54,0,0,0,55,0,0,0,1,0,0,0,6,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,34,0,0,56,0,0,0,57,0,0,0,55,0,0,0,2,0,0,0,7,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,39,0,0,58,0,0,0,59,0,0,0,55,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,32,40,0,0,60,0,0,0,61,0,0,0,55,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,40,0,0,62,0,0,0,63,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,41,0,0,64,0,0,0,65,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,160,36,0,0,66,0,0,0,67,0,0,0,55,0,0,0,20,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,160,36,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,64,37,0,0,68,0,0,0,69,0,0,0,55,0,0,0,28,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,64,37,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,208,37,0,0,70,0,0,0,71,0,0,0,55,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,38,0,0,72,0,0,0,73,0,0,0,55,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,35,0,0,74,0,0,0,75,0,0,0,55,0,0,0,36,0,0,0,37,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,38,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,35,0,0,76,0,0,0,77,0,0,0,55,0,0,0,39,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,41,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,35,0,0,78,0,0,0,79,0,0,0,55,0,0,0,42,0,0,0,43,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,44,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,80,0,0,0,81,0,0,0,55,0,0,0,45,0,0,0,46,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,47,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,42,0,0,82,0,0,0,83,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,152,42,0,0,84,0,0,0,85,0,0,0,55,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,40,43,0,0,86,0,0,0,87,0,0,0,55,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,184,43,0,0,88,0,0,0,89,0,0,0,55,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,38,0,0,90,0,0,0,91,0,0,0,55,0,0,0,13,0,0,0,11,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,38,0,0,92,0,0,0,93,0,0,0,55,0,0,0,14,0,0,0,12,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,136,34,0,0,94,0,0,0,95,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,31,0,0,96,0,0,0,97,0,0,0,55,0,0,0,9,0,0,0,15,0,0,0,10,0,0,0,16,0,0,0,11,0,0,0,1,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,32,0,0,98,0,0,0,99,0,0,0,55,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,48,0,0,0,49,0,0,0,5,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,100,0,0,0,101,0,0,0,55,0,0,0,51,0,0,0,52,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,0,0,0,0,96,34,0,0,102,0,0,0,103,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,152,30,0,0,104,0,0,0,105,0,0,0,55,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,168,58,0,0,128,30,0,0,128,14,0,0,0,0,0,0,0,0,0,0,40,31,0,0,104,0,0,0,106,0,0,0,55,0,0,0,18,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,13,0,0,0,20,0,0,0,14,0,0,0,5,0,0,0,21,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,128,58,0,0,8,31,0,0,8,59,0,0,240,30,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,31,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,8,59,0,0,72,31,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,31,0,0,2,0,0,0,0,0,0,0,248,31,0,0,104,0,0,0,107,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,55,0,0,0,56,0,0,0,8,0,0,0,57,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,128,58,0,0,216,31,0,0,8,59,0,0,176,31,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,8,59,0,0,24,32,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,184,32,0,0,104,0,0,0,108,0,0,0,55,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,58,0,0,0,59,0,0,0,10,0,0,0,60,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,8,59,0,0,144,32,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,48,33,0,0,104,0,0,0,109,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,8,59,0,0,8,33,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,168,33,0,0,104,0,0,0,110,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,168,58,0,0,128,33,0,0,48,33,0,0,0,0,0,0,0,0,0,0,16,34,0,0,104,0,0,0,111,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,168,58,0,0,232,33,0,0,48,33,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,168,58,0,0,32,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,168,58,0,0,72,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,168,58,0,0,112,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,168,58,0,0,152,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,168,58,0,0,192,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,128,58,0,0,8,35,0,0,8,59,0,0,232,34,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,8,59,0,0,72,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,8,59,0,0,136,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,8,59,0,0,200,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,128,58,0,0,80,36,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,128,58,0,0,112,36,0,0,8,59,0,0,8,36,0,0,0,0,0,0,3,0,0,0,152,30,0,0,2,0,0,0,104,36,0,0,2,0,0,0,152,36,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,128,58,0,0,16,37,0,0,8,59,0,0,200,36,0,0,0,0,0,0,3,0,0,0,152,30,0,0,2,0,0,0,104,36,0,0,2,0,0,0,56,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,128,58,0,0,176,37,0,0,8,59,0,0,104,37,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,8,59,0,0,240,37,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,128,58,0,0,112,38,0,0,8,59,0,0,88,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,136,38,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,8,59,0,0,176,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,136,38,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,128,58,0,0,72,39,0,0,8,59,0,0,48,39,0,0,0,0,0,0,1,0,0,0,104,39,0,0,0,0,0,0,8,59,0,0,232,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,112,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,8,59,0,0,240,39,0,0,0,0,0,0,1,0,0,0,104,39,0,0,0,0,0,0,8,59,0,0,168,39,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,8,40,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,128,58,0,0,160,40,0,0,8,59,0,0,136,40,0,0,0,0,0,0,1,0,0,0,192,40,0,0,0,0,0,0,8,59,0,0,64,40,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,40,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,8,59,0,0,72,41,0,0,0,0,0,0,1,0,0,0,192,40,0,0,0,0,0,0,8,59,0,0,0,41,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,96,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,128,58,0,0,224,41,0,0,8,59,0,0,152,41,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,0,42,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,128,58,0,0,112,42,0,0,8,59,0,0,40,42,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,144,42,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,128,58,0,0,0,43,0,0,8,59,0,0,184,42,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,43,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,128,58,0,0,144,43,0,0,8,59,0,0,72,43,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,176,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+3204);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,57,0,0,112,0,0,0,113,0,0,0,64,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,128,58,0,0,208,57,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,168,58,0,0,232,57,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,168,58,0,0,8,58,0,0,224,57,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,168,58,0,0,64,58,0,0,48,58,0,0,0,0,0,0,0,0,0,0,104,58,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,13,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,240,58,0,0,114,0,0,0,118,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,14,0,0,0,2,0,0,0,9,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,168,58,0,0,200,58,0,0,104,58,0,0,0,0,0,0,0,0,0,0,80,59,0,0,114,0,0,0,119,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,15,0,0,0,3,0,0,0,10,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,168,58,0,0,40,59,0,0,104,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,61,0,0,120,0,0,0,121,0,0,0,65,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,168,58,0,0,128,61,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13464);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _floorf=Math_floor;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  var _llvm_pow_f32=Math_pow;


  function ___gxx_personality_v0() {
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }


  function ___cxa_guard_abort() {}

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function _fmod(x, y) {
      return x % y;
    }

  var _tanf=Math_tan;

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  var _expf=Math_exp;

  function _uselocale(locale) {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }



  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BItoD=true;

  var _logf=Math_log;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }



  function _pthread_cond_wait() {
      return 0;
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  var _fabs=Math_abs;

  var _getc=_fgetc;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  function __ZNSt9exceptionD2Ev() {}

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

   
  Module["_strcpy"] = _strcpy;

  var _copysignl=_copysign;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viiidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidddd(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiidddd"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiidd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viiidddd=env.nullFunc_viiidddd;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiidd=env.nullFunc_viiidd;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiidddd=env.invoke_viiidddd;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiidd=env.invoke_viiidd;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _tanf=env._tanf;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _expf=env._expf;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __exit=env.__exit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _sprintf=env._sprintf;
  var _vasprintf=env._vasprintf;
  var _logf=env._logf;
  var _vsnprintf=env._vsnprintf;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _strtoll=env._strtoll;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var _snprintf=env._snprintf;
  var ___errno_location=env.___errno_location;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _isxdigit=env._isxdigit;
  var _floorf=env._floorf;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _isspace=env._isspace;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _sscanf=env._sscanf;
  var _catgets=env._catgets;
  var _asprintf=env._asprintf;
  var _strtoll_l=env._strtoll_l;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var __scanString=env.__scanString;
  var _fgetc=env._fgetc;
  var ___cxa_throw=env.___cxa_throw;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function _REVERBDESIGNER_constructor($samplingFreq) {
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i1$i$i = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $__i1$i$i = sp;
 $2 = sp + 8|0;
 $10 = sp + 48|0;
 $14 = sp + 16|0;
 $11 = $samplingFreq;
 $15 = (__Znwj(528728)|0);
 _memset(($15|0),0,528728)|0;
 __THREW__ = 0;
 invoke_vi(122,($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $12 = $54;
  $13 = $55;
  __ZdlPv($15);
  $58 = $12;
  $59 = $13;
  ___resumeException($58|0);
  // unreachable;
 }
 $n = $15;
 $18 = (__Znwj(20)|0);
 __THREW__ = 0;
 invoke_vi(123,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if (!($20)) {
  $21 = $n;
  $22 = (($21) + 528724|0);
  HEAP32[$22>>2] = $18;
  $23 = $n;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $11;
  FUNCTION_TABLE_vii[$26 & 63]($23,$27);
  $28 = $n;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $n;
  $33 = (($32) + 528724|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$31 & 63]($28,$34);
  $35 = $n;
  $36 = (($35) + 528724|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 16|0);
  $39 = $n;
  $40 = (($39) + 528724|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 4|0);
  $9 = $42;
  $43 = $9;
  $8 = $43;
  $44 = $8;
  $7 = $44;
  $45 = $7;
  $46 = HEAP32[$45>>2]|0;
  $5 = $10;
  $6 = $46;
  $47 = $5;
  $48 = $6;
  $3 = $47;
  $4 = $48;
  $49 = $3;
  $50 = $4;
  HEAP32[$49>>2] = $50;
  ;HEAP8[$2+0|0]=HEAP8[$10+0|0]|0;HEAP8[$2+1|0]=HEAP8[$10+1|0]|0;HEAP8[$2+2|0]=HEAP8[$10+2|0]|0;HEAP8[$2+3|0]=HEAP8[$10+3|0]|0;
  $1 = $14;
  $51 = $1;
  ;HEAP8[$__i1$i$i+0|0]=HEAP8[$2+0|0]|0;HEAP8[$__i1$i$i+1|0]=HEAP8[$2+1|0]|0;HEAP8[$__i1$i$i+2|0]=HEAP8[$2+2|0]|0;HEAP8[$__i1$i$i+3|0]=HEAP8[$2+3|0]|0;
  $0 = $51;
  $52 = $0;
  ;HEAP32[$52+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
  ;HEAP32[$38+0>>2]=HEAP32[$14+0>>2]|0;
  $53 = $n;
  STACKTOP = sp;return ($53|0);
 }
 $56 = ___cxa_find_matching_catch(-1,-1)|0;
 $57 = tempRet0;
 $12 = $56;
 $13 = $57;
 __ZdlPv($18);
 $58 = $12;
 $59 = $13;
 ___resumeException($58|0);
 // unreachable;
 return 0|0;
}
function __ZN19ReverbDesigner_wrapC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN19ReverbDesigner_wrapC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4JSUIC1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN4JSUIC2Ev($1);
 STACKTOP = sp;return;
}
function _REVERBDESIGNER_getNumParams($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = $n;
 $5 = $4;
 $6 = (($5) + 528724|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4|0);
 $3 = $8;
 $9 = $3;
 $2 = $9;
 $10 = $2;
 $11 = (($10) + 8|0);
 $1 = $11;
 $12 = $1;
 $0 = $12;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _REVERBDESIGNER_getNextParam($n,$key) {
 $n = $n|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $valPtr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $__i1$i$i1 = sp + 24|0;
 $27 = sp;
 $39 = sp + 148|0;
 $__i1$i$i = sp + 16|0;
 $46 = sp + 8|0;
 $54 = sp + 212|0;
 $63 = sp + 112|0;
 $64 = sp + 248|0;
 $65 = sp + 256|0;
 $61 = $n;
 $62 = $key;
 $66 = $61;
 $67 = (($66) + 528724|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 16|0);
 $60 = $69;
 $70 = $60;
 $59 = $70;
 $71 = $59;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 16|0);
 $58 = $73;
 $74 = $58;
 $57 = $74;
 $75 = $57;
 $56 = $75;
 $76 = $56;
 $55 = $76;
 $77 = $55;
 $78 = (($77) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $valPtr = $79;
 $80 = $62;
 $81 = $61;
 $82 = (($81) + 528724|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 16|0);
 $20 = $84;
 $85 = $20;
 $19 = $85;
 $86 = $19;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 16|0);
 $18 = $88;
 $89 = $18;
 $17 = $89;
 $90 = $17;
 $16 = $90;
 $91 = $16;
 $15 = $91;
 $92 = $15;
 $14 = $92;
 $93 = $14;
 $13 = $93;
 $94 = $13;
 $12 = $94;
 $95 = $12;
 $11 = $95;
 $96 = $11;
 $10 = $96;
 $97 = $10;
 $9 = $97;
 $98 = $9;
 $99 = HEAP8[$98]|0;
 $100 = $99&255;
 $101 = $100 & 1;
 $102 = ($101|0)!=(0);
 if ($102) {
  $3 = $95;
  $103 = $3;
  $2 = $103;
  $104 = $2;
  $1 = $104;
  $105 = $1;
  $106 = (($105) + 8|0);
  $107 = HEAP32[$106>>2]|0;
  $114 = $107;
 } else {
  $8 = $95;
  $108 = $8;
  $7 = $108;
  $109 = $7;
  $6 = $109;
  $110 = $6;
  $111 = (($110) + 1|0);
  $5 = $111;
  $112 = $5;
  $4 = $112;
  $113 = $4;
  $114 = $113;
 }
 $0 = $114;
 $115 = $0;
 (_strcpy(($80|0),($115|0))|0);
 $116 = $61;
 $117 = (($116) + 528724|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + 16|0);
 $23 = $119;
 $24 = 0;
 $120 = $23;
 ;HEAP32[$63+0>>2]=HEAP32[$120+0>>2]|0;
 $22 = $120;
 $121 = $22;
 $21 = $121;
 $122 = $21;
 $123 = HEAP32[$122>>2]|0;
 $124 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($123)|0);
 HEAP32[$122>>2] = $124;
 $125 = $61;
 $126 = (($125) + 528724|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + 16|0);
 $129 = $61;
 $130 = (($129) + 528724|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 4|0);
 $38 = $132;
 $133 = $38;
 $37 = $133;
 $134 = $37;
 $36 = $134;
 $135 = $36;
 $136 = (($135) + 4|0);
 $35 = $136;
 $137 = $35;
 $34 = $137;
 $138 = $34;
 $33 = $138;
 $139 = $33;
 $32 = $139;
 $140 = $32;
 $30 = $39;
 $31 = $140;
 $141 = $30;
 $142 = $31;
 $28 = $141;
 $29 = $142;
 $143 = $28;
 $144 = $29;
 HEAP32[$143>>2] = $144;
 ;HEAP8[$27+0|0]=HEAP8[$39+0|0]|0;HEAP8[$27+1|0]=HEAP8[$39+1|0]|0;HEAP8[$27+2|0]=HEAP8[$39+2|0]|0;HEAP8[$27+3|0]=HEAP8[$39+3|0]|0;
 $26 = $64;
 $145 = $26;
 ;HEAP8[$__i1$i$i1+0|0]=HEAP8[$27+0|0]|0;HEAP8[$__i1$i$i1+1|0]=HEAP8[$27+1|0]|0;HEAP8[$__i1$i$i1+2|0]=HEAP8[$27+2|0]|0;HEAP8[$__i1$i$i1+3|0]=HEAP8[$27+3|0]|0;
 $25 = $145;
 $146 = $25;
 ;HEAP32[$146+0>>2]=HEAP32[$__i1$i$i1+0>>2]|0;
 $42 = $128;
 $43 = $64;
 $147 = $42;
 $148 = $43;
 $40 = $147;
 $41 = $148;
 $149 = $40;
 $150 = HEAP32[$149>>2]|0;
 $151 = $41;
 $152 = HEAP32[$151>>2]|0;
 $153 = ($150|0)==($152|0);
 if (!($153)) {
  $172 = $valPtr;
  STACKTOP = sp;return ($172|0);
 }
 $154 = $61;
 $155 = (($154) + 528724|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + 16|0);
 $158 = $61;
 $159 = (($158) + 528724|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + 4|0);
 $53 = $161;
 $162 = $53;
 $52 = $162;
 $163 = $52;
 $51 = $163;
 $164 = $51;
 $165 = HEAP32[$164>>2]|0;
 $49 = $54;
 $50 = $165;
 $166 = $49;
 $167 = $50;
 $47 = $166;
 $48 = $167;
 $168 = $47;
 $169 = $48;
 HEAP32[$168>>2] = $169;
 ;HEAP8[$46+0|0]=HEAP8[$54+0|0]|0;HEAP8[$46+1|0]=HEAP8[$54+1|0]|0;HEAP8[$46+2|0]=HEAP8[$54+2|0]|0;HEAP8[$46+3|0]=HEAP8[$54+3|0]|0;
 $45 = $65;
 $170 = $45;
 ;HEAP8[$__i1$i$i+0|0]=HEAP8[$46+0|0]|0;HEAP8[$__i1$i$i+1|0]=HEAP8[$46+1|0]|0;HEAP8[$__i1$i$i+2|0]=HEAP8[$46+2|0]|0;HEAP8[$__i1$i$i+3|0]=HEAP8[$46+3|0]|0;
 $44 = $170;
 $171 = $44;
 ;HEAP32[$171+0>>2]=HEAP32[$__i1$i$i+0>>2]|0;
 ;HEAP32[$157+0>>2]=HEAP32[$65+0>>2]|0;
 $172 = $valPtr;
 STACKTOP = sp;return ($172|0);
}
function _REVERBDESIGNER_compute($n,$count,$inputs,$outputs) {
 $n = $n|0;
 $count = $count|0;
 $inputs = $inputs|0;
 $outputs = $outputs|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $n;
 $1 = $count;
 $2 = $inputs;
 $3 = $outputs;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 FUNCTION_TABLE_viiii[$7 & 15]($4,$8,$9,$10);
 STACKTOP = sp;return 1;
}
function _REVERBDESIGNER_getNumInputs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $n;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 STACKTOP = sp;return ($5|0);
}
function _REVERBDESIGNER_getNumOutputs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $n;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($1)|0);
 STACKTOP = sp;return ($5|0);
}
function _REVERBDESIGNER_destructor($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $n;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $6 = sp + 48|0;
 $8 = sp + 64|0;
 $14 = sp;
 $19 = sp + 4|0;
 $16 = $__x;
 $20 = $16;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $12 = $14;
 $13 = -1;
 $23 = $12;
 $24 = $13;
 $10 = $23;
 $11 = $24;
 $25 = $10;
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$14>>2]|0;
 HEAP32[$19>>2] = $26;
 $0 = $19;
 $27 = ($22|0)!=(0|0);
 if ($27) {
  $28 = $16;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $7 = $30;
  while(1) {
   $31 = $7;
   $32 = HEAP32[$31>>2]|0;
   $4 = $6;
   $5 = -1;
   $33 = $4;
   $34 = $5;
   $2 = $33;
   $3 = $34;
   $35 = $2;
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$6>>2]|0;
   HEAP32[$8>>2] = $36;
   $1 = $8;
   $37 = ($32|0)!=(0|0);
   if (!($37)) {
    break;
   }
   $38 = $7;
   $39 = HEAP32[$38>>2]|0;
   $7 = $39;
  }
  $40 = $7;
  $15 = $40;
  $55 = $15;
  STACKTOP = sp;return ($55|0);
 } else {
  while(1) {
   $41 = $16;
   $9 = $41;
   $42 = $9;
   $43 = $9;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = HEAP32[$45>>2]|0;
   $47 = ($42|0)==($46|0);
   $48 = $47 ^ 1;
   if (!($48)) {
    break;
   }
   $49 = $16;
   $50 = (($49) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $16 = $51;
  }
  $52 = $16;
  $53 = (($52) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $15 = $54;
  $55 = $15;
  STACKTOP = sp;return ($55|0);
 }
 return 0|0;
}
function __ZN4JSUIC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c1$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $c1$i$i$i = sp;
 $6 = sp + 8|0;
 $9 = sp + 64|0;
 $10 = sp + 65|0;
 $14 = sp + 66|0;
 $13 = $this;
 $17 = $13;
 __ZN2UIC2Ev($17);
 $18 = (8 + 8|0);
 HEAP32[$17>>2] = $18;
 $19 = (($17) + 4|0);
 $11 = $19;
 $12 = $14;
 $20 = $11;
 $21 = $12;
 $7 = $20;
 $8 = $21;
 $22 = $7;
 ;HEAP8[$6+0|0]=HEAP8[$10+0|0]|0;
 $5 = $9;
 $23 = $5;
 ;HEAP8[$c1$i$i$i+0|0]=HEAP8[$6+0|0]|0;
 $4 = $23;
 __THREW__ = 0;
 invoke_vii(45,($22|0),($9|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if (!($25)) {
  $26 = (($17) + 16|0);
  $3 = $26;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $0 = $29;
  STACKTOP = sp;return;
 }
 $30 = ___cxa_find_matching_catch(-1,-1)|0;
 $31 = tempRet0;
 $15 = $30;
 $16 = $31;
 __THREW__ = 0;
 invoke_vi(124,($17|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $36 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $37 = tempRet0;
  ___clang_call_terminate($36);
  // unreachable;
 }
 $34 = $15;
 $35 = $16;
 ___resumeException($34|0);
 // unreachable;
}
function __ZN2UIC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (112 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN2UID2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4JSUID1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN4JSUID2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4JSUID0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN4JSUI10openTabBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $label;
 STACKTOP = sp;return;
}
function __ZN4JSUI17openHorizontalBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $label;
 STACKTOP = sp;return;
}
function __ZN4JSUI15openVerticalBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $label;
 STACKTOP = sp;return;
}
function __ZN4JSUI8closeBoxEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4JSUI9addButtonEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN4JSUI9insertMapEPKcPf($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN4JSUI14addCheckButtonEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN4JSUI9insertMapEPKcPf($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN4JSUI17addVerticalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $init;
 $4 = $fmin;
 $5 = $fmax;
 $6 = $step;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN4JSUI9insertMapEPKcPf($7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN4JSUI19addHorizontalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $init;
 $4 = $fmin;
 $5 = $fmax;
 $6 = $step;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN4JSUI9insertMapEPKcPf($7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN4JSUI11addNumEntryEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $init;
 $4 = $fmin;
 $5 = $fmax;
 $6 = $step;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 __ZN4JSUI9insertMapEPKcPf($7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN4JSUI21addHorizontalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $fmin = +$fmin;
 $fmax = +$fmax;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $fmin;
 $4 = $fmax;
 STACKTOP = sp;return;
}
function __ZN4JSUI19addVerticalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $fmin = +$fmin;
 $fmax = +$fmax;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $this;
 $1 = $label;
 $2 = $zone;
 $3 = $fmin;
 $4 = $fmax;
 STACKTOP = sp;return;
}
function __ZN4JSUI7declareEPfPKcS2_($this,$zone,$key,$val) {
 $this = $this|0;
 $zone = $zone|0;
 $key = $key|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $zone;
 $2 = $key;
 $3 = $val;
 STACKTOP = sp;return;
}
function __ZN4JSUI9insertMapEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i1$i$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__i1$i$i$i$i = sp;
 $2 = sp + 8|0;
 $5 = sp + 84|0;
 $14 = sp + 168|0;
 $15 = sp + 88|0;
 $39 = sp + 180|0;
 $40 = sp + 184|0;
 $41 = sp + 64|0;
 $42 = sp + 204|0;
 $45 = sp + 120|0;
 $37 = $this;
 $38 = $label;
 HEAP32[$39>>2] = $zone;
 $46 = $37;
 $47 = (($46) + 4|0);
 $48 = $38;
 $35 = $42;
 $36 = $48;
 $49 = $35;
 $50 = $36;
 $33 = $49;
 $34 = $50;
 $51 = $33;
 $32 = $51;
 $52 = $32;
 $31 = $52;
 $53 = $31;
 $30 = $53;
 $54 = $30;
 $29 = $54;
 $55 = $34;
 $56 = $34;
 $28 = $56;
 $57 = $28;
 $58 = (_strlen(($57|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($51,$55,$58);
 $25 = $41;
 $26 = $42;
 $27 = $39;
 $59 = $25;
 $60 = $27;
 $61 = $26;
 $22 = $59;
 $23 = $61;
 $24 = $60;
 $62 = $22;
 $63 = $23;
 __THREW__ = 0;
 invoke_vii(46,($62|0),($63|0));
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 L1: do {
  if ($65) {
   label = 15;
  } else {
   $66 = (($62) + 12|0);
   $67 = $24;
   $68 = HEAP32[$67>>2]|0;
   HEAP32[$66>>2] = $68;
   $20 = $40;
   $21 = $41;
   $69 = $20;
   $70 = $21;
   $18 = $69;
   $19 = $70;
   $71 = $18;
   $72 = $19;
   __THREW__ = 0;
   invoke_vii(46,($71|0),($72|0));
   $73 = __THREW__; __THREW__ = 0;
   $74 = $73&1;
   L4: do {
    if ($74) {
     label = 16;
    } else {
     $75 = (($71) + 12|0);
     $76 = $19;
     $77 = (($76) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     HEAP32[$75>>2] = $78;
     $12 = $47;
     $13 = $40;
     $79 = $12;
     $80 = $13;
     $10 = $15;
     $11 = $80;
     $81 = $10;
     $82 = $11;
     $8 = $81;
     $9 = $82;
     $83 = $8;
     $84 = $9;
     __THREW__ = 0;
     invoke_vii(47,($83|0),($84|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     do {
      if ($86) {
       label = 17;
      } else {
       __THREW__ = 0;
       invoke_viii(5,($14|0),($79|0),($15|0));
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $103 = ___cxa_find_matching_catch(-1,-1)|0;
        $104 = tempRet0;
        $16 = $103;
        $17 = $104;
        __THREW__ = 0;
        invoke_vi(125,($15|0));
        $105 = __THREW__; __THREW__ = 0;
        $106 = $105&1;
        if ($106) {
         $109 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $110 = tempRet0;
         ___clang_call_terminate($109);
         // unreachable;
        } else {
         $107 = $16;
         $108 = $17;
         $eh$lpad$body$index2Z2D = $108;$eh$lpad$body$indexZ2D = $107;
         break;
        }
       }
       $6 = $45;
       $7 = $14;
       $89 = $6;
       $90 = $7;
       $3 = $89;
       $4 = $90;
       $91 = $3;
       $92 = $4;
       ;HEAP32[$5+0>>2]=HEAP32[$92+0>>2]|0;
       ;HEAP8[$2+0|0]=HEAP8[$5+0|0]|0;HEAP8[$2+1|0]=HEAP8[$5+1|0]|0;HEAP8[$2+2|0]=HEAP8[$5+2|0]|0;HEAP8[$2+3|0]=HEAP8[$5+3|0]|0;
       $1 = $91;
       $93 = $1;
       ;HEAP8[$__i1$i$i$i$i+0|0]=HEAP8[$2+0|0]|0;HEAP8[$__i1$i$i$i$i+1|0]=HEAP8[$2+1|0]|0;HEAP8[$__i1$i$i$i$i+2|0]=HEAP8[$2+2|0]|0;HEAP8[$__i1$i$i$i$i+3|0]=HEAP8[$2+3|0]|0;
       $0 = $93;
       $94 = $0;
       ;HEAP32[$94+0>>2]=HEAP32[$__i1$i$i$i$i+0>>2]|0;
       $95 = (($91) + 4|0);
       $96 = $4;
       $97 = (($96) + 4|0);
       $98 = HEAP8[$97]|0;
       $99 = $98&1;
       $100 = $99&1;
       HEAP8[$95] = $100;
       __THREW__ = 0;
       invoke_vi(125,($15|0));
       $101 = __THREW__; __THREW__ = 0;
       $102 = $101&1;
       if ($102) {
        label = 17;
       } else {
        __THREW__ = 0;
        invoke_vi(126,($40|0));
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         label = 16;
         break L4;
        }
        __THREW__ = 0;
        invoke_vi(127,($41|0));
        $113 = __THREW__; __THREW__ = 0;
        $114 = $113&1;
        if ($114) {
         label = 15;
         break L1;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($42);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $119 = ___cxa_find_matching_catch(-1,-1)|0;
      $120 = tempRet0;
      $eh$lpad$body$index2Z2D = $120;$eh$lpad$body$indexZ2D = $119;
     }
     $43 = $eh$lpad$body$indexZ2D;
     $44 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(126,($40|0));
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if ($122) {
      $129 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $130 = tempRet0;
      ___clang_call_terminate($129);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   if ((label|0) == 16) {
    $117 = ___cxa_find_matching_catch(-1,-1)|0;
    $118 = tempRet0;
    $43 = $117;
    $44 = $118;
   }
   __THREW__ = 0;
   invoke_vi(127,($41|0));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    $129 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $130 = tempRet0;
    ___clang_call_terminate($129);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $115 = ___cxa_find_matching_catch(-1,-1)|0;
  $116 = tempRet0;
  $43 = $115;
  $44 = $116;
 }
 __THREW__ = 0;
 invoke_vi(128,($42|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $129 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $130 = tempRet0;
  ___clang_call_terminate($129);
  // unreachable;
 }
 $127 = $43;
 $128 = $44;
 ___resumeException($127|0);
 // unreachable;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0;
 var $__tmp$i$i$i14 = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i8 = 0, $__u1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0;
 $6 = sp + 24|0;
 $9 = sp + 784|0;
 $33 = sp + 32|0;
 $36 = sp + 785|0;
 $68 = sp + 64|0;
 $71 = sp + 786|0;
 $103 = sp + 444|0;
 $104 = sp;
 $107 = sp + 460|0;
 $108 = sp + 464|0;
 $__t21$i$i$i = sp + 48|0;
 $111 = sp + 40|0;
 $114 = sp + 504|0;
 $__u1$i = sp + 16|0;
 $116 = sp + 8|0;
 $128 = sp + 56|0;
 $131 = sp + 787|0;
 $164 = sp + 736|0;
 $__parent = sp + 96|0;
 $__inserted = sp + 788|0;
 $167 = sp + 760|0;
 $__h = sp + 364|0;
 $168 = sp + 360|0;
 $169 = sp + 576|0;
 $172 = sp + 728|0;
 $165 = $this;
 $166 = $__v;
 $173 = $165;
 $174 = $166;
 $175 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($173,$__parent,$174)|0);
 $__child = $175;
 $176 = $__child;
 $177 = HEAP32[$176>>2]|0;
 $__r = $177;
 HEAP8[$__inserted] = 0;
 $178 = $__child;
 $179 = HEAP32[$178>>2]|0;
 $162 = $164;
 $163 = -1;
 $180 = $162;
 $181 = $163;
 $160 = $180;
 $161 = $181;
 $182 = $160;
 HEAP32[$182>>2] = 0;
 $183 = HEAP32[$164>>2]|0;
 HEAP32[$167>>2] = $183;
 $159 = $167;
 $184 = ($179|0)==(0|0);
 if (!($184)) {
  $354 = $__r;
  $151 = $172;
  $152 = $354;
  $355 = $151;
  $356 = $152;
  $149 = $355;
  $150 = $356;
  $357 = $149;
  $358 = $150;
  HEAP32[$357>>2] = $358;
  $156 = $agg$result;
  $157 = $172;
  $158 = $__inserted;
  $359 = $156;
  $360 = $158;
  $361 = $157;
  $153 = $359;
  $154 = $361;
  $155 = $360;
  $362 = $153;
  $363 = $154;
  ;HEAP32[$362+0>>2]=HEAP32[$363+0>>2]|0;
  $364 = (($362) + 4|0);
  $365 = $155;
  $366 = HEAP8[$365]|0;
  $367 = $366&1;
  $368 = $367&1;
  HEAP8[$364] = $368;
  STACKTOP = sp;return;
 }
 $185 = $166;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($169,$173,$185);
 $121 = $169;
 $186 = $121;
 $119 = $168;
 $120 = $186;
 $187 = $119;
 $188 = $120;
 $117 = $187;
 $118 = $188;
 $189 = $117;
 $190 = $118;
 HEAP32[$189>>2] = $190;
 ;HEAP8[$116+0|0]=HEAP8[$168+0|0]|0;HEAP8[$116+1|0]=HEAP8[$168+1|0]|0;HEAP8[$116+2|0]=HEAP8[$168+2|0]|0;HEAP8[$116+3|0]=HEAP8[$168+3|0]|0;
 $115 = $__h;
 $191 = $115;
 ;HEAP8[$__u1$i+0|0]=HEAP8[$116+0|0]|0;HEAP8[$__u1$i+1|0]=HEAP8[$116+1|0]|0;HEAP8[$__u1$i+2|0]=HEAP8[$116+2|0]|0;HEAP8[$__u1$i+3|0]=HEAP8[$116+3|0]|0;
 $113 = $191;
 $192 = $113;
 $112 = $__u1$i;
 $193 = $112;
 $194 = HEAP32[$193>>2]|0;
 $93 = $194;
 $195 = $93;
 $92 = $195;
 $196 = $92;
 $91 = $196;
 $197 = $91;
 $198 = HEAP32[$197>>2]|0;
 $__t$i$i$i = $198;
 $90 = $195;
 $199 = $90;
 $89 = $199;
 $200 = $89;
 HEAP32[$200>>2] = 0;
 $201 = $__t$i$i$i;
 $94 = $__u1$i;
 $202 = $94;
 $203 = HEAP32[$202>>2]|0;
 $97 = $203;
 $204 = $97;
 $96 = $204;
 $205 = $96;
 $95 = $205;
 $206 = $95;
 $207 = (($206) + 4|0);
 $98 = $207;
 $208 = $98;
 ;HEAP32[$114+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$114+4>>2]=HEAP32[$208+4>>2]|0;
 ;HEAP8[$111+0|0]=HEAP8[$114+0|0]|0;HEAP8[$111+1|0]=HEAP8[$114+1|0]|0;HEAP8[$111+2|0]=HEAP8[$114+2|0]|0;HEAP8[$111+3|0]=HEAP8[$114+3|0]|0;HEAP8[$111+4|0]=HEAP8[$114+4|0]|0;HEAP8[$111+5|0]=HEAP8[$114+5|0]|0;HEAP8[$111+6|0]=HEAP8[$114+6|0]|0;HEAP8[$111+7|0]=HEAP8[$114+7|0]|0;
 $109 = $192;
 $110 = $201;
 $209 = $109;
 $210 = $110;
 ;HEAP8[$__t21$i$i$i+0|0]=HEAP8[$111+0|0]|0;HEAP8[$__t21$i$i$i+1|0]=HEAP8[$111+1|0]|0;HEAP8[$__t21$i$i$i+2|0]=HEAP8[$111+2|0]|0;HEAP8[$__t21$i$i$i+3|0]=HEAP8[$111+3|0]|0;HEAP8[$__t21$i$i$i+4|0]=HEAP8[$111+4|0]|0;HEAP8[$__t21$i$i$i+5|0]=HEAP8[$111+5|0]|0;HEAP8[$__t21$i$i$i+6|0]=HEAP8[$111+6|0]|0;HEAP8[$__t21$i$i$i+7|0]=HEAP8[$111+7|0]|0;
 $106 = $209;
 HEAP32[$107>>2] = $210;
 $211 = $106;
 $105 = $107;
 $212 = $105;
 $213 = HEAP32[$212>>2]|0;
 $99 = $__t21$i$i$i;
 $214 = $99;
 ;HEAP32[$108+0>>2]=HEAP32[$214+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$214+4>>2]|0;
 ;HEAP8[$104+0|0]=HEAP8[$108+0|0]|0;HEAP8[$104+1|0]=HEAP8[$108+1|0]|0;HEAP8[$104+2|0]=HEAP8[$108+2|0]|0;HEAP8[$104+3|0]=HEAP8[$108+3|0]|0;HEAP8[$104+4|0]=HEAP8[$108+4|0]|0;HEAP8[$104+5|0]=HEAP8[$108+5|0]|0;HEAP8[$104+6|0]=HEAP8[$108+6|0]|0;HEAP8[$104+7|0]=HEAP8[$108+7|0]|0;
 $102 = $211;
 HEAP32[$103>>2] = $213;
 $215 = $102;
 $101 = $103;
 $216 = $101;
 $217 = HEAP32[$216>>2]|0;
 HEAP32[$215>>2] = $217;
 $218 = (($215) + 4|0);
 $100 = $104;
 $219 = $100;
 ;HEAP32[$218+0>>2]=HEAP32[$219+0>>2]|0;HEAP32[$218+4>>2]=HEAP32[$219+4>>2]|0;
 $88 = $169;
 $220 = $88;
 $87 = $220;
 $221 = $87;
 $85 = $221;
 $86 = 0;
 $222 = $85;
 $84 = $222;
 $223 = $84;
 $83 = $223;
 $224 = $83;
 $225 = HEAP32[$224>>2]|0;
 $__tmp$i$i$i2 = $225;
 $226 = $86;
 $65 = $222;
 $227 = $65;
 $64 = $227;
 $228 = $64;
 HEAP32[$228>>2] = $226;
 $229 = $__tmp$i$i$i2;
 $230 = ($229|0)!=(0|0);
 if ($230) {
  $63 = $222;
  $231 = $63;
  $62 = $231;
  $232 = $62;
  $233 = (($232) + 4|0);
  $234 = $__tmp$i$i$i2;
  $79 = $233;
  $80 = $234;
  $235 = $79;
  $236 = (($235) + 4|0);
  $237 = HEAP8[$236]|0;
  $238 = $237&1;
  do {
   if ($238) {
    $239 = HEAP32[$235>>2]|0;
    $240 = $80;
    $241 = (($240) + 16|0);
    $78 = $241;
    $242 = $78;
    $69 = $239;
    $70 = $242;
    $243 = $69;
    $244 = $70;
    ;HEAP8[$68+0|0]=HEAP8[$71+0|0]|0;
    $66 = $243;
    $67 = $244;
    $245 = $67;
    __THREW__ = 0;
    invoke_vi(125,($245|0));
    $246 = __THREW__; __THREW__ = 0;
    $247 = $246&1;
    if ($247) {
     $248 = ___cxa_find_matching_catch(-1,-1)|0;
     $249 = tempRet0;
     $81 = $248;
     $82 = $249;
     $250 = $81;
     ___cxa_call_unexpected(($250|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $251 = $80;
  $252 = ($251|0)!=(0|0);
  if ($252) {
   $253 = HEAP32[$235>>2]|0;
   $254 = $80;
   $75 = $253;
   $76 = $254;
   $77 = 1;
   $255 = $75;
   $256 = $76;
   $257 = $77;
   $72 = $255;
   $73 = $256;
   $74 = $257;
   $258 = $73;
   __ZdlPv($258);
  }
 }
 $259 = HEAP32[$__parent>>2]|0;
 $260 = $__child;
 $61 = $__h;
 $261 = $61;
 $60 = $261;
 $262 = $60;
 $59 = $262;
 $263 = $59;
 $264 = HEAP32[$263>>2]|0;
 __THREW__ = 0;
 invoke_viiii(11,($173|0),($259|0),($260|0),($264|0));
 $265 = __THREW__; __THREW__ = 0;
 $266 = $265&1;
 if (!($266)) {
  $58 = $__h;
  $267 = $58;
  $57 = $267;
  $268 = $57;
  $56 = $268;
  $269 = $56;
  $270 = HEAP32[$269>>2]|0;
  $__t$i = $270;
  $55 = $267;
  $271 = $55;
  $54 = $271;
  $272 = $54;
  HEAP32[$272>>2] = 0;
  $273 = $__t$i;
  $__r = $273;
  HEAP8[$__inserted] = 1;
  $53 = $__h;
  $274 = $53;
  $52 = $274;
  $275 = $52;
  $50 = $275;
  $51 = 0;
  $276 = $50;
  $49 = $276;
  $277 = $49;
  $48 = $277;
  $278 = $48;
  $279 = HEAP32[$278>>2]|0;
  $__tmp$i$i$i8 = $279;
  $280 = $51;
  $30 = $276;
  $281 = $30;
  $29 = $281;
  $282 = $29;
  HEAP32[$282>>2] = $280;
  $283 = $__tmp$i$i$i8;
  $284 = ($283|0)!=(0|0);
  if ($284) {
   $28 = $276;
   $285 = $28;
   $27 = $285;
   $286 = $27;
   $287 = (($286) + 4|0);
   $288 = $__tmp$i$i$i8;
   $44 = $287;
   $45 = $288;
   $289 = $44;
   $290 = (($289) + 4|0);
   $291 = HEAP8[$290]|0;
   $292 = $291&1;
   do {
    if ($292) {
     $293 = HEAP32[$289>>2]|0;
     $294 = $45;
     $295 = (($294) + 16|0);
     $43 = $295;
     $296 = $43;
     $34 = $293;
     $35 = $296;
     $297 = $34;
     $298 = $35;
     ;HEAP8[$33+0|0]=HEAP8[$36+0|0]|0;
     $31 = $297;
     $32 = $298;
     $299 = $32;
     __THREW__ = 0;
     invoke_vi(125,($299|0));
     $300 = __THREW__; __THREW__ = 0;
     $301 = $300&1;
     if ($301) {
      $302 = ___cxa_find_matching_catch(-1,-1)|0;
      $303 = tempRet0;
      $46 = $302;
      $47 = $303;
      $304 = $46;
      ___cxa_call_unexpected(($304|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $305 = $45;
   $306 = ($305|0)!=(0|0);
   if ($306) {
    $307 = HEAP32[$289>>2]|0;
    $308 = $45;
    $40 = $307;
    $41 = $308;
    $42 = 1;
    $309 = $40;
    $310 = $41;
    $311 = $42;
    $37 = $309;
    $38 = $310;
    $39 = $311;
    $312 = $38;
    __ZdlPv($312);
   }
  }
  $354 = $__r;
  $151 = $172;
  $152 = $354;
  $355 = $151;
  $356 = $152;
  $149 = $355;
  $150 = $356;
  $357 = $149;
  $358 = $150;
  HEAP32[$357>>2] = $358;
  $156 = $agg$result;
  $157 = $172;
  $158 = $__inserted;
  $359 = $156;
  $360 = $158;
  $361 = $157;
  $153 = $359;
  $154 = $361;
  $155 = $360;
  $362 = $153;
  $363 = $154;
  ;HEAP32[$362+0>>2]=HEAP32[$363+0>>2]|0;
  $364 = (($362) + 4|0);
  $365 = $155;
  $366 = HEAP8[$365]|0;
  $367 = $366&1;
  $368 = $367&1;
  HEAP8[$364] = $368;
  STACKTOP = sp;return;
 }
 $313 = ___cxa_find_matching_catch(-1,-1)|0;
 $314 = tempRet0;
 $170 = $313;
 $171 = $314;
 $148 = $__h;
 $315 = $148;
 $147 = $315;
 $316 = $147;
 $145 = $316;
 $146 = 0;
 $317 = $145;
 $144 = $317;
 $318 = $144;
 $143 = $318;
 $319 = $143;
 $320 = HEAP32[$319>>2]|0;
 $__tmp$i$i$i = $320;
 $321 = $146;
 $125 = $317;
 $322 = $125;
 $124 = $322;
 $323 = $124;
 HEAP32[$323>>2] = $321;
 $324 = $__tmp$i$i$i;
 $325 = ($324|0)!=(0|0);
 if ($325) {
  $123 = $317;
  $326 = $123;
  $122 = $326;
  $327 = $122;
  $328 = (($327) + 4|0);
  $329 = $__tmp$i$i$i;
  $139 = $328;
  $140 = $329;
  $330 = $139;
  $331 = (($330) + 4|0);
  $332 = HEAP8[$331]|0;
  $333 = $332&1;
  do {
   if ($333) {
    $334 = HEAP32[$330>>2]|0;
    $335 = $140;
    $336 = (($335) + 16|0);
    $138 = $336;
    $337 = $138;
    $129 = $334;
    $130 = $337;
    $338 = $129;
    $339 = $130;
    ;HEAP8[$128+0|0]=HEAP8[$131+0|0]|0;
    $126 = $338;
    $127 = $339;
    $340 = $127;
    __THREW__ = 0;
    invoke_vi(125,($340|0));
    $341 = __THREW__; __THREW__ = 0;
    $342 = $341&1;
    if ($342) {
     $343 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $344 = tempRet0;
     $141 = $343;
     $142 = $344;
     $345 = $141;
     ___cxa_call_unexpected(($345|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $346 = $140;
  $347 = ($346|0)!=(0|0);
  if ($347) {
   $348 = HEAP32[$330>>2]|0;
   $349 = $140;
   $135 = $348;
   $136 = $349;
   $137 = 1;
   $350 = $135;
   $351 = $136;
   $352 = $137;
   $132 = $350;
   $133 = $351;
   $134 = $352;
   $353 = $133;
   __ZdlPv($353);
  }
 }
 $369 = $170;
 $370 = $171;
 ___resumeException($369|0);
 // unreachable;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($3,$4);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__lhs_sz$i$i$i$i1 = 0, $__nd = 0, $__result$i$i$i$i = 0, $__result$i$i$i$i3 = 0, $__rhs_sz$i$i$i$i = 0, $__rhs_sz$i$i$i$i2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $36 = sp;
 $39 = sp + 776|0;
 $__lhs_sz$i$i$i$i1 = sp + 244|0;
 $__rhs_sz$i$i$i$i2 = sp + 248|0;
 $80 = sp + 312|0;
 $90 = sp + 748|0;
 $124 = sp + 8|0;
 $127 = sp + 777|0;
 $__lhs_sz$i$i$i$i = sp + 600|0;
 $__rhs_sz$i$i$i$i = sp + 604|0;
 $168 = sp + 668|0;
 $185 = sp + 364|0;
 $186 = sp + 496|0;
 $187 = sp + 140|0;
 $182 = $this;
 $183 = $__parent;
 $184 = $__v;
 $188 = $182;
 $180 = $188;
 $189 = $180;
 $179 = $189;
 $190 = $179;
 $191 = (($190) + 4|0);
 $178 = $191;
 $192 = $178;
 $177 = $192;
 $193 = $177;
 $176 = $193;
 $194 = $176;
 $175 = $194;
 $195 = $175;
 $196 = HEAP32[$195>>2]|0;
 $__nd = $196;
 $197 = $__nd;
 $88 = $90;
 $89 = -1;
 $198 = $88;
 $199 = $89;
 $86 = $198;
 $87 = $199;
 $200 = $86;
 HEAP32[$200>>2] = 0;
 $201 = HEAP32[$90>>2]|0;
 HEAP32[$185>>2] = $201;
 $85 = $185;
 $202 = ($197|0)!=(0|0);
 if (!($202)) {
  $174 = $188;
  $503 = $174;
  $504 = (($503) + 4|0);
  $173 = $504;
  $505 = $173;
  $172 = $505;
  $506 = $172;
  $171 = $506;
  $507 = $171;
  $170 = $507;
  $508 = $170;
  $509 = $183;
  HEAP32[$509>>2] = $508;
  $510 = $183;
  $511 = HEAP32[$510>>2]|0;
  $181 = $511;
  $512 = $181;
  STACKTOP = sp;return ($512|0);
 }
 while(1) {
  $2 = $188;
  $203 = $2;
  $204 = (($203) + 8|0);
  $1 = $204;
  $205 = $1;
  $0 = $205;
  $206 = $0;
  $207 = $184;
  $208 = $__nd;
  $209 = (($208) + 16|0);
  $73 = $206;
  $74 = $207;
  $75 = $209;
  $210 = $73;
  $211 = $74;
  $212 = $75;
  $70 = $210;
  $71 = $211;
  $72 = $212;
  $213 = $71;
  $214 = $72;
  $68 = $213;
  $69 = $214;
  $215 = $68;
  $216 = $69;
  $64 = $215;
  $65 = $216;
  $217 = $64;
  $62 = $217;
  $218 = $62;
  $61 = $218;
  $219 = $61;
  $60 = $219;
  $220 = $60;
  $59 = $220;
  $221 = $59;
  $222 = HEAP8[$221]|0;
  $223 = $222&255;
  $224 = $223 & 1;
  $225 = ($224|0)!=(0);
  if ($225) {
   $55 = $218;
   $226 = $55;
   $54 = $226;
   $227 = $54;
   $53 = $227;
   $228 = $53;
   $229 = (($228) + 4|0);
   $230 = HEAP32[$229>>2]|0;
   $237 = $230;
  } else {
   $58 = $218;
   $231 = $58;
   $57 = $231;
   $232 = $57;
   $56 = $232;
   $233 = $56;
   $234 = HEAP8[$233]|0;
   $235 = $234&255;
   $236 = $235 >> 1;
   $237 = $236;
  }
  HEAP32[$__lhs_sz$i$i$i$i1>>2] = $237;
  $238 = $65;
  $49 = $238;
  $239 = $49;
  $48 = $239;
  $240 = $48;
  $47 = $240;
  $241 = $47;
  $46 = $241;
  $242 = $46;
  $243 = HEAP8[$242]|0;
  $244 = $243&255;
  $245 = $244 & 1;
  $246 = ($245|0)!=(0);
  if ($246) {
   $42 = $239;
   $247 = $42;
   $41 = $247;
   $248 = $41;
   $40 = $248;
   $249 = $40;
   $250 = (($249) + 4|0);
   $251 = HEAP32[$250>>2]|0;
   $258 = $251;
  } else {
   $45 = $239;
   $252 = $45;
   $44 = $252;
   $253 = $44;
   $43 = $253;
   $254 = $43;
   $255 = HEAP8[$254]|0;
   $256 = $255&255;
   $257 = $256 >> 1;
   $258 = $257;
  }
  HEAP32[$__rhs_sz$i$i$i$i2>>2] = $258;
  $16 = $217;
  $259 = $16;
  $15 = $259;
  $260 = $15;
  $14 = $260;
  $261 = $14;
  $13 = $261;
  $262 = $13;
  $12 = $262;
  $263 = $12;
  $264 = HEAP8[$263]|0;
  $265 = $264&255;
  $266 = $265 & 1;
  $267 = ($266|0)!=(0);
  if ($267) {
   $6 = $260;
   $268 = $6;
   $5 = $268;
   $269 = $5;
   $4 = $269;
   $270 = $4;
   $271 = (($270) + 8|0);
   $272 = HEAP32[$271>>2]|0;
   $279 = $272;
  } else {
   $11 = $260;
   $273 = $11;
   $10 = $273;
   $274 = $10;
   $9 = $274;
   $275 = $9;
   $276 = (($275) + 1|0);
   $8 = $276;
   $277 = $8;
   $7 = $277;
   $278 = $7;
   $279 = $278;
  }
  $3 = $279;
  $280 = $3;
  $281 = $65;
  $30 = $281;
  $282 = $30;
  $29 = $282;
  $283 = $29;
  $28 = $283;
  $284 = $28;
  $27 = $284;
  $285 = $27;
  $26 = $285;
  $286 = $26;
  $287 = HEAP8[$286]|0;
  $288 = $287&255;
  $289 = $288 & 1;
  $290 = ($289|0)!=(0);
  if ($290) {
   $20 = $283;
   $291 = $20;
   $19 = $291;
   $292 = $19;
   $18 = $292;
   $293 = $18;
   $294 = (($293) + 8|0);
   $295 = HEAP32[$294>>2]|0;
   $302 = $295;
  } else {
   $25 = $283;
   $296 = $25;
   $24 = $296;
   $297 = $24;
   $23 = $297;
   $298 = $23;
   $299 = (($298) + 1|0);
   $22 = $299;
   $300 = $22;
   $21 = $300;
   $301 = $21;
   $302 = $301;
  }
  $17 = $302;
  $303 = $17;
  $37 = $__lhs_sz$i$i$i$i1;
  $38 = $__rhs_sz$i$i$i$i2;
  $304 = $37;
  $305 = $38;
  ;HEAP8[$36+0|0]=HEAP8[$39+0|0]|0;
  $34 = $304;
  $35 = $305;
  $306 = $35;
  $307 = $34;
  $31 = $36;
  $32 = $306;
  $33 = $307;
  $308 = $32;
  $309 = HEAP32[$308>>2]|0;
  $310 = $33;
  $311 = HEAP32[$310>>2]|0;
  $312 = ($309>>>0)<($311>>>0);
  if ($312) {
   $313 = $35;
   $316 = $313;
  } else {
   $314 = $34;
   $316 = $314;
  }
  $315 = HEAP32[$316>>2]|0;
  $50 = $280;
  $51 = $303;
  $52 = $315;
  $317 = $50;
  $318 = $51;
  $319 = $52;
  __THREW__ = 0;
  $320 = (invoke_iiii(23,($317|0),($318|0),($319|0))|0);
  $321 = __THREW__; __THREW__ = 0;
  $322 = $321&1;
  if ($322) {
   label = 21;
   break;
  }
  $__result$i$i$i$i3 = $320;
  $323 = $__result$i$i$i$i3;
  $324 = ($323|0)!=(0);
  do {
   if ($324) {
    $325 = $__result$i$i$i$i3;
    $63 = $325;
   } else {
    $329 = HEAP32[$__lhs_sz$i$i$i$i1>>2]|0;
    $330 = HEAP32[$__rhs_sz$i$i$i$i2>>2]|0;
    $331 = ($329>>>0)<($330>>>0);
    if ($331) {
     $63 = -1;
     break;
    }
    $332 = HEAP32[$__lhs_sz$i$i$i$i1>>2]|0;
    $333 = HEAP32[$__rhs_sz$i$i$i$i2>>2]|0;
    $334 = ($332>>>0)>($333>>>0);
    if ($334) {
     $63 = 1;
     break;
    } else {
     $63 = 0;
     break;
    }
   }
  } while(0);
  $335 = $63;
  $336 = ($335|0)<(0);
  if ($336) {
   $337 = $__nd;
   $338 = HEAP32[$337>>2]|0;
   $78 = $80;
   $79 = -1;
   $339 = $78;
   $340 = $79;
   $76 = $339;
   $77 = $340;
   $341 = $76;
   HEAP32[$341>>2] = 0;
   $342 = HEAP32[$80>>2]|0;
   HEAP32[$186>>2] = $342;
   $81 = $186;
   $343 = ($338|0)!=(0|0);
   if (!($343)) {
    label = 30;
    break;
   }
   $344 = $__nd;
   $345 = HEAP32[$344>>2]|0;
   $__nd = $345;
  } else {
   $84 = $188;
   $350 = $84;
   $351 = (($350) + 8|0);
   $83 = $351;
   $352 = $83;
   $82 = $352;
   $353 = $82;
   $354 = $__nd;
   $355 = (($354) + 16|0);
   $356 = $184;
   $161 = $353;
   $162 = $355;
   $163 = $356;
   $357 = $161;
   $358 = $162;
   $359 = $163;
   $158 = $357;
   $159 = $358;
   $160 = $359;
   $360 = $159;
   $361 = $160;
   $156 = $360;
   $157 = $361;
   $362 = $156;
   $363 = $157;
   $152 = $362;
   $153 = $363;
   $364 = $152;
   $150 = $364;
   $365 = $150;
   $149 = $365;
   $366 = $149;
   $148 = $366;
   $367 = $148;
   $147 = $367;
   $368 = $147;
   $369 = HEAP8[$368]|0;
   $370 = $369&255;
   $371 = $370 & 1;
   $372 = ($371|0)!=(0);
   if ($372) {
    $143 = $365;
    $373 = $143;
    $142 = $373;
    $374 = $142;
    $141 = $374;
    $375 = $141;
    $376 = (($375) + 4|0);
    $377 = HEAP32[$376>>2]|0;
    $384 = $377;
   } else {
    $146 = $365;
    $378 = $146;
    $145 = $378;
    $379 = $145;
    $144 = $379;
    $380 = $144;
    $381 = HEAP8[$380]|0;
    $382 = $381&255;
    $383 = $382 >> 1;
    $384 = $383;
   }
   HEAP32[$__lhs_sz$i$i$i$i>>2] = $384;
   $385 = $153;
   $137 = $385;
   $386 = $137;
   $136 = $386;
   $387 = $136;
   $135 = $387;
   $388 = $135;
   $134 = $388;
   $389 = $134;
   $390 = HEAP8[$389]|0;
   $391 = $390&255;
   $392 = $391 & 1;
   $393 = ($392|0)!=(0);
   if ($393) {
    $130 = $386;
    $394 = $130;
    $129 = $394;
    $395 = $129;
    $128 = $395;
    $396 = $128;
    $397 = (($396) + 4|0);
    $398 = HEAP32[$397>>2]|0;
    $405 = $398;
   } else {
    $133 = $386;
    $399 = $133;
    $132 = $399;
    $400 = $132;
    $131 = $400;
    $401 = $131;
    $402 = HEAP8[$401]|0;
    $403 = $402&255;
    $404 = $403 >> 1;
    $405 = $404;
   }
   HEAP32[$__rhs_sz$i$i$i$i>>2] = $405;
   $104 = $364;
   $406 = $104;
   $103 = $406;
   $407 = $103;
   $102 = $407;
   $408 = $102;
   $101 = $408;
   $409 = $101;
   $100 = $409;
   $410 = $100;
   $411 = HEAP8[$410]|0;
   $412 = $411&255;
   $413 = $412 & 1;
   $414 = ($413|0)!=(0);
   if ($414) {
    $94 = $407;
    $415 = $94;
    $93 = $415;
    $416 = $93;
    $92 = $416;
    $417 = $92;
    $418 = (($417) + 8|0);
    $419 = HEAP32[$418>>2]|0;
    $426 = $419;
   } else {
    $99 = $407;
    $420 = $99;
    $98 = $420;
    $421 = $98;
    $97 = $421;
    $422 = $97;
    $423 = (($422) + 1|0);
    $96 = $423;
    $424 = $96;
    $95 = $424;
    $425 = $95;
    $426 = $425;
   }
   $91 = $426;
   $427 = $91;
   $428 = $153;
   $118 = $428;
   $429 = $118;
   $117 = $429;
   $430 = $117;
   $116 = $430;
   $431 = $116;
   $115 = $431;
   $432 = $115;
   $114 = $432;
   $433 = $114;
   $434 = HEAP8[$433]|0;
   $435 = $434&255;
   $436 = $435 & 1;
   $437 = ($436|0)!=(0);
   if ($437) {
    $108 = $430;
    $438 = $108;
    $107 = $438;
    $439 = $107;
    $106 = $439;
    $440 = $106;
    $441 = (($440) + 8|0);
    $442 = HEAP32[$441>>2]|0;
    $449 = $442;
   } else {
    $113 = $430;
    $443 = $113;
    $112 = $443;
    $444 = $112;
    $111 = $444;
    $445 = $111;
    $446 = (($445) + 1|0);
    $110 = $446;
    $447 = $110;
    $109 = $447;
    $448 = $109;
    $449 = $448;
   }
   $105 = $449;
   $450 = $105;
   $125 = $__lhs_sz$i$i$i$i;
   $126 = $__rhs_sz$i$i$i$i;
   $451 = $125;
   $452 = $126;
   ;HEAP8[$124+0|0]=HEAP8[$127+0|0]|0;
   $122 = $451;
   $123 = $452;
   $453 = $123;
   $454 = $122;
   $119 = $124;
   $120 = $453;
   $121 = $454;
   $455 = $120;
   $456 = HEAP32[$455>>2]|0;
   $457 = $121;
   $458 = HEAP32[$457>>2]|0;
   $459 = ($456>>>0)<($458>>>0);
   if ($459) {
    $460 = $123;
    $463 = $460;
   } else {
    $461 = $122;
    $463 = $461;
   }
   $462 = HEAP32[$463>>2]|0;
   $138 = $427;
   $139 = $450;
   $140 = $462;
   $464 = $138;
   $465 = $139;
   $466 = $140;
   __THREW__ = 0;
   $467 = (invoke_iiii(23,($464|0),($465|0),($466|0))|0);
   $468 = __THREW__; __THREW__ = 0;
   $469 = $468&1;
   if ($469) {
    label = 50;
    break;
   }
   $__result$i$i$i$i = $467;
   $470 = $__result$i$i$i$i;
   $471 = ($470|0)!=(0);
   do {
    if ($471) {
     $472 = $__result$i$i$i$i;
     $151 = $472;
    } else {
     $476 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
     $477 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
     $478 = ($476>>>0)<($477>>>0);
     if ($478) {
      $151 = -1;
      break;
     }
     $479 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
     $480 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
     $481 = ($479>>>0)>($480>>>0);
     if ($481) {
      $151 = 1;
      break;
     } else {
      $151 = 0;
      break;
     }
    }
   } while(0);
   $482 = $151;
   $483 = ($482|0)<(0);
   if (!($483)) {
    label = 61;
    break;
   }
   $484 = $__nd;
   $485 = (($484) + 4|0);
   $486 = HEAP32[$485>>2]|0;
   $166 = $168;
   $167 = -1;
   $487 = $166;
   $488 = $167;
   $164 = $487;
   $165 = $488;
   $489 = $164;
   HEAP32[$489>>2] = 0;
   $490 = HEAP32[$168>>2]|0;
   HEAP32[$187>>2] = $490;
   $169 = $187;
   $491 = ($486|0)!=(0|0);
   if (!($491)) {
    label = 59;
    break;
   }
   $492 = $__nd;
   $493 = (($492) + 4|0);
   $494 = HEAP32[$493>>2]|0;
   $__nd = $494;
  }
 }
 if ((label|0) == 21) {
  $326 = ___cxa_find_matching_catch(-1,-1)|0;
  $327 = tempRet0;
  $66 = $326;
  $67 = $327;
  $328 = $66;
  ___cxa_call_unexpected(($328|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  $346 = $__nd;
  $347 = $183;
  HEAP32[$347>>2] = $346;
  $348 = $183;
  $349 = HEAP32[$348>>2]|0;
  $181 = $349;
  $512 = $181;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 50) {
  $473 = ___cxa_find_matching_catch(-1,-1)|0;
  $474 = tempRet0;
  $154 = $473;
  $155 = $474;
  $475 = $154;
  ___cxa_call_unexpected(($475|0));
  // unreachable;
 }
 else if ((label|0) == 59) {
  $495 = $__nd;
  $496 = $183;
  HEAP32[$496>>2] = $495;
  $497 = $183;
  $498 = HEAP32[$497>>2]|0;
  $499 = (($498) + 4|0);
  $181 = $499;
  $512 = $181;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 61) {
  $500 = $__nd;
  $501 = $183;
  HEAP32[$501>>2] = $500;
  $502 = $183;
  $181 = $502;
  $512 = $181;
  STACKTOP = sp;return ($512|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__d1$i = 0, $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t$i$i$i$i = 0, $__t$i$i$i4$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i$i = 0, $__t21$i$i$i17 = 0, $__t21$i$i$i5$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i15$i = 0, $__tmp$i$i$i2 = 0, $__tmp$i$i$i26 = 0, $__tmp$i$i$i32 = 0, $__u1$i = 0, $__u1$i$i = 0, $__u1$i6$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1408|0;
 $6 = sp + 72|0;
 $9 = sp + 1392|0;
 $33 = sp + 184|0;
 $36 = sp + 1393|0;
 $68 = sp + 652|0;
 $69 = sp + 40|0;
 $72 = sp + 616|0;
 $73 = sp + 608|0;
 $__t21$i$i$i17 = sp + 8|0;
 $76 = sp + 152|0;
 $79 = sp + 416|0;
 $__u1$i = sp + 24|0;
 $81 = sp + 88|0;
 $93 = sp + 112|0;
 $96 = sp + 1394|0;
 $128 = sp + 824|0;
 $129 = sp + 16|0;
 $132 = sp + 708|0;
 $133 = sp + 696|0;
 $__t21$i$i$i5$i = sp + 136|0;
 $136 = sp + 120|0;
 $139 = sp + 1360|0;
 $__u1$i6$i = sp + 56|0;
 $141 = sp + 64|0;
 $161 = sp + 796|0;
 $162 = sp + 32|0;
 $165 = sp + 808|0;
 $166 = sp + 816|0;
 $__t21$i$i$i$i = sp + 168|0;
 $169 = sp + 128|0;
 $172 = sp + 856|0;
 $__u1$i$i = sp + 144|0;
 $174 = sp + 96|0;
 $180 = sp + 896|0;
 $181 = sp + 900|0;
 $182 = sp + 912|0;
 $195 = sp + 48|0;
 $198 = sp + 1395|0;
 $225 = sp + 1092|0;
 $226 = sp;
 $229 = sp + 1104|0;
 $230 = sp + 1112|0;
 $__t21$i$i$i = sp + 80|0;
 $233 = sp + 176|0;
 $236 = sp + 1152|0;
 $237 = sp + 1328|0;
 $__d1$i = sp + 104|0;
 $240 = sp + 192|0;
 $247 = sp + 160|0;
 $250 = sp + 1396|0;
 $__h = sp + 220|0;
 $282 = sp + 872|0;
 $285 = sp + 492|0;
 $286 = sp + 620|0;
 $280 = $this;
 $281 = $__v;
 $288 = $280;
 $279 = $288;
 $289 = $279;
 $290 = (($289) + 4|0);
 $278 = $290;
 $291 = $278;
 $277 = $291;
 $292 = $277;
 $__na = $292;
 $293 = $__na;
 $275 = $293;
 $276 = 1;
 $294 = $275;
 $295 = $276;
 $272 = $294;
 $273 = $295;
 $274 = 0;
 $296 = $273;
 $297 = $296<<5;
 $298 = (__Znwj($297)|0);
 $299 = $__na;
 $270 = $282;
 $271 = $299;
 $300 = $270;
 $301 = $271;
 $268 = $300;
 $269 = $301;
 $302 = $268;
 $303 = $269;
 HEAP32[$302>>2] = $303;
 $304 = (($302) + 4|0);
 HEAP8[$304] = 0;
 ;HEAP8[$240+0|0]=HEAP8[$282+0|0]|0;HEAP8[$240+1|0]=HEAP8[$282+1|0]|0;HEAP8[$240+2|0]=HEAP8[$282+2|0]|0;HEAP8[$240+3|0]=HEAP8[$282+3|0]|0;HEAP8[$240+4|0]=HEAP8[$282+4|0]|0;HEAP8[$240+5|0]=HEAP8[$282+5|0]|0;HEAP8[$240+6|0]=HEAP8[$282+6|0]|0;HEAP8[$240+7|0]=HEAP8[$282+7|0]|0;
 $238 = $__h;
 $239 = $298;
 $305 = $238;
 $306 = $239;
 ;HEAP8[$__d1$i+0|0]=HEAP8[$240+0|0]|0;HEAP8[$__d1$i+1|0]=HEAP8[$240+1|0]|0;HEAP8[$__d1$i+2|0]=HEAP8[$240+2|0]|0;HEAP8[$__d1$i+3|0]=HEAP8[$240+3|0]|0;HEAP8[$__d1$i+4|0]=HEAP8[$240+4|0]|0;HEAP8[$__d1$i+5|0]=HEAP8[$240+5|0]|0;HEAP8[$__d1$i+6|0]=HEAP8[$240+6|0]|0;HEAP8[$__d1$i+7|0]=HEAP8[$240+7|0]|0;
 $235 = $305;
 HEAP32[$236>>2] = $306;
 $307 = $235;
 $234 = $236;
 $308 = $234;
 $309 = HEAP32[$308>>2]|0;
 $220 = $__d1$i;
 $310 = $220;
 ;HEAP32[$237+0>>2]=HEAP32[$310+0>>2]|0;HEAP32[$237+4>>2]=HEAP32[$310+4>>2]|0;
 ;HEAP8[$233+0|0]=HEAP8[$237+0|0]|0;HEAP8[$233+1|0]=HEAP8[$237+1|0]|0;HEAP8[$233+2|0]=HEAP8[$237+2|0]|0;HEAP8[$233+3|0]=HEAP8[$237+3|0]|0;HEAP8[$233+4|0]=HEAP8[$237+4|0]|0;HEAP8[$233+5|0]=HEAP8[$237+5|0]|0;HEAP8[$233+6|0]=HEAP8[$237+6|0]|0;HEAP8[$233+7|0]=HEAP8[$237+7|0]|0;
 $231 = $307;
 $232 = $309;
 $311 = $231;
 $312 = $232;
 ;HEAP8[$__t21$i$i$i+0|0]=HEAP8[$233+0|0]|0;HEAP8[$__t21$i$i$i+1|0]=HEAP8[$233+1|0]|0;HEAP8[$__t21$i$i$i+2|0]=HEAP8[$233+2|0]|0;HEAP8[$__t21$i$i$i+3|0]=HEAP8[$233+3|0]|0;HEAP8[$__t21$i$i$i+4|0]=HEAP8[$233+4|0]|0;HEAP8[$__t21$i$i$i+5|0]=HEAP8[$233+5|0]|0;HEAP8[$__t21$i$i$i+6|0]=HEAP8[$233+6|0]|0;HEAP8[$__t21$i$i$i+7|0]=HEAP8[$233+7|0]|0;
 $228 = $311;
 HEAP32[$229>>2] = $312;
 $313 = $228;
 $227 = $229;
 $314 = $227;
 $315 = HEAP32[$314>>2]|0;
 $221 = $__t21$i$i$i;
 $316 = $221;
 ;HEAP32[$230+0>>2]=HEAP32[$316+0>>2]|0;HEAP32[$230+4>>2]=HEAP32[$316+4>>2]|0;
 ;HEAP8[$226+0|0]=HEAP8[$230+0|0]|0;HEAP8[$226+1|0]=HEAP8[$230+1|0]|0;HEAP8[$226+2|0]=HEAP8[$230+2|0]|0;HEAP8[$226+3|0]=HEAP8[$230+3|0]|0;HEAP8[$226+4|0]=HEAP8[$230+4|0]|0;HEAP8[$226+5|0]=HEAP8[$230+5|0]|0;HEAP8[$226+6|0]=HEAP8[$230+6|0]|0;HEAP8[$226+7|0]=HEAP8[$230+7|0]|0;
 $224 = $313;
 HEAP32[$225>>2] = $315;
 $317 = $224;
 $223 = $225;
 $318 = $223;
 $319 = HEAP32[$318>>2]|0;
 HEAP32[$317>>2] = $319;
 $320 = (($317) + 4|0);
 $222 = $226;
 $321 = $222;
 ;HEAP32[$320+0>>2]=HEAP32[$321+0>>2]|0;HEAP32[$320+4>>2]=HEAP32[$321+4>>2]|0;
 $322 = $__na;
 $219 = $__h;
 $323 = $219;
 $218 = $323;
 $324 = $218;
 $217 = $324;
 $325 = $217;
 $326 = HEAP32[$325>>2]|0;
 $327 = (($326) + 16|0);
 $216 = $327;
 $328 = $216;
 $329 = $281;
 $186 = $322;
 $187 = $328;
 $188 = $329;
 $330 = $187;
 $331 = ($330|0)==(0|0);
 do {
  if (!($331)) {
   $332 = $188;
   __THREW__ = 0;
   invoke_vii(48,($330|0),($332|0));
   $333 = __THREW__; __THREW__ = 0;
   $334 = $333&1;
   if (!($334)) {
    break;
   }
   $559 = ___cxa_find_matching_catch(-1,-1)|0;
   $560 = tempRet0;
   $283 = $559;
   $284 = $560;
   $267 = $__h;
   $561 = $267;
   $266 = $561;
   $562 = $266;
   $264 = $562;
   $265 = 0;
   $563 = $264;
   $263 = $563;
   $564 = $263;
   $262 = $564;
   $565 = $262;
   $566 = HEAP32[$565>>2]|0;
   $__tmp$i$i$i = $566;
   $567 = $265;
   $244 = $563;
   $568 = $244;
   $243 = $568;
   $569 = $243;
   HEAP32[$569>>2] = $567;
   $570 = $__tmp$i$i$i;
   $571 = ($570|0)!=(0|0);
   if ($571) {
    $242 = $563;
    $572 = $242;
    $241 = $572;
    $573 = $241;
    $574 = (($573) + 4|0);
    $575 = $__tmp$i$i$i;
    $258 = $574;
    $259 = $575;
    $576 = $258;
    $577 = (($576) + 4|0);
    $578 = HEAP8[$577]|0;
    $579 = $578&1;
    do {
     if ($579) {
      $580 = HEAP32[$576>>2]|0;
      $581 = $259;
      $582 = (($581) + 16|0);
      $257 = $582;
      $583 = $257;
      $248 = $580;
      $249 = $583;
      $584 = $248;
      $585 = $249;
      ;HEAP8[$247+0|0]=HEAP8[$250+0|0]|0;
      $245 = $584;
      $246 = $585;
      $586 = $246;
      __THREW__ = 0;
      invoke_vi(125,($586|0));
      $587 = __THREW__; __THREW__ = 0;
      $588 = $587&1;
      if ($588) {
       $589 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $590 = tempRet0;
       $260 = $589;
       $261 = $590;
       $591 = $260;
       ___cxa_call_unexpected(($591|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $592 = $259;
    $593 = ($592|0)!=(0|0);
    if ($593) {
     $594 = HEAP32[$576>>2]|0;
     $595 = $259;
     $254 = $594;
     $255 = $595;
     $256 = 1;
     $596 = $254;
     $597 = $255;
     $598 = $256;
     $251 = $596;
     $252 = $597;
     $253 = $598;
     $599 = $252;
     __ZdlPv($599);
    }
   }
   $600 = $283;
   $601 = $284;
   ___resumeException($600|0);
   // unreachable;
  }
 } while(0);
 $185 = $__h;
 $335 = $185;
 $184 = $335;
 $336 = $184;
 $183 = $336;
 $337 = $183;
 $338 = (($337) + 4|0);
 $339 = (($338) + 4|0);
 HEAP8[$339] = 1;
 $179 = $__h;
 $340 = $179;
 $177 = $182;
 $178 = $340;
 $341 = $177;
 $342 = $178;
 $175 = $341;
 $176 = $342;
 $343 = $175;
 $344 = $176;
 HEAP32[$343>>2] = $344;
 ;HEAP8[$174+0|0]=HEAP8[$182+0|0]|0;HEAP8[$174+1|0]=HEAP8[$182+1|0]|0;HEAP8[$174+2|0]=HEAP8[$182+2|0]|0;HEAP8[$174+3|0]=HEAP8[$182+3|0]|0;
 $173 = $181;
 $345 = $173;
 ;HEAP8[$__u1$i$i+0|0]=HEAP8[$174+0|0]|0;HEAP8[$__u1$i$i+1|0]=HEAP8[$174+1|0]|0;HEAP8[$__u1$i$i+2|0]=HEAP8[$174+2|0]|0;HEAP8[$__u1$i$i+3|0]=HEAP8[$174+3|0]|0;
 $171 = $345;
 $346 = $171;
 $170 = $__u1$i$i;
 $347 = $170;
 $348 = HEAP32[$347>>2]|0;
 $151 = $348;
 $349 = $151;
 $150 = $349;
 $350 = $150;
 $149 = $350;
 $351 = $149;
 $352 = HEAP32[$351>>2]|0;
 $__t$i$i$i$i = $352;
 $148 = $349;
 $353 = $148;
 $147 = $353;
 $354 = $147;
 HEAP32[$354>>2] = 0;
 $355 = $__t$i$i$i$i;
 $152 = $__u1$i$i;
 $356 = $152;
 $357 = HEAP32[$356>>2]|0;
 $155 = $357;
 $358 = $155;
 $154 = $358;
 $359 = $154;
 $153 = $359;
 $360 = $153;
 $361 = (($360) + 4|0);
 $156 = $361;
 $362 = $156;
 ;HEAP32[$172+0>>2]=HEAP32[$362+0>>2]|0;HEAP32[$172+4>>2]=HEAP32[$362+4>>2]|0;
 ;HEAP8[$169+0|0]=HEAP8[$172+0|0]|0;HEAP8[$169+1|0]=HEAP8[$172+1|0]|0;HEAP8[$169+2|0]=HEAP8[$172+2|0]|0;HEAP8[$169+3|0]=HEAP8[$172+3|0]|0;HEAP8[$169+4|0]=HEAP8[$172+4|0]|0;HEAP8[$169+5|0]=HEAP8[$172+5|0]|0;HEAP8[$169+6|0]=HEAP8[$172+6|0]|0;HEAP8[$169+7|0]=HEAP8[$172+7|0]|0;
 $167 = $346;
 $168 = $355;
 $363 = $167;
 $364 = $168;
 ;HEAP8[$__t21$i$i$i$i+0|0]=HEAP8[$169+0|0]|0;HEAP8[$__t21$i$i$i$i+1|0]=HEAP8[$169+1|0]|0;HEAP8[$__t21$i$i$i$i+2|0]=HEAP8[$169+2|0]|0;HEAP8[$__t21$i$i$i$i+3|0]=HEAP8[$169+3|0]|0;HEAP8[$__t21$i$i$i$i+4|0]=HEAP8[$169+4|0]|0;HEAP8[$__t21$i$i$i$i+5|0]=HEAP8[$169+5|0]|0;HEAP8[$__t21$i$i$i$i+6|0]=HEAP8[$169+6|0]|0;HEAP8[$__t21$i$i$i$i+7|0]=HEAP8[$169+7|0]|0;
 $164 = $363;
 HEAP32[$165>>2] = $364;
 $365 = $164;
 $163 = $165;
 $366 = $163;
 $367 = HEAP32[$366>>2]|0;
 $157 = $__t21$i$i$i$i;
 $368 = $157;
 ;HEAP32[$166+0>>2]=HEAP32[$368+0>>2]|0;HEAP32[$166+4>>2]=HEAP32[$368+4>>2]|0;
 ;HEAP8[$162+0|0]=HEAP8[$166+0|0]|0;HEAP8[$162+1|0]=HEAP8[$166+1|0]|0;HEAP8[$162+2|0]=HEAP8[$166+2|0]|0;HEAP8[$162+3|0]=HEAP8[$166+3|0]|0;HEAP8[$162+4|0]=HEAP8[$166+4|0]|0;HEAP8[$162+5|0]=HEAP8[$166+5|0]|0;HEAP8[$162+6|0]=HEAP8[$166+6|0]|0;HEAP8[$162+7|0]=HEAP8[$166+7|0]|0;
 $160 = $365;
 HEAP32[$161>>2] = $367;
 $369 = $160;
 $159 = $161;
 $370 = $159;
 $371 = HEAP32[$370>>2]|0;
 HEAP32[$369>>2] = $371;
 $372 = (($369) + 4|0);
 $158 = $162;
 $373 = $158;
 ;HEAP32[$372+0>>2]=HEAP32[$373+0>>2]|0;HEAP32[$372+4>>2]=HEAP32[$373+4>>2]|0;
 $146 = $181;
 $374 = $146;
 $144 = $180;
 $145 = $374;
 $375 = $144;
 $376 = $145;
 $142 = $375;
 $143 = $376;
 $377 = $142;
 $378 = $143;
 HEAP32[$377>>2] = $378;
 ;HEAP8[$141+0|0]=HEAP8[$180+0|0]|0;HEAP8[$141+1|0]=HEAP8[$180+1|0]|0;HEAP8[$141+2|0]=HEAP8[$180+2|0]|0;HEAP8[$141+3|0]=HEAP8[$180+3|0]|0;
 $140 = $286;
 $379 = $140;
 ;HEAP8[$__u1$i6$i+0|0]=HEAP8[$141+0|0]|0;HEAP8[$__u1$i6$i+1|0]=HEAP8[$141+1|0]|0;HEAP8[$__u1$i6$i+2|0]=HEAP8[$141+2|0]|0;HEAP8[$__u1$i6$i+3|0]=HEAP8[$141+3|0]|0;
 $138 = $379;
 $380 = $138;
 $137 = $__u1$i6$i;
 $381 = $137;
 $382 = HEAP32[$381>>2]|0;
 $118 = $382;
 $383 = $118;
 $117 = $383;
 $384 = $117;
 $116 = $384;
 $385 = $116;
 $386 = HEAP32[$385>>2]|0;
 $__t$i$i$i4$i = $386;
 $115 = $383;
 $387 = $115;
 $114 = $387;
 $388 = $114;
 HEAP32[$388>>2] = 0;
 $389 = $__t$i$i$i4$i;
 $119 = $__u1$i6$i;
 $390 = $119;
 $391 = HEAP32[$390>>2]|0;
 $122 = $391;
 $392 = $122;
 $121 = $392;
 $393 = $121;
 $120 = $393;
 $394 = $120;
 $395 = (($394) + 4|0);
 $123 = $395;
 $396 = $123;
 ;HEAP32[$139+0>>2]=HEAP32[$396+0>>2]|0;HEAP32[$139+4>>2]=HEAP32[$396+4>>2]|0;
 ;HEAP8[$136+0|0]=HEAP8[$139+0|0]|0;HEAP8[$136+1|0]=HEAP8[$139+1|0]|0;HEAP8[$136+2|0]=HEAP8[$139+2|0]|0;HEAP8[$136+3|0]=HEAP8[$139+3|0]|0;HEAP8[$136+4|0]=HEAP8[$139+4|0]|0;HEAP8[$136+5|0]=HEAP8[$139+5|0]|0;HEAP8[$136+6|0]=HEAP8[$139+6|0]|0;HEAP8[$136+7|0]=HEAP8[$139+7|0]|0;
 $134 = $380;
 $135 = $389;
 $397 = $134;
 $398 = $135;
 ;HEAP8[$__t21$i$i$i5$i+0|0]=HEAP8[$136+0|0]|0;HEAP8[$__t21$i$i$i5$i+1|0]=HEAP8[$136+1|0]|0;HEAP8[$__t21$i$i$i5$i+2|0]=HEAP8[$136+2|0]|0;HEAP8[$__t21$i$i$i5$i+3|0]=HEAP8[$136+3|0]|0;HEAP8[$__t21$i$i$i5$i+4|0]=HEAP8[$136+4|0]|0;HEAP8[$__t21$i$i$i5$i+5|0]=HEAP8[$136+5|0]|0;HEAP8[$__t21$i$i$i5$i+6|0]=HEAP8[$136+6|0]|0;HEAP8[$__t21$i$i$i5$i+7|0]=HEAP8[$136+7|0]|0;
 $131 = $397;
 HEAP32[$132>>2] = $398;
 $399 = $131;
 $130 = $132;
 $400 = $130;
 $401 = HEAP32[$400>>2]|0;
 $124 = $__t21$i$i$i5$i;
 $402 = $124;
 ;HEAP32[$133+0>>2]=HEAP32[$402+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$402+4>>2]|0;
 ;HEAP8[$129+0|0]=HEAP8[$133+0|0]|0;HEAP8[$129+1|0]=HEAP8[$133+1|0]|0;HEAP8[$129+2|0]=HEAP8[$133+2|0]|0;HEAP8[$129+3|0]=HEAP8[$133+3|0]|0;HEAP8[$129+4|0]=HEAP8[$133+4|0]|0;HEAP8[$129+5|0]=HEAP8[$133+5|0]|0;HEAP8[$129+6|0]=HEAP8[$133+6|0]|0;HEAP8[$129+7|0]=HEAP8[$133+7|0]|0;
 $127 = $399;
 HEAP32[$128>>2] = $401;
 $403 = $127;
 $126 = $128;
 $404 = $126;
 $405 = HEAP32[$404>>2]|0;
 HEAP32[$403>>2] = $405;
 $406 = (($403) + 4|0);
 $125 = $129;
 $407 = $125;
 ;HEAP32[$406+0>>2]=HEAP32[$407+0>>2]|0;HEAP32[$406+4>>2]=HEAP32[$407+4>>2]|0;
 $113 = $181;
 $408 = $113;
 $112 = $408;
 $409 = $112;
 $110 = $409;
 $111 = 0;
 $410 = $110;
 $109 = $410;
 $411 = $109;
 $108 = $411;
 $412 = $108;
 $413 = HEAP32[$412>>2]|0;
 $__tmp$i$i$i15$i = $413;
 $414 = $111;
 $90 = $410;
 $415 = $90;
 $89 = $415;
 $416 = $89;
 HEAP32[$416>>2] = $414;
 $417 = $__tmp$i$i$i15$i;
 $418 = ($417|0)!=(0|0);
 if ($418) {
  $88 = $410;
  $419 = $88;
  $87 = $419;
  $420 = $87;
  $421 = (($420) + 4|0);
  $422 = $__tmp$i$i$i15$i;
  $104 = $421;
  $105 = $422;
  $423 = $104;
  $424 = (($423) + 4|0);
  $425 = HEAP8[$424]|0;
  $426 = $425&1;
  do {
   if ($426) {
    $427 = HEAP32[$423>>2]|0;
    $428 = $105;
    $429 = (($428) + 16|0);
    $103 = $429;
    $430 = $103;
    $94 = $427;
    $95 = $430;
    $431 = $94;
    $432 = $95;
    ;HEAP8[$93+0|0]=HEAP8[$96+0|0]|0;
    $91 = $431;
    $92 = $432;
    $433 = $92;
    __THREW__ = 0;
    invoke_vi(125,($433|0));
    $434 = __THREW__; __THREW__ = 0;
    $435 = $434&1;
    if ($435) {
     $436 = ___cxa_find_matching_catch(-1,-1)|0;
     $437 = tempRet0;
     $106 = $436;
     $107 = $437;
     $438 = $106;
     ___cxa_call_unexpected(($438|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $439 = $105;
  $440 = ($439|0)!=(0|0);
  if ($440) {
   $441 = HEAP32[$423>>2]|0;
   $442 = $105;
   $100 = $441;
   $101 = $442;
   $102 = 1;
   $443 = $100;
   $444 = $101;
   $445 = $102;
   $97 = $443;
   $98 = $444;
   $99 = $445;
   $446 = $98;
   __ZdlPv($446);
  }
 }
 $86 = $286;
 $447 = $86;
 $84 = $285;
 $85 = $447;
 $448 = $84;
 $449 = $85;
 $82 = $448;
 $83 = $449;
 $450 = $82;
 $451 = $83;
 HEAP32[$450>>2] = $451;
 ;HEAP8[$81+0|0]=HEAP8[$285+0|0]|0;HEAP8[$81+1|0]=HEAP8[$285+1|0]|0;HEAP8[$81+2|0]=HEAP8[$285+2|0]|0;HEAP8[$81+3|0]=HEAP8[$285+3|0]|0;
 $80 = $agg$result;
 $452 = $80;
 ;HEAP8[$__u1$i+0|0]=HEAP8[$81+0|0]|0;HEAP8[$__u1$i+1|0]=HEAP8[$81+1|0]|0;HEAP8[$__u1$i+2|0]=HEAP8[$81+2|0]|0;HEAP8[$__u1$i+3|0]=HEAP8[$81+3|0]|0;
 $78 = $452;
 $453 = $78;
 $77 = $__u1$i;
 $454 = $77;
 $455 = HEAP32[$454>>2]|0;
 $58 = $455;
 $456 = $58;
 $57 = $456;
 $457 = $57;
 $56 = $457;
 $458 = $56;
 $459 = HEAP32[$458>>2]|0;
 $__t$i$i$i = $459;
 $55 = $456;
 $460 = $55;
 $54 = $460;
 $461 = $54;
 HEAP32[$461>>2] = 0;
 $462 = $__t$i$i$i;
 $59 = $__u1$i;
 $463 = $59;
 $464 = HEAP32[$463>>2]|0;
 $62 = $464;
 $465 = $62;
 $61 = $465;
 $466 = $61;
 $60 = $466;
 $467 = $60;
 $468 = (($467) + 4|0);
 $63 = $468;
 $469 = $63;
 ;HEAP32[$79+0>>2]=HEAP32[$469+0>>2]|0;HEAP32[$79+4>>2]=HEAP32[$469+4>>2]|0;
 ;HEAP8[$76+0|0]=HEAP8[$79+0|0]|0;HEAP8[$76+1|0]=HEAP8[$79+1|0]|0;HEAP8[$76+2|0]=HEAP8[$79+2|0]|0;HEAP8[$76+3|0]=HEAP8[$79+3|0]|0;HEAP8[$76+4|0]=HEAP8[$79+4|0]|0;HEAP8[$76+5|0]=HEAP8[$79+5|0]|0;HEAP8[$76+6|0]=HEAP8[$79+6|0]|0;HEAP8[$76+7|0]=HEAP8[$79+7|0]|0;
 $74 = $453;
 $75 = $462;
 $470 = $74;
 $471 = $75;
 ;HEAP8[$__t21$i$i$i17+0|0]=HEAP8[$76+0|0]|0;HEAP8[$__t21$i$i$i17+1|0]=HEAP8[$76+1|0]|0;HEAP8[$__t21$i$i$i17+2|0]=HEAP8[$76+2|0]|0;HEAP8[$__t21$i$i$i17+3|0]=HEAP8[$76+3|0]|0;HEAP8[$__t21$i$i$i17+4|0]=HEAP8[$76+4|0]|0;HEAP8[$__t21$i$i$i17+5|0]=HEAP8[$76+5|0]|0;HEAP8[$__t21$i$i$i17+6|0]=HEAP8[$76+6|0]|0;HEAP8[$__t21$i$i$i17+7|0]=HEAP8[$76+7|0]|0;
 $71 = $470;
 HEAP32[$72>>2] = $471;
 $472 = $71;
 $70 = $72;
 $473 = $70;
 $474 = HEAP32[$473>>2]|0;
 $64 = $__t21$i$i$i17;
 $475 = $64;
 ;HEAP32[$73+0>>2]=HEAP32[$475+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$475+4>>2]|0;
 ;HEAP8[$69+0|0]=HEAP8[$73+0|0]|0;HEAP8[$69+1|0]=HEAP8[$73+1|0]|0;HEAP8[$69+2|0]=HEAP8[$73+2|0]|0;HEAP8[$69+3|0]=HEAP8[$73+3|0]|0;HEAP8[$69+4|0]=HEAP8[$73+4|0]|0;HEAP8[$69+5|0]=HEAP8[$73+5|0]|0;HEAP8[$69+6|0]=HEAP8[$73+6|0]|0;HEAP8[$69+7|0]=HEAP8[$73+7|0]|0;
 $67 = $472;
 HEAP32[$68>>2] = $474;
 $476 = $67;
 $66 = $68;
 $477 = $66;
 $478 = HEAP32[$477>>2]|0;
 HEAP32[$476>>2] = $478;
 $479 = (($476) + 4|0);
 $65 = $69;
 $480 = $65;
 ;HEAP32[$479+0>>2]=HEAP32[$480+0>>2]|0;HEAP32[$479+4>>2]=HEAP32[$480+4>>2]|0;
 $53 = $286;
 $481 = $53;
 $52 = $481;
 $482 = $52;
 $50 = $482;
 $51 = 0;
 $483 = $50;
 $49 = $483;
 $484 = $49;
 $48 = $484;
 $485 = $48;
 $486 = HEAP32[$485>>2]|0;
 $__tmp$i$i$i26 = $486;
 $487 = $51;
 $30 = $483;
 $488 = $30;
 $29 = $488;
 $489 = $29;
 HEAP32[$489>>2] = $487;
 $490 = $__tmp$i$i$i26;
 $491 = ($490|0)!=(0|0);
 if ($491) {
  $28 = $483;
  $492 = $28;
  $27 = $492;
  $493 = $27;
  $494 = (($493) + 4|0);
  $495 = $__tmp$i$i$i26;
  $44 = $494;
  $45 = $495;
  $496 = $44;
  $497 = (($496) + 4|0);
  $498 = HEAP8[$497]|0;
  $499 = $498&1;
  do {
   if ($499) {
    $500 = HEAP32[$496>>2]|0;
    $501 = $45;
    $502 = (($501) + 16|0);
    $43 = $502;
    $503 = $43;
    $34 = $500;
    $35 = $503;
    $504 = $34;
    $505 = $35;
    ;HEAP8[$33+0|0]=HEAP8[$36+0|0]|0;
    $31 = $504;
    $32 = $505;
    $506 = $32;
    __THREW__ = 0;
    invoke_vi(125,($506|0));
    $507 = __THREW__; __THREW__ = 0;
    $508 = $507&1;
    if ($508) {
     $509 = ___cxa_find_matching_catch(-1,-1)|0;
     $510 = tempRet0;
     $46 = $509;
     $47 = $510;
     $511 = $46;
     ___cxa_call_unexpected(($511|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $512 = $45;
  $513 = ($512|0)!=(0|0);
  if ($513) {
   $514 = HEAP32[$496>>2]|0;
   $515 = $45;
   $40 = $514;
   $41 = $515;
   $42 = 1;
   $516 = $40;
   $517 = $41;
   $518 = $42;
   $37 = $516;
   $38 = $517;
   $39 = $518;
   $519 = $38;
   __ZdlPv($519);
  }
 }
 $287 = 1;
 $26 = $__h;
 $520 = $26;
 $25 = $520;
 $521 = $25;
 $23 = $521;
 $24 = 0;
 $522 = $23;
 $22 = $522;
 $523 = $22;
 $21 = $523;
 $524 = $21;
 $525 = HEAP32[$524>>2]|0;
 $__tmp$i$i$i32 = $525;
 $526 = $24;
 $3 = $522;
 $527 = $3;
 $2 = $527;
 $528 = $2;
 HEAP32[$528>>2] = $526;
 $529 = $__tmp$i$i$i32;
 $530 = ($529|0)!=(0|0);
 if (!($530)) {
  STACKTOP = sp;return;
 }
 $1 = $522;
 $531 = $1;
 $0 = $531;
 $532 = $0;
 $533 = (($532) + 4|0);
 $534 = $__tmp$i$i$i32;
 $17 = $533;
 $18 = $534;
 $535 = $17;
 $536 = (($535) + 4|0);
 $537 = HEAP8[$536]|0;
 $538 = $537&1;
 do {
  if ($538) {
   $539 = HEAP32[$535>>2]|0;
   $540 = $18;
   $541 = (($540) + 16|0);
   $16 = $541;
   $542 = $16;
   $7 = $539;
   $8 = $542;
   $543 = $7;
   $544 = $8;
   ;HEAP8[$6+0|0]=HEAP8[$9+0|0]|0;
   $4 = $543;
   $5 = $544;
   $545 = $5;
   __THREW__ = 0;
   invoke_vi(125,($545|0));
   $546 = __THREW__; __THREW__ = 0;
   $547 = $546&1;
   if ($547) {
    $548 = ___cxa_find_matching_catch(-1,-1)|0;
    $549 = tempRet0;
    $19 = $548;
    $20 = $549;
    $550 = $19;
    ___cxa_call_unexpected(($550|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $551 = $18;
 $552 = ($551|0)!=(0|0);
 if ($552) {
  $553 = HEAP32[$535>>2]|0;
  $554 = $18;
  $13 = $553;
  $14 = $554;
  $15 = 1;
  $555 = $13;
  $556 = $14;
  $557 = $15;
  $10 = $555;
  $11 = $556;
  $12 = $557;
  $558 = $11;
  __ZdlPv($558);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $4 = sp + 132|0;
 $11 = sp + 28|0;
 $28 = sp + 92|0;
 $33 = sp + 44|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $29 = $this;
 $30 = $__parent;
 $31 = $__child;
 $32 = $__new_node;
 $36 = $29;
 $26 = $28;
 $27 = -1;
 $37 = $26;
 $38 = $27;
 $24 = $37;
 $25 = $38;
 $39 = $24;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$28>>2]|0;
 HEAP32[$33>>2] = $40;
 $20 = $33;
 $41 = $32;
 HEAP32[$41>>2] = 0;
 $2 = $4;
 $3 = -1;
 $42 = $2;
 $43 = $3;
 $0 = $42;
 $1 = $43;
 $44 = $0;
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$4>>2]|0;
 HEAP32[$34>>2] = $45;
 $5 = $34;
 $46 = $32;
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $30;
 $49 = $32;
 $50 = (($49) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $32;
 $52 = $31;
 HEAP32[$52>>2] = $51;
 $6 = $36;
 $53 = $6;
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $9 = $11;
 $10 = -1;
 $56 = $9;
 $57 = $10;
 $7 = $56;
 $8 = $57;
 $58 = $7;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$11>>2]|0;
 HEAP32[$35>>2] = $59;
 $12 = $35;
 $60 = ($55|0)!=(0|0);
 if ($60) {
  $13 = $36;
  $61 = $13;
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $14 = $36;
  $64 = $14;
  HEAP32[$64>>2] = $63;
 }
 $19 = $36;
 $65 = $19;
 $66 = (($65) + 4|0);
 $18 = $66;
 $67 = $18;
 $17 = $67;
 $68 = $17;
 $16 = $68;
 $69 = $16;
 $15 = $69;
 $70 = $15;
 $71 = HEAP32[$70>>2]|0;
 $72 = $31;
 $73 = HEAP32[$72>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($71,$73);
 $23 = $36;
 $74 = $23;
 $75 = (($74) + 8|0);
 $22 = $75;
 $76 = $22;
 $21 = $76;
 $77 = $21;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[$77>>2] = $79;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $5 = sp + 8|0;
 $13 = sp + 36|0;
 $19 = sp + 20|0;
 $20 = sp + 24|0;
 $15 = $__root;
 $16 = $__x;
 $21 = $16;
 $22 = $15;
 $23 = ($21|0)==($22|0);
 $24 = $16;
 $25 = (($24) + 12|0);
 $26 = $23&1;
 HEAP8[$25] = $26;
 while(1) {
  $27 = $16;
  $28 = $15;
  $29 = ($27|0)!=($28|0);
  if ($29) {
   $30 = $16;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 12|0);
   $34 = HEAP8[$33]|0;
   $35 = $34&1;
   $36 = $35 ^ 1;
   $155 = $36;
  } else {
   $155 = 0;
  }
  if (!($155)) {
   label = 25;
   break;
  }
  $37 = $16;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $14 = $39;
  $40 = $14;
  $41 = $14;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = ($40|0)==($44|0);
  if ($45) {
   $46 = $16;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $__y = $52;
   $53 = $__y;
   $11 = $13;
   $12 = -1;
   $54 = $11;
   $55 = $12;
   $9 = $54;
   $10 = $55;
   $56 = $9;
   HEAP32[$56>>2] = 0;
   $57 = HEAP32[$13>>2]|0;
   HEAP32[$19>>2] = $57;
   $8 = $19;
   $58 = ($53|0)!=(0|0);
   if (!($58)) {
    label = 11;
    break;
   }
   $59 = $__y;
   $60 = (($59) + 12|0);
   $61 = HEAP8[$60]|0;
   $62 = $61&1;
   if ($62) {
    label = 11;
    break;
   }
   $63 = $16;
   $64 = (($63) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $16 = $65;
   $66 = $16;
   $67 = (($66) + 12|0);
   HEAP8[$67] = 1;
   $68 = $16;
   $69 = (($68) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $16 = $70;
   $71 = $16;
   $72 = $15;
   $73 = ($71|0)==($72|0);
   $74 = $16;
   $75 = (($74) + 12|0);
   $76 = $73&1;
   HEAP8[$75] = $76;
   $77 = $__y;
   $78 = (($77) + 12|0);
   HEAP8[$78] = 1;
  } else {
   $101 = $16;
   $102 = (($101) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$105>>2]|0;
   $__y1 = $106;
   $107 = $__y1;
   $3 = $5;
   $4 = -1;
   $108 = $3;
   $109 = $4;
   $1 = $108;
   $2 = $109;
   $110 = $1;
   HEAP32[$110>>2] = 0;
   $111 = HEAP32[$5>>2]|0;
   HEAP32[$20>>2] = $111;
   $6 = $20;
   $112 = ($107|0)!=(0|0);
   if (!($112)) {
    label = 20;
    break;
   }
   $113 = $__y1;
   $114 = (($113) + 12|0);
   $115 = HEAP8[$114]|0;
   $116 = $115&1;
   if ($116) {
    label = 20;
    break;
   }
   $117 = $16;
   $118 = (($117) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $16 = $119;
   $120 = $16;
   $121 = (($120) + 12|0);
   HEAP8[$121] = 1;
   $122 = $16;
   $123 = (($122) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $16 = $124;
   $125 = $16;
   $126 = $15;
   $127 = ($125|0)==($126|0);
   $128 = $16;
   $129 = (($128) + 12|0);
   $130 = $127&1;
   HEAP8[$129] = $130;
   $131 = $__y1;
   $132 = (($131) + 12|0);
   HEAP8[$132] = 1;
  }
 }
 if ((label|0) == 11) {
  $79 = $16;
  $0 = $79;
  $80 = $0;
  $81 = $0;
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  $85 = ($80|0)==($84|0);
  if (!($85)) {
   $86 = $16;
   $87 = (($86) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $16 = $88;
   $89 = $16;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($89);
  }
  $90 = $16;
  $91 = (($90) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $16 = $92;
  $93 = $16;
  $94 = (($93) + 12|0);
  HEAP8[$94] = 1;
  $95 = $16;
  $96 = (($95) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $16 = $97;
  $98 = $16;
  $99 = (($98) + 12|0);
  HEAP8[$99] = 0;
  $100 = $16;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($100);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $133 = $16;
  $7 = $133;
  $134 = $7;
  $135 = $7;
  $136 = (($135) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = HEAP32[$137>>2]|0;
  $139 = ($134|0)==($138|0);
  if ($139) {
   $140 = $16;
   $141 = (($140) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $16 = $142;
   $143 = $16;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($143);
  }
  $144 = $16;
  $145 = (($144) + 8|0);
  $146 = HEAP32[$145>>2]|0;
  $16 = $146;
  $147 = $16;
  $148 = (($147) + 12|0);
  HEAP8[$148] = 1;
  $149 = $16;
  $150 = (($149) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $16 = $151;
  $152 = $16;
  $153 = (($152) + 12|0);
  HEAP8[$153] = 0;
  $154 = $16;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($154);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = sp + 44|0;
 $10 = sp + 28|0;
 $7 = $__x;
 $11 = $7;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $__y = $13;
 $14 = $__y;
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $7;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $4 = $6;
 $5 = -1;
 $21 = $4;
 $22 = $5;
 $2 = $21;
 $3 = $22;
 $23 = $2;
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = $24;
 $0 = $10;
 $25 = ($20|0)!=(0|0);
 if ($25) {
  $26 = $7;
  $27 = $7;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  HEAP32[$30>>2] = $26;
 }
 $31 = $7;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $__y;
 $35 = (($34) + 8|0);
 HEAP32[$35>>2] = $33;
 $36 = $7;
 $1 = $36;
 $37 = $1;
 $38 = $1;
 $39 = (($38) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($37|0)==($41|0);
 if ($42) {
  $43 = $__y;
  $44 = $7;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$46>>2] = $43;
  $52 = $7;
  $53 = $__y;
  HEAP32[$53>>2] = $52;
  $54 = $__y;
  $55 = $7;
  $56 = (($55) + 8|0);
  HEAP32[$56>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $47 = $__y;
  $48 = $7;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $47;
  $52 = $7;
  $53 = $__y;
  HEAP32[$53>>2] = $52;
  $54 = $__y;
  $55 = $7;
  $56 = (($55) + 8|0);
  HEAP32[$56>>2] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $6 = sp + 44|0;
 $10 = sp + 28|0;
 $7 = $__x;
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $__y = $12;
 $13 = $__y;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 HEAP32[$16>>2] = $15;
 $17 = $7;
 $18 = HEAP32[$17>>2]|0;
 $4 = $6;
 $5 = -1;
 $19 = $4;
 $20 = $5;
 $2 = $19;
 $3 = $20;
 $21 = $2;
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$6>>2]|0;
 HEAP32[$10>>2] = $22;
 $0 = $10;
 $23 = ($18|0)!=(0|0);
 if ($23) {
  $24 = $7;
  $25 = $7;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 8|0);
  HEAP32[$27>>2] = $24;
 }
 $28 = $7;
 $29 = (($28) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $__y;
 $32 = (($31) + 8|0);
 HEAP32[$32>>2] = $30;
 $33 = $7;
 $1 = $33;
 $34 = $1;
 $35 = $1;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 $39 = ($34|0)==($38|0);
 if ($39) {
  $40 = $__y;
  $41 = $7;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$43>>2] = $40;
  $49 = $7;
  $50 = $__y;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $__y;
  $53 = $7;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  STACKTOP = sp;return;
 } else {
  $44 = $__y;
  $45 = $7;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $44;
  $49 = $7;
  $50 = $__y;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $__y;
  $53 = $7;
  $54 = (($53) + 8|0);
  HEAP32[$54>>2] = $52;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN4JSUID2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 $4 = (8 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 __THREW__ = 0;
 invoke_vi(129,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN2UID2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch(-1,-1)|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(124,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $6 = sp;
 $9 = sp + 108|0;
 $21 = sp + 72|0;
 $26 = sp + 12|0;
 $22 = $this;
 $23 = $__nd;
 $27 = $22;
 $28 = $23;
 $19 = $21;
 $20 = -1;
 $29 = $19;
 $30 = $20;
 $17 = $29;
 $18 = $30;
 $31 = $17;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$21>>2]|0;
 HEAP32[$26>>2] = $32;
 $16 = $26;
 $33 = ($28|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($27,$35);
 $36 = $23;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($27,$38);
 $3 = $27;
 $39 = $3;
 $40 = (($39) + 4|0);
 $2 = $40;
 $41 = $2;
 $1 = $41;
 $42 = $1;
 $__na = $42;
 $43 = $__na;
 $44 = $23;
 $45 = (($44) + 16|0);
 $0 = $45;
 $46 = $0;
 $7 = $43;
 $8 = $46;
 $47 = $7;
 $48 = $8;
 ;HEAP8[$6+0|0]=HEAP8[$9+0|0]|0;
 $4 = $47;
 $5 = $48;
 $49 = $5;
 __THREW__ = 0;
 invoke_vi(125,($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $58 = ___cxa_find_matching_catch(-1,-1)|0;
  $59 = tempRet0;
  $24 = $58;
  $25 = $59;
  $60 = $24;
  ___cxa_call_unexpected(($60|0));
  // unreachable;
 }
 $52 = $__na;
 $53 = $23;
 $13 = $52;
 $14 = $53;
 $15 = 1;
 $54 = $13;
 $55 = $14;
 $56 = $15;
 $10 = $54;
 $11 = $55;
 $12 = $56;
 $57 = $11;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $__comp;
 $2 = $0;
 $3 = $1;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($2,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t21$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 24|0;
 $5 = sp;
 $8 = sp + 44|0;
 $9 = sp + 117|0;
 $__t21$i = sp + 8|0;
 $12 = sp + 16|0;
 $27 = sp + 116|0;
 $25 = $this;
 $26 = $__comp;
 $28 = $25;
 $29 = (($28) + 4|0);
 $24 = $29;
 $30 = $24;
 $23 = $30;
 $31 = $23;
 $22 = $31;
 $32 = $22;
 $21 = $32;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 HEAP32[$34>>2] = 0;
 $35 = (($28) + 8|0);
 ;HEAP8[$12+0|0]=HEAP8[$27+0|0]|0;
 $10 = $35;
 $11 = 0;
 $36 = $10;
 $37 = $11;
 ;HEAP8[$__t21$i+0|0]=HEAP8[$12+0|0]|0;
 $7 = $36;
 HEAP32[$8>>2] = $37;
 $38 = $7;
 $6 = $8;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $0 = $__t21$i;
 ;HEAP8[$5+0|0]=HEAP8[$9+0|0]|0;
 $3 = $38;
 HEAP32[$4>>2] = $40;
 $41 = $3;
 $2 = $5;
 $1 = $4;
 $42 = $1;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $17 = $28;
 $44 = $17;
 $45 = (($44) + 4|0);
 $16 = $45;
 $46 = $16;
 $15 = $46;
 $47 = $15;
 $14 = $47;
 $48 = $14;
 $13 = $48;
 $49 = $13;
 $18 = $28;
 $50 = $18;
 HEAP32[$50>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN2UID1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN2UID2Ev($1);
 STACKTOP = sp;return;
}
function __ZN2UID0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(4,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN2UI7declareEPfPKcS2_($this,$0,$1,$2) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = $this;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN14ReverbDesignerC2Ev($1);
 $2 = (176 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN3dspC2Ev($1);
 $2 = (2064 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN19ReverbDesigner_wrapD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(6,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN14ReverbDesigner12getNumInputsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZN14ReverbDesigner13getNumOutputsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZN14ReverbDesigner18buildUserInterfaceEP2UI($this,$interface) {
 $this = $this|0;
 $interface = $interface|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $interface;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$6 & 63]($3,312);
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiii[$10 & 15]($7,0,328,336);
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 63]($11,392);
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_viiii[$18 & 15]($15,0,448,456);
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_vii[$22 & 63]($19,464);
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($2) + 156|0);
 FUNCTION_TABLE_viiii[$26 & 15]($23,$27,496,456);
 $28 = $1;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 52|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($2) + 156|0);
 FUNCTION_TABLE_viiii[$31 & 15]($28,$32,328,504);
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($2) + 156|0);
 FUNCTION_TABLE_viiii[$36 & 15]($33,$37,608,616);
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($2) + 156|0);
 FUNCTION_TABLE_viiidddd[$41 & 3]($38,624,$42,500.0,100.0,1.0E+4,1.0);
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + 52|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($2) + 140|0);
 FUNCTION_TABLE_viiii[$46 & 15]($43,$47,448,456);
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 52|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($2) + 140|0);
 FUNCTION_TABLE_viiii[$51 & 15]($48,$52,328,504);
 $53 = $1;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($2) + 140|0);
 FUNCTION_TABLE_viiii[$56 & 15]($53,$57,608,616);
 $58 = $1;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($2) + 140|0);
 FUNCTION_TABLE_viiidddd[$61 & 3]($58,648,$62,1000.0,100.0,1.0E+4,1.0);
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 52|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($2) + 124|0);
 FUNCTION_TABLE_viiii[$66 & 15]($63,$67,672,456);
 $68 = $1;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 52|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($2) + 124|0);
 FUNCTION_TABLE_viiii[$71 & 15]($68,$72,328,504);
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 52|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($2) + 124|0);
 FUNCTION_TABLE_viiii[$76 & 15]($73,$77,608,616);
 $78 = $1;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 36|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($2) + 124|0);
 FUNCTION_TABLE_viiidddd[$81 & 3]($78,680,$82,2000.0,100.0,1.0E+4,1.0);
 $83 = $1;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 52|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = (($2) + 100|0);
 FUNCTION_TABLE_viiii[$86 & 15]($83,$87,704,456);
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 52|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($2) + 100|0);
 FUNCTION_TABLE_viiii[$91 & 15]($88,$92,328,504);
 $93 = $1;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 52|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($2) + 100|0);
 FUNCTION_TABLE_viiii[$96 & 15]($93,$97,608,616);
 $98 = $1;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 36|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($2) + 100|0);
 FUNCTION_TABLE_viiidddd[$101 & 3]($98,712,$102,4000.0,100.0,1.0E+4,1.0);
 $103 = $1;
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 20|0);
 $106 = HEAP32[$105>>2]|0;
 FUNCTION_TABLE_vi[$106 & 255]($103);
 $107 = $1;
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 52|0);
 $110 = HEAP32[$109>>2]|0;
 FUNCTION_TABLE_viiii[$110 & 15]($107,0,672,456);
 $111 = $1;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 FUNCTION_TABLE_vii[$114 & 63]($111,736);
 $115 = $1;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 52|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($2) + 364|0);
 FUNCTION_TABLE_viiii[$118 & 15]($115,$119,496,456);
 $120 = $1;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + 52|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($2) + 364|0);
 FUNCTION_TABLE_viiii[$123 & 15]($120,$124,328,760);
 $125 = $1;
 $126 = HEAP32[$125>>2]|0;
 $127 = (($126) + 52|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($2) + 364|0);
 FUNCTION_TABLE_viiii[$128 & 15]($125,$129,608,1056);
 $130 = $1;
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 32|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($2) + 364|0);
 FUNCTION_TABLE_viiidddd[$133 & 3]($130,496,$134,8.3999996185302734375,0.100000001490116119385,10.0,0.100000001490116119385);
 $135 = $1;
 $136 = HEAP32[$135>>2]|0;
 $137 = (($136) + 52|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($2) + 312|0);
 FUNCTION_TABLE_viiii[$138 & 15]($135,$139,448,456);
 $140 = $1;
 $141 = HEAP32[$140>>2]|0;
 $142 = (($141) + 52|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($2) + 312|0);
 FUNCTION_TABLE_viiii[$143 & 15]($140,$144,328,760);
 $145 = $1;
 $146 = HEAP32[$145>>2]|0;
 $147 = (($146) + 52|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($2) + 312|0);
 FUNCTION_TABLE_viiii[$148 & 15]($145,$149,608,1056);
 $150 = $1;
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) + 32|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($2) + 312|0);
 FUNCTION_TABLE_viiidddd[$153 & 3]($150,448,$154,6.5,0.100000001490116119385,10.0,0.100000001490116119385);
 $155 = $1;
 $156 = HEAP32[$155>>2]|0;
 $157 = (($156) + 52|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($2) + 248|0);
 FUNCTION_TABLE_viiii[$158 & 15]($155,$159,672,456);
 $160 = $1;
 $161 = HEAP32[$160>>2]|0;
 $162 = (($161) + 52|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (($2) + 248|0);
 FUNCTION_TABLE_viiii[$163 & 15]($160,$164,328,760);
 $165 = $1;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($166) + 52|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($2) + 248|0);
 FUNCTION_TABLE_viiii[$168 & 15]($165,$169,608,1056);
 $170 = $1;
 $171 = HEAP32[$170>>2]|0;
 $172 = (($171) + 32|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($2) + 248|0);
 FUNCTION_TABLE_viiidddd[$173 & 3]($170,672,$174,5.0,0.100000001490116119385,10.0,0.100000001490116119385);
 $175 = $1;
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + 52|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($2) + 172|0);
 FUNCTION_TABLE_viiii[$178 & 15]($175,$179,704,456);
 $180 = $1;
 $181 = HEAP32[$180>>2]|0;
 $182 = (($181) + 52|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (($2) + 172|0);
 FUNCTION_TABLE_viiii[$183 & 15]($180,$184,328,760);
 $185 = $1;
 $186 = HEAP32[$185>>2]|0;
 $187 = (($186) + 52|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($2) + 172|0);
 FUNCTION_TABLE_viiii[$188 & 15]($185,$189,608,1056);
 $190 = $1;
 $191 = HEAP32[$190>>2]|0;
 $192 = (($191) + 32|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($2) + 172|0);
 FUNCTION_TABLE_viiidddd[$193 & 3]($190,704,$194,3.79999995231628417969,0.100000001490116119385,10.0,0.100000001490116119385);
 $195 = $1;
 $196 = HEAP32[$195>>2]|0;
 $197 = (($196) + 52|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($2) + 92|0);
 FUNCTION_TABLE_viiii[$198 & 15]($195,$199,1064,456);
 $200 = $1;
 $201 = HEAP32[$200>>2]|0;
 $202 = (($201) + 52|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = (($2) + 92|0);
 FUNCTION_TABLE_viiii[$203 & 15]($200,$204,328,760);
 $205 = $1;
 $206 = HEAP32[$205>>2]|0;
 $207 = (($206) + 52|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (($2) + 92|0);
 FUNCTION_TABLE_viiii[$208 & 15]($205,$209,608,1056);
 $210 = $1;
 $211 = HEAP32[$210>>2]|0;
 $212 = (($211) + 32|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (($2) + 92|0);
 FUNCTION_TABLE_viiidddd[$213 & 3]($210,1064,$214,2.70000004768371582031,0.100000001490116119385,10.0,0.100000001490116119385);
 $215 = $1;
 $216 = HEAP32[$215>>2]|0;
 $217 = (($216) + 20|0);
 $218 = HEAP32[$217>>2]|0;
 FUNCTION_TABLE_vi[$218 & 255]($215);
 $219 = $1;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($220) + 52|0);
 $222 = HEAP32[$221>>2]|0;
 FUNCTION_TABLE_viiii[$222 & 15]($219,0,704,456);
 $223 = $1;
 $224 = HEAP32[$223>>2]|0;
 $225 = (($224) + 16|0);
 $226 = HEAP32[$225>>2]|0;
 FUNCTION_TABLE_vii[$226 & 63]($223,1072);
 $227 = $1;
 $228 = HEAP32[$227>>2]|0;
 $229 = (($228) + 52|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = (($2) + 84|0);
 FUNCTION_TABLE_viiii[$230 & 15]($227,$231,448,456);
 $232 = $1;
 $233 = HEAP32[$232>>2]|0;
 $234 = (($233) + 52|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = (($2) + 84|0);
 FUNCTION_TABLE_viiii[$235 & 15]($232,$236,328,1088);
 $237 = $1;
 $238 = HEAP32[$237>>2]|0;
 $239 = (($238) + 52|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = (($2) + 84|0);
 FUNCTION_TABLE_viiii[$240 & 15]($237,$241,608,1256);
 $242 = $1;
 $243 = HEAP32[$242>>2]|0;
 $244 = (($243) + 36|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = (($2) + 84|0);
 FUNCTION_TABLE_viiidddd[$245 & 3]($242,1264,$246,46.0,0.100000001490116119385,63.0,0.100000001490116119385);
 $247 = $1;
 $248 = HEAP32[$247>>2]|0;
 $249 = (($248) + 52|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($2) + 88|0);
 FUNCTION_TABLE_viiii[$250 & 15]($247,$251,672,456);
 $252 = $1;
 $253 = HEAP32[$252>>2]|0;
 $254 = (($253) + 52|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = (($2) + 88|0);
 FUNCTION_TABLE_viiii[$255 & 15]($252,$256,328,1288);
 $257 = $1;
 $258 = HEAP32[$257>>2]|0;
 $259 = (($258) + 52|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = (($2) + 88|0);
 FUNCTION_TABLE_viiii[$260 & 15]($257,$261,608,1256);
 $262 = $1;
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 36|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = (($2) + 88|0);
 FUNCTION_TABLE_viiidddd[$265 & 3]($262,1456,$266,63.0,0.100000001490116119385,63.0,0.100000001490116119385);
 $267 = $1;
 $268 = HEAP32[$267>>2]|0;
 $269 = (($268) + 20|0);
 $270 = HEAP32[$269>>2]|0;
 FUNCTION_TABLE_vi[$270 & 255]($267);
 $271 = $1;
 $272 = HEAP32[$271>>2]|0;
 $273 = (($272) + 52|0);
 $274 = HEAP32[$273>>2]|0;
 FUNCTION_TABLE_viiii[$274 & 15]($271,0,1064,456);
 $275 = $1;
 $276 = HEAP32[$275>>2]|0;
 $277 = (($276) + 12|0);
 $278 = HEAP32[$277>>2]|0;
 FUNCTION_TABLE_vii[$278 & 63]($275,1480);
 $279 = $1;
 $280 = HEAP32[$279>>2]|0;
 $281 = (($280) + 52|0);
 $282 = HEAP32[$281>>2]|0;
 FUNCTION_TABLE_viiii[$282 & 15]($279,0,448,456);
 $283 = $1;
 $284 = HEAP32[$283>>2]|0;
 $285 = (($284) + 16|0);
 $286 = HEAP32[$285>>2]|0;
 FUNCTION_TABLE_vii[$286 & 63]($283,1496);
 $287 = $1;
 $288 = HEAP32[$287>>2]|0;
 $289 = (($288) + 52|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = (($2) + 52|0);
 FUNCTION_TABLE_viiii[$290 & 15]($287,$291,448,456);
 $292 = $1;
 $293 = HEAP32[$292>>2]|0;
 $294 = (($293) + 52|0);
 $295 = HEAP32[$294>>2]|0;
 $296 = (($2) + 52|0);
 FUNCTION_TABLE_viiii[$295 & 15]($292,$296,328,1512);
 $297 = $1;
 $298 = HEAP32[$297>>2]|0;
 $299 = (($298) + 28|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = (($2) + 52|0);
 FUNCTION_TABLE_viii[$300 & 15]($297,1656,$301);
 $302 = $1;
 $303 = HEAP32[$302>>2]|0;
 $304 = (($303) + 52|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = (($2) + 12|0);
 FUNCTION_TABLE_viiii[$305 & 15]($302,$306,672,456);
 $307 = $1;
 $308 = HEAP32[$307>>2]|0;
 $309 = (($308) + 52|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = (($2) + 12|0);
 FUNCTION_TABLE_viiii[$310 & 15]($307,$311,328,1672);
 $312 = $1;
 $313 = HEAP32[$312>>2]|0;
 $314 = (($313) + 28|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (($2) + 12|0);
 FUNCTION_TABLE_viii[$315 & 15]($312,1760,$316);
 $317 = $1;
 $318 = HEAP32[$317>>2]|0;
 $319 = (($318) + 20|0);
 $320 = HEAP32[$319>>2]|0;
 FUNCTION_TABLE_vi[$320 & 255]($317);
 $321 = $1;
 $322 = HEAP32[$321>>2]|0;
 $323 = (($322) + 52|0);
 $324 = HEAP32[$323>>2]|0;
 FUNCTION_TABLE_viiii[$324 & 15]($321,0,672,456);
 $325 = $1;
 $326 = HEAP32[$325>>2]|0;
 $327 = (($326) + 12|0);
 $328 = HEAP32[$327>>2]|0;
 FUNCTION_TABLE_vii[$328 & 63]($325,1776);
 $329 = $1;
 $330 = HEAP32[$329>>2]|0;
 $331 = (($330) + 52|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = (($2) + 56|0);
 FUNCTION_TABLE_viiii[$332 & 15]($329,$333,448,456);
 $334 = $1;
 $335 = HEAP32[$334>>2]|0;
 $336 = (($335) + 52|0);
 $337 = HEAP32[$336>>2]|0;
 $338 = (($2) + 56|0);
 FUNCTION_TABLE_viiii[$337 & 15]($334,$338,328,1800);
 $339 = $1;
 $340 = HEAP32[$339>>2]|0;
 $341 = (($340) + 24|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = (($2) + 56|0);
 FUNCTION_TABLE_viii[$342 & 15]($339,1832,$343);
 $344 = $1;
 $345 = HEAP32[$344>>2]|0;
 $346 = (($345) + 52|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = (($2) + 40|0);
 FUNCTION_TABLE_viiii[$347 & 15]($344,$348,672,456);
 $349 = $1;
 $350 = HEAP32[$349>>2]|0;
 $351 = (($350) + 52|0);
 $352 = HEAP32[$351>>2]|0;
 $353 = (($2) + 40|0);
 FUNCTION_TABLE_viiii[$352 & 15]($349,$353,328,1840);
 $354 = $1;
 $355 = HEAP32[$354>>2]|0;
 $356 = (($355) + 24|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = (($2) + 40|0);
 FUNCTION_TABLE_viii[$357 & 15]($354,1888,$358);
 $359 = $1;
 $360 = HEAP32[$359>>2]|0;
 $361 = (($360) + 52|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = (($2) + 37012|0);
 FUNCTION_TABLE_viiii[$362 & 15]($359,$363,704,456);
 $364 = $1;
 $365 = HEAP32[$364>>2]|0;
 $366 = (($365) + 52|0);
 $367 = HEAP32[$366>>2]|0;
 $368 = (($2) + 37012|0);
 FUNCTION_TABLE_viiii[$367 & 15]($364,$368,328,1896);
 $369 = $1;
 $370 = HEAP32[$369>>2]|0;
 $371 = (($370) + 24|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = (($2) + 37012|0);
 FUNCTION_TABLE_viii[$372 & 15]($369,1928,$373);
 $374 = $1;
 $375 = HEAP32[$374>>2]|0;
 $376 = (($375) + 20|0);
 $377 = HEAP32[$376>>2]|0;
 FUNCTION_TABLE_vi[$377 & 255]($374);
 $378 = $1;
 $379 = HEAP32[$378>>2]|0;
 $380 = (($379) + 52|0);
 $381 = HEAP32[$380>>2]|0;
 FUNCTION_TABLE_viiii[$381 & 15]($378,0,704,456);
 $382 = $1;
 $383 = HEAP32[$382>>2]|0;
 $384 = (($383) + 16|0);
 $385 = HEAP32[$384>>2]|0;
 FUNCTION_TABLE_vii[$385 & 63]($382,1936);
 $386 = $1;
 $387 = HEAP32[$386>>2]|0;
 $388 = (($387) + 52|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = (($2) + 68|0);
 FUNCTION_TABLE_viiii[$389 & 15]($386,$390,448,456);
 $391 = $1;
 $392 = HEAP32[$391>>2]|0;
 $393 = (($392) + 52|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = (($2) + 68|0);
 FUNCTION_TABLE_viiii[$394 & 15]($391,$395,328,1952);
 $396 = $1;
 $397 = HEAP32[$396>>2]|0;
 $398 = (($397) + 24|0);
 $399 = HEAP32[$398>>2]|0;
 $400 = (($2) + 68|0);
 FUNCTION_TABLE_viii[$399 & 15]($396,2000,$400);
 $401 = $1;
 $402 = HEAP32[$401>>2]|0;
 $403 = (($402) + 20|0);
 $404 = HEAP32[$403>>2]|0;
 FUNCTION_TABLE_vi[$404 & 255]($401);
 $405 = $1;
 $406 = HEAP32[$405>>2]|0;
 $407 = (($406) + 20|0);
 $408 = HEAP32[$407>>2]|0;
 FUNCTION_TABLE_vi[$408 & 255]($405);
 $409 = $1;
 $410 = HEAP32[$409>>2]|0;
 $411 = (($410) + 20|0);
 $412 = HEAP32[$411>>2]|0;
 FUNCTION_TABLE_vi[$412 & 255]($409);
 $413 = $1;
 $414 = HEAP32[$413>>2]|0;
 $415 = (($414) + 52|0);
 $416 = HEAP32[$415>>2]|0;
 $417 = (($2) + 8|0);
 FUNCTION_TABLE_viiii[$416 & 15]($413,$417,704,456);
 $418 = $1;
 $419 = HEAP32[$418>>2]|0;
 $420 = (($419) + 52|0);
 $421 = HEAP32[$420>>2]|0;
 $422 = (($2) + 8|0);
 FUNCTION_TABLE_viiii[$421 & 15]($418,$422,328,2008);
 $423 = $1;
 $424 = HEAP32[$423>>2]|0;
 $425 = (($424) + 52|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = (($2) + 8|0);
 FUNCTION_TABLE_viiii[$426 & 15]($423,$427,608,2032);
 $428 = $1;
 $429 = HEAP32[$428>>2]|0;
 $430 = (($429) + 36|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = (($2) + 8|0);
 FUNCTION_TABLE_viiidddd[$431 & 3]($428,2040,$432,-40.0,-70.0,20.0,0.100000001490116119385);
 $433 = $1;
 $434 = HEAP32[$433>>2]|0;
 $435 = (($434) + 20|0);
 $436 = HEAP32[$435>>2]|0;
 FUNCTION_TABLE_vi[$436 & 255]($433);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner4initEi($this,$samplingFreq) {
 $this = $this|0;
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $samplingFreq;
 $2 = $0;
 $3 = $1;
 __ZN14ReverbDesigner9classInitEi($3);
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 FUNCTION_TABLE_vii[$6 & 63]($2,$7);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner7computeEiPPfS1_($this,$count,$input,$output) {
 $this = $this|0;
 $count = $count|0;
 $input = $input|0;
 $output = $output|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $1000 = 0.0, $10000 = 0, $10001 = 0.0, $10002 = 0.0, $10003 = 0.0, $10004 = 0.0, $10005 = 0.0, $10006 = 0, $10007 = 0, $10008 = 0.0, $10009 = 0.0, $1001 = 0.0, $10010 = 0.0, $10011 = 0, $10012 = 0, $10013 = 0.0;
 var $10014 = 0.0, $10015 = 0.0, $10016 = 0, $10017 = 0, $10018 = 0.0, $10019 = 0.0, $1002 = 0.0, $10020 = 0.0, $10021 = 0.0, $10022 = 0.0, $10023 = 0, $10024 = 0.0, $10025 = 0, $10026 = 0, $10027 = 0.0, $10028 = 0.0, $10029 = 0.0, $1003 = 0.0, $10030 = 0.0, $10031 = 0;
 var $10032 = 0.0, $10033 = 0.0, $10034 = 0.0, $10035 = 0, $10036 = 0, $10037 = 0.0, $10038 = 0.0, $10039 = 0.0, $1004 = 0.0, $10040 = 0.0, $10041 = 0, $10042 = 0, $10043 = 0.0, $10044 = 0.0, $10045 = 0.0, $10046 = 0.0, $10047 = 0.0, $10048 = 0.0, $10049 = 0, $1005 = 0.0;
 var $10050 = 0, $10051 = 0.0, $10052 = 0.0, $10053 = 0.0, $10054 = 0.0, $10055 = 0.0, $10056 = 0.0, $10057 = 0, $10058 = 0.0, $10059 = 0, $1006 = 0.0, $10060 = 0, $10061 = 0.0, $10062 = 0.0, $10063 = 0, $10064 = 0, $10065 = 0.0, $10066 = 0.0, $10067 = 0.0, $10068 = 0.0;
 var $10069 = 0, $1007 = 0.0, $10070 = 0.0, $10071 = 0.0, $10072 = 0.0, $10073 = 0.0, $10074 = 0.0, $10075 = 0.0, $10076 = 0.0, $10077 = 0, $10078 = 0, $10079 = 0.0, $1008 = 0.0, $10080 = 0.0, $10081 = 0.0, $10082 = 0.0, $10083 = 0.0, $10084 = 0.0, $10085 = 0, $10086 = 0.0;
 var $10087 = 0, $10088 = 0, $10089 = 0.0, $1009 = 0.0, $10090 = 0.0, $10091 = 0, $10092 = 0, $10093 = 0.0, $10094 = 0.0, $10095 = 0.0, $10096 = 0.0, $10097 = 0, $10098 = 0.0, $10099 = 0.0, $101 = 0.0, $1010 = 0, $10100 = 0.0, $10101 = 0.0, $10102 = 0.0, $10103 = 0.0;
 var $10104 = 0.0, $10105 = 0, $10106 = 0, $10107 = 0.0, $10108 = 0.0, $10109 = 0.0, $1011 = 0.0, $10110 = 0.0, $10111 = 0.0, $10112 = 0.0, $10113 = 0, $10114 = 0.0, $10115 = 0, $10116 = 0, $10117 = 0.0, $10118 = 0.0, $10119 = 0.0, $1012 = 0.0, $10120 = 0, $10121 = 0;
 var $10122 = 0.0, $10123 = 0, $10124 = 0, $10125 = 0.0, $10126 = 0.0, $10127 = 0.0, $10128 = 0.0, $10129 = 0, $1013 = 0.0, $10130 = 0, $10131 = 0.0, $10132 = 0.0, $10133 = 0.0, $10134 = 0, $10135 = 0, $10136 = 0.0, $10137 = 0.0, $10138 = 0.0, $10139 = 0, $1014 = 0.0;
 var $10140 = 0, $10141 = 0.0, $10142 = 0.0, $10143 = 0.0, $10144 = 0.0, $10145 = 0.0, $10146 = 0, $10147 = 0, $10148 = 0, $10149 = 0.0, $1015 = 0.0, $10150 = 0, $10151 = 0.0, $10152 = 0, $10153 = 0, $10154 = 0.0, $10155 = 0.0, $10156 = 0.0, $10157 = 0.0, $10158 = 0.0;
 var $10159 = 0.0, $1016 = 0.0, $10160 = 0.0, $10161 = 0.0, $10162 = 0, $10163 = 0.0, $10164 = 0, $10165 = 0, $10166 = 0.0, $10167 = 0.0, $10168 = 0.0, $10169 = 0.0, $1017 = 0, $10170 = 0.0, $10171 = 0.0, $10172 = 0.0, $10173 = 0, $10174 = 0, $10175 = 0.0, $10176 = 0.0;
 var $10177 = 0.0, $10178 = 0.0, $10179 = 0.0, $1018 = 0.0, $10180 = 0, $10181 = 0, $10182 = 0.0, $10183 = 0.0, $10184 = 0.0, $10185 = 0, $10186 = 0, $10187 = 0.0, $10188 = 0.0, $10189 = 0.0, $1019 = 0.0, $10190 = 0, $10191 = 0, $10192 = 0.0, $10193 = 0.0, $10194 = 0.0;
 var $10195 = 0.0, $10196 = 0.0, $10197 = 0, $10198 = 0.0, $10199 = 0, $102 = 0.0, $1020 = 0.0, $10200 = 0, $10201 = 0.0, $10202 = 0.0, $10203 = 0.0, $10204 = 0.0, $10205 = 0, $10206 = 0.0, $10207 = 0.0, $10208 = 0.0, $10209 = 0, $1021 = 0.0, $10210 = 0, $10211 = 0.0;
 var $10212 = 0.0, $10213 = 0.0, $10214 = 0.0, $10215 = 0, $10216 = 0, $10217 = 0.0, $10218 = 0.0, $10219 = 0.0, $1022 = 0.0, $10220 = 0.0, $10221 = 0.0, $10222 = 0.0, $10223 = 0, $10224 = 0, $10225 = 0.0, $10226 = 0.0, $10227 = 0.0, $10228 = 0.0, $10229 = 0.0, $1023 = 0.0;
 var $10230 = 0.0, $10231 = 0, $10232 = 0.0, $10233 = 0, $10234 = 0, $10235 = 0.0, $10236 = 0.0, $10237 = 0, $10238 = 0, $10239 = 0.0, $1024 = 0, $10240 = 0.0, $10241 = 0.0, $10242 = 0.0, $10243 = 0, $10244 = 0.0, $10245 = 0.0, $10246 = 0.0, $10247 = 0.0, $10248 = 0.0;
 var $10249 = 0.0, $1025 = 0.0, $10250 = 0.0, $10251 = 0, $10252 = 0, $10253 = 0.0, $10254 = 0.0, $10255 = 0.0, $10256 = 0.0, $10257 = 0.0, $10258 = 0.0, $10259 = 0, $1026 = 0.0, $10260 = 0.0, $10261 = 0, $10262 = 0, $10263 = 0.0, $10264 = 0.0, $10265 = 0.0, $10266 = 0;
 var $10267 = 0.0, $10268 = 0, $10269 = 0, $1027 = 0.0, $10270 = 0.0, $10271 = 0.0, $10272 = 0.0, $10273 = 0.0, $10274 = 0, $10275 = 0, $10276 = 0.0, $10277 = 0.0, $10278 = 0.0, $10279 = 0, $1028 = 0.0, $10280 = 0, $10281 = 0.0, $10282 = 0.0, $10283 = 0.0, $10284 = 0;
 var $10285 = 0, $10286 = 0.0, $10287 = 0.0, $10288 = 0.0, $10289 = 0.0, $1029 = 0.0, $10290 = 0.0, $10291 = 0, $10292 = 0, $10293 = 0, $10294 = 0.0, $10295 = 0, $10296 = 0.0, $10297 = 0, $10298 = 0, $10299 = 0.0, $103 = 0.0, $1030 = 0.0, $10300 = 0.0, $10301 = 0.0;
 var $10302 = 0.0, $10303 = 0.0, $10304 = 0.0, $10305 = 0.0, $10306 = 0.0, $10307 = 0, $10308 = 0.0, $10309 = 0, $1031 = 0, $10310 = 0, $10311 = 0.0, $10312 = 0.0, $10313 = 0.0, $10314 = 0.0, $10315 = 0.0, $10316 = 0.0, $10317 = 0.0, $10318 = 0, $10319 = 0, $1032 = 0.0;
 var $10320 = 0.0, $10321 = 0.0, $10322 = 0.0, $10323 = 0.0, $10324 = 0.0, $10325 = 0, $10326 = 0, $10327 = 0.0, $10328 = 0.0, $10329 = 0.0, $1033 = 0.0, $10330 = 0, $10331 = 0, $10332 = 0.0, $10333 = 0.0, $10334 = 0.0, $10335 = 0, $10336 = 0, $10337 = 0.0, $10338 = 0.0;
 var $10339 = 0.0, $1034 = 0.0, $10340 = 0.0, $10341 = 0.0, $10342 = 0, $10343 = 0.0, $10344 = 0, $10345 = 0, $10346 = 0.0, $10347 = 0.0, $10348 = 0.0, $10349 = 0.0, $1035 = 0.0, $10350 = 0, $10351 = 0.0, $10352 = 0.0, $10353 = 0.0, $10354 = 0, $10355 = 0, $10356 = 0.0;
 var $10357 = 0.0, $10358 = 0.0, $10359 = 0.0, $1036 = 0.0, $10360 = 0, $10361 = 0, $10362 = 0.0, $10363 = 0.0, $10364 = 0.0, $10365 = 0.0, $10366 = 0.0, $10367 = 0.0, $10368 = 0, $10369 = 0, $1037 = 0.0, $10370 = 0.0, $10371 = 0.0, $10372 = 0.0, $10373 = 0.0, $10374 = 0.0;
 var $10375 = 0.0, $10376 = 0, $10377 = 0.0, $10378 = 0, $10379 = 0, $1038 = 0, $10380 = 0.0, $10381 = 0.0, $10382 = 0.0, $10383 = 0, $10384 = 0.0, $10385 = 0, $10386 = 0, $10387 = 0.0, $10388 = 0.0, $10389 = 0.0, $1039 = 0.0, $10390 = 0.0, $10391 = 0, $10392 = 0;
 var $10393 = 0.0, $10394 = 0.0, $10395 = 0.0, $10396 = 0, $10397 = 0, $10398 = 0.0, $10399 = 0.0, $104 = 0.0, $1040 = 0.0, $10400 = 0.0, $10401 = 0, $10402 = 0, $10403 = 0.0, $10404 = 0.0, $10405 = 0.0, $10406 = 0.0, $10407 = 0.0, $10408 = 0, $10409 = 0, $1041 = 0.0;
 var $10410 = 0, $10411 = 0.0, $10412 = 0, $10413 = 0.0, $10414 = 0, $10415 = 0, $10416 = 0.0, $10417 = 0.0, $10418 = 0.0, $10419 = 0.0, $1042 = 0.0, $10420 = 0.0, $10421 = 0.0, $10422 = 0.0, $10423 = 0.0, $10424 = 0, $10425 = 0.0, $10426 = 0, $10427 = 0, $10428 = 0.0;
 var $10429 = 0.0, $1043 = 0.0, $10430 = 0.0, $10431 = 0.0, $10432 = 0.0, $10433 = 0.0, $10434 = 0.0, $10435 = 0, $10436 = 0, $10437 = 0.0, $10438 = 0.0, $10439 = 0.0, $1044 = 0.0, $10440 = 0.0, $10441 = 0.0, $10442 = 0, $10443 = 0, $10444 = 0.0, $10445 = 0.0, $10446 = 0.0;
 var $10447 = 0, $10448 = 0, $10449 = 0.0, $1045 = 0.0, $10450 = 0.0, $10451 = 0.0, $10452 = 0, $10453 = 0, $10454 = 0.0, $10455 = 0.0, $10456 = 0.0, $10457 = 0.0, $10458 = 0.0, $10459 = 0, $1046 = 0.0, $10460 = 0.0, $10461 = 0, $10462 = 0, $10463 = 0.0, $10464 = 0.0;
 var $10465 = 0.0, $10466 = 0, $10467 = 0.0, $10468 = 0, $10469 = 0, $1047 = 0, $10470 = 0.0, $10471 = 0.0, $10472 = 0.0, $10473 = 0.0, $10474 = 0, $10475 = 0, $10476 = 0.0, $10477 = 0.0, $10478 = 0.0, $10479 = 0, $1048 = 0, $10480 = 0, $10481 = 0.0, $10482 = 0.0;
 var $10483 = 0.0, $10484 = 0, $10485 = 0, $10486 = 0.0, $10487 = 0.0, $10488 = 0.0, $10489 = 0.0, $1049 = 0, $10490 = 0.0, $10491 = 0, $10492 = 0.0, $10493 = 0, $10494 = 0, $10495 = 0.0, $10496 = 0.0, $10497 = 0.0, $10498 = 0.0, $10499 = 0, $105 = 0.0, $1050 = 0.0;
 var $10500 = 0.0, $10501 = 0.0, $10502 = 0.0, $10503 = 0.0, $10504 = 0.0, $10505 = 0.0, $10506 = 0.0, $10507 = 0, $10508 = 0, $10509 = 0.0, $1051 = 0.0, $10510 = 0.0, $10511 = 0.0, $10512 = 0.0, $10513 = 0, $10514 = 0.0, $10515 = 0.0, $10516 = 0.0, $10517 = 0.0, $10518 = 0.0;
 var $10519 = 0.0, $1052 = 0.0, $10520 = 0.0, $10521 = 0.0, $10522 = 0, $10523 = 0, $10524 = 0.0, $10525 = 0.0, $10526 = 0.0, $10527 = 0.0, $10528 = 0, $10529 = 0.0, $1053 = 0, $10530 = 0.0, $10531 = 0.0, $10532 = 0.0, $10533 = 0.0, $10534 = 0.0, $10535 = 0.0, $10536 = 0.0;
 var $10537 = 0.0, $10538 = 0.0, $10539 = 0, $1054 = 0, $10540 = 0.0, $10541 = 0.0, $10542 = 0.0, $10543 = 0, $10544 = 0, $10545 = 0.0, $10546 = 0.0, $10547 = 0.0, $10548 = 0.0, $10549 = 0, $1055 = 0.0, $10550 = 0, $10551 = 0.0, $10552 = 0.0, $10553 = 0.0, $10554 = 0.0;
 var $10555 = 0.0, $10556 = 0, $10557 = 0, $10558 = 0.0, $10559 = 0, $1056 = 0.0, $10560 = 0.0, $10561 = 0, $10562 = 0, $10563 = 0.0, $10564 = 0.0, $10565 = 0.0, $10566 = 0.0, $10567 = 0.0, $10568 = 0.0, $10569 = 0.0, $1057 = 0, $10570 = 0.0, $10571 = 0.0, $10572 = 0.0;
 var $10573 = 0.0, $10574 = 0.0, $10575 = 0.0, $10576 = 0.0, $10577 = 0.0, $10578 = 0.0, $10579 = 0.0, $1058 = 0, $10580 = 0.0, $10581 = 0, $10582 = 0.0, $10583 = 0.0, $10584 = 0, $10585 = 0.0, $10586 = 0.0, $10587 = 0.0, $10588 = 0.0, $10589 = 0.0, $1059 = 0.0, $10590 = 0.0;
 var $10591 = 0.0, $10592 = 0.0, $10593 = 0.0, $10594 = 0.0, $10595 = 0, $10596 = 0, $10597 = 0, $10598 = 0, $10599 = 0, $106 = 0.0, $1060 = 0.0, $10600 = 0, $10601 = 0, $10602 = 0, $10603 = 0, $10604 = 0, $10605 = 0, $10606 = 0, $10607 = 0.0, $10608 = 0;
 var $10609 = 0.0, $1061 = 0, $10610 = 0, $10611 = 0.0, $10612 = 0, $10613 = 0, $10614 = 0.0, $10615 = 0.0, $10616 = 0, $10617 = 0, $10618 = 0.0, $10619 = 0, $1062 = 0, $10620 = 0, $10621 = 0, $10622 = 0.0, $10623 = 0.0, $10624 = 0, $10625 = 0.0, $10626 = 0.0;
 var $10627 = 0.0, $10628 = 0.0, $10629 = 0, $1063 = 0.0, $10630 = 0.0, $10631 = 0.0, $10632 = 0.0, $10633 = 0.0, $10634 = 0.0, $10635 = 0.0, $10636 = 0.0, $10637 = 0.0, $10638 = 0.0, $10639 = 0.0, $1064 = 0.0, $10640 = 0.0, $10641 = 0, $10642 = 0, $10643 = 0, $10644 = 0;
 var $10645 = 0, $10646 = 0, $10647 = 0, $10648 = 0, $10649 = 0, $1065 = 0, $10650 = 0, $10651 = 0, $10652 = 0, $10653 = 0.0, $10654 = 0, $10655 = 0, $10656 = 0.0, $10657 = 0, $10658 = 0.0, $10659 = 0.0, $1066 = 0, $10660 = 0.0, $10661 = 0.0, $10662 = 0.0;
 var $10663 = 0.0, $10664 = 0.0, $10665 = 0.0, $10666 = 0.0, $10667 = 0.0, $10668 = 0.0, $10669 = 0.0, $1067 = 0.0, $10670 = 0.0, $10671 = 0.0, $10672 = 0.0, $10673 = 0.0, $10674 = 0.0, $10675 = 0.0, $10676 = 0.0, $10677 = 0.0, $10678 = 0.0, $10679 = 0.0, $1068 = 0.0, $10680 = 0.0;
 var $10681 = 0, $10682 = 0, $10683 = 0, $10684 = 0, $10685 = 0, $10686 = 0, $10687 = 0, $10688 = 0, $10689 = 0, $1069 = 0, $10690 = 0, $10691 = 0, $10692 = 0, $10693 = 0.0, $10694 = 0, $10695 = 0, $10696 = 0.0, $10697 = 0.0, $10698 = 0.0, $10699 = 0.0;
 var $107 = 0.0, $1070 = 0, $10700 = 0.0, $10701 = 0.0, $10702 = 0.0, $10703 = 0.0, $10704 = 0.0, $10705 = 0.0, $10706 = 0, $10707 = 0, $10708 = 0, $10709 = 0, $1071 = 0.0, $10710 = 0, $10711 = 0, $10712 = 0, $10713 = 0, $10714 = 0, $10715 = 0, $10716 = 0;
 var $10717 = 0, $10718 = 0.0, $10719 = 0, $1072 = 0.0, $10720 = 0.0, $10721 = 0.0, $10722 = 0.0, $10723 = 0.0, $10724 = 0.0, $10725 = 0.0, $10726 = 0.0, $10727 = 0.0, $10728 = 0.0, $10729 = 0.0, $1073 = 0, $10730 = 0.0, $10731 = 0.0, $10732 = 0.0, $10733 = 0.0, $10734 = 0.0;
 var $10735 = 0.0, $10736 = 0.0, $10737 = 0.0, $10738 = 0.0, $10739 = 0.0, $1074 = 0, $10740 = 0.0, $10741 = 0.0, $10742 = 0.0, $10743 = 0.0, $10744 = 0.0, $10745 = 0.0, $10746 = 0.0, $10747 = 0.0, $10748 = 0.0, $10749 = 0.0, $1075 = 0.0, $10750 = 0.0, $10751 = 0.0, $10752 = 0.0;
 var $10753 = 0, $10754 = 0, $10755 = 0, $10756 = 0, $10757 = 0, $10758 = 0, $10759 = 0, $1076 = 0.0, $10760 = 0, $10761 = 0, $10762 = 0, $10763 = 0, $10764 = 0, $10765 = 0.0, $10766 = 0, $10767 = 0.0, $10768 = 0.0, $10769 = 0.0, $1077 = 0, $10770 = 0.0;
 var $10771 = 0.0, $10772 = 0.0, $10773 = 0.0, $10774 = 0, $10775 = 0, $10776 = 0, $10777 = 0, $10778 = 0, $10779 = 0, $1078 = 0, $10780 = 0, $10781 = 0, $10782 = 0, $10783 = 0, $10784 = 0, $10785 = 0, $10786 = 0.0, $10787 = 0, $10788 = 0.0, $10789 = 0.0;
 var $1079 = 0.0, $10790 = 0.0, $10791 = 0.0, $10792 = 0.0, $10793 = 0.0, $10794 = 0.0, $10795 = 0.0, $10796 = 0.0, $10797 = 0.0, $10798 = 0.0, $10799 = 0.0, $108 = 0.0, $1080 = 0.0, $10800 = 0.0, $10801 = 0, $10802 = 0, $10803 = 0, $10804 = 0, $10805 = 0, $10806 = 0;
 var $10807 = 0, $10808 = 0, $10809 = 0, $1081 = 0, $10810 = 0, $10811 = 0, $10812 = 0, $10813 = 0.0, $10814 = 0, $10815 = 0.0, $10816 = 0.0, $10817 = 0.0, $10818 = 0.0, $10819 = 0.0, $1082 = 0, $10820 = 0.0, $10821 = 0.0, $10822 = 0, $10823 = 0, $10824 = 0;
 var $10825 = 0, $10826 = 0, $10827 = 0, $10828 = 0, $10829 = 0, $1083 = 0.0, $10830 = 0, $10831 = 0, $10832 = 0, $10833 = 0, $10834 = 0.0, $10835 = 0, $10836 = 0.0, $10837 = 0.0, $10838 = 0.0, $10839 = 0.0, $1084 = 0.0, $10840 = 0.0, $10841 = 0.0, $10842 = 0.0;
 var $10843 = 0.0, $10844 = 0.0, $10845 = 0.0, $10846 = 0.0, $10847 = 0.0, $10848 = 0.0, $10849 = 0.0, $1085 = 0, $10850 = 0.0, $10851 = 0.0, $10852 = 0.0, $10853 = 0.0, $10854 = 0.0, $10855 = 0.0, $10856 = 0.0, $10857 = 0.0, $10858 = 0.0, $10859 = 0.0, $1086 = 0, $10860 = 0.0;
 var $10861 = 0.0, $10862 = 0.0, $10863 = 0.0, $10864 = 0.0, $10865 = 0.0, $10866 = 0.0, $10867 = 0.0, $10868 = 0.0, $10869 = 0.0, $1087 = 0.0, $10870 = 0.0, $10871 = 0.0, $10872 = 0.0, $10873 = 0.0, $10874 = 0.0, $10875 = 0.0, $10876 = 0.0, $10877 = 0.0, $10878 = 0.0, $10879 = 0.0;
 var $1088 = 0.0, $10880 = 0.0, $10881 = 0.0, $10882 = 0.0, $10883 = 0.0, $10884 = 0.0, $10885 = 0.0, $10886 = 0.0, $10887 = 0.0, $10888 = 0.0, $10889 = 0.0, $1089 = 0, $10890 = 0.0, $10891 = 0.0, $10892 = 0.0, $10893 = 0.0, $10894 = 0.0, $10895 = 0.0, $10896 = 0.0, $10897 = 0.0;
 var $10898 = 0.0, $10899 = 0.0, $109 = 0.0, $1090 = 0, $10900 = 0.0, $10901 = 0, $10902 = 0, $10903 = 0, $10904 = 0, $10905 = 0, $10906 = 0, $10907 = 0, $10908 = 0, $10909 = 0, $1091 = 0.0, $10910 = 0, $10911 = 0, $10912 = 0, $10913 = 0.0, $10914 = 0;
 var $10915 = 0.0, $10916 = 0.0, $10917 = 0.0, $10918 = 0.0, $10919 = 0.0, $1092 = 0.0, $10920 = 0.0, $10921 = 0.0, $10922 = 0, $10923 = 0, $10924 = 0, $10925 = 0, $10926 = 0, $10927 = 0, $10928 = 0, $10929 = 0, $1093 = 0, $10930 = 0, $10931 = 0, $10932 = 0;
 var $10933 = 0, $10934 = 0.0, $10935 = 0, $10936 = 0.0, $10937 = 0.0, $10938 = 0.0, $10939 = 0.0, $1094 = 0, $10940 = 0.0, $10941 = 0.0, $10942 = 0.0, $10943 = 0.0, $10944 = 0.0, $10945 = 0.0, $10946 = 0.0, $10947 = 0.0, $10948 = 0.0, $10949 = 0, $1095 = 0.0, $10950 = 0;
 var $10951 = 0, $10952 = 0, $10953 = 0, $10954 = 0, $10955 = 0, $10956 = 0, $10957 = 0, $10958 = 0, $10959 = 0, $1096 = 0.0, $10960 = 0, $10961 = 0.0, $10962 = 0, $10963 = 0.0, $10964 = 0.0, $10965 = 0.0, $10966 = 0.0, $10967 = 0.0, $10968 = 0.0, $10969 = 0.0;
 var $1097 = 0, $10970 = 0, $10971 = 0, $10972 = 0, $10973 = 0, $10974 = 0, $10975 = 0, $10976 = 0, $10977 = 0, $10978 = 0, $10979 = 0, $1098 = 0, $10980 = 0, $10981 = 0, $10982 = 0.0, $10983 = 0, $10984 = 0.0, $10985 = 0.0, $10986 = 0.0, $10987 = 0.0;
 var $10988 = 0.0, $10989 = 0.0, $1099 = 0.0, $10990 = 0.0, $10991 = 0.0, $10992 = 0.0, $10993 = 0.0, $10994 = 0.0, $10995 = 0.0, $10996 = 0.0, $10997 = 0.0, $10998 = 0.0, $10999 = 0.0, $11 = 0.0, $110 = 0.0, $1100 = 0.0, $11000 = 0.0, $11001 = 0.0, $11002 = 0.0, $11003 = 0.0;
 var $11004 = 0.0, $11005 = 0.0, $11006 = 0.0, $11007 = 0.0, $11008 = 0.0, $11009 = 0, $1101 = 0, $11010 = 0, $11011 = 0, $11012 = 0, $11013 = 0, $11014 = 0, $11015 = 0, $11016 = 0, $11017 = 0, $11018 = 0, $11019 = 0, $1102 = 0, $11020 = 0, $11021 = 0.0;
 var $11022 = 0, $11023 = 0.0, $11024 = 0.0, $11025 = 0.0, $11026 = 0.0, $11027 = 0.0, $11028 = 0.0, $11029 = 0.0, $1103 = 0.0, $11030 = 0, $11031 = 0, $11032 = 0, $11033 = 0, $11034 = 0, $11035 = 0, $11036 = 0, $11037 = 0, $11038 = 0, $11039 = 0, $1104 = 0.0;
 var $11040 = 0, $11041 = 0, $11042 = 0.0, $11043 = 0, $11044 = 0.0, $11045 = 0.0, $11046 = 0.0, $11047 = 0.0, $11048 = 0.0, $11049 = 0.0, $1105 = 0, $11050 = 0.0, $11051 = 0.0, $11052 = 0.0, $11053 = 0.0, $11054 = 0.0, $11055 = 0.0, $11056 = 0.0, $11057 = 0, $11058 = 0;
 var $11059 = 0, $1106 = 0, $11060 = 0, $11061 = 0, $11062 = 0, $11063 = 0, $11064 = 0, $11065 = 0, $11066 = 0, $11067 = 0, $11068 = 0, $11069 = 0.0, $1107 = 0.0, $11070 = 0, $11071 = 0.0, $11072 = 0.0, $11073 = 0.0, $11074 = 0.0, $11075 = 0.0, $11076 = 0.0;
 var $11077 = 0.0, $11078 = 0, $11079 = 0, $1108 = 0.0, $11080 = 0, $11081 = 0, $11082 = 0, $11083 = 0, $11084 = 0, $11085 = 0, $11086 = 0, $11087 = 0, $11088 = 0, $11089 = 0, $1109 = 0, $11090 = 0.0, $11091 = 0, $11092 = 0.0, $11093 = 0, $11094 = 0.0;
 var $11095 = 0, $11096 = 0.0, $11097 = 0.0, $11098 = 0, $11099 = 0.0, $111 = 0.0, $1110 = 0, $11100 = 0.0, $11101 = 0, $11102 = 0.0, $11103 = 0.0, $11104 = 0, $11105 = 0.0, $11106 = 0.0, $11107 = 0, $11108 = 0.0, $11109 = 0.0, $1111 = 0, $11110 = 0, $11111 = 0.0;
 var $11112 = 0.0, $11113 = 0, $11114 = 0.0, $11115 = 0.0, $11116 = 0.0, $11117 = 0, $11118 = 0, $11119 = 0, $1112 = 0, $11120 = 0.0, $11121 = 0, $11122 = 0.0, $11123 = 0, $11124 = 0.0, $11125 = 0.0, $11126 = 0, $11127 = 0.0, $11128 = 0.0, $11129 = 0, $1113 = 0;
 var $11130 = 0.0, $11131 = 0.0, $11132 = 0, $11133 = 0.0, $11134 = 0.0, $11135 = 0, $11136 = 0.0, $11137 = 0.0, $11138 = 0, $11139 = 0.0, $1114 = 0, $11140 = 0.0, $11141 = 0, $11142 = 0.0, $11143 = 0.0, $11144 = 0.0, $11145 = 0, $11146 = 0, $11147 = 0, $11148 = 0;
 var $11149 = 0, $1115 = 0, $11150 = 0.0, $11151 = 0, $11152 = 0, $11153 = 0, $11154 = 0.0, $11155 = 0, $11156 = 0, $11157 = 0, $11158 = 0, $11159 = 0.0, $1116 = 0, $11160 = 0, $11161 = 0, $11162 = 0, $11163 = 0.0, $11164 = 0, $11165 = 0, $11166 = 0;
 var $11167 = 0, $11168 = 0.0, $11169 = 0, $1117 = 0, $11170 = 0, $11171 = 0, $11172 = 0.0, $11173 = 0, $11174 = 0, $11175 = 0, $11176 = 0, $11177 = 0.0, $11178 = 0, $11179 = 0, $1118 = 0, $11180 = 0, $11181 = 0.0, $11182 = 0, $11183 = 0, $11184 = 0;
 var $11185 = 0, $11186 = 0.0, $11187 = 0, $11188 = 0, $11189 = 0, $1119 = 0, $11190 = 0.0, $11191 = 0, $11192 = 0, $11193 = 0, $11194 = 0, $11195 = 0.0, $11196 = 0, $11197 = 0, $11198 = 0, $11199 = 0.0, $112 = 0.0, $1120 = 0, $11200 = 0, $11201 = 0;
 var $11202 = 0, $11203 = 0, $11204 = 0.0, $11205 = 0, $11206 = 0, $11207 = 0, $11208 = 0.0, $11209 = 0, $1121 = 0, $11210 = 0, $11211 = 0, $11212 = 0, $11213 = 0.0, $11214 = 0, $11215 = 0, $11216 = 0, $11217 = 0.0, $11218 = 0, $11219 = 0, $1122 = 0;
 var $11220 = 0, $11221 = 0, $11222 = 0.0, $11223 = 0, $11224 = 0, $11225 = 0, $11226 = 0.0, $11227 = 0, $11228 = 0, $11229 = 0, $1123 = 0, $11230 = 0, $11231 = 0.0, $11232 = 0, $11233 = 0, $11234 = 0, $11235 = 0.0, $11236 = 0, $11237 = 0, $11238 = 0;
 var $11239 = 0, $1124 = 0, $11240 = 0.0, $11241 = 0, $11242 = 0, $11243 = 0, $11244 = 0.0, $11245 = 0, $11246 = 0, $11247 = 0, $11248 = 0, $11249 = 0.0, $1125 = 0, $11250 = 0, $11251 = 0, $11252 = 0, $11253 = 0.0, $11254 = 0, $11255 = 0, $11256 = 0;
 var $11257 = 0, $11258 = 0.0, $11259 = 0, $1126 = 0, $11260 = 0, $11261 = 0, $11262 = 0.0, $11263 = 0, $11264 = 0, $11265 = 0, $11266 = 0, $11267 = 0.0, $11268 = 0, $11269 = 0, $1127 = 0, $11270 = 0, $11271 = 0.0, $11272 = 0, $11273 = 0, $11274 = 0;
 var $11275 = 0, $11276 = 0.0, $11277 = 0, $11278 = 0, $11279 = 0, $1128 = 0, $11280 = 0.0, $11281 = 0, $11282 = 0, $11283 = 0, $11284 = 0.0, $11285 = 0, $11286 = 0, $11287 = 0, $11288 = 0, $11289 = 0.0, $1129 = 0, $11290 = 0, $11291 = 0, $11292 = 0;
 var $11293 = 0.0, $11294 = 0, $11295 = 0, $11296 = 0, $11297 = 0, $11298 = 0, $11299 = 0, $113 = 0.0, $1130 = 0, $11300 = 0, $11301 = 0, $11302 = 0.0, $11303 = 0, $11304 = 0, $11305 = 0, $11306 = 0.0, $11307 = 0, $11308 = 0, $11309 = 0, $1131 = 0;
 var $11310 = 0.0, $11311 = 0, $11312 = 0, $11313 = 0, $11314 = 0, $11315 = 0.0, $11316 = 0, $11317 = 0, $11318 = 0, $11319 = 0.0, $1132 = 0.0, $11320 = 0, $11321 = 0, $11322 = 0, $11323 = 0.0, $11324 = 0, $11325 = 0, $11326 = 0, $11327 = 0.0, $11328 = 0;
 var $11329 = 0, $1133 = 0.0, $11330 = 0, $11331 = 0, $11332 = 0.0, $11333 = 0, $11334 = 0, $11335 = 0, $11336 = 0.0, $11337 = 0, $11338 = 0, $11339 = 0, $1134 = 0, $11340 = 0.0, $11341 = 0, $11342 = 0, $11343 = 0, $11344 = 0, $11345 = 0.0, $11346 = 0;
 var $11347 = 0, $11348 = 0, $11349 = 0.0, $1135 = 0, $11350 = 0, $11351 = 0, $11352 = 0, $11353 = 0, $11354 = 0.0, $11355 = 0, $11356 = 0, $11357 = 0, $11358 = 0.0, $11359 = 0, $1136 = 0.0, $11360 = 0, $11361 = 0, $11362 = 0.0, $11363 = 0, $11364 = 0;
 var $11365 = 0, $11366 = 0.0, $11367 = 0, $11368 = 0, $11369 = 0, $1137 = 0.0, $11370 = 0, $11371 = 0.0, $11372 = 0, $11373 = 0, $11374 = 0, $11375 = 0.0, $11376 = 0, $11377 = 0, $11378 = 0, $11379 = 0.0, $1138 = 0, $11380 = 0, $11381 = 0, $11382 = 0;
 var $11383 = 0, $11384 = 0.0, $11385 = 0, $11386 = 0, $11387 = 0, $11388 = 0.0, $11389 = 0, $1139 = 0, $11390 = 0, $11391 = 0, $11392 = 0, $11393 = 0.0, $11394 = 0, $11395 = 0, $11396 = 0, $11397 = 0.0, $11398 = 0, $11399 = 0, $114 = 0.0, $1140 = 0.0;
 var $11400 = 0, $11401 = 0, $11402 = 0.0, $11403 = 0, $11404 = 0, $11405 = 0, $11406 = 0.0, $11407 = 0, $11408 = 0, $11409 = 0, $1141 = 0.0, $11410 = 0.0, $11411 = 0, $11412 = 0, $11413 = 0, $11414 = 0.0, $11415 = 0, $11416 = 0, $11417 = 0, $11418 = 0;
 var $11419 = 0.0, $1142 = 0.0, $11420 = 0, $11421 = 0, $11422 = 0, $11423 = 0.0, $11424 = 0, $11425 = 0, $11426 = 0, $11427 = 0.0, $11428 = 0, $11429 = 0, $1143 = 0.0, $11430 = 0, $11431 = 0, $11432 = 0.0, $11433 = 0, $11434 = 0, $11435 = 0, $11436 = 0.0;
 var $11437 = 0, $11438 = 0, $11439 = 0, $1144 = 0, $11440 = 0, $11441 = 0.0, $11442 = 0, $11443 = 0, $11444 = 0, $11445 = 0.0, $11446 = 0, $11447 = 0, $11448 = 0, $11449 = 0, $1145 = 0, $11450 = 0.0, $11451 = 0, $11452 = 0, $11453 = 0, $11454 = 0.0;
 var $11455 = 0, $11456 = 0, $11457 = 0, $11458 = 0, $11459 = 0.0, $1146 = 0.0, $11460 = 0, $11461 = 0, $11462 = 0, $11463 = 0.0, $11464 = 0, $11465 = 0, $11466 = 0, $11467 = 0.0, $11468 = 0, $11469 = 0, $1147 = 0.0, $11470 = 0, $11471 = 0, $11472 = 0.0;
 var $11473 = 0, $11474 = 0, $11475 = 0, $11476 = 0.0, $11477 = 0, $11478 = 0, $11479 = 0, $1148 = 0.0, $11480 = 0.0, $11481 = 0, $11482 = 0, $11483 = 0, $11484 = 0, $11485 = 0.0, $11486 = 0, $11487 = 0, $11488 = 0, $11489 = 0.0, $1149 = 0, $11490 = 0;
 var $11491 = 0, $11492 = 0, $11493 = 0.0, $11494 = 0, $11495 = 0, $11496 = 0, $11497 = 0.0, $11498 = 0, $11499 = 0, $115 = 0.0, $1150 = 0.0, $11500 = 0, $11501 = 0, $11502 = 0.0, $11503 = 0, $11504 = 0, $11505 = 0, $11506 = 0.0, $11507 = 0, $11508 = 0;
 var $11509 = 0, $1151 = 0, $11510 = 0.0, $11511 = 0, $11512 = 0, $11513 = 0, $11514 = 0, $11515 = 0.0, $11516 = 0, $11517 = 0, $11518 = 0, $11519 = 0.0, $1152 = 0.0, $11520 = 0, $11521 = 0, $11522 = 0, $11523 = 0, $11524 = 0.0, $11525 = 0, $11526 = 0;
 var $11527 = 0, $11528 = 0.0, $11529 = 0, $1153 = 0.0, $11530 = 0, $11531 = 0, $11532 = 0.0, $11533 = 0, $11534 = 0, $11535 = 0, $11536 = 0.0, $11537 = 0, $11538 = 0, $11539 = 0, $1154 = 0, $11540 = 0, $11541 = 0.0, $11542 = 0, $11543 = 0, $11544 = 0;
 var $11545 = 0.0, $11546 = 0, $11547 = 0, $11548 = 0, $11549 = 0.0, $1155 = 0, $11550 = 0, $11551 = 0, $11552 = 0, $11553 = 0, $11554 = 0.0, $11555 = 0, $11556 = 0, $11557 = 0, $11558 = 0.0, $11559 = 0, $1156 = 0.0, $11560 = 0, $11561 = 0, $11562 = 0;
 var $11563 = 0.0, $11564 = 0, $11565 = 0, $11566 = 0, $11567 = 0.0, $11568 = 0, $11569 = 0, $1157 = 0.0, $11570 = 0, $11571 = 0, $11572 = 0.0, $11573 = 0, $11574 = 0, $11575 = 0, $11576 = 0.0, $11577 = 0, $11578 = 0, $11579 = 0, $1158 = 0.0, $11580 = 0.0;
 var $11581 = 0, $11582 = 0, $11583 = 0, $11584 = 0.0, $11585 = 0, $11586 = 0, $11587 = 0, $11588 = 0, $11589 = 0.0, $1159 = 0, $11590 = 0, $11591 = 0, $11592 = 0, $11593 = 0.0, $11594 = 0, $11595 = 0, $11596 = 0, $11597 = 0.0, $11598 = 0, $11599 = 0;
 var $116 = 0.0, $1160 = 0, $11600 = 0, $11601 = 0, $11602 = 0.0, $11603 = 0, $11604 = 0, $11605 = 0, $11606 = 0.0, $11607 = 0, $11608 = 0, $11609 = 0, $1161 = 0.0, $11610 = 0, $11611 = 0.0, $11612 = 0, $11613 = 0, $11614 = 0, $11615 = 0.0, $11616 = 0;
 var $11617 = 0, $11618 = 0, $11619 = 0, $1162 = 0.0, $11620 = 0.0, $11621 = 0, $11622 = 0, $11623 = 0, $11624 = 0.0, $11625 = 0, $11626 = 0, $11627 = 0, $11628 = 0, $11629 = 0.0, $1163 = 0, $11630 = 0, $11631 = 0, $11632 = 0, $11633 = 0.0, $11634 = 0;
 var $11635 = 0, $11636 = 0, $11637 = 0.0, $11638 = 0, $11639 = 0, $1164 = 0, $11640 = 0, $11641 = 0, $11642 = 0.0, $11643 = 0, $11644 = 0, $11645 = 0, $11646 = 0.0, $11647 = 0, $11648 = 0, $11649 = 0, $1165 = 0.0, $11650 = 0.0, $11651 = 0, $11652 = 0;
 var $11653 = 0, $11654 = 0, $11655 = 0.0, $11656 = 0, $11657 = 0, $11658 = 0, $11659 = 0.0, $1166 = 0.0, $11660 = 0, $11661 = 0, $11662 = 0, $11663 = 0.0, $11664 = 0, $11665 = 0, $11666 = 0, $11667 = 0.0, $11668 = 0, $11669 = 0, $1167 = 0.0, $11670 = 0;
 var $11671 = 0, $11672 = 0.0, $11673 = 0, $11674 = 0, $11675 = 0, $11676 = 0.0, $11677 = 0, $11678 = 0, $11679 = 0, $1168 = 0.0, $11680 = 0.0, $11681 = 0, $11682 = 0, $11683 = 0, $11684 = 0, $11685 = 0.0, $11686 = 0, $11687 = 0, $11688 = 0, $11689 = 0.0;
 var $1169 = 0.0, $11690 = 0, $11691 = 0, $11692 = 0, $11693 = 0, $11694 = 0.0, $11695 = 0, $11696 = 0, $11697 = 0, $11698 = 0.0, $11699 = 0, $117 = 0.0, $1170 = 0.0, $11700 = 0, $11701 = 0, $11702 = 0.0, $11703 = 0, $11704 = 0, $11705 = 0, $11706 = 0.0;
 var $11707 = 0, $11708 = 0, $11709 = 0, $1171 = 0, $11710 = 0, $11711 = 0.0, $11712 = 0, $11713 = 0, $11714 = 0, $11715 = 0.0, $11716 = 0, $11717 = 0, $11718 = 0, $11719 = 0.0, $1172 = 0.0, $11720 = 0, $11721 = 0, $11722 = 0, $11723 = 0, $11724 = 0.0;
 var $11725 = 0, $11726 = 0, $11727 = 0, $11728 = 0.0, $11729 = 0, $1173 = 0, $11730 = 0, $11731 = 0, $11732 = 0, $11733 = 0.0, $11734 = 0, $11735 = 0, $11736 = 0, $11737 = 0.0, $11738 = 0, $11739 = 0, $1174 = 0, $11740 = 0, $11741 = 0, $11742 = 0.0;
 var $11743 = 0, $11744 = 0, $11745 = 0, $11746 = 0.0, $11747 = 0, $11748 = 0, $11749 = 0, $1175 = 0.0, $11750 = 0.0, $11751 = 0, $11752 = 0, $11753 = 0, $11754 = 0.0, $11755 = 0, $11756 = 0, $11757 = 0, $11758 = 0, $11759 = 0.0, $1176 = 0.0, $11760 = 0;
 var $11761 = 0, $11762 = 0, $11763 = 0.0, $11764 = 0, $11765 = 0, $11766 = 0, $11767 = 0.0, $11768 = 0, $11769 = 0, $1177 = 0, $11770 = 0, $11771 = 0, $11772 = 0.0, $11773 = 0, $11774 = 0, $11775 = 0, $11776 = 0.0, $11777 = 0, $11778 = 0, $11779 = 0;
 var $1178 = 0, $11780 = 0, $11781 = 0.0, $11782 = 0, $11783 = 0, $11784 = 0, $11785 = 0.0, $11786 = 0, $11787 = 0, $11788 = 0, $11789 = 0, $1179 = 0.0, $11790 = 0.0, $11791 = 0, $11792 = 0, $11793 = 0, $11794 = 0.0, $11795 = 0, $11796 = 0, $11797 = 0;
 var $11798 = 0, $11799 = 0.0, $118 = 0.0, $1180 = 0, $11800 = 0, $11801 = 0, $11802 = 0, $11803 = 0.0, $11804 = 0, $11805 = 0, $11806 = 0, $11807 = 0.0, $11808 = 0, $11809 = 0, $1181 = 0, $11810 = 0, $11811 = 0, $11812 = 0.0, $11813 = 0, $11814 = 0;
 var $11815 = 0, $11816 = 0.0, $11817 = 0, $11818 = 0, $11819 = 0, $1182 = 0, $11820 = 0.0, $11821 = 0, $11822 = 0, $11823 = 0, $11824 = 0, $11825 = 0.0, $11826 = 0, $11827 = 0, $11828 = 0, $11829 = 0.0, $1183 = 0.0, $11830 = 0, $11831 = 0, $11832 = 0;
 var $11833 = 0.0, $11834 = 0, $11835 = 0, $11836 = 0, $11837 = 0.0, $11838 = 0, $11839 = 0, $1184 = 0.0, $11840 = 0, $11841 = 0, $11842 = 0.0, $11843 = 0, $11844 = 0, $11845 = 0, $11846 = 0.0, $11847 = 0, $11848 = 0, $11849 = 0, $1185 = 0.0, $11850 = 0.0;
 var $11851 = 0, $11852 = 0, $11853 = 0, $11854 = 0, $11855 = 0.0, $11856 = 0, $11857 = 0, $11858 = 0, $11859 = 0.0, $1186 = 0, $11860 = 0, $11861 = 0, $11862 = 0, $11863 = 0, $11864 = 0.0, $11865 = 0, $11866 = 0, $11867 = 0, $11868 = 0.0, $11869 = 0;
 var $1187 = 0.0, $11870 = 0, $11871 = 0, $11872 = 0.0, $11873 = 0, $11874 = 0, $11875 = 0, $11876 = 0.0, $11877 = 0, $11878 = 0, $11879 = 0, $1188 = 0, $11880 = 0, $11881 = 0.0, $11882 = 0, $11883 = 0, $11884 = 0, $11885 = 0.0, $11886 = 0, $11887 = 0;
 var $11888 = 0, $11889 = 0.0, $1189 = 0, $11890 = 0, $11891 = 0, $11892 = 0, $11893 = 0, $11894 = 0.0, $11895 = 0, $11896 = 0, $11897 = 0, $11898 = 0.0, $11899 = 0, $119 = 0.0, $1190 = 0.0, $11900 = 0, $11901 = 0, $11902 = 0, $11903 = 0.0, $11904 = 0;
 var $11905 = 0, $11906 = 0, $11907 = 0.0, $11908 = 0, $11909 = 0, $1191 = 0.0, $11910 = 0, $11911 = 0, $11912 = 0.0, $11913 = 0, $11914 = 0, $11915 = 0, $11916 = 0.0, $11917 = 0, $11918 = 0, $11919 = 0, $1192 = 0, $11920 = 0.0, $11921 = 0, $11922 = 0;
 var $11923 = 0, $11924 = 0.0, $11925 = 0, $11926 = 0, $11927 = 0, $11928 = 0, $11929 = 0.0, $1193 = 0, $11930 = 0, $11931 = 0, $11932 = 0, $11933 = 0.0, $11934 = 0, $11935 = 0, $11936 = 0, $11937 = 0.0, $11938 = 0, $11939 = 0, $1194 = 0.0, $11940 = 0;
 var $11941 = 0, $11942 = 0.0, $11943 = 0, $11944 = 0, $11945 = 0, $11946 = 0.0, $11947 = 0, $11948 = 0, $11949 = 0, $1195 = 0, $11950 = 0, $11951 = 0.0, $11952 = 0, $11953 = 0, $11954 = 0, $11955 = 0.0, $11956 = 0, $11957 = 0, $11958 = 0, $11959 = 0;
 var $1196 = 0, $11960 = 0.0, $11961 = 0, $11962 = 0, $11963 = 0, $11964 = 0.0, $11965 = 0, $11966 = 0, $11967 = 0, $11968 = 0, $11969 = 0.0, $1197 = 0.0, $11970 = 0, $11971 = 0, $11972 = 0, $11973 = 0.0, $11974 = 0, $11975 = 0, $11976 = 0, $11977 = 0.0;
 var $11978 = 0, $11979 = 0, $1198 = 0.0, $11980 = 0, $11981 = 0, $11982 = 0.0, $11983 = 0, $11984 = 0, $11985 = 0, $11986 = 0.0, $11987 = 0, $11988 = 0, $11989 = 0, $1199 = 0.0, $11990 = 0.0, $11991 = 0, $11992 = 0, $11993 = 0, $11994 = 0, $11995 = 0.0;
 var $11996 = 0, $11997 = 0, $11998 = 0, $11999 = 0.0, $12 = 0, $120 = 0, $1200 = 0.0, $12000 = 0, $12001 = 0, $12002 = 0, $12003 = 0.0, $12004 = 0, $12005 = 0, $12006 = 0, $12007 = 0.0, $12008 = 0, $12009 = 0, $1201 = 0, $12010 = 0, $12011 = 0;
 var $12012 = 0.0, $12013 = 0, $12014 = 0, $12015 = 0, $12016 = 0.0, $12017 = 0, $12018 = 0, $12019 = 0, $1202 = 0, $12020 = 0.0, $12021 = 0, $12022 = 0, $12023 = 0, $12024 = 0, $12025 = 0.0, $12026 = 0, $12027 = 0, $12028 = 0, $12029 = 0.0, $1203 = 0.0;
 var $12030 = 0, $12031 = 0, $12032 = 0, $12033 = 0, $12034 = 0.0, $12035 = 0, $12036 = 0, $12037 = 0, $12038 = 0.0, $12039 = 0, $1204 = 0.0, $12040 = 0, $12041 = 0, $12042 = 0.0, $12043 = 0, $12044 = 0, $12045 = 0, $12046 = 0.0, $12047 = 0, $12048 = 0;
 var $12049 = 0, $1205 = 0.0, $12050 = 0, $12051 = 0.0, $12052 = 0, $12053 = 0, $12054 = 0, $12055 = 0.0, $12056 = 0, $12057 = 0, $12058 = 0, $12059 = 0.0, $1206 = 0, $12060 = 0, $12061 = 0, $12062 = 0, $12063 = 0, $12064 = 0.0, $12065 = 0, $12066 = 0;
 var $12067 = 0, $12068 = 0.0, $12069 = 0, $1207 = 0, $12070 = 0, $12071 = 0, $12072 = 0, $12073 = 0.0, $12074 = 0, $12075 = 0, $12076 = 0, $12077 = 0.0, $12078 = 0, $12079 = 0, $1208 = 0.0, $12080 = 0, $12081 = 0, $12082 = 0.0, $12083 = 0, $12084 = 0;
 var $12085 = 0, $12086 = 0.0, $12087 = 0, $12088 = 0, $12089 = 0, $1209 = 0.0, $12090 = 0.0, $12091 = 0, $12092 = 0, $12093 = 0, $12094 = 0.0, $12095 = 0, $12096 = 0, $12097 = 0, $12098 = 0, $12099 = 0.0, $121 = 0.0, $1210 = 0.0, $12100 = 0, $12101 = 0;
 var $12102 = 0, $12103 = 0.0, $12104 = 0, $12105 = 0, $12106 = 0, $12107 = 0.0, $12108 = 0, $12109 = 0, $1211 = 0.0, $12110 = 0, $12111 = 0, $12112 = 0.0, $12113 = 0, $12114 = 0, $12115 = 0, $12116 = 0.0, $12117 = 0, $12118 = 0, $12119 = 0, $1212 = 0.0;
 var $12120 = 0, $12121 = 0.0, $12122 = 0, $12123 = 0, $12124 = 0, $12125 = 0.0, $12126 = 0, $12127 = 0, $12128 = 0, $12129 = 0, $1213 = 0, $12130 = 0.0, $12131 = 0, $12132 = 0, $12133 = 0, $12134 = 0.0, $12135 = 0, $12136 = 0, $12137 = 0, $12138 = 0;
 var $12139 = 0.0, $1214 = 0, $12140 = 0, $12141 = 0, $12142 = 0, $12143 = 0.0, $12144 = 0, $12145 = 0, $12146 = 0, $12147 = 0.0, $12148 = 0, $12149 = 0, $1215 = 0.0, $12150 = 0, $12151 = 0, $12152 = 0.0, $12153 = 0, $12154 = 0, $12155 = 0, $12156 = 0.0;
 var $12157 = 0, $12158 = 0, $12159 = 0, $1216 = 0.0, $12160 = 0.0, $12161 = 0, $12162 = 0, $12163 = 0, $12164 = 0, $12165 = 0.0, $12166 = 0, $12167 = 0, $12168 = 0, $12169 = 0.0, $1217 = 0.0, $12170 = 0, $12171 = 0, $12172 = 0, $12173 = 0.0, $12174 = 0;
 var $12175 = 0, $12176 = 0, $12177 = 0.0, $12178 = 0, $12179 = 0, $1218 = 0, $12180 = 0, $12181 = 0, $12182 = 0.0, $12183 = 0, $12184 = 0, $12185 = 0, $12186 = 0.0, $12187 = 0, $12188 = 0, $12189 = 0, $1219 = 0, $12190 = 0.0, $12191 = 0, $12192 = 0;
 var $12193 = 0, $12194 = 0, $12195 = 0.0, $12196 = 0, $12197 = 0, $12198 = 0, $12199 = 0.0, $122 = 0, $1220 = 0.0, $12200 = 0, $12201 = 0, $12202 = 0, $12203 = 0, $12204 = 0.0, $12205 = 0, $12206 = 0, $12207 = 0, $12208 = 0.0, $12209 = 0, $1221 = 0.0;
 var $12210 = 0, $12211 = 0, $12212 = 0.0, $12213 = 0, $12214 = 0, $12215 = 0, $12216 = 0.0, $12217 = 0, $12218 = 0, $12219 = 0, $1222 = 0.0, $12220 = 0, $12221 = 0.0, $12222 = 0, $12223 = 0, $12224 = 0, $12225 = 0.0, $12226 = 0, $12227 = 0, $12228 = 0;
 var $12229 = 0.0, $1223 = 0, $12230 = 0, $12231 = 0, $12232 = 0, $12233 = 0, $12234 = 0.0, $12235 = 0, $12236 = 0, $12237 = 0, $12238 = 0.0, $12239 = 0, $1224 = 0, $12240 = 0, $12241 = 0, $12242 = 0, $12243 = 0.0, $12244 = 0, $12245 = 0, $12246 = 0;
 var $12247 = 0.0, $12248 = 0, $12249 = 0, $1225 = 0.0, $12250 = 0, $12251 = 0, $12252 = 0.0, $12253 = 0, $12254 = 0, $12255 = 0, $12256 = 0.0, $12257 = 0, $12258 = 0, $12259 = 0, $1226 = 0.0, $12260 = 0.0, $12261 = 0, $12262 = 0, $12263 = 0, $12264 = 0.0;
 var $12265 = 0, $12266 = 0, $12267 = 0, $12268 = 0, $12269 = 0.0, $1227 = 0.0, $12270 = 0, $12271 = 0, $12272 = 0, $12273 = 0.0, $12274 = 0, $12275 = 0, $12276 = 0, $12277 = 0.0, $12278 = 0, $12279 = 0, $1228 = 0.0, $12280 = 0, $12281 = 0, $12282 = 0.0;
 var $12283 = 0, $12284 = 0, $12285 = 0, $12286 = 0.0, $12287 = 0, $12288 = 0, $12289 = 0, $1229 = 0.0, $12290 = 0, $12291 = 0.0, $12292 = 0, $12293 = 0, $12294 = 0, $12295 = 0.0, $12296 = 0, $12297 = 0, $12298 = 0, $12299 = 0, $123 = 0.0, $1230 = 0;
 var $12300 = 0.0, $12301 = 0, $12302 = 0, $12303 = 0, $12304 = 0.0, $12305 = 0, $12306 = 0, $12307 = 0, $12308 = 0, $12309 = 0.0, $1231 = 0.0, $12310 = 0, $12311 = 0, $12312 = 0, $12313 = 0.0, $12314 = 0, $12315 = 0, $12316 = 0, $12317 = 0.0, $12318 = 0;
 var $12319 = 0, $1232 = 0, $12320 = 0, $12321 = 0, $12322 = 0.0, $12323 = 0, $12324 = 0, $12325 = 0, $12326 = 0.0, $12327 = 0, $12328 = 0, $12329 = 0, $1233 = 0, $12330 = 0.0, $12331 = 0, $12332 = 0, $12333 = 0, $12334 = 0, $12335 = 0.0, $12336 = 0;
 var $12337 = 0, $12338 = 0, $12339 = 0.0, $1234 = 0.0, $12340 = 0, $12341 = 0, $12342 = 0, $12343 = 0.0, $12344 = 0, $12345 = 0, $12346 = 0, $12347 = 0.0, $12348 = 0, $12349 = 0, $1235 = 0.0, $12350 = 0, $12351 = 0, $12352 = 0.0, $12353 = 0, $12354 = 0;
 var $12355 = 0, $12356 = 0.0, $12357 = 0, $12358 = 0, $12359 = 0, $1236 = 0.0, $12360 = 0.0, $12361 = 0, $12362 = 0, $12363 = 0, $12364 = 0, $12365 = 0.0, $12366 = 0, $12367 = 0, $12368 = 0, $12369 = 0.0, $1237 = 0.0, $12370 = 0, $12371 = 0, $12372 = 0;
 var $12373 = 0, $12374 = 0.0, $12375 = 0, $12376 = 0, $12377 = 0, $12378 = 0.0, $12379 = 0, $1238 = 0, $12380 = 0, $12381 = 0, $12382 = 0.0, $12383 = 0, $12384 = 0, $12385 = 0, $12386 = 0.0, $12387 = 0, $12388 = 0, $12389 = 0, $1239 = 0.0, $12390 = 0;
 var $12391 = 0.0, $12392 = 0, $12393 = 0, $12394 = 0, $12395 = 0.0, $12396 = 0, $12397 = 0, $12398 = 0, $12399 = 0.0, $124 = 0.0, $1240 = 0.0, $12400 = 0, $12401 = 0, $12402 = 0, $12403 = 0, $12404 = 0.0, $12405 = 0, $12406 = 0, $12407 = 0, $12408 = 0.0;
 var $12409 = 0, $1241 = 0.0, $12410 = 0, $12411 = 0, $12412 = 0, $12413 = 0.0, $12414 = 0, $12415 = 0, $12416 = 0, $12417 = 0.0, $12418 = 0, $12419 = 0, $1242 = 0, $12420 = 0, $12421 = 0, $12422 = 0.0, $12423 = 0, $12424 = 0, $12425 = 0, $12426 = 0.0;
 var $12427 = 0, $12428 = 0, $12429 = 0, $1243 = 0, $12430 = 0.0, $12431 = 0, $12432 = 0, $12433 = 0, $12434 = 0.0, $12435 = 0, $12436 = 0, $12437 = 0, $12438 = 0, $12439 = 0.0, $1244 = 0.0, $12440 = 0, $12441 = 0, $12442 = 0, $12443 = 0.0, $12444 = 0;
 var $12445 = 0, $12446 = 0, $12447 = 0.0, $12448 = 0, $12449 = 0, $1245 = 0.0, $12450 = 0, $12451 = 0, $12452 = 0.0, $12453 = 0, $12454 = 0, $12455 = 0, $12456 = 0.0, $12457 = 0, $12458 = 0, $12459 = 0, $1246 = 0.0, $12460 = 0, $12461 = 0.0, $12462 = 0;
 var $12463 = 0, $12464 = 0, $12465 = 0.0, $12466 = 0, $12467 = 0, $12468 = 0, $12469 = 0, $1247 = 0.0, $12470 = 0.0, $12471 = 0, $12472 = 0, $12473 = 0, $12474 = 0.0, $12475 = 0, $12476 = 0, $12477 = 0, $12478 = 0, $12479 = 0.0, $1248 = 0, $12480 = 0;
 var $12481 = 0, $12482 = 0, $12483 = 0.0, $12484 = 0, $12485 = 0, $12486 = 0, $12487 = 0.0, $12488 = 0, $12489 = 0, $1249 = 0, $12490 = 0, $12491 = 0, $12492 = 0.0, $12493 = 0, $12494 = 0, $12495 = 0, $12496 = 0.0, $12497 = 0, $12498 = 0, $12499 = 0;
 var $125 = 0.0, $1250 = 0.0, $12500 = 0.0, $12501 = 0, $12502 = 0, $12503 = 0, $12504 = 0, $12505 = 0.0, $12506 = 0, $12507 = 0, $12508 = 0, $12509 = 0.0, $1251 = 0.0, $12510 = 0, $12511 = 0, $12512 = 0, $12513 = 0.0, $12514 = 0, $12515 = 0, $12516 = 0;
 var $12517 = 0.0, $12518 = 0, $12519 = 0, $1252 = 0.0, $12520 = 0, $12521 = 0, $12522 = 0.0, $12523 = 0, $12524 = 0, $12525 = 0, $12526 = 0.0, $12527 = 0, $12528 = 0, $12529 = 0, $1253 = 0.0, $12530 = 0.0, $12531 = 0, $12532 = 0, $12533 = 0, $12534 = 0;
 var $12535 = 0.0, $12536 = 0, $12537 = 0, $12538 = 0, $12539 = 0.0, $1254 = 0.0, $12540 = 0, $12541 = 0, $12542 = 0, $12543 = 0, $12544 = 0.0, $12545 = 0, $12546 = 0, $12547 = 0, $12548 = 0.0, $12549 = 0, $1255 = 0.0, $12550 = 0, $12551 = 0, $12552 = 0.0;
 var $12553 = 0, $12554 = 0, $12555 = 0, $12556 = 0.0, $12557 = 0, $12558 = 0, $12559 = 0, $1256 = 0.0, $12560 = 0, $12561 = 0.0, $12562 = 0, $12563 = 0, $12564 = 0, $12565 = 0.0, $12566 = 0, $12567 = 0, $12568 = 0, $12569 = 0.0, $1257 = 0, $12570 = 0;
 var $12571 = 0, $12572 = 0, $12573 = 0, $12574 = 0.0, $12575 = 0, $12576 = 0, $12577 = 0, $12578 = 0.0, $12579 = 0, $1258 = 0, $12580 = 0, $12581 = 0, $12582 = 0, $12583 = 0.0, $12584 = 0, $12585 = 0, $12586 = 0, $12587 = 0.0, $12588 = 0, $12589 = 0;
 var $1259 = 0.0, $12590 = 0, $12591 = 0, $12592 = 0.0, $12593 = 0, $12594 = 0, $12595 = 0, $12596 = 0.0, $12597 = 0, $12598 = 0, $12599 = 0, $126 = 0.0, $1260 = 0.0, $12600 = 0.0, $12601 = 0, $12602 = 0, $12603 = 0, $12604 = 0.0, $12605 = 0, $12606 = 0;
 var $12607 = 0, $12608 = 0, $12609 = 0.0, $1261 = 0.0, $12610 = 0, $12611 = 0, $12612 = 0, $12613 = 0.0, $12614 = 0, $12615 = 0, $12616 = 0, $12617 = 0.0, $12618 = 0, $12619 = 0, $1262 = 0.0, $12620 = 0, $12621 = 0, $12622 = 0.0, $12623 = 0, $12624 = 0;
 var $12625 = 0, $12626 = 0.0, $12627 = 0, $12628 = 0, $12629 = 0, $1263 = 0.0, $12630 = 0, $12631 = 0.0, $12632 = 0, $12633 = 0, $12634 = 0, $12635 = 0.0, $12636 = 0, $12637 = 0, $12638 = 0, $12639 = 0, $1264 = 0, $12640 = 0.0, $12641 = 0, $12642 = 0;
 var $12643 = 0, $12644 = 0.0, $12645 = 0, $12646 = 0, $12647 = 0, $12648 = 0, $12649 = 0.0, $1265 = 0.0, $12650 = 0, $12651 = 0, $12652 = 0, $12653 = 0.0, $12654 = 0, $12655 = 0, $12656 = 0, $12657 = 0.0, $12658 = 0, $12659 = 0, $1266 = 0, $12660 = 0;
 var $12661 = 0, $12662 = 0.0, $12663 = 0, $12664 = 0, $12665 = 0, $12666 = 0.0, $12667 = 0, $12668 = 0, $12669 = 0, $1267 = 0, $12670 = 0.0, $12671 = 0, $12672 = 0, $12673 = 0, $12674 = 0, $12675 = 0.0, $12676 = 0, $12677 = 0, $12678 = 0, $12679 = 0.0;
 var $1268 = 0.0, $12680 = 0, $12681 = 0, $12682 = 0, $12683 = 0.0, $12684 = 0, $12685 = 0, $12686 = 0, $12687 = 0.0, $12688 = 0, $12689 = 0, $1269 = 0.0, $12690 = 0, $12691 = 0, $12692 = 0.0, $12693 = 0, $12694 = 0, $12695 = 0, $12696 = 0.0, $12697 = 0;
 var $12698 = 0, $12699 = 0, $127 = 0.0, $1270 = 0, $12700 = 0.0, $12701 = 0, $12702 = 0, $12703 = 0, $12704 = 0, $12705 = 0.0, $12706 = 0, $12707 = 0, $12708 = 0, $12709 = 0.0, $1271 = 0, $12710 = 0, $12711 = 0, $12712 = 0, $12713 = 0, $12714 = 0.0;
 var $12715 = 0, $12716 = 0, $12717 = 0, $12718 = 0.0, $12719 = 0, $1272 = 0.0, $12720 = 0, $12721 = 0, $12722 = 0.0, $12723 = 0, $12724 = 0, $12725 = 0, $12726 = 0.0, $12727 = 0, $12728 = 0, $12729 = 0, $1273 = 0.0, $12730 = 0, $12731 = 0.0, $12732 = 0;
 var $12733 = 0, $12734 = 0, $12735 = 0.0, $12736 = 0, $12737 = 0, $12738 = 0, $12739 = 0.0, $1274 = 0.0, $12740 = 0, $12741 = 0, $12742 = 0, $12743 = 0, $12744 = 0.0, $12745 = 0, $12746 = 0, $12747 = 0, $12748 = 0.0, $12749 = 0, $1275 = 0.0, $12750 = 0;
 var $12751 = 0, $12752 = 0, $12753 = 0.0, $12754 = 0, $12755 = 0, $12756 = 0, $12757 = 0.0, $12758 = 0, $12759 = 0, $1276 = 0, $12760 = 0, $12761 = 0, $12762 = 0.0, $12763 = 0, $12764 = 0, $12765 = 0, $12766 = 0.0, $12767 = 0, $12768 = 0, $12769 = 0;
 var $1277 = 0.0, $12770 = 0.0, $12771 = 0, $12772 = 0, $12773 = 0, $12774 = 0.0, $12775 = 0, $12776 = 0, $12777 = 0, $12778 = 0, $12779 = 0.0, $1278 = 0.0, $12780 = 0, $12781 = 0, $12782 = 0, $12783 = 0.0, $12784 = 0, $12785 = 0, $12786 = 0, $12787 = 0.0;
 var $12788 = 0, $12789 = 0, $1279 = 0.0, $12790 = 0, $12791 = 0, $12792 = 0.0, $12793 = 0, $12794 = 0, $12795 = 0, $12796 = 0.0, $12797 = 0, $12798 = 0, $12799 = 0, $128 = 0.0, $1280 = 0.0, $12800 = 0, $12801 = 0.0, $12802 = 0, $12803 = 0, $12804 = 0;
 var $12805 = 0.0, $12806 = 0, $12807 = 0, $12808 = 0, $12809 = 0, $1281 = 0.0, $12810 = 0.0, $12811 = 0, $12812 = 0, $12813 = 0, $12814 = 0.0, $12815 = 0, $12816 = 0, $12817 = 0, $12818 = 0, $12819 = 0.0, $1282 = 0.0, $12820 = 0, $12821 = 0, $12822 = 0;
 var $12823 = 0.0, $12824 = 0, $12825 = 0, $12826 = 0, $12827 = 0.0, $12828 = 0, $12829 = 0, $1283 = 0.0, $12830 = 0, $12831 = 0, $12832 = 0.0, $12833 = 0, $12834 = 0, $12835 = 0, $12836 = 0.0, $12837 = 0, $12838 = 0, $12839 = 0, $1284 = 0, $12840 = 0.0;
 var $12841 = 0, $12842 = 0, $12843 = 0, $12844 = 0, $12845 = 0.0, $12846 = 0, $12847 = 0, $12848 = 0, $12849 = 0.0, $1285 = 0, $12850 = 0, $12851 = 0, $12852 = 0, $12853 = 0.0, $12854 = 0, $12855 = 0, $12856 = 0, $12857 = 0.0, $12858 = 0, $12859 = 0;
 var $1286 = 0.0, $12860 = 0, $12861 = 0, $12862 = 0.0, $12863 = 0, $12864 = 0, $12865 = 0, $12866 = 0.0, $12867 = 0, $12868 = 0, $12869 = 0, $1287 = 0.0, $12870 = 0.0, $12871 = 0, $12872 = 0, $12873 = 0, $12874 = 0, $12875 = 0.0, $12876 = 0, $12877 = 0;
 var $12878 = 0, $12879 = 0.0, $1288 = 0.0, $12880 = 0, $12881 = 0, $12882 = 0, $12883 = 0, $12884 = 0.0, $12885 = 0, $12886 = 0, $12887 = 0, $12888 = 0.0, $12889 = 0, $1289 = 0.0, $12890 = 0, $12891 = 0, $12892 = 0.0, $12893 = 0, $12894 = 0, $12895 = 0;
 var $12896 = 0.0, $12897 = 0, $12898 = 0, $12899 = 0, $129 = 0.0, $1290 = 0.0, $12900 = 0, $12901 = 0.0, $12902 = 0, $12903 = 0, $12904 = 0, $12905 = 0.0, $12906 = 0, $12907 = 0, $12908 = 0, $12909 = 0.0, $1291 = 0.0, $12910 = 0, $12911 = 0, $12912 = 0;
 var $12913 = 0, $12914 = 0.0, $12915 = 0, $12916 = 0, $12917 = 0, $12918 = 0.0, $12919 = 0, $1292 = 0, $12920 = 0, $12921 = 0, $12922 = 0, $12923 = 0.0, $12924 = 0, $12925 = 0, $12926 = 0, $12927 = 0.0, $12928 = 0, $12929 = 0, $1293 = 0.0, $12930 = 0;
 var $12931 = 0, $12932 = 0.0, $12933 = 0, $12934 = 0, $12935 = 0, $12936 = 0.0, $12937 = 0, $12938 = 0, $12939 = 0, $1294 = 0, $12940 = 0.0, $12941 = 0, $12942 = 0, $12943 = 0, $12944 = 0.0, $12945 = 0, $12946 = 0, $12947 = 0, $12948 = 0, $12949 = 0.0;
 var $1295 = 0, $12950 = 0, $12951 = 0, $12952 = 0, $12953 = 0.0, $12954 = 0, $12955 = 0, $12956 = 0, $12957 = 0.0, $12958 = 0, $12959 = 0, $1296 = 0.0, $12960 = 0, $12961 = 0, $12962 = 0.0, $12963 = 0, $12964 = 0, $12965 = 0, $12966 = 0.0, $12967 = 0;
 var $12968 = 0, $12969 = 0, $1297 = 0.0, $12970 = 0, $12971 = 0.0, $12972 = 0, $12973 = 0, $12974 = 0, $12975 = 0.0, $12976 = 0, $12977 = 0, $12978 = 0, $12979 = 0, $1298 = 0, $12980 = 0.0, $12981 = 0, $12982 = 0, $12983 = 0, $12984 = 0.0, $12985 = 0;
 var $12986 = 0, $12987 = 0, $12988 = 0, $12989 = 0.0, $1299 = 0, $12990 = 0, $12991 = 0, $12992 = 0, $12993 = 0.0, $12994 = 0, $12995 = 0, $12996 = 0, $12997 = 0.0, $12998 = 0, $12999 = 0, $13 = 0.0, $130 = 0.0, $1300 = 0.0, $13000 = 0, $13001 = 0;
 var $13002 = 0.0, $13003 = 0, $13004 = 0, $13005 = 0, $13006 = 0.0, $13007 = 0, $13008 = 0, $13009 = 0, $1301 = 0.0, $13010 = 0.0, $13011 = 0, $13012 = 0, $13013 = 0, $13014 = 0, $13015 = 0.0, $13016 = 0, $13017 = 0, $13018 = 0, $13019 = 0.0, $1302 = 0.0;
 var $13020 = 0, $13021 = 0, $13022 = 0, $13023 = 0.0, $13024 = 0, $13025 = 0, $13026 = 0, $13027 = 0.0, $13028 = 0, $13029 = 0, $1303 = 0.0, $13030 = 0, $13031 = 0, $13032 = 0.0, $13033 = 0, $13034 = 0, $13035 = 0, $13036 = 0.0, $13037 = 0, $13038 = 0;
 var $13039 = 0, $1304 = 0, $13040 = 0.0, $13041 = 0, $13042 = 0, $13043 = 0, $13044 = 0, $13045 = 0.0, $13046 = 0, $13047 = 0, $13048 = 0, $13049 = 0.0, $1305 = 0.0, $13050 = 0, $13051 = 0, $13052 = 0, $13053 = 0, $13054 = 0.0, $13055 = 0, $13056 = 0;
 var $13057 = 0, $13058 = 0.0, $13059 = 0, $1306 = 0.0, $13060 = 0, $13061 = 0, $13062 = 0.0, $13063 = 0, $13064 = 0, $13065 = 0, $13066 = 0.0, $13067 = 0, $13068 = 0, $13069 = 0, $1307 = 0.0, $13070 = 0, $13071 = 0.0, $13072 = 0, $13073 = 0, $13074 = 0;
 var $13075 = 0.0, $13076 = 0, $13077 = 0, $13078 = 0, $13079 = 0.0, $1308 = 0.0, $13080 = 0, $13081 = 0, $13082 = 0, $13083 = 0, $13084 = 0.0, $13085 = 0, $13086 = 0, $13087 = 0, $13088 = 0.0, $13089 = 0, $1309 = 0.0, $13090 = 0, $13091 = 0, $13092 = 0;
 var $13093 = 0.0, $13094 = 0, $13095 = 0, $13096 = 0, $13097 = 0.0, $13098 = 0, $13099 = 0, $131 = 0.0, $1310 = 0.0, $13100 = 0, $13101 = 0, $13102 = 0.0, $13103 = 0, $13104 = 0, $13105 = 0, $13106 = 0.0, $13107 = 0, $13108 = 0, $13109 = 0, $1311 = 0.0;
 var $13110 = 0.0, $13111 = 0, $13112 = 0, $13113 = 0, $13114 = 0.0, $13115 = 0, $13116 = 0, $13117 = 0, $13118 = 0, $13119 = 0.0, $1312 = 0.0, $13120 = 0, $13121 = 0, $13122 = 0, $13123 = 0.0, $13124 = 0, $13125 = 0, $13126 = 0, $13127 = 0.0, $13128 = 0;
 var $13129 = 0, $1313 = 0, $13130 = 0, $13131 = 0, $13132 = 0.0, $13133 = 0, $13134 = 0, $13135 = 0, $13136 = 0.0, $13137 = 0, $13138 = 0, $13139 = 0, $1314 = 0, $13140 = 0, $13141 = 0.0, $13142 = 0, $13143 = 0, $13144 = 0, $13145 = 0.0, $13146 = 0;
 var $13147 = 0, $13148 = 0, $13149 = 0, $1315 = 0.0, $13150 = 0.0, $13151 = 0, $13152 = 0, $13153 = 0, $13154 = 0.0, $13155 = 0, $13156 = 0, $13157 = 0, $13158 = 0, $13159 = 0.0, $1316 = 0.0, $13160 = 0, $13161 = 0, $13162 = 0, $13163 = 0.0, $13164 = 0;
 var $13165 = 0, $13166 = 0, $13167 = 0.0, $13168 = 0, $13169 = 0, $1317 = 0.0, $13170 = 0, $13171 = 0, $13172 = 0.0, $13173 = 0, $13174 = 0, $13175 = 0, $13176 = 0.0, $13177 = 0, $13178 = 0, $13179 = 0, $1318 = 0.0, $13180 = 0.0, $13181 = 0, $13182 = 0;
 var $13183 = 0, $13184 = 0, $13185 = 0.0, $13186 = 0, $13187 = 0, $13188 = 0, $13189 = 0.0, $1319 = 0.0, $13190 = 0, $13191 = 0, $13192 = 0, $13193 = 0.0, $13194 = 0, $13195 = 0, $13196 = 0, $13197 = 0.0, $13198 = 0, $13199 = 0, $132 = 0.0, $1320 = 0;
 var $13200 = 0, $13201 = 0, $13202 = 0.0, $13203 = 0, $13204 = 0, $13205 = 0, $13206 = 0.0, $13207 = 0, $13208 = 0, $13209 = 0, $1321 = 0.0, $13210 = 0.0, $13211 = 0, $13212 = 0, $13213 = 0, $13214 = 0, $13215 = 0.0, $13216 = 0, $13217 = 0, $13218 = 0;
 var $13219 = 0.0, $1322 = 0, $13220 = 0, $13221 = 0, $13222 = 0, $13223 = 0, $13224 = 0.0, $13225 = 0, $13226 = 0, $13227 = 0, $13228 = 0.0, $13229 = 0, $1323 = 0, $13230 = 0, $13231 = 0, $13232 = 0.0, $13233 = 0, $13234 = 0, $13235 = 0, $13236 = 0.0;
 var $13237 = 0, $13238 = 0, $13239 = 0, $1324 = 0.0, $13240 = 0, $13241 = 0.0, $13242 = 0, $13243 = 0, $13244 = 0, $13245 = 0.0, $13246 = 0, $13247 = 0, $13248 = 0, $13249 = 0.0, $1325 = 0.0, $13250 = 0, $13251 = 0, $13252 = 0, $13253 = 0, $13254 = 0.0;
 var $13255 = 0, $13256 = 0, $13257 = 0, $13258 = 0.0, $13259 = 0, $1326 = 0.0, $13260 = 0, $13261 = 0, $13262 = 0, $13263 = 0.0, $13264 = 0, $13265 = 0, $13266 = 0, $13267 = 0.0, $13268 = 0, $13269 = 0, $1327 = 0, $13270 = 0, $13271 = 0, $13272 = 0.0;
 var $13273 = 0, $13274 = 0, $13275 = 0, $13276 = 0.0, $13277 = 0, $13278 = 0, $13279 = 0, $1328 = 0, $13280 = 0.0, $13281 = 0, $13282 = 0, $13283 = 0, $13284 = 0.0, $13285 = 0, $13286 = 0, $13287 = 0, $13288 = 0, $13289 = 0.0, $1329 = 0.0, $13290 = 0;
 var $13291 = 0, $13292 = 0, $13293 = 0.0, $13294 = 0, $13295 = 0, $13296 = 0, $13297 = 0.0, $13298 = 0, $13299 = 0, $133 = 0.0, $1330 = 0, $13300 = 0, $13301 = 0, $13302 = 0.0, $13303 = 0, $13304 = 0, $13305 = 0, $13306 = 0.0, $13307 = 0, $13308 = 0;
 var $13309 = 0, $1331 = 0, $13310 = 0, $13311 = 0.0, $13312 = 0, $13313 = 0, $13314 = 0, $13315 = 0.0, $13316 = 0, $13317 = 0, $13318 = 0, $13319 = 0, $1332 = 0.0, $13320 = 0.0, $13321 = 0, $13322 = 0, $13323 = 0, $13324 = 0.0, $13325 = 0, $13326 = 0;
 var $13327 = 0, $13328 = 0, $13329 = 0.0, $1333 = 0.0, $13330 = 0, $13331 = 0, $13332 = 0, $13333 = 0.0, $13334 = 0, $13335 = 0, $13336 = 0, $13337 = 0.0, $13338 = 0, $13339 = 0, $1334 = 0.0, $13340 = 0, $13341 = 0, $13342 = 0.0, $13343 = 0, $13344 = 0;
 var $13345 = 0, $13346 = 0.0, $13347 = 0, $13348 = 0, $13349 = 0, $1335 = 0.0, $13350 = 0.0, $13351 = 0, $13352 = 0, $13353 = 0, $13354 = 0, $13355 = 0.0, $13356 = 0, $13357 = 0, $13358 = 0, $13359 = 0.0, $1336 = 0, $13360 = 0, $13361 = 0, $13362 = 0;
 var $13363 = 0.0, $13364 = 0, $13365 = 0, $13366 = 0, $13367 = 0.0, $13368 = 0, $13369 = 0, $1337 = 0, $13370 = 0, $13371 = 0, $13372 = 0.0, $13373 = 0, $13374 = 0, $13375 = 0, $13376 = 0.0, $13377 = 0, $13378 = 0, $13379 = 0, $1338 = 0.0, $13380 = 0.0;
 var $13381 = 0, $13382 = 0, $13383 = 0, $13384 = 0, $13385 = 0.0, $13386 = 0, $13387 = 0, $13388 = 0, $13389 = 0.0, $1339 = 0.0, $13390 = 0, $13391 = 0, $13392 = 0, $13393 = 0, $13394 = 0.0, $13395 = 0, $13396 = 0, $13397 = 0, $13398 = 0.0, $13399 = 0;
 var $134 = 0.0, $1340 = 0.0, $13400 = 0, $13401 = 0, $13402 = 0.0, $13403 = 0, $13404 = 0, $13405 = 0, $13406 = 0.0, $13407 = 0, $13408 = 0, $13409 = 0, $1341 = 0, $13410 = 0, $13411 = 0.0, $13412 = 0, $13413 = 0, $13414 = 0, $13415 = 0.0, $13416 = 0;
 var $13417 = 0, $13418 = 0, $13419 = 0.0, $1342 = 0, $13420 = 0, $13421 = 0, $13422 = 0, $13423 = 0, $13424 = 0.0, $13425 = 0, $13426 = 0, $13427 = 0, $13428 = 0.0, $13429 = 0, $1343 = 0.0, $13430 = 0, $13431 = 0, $13432 = 0, $13433 = 0.0, $13434 = 0;
 var $13435 = 0, $13436 = 0, $13437 = 0.0, $13438 = 0, $13439 = 0, $1344 = 0.0, $13440 = 0, $13441 = 0, $13442 = 0.0, $13443 = 0, $13444 = 0, $13445 = 0, $13446 = 0.0, $13447 = 0, $13448 = 0, $13449 = 0, $1345 = 0.0, $13450 = 0.0, $13451 = 0, $13452 = 0;
 var $13453 = 0, $13454 = 0.0, $13455 = 0, $13456 = 0, $13457 = 0, $13458 = 0, $13459 = 0.0, $1346 = 0, $13460 = 0, $13461 = 0, $13462 = 0, $13463 = 0.0, $13464 = 0, $13465 = 0, $13466 = 0, $13467 = 0.0, $13468 = 0, $13469 = 0, $1347 = 0, $13470 = 0;
 var $13471 = 0, $13472 = 0.0, $13473 = 0, $13474 = 0, $13475 = 0, $13476 = 0.0, $13477 = 0, $13478 = 0, $13479 = 0, $1348 = 0.0, $13480 = 0, $13481 = 0.0, $13482 = 0, $13483 = 0, $13484 = 0, $13485 = 0.0, $13486 = 0, $13487 = 0, $13488 = 0, $13489 = 0;
 var $1349 = 0.0, $13490 = 0.0, $13491 = 0, $13492 = 0, $13493 = 0, $13494 = 0.0, $13495 = 0, $13496 = 0, $13497 = 0, $13498 = 0, $13499 = 0.0, $135 = 0.0, $1350 = 0.0, $13500 = 0, $13501 = 0, $13502 = 0, $13503 = 0.0, $13504 = 0, $13505 = 0, $13506 = 0;
 var $13507 = 0.0, $13508 = 0, $13509 = 0, $1351 = 0.0, $13510 = 0, $13511 = 0, $13512 = 0.0, $13513 = 0, $13514 = 0, $13515 = 0, $13516 = 0.0, $13517 = 0, $13518 = 0, $13519 = 0, $1352 = 0.0, $13520 = 0.0, $13521 = 0, $13522 = 0, $13523 = 0, $13524 = 0;
 var $13525 = 0.0, $13526 = 0, $13527 = 0, $13528 = 0, $13529 = 0.0, $1353 = 0, $13530 = 0, $13531 = 0, $13532 = 0, $13533 = 0.0, $13534 = 0, $13535 = 0, $13536 = 0, $13537 = 0.0, $13538 = 0, $13539 = 0, $1354 = 0, $13540 = 0, $13541 = 0, $13542 = 0.0;
 var $13543 = 0, $13544 = 0, $13545 = 0, $13546 = 0.0, $13547 = 0, $13548 = 0, $13549 = 0, $1355 = 0, $13550 = 0.0, $13551 = 0, $13552 = 0, $13553 = 0, $13554 = 0, $13555 = 0.0, $13556 = 0, $13557 = 0, $13558 = 0, $13559 = 0.0, $1356 = 0.0, $13560 = 0;
 var $13561 = 0, $13562 = 0, $13563 = 0, $13564 = 0.0, $13565 = 0, $13566 = 0, $13567 = 0, $13568 = 0.0, $13569 = 0, $1357 = 0, $13570 = 0, $13571 = 0, $13572 = 0.0, $13573 = 0, $13574 = 0, $13575 = 0, $13576 = 0.0, $13577 = 0, $13578 = 0, $13579 = 0;
 var $1358 = 0.0, $13580 = 0, $13581 = 0.0, $13582 = 0, $13583 = 0, $13584 = 0, $13585 = 0.0, $13586 = 0, $13587 = 0, $13588 = 0, $13589 = 0.0, $1359 = 0, $13590 = 0, $13591 = 0, $13592 = 0, $13593 = 0, $13594 = 0.0, $13595 = 0, $13596 = 0, $13597 = 0;
 var $13598 = 0.0, $13599 = 0, $136 = 0.0, $1360 = 0, $13600 = 0, $13601 = 0, $13602 = 0, $13603 = 0.0, $13604 = 0, $13605 = 0, $13606 = 0, $13607 = 0.0, $13608 = 0, $13609 = 0, $1361 = 0.0, $13610 = 0, $13611 = 0, $13612 = 0.0, $13613 = 0, $13614 = 0;
 var $13615 = 0, $13616 = 0.0, $13617 = 0, $13618 = 0, $13619 = 0, $1362 = 0.0, $13620 = 0.0, $13621 = 0, $13622 = 0, $13623 = 0, $13624 = 0.0, $13625 = 0, $13626 = 0, $13627 = 0, $13628 = 0, $13629 = 0.0, $1363 = 0.0, $13630 = 0, $13631 = 0, $13632 = 0;
 var $13633 = 0.0, $13634 = 0, $13635 = 0, $13636 = 0, $13637 = 0.0, $13638 = 0, $13639 = 0, $1364 = 0.0, $13640 = 0, $13641 = 0, $13642 = 0.0, $13643 = 0, $13644 = 0, $13645 = 0, $13646 = 0.0, $13647 = 0, $13648 = 0, $13649 = 0, $1365 = 0.0, $13650 = 0;
 var $13651 = 0.0, $13652 = 0, $13653 = 0, $13654 = 0, $13655 = 0.0, $13656 = 0, $13657 = 0, $13658 = 0, $13659 = 0, $1366 = 0.0, $13660 = 0.0, $13661 = 0, $13662 = 0, $13663 = 0, $13664 = 0.0, $13665 = 0, $13666 = 0, $13667 = 0, $13668 = 0, $13669 = 0.0;
 var $1367 = 0.0, $13670 = 0, $13671 = 0, $13672 = 0, $13673 = 0.0, $13674 = 0, $13675 = 0, $13676 = 0, $13677 = 0.0, $13678 = 0, $13679 = 0, $1368 = 0.0, $13680 = 0, $13681 = 0, $13682 = 0.0, $13683 = 0, $13684 = 0, $13685 = 0, $13686 = 0.0, $13687 = 0;
 var $13688 = 0, $13689 = 0, $1369 = 0, $13690 = 0.0, $13691 = 0, $13692 = 0, $13693 = 0, $13694 = 0, $13695 = 0.0, $13696 = 0, $13697 = 0, $13698 = 0, $13699 = 0.0, $137 = 0.0, $1370 = 0.0, $13700 = 0, $13701 = 0, $13702 = 0, $13703 = 0.0, $13704 = 0;
 var $13705 = 0, $13706 = 0, $13707 = 0.0, $13708 = 0, $13709 = 0, $1371 = 0, $13710 = 0, $13711 = 0, $13712 = 0.0, $13713 = 0, $13714 = 0, $13715 = 0, $13716 = 0.0, $13717 = 0, $13718 = 0, $13719 = 0, $1372 = 0, $13720 = 0.0, $13721 = 0, $13722 = 0;
 var $13723 = 0, $13724 = 0, $13725 = 0.0, $13726 = 0, $13727 = 0, $13728 = 0, $13729 = 0.0, $1373 = 0.0, $13730 = 0, $13731 = 0, $13732 = 0, $13733 = 0, $13734 = 0.0, $13735 = 0, $13736 = 0, $13737 = 0, $13738 = 0.0, $13739 = 0, $1374 = 0.0, $13740 = 0;
 var $13741 = 0, $13742 = 0.0, $13743 = 0, $13744 = 0, $13745 = 0, $13746 = 0.0, $13747 = 0, $13748 = 0, $13749 = 0, $1375 = 0.0, $13750 = 0, $13751 = 0.0, $13752 = 0, $13753 = 0, $13754 = 0, $13755 = 0.0, $13756 = 0, $13757 = 0, $13758 = 0, $13759 = 0.0;
 var $1376 = 0.0, $13760 = 0, $13761 = 0, $13762 = 0, $13763 = 0, $13764 = 0.0, $13765 = 0, $13766 = 0, $13767 = 0, $13768 = 0.0, $13769 = 0, $1377 = 0, $13770 = 0, $13771 = 0, $13772 = 0, $13773 = 0.0, $13774 = 0, $13775 = 0, $13776 = 0, $13777 = 0.0;
 var $13778 = 0, $13779 = 0, $1378 = 0, $13780 = 0, $13781 = 0, $13782 = 0.0, $13783 = 0, $13784 = 0, $13785 = 0, $13786 = 0.0, $13787 = 0, $13788 = 0, $13789 = 0, $1379 = 0.0, $13790 = 0.0, $13791 = 0, $13792 = 0, $13793 = 0, $13794 = 0.0, $13795 = 0;
 var $13796 = 0, $13797 = 0, $13798 = 0, $13799 = 0.0, $138 = 0.0, $1380 = 0.0, $13800 = 0, $13801 = 0, $13802 = 0, $13803 = 0.0, $13804 = 0, $13805 = 0, $13806 = 0, $13807 = 0.0, $13808 = 0, $13809 = 0, $1381 = 0.0, $13810 = 0, $13811 = 0, $13812 = 0.0;
 var $13813 = 0, $13814 = 0, $13815 = 0, $13816 = 0.0, $13817 = 0, $13818 = 0, $13819 = 0, $1382 = 0.0, $13820 = 0, $13821 = 0.0, $13822 = 0, $13823 = 0, $13824 = 0, $13825 = 0.0, $13826 = 0, $13827 = 0, $13828 = 0, $13829 = 0, $1383 = 0.0, $13830 = 0.0;
 var $13831 = 0, $13832 = 0, $13833 = 0, $13834 = 0.0, $13835 = 0, $13836 = 0, $13837 = 0, $13838 = 0, $13839 = 0.0, $1384 = 0.0, $13840 = 0, $13841 = 0, $13842 = 0, $13843 = 0.0, $13844 = 0, $13845 = 0, $13846 = 0, $13847 = 0.0, $13848 = 0, $13849 = 0;
 var $1385 = 0.0, $13850 = 0, $13851 = 0, $13852 = 0.0, $13853 = 0, $13854 = 0, $13855 = 0, $13856 = 0.0, $13857 = 0, $13858 = 0, $13859 = 0, $1386 = 0.0, $13860 = 0.0, $13861 = 0, $13862 = 0, $13863 = 0, $13864 = 0, $13865 = 0.0, $13866 = 0, $13867 = 0;
 var $13868 = 0, $13869 = 0.0, $1387 = 0, $13870 = 0, $13871 = 0, $13872 = 0, $13873 = 0.0, $13874 = 0, $13875 = 0, $13876 = 0, $13877 = 0.0, $13878 = 0, $13879 = 0, $1388 = 0, $13880 = 0, $13881 = 0, $13882 = 0.0, $13883 = 0, $13884 = 0, $13885 = 0;
 var $13886 = 0.0, $13887 = 0, $13888 = 0, $13889 = 0, $1389 = 0.0, $13890 = 0.0, $13891 = 0, $13892 = 0, $13893 = 0, $13894 = 0, $13895 = 0.0, $13896 = 0, $13897 = 0, $13898 = 0, $13899 = 0.0, $139 = 0.0, $1390 = 0.0, $13900 = 0, $13901 = 0, $13902 = 0;
 var $13903 = 0, $13904 = 0.0, $13905 = 0, $13906 = 0, $13907 = 0, $13908 = 0.0, $13909 = 0, $1391 = 0.0, $13910 = 0, $13911 = 0, $13912 = 0.0, $13913 = 0, $13914 = 0, $13915 = 0, $13916 = 0.0, $13917 = 0, $13918 = 0, $13919 = 0, $1392 = 0, $13920 = 0;
 var $13921 = 0.0, $13922 = 0, $13923 = 0, $13924 = 0, $13925 = 0.0, $13926 = 0, $13927 = 0, $13928 = 0, $13929 = 0.0, $1393 = 0, $13930 = 0, $13931 = 0, $13932 = 0, $13933 = 0, $13934 = 0.0, $13935 = 0, $13936 = 0, $13937 = 0, $13938 = 0.0, $13939 = 0;
 var $1394 = 0.0, $13940 = 0, $13941 = 0, $13942 = 0, $13943 = 0.0, $13944 = 0, $13945 = 0, $13946 = 0, $13947 = 0.0, $13948 = 0, $13949 = 0, $1395 = 0.0, $13950 = 0, $13951 = 0, $13952 = 0.0, $13953 = 0, $13954 = 0, $13955 = 0, $13956 = 0.0, $13957 = 0;
 var $13958 = 0, $13959 = 0, $1396 = 0.0, $13960 = 0.0, $13961 = 0, $13962 = 0, $13963 = 0, $13964 = 0.0, $13965 = 0, $13966 = 0, $13967 = 0, $13968 = 0, $13969 = 0.0, $1397 = 0, $13970 = 0, $13971 = 0, $13972 = 0, $13973 = 0.0, $13974 = 0, $13975 = 0;
 var $13976 = 0, $13977 = 0.0, $13978 = 0, $13979 = 0, $1398 = 0, $13980 = 0, $13981 = 0, $13982 = 0.0, $13983 = 0, $13984 = 0, $13985 = 0, $13986 = 0.0, $13987 = 0, $13988 = 0, $13989 = 0, $1399 = 0.0, $13990 = 0, $13991 = 0.0, $13992 = 0, $13993 = 0;
 var $13994 = 0, $13995 = 0.0, $13996 = 0, $13997 = 0, $13998 = 0, $13999 = 0, $14 = 0, $140 = 0.0, $1400 = 0.0, $14000 = 0.0, $14001 = 0, $14002 = 0, $14003 = 0, $14004 = 0.0, $14005 = 0, $14006 = 0, $14007 = 0, $14008 = 0, $14009 = 0.0, $1401 = 0.0;
 var $14010 = 0, $14011 = 0, $14012 = 0, $14013 = 0.0, $14014 = 0, $14015 = 0, $14016 = 0, $14017 = 0.0, $14018 = 0, $14019 = 0, $1402 = 0.0, $14020 = 0, $14021 = 0.0, $14022 = 0, $14023 = 0, $14024 = 0, $14025 = 0.0, $14026 = 0, $14027 = 0, $14028 = 0;
 var $14029 = 0, $1403 = 0.0, $14030 = 0, $14031 = 0, $14032 = 0, $14033 = 0, $14034 = 0.0, $14035 = 0, $14036 = 0, $14037 = 0, $14038 = 0, $14039 = 0, $1404 = 0, $14040 = 0, $14041 = 0, $14042 = 0, $14043 = 0, $14044 = 0, $14045 = 0, $1405 = 0.0;
 var $1406 = 0, $1407 = 0, $1408 = 0.0, $1409 = 0.0, $141 = 0.0, $1410 = 0.0, $1411 = 0.0, $1412 = 0, $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0, $1417 = 0, $1418 = 0.0, $1419 = 0.0, $142 = 0.0, $1420 = 0.0, $1421 = 0.0, $1422 = 0, $1423 = 0;
 var $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0.0, $1428 = 0.0, $1429 = 0.0, $143 = 0.0, $1430 = 0, $1431 = 0, $1432 = 0.0, $1433 = 0.0, $1434 = 0.0, $1435 = 0.0, $1436 = 0.0, $1437 = 0.0, $1438 = 0, $1439 = 0.0, $144 = 0.0, $1440 = 0, $1441 = 0;
 var $1442 = 0.0, $1443 = 0.0, $1444 = 0, $1445 = 0, $1446 = 0.0, $1447 = 0.0, $1448 = 0.0, $1449 = 0.0, $145 = 0, $1450 = 0, $1451 = 0.0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0.0, $1456 = 0.0, $1457 = 0.0, $1458 = 0, $1459 = 0, $146 = 0.0;
 var $1460 = 0.0, $1461 = 0.0, $1462 = 0.0, $1463 = 0.0, $1464 = 0.0, $1465 = 0.0, $1466 = 0, $1467 = 0.0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0.0, $1471 = 0.0, $1472 = 0.0, $1473 = 0, $1474 = 0.0, $1475 = 0, $1476 = 0, $1477 = 0.0, $1478 = 0.0;
 var $1479 = 0.0, $148 = 0.0, $1480 = 0.0, $1481 = 0, $1482 = 0, $1483 = 0.0, $1484 = 0.0, $1485 = 0.0, $1486 = 0, $1487 = 0, $1488 = 0.0, $1489 = 0.0, $149 = 0.0, $1490 = 0.0, $1491 = 0, $1492 = 0, $1493 = 0.0, $1494 = 0.0, $1495 = 0.0, $1496 = 0.0;
 var $1497 = 0.0, $1498 = 0, $1499 = 0, $15 = 0.0, $150 = 0.0, $1500 = 0, $1501 = 0.0, $1502 = 0, $1503 = 0.0, $1504 = 0, $1505 = 0, $1506 = 0.0, $1507 = 0.0, $1508 = 0.0, $1509 = 0.0, $151 = 0.0, $1510 = 0.0, $1511 = 0.0, $1512 = 0.0, $1513 = 0.0;
 var $1514 = 0, $1515 = 0.0, $1516 = 0, $1517 = 0, $1518 = 0.0, $1519 = 0.0, $152 = 0.0, $1520 = 0.0, $1521 = 0.0, $1522 = 0, $1523 = 0, $1524 = 0.0, $1525 = 0.0, $1526 = 0.0, $1527 = 0.0, $1528 = 0.0, $1529 = 0.0, $153 = 0.0, $1530 = 0.0, $1531 = 0.0;
 var $1532 = 0, $1533 = 0, $1534 = 0.0, $1535 = 0.0, $1536 = 0.0, $1537 = 0, $1538 = 0, $1539 = 0.0, $154 = 0.0, $1540 = 0.0, $1541 = 0.0, $1542 = 0, $1543 = 0, $1544 = 0.0, $1545 = 0.0, $1546 = 0.0, $1547 = 0.0, $1548 = 0.0, $1549 = 0, $155 = 0.0;
 var $1550 = 0.0, $1551 = 0, $1552 = 0, $1553 = 0.0, $1554 = 0.0, $1555 = 0.0, $1556 = 0.0, $1557 = 0, $1558 = 0.0, $1559 = 0.0, $156 = 0.0, $1560 = 0.0, $1561 = 0, $1562 = 0, $1563 = 0.0, $1564 = 0.0, $1565 = 0.0, $1566 = 0.0, $1567 = 0, $1568 = 0;
 var $1569 = 0.0, $157 = 0.0, $1570 = 0.0, $1571 = 0.0, $1572 = 0.0, $1573 = 0.0, $1574 = 0.0, $1575 = 0, $1576 = 0, $1577 = 0.0, $1578 = 0.0, $1579 = 0.0, $158 = 0.0, $1580 = 0.0, $1581 = 0.0, $1582 = 0.0, $1583 = 0, $1584 = 0.0, $1585 = 0, $1586 = 0;
 var $1587 = 0.0, $1588 = 0.0, $1589 = 0.0, $159 = 0.0, $1590 = 0, $1591 = 0.0, $1592 = 0, $1593 = 0, $1594 = 0.0, $1595 = 0.0, $1596 = 0.0, $1597 = 0.0, $1598 = 0, $1599 = 0, $16 = 0.0, $160 = 0.0, $1600 = 0.0, $1601 = 0.0, $1602 = 0.0, $1603 = 0;
 var $1604 = 0, $1605 = 0.0, $1606 = 0.0, $1607 = 0.0, $1608 = 0, $1609 = 0, $161 = 0.0, $1610 = 0.0, $1611 = 0.0, $1612 = 0.0, $1613 = 0.0, $1614 = 0.0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0.0, $1619 = 0, $162 = 0.0, $1620 = 0.0, $1621 = 0;
 var $1622 = 0, $1623 = 0.0, $1624 = 0.0, $1625 = 0.0, $1626 = 0.0, $1627 = 0.0, $1628 = 0.0, $1629 = 0.0, $163 = 0.0, $1630 = 0.0, $1631 = 0, $1632 = 0.0, $1633 = 0, $1634 = 0, $1635 = 0.0, $1636 = 0.0, $1637 = 0.0, $1638 = 0.0, $1639 = 0, $164 = 0.0;
 var $1640 = 0, $1641 = 0.0, $1642 = 0.0, $1643 = 0.0, $1644 = 0.0, $1645 = 0.0, $1646 = 0.0, $1647 = 0.0, $1648 = 0.0, $1649 = 0, $165 = 0.0, $1650 = 0, $1651 = 0.0, $1652 = 0.0, $1653 = 0.0, $1654 = 0, $1655 = 0, $1656 = 0.0, $1657 = 0.0, $1658 = 0.0;
 var $1659 = 0, $166 = 0.0, $1660 = 0, $1661 = 0.0, $1662 = 0.0, $1663 = 0.0, $1664 = 0.0, $1665 = 0.0, $1666 = 0, $1667 = 0.0, $1668 = 0, $1669 = 0, $167 = 0.0, $1670 = 0.0, $1671 = 0.0, $1672 = 0.0, $1673 = 0, $1674 = 0.0, $1675 = 0, $1676 = 0;
 var $1677 = 0.0, $1678 = 0.0, $1679 = 0.0, $168 = 0.0, $1680 = 0.0, $1681 = 0, $1682 = 0, $1683 = 0.0, $1684 = 0.0, $1685 = 0.0, $1686 = 0, $1687 = 0, $1688 = 0.0, $1689 = 0.0, $169 = 0.0, $1690 = 0.0, $1691 = 0, $1692 = 0, $1693 = 0.0, $1694 = 0.0;
 var $1695 = 0.0, $1696 = 0.0, $1697 = 0.0, $1698 = 0, $1699 = 0.0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0.0, $1703 = 0.0, $1704 = 0.0, $1705 = 0.0, $1706 = 0, $1707 = 0.0, $1708 = 0.0, $1709 = 0.0, $171 = 0.0, $1710 = 0.0, $1711 = 0.0;
 var $1712 = 0.0, $1713 = 0.0, $1714 = 0, $1715 = 0, $1716 = 0.0, $1717 = 0.0, $1718 = 0.0, $1719 = 0.0, $172 = 0, $1720 = 0, $1721 = 0.0, $1722 = 0.0, $1723 = 0.0, $1724 = 0.0, $1725 = 0.0, $1726 = 0.0, $1727 = 0.0, $1728 = 0.0, $1729 = 0, $173 = 0.0;
 var $1730 = 0, $1731 = 0.0, $1732 = 0.0, $1733 = 0.0, $1734 = 0.0, $1735 = 0, $1736 = 0.0, $1737 = 0.0, $1738 = 0.0, $1739 = 0.0, $174 = 0.0, $1740 = 0.0, $1741 = 0.0, $1742 = 0.0, $1743 = 0.0, $1744 = 0.0, $1745 = 0.0, $1746 = 0, $1747 = 0.0, $1748 = 0.0;
 var $1749 = 0.0, $175 = 0.0, $1750 = 0, $1751 = 0, $1752 = 0.0, $1753 = 0.0, $1754 = 0.0, $1755 = 0.0, $1756 = 0, $1757 = 0, $1758 = 0.0, $1759 = 0.0, $176 = 0.0, $1760 = 0.0, $1761 = 0.0, $1762 = 0.0, $1763 = 0, $1764 = 0, $1765 = 0.0, $1766 = 0;
 var $1767 = 0.0, $1768 = 0, $1769 = 0, $177 = 0.0, $1770 = 0.0, $1771 = 0.0, $1772 = 0.0, $1773 = 0.0, $1774 = 0.0, $1775 = 0.0, $1776 = 0.0, $1777 = 0.0, $1778 = 0.0, $1779 = 0, $178 = 0.0, $1780 = 0, $1781 = 0.0, $1782 = 0.0, $1783 = 0.0, $1784 = 0.0;
 var $1785 = 0, $1786 = 0, $1787 = 0.0, $1788 = 0.0, $1789 = 0.0, $179 = 0.0, $1790 = 0, $1791 = 0, $1792 = 0.0, $1793 = 0.0, $1794 = 0.0, $1795 = 0.0, $1796 = 0.0, $1797 = 0, $1798 = 0, $1799 = 0.0, $18 = 0.0, $180 = 0.0, $1800 = 0.0, $1801 = 0.0;
 var $1802 = 0, $1803 = 0, $1804 = 0.0, $1805 = 0.0, $1806 = 0.0, $1807 = 0, $1808 = 0, $1809 = 0.0, $181 = 0.0, $1810 = 0.0, $1811 = 0.0, $1812 = 0.0, $1813 = 0.0, $1814 = 0, $1815 = 0.0, $1816 = 0, $1817 = 0, $1818 = 0.0, $1819 = 0.0, $182 = 0.0;
 var $1820 = 0.0, $1821 = 0.0, $1822 = 0, $1823 = 0.0, $1824 = 0.0, $1825 = 0.0, $1826 = 0, $1827 = 0, $1828 = 0.0, $1829 = 0.0, $183 = 0.0, $1830 = 0.0, $1831 = 0.0, $1832 = 0, $1833 = 0, $1834 = 0.0, $1835 = 0.0, $1836 = 0.0, $1837 = 0.0, $1838 = 0.0;
 var $1839 = 0.0, $184 = 0.0, $1840 = 0, $1841 = 0, $1842 = 0.0, $1843 = 0.0, $1844 = 0.0, $1845 = 0.0, $1846 = 0.0, $1847 = 0.0, $1848 = 0, $1849 = 0.0, $185 = 0.0, $1850 = 0, $1851 = 0, $1852 = 0.0, $1853 = 0.0, $1854 = 0, $1855 = 0, $1856 = 0.0;
 var $1857 = 0.0, $1858 = 0.0, $1859 = 0.0, $186 = 0.0, $1860 = 0, $1861 = 0.0, $1862 = 0.0, $1863 = 0.0, $1864 = 0.0, $1865 = 0.0, $1866 = 0.0, $1867 = 0.0, $1868 = 0, $1869 = 0, $187 = 0.0, $1870 = 0.0, $1871 = 0.0, $1872 = 0.0, $1873 = 0.0, $1874 = 0.0;
 var $1875 = 0.0, $1876 = 0, $1877 = 0.0, $1878 = 0, $1879 = 0, $188 = 0.0, $1880 = 0.0, $1881 = 0.0, $1882 = 0, $1883 = 0, $1884 = 0.0, $1885 = 0.0, $1886 = 0.0, $1887 = 0, $1888 = 0.0, $1889 = 0.0, $189 = 0.0, $1890 = 0.0, $1891 = 0.0, $1892 = 0.0;
 var $1893 = 0.0, $1894 = 0.0, $1895 = 0.0, $1896 = 0, $1897 = 0, $1898 = 0.0, $1899 = 0.0, $19 = 0, $190 = 0.0, $1900 = 0.0, $1901 = 0.0, $1902 = 0.0, $1903 = 0.0, $1904 = 0, $1905 = 0.0, $1906 = 0, $1907 = 0, $1908 = 0.0, $1909 = 0.0, $191 = 0.0;
 var $1910 = 0.0, $1911 = 0, $1912 = 0, $1913 = 0.0, $1914 = 0, $1915 = 0, $1916 = 0.0, $1917 = 0.0, $1918 = 0.0, $1919 = 0.0, $192 = 0.0, $1920 = 0, $1921 = 0, $1922 = 0.0, $1923 = 0.0, $1924 = 0.0, $1925 = 0, $1926 = 0, $1927 = 0.0, $1928 = 0.0;
 var $1929 = 0.0, $193 = 0.0, $1930 = 0, $1931 = 0, $1932 = 0.0, $1933 = 0.0, $1934 = 0.0, $1935 = 0.0, $1936 = 0.0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0.0, $1940 = 0.0, $1941 = 0, $1942 = 0.0, $1943 = 0, $1944 = 0, $1945 = 0.0, $1946 = 0.0;
 var $1947 = 0.0, $1948 = 0.0, $1949 = 0.0, $195 = 0.0, $1950 = 0.0, $1951 = 0.0, $1952 = 0.0, $1953 = 0, $1954 = 0.0, $1955 = 0, $1956 = 0, $1957 = 0.0, $1958 = 0.0, $1959 = 0.0, $196 = 0.0, $1960 = 0.0, $1961 = 0.0, $1962 = 0.0, $1963 = 0.0, $1964 = 0;
 var $1965 = 0, $1966 = 0.0, $1967 = 0.0, $1968 = 0.0, $1969 = 0.0, $197 = 0.0, $1970 = 0.0, $1971 = 0, $1972 = 0, $1973 = 0.0, $1974 = 0.0, $1975 = 0.0, $1976 = 0, $1977 = 0, $1978 = 0.0, $1979 = 0.0, $198 = 0.0, $1980 = 0.0, $1981 = 0, $1982 = 0;
 var $1983 = 0.0, $1984 = 0.0, $1985 = 0.0, $1986 = 0.0, $1987 = 0.0, $1988 = 0, $1989 = 0.0, $199 = 0.0, $1990 = 0, $1991 = 0, $1992 = 0.0, $1993 = 0.0, $1994 = 0.0, $1995 = 0.0, $1996 = 0, $1997 = 0.0, $1998 = 0.0, $1999 = 0.0, $2 = 0, $20 = 0.0;
 var $200 = 0.0, $2000 = 0, $2001 = 0, $2002 = 0.0, $2003 = 0.0, $2004 = 0.0, $2005 = 0.0, $2006 = 0, $2007 = 0, $2008 = 0.0, $2009 = 0.0, $201 = 0.0, $2010 = 0.0, $2011 = 0.0, $2012 = 0.0, $2013 = 0.0, $2014 = 0, $2015 = 0, $2016 = 0.0, $2017 = 0.0;
 var $2018 = 0.0, $2019 = 0.0, $202 = 0.0, $2020 = 0.0, $2021 = 0.0, $2022 = 0, $2023 = 0.0, $2024 = 0, $2025 = 0, $2026 = 0.0, $2027 = 0.0, $2028 = 0, $2029 = 0, $203 = 0.0, $2030 = 0.0, $2031 = 0.0, $2032 = 0.0, $2033 = 0.0, $2034 = 0, $2035 = 0.0;
 var $2036 = 0.0, $2037 = 0.0, $2038 = 0.0, $2039 = 0.0, $204 = 0.0, $2040 = 0.0, $2041 = 0.0, $2042 = 0, $2043 = 0, $2044 = 0.0, $2045 = 0.0, $2046 = 0.0, $2047 = 0.0, $2048 = 0.0, $2049 = 0.0, $205 = 0.0, $2050 = 0, $2051 = 0.0, $2052 = 0, $2053 = 0;
 var $2054 = 0.0, $2055 = 0.0, $2056 = 0.0, $2057 = 0, $2058 = 0.0, $2059 = 0, $206 = 0.0, $2060 = 0, $2061 = 0.0, $2062 = 0.0, $2063 = 0.0, $2064 = 0.0, $2065 = 0, $2066 = 0, $2067 = 0.0, $2068 = 0.0, $2069 = 0.0, $207 = 0.0, $2070 = 0, $2071 = 0;
 var $2072 = 0.0, $2073 = 0.0, $2074 = 0.0, $2075 = 0, $2076 = 0, $2077 = 0.0, $2078 = 0.0, $2079 = 0.0, $208 = 0.0, $2080 = 0.0, $2081 = 0.0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0.0, $2086 = 0, $2087 = 0.0, $2088 = 0, $2089 = 0, $209 = 0;
 var $2090 = 0.0, $2091 = 0.0, $2092 = 0.0, $2093 = 0.0, $2094 = 0.0, $2095 = 0.0, $2096 = 0.0, $2097 = 0.0, $2098 = 0, $2099 = 0.0, $21 = 0.0, $210 = 0.0, $2100 = 0, $2101 = 0, $2102 = 0.0, $2103 = 0.0, $2104 = 0.0, $2105 = 0.0, $2106 = 0.0, $2107 = 0.0;
 var $2108 = 0.0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0.0, $2112 = 0.0, $2113 = 0.0, $2114 = 0.0, $2115 = 0.0, $2116 = 0, $2117 = 0, $2118 = 0.0, $2119 = 0.0, $212 = 0.0, $2120 = 0.0, $2121 = 0, $2122 = 0, $2123 = 0.0, $2124 = 0.0, $2125 = 0.0;
 var $2126 = 0, $2127 = 0, $2128 = 0.0, $2129 = 0.0, $213 = 0.0, $2130 = 0.0, $2131 = 0.0, $2132 = 0.0, $2133 = 0, $2134 = 0.0, $2135 = 0, $2136 = 0, $2137 = 0.0, $2138 = 0.0, $2139 = 0.0, $214 = 0.0, $2140 = 0.0, $2141 = 0, $2142 = 0.0, $2143 = 0.0;
 var $2144 = 0.0, $2145 = 0, $2146 = 0, $2147 = 0.0, $2148 = 0.0, $2149 = 0.0, $215 = 0.0, $2150 = 0.0, $2151 = 0, $2152 = 0, $2153 = 0.0, $2154 = 0.0, $2155 = 0.0, $2156 = 0.0, $2157 = 0.0, $2158 = 0.0, $2159 = 0, $216 = 0.0, $2160 = 0, $2161 = 0.0;
 var $2162 = 0.0, $2163 = 0.0, $2164 = 0.0, $2165 = 0.0, $2166 = 0.0, $2167 = 0, $2168 = 0.0, $2169 = 0, $217 = 0.0, $2170 = 0, $2171 = 0.0, $2172 = 0.0, $2173 = 0.0, $2174 = 0, $2175 = 0.0, $2176 = 0, $2177 = 0, $2178 = 0.0, $2179 = 0.0, $218 = 0.0;
 var $2180 = 0.0, $2181 = 0.0, $2182 = 0, $2183 = 0, $2184 = 0.0, $2185 = 0.0, $2186 = 0.0, $2187 = 0, $2188 = 0, $2189 = 0.0, $219 = 0.0, $2190 = 0.0, $2191 = 0.0, $2192 = 0, $2193 = 0, $2194 = 0.0, $2195 = 0.0, $2196 = 0.0, $2197 = 0.0, $2198 = 0.0;
 var $2199 = 0, $22 = 0.0, $220 = 0.0, $2200 = 0, $2201 = 0, $2202 = 0.0, $2203 = 0, $2204 = 0.0, $2205 = 0, $2206 = 0, $2207 = 0.0, $2208 = 0.0, $2209 = 0.0, $221 = 0.0, $2210 = 0.0, $2211 = 0.0, $2212 = 0.0, $2213 = 0.0, $2214 = 0.0, $2215 = 0;
 var $2216 = 0.0, $2217 = 0, $2218 = 0, $2219 = 0.0, $222 = 0.0, $2220 = 0.0, $2221 = 0.0, $2222 = 0.0, $2223 = 0.0, $2224 = 0.0, $2225 = 0.0, $2226 = 0, $2227 = 0, $2228 = 0.0, $2229 = 0.0, $223 = 0.0, $2230 = 0.0, $2231 = 0.0, $2232 = 0.0, $2233 = 0;
 var $2234 = 0, $2235 = 0.0, $2236 = 0.0, $2237 = 0.0, $2238 = 0, $2239 = 0, $224 = 0.0, $2240 = 0.0, $2241 = 0.0, $2242 = 0.0, $2243 = 0, $2244 = 0, $2245 = 0.0, $2246 = 0.0, $2247 = 0.0, $2248 = 0.0, $2249 = 0.0, $225 = 0.0, $2250 = 0, $2251 = 0.0;
 var $2252 = 0, $2253 = 0, $2254 = 0.0, $2255 = 0.0, $2256 = 0.0, $2257 = 0, $2258 = 0.0, $2259 = 0, $226 = 0.0, $2260 = 0, $2261 = 0.0, $2262 = 0.0, $2263 = 0.0, $2264 = 0.0, $2265 = 0, $2266 = 0, $2267 = 0.0, $2268 = 0.0, $2269 = 0.0, $227 = 0.0;
 var $2270 = 0, $2271 = 0, $2272 = 0.0, $2273 = 0.0, $2274 = 0.0, $2275 = 0, $2276 = 0, $2277 = 0.0, $2278 = 0.0, $2279 = 0.0, $228 = 0.0, $2280 = 0.0, $2281 = 0.0, $2282 = 0, $2283 = 0.0, $2284 = 0, $2285 = 0, $2286 = 0.0, $2287 = 0.0, $2288 = 0.0;
 var $2289 = 0.0, $229 = 0.0, $2290 = 0, $2291 = 0.0, $2292 = 0.0, $2293 = 0.0, $2294 = 0.0, $2295 = 0.0, $2296 = 0.0, $2297 = 0.0, $2298 = 0, $2299 = 0, $23 = 0.0, $230 = 0.0, $2300 = 0.0, $2301 = 0.0, $2302 = 0.0, $2303 = 0.0, $2304 = 0, $2305 = 0.0;
 var $2306 = 0.0, $2307 = 0.0, $2308 = 0.0, $2309 = 0.0, $231 = 0.0, $2310 = 0.0, $2311 = 0.0, $2312 = 0.0, $2313 = 0, $2314 = 0, $2315 = 0.0, $2316 = 0.0, $2317 = 0.0, $2318 = 0.0, $2319 = 0, $232 = 0.0, $2320 = 0.0, $2321 = 0.0, $2322 = 0.0, $2323 = 0.0;
 var $2324 = 0.0, $2325 = 0.0, $2326 = 0.0, $2327 = 0.0, $2328 = 0.0, $2329 = 0.0, $233 = 0.0, $2330 = 0, $2331 = 0.0, $2332 = 0.0, $2333 = 0.0, $2334 = 0, $2335 = 0, $2336 = 0.0, $2337 = 0.0, $2338 = 0.0, $2339 = 0.0, $234 = 0.0, $2340 = 0, $2341 = 0;
 var $2342 = 0.0, $2343 = 0.0, $2344 = 0.0, $2345 = 0.0, $2346 = 0.0, $2347 = 0, $2348 = 0, $2349 = 0.0, $235 = 0.0, $2350 = 0, $2351 = 0.0, $2352 = 0, $2353 = 0, $2354 = 0.0, $2355 = 0.0, $2356 = 0.0, $2357 = 0.0, $2358 = 0.0, $2359 = 0.0, $236 = 0.0;
 var $2360 = 0.0, $2361 = 0.0, $2362 = 0.0, $2363 = 0.0, $2364 = 0.0, $2365 = 0.0, $2366 = 0, $2367 = 0, $2368 = 0.0, $2369 = 0.0, $237 = 0.0, $2370 = 0.0, $2371 = 0.0, $2372 = 0, $2373 = 0, $2374 = 0.0, $2375 = 0.0, $2376 = 0.0, $2377 = 0, $2378 = 0;
 var $2379 = 0.0, $238 = 0.0, $2380 = 0.0, $2381 = 0.0, $2382 = 0.0, $2383 = 0.0, $2384 = 0, $2385 = 0, $2386 = 0.0, $2387 = 0.0, $2388 = 0.0, $2389 = 0, $239 = 0.0, $2390 = 0, $2391 = 0.0, $2392 = 0.0, $2393 = 0.0, $2394 = 0, $2395 = 0, $2396 = 0.0;
 var $2397 = 0.0, $2398 = 0.0, $2399 = 0.0, $24 = 0.0, $240 = 0.0, $2400 = 0.0, $2401 = 0, $2402 = 0.0, $2403 = 0, $2404 = 0, $2405 = 0.0, $2406 = 0.0, $2407 = 0.0, $2408 = 0.0, $2409 = 0, $241 = 0.0, $2410 = 0.0, $2411 = 0.0, $2412 = 0.0, $2413 = 0;
 var $2414 = 0, $2415 = 0.0, $2416 = 0.0, $2417 = 0.0, $2418 = 0.0, $2419 = 0, $242 = 0.0, $2420 = 0, $2421 = 0.0, $2422 = 0.0, $2423 = 0.0, $2424 = 0.0, $2425 = 0.0, $2426 = 0.0, $2427 = 0, $2428 = 0, $2429 = 0.0, $243 = 0.0, $2430 = 0.0, $2431 = 0.0;
 var $2432 = 0.0, $2433 = 0.0, $2434 = 0.0, $2435 = 0, $2436 = 0.0, $2437 = 0, $2438 = 0, $2439 = 0.0, $244 = 0.0, $2440 = 0.0, $2441 = 0, $2442 = 0, $2443 = 0.0, $2444 = 0.0, $2445 = 0.0, $2446 = 0.0, $2447 = 0, $2448 = 0.0, $2449 = 0.0, $245 = 0.0;
 var $2450 = 0.0, $2451 = 0.0, $2452 = 0.0, $2453 = 0.0, $2454 = 0.0, $2455 = 0, $2456 = 0, $2457 = 0.0, $2458 = 0.0, $2459 = 0.0, $246 = 0.0, $2460 = 0.0, $2461 = 0.0, $2462 = 0.0, $2463 = 0, $2464 = 0.0, $2465 = 0, $2466 = 0, $2467 = 0.0, $2468 = 0.0;
 var $2469 = 0, $247 = 0.0, $2470 = 0, $2471 = 0.0, $2472 = 0.0, $2473 = 0.0, $2474 = 0.0, $2475 = 0, $2476 = 0.0, $2477 = 0.0, $2478 = 0.0, $2479 = 0.0, $248 = 0.0, $2480 = 0.0, $2481 = 0.0, $2482 = 0.0, $2483 = 0, $2484 = 0, $2485 = 0.0, $2486 = 0.0;
 var $2487 = 0.0, $2488 = 0.0, $2489 = 0.0, $249 = 0.0, $2490 = 0.0, $2491 = 0, $2492 = 0.0, $2493 = 0, $2494 = 0, $2495 = 0.0, $2496 = 0.0, $2497 = 0.0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0.0, $2500 = 0.0, $2501 = 0, $2502 = 0, $2503 = 0.0;
 var $2504 = 0.0, $2505 = 0.0, $2506 = 0.0, $2507 = 0, $2508 = 0, $2509 = 0.0, $251 = 0.0, $2510 = 0.0, $2511 = 0.0, $2512 = 0, $2513 = 0, $2514 = 0.0, $2515 = 0.0, $2516 = 0.0, $2517 = 0, $2518 = 0, $2519 = 0.0, $252 = 0.0, $2520 = 0.0, $2521 = 0.0;
 var $2522 = 0.0, $2523 = 0.0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0.0, $2528 = 0, $2529 = 0.0, $253 = 0.0, $2530 = 0, $2531 = 0, $2532 = 0.0, $2533 = 0.0, $2534 = 0.0, $2535 = 0.0, $2536 = 0.0, $2537 = 0.0, $2538 = 0.0, $2539 = 0.0, $254 = 0;
 var $2540 = 0, $2541 = 0.0, $2542 = 0, $2543 = 0, $2544 = 0.0, $2545 = 0.0, $2546 = 0.0, $2547 = 0.0, $2548 = 0, $2549 = 0, $255 = 0.0, $2550 = 0.0, $2551 = 0.0, $2552 = 0.0, $2553 = 0.0, $2554 = 0.0, $2555 = 0.0, $2556 = 0.0, $2557 = 0.0, $2558 = 0;
 var $2559 = 0, $256 = 0, $2560 = 0.0, $2561 = 0.0, $2562 = 0.0, $2563 = 0, $2564 = 0, $2565 = 0.0, $2566 = 0.0, $2567 = 0.0, $2568 = 0, $2569 = 0, $257 = 0.0, $2570 = 0.0, $2571 = 0.0, $2572 = 0.0, $2573 = 0.0, $2574 = 0.0, $2575 = 0, $2576 = 0.0;
 var $2577 = 0, $2578 = 0, $2579 = 0.0, $258 = 0.0, $2580 = 0.0, $2581 = 0.0, $2582 = 0.0, $2583 = 0, $2584 = 0.0, $2585 = 0.0, $2586 = 0.0, $2587 = 0, $2588 = 0, $2589 = 0.0, $259 = 0.0, $2590 = 0.0, $2591 = 0.0, $2592 = 0.0, $2593 = 0, $2594 = 0;
 var $2595 = 0.0, $2596 = 0.0, $2597 = 0.0, $2598 = 0.0, $2599 = 0.0, $26 = 0.0, $260 = 0.0, $2600 = 0.0, $2601 = 0, $2602 = 0, $2603 = 0.0, $2604 = 0.0, $2605 = 0.0, $2606 = 0.0, $2607 = 0.0, $2608 = 0.0, $2609 = 0, $261 = 0.0, $2610 = 0.0, $2611 = 0;
 var $2612 = 0, $2613 = 0.0, $2614 = 0.0, $2615 = 0, $2616 = 0, $2617 = 0.0, $2618 = 0.0, $2619 = 0.0, $262 = 0.0, $2620 = 0.0, $2621 = 0, $2622 = 0.0, $2623 = 0.0, $2624 = 0.0, $2625 = 0.0, $2626 = 0.0, $2627 = 0.0, $2628 = 0.0, $2629 = 0, $263 = 0.0;
 var $2630 = 0, $2631 = 0.0, $2632 = 0.0, $2633 = 0.0, $2634 = 0.0, $2635 = 0.0, $2636 = 0.0, $2637 = 0, $2638 = 0.0, $2639 = 0, $264 = 0.0, $2640 = 0, $2641 = 0.0, $2642 = 0.0, $2643 = 0.0, $2644 = 0, $2645 = 0.0, $2646 = 0, $2647 = 0, $2648 = 0.0;
 var $2649 = 0.0, $265 = 0.0, $2650 = 0.0, $2651 = 0.0, $2652 = 0, $2653 = 0, $2654 = 0.0, $2655 = 0.0, $2656 = 0.0, $2657 = 0, $2658 = 0, $2659 = 0.0, $266 = 0.0, $2660 = 0.0, $2661 = 0.0, $2662 = 0, $2663 = 0, $2664 = 0.0, $2665 = 0.0, $2666 = 0.0;
 var $2667 = 0.0, $2668 = 0.0, $2669 = 0, $267 = 0.0, $2670 = 0, $2671 = 0, $2672 = 0.0, $2673 = 0, $2674 = 0.0, $2675 = 0, $2676 = 0, $2677 = 0.0, $2678 = 0.0, $2679 = 0.0, $268 = 0.0, $2680 = 0.0, $2681 = 0.0, $2682 = 0.0, $2683 = 0.0, $2684 = 0.0;
 var $2685 = 0, $2686 = 0.0, $2687 = 0, $2688 = 0, $2689 = 0.0, $269 = 0.0, $2690 = 0.0, $2691 = 0.0, $2692 = 0.0, $2693 = 0, $2694 = 0, $2695 = 0.0, $2696 = 0.0, $2697 = 0.0, $2698 = 0.0, $2699 = 0.0, $27 = 0, $270 = 0.0, $2700 = 0.0, $2701 = 0.0;
 var $2702 = 0.0, $2703 = 0, $2704 = 0, $2705 = 0.0, $2706 = 0.0, $2707 = 0.0, $2708 = 0, $2709 = 0, $271 = 0.0, $2710 = 0.0, $2711 = 0.0, $2712 = 0.0, $2713 = 0, $2714 = 0, $2715 = 0.0, $2716 = 0.0, $2717 = 0.0, $2718 = 0.0, $2719 = 0.0, $272 = 0.0;
 var $2720 = 0, $2721 = 0.0, $2722 = 0, $2723 = 0, $2724 = 0.0, $2725 = 0.0, $2726 = 0.0, $2727 = 0.0, $2728 = 0, $2729 = 0.0, $273 = 0.0, $2730 = 0.0, $2731 = 0.0, $2732 = 0, $2733 = 0, $2734 = 0.0, $2735 = 0.0, $2736 = 0.0, $2737 = 0.0, $2738 = 0;
 var $2739 = 0, $274 = 0.0, $2740 = 0.0, $2741 = 0.0, $2742 = 0.0, $2743 = 0.0, $2744 = 0.0, $2745 = 0.0, $2746 = 0, $2747 = 0, $2748 = 0.0, $2749 = 0.0, $275 = 0.0, $2750 = 0.0, $2751 = 0.0, $2752 = 0.0, $2753 = 0.0, $2754 = 0, $2755 = 0.0, $2756 = 0;
 var $2757 = 0, $2758 = 0.0, $2759 = 0.0, $276 = 0.0, $2760 = 0.0, $2761 = 0, $2762 = 0.0, $2763 = 0, $2764 = 0, $2765 = 0.0, $2766 = 0.0, $2767 = 0.0, $2768 = 0.0, $2769 = 0, $277 = 0.0, $2770 = 0, $2771 = 0.0, $2772 = 0.0, $2773 = 0.0, $2774 = 0;
 var $2775 = 0, $2776 = 0.0, $2777 = 0.0, $2778 = 0.0, $2779 = 0, $278 = 0.0, $2780 = 0, $2781 = 0.0, $2782 = 0.0, $2783 = 0.0, $2784 = 0.0, $2785 = 0.0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0.0, $279 = 0.0, $2790 = 0, $2791 = 0.0, $2792 = 0;
 var $2793 = 0, $2794 = 0.0, $2795 = 0.0, $2796 = 0.0, $2797 = 0.0, $2798 = 0.0, $2799 = 0.0, $28 = 0.0, $280 = 0.0, $2800 = 0.0, $2801 = 0.0, $2802 = 0, $2803 = 0.0, $2804 = 0, $2805 = 0, $2806 = 0.0, $2807 = 0.0, $2808 = 0.0, $2809 = 0.0, $281 = 0.0;
 var $2810 = 0.0, $2811 = 0.0, $2812 = 0.0, $2813 = 0, $2814 = 0, $2815 = 0.0, $2816 = 0.0, $2817 = 0.0, $2818 = 0.0, $2819 = 0.0, $282 = 0.0, $2820 = 0, $2821 = 0, $2822 = 0.0, $2823 = 0.0, $2824 = 0.0, $2825 = 0, $2826 = 0, $2827 = 0.0, $2828 = 0.0;
 var $2829 = 0.0, $283 = 0.0, $2830 = 0, $2831 = 0, $2832 = 0.0, $2833 = 0.0, $2834 = 0.0, $2835 = 0.0, $2836 = 0.0, $2837 = 0, $2838 = 0.0, $2839 = 0, $284 = 0.0, $2840 = 0, $2841 = 0.0, $2842 = 0.0, $2843 = 0.0, $2844 = 0, $2845 = 0.0, $2846 = 0;
 var $2847 = 0, $2848 = 0.0, $2849 = 0.0, $285 = 0.0, $2850 = 0.0, $2851 = 0.0, $2852 = 0, $2853 = 0, $2854 = 0.0, $2855 = 0.0, $2856 = 0.0, $2857 = 0, $2858 = 0, $2859 = 0.0, $286 = 0, $2860 = 0.0, $2861 = 0.0, $2862 = 0, $2863 = 0, $2864 = 0.0;
 var $2865 = 0.0, $2866 = 0.0, $2867 = 0.0, $2868 = 0.0, $2869 = 0, $287 = 0.0, $2870 = 0.0, $2871 = 0, $2872 = 0, $2873 = 0.0, $2874 = 0.0, $2875 = 0.0, $2876 = 0.0, $2877 = 0, $2878 = 0.0, $2879 = 0.0, $288 = 0, $2880 = 0.0, $2881 = 0.0, $2882 = 0.0;
 var $2883 = 0.0, $2884 = 0.0, $2885 = 0, $2886 = 0, $2887 = 0.0, $2888 = 0.0, $2889 = 0.0, $289 = 0.0, $2890 = 0.0, $2891 = 0, $2892 = 0.0, $2893 = 0.0, $2894 = 0.0, $2895 = 0.0, $2896 = 0.0, $2897 = 0.0, $2898 = 0.0, $2899 = 0.0, $29 = 0.0, $290 = 0.0;
 var $2900 = 0, $2901 = 0, $2902 = 0.0, $2903 = 0.0, $2904 = 0.0, $2905 = 0.0, $2906 = 0, $2907 = 0.0, $2908 = 0.0, $2909 = 0.0, $291 = 0.0, $2910 = 0.0, $2911 = 0.0, $2912 = 0.0, $2913 = 0.0, $2914 = 0.0, $2915 = 0.0, $2916 = 0.0, $2917 = 0, $2918 = 0.0;
 var $2919 = 0.0, $292 = 0.0, $2920 = 0.0, $2921 = 0, $2922 = 0, $2923 = 0.0, $2924 = 0.0, $2925 = 0.0, $2926 = 0.0, $2927 = 0, $2928 = 0, $2929 = 0.0, $293 = 0.0, $2930 = 0.0, $2931 = 0.0, $2932 = 0.0, $2933 = 0.0, $2934 = 0, $2935 = 0, $2936 = 0.0;
 var $2937 = 0, $2938 = 0.0, $2939 = 0, $294 = 0.0, $2940 = 0, $2941 = 0.0, $2942 = 0.0, $2943 = 0.0, $2944 = 0.0, $2945 = 0.0, $2946 = 0.0, $2947 = 0.0, $2948 = 0.0, $2949 = 0.0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0.0, $2953 = 0.0, $2954 = 0.0;
 var $2955 = 0.0, $2956 = 0, $2957 = 0, $2958 = 0.0, $2959 = 0.0, $296 = 0.0, $2960 = 0.0, $2961 = 0, $2962 = 0, $2963 = 0.0, $2964 = 0.0, $2965 = 0.0, $2966 = 0.0, $2967 = 0.0, $2968 = 0, $2969 = 0, $297 = 0.0, $2970 = 0.0, $2971 = 0.0, $2972 = 0.0;
 var $2973 = 0, $2974 = 0, $2975 = 0.0, $2976 = 0.0, $2977 = 0.0, $2978 = 0, $2979 = 0, $298 = 0.0, $2980 = 0.0, $2981 = 0.0, $2982 = 0.0, $2983 = 0.0, $2984 = 0.0, $2985 = 0, $2986 = 0.0, $2987 = 0, $2988 = 0, $2989 = 0.0, $299 = 0.0, $2990 = 0.0;
 var $2991 = 0.0, $2992 = 0.0, $2993 = 0, $2994 = 0.0, $2995 = 0.0, $2996 = 0.0, $2997 = 0, $2998 = 0, $2999 = 0.0, $3 = 0, $30 = 0.0, $300 = 0.0, $3000 = 0.0, $3001 = 0.0, $3002 = 0.0, $3003 = 0, $3004 = 0, $3005 = 0.0, $3006 = 0.0, $3007 = 0.0;
 var $3008 = 0.0, $3009 = 0.0, $301 = 0.0, $3010 = 0.0, $3011 = 0, $3012 = 0, $3013 = 0.0, $3014 = 0.0, $3015 = 0.0, $3016 = 0.0, $3017 = 0.0, $3018 = 0.0, $3019 = 0, $302 = 0.0, $3020 = 0.0, $3021 = 0, $3022 = 0, $3023 = 0.0, $3024 = 0.0, $3025 = 0;
 var $3026 = 0, $3027 = 0.0, $3028 = 0.0, $3029 = 0.0, $303 = 0.0, $3030 = 0.0, $3031 = 0, $3032 = 0.0, $3033 = 0.0, $3034 = 0.0, $3035 = 0.0, $3036 = 0.0, $3037 = 0.0, $3038 = 0.0, $3039 = 0, $304 = 0.0, $3040 = 0, $3041 = 0.0, $3042 = 0.0, $3043 = 0.0;
 var $3044 = 0.0, $3045 = 0.0, $3046 = 0.0, $3047 = 0, $3048 = 0.0, $3049 = 0, $305 = 0.0, $3050 = 0, $3051 = 0.0, $3052 = 0.0, $3053 = 0, $3054 = 0, $3055 = 0.0, $3056 = 0.0, $3057 = 0.0, $3058 = 0.0, $3059 = 0, $306 = 0.0, $3060 = 0.0, $3061 = 0.0;
 var $3062 = 0.0, $3063 = 0.0, $3064 = 0.0, $3065 = 0.0, $3066 = 0.0, $3067 = 0, $3068 = 0, $3069 = 0.0, $307 = 0.0, $3070 = 0.0, $3071 = 0.0, $3072 = 0.0, $3073 = 0.0, $3074 = 0.0, $3075 = 0, $3076 = 0.0, $3077 = 0, $3078 = 0, $3079 = 0.0, $308 = 0.0;
 var $3080 = 0.0, $3081 = 0.0, $3082 = 0, $3083 = 0, $3084 = 0.0, $3085 = 0, $3086 = 0, $3087 = 0.0, $3088 = 0.0, $3089 = 0.0, $309 = 0.0, $3090 = 0.0, $3091 = 0, $3092 = 0, $3093 = 0.0, $3094 = 0.0, $3095 = 0.0, $3096 = 0, $3097 = 0, $3098 = 0.0;
 var $3099 = 0.0, $31 = 0, $310 = 0, $3100 = 0.0, $3101 = 0, $3102 = 0, $3103 = 0.0, $3104 = 0.0, $3105 = 0.0, $3106 = 0.0, $3107 = 0.0, $3108 = 0, $3109 = 0, $311 = 0.0, $3110 = 0, $3111 = 0.0, $3112 = 0, $3113 = 0.0, $3114 = 0, $3115 = 0;
 var $3116 = 0.0, $3117 = 0.0, $3118 = 0.0, $3119 = 0.0, $312 = 0.0, $3120 = 0.0, $3121 = 0.0, $3122 = 0.0, $3123 = 0.0, $3124 = 0, $3125 = 0.0, $3126 = 0, $3127 = 0, $3128 = 0.0, $3129 = 0.0, $313 = 0.0, $3130 = 0.0, $3131 = 0.0, $3132 = 0, $3133 = 0;
 var $3134 = 0.0, $3135 = 0.0, $3136 = 0.0, $3137 = 0.0, $3138 = 0.0, $3139 = 0.0, $314 = 0.0, $3140 = 0.0, $3141 = 0.0, $3142 = 0, $3143 = 0, $3144 = 0.0, $3145 = 0.0, $3146 = 0.0, $3147 = 0, $3148 = 0, $3149 = 0.0, $315 = 0.0, $3150 = 0.0, $3151 = 0.0;
 var $3152 = 0, $3153 = 0, $3154 = 0.0, $3155 = 0.0, $3156 = 0.0, $3157 = 0.0, $3158 = 0.0, $3159 = 0, $316 = 0.0, $3160 = 0.0, $3161 = 0, $3162 = 0, $3163 = 0.0, $3164 = 0.0, $3165 = 0.0, $3166 = 0.0, $3167 = 0, $3168 = 0.0, $3169 = 0.0, $317 = 0;
 var $3170 = 0.0, $3171 = 0, $3172 = 0, $3173 = 0.0, $3174 = 0.0, $3175 = 0.0, $3176 = 0.0, $3177 = 0, $3178 = 0, $3179 = 0.0, $318 = 0.0, $3180 = 0.0, $3181 = 0.0, $3182 = 0.0, $3183 = 0.0, $3184 = 0.0, $3185 = 0, $3186 = 0, $3187 = 0.0, $3188 = 0.0;
 var $3189 = 0.0, $319 = 0.0, $3190 = 0.0, $3191 = 0.0, $3192 = 0.0, $3193 = 0, $3194 = 0.0, $3195 = 0, $3196 = 0, $3197 = 0.0, $3198 = 0.0, $3199 = 0, $32 = 0.0, $320 = 0.0, $3200 = 0, $3201 = 0.0, $3202 = 0.0, $3203 = 0.0, $3204 = 0.0, $3205 = 0;
 var $3206 = 0.0, $3207 = 0.0, $3208 = 0.0, $3209 = 0.0, $321 = 0.0, $3210 = 0.0, $3211 = 0.0, $3212 = 0.0, $3213 = 0, $3214 = 0, $3215 = 0.0, $3216 = 0.0, $3217 = 0.0, $3218 = 0.0, $3219 = 0.0, $322 = 0.0, $3220 = 0.0, $3221 = 0, $3222 = 0.0, $3223 = 0;
 var $3224 = 0, $3225 = 0.0, $3226 = 0.0, $3227 = 0.0, $3228 = 0, $3229 = 0.0, $323 = 0.0, $3230 = 0, $3231 = 0, $3232 = 0.0, $3233 = 0.0, $3234 = 0.0, $3235 = 0.0, $3236 = 0, $3237 = 0, $3238 = 0.0, $3239 = 0.0, $324 = 0, $3240 = 0.0, $3241 = 0;
 var $3242 = 0, $3243 = 0.0, $3244 = 0.0, $3245 = 0.0, $3246 = 0, $3247 = 0, $3248 = 0.0, $3249 = 0.0, $325 = 0.0, $3250 = 0.0, $3251 = 0.0, $3252 = 0.0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0.0, $3257 = 0, $3258 = 0.0, $3259 = 0, $326 = 0.0;
 var $3260 = 0, $3261 = 0.0, $3262 = 0.0, $3263 = 0.0, $3264 = 0.0, $3265 = 0.0, $3266 = 0.0, $3267 = 0.0, $3268 = 0.0, $3269 = 0, $327 = 0.0, $3270 = 0.0, $3271 = 0, $3272 = 0, $3273 = 0.0, $3274 = 0.0, $3275 = 0.0, $3276 = 0.0, $3277 = 0, $3278 = 0;
 var $3279 = 0.0, $328 = 0.0, $3280 = 0.0, $3281 = 0.0, $3282 = 0.0, $3283 = 0.0, $3284 = 0.0, $3285 = 0.0, $3286 = 0.0, $3287 = 0, $3288 = 0, $3289 = 0.0, $329 = 0.0, $3290 = 0.0, $3291 = 0.0, $3292 = 0, $3293 = 0, $3294 = 0.0, $3295 = 0.0, $3296 = 0.0;
 var $3297 = 0, $3298 = 0, $3299 = 0.0, $33 = 0.0, $330 = 0.0, $3300 = 0.0, $3301 = 0.0, $3302 = 0.0, $3303 = 0.0, $3304 = 0, $3305 = 0.0, $3306 = 0, $3307 = 0, $3308 = 0.0, $3309 = 0.0, $331 = 0, $3310 = 0.0, $3311 = 0.0, $3312 = 0, $3313 = 0.0;
 var $3314 = 0.0, $3315 = 0.0, $3316 = 0, $3317 = 0, $3318 = 0.0, $3319 = 0.0, $332 = 0.0, $3320 = 0.0, $3321 = 0.0, $3322 = 0, $3323 = 0, $3324 = 0.0, $3325 = 0.0, $3326 = 0.0, $3327 = 0.0, $3328 = 0.0, $3329 = 0.0, $333 = 0.0, $3330 = 0, $3331 = 0;
 var $3332 = 0.0, $3333 = 0.0, $3334 = 0.0, $3335 = 0.0, $3336 = 0.0, $3337 = 0.0, $3338 = 0, $3339 = 0.0, $334 = 0.0, $3340 = 0, $3341 = 0, $3342 = 0.0, $3343 = 0.0, $3344 = 0.0, $3345 = 0, $3346 = 0.0, $3347 = 0, $3348 = 0, $3349 = 0.0, $335 = 0.0;
 var $3350 = 0.0, $3351 = 0.0, $3352 = 0.0, $3353 = 0, $3354 = 0, $3355 = 0.0, $3356 = 0.0, $3357 = 0.0, $3358 = 0, $3359 = 0, $336 = 0.0, $3360 = 0.0, $3361 = 0.0, $3362 = 0.0, $3363 = 0, $3364 = 0, $3365 = 0.0, $3366 = 0.0, $3367 = 0.0, $3368 = 0.0;
 var $3369 = 0.0, $337 = 0.0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0.0, $3374 = 0, $3375 = 0.0, $3376 = 0, $3377 = 0, $3378 = 0.0, $3379 = 0.0, $338 = 0, $3380 = 0.0, $3381 = 0.0, $3382 = 0.0, $3383 = 0.0, $3384 = 0.0, $3385 = 0.0, $3386 = 0;
 var $3387 = 0.0, $3388 = 0, $3389 = 0, $339 = 0.0, $3390 = 0.0, $3391 = 0.0, $3392 = 0.0, $3393 = 0.0, $3394 = 0.0, $3395 = 0.0, $3396 = 0.0, $3397 = 0, $3398 = 0, $3399 = 0.0, $34 = 0.0, $340 = 0.0, $3400 = 0.0, $3401 = 0.0, $3402 = 0.0, $3403 = 0.0;
 var $3404 = 0, $3405 = 0, $3406 = 0.0, $3407 = 0.0, $3408 = 0.0, $3409 = 0, $341 = 0.0, $3410 = 0, $3411 = 0.0, $3412 = 0.0, $3413 = 0.0, $3414 = 0, $3415 = 0, $3416 = 0.0, $3417 = 0.0, $3418 = 0.0, $3419 = 0.0, $342 = 0.0, $3420 = 0.0, $3421 = 0;
 var $3422 = 0.0, $3423 = 0, $3424 = 0, $3425 = 0.0, $3426 = 0.0, $3427 = 0.0, $3428 = 0, $3429 = 0.0, $343 = 0.0, $3430 = 0, $3431 = 0, $3432 = 0.0, $3433 = 0.0, $3434 = 0.0, $3435 = 0.0, $3436 = 0, $3437 = 0, $3438 = 0.0, $3439 = 0.0, $344 = 0.0;
 var $3440 = 0.0, $3441 = 0, $3442 = 0, $3443 = 0.0, $3444 = 0.0, $3445 = 0.0, $3446 = 0, $3447 = 0, $3448 = 0.0, $3449 = 0.0, $345 = 0, $3450 = 0.0, $3451 = 0.0, $3452 = 0.0, $3453 = 0, $3454 = 0.0, $3455 = 0, $3456 = 0, $3457 = 0.0, $3458 = 0.0;
 var $3459 = 0.0, $346 = 0.0, $3460 = 0.0, $3461 = 0, $3462 = 0.0, $3463 = 0.0, $3464 = 0.0, $3465 = 0.0, $3466 = 0.0, $3467 = 0.0, $3468 = 0.0, $3469 = 0, $347 = 0.0, $3470 = 0, $3471 = 0.0, $3472 = 0.0, $3473 = 0.0, $3474 = 0.0, $3475 = 0, $3476 = 0.0;
 var $3477 = 0.0, $3478 = 0.0, $3479 = 0.0, $348 = 0.0, $3480 = 0.0, $3481 = 0.0, $3482 = 0.0, $3483 = 0.0, $3484 = 0, $3485 = 0, $3486 = 0.0, $3487 = 0.0, $3488 = 0.0, $3489 = 0.0, $349 = 0.0, $3490 = 0, $3491 = 0.0, $3492 = 0.0, $3493 = 0.0, $3494 = 0.0;
 var $3495 = 0.0, $3496 = 0.0, $3497 = 0.0, $3498 = 0.0, $3499 = 0.0, $35 = 0.0, $350 = 0.0, $3500 = 0.0, $3501 = 0, $3502 = 0.0, $3503 = 0.0, $3504 = 0.0, $3505 = 0, $3506 = 0, $3507 = 0.0, $3508 = 0.0, $3509 = 0.0, $351 = 0.0, $3510 = 0.0, $3511 = 0;
 var $3512 = 0, $3513 = 0.0, $3514 = 0.0, $3515 = 0.0, $3516 = 0.0, $3517 = 0.0, $3518 = 0, $3519 = 0, $352 = 0.0, $3520 = 0.0, $3521 = 0, $3522 = 0.0, $3523 = 0, $3524 = 0, $3525 = 0.0, $3526 = 0.0, $3527 = 0.0, $3528 = 0.0, $3529 = 0.0, $353 = 0.0;
 var $3530 = 0.0, $3531 = 0.0, $3532 = 0.0, $3533 = 0.0, $3534 = 0.0, $3535 = 0.0, $3536 = 0.0, $3537 = 0.0, $3538 = 0.0, $3539 = 0.0, $354 = 0.0, $3540 = 0, $3541 = 0, $3542 = 0.0, $3543 = 0.0, $3544 = 0.0, $3545 = 0.0, $3546 = 0, $3547 = 0, $3548 = 0.0;
 var $3549 = 0.0, $355 = 0.0, $3550 = 0.0, $3551 = 0, $3552 = 0, $3553 = 0.0, $3554 = 0.0, $3555 = 0.0, $3556 = 0.0, $3557 = 0.0, $3558 = 0, $3559 = 0, $356 = 0.0, $3560 = 0.0, $3561 = 0.0, $3562 = 0.0, $3563 = 0, $3564 = 0, $3565 = 0.0, $3566 = 0.0;
 var $3567 = 0.0, $3568 = 0, $3569 = 0, $357 = 0.0, $3570 = 0.0, $3571 = 0.0, $3572 = 0.0, $3573 = 0.0, $3574 = 0.0, $3575 = 0, $3576 = 0.0, $3577 = 0, $3578 = 0, $3579 = 0.0, $358 = 0.0, $3580 = 0.0, $3581 = 0.0, $3582 = 0.0, $3583 = 0, $3584 = 0.0;
 var $3585 = 0.0, $3586 = 0.0, $3587 = 0, $3588 = 0, $3589 = 0.0, $359 = 0.0, $3590 = 0.0, $3591 = 0.0, $3592 = 0.0, $3593 = 0, $3594 = 0, $3595 = 0.0, $3596 = 0.0, $3597 = 0.0, $3598 = 0.0, $3599 = 0.0, $36 = 0.0, $360 = 0, $3600 = 0.0, $3601 = 0;
 var $3602 = 0, $3603 = 0.0, $3604 = 0.0, $3605 = 0.0, $3606 = 0.0, $3607 = 0.0, $3608 = 0.0, $3609 = 0, $361 = 0.0, $3610 = 0.0, $3611 = 0, $3612 = 0, $3613 = 0.0, $3614 = 0.0, $3615 = 0, $3616 = 0, $3617 = 0.0, $3618 = 0.0, $3619 = 0.0, $362 = 0.0;
 var $3620 = 0.0, $3621 = 0, $3622 = 0.0, $3623 = 0.0, $3624 = 0.0, $3625 = 0.0, $3626 = 0.0, $3627 = 0.0, $3628 = 0.0, $3629 = 0, $363 = 0.0, $3630 = 0, $3631 = 0.0, $3632 = 0.0, $3633 = 0.0, $3634 = 0.0, $3635 = 0.0, $3636 = 0.0, $3637 = 0, $3638 = 0.0;
 var $3639 = 0, $364 = 0.0, $3640 = 0, $3641 = 0.0, $3642 = 0.0, $3643 = 0, $3644 = 0, $3645 = 0.0, $3646 = 0.0, $3647 = 0.0, $3648 = 0.0, $3649 = 0, $365 = 0.0, $3650 = 0.0, $3651 = 0.0, $3652 = 0.0, $3653 = 0.0, $3654 = 0.0, $3655 = 0.0, $3656 = 0.0;
 var $3657 = 0, $3658 = 0, $3659 = 0.0, $366 = 0.0, $3660 = 0.0, $3661 = 0.0, $3662 = 0.0, $3663 = 0.0, $3664 = 0.0, $3665 = 0, $3666 = 0.0, $3667 = 0, $3668 = 0, $3669 = 0.0, $367 = 0, $3670 = 0.0, $3671 = 0.0, $3672 = 0, $3673 = 0, $3674 = 0.0;
 var $3675 = 0, $3676 = 0, $3677 = 0.0, $3678 = 0.0, $3679 = 0.0, $368 = 0.0, $3680 = 0.0, $3681 = 0, $3682 = 0, $3683 = 0.0, $3684 = 0.0, $3685 = 0.0, $3686 = 0, $3687 = 0, $3688 = 0.0, $3689 = 0.0, $369 = 0.0, $3690 = 0.0, $3691 = 0, $3692 = 0;
 var $3693 = 0.0, $3694 = 0.0, $3695 = 0.0, $3696 = 0.0, $3697 = 0.0, $3698 = 0, $3699 = 0, $37 = 0.0, $370 = 0.0, $3700 = 0, $3701 = 0.0, $3702 = 0, $3703 = 0.0, $3704 = 0, $3705 = 0, $3706 = 0.0, $3707 = 0.0, $3708 = 0.0, $3709 = 0.0, $371 = 0.0;
 var $3710 = 0.0, $3711 = 0.0, $3712 = 0.0, $3713 = 0.0, $3714 = 0, $3715 = 0.0, $3716 = 0, $3717 = 0, $3718 = 0.0, $3719 = 0.0, $372 = 0.0, $3720 = 0.0, $3721 = 0.0, $3722 = 0.0, $3723 = 0.0, $3724 = 0.0, $3725 = 0, $3726 = 0, $3727 = 0.0, $3728 = 0.0;
 var $3729 = 0.0, $373 = 0.0, $3730 = 0.0, $3731 = 0.0, $3732 = 0, $3733 = 0, $3734 = 0.0, $3735 = 0.0, $3736 = 0.0, $3737 = 0, $3738 = 0, $3739 = 0.0, $374 = 0, $3740 = 0.0, $3741 = 0.0, $3742 = 0, $3743 = 0, $3744 = 0.0, $3745 = 0.0, $3746 = 0.0;
 var $3747 = 0.0, $3748 = 0.0, $3749 = 0, $375 = 0.0, $3750 = 0.0, $3751 = 0, $3752 = 0, $3753 = 0.0, $3754 = 0.0, $3755 = 0.0, $3756 = 0.0, $3757 = 0, $3758 = 0.0, $3759 = 0.0, $376 = 0.0, $3760 = 0.0, $3761 = 0, $3762 = 0, $3763 = 0.0, $3764 = 0.0;
 var $3765 = 0.0, $3766 = 0.0, $3767 = 0, $3768 = 0, $3769 = 0.0, $377 = 0.0, $3770 = 0.0, $3771 = 0.0, $3772 = 0.0, $3773 = 0.0, $3774 = 0.0, $3775 = 0, $3776 = 0, $3777 = 0.0, $3778 = 0.0, $3779 = 0.0, $378 = 0.0, $3780 = 0.0, $3781 = 0.0, $3782 = 0.0;
 var $3783 = 0, $3784 = 0.0, $3785 = 0, $3786 = 0, $3787 = 0.0, $3788 = 0.0, $3789 = 0, $379 = 0.0, $3790 = 0, $3791 = 0.0, $3792 = 0.0, $3793 = 0.0, $3794 = 0.0, $3795 = 0, $3796 = 0.0, $3797 = 0.0, $3798 = 0.0, $3799 = 0.0, $38 = 0.0, $380 = 0.0;
 var $3800 = 0.0, $3801 = 0.0, $3802 = 0.0, $3803 = 0, $3804 = 0, $3805 = 0.0, $3806 = 0.0, $3807 = 0.0, $3808 = 0.0, $3809 = 0.0, $381 = 0, $3810 = 0.0, $3811 = 0, $3812 = 0.0, $3813 = 0, $3814 = 0, $3815 = 0.0, $3816 = 0.0, $3817 = 0.0, $3818 = 0;
 var $3819 = 0.0, $382 = 0.0, $3820 = 0, $3821 = 0, $3822 = 0.0, $3823 = 0.0, $3824 = 0.0, $3825 = 0.0, $3826 = 0, $3827 = 0, $3828 = 0.0, $3829 = 0.0, $383 = 0.0, $3830 = 0.0, $3831 = 0, $3832 = 0, $3833 = 0.0, $3834 = 0.0, $3835 = 0.0, $3836 = 0;
 var $3837 = 0, $3838 = 0.0, $3839 = 0.0, $384 = 0.0, $3840 = 0.0, $3841 = 0.0, $3842 = 0.0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0.0, $3847 = 0, $3848 = 0.0, $3849 = 0, $385 = 0.0, $3850 = 0, $3851 = 0.0, $3852 = 0.0, $3853 = 0.0, $3854 = 0.0;
 var $3855 = 0.0, $3856 = 0.0, $3857 = 0.0, $3858 = 0.0, $3859 = 0, $386 = 0.0, $3860 = 0.0, $3861 = 0, $3862 = 0, $3863 = 0.0, $3864 = 0.0, $3865 = 0.0, $3866 = 0.0, $3867 = 0.0, $3868 = 0.0, $3869 = 0.0, $387 = 0.0, $3870 = 0, $3871 = 0, $3872 = 0.0;
 var $3873 = 0.0, $3874 = 0.0, $3875 = 0.0, $3876 = 0.0, $3877 = 0, $3878 = 0, $3879 = 0.0, $388 = 0, $3880 = 0.0, $3881 = 0.0, $3882 = 0, $3883 = 0, $3884 = 0.0, $3885 = 0.0, $3886 = 0.0, $3887 = 0, $3888 = 0, $3889 = 0.0, $389 = 0.0, $3890 = 0.0;
 var $3891 = 0.0, $3892 = 0.0, $3893 = 0.0, $3894 = 0, $3895 = 0.0, $3896 = 0, $3897 = 0, $3898 = 0.0, $3899 = 0.0, $39 = 0.0, $390 = 0.0, $3900 = 0.0, $3901 = 0.0, $3902 = 0, $3903 = 0.0, $3904 = 0.0, $3905 = 0.0, $3906 = 0, $3907 = 0, $3908 = 0.0;
 var $3909 = 0.0, $391 = 0.0, $3910 = 0.0, $3911 = 0.0, $3912 = 0, $3913 = 0, $3914 = 0.0, $3915 = 0.0, $3916 = 0.0, $3917 = 0.0, $3918 = 0.0, $3919 = 0.0, $392 = 0.0, $3920 = 0, $3921 = 0, $3922 = 0.0, $3923 = 0.0, $3924 = 0.0, $3925 = 0.0, $3926 = 0.0;
 var $3927 = 0.0, $3928 = 0, $3929 = 0.0, $393 = 0.0, $3930 = 0, $3931 = 0, $3932 = 0.0, $3933 = 0.0, $3934 = 0.0, $3935 = 0, $3936 = 0.0, $3937 = 0, $3938 = 0, $3939 = 0.0, $394 = 0.0, $3940 = 0.0, $3941 = 0.0, $3942 = 0.0, $3943 = 0, $3944 = 0;
 var $3945 = 0.0, $3946 = 0.0, $3947 = 0.0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0.0, $3951 = 0.0, $3952 = 0.0, $3953 = 0, $3954 = 0, $3955 = 0.0, $3956 = 0.0, $3957 = 0.0, $3958 = 0.0, $3959 = 0.0, $396 = 0.0, $3960 = 0, $3961 = 0, $3962 = 0;
 var $3963 = 0.0, $3964 = 0, $3965 = 0.0, $3966 = 0, $3967 = 0, $3968 = 0.0, $3969 = 0.0, $397 = 0.0, $3970 = 0.0, $3971 = 0.0, $3972 = 0.0, $3973 = 0.0, $3974 = 0.0, $3975 = 0.0, $3976 = 0, $3977 = 0.0, $3978 = 0, $3979 = 0, $398 = 0.0, $3980 = 0.0;
 var $3981 = 0.0, $3982 = 0.0, $3983 = 0.0, $3984 = 0.0, $3985 = 0.0, $3986 = 0.0, $3987 = 0, $3988 = 0, $3989 = 0.0, $399 = 0.0, $3990 = 0.0, $3991 = 0.0, $3992 = 0.0, $3993 = 0.0, $3994 = 0, $3995 = 0, $3996 = 0.0, $3997 = 0.0, $3998 = 0.0, $3999 = 0;
 var $4 = 0, $40 = 0.0, $400 = 0.0, $4000 = 0, $4001 = 0.0, $4002 = 0.0, $4003 = 0.0, $4004 = 0, $4005 = 0, $4006 = 0.0, $4007 = 0.0, $4008 = 0.0, $4009 = 0.0, $401 = 0.0, $4010 = 0.0, $4011 = 0, $4012 = 0.0, $4013 = 0, $4014 = 0, $4015 = 0.0;
 var $4016 = 0.0, $4017 = 0.0, $4018 = 0, $4019 = 0.0, $402 = 0.0, $4020 = 0, $4021 = 0, $4022 = 0.0, $4023 = 0.0, $4024 = 0.0, $4025 = 0.0, $4026 = 0, $4027 = 0, $4028 = 0.0, $4029 = 0.0, $403 = 0.0, $4030 = 0.0, $4031 = 0, $4032 = 0, $4033 = 0.0;
 var $4034 = 0.0, $4035 = 0.0, $4036 = 0, $4037 = 0, $4038 = 0.0, $4039 = 0.0, $404 = 0.0, $4040 = 0.0, $4041 = 0.0, $4042 = 0.0, $4043 = 0, $4044 = 0.0, $4045 = 0, $4046 = 0, $4047 = 0.0, $4048 = 0.0, $4049 = 0.0, $405 = 0.0, $4050 = 0.0, $4051 = 0;
 var $4052 = 0.0, $4053 = 0.0, $4054 = 0.0, $4055 = 0.0, $4056 = 0.0, $4057 = 0.0, $4058 = 0.0, $4059 = 0, $406 = 0.0, $4060 = 0, $4061 = 0.0, $4062 = 0.0, $4063 = 0.0, $4064 = 0.0, $4065 = 0, $4066 = 0.0, $4067 = 0.0, $4068 = 0.0, $4069 = 0.0, $407 = 0.0;
 var $4070 = 0.0, $4071 = 0.0, $4072 = 0.0, $4073 = 0.0, $4074 = 0, $4075 = 0, $4076 = 0.0, $4077 = 0.0, $4078 = 0.0, $4079 = 0.0, $408 = 0.0, $4080 = 0, $4081 = 0.0, $4082 = 0.0, $4083 = 0.0, $4084 = 0.0, $4085 = 0.0, $4086 = 0.0, $4087 = 0.0, $4088 = 0.0;
 var $4089 = 0.0, $409 = 0.0, $4090 = 0.0, $4091 = 0, $4092 = 0.0, $4093 = 0.0, $4094 = 0.0, $4095 = 0, $4096 = 0, $4097 = 0.0, $4098 = 0.0, $4099 = 0.0, $41 = 0.0, $410 = 0, $4100 = 0.0, $4101 = 0, $4102 = 0, $4103 = 0.0, $4104 = 0.0, $4105 = 0.0;
 var $4106 = 0.0, $4107 = 0.0, $4108 = 0, $4109 = 0, $411 = 0.0, $4110 = 0.0, $4111 = 0, $4112 = 0.0, $4113 = 0, $4114 = 0, $4115 = 0.0, $4116 = 0.0, $4117 = 0.0, $4118 = 0.0, $4119 = 0.0, $412 = 0.0, $4120 = 0.0, $4121 = 0.0, $4122 = 0.0, $4123 = 0.0;
 var $4124 = 0, $4125 = 0, $4126 = 0.0, $4127 = 0.0, $4128 = 0.0, $4129 = 0.0, $413 = 0.0, $4130 = 0, $4131 = 0, $4132 = 0.0, $4133 = 0.0, $4134 = 0.0, $4135 = 0, $4136 = 0, $4137 = 0.0, $4138 = 0.0, $4139 = 0.0, $414 = 0.0, $4140 = 0.0, $4141 = 0.0;
 var $4142 = 0, $4143 = 0, $4144 = 0.0, $4145 = 0.0, $4146 = 0.0, $4147 = 0, $4148 = 0, $4149 = 0.0, $415 = 0.0, $4150 = 0.0, $4151 = 0.0, $4152 = 0, $4153 = 0, $4154 = 0.0, $4155 = 0.0, $4156 = 0.0, $4157 = 0.0, $4158 = 0.0, $4159 = 0, $416 = 0.0;
 var $4160 = 0.0, $4161 = 0, $4162 = 0, $4163 = 0.0, $4164 = 0.0, $4165 = 0.0, $4166 = 0.0, $4167 = 0, $4168 = 0.0, $4169 = 0.0, $417 = 0, $4170 = 0.0, $4171 = 0, $4172 = 0, $4173 = 0.0, $4174 = 0.0, $4175 = 0.0, $4176 = 0.0, $4177 = 0, $4178 = 0;
 var $4179 = 0.0, $418 = 0.0, $4180 = 0.0, $4181 = 0.0, $4182 = 0.0, $4183 = 0.0, $4184 = 0.0, $4185 = 0, $4186 = 0, $4187 = 0.0, $4188 = 0.0, $4189 = 0.0, $419 = 0.0, $4190 = 0.0, $4191 = 0.0, $4192 = 0.0, $4193 = 0, $4194 = 0.0, $4195 = 0, $4196 = 0;
 var $4197 = 0.0, $4198 = 0.0, $4199 = 0, $42 = 0.0, $420 = 0.0, $4200 = 0, $4201 = 0.0, $4202 = 0.0, $4203 = 0.0, $4204 = 0.0, $4205 = 0, $4206 = 0.0, $4207 = 0.0, $4208 = 0.0, $4209 = 0.0, $421 = 0.0, $4210 = 0.0, $4211 = 0.0, $4212 = 0.0, $4213 = 0;
 var $4214 = 0, $4215 = 0.0, $4216 = 0.0, $4217 = 0.0, $4218 = 0.0, $4219 = 0.0, $422 = 0.0, $4220 = 0.0, $4221 = 0, $4222 = 0.0, $4223 = 0, $4224 = 0, $4225 = 0.0, $4226 = 0.0, $4227 = 0, $4228 = 0, $4229 = 0.0, $423 = 0.0, $4230 = 0.0, $4231 = 0.0;
 var $4232 = 0.0, $4233 = 0, $4234 = 0.0, $4235 = 0.0, $4236 = 0.0, $4237 = 0.0, $4238 = 0.0, $4239 = 0.0, $424 = 0, $4240 = 0.0, $4241 = 0, $4242 = 0, $4243 = 0.0, $4244 = 0.0, $4245 = 0.0, $4246 = 0.0, $4247 = 0.0, $4248 = 0.0, $4249 = 0, $425 = 0.0;
 var $4250 = 0.0, $4251 = 0, $4252 = 0, $4253 = 0.0, $4254 = 0.0, $4255 = 0.0, $4256 = 0, $4257 = 0, $4258 = 0.0, $4259 = 0, $426 = 0.0, $4260 = 0, $4261 = 0.0, $4262 = 0.0, $4263 = 0.0, $4264 = 0.0, $4265 = 0, $4266 = 0, $4267 = 0.0, $4268 = 0.0;
 var $4269 = 0.0, $427 = 0.0, $4270 = 0, $4271 = 0, $4272 = 0.0, $4273 = 0.0, $4274 = 0.0, $4275 = 0, $4276 = 0, $4277 = 0.0, $4278 = 0.0, $4279 = 0.0, $428 = 0.0, $4280 = 0.0, $4281 = 0.0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0.0, $4286 = 0;
 var $4287 = 0.0, $4288 = 0, $4289 = 0, $429 = 0.0, $4290 = 0.0, $4291 = 0.0, $4292 = 0.0, $4293 = 0.0, $4294 = 0.0, $4295 = 0.0, $4296 = 0.0, $4297 = 0.0, $4298 = 0, $4299 = 0.0, $43 = 0.0, $430 = 0.0, $4300 = 0, $4301 = 0, $4302 = 0.0, $4303 = 0.0;
 var $4304 = 0.0, $4305 = 0.0, $4306 = 0, $4307 = 0, $4308 = 0.0, $4309 = 0.0, $431 = 0, $4310 = 0.0, $4311 = 0.0, $4312 = 0.0, $4313 = 0.0, $4314 = 0.0, $4315 = 0.0, $4316 = 0, $4317 = 0, $4318 = 0.0, $4319 = 0.0, $432 = 0.0, $4320 = 0.0, $4321 = 0;
 var $4322 = 0, $4323 = 0.0, $4324 = 0.0, $4325 = 0.0, $4326 = 0, $4327 = 0, $4328 = 0.0, $4329 = 0.0, $433 = 0.0, $4330 = 0.0, $4331 = 0.0, $4332 = 0.0, $4333 = 0, $4334 = 0.0, $4335 = 0, $4336 = 0, $4337 = 0.0, $4338 = 0.0, $4339 = 0.0, $434 = 0.0;
 var $4340 = 0.0, $4341 = 0, $4342 = 0.0, $4343 = 0.0, $4344 = 0.0, $4345 = 0, $4346 = 0, $4347 = 0.0, $4348 = 0.0, $4349 = 0.0, $435 = 0.0, $4350 = 0.0, $4351 = 0, $4352 = 0, $4353 = 0.0, $4354 = 0.0, $4355 = 0.0, $4356 = 0.0, $4357 = 0.0, $4358 = 0.0;
 var $4359 = 0, $436 = 0.0, $4360 = 0, $4361 = 0.0, $4362 = 0.0, $4363 = 0.0, $4364 = 0.0, $4365 = 0.0, $4366 = 0.0, $4367 = 0, $4368 = 0.0, $4369 = 0, $437 = 0.0, $4370 = 0, $4371 = 0.0, $4372 = 0.0, $4373 = 0, $4374 = 0, $4375 = 0.0, $4376 = 0.0;
 var $4377 = 0.0, $4378 = 0.0, $4379 = 0, $438 = 0, $4380 = 0.0, $4381 = 0.0, $4382 = 0.0, $4383 = 0.0, $4384 = 0.0, $4385 = 0.0, $4386 = 0.0, $4387 = 0, $4388 = 0, $4389 = 0.0, $439 = 0.0, $4390 = 0.0, $4391 = 0.0, $4392 = 0.0, $4393 = 0.0, $4394 = 0.0;
 var $4395 = 0, $4396 = 0.0, $4397 = 0, $4398 = 0, $4399 = 0.0, $44 = 0.0, $440 = 0.0, $4400 = 0.0, $4401 = 0.0, $4402 = 0, $4403 = 0.0, $4404 = 0, $4405 = 0, $4406 = 0.0, $4407 = 0.0, $4408 = 0.0, $4409 = 0.0, $441 = 0.0, $4410 = 0, $4411 = 0;
 var $4412 = 0.0, $4413 = 0.0, $4414 = 0.0, $4415 = 0, $4416 = 0, $4417 = 0.0, $4418 = 0.0, $4419 = 0.0, $442 = 0.0, $4420 = 0, $4421 = 0, $4422 = 0.0, $4423 = 0.0, $4424 = 0.0, $4425 = 0.0, $4426 = 0.0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0.0;
 var $4430 = 0.0, $4431 = 0, $4432 = 0.0, $4433 = 0, $4434 = 0, $4435 = 0.0, $4436 = 0.0, $4437 = 0.0, $4438 = 0.0, $4439 = 0.0, $444 = 0.0, $4440 = 0.0, $4441 = 0.0, $4442 = 0.0, $4443 = 0, $4444 = 0.0, $4445 = 0, $4446 = 0, $4447 = 0.0, $4448 = 0.0;
 var $4449 = 0.0, $445 = 0, $4450 = 0.0, $4451 = 0, $4452 = 0, $4453 = 0.0, $4454 = 0.0, $4455 = 0.0, $4456 = 0.0, $4457 = 0.0, $4458 = 0.0, $4459 = 0.0, $446 = 0.0, $4460 = 0.0, $4461 = 0, $4462 = 0, $4463 = 0.0, $4464 = 0.0, $4465 = 0.0, $4466 = 0;
 var $4467 = 0, $4468 = 0.0, $4469 = 0.0, $447 = 0.0, $4470 = 0.0, $4471 = 0, $4472 = 0, $4473 = 0.0, $4474 = 0.0, $4475 = 0.0, $4476 = 0.0, $4477 = 0.0, $4478 = 0, $4479 = 0.0, $448 = 0.0, $4480 = 0, $4481 = 0, $4482 = 0.0, $4483 = 0.0, $4484 = 0.0;
 var $4485 = 0.0, $4486 = 0, $4487 = 0.0, $4488 = 0.0, $4489 = 0.0, $449 = 0.0, $4490 = 0, $4491 = 0, $4492 = 0.0, $4493 = 0.0, $4494 = 0.0, $4495 = 0.0, $4496 = 0, $4497 = 0, $4498 = 0.0, $4499 = 0.0, $45 = 0.0, $450 = 0.0, $4500 = 0.0, $4501 = 0.0;
 var $4502 = 0.0, $4503 = 0.0, $4504 = 0, $4505 = 0, $4506 = 0.0, $4507 = 0.0, $4508 = 0.0, $4509 = 0.0, $451 = 0.0, $4510 = 0.0, $4511 = 0.0, $4512 = 0, $4513 = 0.0, $4514 = 0, $4515 = 0, $4516 = 0.0, $4517 = 0.0, $4518 = 0.0, $4519 = 0, $452 = 0.0;
 var $4520 = 0.0, $4521 = 0, $4522 = 0, $4523 = 0.0, $4524 = 0.0, $4525 = 0.0, $4526 = 0.0, $4527 = 0, $4528 = 0, $4529 = 0.0, $453 = 0.0, $4530 = 0.0, $4531 = 0.0, $4532 = 0, $4533 = 0, $4534 = 0.0, $4535 = 0.0, $4536 = 0.0, $4537 = 0, $4538 = 0;
 var $4539 = 0.0, $454 = 0.0, $4540 = 0.0, $4541 = 0.0, $4542 = 0.0, $4543 = 0.0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0.0, $4548 = 0, $4549 = 0.0, $455 = 0.0, $4550 = 0, $4551 = 0, $4552 = 0.0, $4553 = 0.0, $4554 = 0.0, $4555 = 0.0, $4556 = 0.0;
 var $4557 = 0.0, $4558 = 0.0, $4559 = 0.0, $456 = 0.0, $4560 = 0, $4561 = 0.0, $4562 = 0, $4563 = 0, $4564 = 0.0, $4565 = 0.0, $4566 = 0.0, $4567 = 0.0, $4568 = 0.0, $4569 = 0.0, $457 = 0.0, $4570 = 0.0, $4571 = 0, $4572 = 0, $4573 = 0.0, $4574 = 0.0;
 var $4575 = 0.0, $4576 = 0.0, $4577 = 0.0, $4578 = 0, $4579 = 0, $458 = 0.0, $4580 = 0.0, $4581 = 0.0, $4582 = 0.0, $4583 = 0, $4584 = 0, $4585 = 0.0, $4586 = 0.0, $4587 = 0.0, $4588 = 0, $4589 = 0, $459 = 0.0, $4590 = 0.0, $4591 = 0.0, $4592 = 0.0;
 var $4593 = 0.0, $4594 = 0.0, $4595 = 0, $4596 = 0.0, $4597 = 0, $4598 = 0, $4599 = 0.0, $46 = 0, $460 = 0, $4600 = 0.0, $4601 = 0.0, $4602 = 0, $4603 = 0.0, $4604 = 0, $4605 = 0, $4606 = 0.0, $4607 = 0.0, $4608 = 0.0, $4609 = 0.0, $461 = 0.0;
 var $4610 = 0, $4611 = 0, $4612 = 0.0, $4613 = 0.0, $4614 = 0.0, $4615 = 0, $4616 = 0, $4617 = 0.0, $4618 = 0.0, $4619 = 0.0, $462 = 0.0, $4620 = 0, $4621 = 0, $4622 = 0.0, $4623 = 0.0, $4624 = 0.0, $4625 = 0.0, $4626 = 0.0, $4627 = 0, $4628 = 0.0;
 var $4629 = 0, $463 = 0.0, $4630 = 0, $4631 = 0.0, $4632 = 0.0, $4633 = 0.0, $4634 = 0.0, $4635 = 0, $4636 = 0.0, $4637 = 0.0, $4638 = 0.0, $4639 = 0.0, $464 = 0.0, $4640 = 0.0, $4641 = 0.0, $4642 = 0.0, $4643 = 0, $4644 = 0, $4645 = 0.0, $4646 = 0.0;
 var $4647 = 0.0, $4648 = 0.0, $4649 = 0, $465 = 0.0, $4650 = 0.0, $4651 = 0.0, $4652 = 0.0, $4653 = 0.0, $4654 = 0.0, $4655 = 0.0, $4656 = 0.0, $4657 = 0.0, $4658 = 0, $4659 = 0, $466 = 0.0, $4660 = 0.0, $4661 = 0.0, $4662 = 0.0, $4663 = 0.0, $4664 = 0;
 var $4665 = 0.0, $4666 = 0.0, $4667 = 0.0, $4668 = 0.0, $4669 = 0.0, $467 = 0, $4670 = 0.0, $4671 = 0.0, $4672 = 0.0, $4673 = 0.0, $4674 = 0.0, $4675 = 0, $4676 = 0.0, $4677 = 0.0, $4678 = 0.0, $4679 = 0, $468 = 0.0, $4680 = 0, $4681 = 0.0, $4682 = 0.0;
 var $4683 = 0.0, $4684 = 0.0, $4685 = 0, $4686 = 0, $4687 = 0.0, $4688 = 0.0, $4689 = 0.0, $469 = 0.0, $4690 = 0.0, $4691 = 0.0, $4692 = 0, $4693 = 0, $4694 = 0.0, $4695 = 0, $4696 = 0.0, $4697 = 0, $4698 = 0, $4699 = 0.0, $47 = 0.0, $470 = 0.0;
 var $4700 = 0.0, $4701 = 0.0, $4702 = 0.0, $4703 = 0.0, $4704 = 0.0, $4705 = 0.0, $4706 = 0.0, $4707 = 0.0, $4708 = 0.0, $4709 = 0.0, $471 = 0.0, $4710 = 0.0, $4711 = 0, $4712 = 0, $4713 = 0.0, $4714 = 0.0, $4715 = 0.0, $4716 = 0.0, $4717 = 0, $4718 = 0;
 var $4719 = 0.0, $472 = 0.0, $4720 = 0.0, $4721 = 0.0, $4722 = 0, $4723 = 0, $4724 = 0.0, $4725 = 0.0, $4726 = 0.0, $4727 = 0.0, $4728 = 0.0, $4729 = 0, $473 = 0.0, $4730 = 0, $4731 = 0.0, $4732 = 0.0, $4733 = 0.0, $4734 = 0, $4735 = 0, $4736 = 0.0;
 var $4737 = 0.0, $4738 = 0.0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0.0, $4742 = 0.0, $4743 = 0.0, $4744 = 0.0, $4745 = 0.0, $4746 = 0, $4747 = 0.0, $4748 = 0, $4749 = 0, $475 = 0.0, $4750 = 0.0, $4751 = 0.0, $4752 = 0.0, $4753 = 0.0, $4754 = 0;
 var $4755 = 0.0, $4756 = 0.0, $4757 = 0.0, $4758 = 0, $4759 = 0, $476 = 0.0, $4760 = 0.0, $4761 = 0.0, $4762 = 0.0, $4763 = 0.0, $4764 = 0, $4765 = 0, $4766 = 0.0, $4767 = 0.0, $4768 = 0.0, $4769 = 0.0, $477 = 0.0, $4770 = 0.0, $4771 = 0.0, $4772 = 0;
 var $4773 = 0, $4774 = 0.0, $4775 = 0.0, $4776 = 0.0, $4777 = 0.0, $4778 = 0.0, $4779 = 0.0, $478 = 0.0, $4780 = 0, $4781 = 0.0, $4782 = 0, $4783 = 0, $4784 = 0.0, $4785 = 0.0, $4786 = 0, $4787 = 0, $4788 = 0.0, $4789 = 0.0, $479 = 0.0, $4790 = 0.0;
 var $4791 = 0.0, $4792 = 0, $4793 = 0.0, $4794 = 0.0, $4795 = 0.0, $4796 = 0.0, $4797 = 0.0, $4798 = 0.0, $4799 = 0.0, $48 = 0, $480 = 0.0, $4800 = 0, $4801 = 0, $4802 = 0.0, $4803 = 0.0, $4804 = 0.0, $4805 = 0.0, $4806 = 0.0, $4807 = 0.0, $4808 = 0;
 var $4809 = 0.0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0.0, $4813 = 0.0, $4814 = 0, $4815 = 0, $4816 = 0.0, $4817 = 0.0, $4818 = 0.0, $4819 = 0.0, $482 = 0.0, $4820 = 0, $4821 = 0.0, $4822 = 0.0, $4823 = 0.0, $4824 = 0.0, $4825 = 0.0, $4826 = 0.0;
 var $4827 = 0.0, $4828 = 0, $4829 = 0, $483 = 0.0, $4830 = 0.0, $4831 = 0.0, $4832 = 0.0, $4833 = 0.0, $4834 = 0.0, $4835 = 0.0, $4836 = 0, $4837 = 0.0, $4838 = 0, $4839 = 0, $484 = 0.0, $4840 = 0.0, $4841 = 0.0, $4842 = 0.0, $4843 = 0, $4844 = 0;
 var $4845 = 0.0, $4846 = 0, $4847 = 0, $4848 = 0.0, $4849 = 0.0, $485 = 0.0, $4850 = 0.0, $4851 = 0.0, $4852 = 0, $4853 = 0, $4854 = 0.0, $4855 = 0.0, $4856 = 0.0, $4857 = 0, $4858 = 0, $4859 = 0.0, $486 = 0.0, $4860 = 0.0, $4861 = 0.0, $4862 = 0;
 var $4863 = 0, $4864 = 0.0, $4865 = 0.0, $4866 = 0.0, $4867 = 0.0, $4868 = 0.0, $4869 = 0, $487 = 0.0, $4870 = 0, $4871 = 0, $4872 = 0.0, $4873 = 0, $4874 = 0.0, $4875 = 0, $4876 = 0, $4877 = 0.0, $4878 = 0.0, $4879 = 0.0, $488 = 0, $4880 = 0.0;
 var $4881 = 0.0, $4882 = 0.0, $4883 = 0.0, $4884 = 0.0, $4885 = 0, $4886 = 0.0, $4887 = 0, $4888 = 0, $4889 = 0.0, $489 = 0.0, $4890 = 0.0, $4891 = 0.0, $4892 = 0.0, $4893 = 0.0, $4894 = 0.0, $4895 = 0.0, $4896 = 0, $4897 = 0, $4898 = 0.0, $4899 = 0.0;
 var $49 = 0.0, $490 = 0.0, $4900 = 0.0, $4901 = 0.0, $4902 = 0.0, $4903 = 0, $4904 = 0, $4905 = 0.0, $4906 = 0.0, $4907 = 0.0, $4908 = 0, $4909 = 0, $491 = 0.0, $4910 = 0.0, $4911 = 0.0, $4912 = 0.0, $4913 = 0, $4914 = 0, $4915 = 0.0, $4916 = 0.0;
 var $4917 = 0.0, $4918 = 0.0, $4919 = 0.0, $492 = 0.0, $4920 = 0, $4921 = 0.0, $4922 = 0, $4923 = 0, $4924 = 0.0, $4925 = 0.0, $4926 = 0.0, $4927 = 0.0, $4928 = 0, $4929 = 0.0, $493 = 0.0, $4930 = 0.0, $4931 = 0.0, $4932 = 0, $4933 = 0, $4934 = 0.0;
 var $4935 = 0.0, $4936 = 0.0, $4937 = 0.0, $4938 = 0, $4939 = 0, $494 = 0.0, $4940 = 0.0, $4941 = 0.0, $4942 = 0.0, $4943 = 0.0, $4944 = 0.0, $4945 = 0.0, $4946 = 0, $4947 = 0, $4948 = 0.0, $4949 = 0.0, $495 = 0, $4950 = 0.0, $4951 = 0.0, $4952 = 0.0;
 var $4953 = 0.0, $4954 = 0, $4955 = 0.0, $4956 = 0, $4957 = 0, $4958 = 0.0, $4959 = 0.0, $496 = 0.0, $4960 = 0, $4961 = 0, $4962 = 0.0, $4963 = 0.0, $4964 = 0.0, $4965 = 0.0, $4966 = 0, $4967 = 0.0, $4968 = 0.0, $4969 = 0.0, $497 = 0.0, $4970 = 0.0;
 var $4971 = 0.0, $4972 = 0.0, $4973 = 0.0, $4974 = 0, $4975 = 0, $4976 = 0.0, $4977 = 0.0, $4978 = 0.0, $4979 = 0.0, $498 = 0.0, $4980 = 0.0, $4981 = 0.0, $4982 = 0, $4983 = 0.0, $4984 = 0, $4985 = 0, $4986 = 0.0, $4987 = 0.0, $4988 = 0.0, $4989 = 0;
 var $499 = 0.0, $4990 = 0.0, $4991 = 0, $4992 = 0, $4993 = 0.0, $4994 = 0.0, $4995 = 0.0, $4996 = 0.0, $4997 = 0, $4998 = 0, $4999 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $5000 = 0.0, $5001 = 0.0, $5002 = 0, $5003 = 0, $5004 = 0.0, $5005 = 0.0;
 var $5006 = 0.0, $5007 = 0, $5008 = 0, $5009 = 0.0, $501 = 0.0, $5010 = 0.0, $5011 = 0.0, $5012 = 0.0, $5013 = 0.0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0.0, $5018 = 0, $5019 = 0.0, $502 = 0.0, $5020 = 0, $5021 = 0, $5022 = 0.0, $5023 = 0.0;
 var $5024 = 0.0, $5025 = 0.0, $5026 = 0.0, $5027 = 0.0, $5028 = 0.0, $5029 = 0.0, $503 = 0.0, $5030 = 0, $5031 = 0.0, $5032 = 0, $5033 = 0, $5034 = 0.0, $5035 = 0.0, $5036 = 0.0, $5037 = 0.0, $5038 = 0.0, $5039 = 0.0, $504 = 0.0, $5040 = 0.0, $5041 = 0;
 var $5042 = 0, $5043 = 0.0, $5044 = 0.0, $5045 = 0.0, $5046 = 0.0, $5047 = 0.0, $5048 = 0, $5049 = 0, $505 = 0.0, $5050 = 0.0, $5051 = 0.0, $5052 = 0.0, $5053 = 0, $5054 = 0, $5055 = 0.0, $5056 = 0.0, $5057 = 0.0, $5058 = 0, $5059 = 0, $506 = 0.0;
 var $5060 = 0.0, $5061 = 0.0, $5062 = 0.0, $5063 = 0.0, $5064 = 0.0, $5065 = 0, $5066 = 0.0, $5067 = 0, $5068 = 0, $5069 = 0.0, $507 = 0.0, $5070 = 0.0, $5071 = 0.0, $5072 = 0.0, $5073 = 0, $5074 = 0.0, $5075 = 0.0, $5076 = 0.0, $5077 = 0, $5078 = 0;
 var $5079 = 0.0, $508 = 0.0, $5080 = 0.0, $5081 = 0.0, $5082 = 0.0, $5083 = 0, $5084 = 0, $5085 = 0.0, $5086 = 0.0, $5087 = 0.0, $5088 = 0.0, $5089 = 0.0, $509 = 0.0, $5090 = 0.0, $5091 = 0, $5092 = 0, $5093 = 0.0, $5094 = 0.0, $5095 = 0.0, $5096 = 0.0;
 var $5097 = 0.0, $5098 = 0.0, $5099 = 0, $51 = 0.0, $510 = 0, $5100 = 0.0, $5101 = 0, $5102 = 0, $5103 = 0.0, $5104 = 0.0, $5105 = 0.0, $5106 = 0, $5107 = 0.0, $5108 = 0, $5109 = 0, $511 = 0.0, $5110 = 0.0, $5111 = 0.0, $5112 = 0.0, $5113 = 0.0;
 var $5114 = 0, $5115 = 0, $5116 = 0.0, $5117 = 0.0, $5118 = 0.0, $5119 = 0, $512 = 0.0, $5120 = 0, $5121 = 0.0, $5122 = 0.0, $5123 = 0.0, $5124 = 0, $5125 = 0, $5126 = 0.0, $5127 = 0.0, $5128 = 0.0, $5129 = 0.0, $513 = 0.0, $5130 = 0.0, $5131 = 0;
 var $5132 = 0, $5133 = 0, $5134 = 0.0, $5135 = 0, $5136 = 0.0, $5137 = 0, $5138 = 0, $5139 = 0.0, $514 = 0.0, $5140 = 0.0, $5141 = 0.0, $5142 = 0.0, $5143 = 0.0, $5144 = 0.0, $5145 = 0.0, $5146 = 0.0, $5147 = 0, $5148 = 0.0, $5149 = 0, $515 = 0.0;
 var $5150 = 0, $5151 = 0.0, $5152 = 0.0, $5153 = 0.0, $5154 = 0.0, $5155 = 0.0, $5156 = 0.0, $5157 = 0.0, $5158 = 0, $5159 = 0, $516 = 0.0, $5160 = 0.0, $5161 = 0.0, $5162 = 0.0, $5163 = 0.0, $5164 = 0.0, $5165 = 0, $5166 = 0, $5167 = 0.0, $5168 = 0.0;
 var $5169 = 0.0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0.0, $5173 = 0.0, $5174 = 0.0, $5175 = 0, $5176 = 0, $5177 = 0.0, $5178 = 0.0, $5179 = 0.0, $518 = 0.0, $5180 = 0.0, $5181 = 0.0, $5182 = 0, $5183 = 0.0, $5184 = 0, $5185 = 0, $5186 = 0.0;
 var $5187 = 0.0, $5188 = 0.0, $5189 = 0, $519 = 0.0, $5190 = 0.0, $5191 = 0, $5192 = 0, $5193 = 0.0, $5194 = 0.0, $5195 = 0.0, $5196 = 0.0, $5197 = 0, $5198 = 0, $5199 = 0.0, $52 = 0.0, $520 = 0.0, $5200 = 0.0, $5201 = 0.0, $5202 = 0, $5203 = 0;
 var $5204 = 0.0, $5205 = 0.0, $5206 = 0.0, $5207 = 0, $5208 = 0, $5209 = 0.0, $521 = 0.0, $5210 = 0.0, $5211 = 0.0, $5212 = 0.0, $5213 = 0.0, $5214 = 0, $5215 = 0.0, $5216 = 0, $5217 = 0, $5218 = 0.0, $5219 = 0.0, $522 = 0.0, $5220 = 0.0, $5221 = 0.0;
 var $5222 = 0, $5223 = 0.0, $5224 = 0.0, $5225 = 0.0, $5226 = 0.0, $5227 = 0.0, $5228 = 0.0, $5229 = 0.0, $523 = 0.0, $5230 = 0, $5231 = 0, $5232 = 0.0, $5233 = 0.0, $5234 = 0.0, $5235 = 0.0, $5236 = 0, $5237 = 0.0, $5238 = 0.0, $5239 = 0.0, $524 = 0;
 var $5240 = 0.0, $5241 = 0.0, $5242 = 0.0, $5243 = 0.0, $5244 = 0.0, $5245 = 0, $5246 = 0, $5247 = 0.0, $5248 = 0.0, $5249 = 0.0, $525 = 0.0, $5250 = 0.0, $5251 = 0, $5252 = 0.0, $5253 = 0.0, $5254 = 0.0, $5255 = 0.0, $5256 = 0.0, $5257 = 0.0, $5258 = 0.0;
 var $5259 = 0.0, $526 = 0.0, $5260 = 0.0, $5261 = 0.0, $5262 = 0, $5263 = 0.0, $5264 = 0.0, $5265 = 0.0, $5266 = 0, $5267 = 0, $5268 = 0.0, $5269 = 0.0, $527 = 0.0, $5270 = 0.0, $5271 = 0.0, $5272 = 0, $5273 = 0, $5274 = 0.0, $5275 = 0.0, $5276 = 0.0;
 var $5277 = 0.0, $5278 = 0.0, $5279 = 0, $528 = 0.0, $5280 = 0, $5281 = 0.0, $5282 = 0, $5283 = 0.0, $5284 = 0, $5285 = 0, $5286 = 0.0, $5287 = 0.0, $5288 = 0.0, $5289 = 0.0, $529 = 0.0, $5290 = 0.0, $5291 = 0.0, $5292 = 0.0, $5293 = 0.0, $5294 = 0.0;
 var $5295 = 0, $5296 = 0, $5297 = 0.0, $5298 = 0.0, $5299 = 0.0, $53 = 0.0, $530 = 0.0, $5300 = 0.0, $5301 = 0, $5302 = 0, $5303 = 0.0, $5304 = 0.0, $5305 = 0.0, $5306 = 0, $5307 = 0, $5308 = 0.0, $5309 = 0.0, $531 = 0, $5310 = 0.0, $5311 = 0.0;
 var $5312 = 0.0, $5313 = 0, $5314 = 0, $5315 = 0.0, $5316 = 0.0, $5317 = 0.0, $5318 = 0, $5319 = 0, $532 = 0.0, $5320 = 0.0, $5321 = 0.0, $5322 = 0.0, $5323 = 0, $5324 = 0, $5325 = 0.0, $5326 = 0.0, $5327 = 0.0, $5328 = 0.0, $5329 = 0.0, $533 = 0.0;
 var $5330 = 0, $5331 = 0.0, $5332 = 0, $5333 = 0, $5334 = 0.0, $5335 = 0.0, $5336 = 0.0, $5337 = 0.0, $5338 = 0, $5339 = 0.0, $534 = 0.0, $5340 = 0.0, $5341 = 0.0, $5342 = 0, $5343 = 0, $5344 = 0.0, $5345 = 0.0, $5346 = 0.0, $5347 = 0.0, $5348 = 0;
 var $5349 = 0, $535 = 0.0, $5350 = 0.0, $5351 = 0.0, $5352 = 0.0, $5353 = 0.0, $5354 = 0.0, $5355 = 0.0, $5356 = 0, $5357 = 0, $5358 = 0.0, $5359 = 0.0, $536 = 0.0, $5360 = 0.0, $5361 = 0.0, $5362 = 0.0, $5363 = 0.0, $5364 = 0, $5365 = 0.0, $5366 = 0;
 var $5367 = 0, $5368 = 0.0, $5369 = 0.0, $537 = 0.0, $5370 = 0, $5371 = 0, $5372 = 0.0, $5373 = 0.0, $5374 = 0.0, $5375 = 0.0, $5376 = 0, $5377 = 0.0, $5378 = 0.0, $5379 = 0.0, $538 = 0, $5380 = 0.0, $5381 = 0.0, $5382 = 0.0, $5383 = 0.0, $5384 = 0;
 var $5385 = 0, $5386 = 0.0, $5387 = 0.0, $5388 = 0.0, $5389 = 0.0, $539 = 0.0, $5390 = 0.0, $5391 = 0.0, $5392 = 0, $5393 = 0.0, $5394 = 0, $5395 = 0, $5396 = 0.0, $5397 = 0.0, $5398 = 0, $5399 = 0, $54 = 0.0, $540 = 0.0, $5400 = 0.0, $5401 = 0.0;
 var $5402 = 0.0, $5403 = 0.0, $5404 = 0, $5405 = 0.0, $5406 = 0.0, $5407 = 0.0, $5408 = 0.0, $5409 = 0.0, $541 = 0.0, $5410 = 0.0, $5411 = 0.0, $5412 = 0, $5413 = 0, $5414 = 0.0, $5415 = 0.0, $5416 = 0.0, $5417 = 0.0, $5418 = 0.0, $5419 = 0.0, $542 = 0.0;
 var $5420 = 0, $5421 = 0.0, $5422 = 0, $5423 = 0, $5424 = 0.0, $5425 = 0.0, $5426 = 0.0, $5427 = 0, $5428 = 0, $5429 = 0.0, $543 = 0.0, $5430 = 0, $5431 = 0, $5432 = 0.0, $5433 = 0.0, $5434 = 0.0, $5435 = 0.0, $5436 = 0, $5437 = 0, $5438 = 0.0;
 var $5439 = 0.0, $544 = 0.0, $5440 = 0.0, $5441 = 0, $5442 = 0, $5443 = 0.0, $5444 = 0.0, $5445 = 0.0, $5446 = 0, $5447 = 0, $5448 = 0.0, $5449 = 0.0, $545 = 0, $5450 = 0.0, $5451 = 0.0, $5452 = 0.0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0.0;
 var $5457 = 0, $5458 = 0.0, $5459 = 0, $546 = 0.0, $5460 = 0, $5461 = 0.0, $5462 = 0.0, $5463 = 0.0, $5464 = 0.0, $5465 = 0.0, $5466 = 0.0, $5467 = 0.0, $5468 = 0.0, $5469 = 0, $547 = 0.0, $5470 = 0.0, $5471 = 0, $5472 = 0, $5473 = 0.0, $5474 = 0.0;
 var $5475 = 0.0, $5476 = 0.0, $5477 = 0.0, $5478 = 0.0, $5479 = 0.0, $548 = 0.0, $5480 = 0, $5481 = 0, $5482 = 0.0, $5483 = 0.0, $5484 = 0.0, $5485 = 0.0, $5486 = 0.0, $5487 = 0, $5488 = 0, $5489 = 0.0, $549 = 0.0, $5490 = 0.0, $5491 = 0.0, $5492 = 0;
 var $5493 = 0, $5494 = 0.0, $5495 = 0.0, $5496 = 0.0, $5497 = 0, $5498 = 0, $5499 = 0.0, $55 = 0, $550 = 0.0, $5500 = 0.0, $5501 = 0.0, $5502 = 0.0, $5503 = 0.0, $5504 = 0, $5505 = 0.0, $5506 = 0, $5507 = 0, $5508 = 0.0, $5509 = 0.0, $551 = 0.0;
 var $5510 = 0.0, $5511 = 0.0, $5512 = 0, $5513 = 0.0, $5514 = 0.0, $5515 = 0.0, $5516 = 0, $5517 = 0, $5518 = 0.0, $5519 = 0.0, $552 = 0.0, $5520 = 0.0, $5521 = 0.0, $5522 = 0, $5523 = 0, $5524 = 0.0, $5525 = 0.0, $5526 = 0.0, $5527 = 0.0, $5528 = 0.0;
 var $5529 = 0.0, $553 = 0.0, $5530 = 0, $5531 = 0, $5532 = 0.0, $5533 = 0.0, $5534 = 0.0, $5535 = 0.0, $5536 = 0.0, $5537 = 0.0, $5538 = 0, $5539 = 0.0, $554 = 0.0, $5540 = 0, $5541 = 0, $5542 = 0.0, $5543 = 0.0, $5544 = 0, $5545 = 0, $5546 = 0.0;
 var $5547 = 0.0, $5548 = 0.0, $5549 = 0.0, $555 = 0.0, $5550 = 0, $5551 = 0.0, $5552 = 0.0, $5553 = 0.0, $5554 = 0.0, $5555 = 0.0, $5556 = 0.0, $5557 = 0.0, $5558 = 0, $5559 = 0, $556 = 0.0, $5560 = 0.0, $5561 = 0.0, $5562 = 0.0, $5563 = 0.0, $5564 = 0.0;
 var $5565 = 0.0, $5566 = 0, $5567 = 0.0, $5568 = 0, $5569 = 0, $557 = 0.0, $5570 = 0.0, $5571 = 0.0, $5572 = 0.0, $5573 = 0, $5574 = 0.0, $5575 = 0, $5576 = 0, $5577 = 0.0, $5578 = 0.0, $5579 = 0.0, $558 = 0.0, $5580 = 0.0, $5581 = 0, $5582 = 0;
 var $5583 = 0.0, $5584 = 0.0, $5585 = 0.0, $5586 = 0, $5587 = 0, $5588 = 0.0, $5589 = 0.0, $559 = 0.0, $5590 = 0.0, $5591 = 0, $5592 = 0, $5593 = 0.0, $5594 = 0.0, $5595 = 0.0, $5596 = 0.0, $5597 = 0.0, $5598 = 0, $5599 = 0, $56 = 0.0, $560 = 0;
 var $5600 = 0, $5601 = 0.0, $5602 = 0, $5603 = 0.0, $5604 = 0, $5605 = 0, $5606 = 0.0, $5607 = 0.0, $5608 = 0.0, $5609 = 0.0, $561 = 0.0, $5610 = 0.0, $5611 = 0.0, $5612 = 0.0, $5613 = 0.0, $5614 = 0, $5615 = 0.0, $5616 = 0, $5617 = 0, $5618 = 0.0;
 var $5619 = 0.0, $562 = 0.0, $5620 = 0.0, $5621 = 0.0, $5622 = 0.0, $5623 = 0.0, $5624 = 0.0, $5625 = 0, $5626 = 0, $5627 = 0.0, $5628 = 0.0, $5629 = 0.0, $563 = 0.0, $5630 = 0.0, $5631 = 0.0, $5632 = 0, $5633 = 0, $5634 = 0.0, $5635 = 0.0, $5636 = 0.0;
 var $5637 = 0, $5638 = 0, $5639 = 0.0, $564 = 0.0, $5640 = 0.0, $5641 = 0.0, $5642 = 0, $5643 = 0, $5644 = 0.0, $5645 = 0.0, $5646 = 0.0, $5647 = 0.0, $5648 = 0.0, $5649 = 0, $565 = 0.0, $5650 = 0.0, $5651 = 0, $5652 = 0, $5653 = 0.0, $5654 = 0.0;
 var $5655 = 0.0, $5656 = 0.0, $5657 = 0, $5658 = 0.0, $5659 = 0.0, $566 = 0.0, $5660 = 0.0, $5661 = 0, $5662 = 0, $5663 = 0.0, $5664 = 0.0, $5665 = 0.0, $5666 = 0.0, $5667 = 0, $5668 = 0, $5669 = 0.0, $567 = 0, $5670 = 0.0, $5671 = 0.0, $5672 = 0.0;
 var $5673 = 0.0, $5674 = 0.0, $5675 = 0, $5676 = 0, $5677 = 0.0, $5678 = 0.0, $5679 = 0.0, $568 = 0.0, $5680 = 0.0, $5681 = 0.0, $5682 = 0.0, $5683 = 0, $5684 = 0.0, $5685 = 0, $5686 = 0, $5687 = 0.0, $5688 = 0.0, $5689 = 0.0, $569 = 0.0, $5690 = 0;
 var $5691 = 0.0, $5692 = 0, $5693 = 0, $5694 = 0.0, $5695 = 0.0, $5696 = 0.0, $5697 = 0.0, $5698 = 0, $5699 = 0, $57 = 0, $570 = 0.0, $5700 = 0.0, $5701 = 0.0, $5702 = 0.0, $5703 = 0, $5704 = 0, $5705 = 0.0, $5706 = 0.0, $5707 = 0.0, $5708 = 0;
 var $5709 = 0, $571 = 0.0, $5710 = 0.0, $5711 = 0.0, $5712 = 0.0, $5713 = 0.0, $5714 = 0.0, $5715 = 0, $5716 = 0, $5717 = 0, $5718 = 0.0, $5719 = 0, $572 = 0.0, $5720 = 0.0, $5721 = 0, $5722 = 0, $5723 = 0.0, $5724 = 0.0, $5725 = 0.0, $5726 = 0.0;
 var $5727 = 0.0, $5728 = 0.0, $5729 = 0.0, $573 = 0.0, $5730 = 0.0, $5731 = 0, $5732 = 0.0, $5733 = 0, $5734 = 0, $5735 = 0.0, $5736 = 0.0, $5737 = 0.0, $5738 = 0.0, $5739 = 0.0, $574 = 0, $5740 = 0.0, $5741 = 0.0, $5742 = 0, $5743 = 0, $5744 = 0.0;
 var $5745 = 0.0, $5746 = 0.0, $5747 = 0.0, $5748 = 0.0, $5749 = 0, $575 = 0.0, $5750 = 0, $5751 = 0.0, $5752 = 0.0, $5753 = 0.0, $5754 = 0, $5755 = 0, $5756 = 0.0, $5757 = 0.0, $5758 = 0.0, $5759 = 0, $576 = 0.0, $5760 = 0, $5761 = 0.0, $5762 = 0.0;
 var $5763 = 0.0, $5764 = 0.0, $5765 = 0.0, $5766 = 0, $5767 = 0.0, $5768 = 0, $5769 = 0, $577 = 0.0, $5770 = 0.0, $5771 = 0.0, $5772 = 0.0, $5773 = 0, $5774 = 0.0, $5775 = 0, $5776 = 0, $5777 = 0.0, $5778 = 0.0, $5779 = 0.0, $578 = 0.0, $5780 = 0.0;
 var $5781 = 0, $5782 = 0, $5783 = 0.0, $5784 = 0.0, $5785 = 0.0, $5786 = 0, $5787 = 0, $5788 = 0.0, $5789 = 0.0, $579 = 0.0, $5790 = 0.0, $5791 = 0, $5792 = 0, $5793 = 0.0, $5794 = 0.0, $5795 = 0.0, $5796 = 0.0, $5797 = 0.0, $5798 = 0, $5799 = 0.0;
 var $58 = 0.0, $580 = 0.0, $5800 = 0, $5801 = 0, $5802 = 0.0, $5803 = 0.0, $5804 = 0.0, $5805 = 0.0, $5806 = 0, $5807 = 0.0, $5808 = 0.0, $5809 = 0.0, $581 = 0, $5810 = 0.0, $5811 = 0.0, $5812 = 0.0, $5813 = 0.0, $5814 = 0, $5815 = 0, $5816 = 0.0;
 var $5817 = 0.0, $5818 = 0.0, $5819 = 0.0, $582 = 0.0, $5820 = 0, $5821 = 0.0, $5822 = 0.0, $5823 = 0.0, $5824 = 0.0, $5825 = 0.0, $5826 = 0.0, $5827 = 0.0, $5828 = 0.0, $5829 = 0, $583 = 0.0, $5830 = 0, $5831 = 0.0, $5832 = 0.0, $5833 = 0.0, $5834 = 0.0;
 var $5835 = 0, $5836 = 0.0, $5837 = 0.0, $5838 = 0.0, $5839 = 0.0, $584 = 0.0, $5840 = 0.0, $5841 = 0.0, $5842 = 0.0, $5843 = 0.0, $5844 = 0.0, $5845 = 0.0, $5846 = 0, $5847 = 0.0, $5848 = 0.0, $5849 = 0.0, $585 = 0.0, $5850 = 0, $5851 = 0, $5852 = 0.0;
 var $5853 = 0.0, $5854 = 0.0, $5855 = 0.0, $5856 = 0, $5857 = 0, $5858 = 0.0, $5859 = 0.0, $586 = 0.0, $5860 = 0.0, $5861 = 0.0, $5862 = 0.0, $5863 = 0, $5864 = 0, $5865 = 0.0, $5866 = 0, $5867 = 0.0, $5868 = 0, $5869 = 0, $587 = 0.0, $5870 = 0.0;
 var $5871 = 0.0, $5872 = 0.0, $5873 = 0.0, $5874 = 0.0, $5875 = 0.0, $5876 = 0.0, $5877 = 0.0, $5878 = 0.0, $5879 = 0.0, $588 = 0, $5880 = 0.0, $5881 = 0.0, $5882 = 0.0, $5883 = 0.0, $5884 = 0.0, $5885 = 0.0, $5886 = 0.0, $5887 = 0.0, $5888 = 0, $5889 = 0;
 var $589 = 0.0, $5890 = 0.0, $5891 = 0.0, $5892 = 0.0, $5893 = 0.0, $5894 = 0, $5895 = 0, $5896 = 0.0, $5897 = 0.0, $5898 = 0.0, $5899 = 0, $59 = 0.0, $590 = 0.0, $5900 = 0, $5901 = 0.0, $5902 = 0.0, $5903 = 0.0, $5904 = 0.0, $5905 = 0.0, $5906 = 0;
 var $5907 = 0, $5908 = 0.0, $5909 = 0.0, $591 = 0.0, $5910 = 0.0, $5911 = 0, $5912 = 0, $5913 = 0.0, $5914 = 0.0, $5915 = 0.0, $5916 = 0, $5917 = 0, $5918 = 0.0, $5919 = 0.0, $592 = 0.0, $5920 = 0.0, $5921 = 0.0, $5922 = 0.0, $5923 = 0, $5924 = 0.0;
 var $5925 = 0, $5926 = 0, $5927 = 0.0, $5928 = 0.0, $5929 = 0.0, $593 = 0.0, $5930 = 0.0, $5931 = 0, $5932 = 0.0, $5933 = 0.0, $5934 = 0.0, $5935 = 0, $5936 = 0, $5937 = 0.0, $5938 = 0.0, $5939 = 0.0, $594 = 0.0, $5940 = 0.0, $5941 = 0, $5942 = 0;
 var $5943 = 0.0, $5944 = 0.0, $5945 = 0.0, $5946 = 0.0, $5947 = 0.0, $5948 = 0.0, $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0.0, $5952 = 0.0, $5953 = 0.0, $5954 = 0.0, $5955 = 0.0, $5956 = 0.0, $5957 = 0, $5958 = 0.0, $5959 = 0, $596 = 0.0, $5960 = 0;
 var $5961 = 0.0, $5962 = 0.0, $5963 = 0, $5964 = 0, $5965 = 0.0, $5966 = 0.0, $5967 = 0.0, $5968 = 0.0, $5969 = 0, $597 = 0.0, $5970 = 0.0, $5971 = 0.0, $5972 = 0.0, $5973 = 0.0, $5974 = 0.0, $5975 = 0.0, $5976 = 0.0, $5977 = 0, $5978 = 0, $5979 = 0.0;
 var $598 = 0.0, $5980 = 0.0, $5981 = 0.0, $5982 = 0.0, $5983 = 0.0, $5984 = 0.0, $5985 = 0, $5986 = 0.0, $5987 = 0, $5988 = 0, $5989 = 0.0, $599 = 0.0, $5990 = 0.0, $5991 = 0, $5992 = 0, $5993 = 0.0, $5994 = 0.0, $5995 = 0.0, $5996 = 0.0, $5997 = 0;
 var $5998 = 0.0, $5999 = 0.0, $6 = 0.0, $60 = 0.0, $600 = 0.0, $6000 = 0.0, $6001 = 0.0, $6002 = 0.0, $6003 = 0.0, $6004 = 0.0, $6005 = 0, $6006 = 0, $6007 = 0.0, $6008 = 0.0, $6009 = 0.0, $601 = 0.0, $6010 = 0.0, $6011 = 0.0, $6012 = 0.0, $6013 = 0;
 var $6014 = 0.0, $6015 = 0, $6016 = 0, $6017 = 0.0, $6018 = 0.0, $6019 = 0.0, $602 = 0.0, $6020 = 0, $6021 = 0, $6022 = 0.0, $6023 = 0, $6024 = 0, $6025 = 0.0, $6026 = 0.0, $6027 = 0.0, $6028 = 0.0, $6029 = 0, $603 = 0.0, $6030 = 0, $6031 = 0.0;
 var $6032 = 0.0, $6033 = 0.0, $6034 = 0, $6035 = 0, $6036 = 0.0, $6037 = 0.0, $6038 = 0.0, $6039 = 0, $604 = 0.0, $6040 = 0, $6041 = 0.0, $6042 = 0.0, $6043 = 0.0, $6044 = 0.0, $6045 = 0.0, $6046 = 0, $6047 = 0, $6048 = 0, $6049 = 0.0, $605 = 0.0;
 var $6050 = 0, $6051 = 0.0, $6052 = 0, $6053 = 0, $6054 = 0.0, $6055 = 0.0, $6056 = 0.0, $6057 = 0.0, $6058 = 0.0, $6059 = 0.0, $606 = 0.0, $6060 = 0.0, $6061 = 0.0, $6062 = 0, $6063 = 0.0, $6064 = 0, $6065 = 0, $6066 = 0.0, $6067 = 0.0, $6068 = 0.0;
 var $6069 = 0.0, $607 = 0.0, $6070 = 0, $6071 = 0, $6072 = 0.0, $6073 = 0.0, $6074 = 0.0, $6075 = 0.0, $6076 = 0.0, $6077 = 0.0, $6078 = 0.0, $6079 = 0.0, $608 = 0.0, $6080 = 0, $6081 = 0, $6082 = 0.0, $6083 = 0.0, $6084 = 0.0, $6085 = 0, $6086 = 0;
 var $6087 = 0.0, $6088 = 0.0, $6089 = 0.0, $609 = 0.0, $6090 = 0, $6091 = 0, $6092 = 0.0, $6093 = 0.0, $6094 = 0.0, $6095 = 0.0, $6096 = 0.0, $6097 = 0, $6098 = 0.0, $6099 = 0, $61 = 0.0, $610 = 0, $6100 = 0, $6101 = 0.0, $6102 = 0.0, $6103 = 0.0;
 var $6104 = 0.0, $6105 = 0, $6106 = 0.0, $6107 = 0.0, $6108 = 0.0, $6109 = 0, $611 = 0.0, $6110 = 0, $6111 = 0.0, $6112 = 0.0, $6113 = 0.0, $6114 = 0.0, $6115 = 0, $6116 = 0, $6117 = 0.0, $6118 = 0.0, $6119 = 0.0, $612 = 0.0, $6120 = 0.0, $6121 = 0.0;
 var $6122 = 0.0, $6123 = 0, $6124 = 0, $6125 = 0.0, $6126 = 0.0, $6127 = 0.0, $6128 = 0.0, $6129 = 0.0, $613 = 0.0, $6130 = 0.0, $6131 = 0, $6132 = 0.0, $6133 = 0, $6134 = 0, $6135 = 0.0, $6136 = 0.0, $6137 = 0, $6138 = 0, $6139 = 0.0, $614 = 0.0;
 var $6140 = 0.0, $6141 = 0.0, $6142 = 0.0, $6143 = 0, $6144 = 0.0, $6145 = 0.0, $6146 = 0.0, $6147 = 0.0, $6148 = 0.0, $6149 = 0.0, $615 = 0.0, $6150 = 0.0, $6151 = 0, $6152 = 0, $6153 = 0.0, $6154 = 0.0, $6155 = 0.0, $6156 = 0.0, $6157 = 0.0, $6158 = 0.0;
 var $6159 = 0, $616 = 0.0, $6160 = 0.0, $6161 = 0, $6162 = 0, $6163 = 0.0, $6164 = 0.0, $6165 = 0.0, $6166 = 0, $6167 = 0.0, $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0.0, $6171 = 0.0, $6172 = 0.0, $6173 = 0.0, $6174 = 0, $6175 = 0, $6176 = 0.0;
 var $6177 = 0.0, $6178 = 0.0, $6179 = 0, $618 = 0.0, $6180 = 0, $6181 = 0.0, $6182 = 0.0, $6183 = 0.0, $6184 = 0, $6185 = 0, $6186 = 0.0, $6187 = 0.0, $6188 = 0.0, $6189 = 0.0, $619 = 0.0, $6190 = 0.0, $6191 = 0, $6192 = 0, $6193 = 0, $6194 = 0.0;
 var $6195 = 0, $6196 = 0.0, $6197 = 0, $6198 = 0, $6199 = 0.0, $62 = 0.0, $620 = 0.0, $6200 = 0.0, $6201 = 0.0, $6202 = 0.0, $6203 = 0.0, $6204 = 0.0, $6205 = 0.0, $6206 = 0.0, $6207 = 0, $6208 = 0.0, $6209 = 0, $621 = 0.0, $6210 = 0, $6211 = 0.0;
 var $6212 = 0.0, $6213 = 0.0, $6214 = 0.0, $6215 = 0, $6216 = 0, $6217 = 0.0, $6218 = 0.0, $6219 = 0.0, $622 = 0.0, $6220 = 0.0, $6221 = 0.0, $6222 = 0.0, $6223 = 0.0, $6224 = 0.0, $6225 = 0, $6226 = 0, $6227 = 0.0, $6228 = 0.0, $6229 = 0.0, $623 = 0.0;
 var $6230 = 0, $6231 = 0, $6232 = 0.0, $6233 = 0.0, $6234 = 0.0, $6235 = 0, $6236 = 0, $6237 = 0.0, $6238 = 0.0, $6239 = 0.0, $624 = 0, $6240 = 0.0, $6241 = 0.0, $6242 = 0, $6243 = 0.0, $6244 = 0, $6245 = 0, $6246 = 0.0, $6247 = 0.0, $6248 = 0.0;
 var $6249 = 0.0, $625 = 0.0, $6250 = 0, $6251 = 0.0, $6252 = 0.0, $6253 = 0.0, $6254 = 0, $6255 = 0, $6256 = 0.0, $6257 = 0.0, $6258 = 0.0, $6259 = 0.0, $626 = 0.0, $6260 = 0, $6261 = 0, $6262 = 0.0, $6263 = 0.0, $6264 = 0.0, $6265 = 0.0, $6266 = 0.0;
 var $6267 = 0.0, $6268 = 0, $6269 = 0, $627 = 0.0, $6270 = 0.0, $6271 = 0.0, $6272 = 0.0, $6273 = 0.0, $6274 = 0.0, $6275 = 0.0, $6276 = 0, $6277 = 0.0, $6278 = 0, $6279 = 0, $628 = 0.0, $6280 = 0.0, $6281 = 0.0, $6282 = 0.0, $6283 = 0, $6284 = 0.0;
 var $6285 = 0, $6286 = 0, $6287 = 0.0, $6288 = 0.0, $6289 = 0.0, $629 = 0.0, $6290 = 0.0, $6291 = 0, $6292 = 0, $6293 = 0.0, $6294 = 0.0, $6295 = 0.0, $6296 = 0, $6297 = 0, $6298 = 0.0, $6299 = 0.0, $63 = 0.0, $630 = 0.0, $6300 = 0.0, $6301 = 0;
 var $6302 = 0, $6303 = 0.0, $6304 = 0.0, $6305 = 0.0, $6306 = 0.0, $6307 = 0.0, $6308 = 0, $6309 = 0, $631 = 0, $6310 = 0, $6311 = 0.0, $6312 = 0, $6313 = 0.0, $6314 = 0, $6315 = 0, $6316 = 0.0, $6317 = 0.0, $6318 = 0.0, $6319 = 0.0, $632 = 0.0;
 var $6320 = 0.0, $6321 = 0.0, $6322 = 0.0, $6323 = 0.0, $6324 = 0, $6325 = 0.0, $6326 = 0, $6327 = 0, $6328 = 0.0, $6329 = 0.0, $633 = 0.0, $6330 = 0.0, $6331 = 0.0, $6332 = 0.0, $6333 = 0.0, $6334 = 0.0, $6335 = 0, $6336 = 0, $6337 = 0.0, $6338 = 0.0;
 var $6339 = 0.0, $634 = 0.0, $6340 = 0.0, $6341 = 0.0, $6342 = 0, $6343 = 0, $6344 = 0.0, $6345 = 0.0, $6346 = 0.0, $6347 = 0, $6348 = 0, $6349 = 0.0, $635 = 0.0, $6350 = 0.0, $6351 = 0.0, $6352 = 0, $6353 = 0, $6354 = 0.0, $6355 = 0.0, $6356 = 0.0;
 var $6357 = 0.0, $6358 = 0.0, $6359 = 0, $636 = 0.0, $6360 = 0.0, $6361 = 0, $6362 = 0, $6363 = 0.0, $6364 = 0.0, $6365 = 0.0, $6366 = 0, $6367 = 0.0, $6368 = 0, $6369 = 0, $637 = 0.0, $6370 = 0.0, $6371 = 0.0, $6372 = 0.0, $6373 = 0.0, $6374 = 0;
 var $6375 = 0, $6376 = 0.0, $6377 = 0.0, $6378 = 0.0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0.0, $6382 = 0.0, $6383 = 0.0, $6384 = 0, $6385 = 0, $6386 = 0.0, $6387 = 0.0, $6388 = 0.0, $6389 = 0.0, $639 = 0.0, $6390 = 0.0, $6391 = 0, $6392 = 0.0;
 var $6393 = 0, $6394 = 0, $6395 = 0.0, $6396 = 0.0, $6397 = 0.0, $6398 = 0.0, $6399 = 0, $64 = 0.0, $640 = 0.0, $6400 = 0.0, $6401 = 0.0, $6402 = 0.0, $6403 = 0.0, $6404 = 0.0, $6405 = 0.0, $6406 = 0.0, $6407 = 0, $6408 = 0, $6409 = 0.0, $641 = 0.0;
 var $6410 = 0.0, $6411 = 0.0, $6412 = 0.0, $6413 = 0, $6414 = 0.0, $6415 = 0.0, $6416 = 0.0, $6417 = 0.0, $6418 = 0.0, $6419 = 0.0, $642 = 0.0, $6420 = 0.0, $6421 = 0.0, $6422 = 0, $6423 = 0, $6424 = 0.0, $6425 = 0.0, $6426 = 0.0, $6427 = 0.0, $6428 = 0;
 var $6429 = 0.0, $643 = 0.0, $6430 = 0.0, $6431 = 0.0, $6432 = 0.0, $6433 = 0.0, $6434 = 0.0, $6435 = 0.0, $6436 = 0.0, $6437 = 0.0, $6438 = 0.0, $6439 = 0, $644 = 0.0, $6440 = 0.0, $6441 = 0.0, $6442 = 0.0, $6443 = 0, $6444 = 0, $6445 = 0.0, $6446 = 0.0;
 var $6447 = 0.0, $6448 = 0.0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0.0, $6452 = 0.0, $6453 = 0.0, $6454 = 0.0, $6455 = 0.0, $6456 = 0, $6457 = 0, $6458 = 0.0, $6459 = 0, $646 = 0.0, $6460 = 0.0, $6461 = 0, $6462 = 0, $6463 = 0.0, $6464 = 0.0;
 var $6465 = 0.0, $6466 = 0.0, $6467 = 0.0, $6468 = 0.0, $6469 = 0.0, $647 = 0.0, $6470 = 0.0, $6471 = 0.0, $6472 = 0, $6473 = 0, $6474 = 0.0, $6475 = 0.0, $6476 = 0.0, $6477 = 0.0, $6478 = 0, $6479 = 0, $648 = 0.0, $6480 = 0.0, $6481 = 0.0, $6482 = 0.0;
 var $6483 = 0, $6484 = 0, $6485 = 0.0, $6486 = 0.0, $6487 = 0.0, $6488 = 0.0, $6489 = 0.0, $649 = 0.0, $6490 = 0, $6491 = 0, $6492 = 0.0, $6493 = 0.0, $6494 = 0.0, $6495 = 0, $6496 = 0, $6497 = 0.0, $6498 = 0.0, $6499 = 0.0, $65 = 0.0, $650 = 0.0;
 var $6500 = 0, $6501 = 0, $6502 = 0.0, $6503 = 0.0, $6504 = 0.0, $6505 = 0.0, $6506 = 0.0, $6507 = 0, $6508 = 0.0, $6509 = 0, $651 = 0.0, $6510 = 0, $6511 = 0.0, $6512 = 0.0, $6513 = 0.0, $6514 = 0.0, $6515 = 0, $6516 = 0.0, $6517 = 0.0, $6518 = 0.0;
 var $6519 = 0, $652 = 0.0, $6520 = 0, $6521 = 0.0, $6522 = 0.0, $6523 = 0.0, $6524 = 0.0, $6525 = 0, $6526 = 0, $6527 = 0.0, $6528 = 0.0, $6529 = 0.0, $653 = 0.0, $6530 = 0.0, $6531 = 0.0, $6532 = 0.0, $6533 = 0, $6534 = 0, $6535 = 0.0, $6536 = 0.0;
 var $6537 = 0.0, $6538 = 0.0, $6539 = 0.0, $654 = 0.0, $6540 = 0.0, $6541 = 0, $6542 = 0.0, $6543 = 0, $6544 = 0, $6545 = 0.0, $6546 = 0.0, $6547 = 0, $6548 = 0, $6549 = 0.0, $655 = 0.0, $6550 = 0.0, $6551 = 0.0, $6552 = 0.0, $6553 = 0, $6554 = 0.0;
 var $6555 = 0.0, $6556 = 0.0, $6557 = 0.0, $6558 = 0.0, $6559 = 0.0, $656 = 0.0, $6560 = 0.0, $6561 = 0, $6562 = 0, $6563 = 0.0, $6564 = 0.0, $6565 = 0.0, $6566 = 0.0, $6567 = 0.0, $6568 = 0.0, $6569 = 0, $657 = 0.0, $6570 = 0.0, $6571 = 0, $6572 = 0;
 var $6573 = 0.0, $6574 = 0.0, $6575 = 0, $6576 = 0, $6577 = 0.0, $6578 = 0.0, $6579 = 0.0, $658 = 0.0, $6580 = 0.0, $6581 = 0, $6582 = 0.0, $6583 = 0.0, $6584 = 0.0, $6585 = 0.0, $6586 = 0.0, $6587 = 0.0, $6588 = 0.0, $6589 = 0, $659 = 0.0, $6590 = 0;
 var $6591 = 0.0, $6592 = 0.0, $6593 = 0.0, $6594 = 0.0, $6595 = 0.0, $6596 = 0.0, $6597 = 0, $6598 = 0.0, $6599 = 0, $66 = 0.0, $660 = 0, $6600 = 0, $6601 = 0.0, $6602 = 0.0, $6603 = 0.0, $6604 = 0, $6605 = 0, $6606 = 0.0, $6607 = 0, $6608 = 0;
 var $6609 = 0.0, $661 = 0.0, $6610 = 0.0, $6611 = 0.0, $6612 = 0.0, $6613 = 0, $6614 = 0, $6615 = 0.0, $6616 = 0.0, $6617 = 0.0, $6618 = 0, $6619 = 0, $662 = 0.0, $6620 = 0.0, $6621 = 0.0, $6622 = 0.0, $6623 = 0, $6624 = 0, $6625 = 0.0, $6626 = 0.0;
 var $6627 = 0.0, $6628 = 0.0, $6629 = 0.0, $663 = 0.0, $6630 = 0, $6631 = 0, $6632 = 0, $6633 = 0.0, $6634 = 0, $6635 = 0.0, $6636 = 0, $6637 = 0, $6638 = 0.0, $6639 = 0.0, $664 = 0.0, $6640 = 0.0, $6641 = 0.0, $6642 = 0.0, $6643 = 0.0, $6644 = 0.0;
 var $6645 = 0.0, $6646 = 0, $6647 = 0.0, $6648 = 0, $6649 = 0, $665 = 0.0, $6650 = 0.0, $6651 = 0.0, $6652 = 0.0, $6653 = 0.0, $6654 = 0, $6655 = 0, $6656 = 0.0, $6657 = 0.0, $6658 = 0.0, $6659 = 0.0, $666 = 0.0, $6660 = 0.0, $6661 = 0.0, $6662 = 0.0;
 var $6663 = 0.0, $6664 = 0, $6665 = 0, $6666 = 0.0, $6667 = 0.0, $6668 = 0.0, $6669 = 0, $667 = 0, $6670 = 0, $6671 = 0.0, $6672 = 0.0, $6673 = 0.0, $6674 = 0, $6675 = 0, $6676 = 0.0, $6677 = 0.0, $6678 = 0.0, $6679 = 0.0, $668 = 0.0, $6680 = 0.0;
 var $6681 = 0, $6682 = 0.0, $6683 = 0, $6684 = 0, $6685 = 0.0, $6686 = 0.0, $6687 = 0.0, $6688 = 0.0, $6689 = 0, $669 = 0.0, $6690 = 0.0, $6691 = 0.0, $6692 = 0.0, $6693 = 0, $6694 = 0, $6695 = 0.0, $6696 = 0.0, $6697 = 0.0, $6698 = 0.0, $6699 = 0;
 var $67 = 0.0, $670 = 0.0, $6700 = 0, $6701 = 0.0, $6702 = 0.0, $6703 = 0.0, $6704 = 0.0, $6705 = 0.0, $6706 = 0.0, $6707 = 0, $6708 = 0, $6709 = 0.0, $671 = 0.0, $6710 = 0.0, $6711 = 0.0, $6712 = 0.0, $6713 = 0.0, $6714 = 0.0, $6715 = 0, $6716 = 0.0;
 var $6717 = 0, $6718 = 0, $6719 = 0.0, $672 = 0.0, $6720 = 0.0, $6721 = 0, $6722 = 0, $6723 = 0.0, $6724 = 0.0, $6725 = 0.0, $6726 = 0.0, $6727 = 0, $6728 = 0.0, $6729 = 0.0, $673 = 0.0, $6730 = 0.0, $6731 = 0.0, $6732 = 0.0, $6733 = 0.0, $6734 = 0.0;
 var $6735 = 0, $6736 = 0, $6737 = 0.0, $6738 = 0.0, $6739 = 0.0, $674 = 0, $6740 = 0.0, $6741 = 0.0, $6742 = 0.0, $6743 = 0, $6744 = 0.0, $6745 = 0, $6746 = 0, $6747 = 0.0, $6748 = 0.0, $6749 = 0.0, $675 = 0.0, $6750 = 0, $6751 = 0.0, $6752 = 0;
 var $6753 = 0, $6754 = 0.0, $6755 = 0.0, $6756 = 0.0, $6757 = 0.0, $6758 = 0, $6759 = 0, $676 = 0.0, $6760 = 0.0, $6761 = 0.0, $6762 = 0.0, $6763 = 0, $6764 = 0, $6765 = 0.0, $6766 = 0.0, $6767 = 0.0, $6768 = 0, $6769 = 0, $677 = 0.0, $6770 = 0.0;
 var $6771 = 0.0, $6772 = 0.0, $6773 = 0.0, $6774 = 0.0, $6775 = 0, $6776 = 0, $6777 = 0, $6778 = 0.0, $6779 = 0, $678 = 0.0, $6780 = 0.0, $6781 = 0, $6782 = 0, $6783 = 0.0, $6784 = 0.0, $6785 = 0.0, $6786 = 0.0, $6787 = 0.0, $6788 = 0.0, $6789 = 0.0;
 var $679 = 0.0, $6790 = 0.0, $6791 = 0, $6792 = 0.0, $6793 = 0, $6794 = 0, $6795 = 0.0, $6796 = 0.0, $6797 = 0.0, $6798 = 0.0, $6799 = 0, $68 = 0.0, $680 = 0.0, $6800 = 0, $6801 = 0.0, $6802 = 0.0, $6803 = 0.0, $6804 = 0.0, $6805 = 0.0, $6806 = 0.0;
 var $6807 = 0.0, $6808 = 0.0, $6809 = 0, $681 = 0, $6810 = 0, $6811 = 0.0, $6812 = 0.0, $6813 = 0.0, $6814 = 0, $6815 = 0, $6816 = 0.0, $6817 = 0.0, $6818 = 0.0, $6819 = 0, $682 = 0.0, $6820 = 0, $6821 = 0.0, $6822 = 0.0, $6823 = 0.0, $6824 = 0.0;
 var $6825 = 0.0, $6826 = 0, $6827 = 0.0, $6828 = 0, $6829 = 0, $683 = 0.0, $6830 = 0.0, $6831 = 0.0, $6832 = 0.0, $6833 = 0.0, $6834 = 0, $6835 = 0.0, $6836 = 0.0, $6837 = 0.0, $6838 = 0, $6839 = 0, $684 = 0.0, $6840 = 0.0, $6841 = 0.0, $6842 = 0.0;
 var $6843 = 0.0, $6844 = 0, $6845 = 0, $6846 = 0.0, $6847 = 0.0, $6848 = 0.0, $6849 = 0.0, $685 = 0.0, $6850 = 0.0, $6851 = 0.0, $6852 = 0, $6853 = 0, $6854 = 0.0, $6855 = 0.0, $6856 = 0.0, $6857 = 0.0, $6858 = 0.0, $6859 = 0.0, $686 = 0.0, $6860 = 0;
 var $6861 = 0.0, $6862 = 0, $6863 = 0, $6864 = 0.0, $6865 = 0.0, $6866 = 0.0, $6867 = 0, $6868 = 0.0, $6869 = 0, $687 = 0.0, $6870 = 0, $6871 = 0.0, $6872 = 0.0, $6873 = 0.0, $6874 = 0.0, $6875 = 0, $6876 = 0, $6877 = 0.0, $6878 = 0.0, $6879 = 0.0;
 var $688 = 0, $6880 = 0, $6881 = 0, $6882 = 0.0, $6883 = 0.0, $6884 = 0.0, $6885 = 0, $6886 = 0, $6887 = 0.0, $6888 = 0.0, $6889 = 0.0, $689 = 0.0, $6890 = 0.0, $6891 = 0.0, $6892 = 0, $6893 = 0, $6894 = 0, $6895 = 0.0, $6896 = 0, $6897 = 0.0;
 var $6898 = 0, $6899 = 0, $69 = 0.0, $690 = 0.0, $6900 = 0.0, $6901 = 0.0, $6902 = 0.0, $6903 = 0.0, $6904 = 0.0, $6905 = 0.0, $6906 = 0.0, $6907 = 0.0, $6908 = 0, $6909 = 0.0, $691 = 0.0, $6910 = 0, $6911 = 0, $6912 = 0.0, $6913 = 0.0, $6914 = 0.0;
 var $6915 = 0.0, $6916 = 0.0, $6917 = 0.0, $6918 = 0.0, $6919 = 0, $692 = 0.0, $6920 = 0, $6921 = 0.0, $6922 = 0.0, $6923 = 0.0, $6924 = 0.0, $6925 = 0.0, $6926 = 0, $6927 = 0, $6928 = 0.0, $6929 = 0.0, $693 = 0.0, $6930 = 0.0, $6931 = 0, $6932 = 0;
 var $6933 = 0.0, $6934 = 0.0, $6935 = 0.0, $6936 = 0, $6937 = 0, $6938 = 0.0, $6939 = 0.0, $694 = 0.0, $6940 = 0.0, $6941 = 0.0, $6942 = 0.0, $6943 = 0, $6944 = 0.0, $6945 = 0, $6946 = 0, $6947 = 0.0, $6948 = 0.0, $6949 = 0.0, $695 = 0, $6950 = 0;
 var $6951 = 0.0, $6952 = 0, $6953 = 0, $6954 = 0.0, $6955 = 0.0, $6956 = 0.0, $6957 = 0.0, $6958 = 0, $6959 = 0, $696 = 0.0, $6960 = 0.0, $6961 = 0.0, $6962 = 0.0, $6963 = 0, $6964 = 0, $6965 = 0.0, $6966 = 0.0, $6967 = 0.0, $6968 = 0, $6969 = 0;
 var $697 = 0.0, $6970 = 0.0, $6971 = 0.0, $6972 = 0.0, $6973 = 0.0, $6974 = 0.0, $6975 = 0, $6976 = 0.0, $6977 = 0, $6978 = 0, $6979 = 0.0, $698 = 0.0, $6980 = 0.0, $6981 = 0.0, $6982 = 0.0, $6983 = 0, $6984 = 0.0, $6985 = 0.0, $6986 = 0.0, $6987 = 0.0;
 var $6988 = 0.0, $6989 = 0.0, $699 = 0.0, $6990 = 0.0, $6991 = 0, $6992 = 0, $6993 = 0.0, $6994 = 0.0, $6995 = 0.0, $6996 = 0.0, $6997 = 0, $6998 = 0.0, $6999 = 0.0, $7 = 0.0, $70 = 0.0, $700 = 0.0, $7000 = 0.0, $7001 = 0.0, $7002 = 0.0, $7003 = 0.0;
 var $7004 = 0.0, $7005 = 0.0, $7006 = 0, $7007 = 0, $7008 = 0.0, $7009 = 0.0, $701 = 0.0, $7010 = 0.0, $7011 = 0.0, $7012 = 0, $7013 = 0.0, $7014 = 0.0, $7015 = 0.0, $7016 = 0.0, $7017 = 0.0, $7018 = 0.0, $7019 = 0.0, $702 = 0.0, $7020 = 0.0, $7021 = 0.0;
 var $7022 = 0.0, $7023 = 0, $7024 = 0.0, $7025 = 0.0, $7026 = 0.0, $7027 = 0, $7028 = 0, $7029 = 0.0, $703 = 0.0, $7030 = 0.0, $7031 = 0.0, $7032 = 0.0, $7033 = 0, $7034 = 0, $7035 = 0.0, $7036 = 0.0, $7037 = 0.0, $7038 = 0.0, $7039 = 0.0, $704 = 0.0;
 var $7040 = 0, $7041 = 0, $7042 = 0.0, $7043 = 0, $7044 = 0.0, $7045 = 0, $7046 = 0, $7047 = 0.0, $7048 = 0.0, $7049 = 0.0, $705 = 0.0, $7050 = 0.0, $7051 = 0.0, $7052 = 0.0, $7053 = 0.0, $7054 = 0.0, $7055 = 0.0, $7056 = 0.0, $7057 = 0.0, $7058 = 0.0;
 var $7059 = 0, $706 = 0.0, $7060 = 0, $7061 = 0.0, $7062 = 0.0, $7063 = 0.0, $7064 = 0.0, $7065 = 0, $7066 = 0, $7067 = 0.0, $7068 = 0.0, $7069 = 0.0, $707 = 0.0, $7070 = 0, $7071 = 0, $7072 = 0.0, $7073 = 0.0, $7074 = 0.0, $7075 = 0.0, $7076 = 0.0;
 var $7077 = 0, $7078 = 0, $7079 = 0.0, $708 = 0.0, $7080 = 0.0, $7081 = 0.0, $7082 = 0, $7083 = 0, $7084 = 0.0, $7085 = 0.0, $7086 = 0.0, $7087 = 0, $7088 = 0, $7089 = 0.0, $709 = 0.0, $7090 = 0.0, $7091 = 0.0, $7092 = 0.0, $7093 = 0.0, $7094 = 0;
 var $7095 = 0.0, $7096 = 0, $7097 = 0, $7098 = 0.0, $7099 = 0.0, $71 = 0.0, $710 = 0, $7100 = 0.0, $7101 = 0.0, $7102 = 0, $7103 = 0.0, $7104 = 0.0, $7105 = 0.0, $7106 = 0, $7107 = 0, $7108 = 0.0, $7109 = 0.0, $711 = 0.0, $7110 = 0.0, $7111 = 0.0;
 var $7112 = 0, $7113 = 0, $7114 = 0.0, $7115 = 0.0, $7116 = 0.0, $7117 = 0.0, $7118 = 0.0, $7119 = 0.0, $712 = 0.0, $7120 = 0, $7121 = 0, $7122 = 0.0, $7123 = 0.0, $7124 = 0.0, $7125 = 0.0, $7126 = 0.0, $7127 = 0.0, $7128 = 0, $7129 = 0.0, $713 = 0.0;
 var $7130 = 0, $7131 = 0, $7132 = 0.0, $7133 = 0.0, $7134 = 0, $7135 = 0, $7136 = 0.0, $7137 = 0.0, $7138 = 0.0, $7139 = 0.0, $714 = 0.0, $7140 = 0, $7141 = 0.0, $7142 = 0.0, $7143 = 0.0, $7144 = 0.0, $7145 = 0.0, $7146 = 0.0, $7147 = 0.0, $7148 = 0;
 var $7149 = 0, $715 = 0.0, $7150 = 0.0, $7151 = 0.0, $7152 = 0.0, $7153 = 0.0, $7154 = 0.0, $7155 = 0.0, $7156 = 0, $7157 = 0.0, $7158 = 0, $7159 = 0, $716 = 0.0, $7160 = 0.0, $7161 = 0.0, $7162 = 0, $7163 = 0, $7164 = 0.0, $7165 = 0.0, $7166 = 0.0;
 var $7167 = 0.0, $7168 = 0, $7169 = 0.0, $717 = 0, $7170 = 0.0, $7171 = 0.0, $7172 = 0.0, $7173 = 0.0, $7174 = 0.0, $7175 = 0.0, $7176 = 0, $7177 = 0, $7178 = 0.0, $7179 = 0.0, $718 = 0.0, $7180 = 0.0, $7181 = 0.0, $7182 = 0.0, $7183 = 0.0, $7184 = 0;
 var $7185 = 0.0, $7186 = 0, $7187 = 0, $7188 = 0.0, $7189 = 0.0, $719 = 0.0, $7190 = 0.0, $7191 = 0, $7192 = 0, $7193 = 0.0, $7194 = 0, $7195 = 0, $7196 = 0.0, $7197 = 0.0, $7198 = 0.0, $7199 = 0.0, $72 = 0.0, $720 = 0.0, $7200 = 0, $7201 = 0;
 var $7202 = 0.0, $7203 = 0.0, $7204 = 0.0, $7205 = 0, $7206 = 0, $7207 = 0.0, $7208 = 0.0, $7209 = 0.0, $721 = 0.0, $7210 = 0, $7211 = 0, $7212 = 0.0, $7213 = 0.0, $7214 = 0.0, $7215 = 0.0, $7216 = 0.0, $7217 = 0, $7218 = 0, $7219 = 0, $722 = 0.0;
 var $7220 = 0.0, $7221 = 0, $7222 = 0.0, $7223 = 0, $7224 = 0, $7225 = 0.0, $7226 = 0.0, $7227 = 0.0, $7228 = 0.0, $7229 = 0.0, $723 = 0.0, $7230 = 0.0, $7231 = 0.0, $7232 = 0.0, $7233 = 0, $7234 = 0.0, $7235 = 0, $7236 = 0, $7237 = 0.0, $7238 = 0.0;
 var $7239 = 0.0, $724 = 0, $7240 = 0.0, $7241 = 0.0, $7242 = 0.0, $7243 = 0.0, $7244 = 0, $7245 = 0, $7246 = 0.0, $7247 = 0.0, $7248 = 0.0, $7249 = 0.0, $725 = 0.0, $7250 = 0.0, $7251 = 0, $7252 = 0, $7253 = 0.0, $7254 = 0.0, $7255 = 0.0, $7256 = 0;
 var $7257 = 0, $7258 = 0.0, $7259 = 0.0, $726 = 0.0, $7260 = 0.0, $7261 = 0, $7262 = 0, $7263 = 0.0, $7264 = 0.0, $7265 = 0.0, $7266 = 0.0, $7267 = 0.0, $7268 = 0, $7269 = 0.0, $727 = 0.0, $7270 = 0, $7271 = 0, $7272 = 0.0, $7273 = 0.0, $7274 = 0.0;
 var $7275 = 0.0, $7276 = 0, $7277 = 0.0, $7278 = 0.0, $7279 = 0.0, $728 = 0.0, $7280 = 0, $7281 = 0, $7282 = 0.0, $7283 = 0.0, $7284 = 0.0, $7285 = 0.0, $7286 = 0, $7287 = 0, $7288 = 0.0, $7289 = 0.0, $729 = 0.0, $7290 = 0.0, $7291 = 0.0, $7292 = 0.0;
 var $7293 = 0.0, $7294 = 0, $7295 = 0, $7296 = 0.0, $7297 = 0.0, $7298 = 0.0, $7299 = 0.0, $73 = 0.0, $730 = 0.0, $7300 = 0.0, $7301 = 0.0, $7302 = 0, $7303 = 0.0, $7304 = 0, $7305 = 0, $7306 = 0.0, $7307 = 0.0, $7308 = 0, $7309 = 0, $731 = 0;
 var $7310 = 0.0, $7311 = 0.0, $7312 = 0.0, $7313 = 0.0, $7314 = 0, $7315 = 0.0, $7316 = 0.0, $7317 = 0.0, $7318 = 0.0, $7319 = 0.0, $732 = 0.0, $7320 = 0.0, $7321 = 0.0, $7322 = 0, $7323 = 0, $7324 = 0.0, $7325 = 0.0, $7326 = 0.0, $7327 = 0.0, $7328 = 0.0;
 var $7329 = 0.0, $733 = 0.0, $7330 = 0, $7331 = 0.0, $7332 = 0, $7333 = 0, $7334 = 0.0, $7335 = 0.0, $7336 = 0.0, $7337 = 0, $7338 = 0.0, $7339 = 0, $734 = 0.0, $7340 = 0, $7341 = 0.0, $7342 = 0.0, $7343 = 0.0, $7344 = 0.0, $7345 = 0, $7346 = 0;
 var $7347 = 0.0, $7348 = 0.0, $7349 = 0.0, $735 = 0.0, $7350 = 0, $7351 = 0, $7352 = 0.0, $7353 = 0.0, $7354 = 0.0, $7355 = 0, $7356 = 0, $7357 = 0.0, $7358 = 0.0, $7359 = 0.0, $736 = 0.0, $7360 = 0.0, $7361 = 0.0, $7362 = 0, $7363 = 0, $7364 = 0;
 var $7365 = 0.0, $7366 = 0, $7367 = 0.0, $7368 = 0, $7369 = 0, $737 = 0.0, $7370 = 0.0, $7371 = 0.0, $7372 = 0.0, $7373 = 0.0, $7374 = 0.0, $7375 = 0.0, $7376 = 0.0, $7377 = 0.0, $7378 = 0, $7379 = 0.0, $738 = 0, $7380 = 0, $7381 = 0, $7382 = 0.0;
 var $7383 = 0.0, $7384 = 0.0, $7385 = 0.0, $7386 = 0.0, $7387 = 0.0, $7388 = 0.0, $7389 = 0, $739 = 0.0, $7390 = 0, $7391 = 0.0, $7392 = 0.0, $7393 = 0.0, $7394 = 0.0, $7395 = 0.0, $7396 = 0, $7397 = 0, $7398 = 0.0, $7399 = 0.0, $74 = 0.0, $740 = 0.0;
 var $7400 = 0.0, $7401 = 0, $7402 = 0, $7403 = 0.0, $7404 = 0.0, $7405 = 0.0, $7406 = 0, $7407 = 0, $7408 = 0.0, $7409 = 0.0, $741 = 0.0, $7410 = 0.0, $7411 = 0.0, $7412 = 0.0, $7413 = 0, $7414 = 0.0, $7415 = 0, $7416 = 0, $7417 = 0.0, $7418 = 0.0;
 var $7419 = 0.0, $742 = 0.0, $7420 = 0.0, $7421 = 0, $7422 = 0.0, $7423 = 0.0, $7424 = 0.0, $7425 = 0, $7426 = 0, $7427 = 0.0, $7428 = 0.0, $7429 = 0.0, $743 = 0.0, $7430 = 0.0, $7431 = 0, $7432 = 0, $7433 = 0.0, $7434 = 0.0, $7435 = 0.0, $7436 = 0.0;
 var $7437 = 0.0, $7438 = 0.0, $7439 = 0, $744 = 0.0, $7440 = 0, $7441 = 0.0, $7442 = 0.0, $7443 = 0.0, $7444 = 0.0, $7445 = 0.0, $7446 = 0.0, $7447 = 0, $7448 = 0.0, $7449 = 0, $745 = 0, $7450 = 0, $7451 = 0.0, $7452 = 0.0, $7453 = 0.0, $7454 = 0;
 var $7455 = 0.0, $7456 = 0, $7457 = 0, $7458 = 0.0, $7459 = 0.0, $746 = 0.0, $7460 = 0.0, $7461 = 0.0, $7462 = 0, $7463 = 0, $7464 = 0.0, $7465 = 0.0, $7466 = 0.0, $7467 = 0, $7468 = 0, $7469 = 0.0, $747 = 0.0, $7470 = 0.0, $7471 = 0.0, $7472 = 0;
 var $7473 = 0, $7474 = 0.0, $7475 = 0.0, $7476 = 0.0, $7477 = 0.0, $7478 = 0.0, $7479 = 0, $748 = 0.0, $7480 = 0, $7481 = 0, $7482 = 0.0, $7483 = 0, $7484 = 0.0, $7485 = 0, $7486 = 0, $7487 = 0.0, $7488 = 0.0, $7489 = 0.0, $749 = 0.0, $7490 = 0.0;
 var $7491 = 0.0, $7492 = 0.0, $7493 = 0.0, $7494 = 0.0, $7495 = 0, $7496 = 0.0, $7497 = 0, $7498 = 0, $7499 = 0.0, $75 = 0.0, $750 = 0.0, $7500 = 0.0, $7501 = 0.0, $7502 = 0.0, $7503 = 0.0, $7504 = 0.0, $7505 = 0.0, $7506 = 0, $7507 = 0, $7508 = 0.0;
 var $7509 = 0.0, $751 = 0.0, $7510 = 0.0, $7511 = 0.0, $7512 = 0.0, $7513 = 0, $7514 = 0, $7515 = 0.0, $7516 = 0.0, $7517 = 0.0, $7518 = 0, $7519 = 0, $752 = 0.0, $7520 = 0.0, $7521 = 0.0, $7522 = 0.0, $7523 = 0, $7524 = 0, $7525 = 0.0, $7526 = 0.0;
 var $7527 = 0.0, $7528 = 0.0, $7529 = 0.0, $753 = 0.0, $7530 = 0, $7531 = 0.0, $7532 = 0, $7533 = 0, $7534 = 0.0, $7535 = 0.0, $7536 = 0.0, $7537 = 0, $7538 = 0.0, $7539 = 0, $754 = 0.0, $7540 = 0, $7541 = 0.0, $7542 = 0.0, $7543 = 0.0, $7544 = 0.0;
 var $7545 = 0, $7546 = 0, $7547 = 0.0, $7548 = 0.0, $7549 = 0.0, $755 = 0.0, $7550 = 0, $7551 = 0, $7552 = 0.0, $7553 = 0.0, $7554 = 0.0, $7555 = 0, $7556 = 0, $7557 = 0.0, $7558 = 0.0, $7559 = 0.0, $756 = 0.0, $7560 = 0.0, $7561 = 0.0, $7562 = 0;
 var $7563 = 0.0, $7564 = 0, $7565 = 0, $7566 = 0.0, $7567 = 0.0, $7568 = 0.0, $7569 = 0.0, $757 = 0.0, $7570 = 0, $7571 = 0.0, $7572 = 0.0, $7573 = 0.0, $7574 = 0.0, $7575 = 0.0, $7576 = 0.0, $7577 = 0.0, $7578 = 0, $7579 = 0, $758 = 0.0, $7580 = 0.0;
 var $7581 = 0.0, $7582 = 0.0, $7583 = 0.0, $7584 = 0, $7585 = 0.0, $7586 = 0.0, $7587 = 0.0, $7588 = 0.0, $7589 = 0.0, $759 = 0.0, $7590 = 0.0, $7591 = 0.0, $7592 = 0.0, $7593 = 0, $7594 = 0, $7595 = 0.0, $7596 = 0.0, $7597 = 0.0, $7598 = 0.0, $7599 = 0;
 var $76 = 0.0, $760 = 0, $7600 = 0.0, $7601 = 0.0, $7602 = 0.0, $7603 = 0.0, $7604 = 0.0, $7605 = 0.0, $7606 = 0.0, $7607 = 0.0, $7608 = 0.0, $7609 = 0.0, $761 = 0.0, $7610 = 0, $7611 = 0.0, $7612 = 0.0, $7613 = 0.0, $7614 = 0, $7615 = 0, $7616 = 0.0;
 var $7617 = 0.0, $7618 = 0.0, $7619 = 0.0, $762 = 0.0, $7620 = 0, $7621 = 0, $7622 = 0.0, $7623 = 0.0, $7624 = 0.0, $7625 = 0.0, $7626 = 0.0, $7627 = 0, $7628 = 0, $7629 = 0.0, $763 = 0.0, $7630 = 0, $7631 = 0.0, $7632 = 0, $7633 = 0, $7634 = 0.0;
 var $7635 = 0.0, $7636 = 0.0, $7637 = 0.0, $7638 = 0.0, $7639 = 0.0, $764 = 0.0, $7640 = 0.0, $7641 = 0.0, $7642 = 0.0, $7643 = 0, $7644 = 0, $7645 = 0.0, $7646 = 0.0, $7647 = 0.0, $7648 = 0.0, $7649 = 0, $765 = 0.0, $7650 = 0, $7651 = 0.0, $7652 = 0.0;
 var $7653 = 0.0, $7654 = 0, $7655 = 0, $7656 = 0.0, $7657 = 0.0, $7658 = 0.0, $7659 = 0.0, $766 = 0.0, $7660 = 0.0, $7661 = 0, $7662 = 0, $7663 = 0.0, $7664 = 0.0, $7665 = 0.0, $7666 = 0, $7667 = 0, $7668 = 0.0, $7669 = 0.0, $767 = 0, $7670 = 0.0;
 var $7671 = 0, $7672 = 0, $7673 = 0.0, $7674 = 0.0, $7675 = 0.0, $7676 = 0.0, $7677 = 0.0, $7678 = 0, $7679 = 0.0, $768 = 0.0, $7680 = 0, $7681 = 0, $7682 = 0.0, $7683 = 0.0, $7684 = 0.0, $7685 = 0.0, $7686 = 0, $7687 = 0.0, $7688 = 0.0, $7689 = 0.0;
 var $769 = 0.0, $7690 = 0, $7691 = 0, $7692 = 0.0, $7693 = 0.0, $7694 = 0.0, $7695 = 0.0, $7696 = 0, $7697 = 0, $7698 = 0.0, $7699 = 0.0, $77 = 0.0, $770 = 0.0, $7700 = 0.0, $7701 = 0.0, $7702 = 0.0, $7703 = 0.0, $7704 = 0, $7705 = 0, $7706 = 0.0;
 var $7707 = 0.0, $7708 = 0.0, $7709 = 0.0, $771 = 0.0, $7710 = 0.0, $7711 = 0.0, $7712 = 0, $7713 = 0.0, $7714 = 0, $7715 = 0, $7716 = 0.0, $7717 = 0.0, $7718 = 0, $7719 = 0, $772 = 0.0, $7720 = 0.0, $7721 = 0.0, $7722 = 0.0, $7723 = 0.0, $7724 = 0;
 var $7725 = 0.0, $7726 = 0.0, $7727 = 0.0, $7728 = 0.0, $7729 = 0.0, $773 = 0.0, $7730 = 0.0, $7731 = 0.0, $7732 = 0, $7733 = 0, $7734 = 0.0, $7735 = 0.0, $7736 = 0.0, $7737 = 0.0, $7738 = 0.0, $7739 = 0.0, $774 = 0, $7740 = 0, $7741 = 0.0, $7742 = 0;
 var $7743 = 0, $7744 = 0.0, $7745 = 0.0, $7746 = 0, $7747 = 0, $7748 = 0.0, $7749 = 0.0, $775 = 0.0, $7750 = 0.0, $7751 = 0.0, $7752 = 0, $7753 = 0.0, $7754 = 0.0, $7755 = 0.0, $7756 = 0.0, $7757 = 0.0, $7758 = 0.0, $7759 = 0.0, $776 = 0.0, $7760 = 0;
 var $7761 = 0, $7762 = 0.0, $7763 = 0.0, $7764 = 0.0, $7765 = 0.0, $7766 = 0.0, $7767 = 0.0, $7768 = 0, $7769 = 0.0, $777 = 0.0, $7770 = 0, $7771 = 0, $7772 = 0.0, $7773 = 0.0, $7774 = 0.0, $7775 = 0, $7776 = 0, $7777 = 0.0, $7778 = 0, $7779 = 0;
 var $778 = 0.0, $7780 = 0.0, $7781 = 0.0, $7782 = 0.0, $7783 = 0.0, $7784 = 0, $7785 = 0, $7786 = 0.0, $7787 = 0.0, $7788 = 0.0, $7789 = 0, $779 = 0.0, $7790 = 0, $7791 = 0.0, $7792 = 0.0, $7793 = 0.0, $7794 = 0, $7795 = 0, $7796 = 0.0, $7797 = 0.0;
 var $7798 = 0.0, $7799 = 0.0, $78 = 0.0, $780 = 0.0, $7800 = 0.0, $7801 = 0, $7802 = 0, $7803 = 0, $7804 = 0.0, $7805 = 0, $7806 = 0.0, $7807 = 0, $7808 = 0, $7809 = 0.0, $781 = 0, $7810 = 0.0, $7811 = 0.0, $7812 = 0.0, $7813 = 0.0, $7814 = 0.0;
 var $7815 = 0.0, $7816 = 0.0, $7817 = 0, $7818 = 0.0, $7819 = 0, $782 = 0.0, $7820 = 0, $7821 = 0.0, $7822 = 0.0, $7823 = 0.0, $7824 = 0.0, $7825 = 0.0, $7826 = 0.0, $7827 = 0.0, $7828 = 0, $7829 = 0, $783 = 0.0, $7830 = 0.0, $7831 = 0.0, $7832 = 0.0;
 var $7833 = 0.0, $7834 = 0.0, $7835 = 0, $7836 = 0, $7837 = 0.0, $7838 = 0.0, $7839 = 0.0, $784 = 0.0, $7840 = 0, $7841 = 0, $7842 = 0.0, $7843 = 0.0, $7844 = 0.0, $7845 = 0, $7846 = 0, $7847 = 0.0, $7848 = 0.0, $7849 = 0.0, $785 = 0.0, $7850 = 0.0;
 var $7851 = 0.0, $7852 = 0, $7853 = 0.0, $7854 = 0, $7855 = 0, $7856 = 0.0, $7857 = 0.0, $7858 = 0.0, $7859 = 0.0, $786 = 0.0, $7860 = 0, $7861 = 0.0, $7862 = 0.0, $7863 = 0.0, $7864 = 0, $7865 = 0, $7866 = 0.0, $7867 = 0.0, $7868 = 0.0, $7869 = 0.0;
 var $787 = 0.0, $7870 = 0, $7871 = 0, $7872 = 0.0, $7873 = 0.0, $7874 = 0.0, $7875 = 0.0, $7876 = 0.0, $7877 = 0.0, $7878 = 0, $7879 = 0, $788 = 0, $7880 = 0.0, $7881 = 0.0, $7882 = 0.0, $7883 = 0.0, $7884 = 0.0, $7885 = 0.0, $7886 = 0, $7887 = 0.0;
 var $7888 = 0, $7889 = 0, $789 = 0.0, $7890 = 0.0, $7891 = 0.0, $7892 = 0, $7893 = 0, $7894 = 0.0, $7895 = 0.0, $7896 = 0.0, $7897 = 0.0, $7898 = 0, $7899 = 0.0, $79 = 0.0, $790 = 0.0, $7900 = 0.0, $7901 = 0.0, $7902 = 0.0, $7903 = 0.0, $7904 = 0.0;
 var $7905 = 0.0, $7906 = 0, $7907 = 0, $7908 = 0.0, $7909 = 0.0, $791 = 0.0, $7910 = 0.0, $7911 = 0.0, $7912 = 0.0, $7913 = 0.0, $7914 = 0, $7915 = 0.0, $7916 = 0, $7917 = 0, $7918 = 0.0, $7919 = 0.0, $792 = 0.0, $7920 = 0.0, $7921 = 0, $7922 = 0.0;
 var $7923 = 0, $7924 = 0, $7925 = 0.0, $7926 = 0.0, $7927 = 0.0, $7928 = 0.0, $7929 = 0, $793 = 0.0, $7930 = 0, $7931 = 0.0, $7932 = 0.0, $7933 = 0.0, $7934 = 0, $7935 = 0, $7936 = 0.0, $7937 = 0.0, $7938 = 0.0, $7939 = 0, $794 = 0.0, $7940 = 0;
 var $7941 = 0.0, $7942 = 0.0, $7943 = 0.0, $7944 = 0.0, $7945 = 0.0, $7946 = 0, $7947 = 0, $7948 = 0, $7949 = 0.0, $795 = 0, $7950 = 0, $7951 = 0.0, $7952 = 0, $7953 = 0, $7954 = 0.0, $7955 = 0.0, $7956 = 0.0, $7957 = 0.0, $7958 = 0.0, $7959 = 0.0;
 var $796 = 0.0, $7960 = 0.0, $7961 = 0.0, $7962 = 0, $7963 = 0.0, $7964 = 0, $7965 = 0, $7966 = 0.0, $7967 = 0.0, $7968 = 0.0, $7969 = 0.0, $797 = 0.0, $7970 = 0.0, $7971 = 0.0, $7972 = 0.0, $7973 = 0, $7974 = 0, $7975 = 0.0, $7976 = 0.0, $7977 = 0.0;
 var $7978 = 0.0, $7979 = 0.0, $798 = 0.0, $7980 = 0, $7981 = 0, $7982 = 0.0, $7983 = 0.0, $7984 = 0.0, $7985 = 0, $7986 = 0, $7987 = 0.0, $7988 = 0.0, $7989 = 0.0, $799 = 0.0, $7990 = 0, $7991 = 0, $7992 = 0.0, $7993 = 0.0, $7994 = 0.0, $7995 = 0.0;
 var $7996 = 0.0, $7997 = 0, $7998 = 0.0, $7999 = 0, $8 = 0.0, $80 = 0.0, $800 = 0.0, $8000 = 0, $8001 = 0.0, $8002 = 0.0, $8003 = 0.0, $8004 = 0.0, $8005 = 0, $8006 = 0.0, $8007 = 0.0, $8008 = 0.0, $8009 = 0, $801 = 0.0, $8010 = 0, $8011 = 0.0;
 var $8012 = 0.0, $8013 = 0.0, $8014 = 0.0, $8015 = 0, $8016 = 0, $8017 = 0.0, $8018 = 0.0, $8019 = 0.0, $802 = 0.0, $8020 = 0.0, $8021 = 0.0, $8022 = 0.0, $8023 = 0, $8024 = 0, $8025 = 0.0, $8026 = 0.0, $8027 = 0.0, $8028 = 0.0, $8029 = 0.0, $803 = 0.0;
 var $8030 = 0.0, $8031 = 0, $8032 = 0.0, $8033 = 0, $8034 = 0, $8035 = 0.0, $8036 = 0.0, $8037 = 0.0, $8038 = 0, $8039 = 0.0, $804 = 0.0, $8040 = 0, $8041 = 0, $8042 = 0.0, $8043 = 0.0, $8044 = 0.0, $8045 = 0.0, $8046 = 0, $8047 = 0, $8048 = 0.0;
 var $8049 = 0.0, $805 = 0.0, $8050 = 0.0, $8051 = 0, $8052 = 0, $8053 = 0.0, $8054 = 0.0, $8055 = 0.0, $8056 = 0, $8057 = 0, $8058 = 0.0, $8059 = 0.0, $806 = 0.0, $8060 = 0.0, $8061 = 0.0, $8062 = 0.0, $8063 = 0, $8064 = 0, $8065 = 0, $8066 = 0.0;
 var $8067 = 0, $8068 = 0.0, $8069 = 0, $807 = 0.0, $8070 = 0, $8071 = 0.0, $8072 = 0.0, $8073 = 0.0, $8074 = 0.0, $8075 = 0.0, $8076 = 0.0, $8077 = 0.0, $8078 = 0.0, $8079 = 0, $808 = 0.0, $8080 = 0.0, $8081 = 0, $8082 = 0, $8083 = 0.0, $8084 = 0.0;
 var $8085 = 0.0, $8086 = 0.0, $8087 = 0.0, $8088 = 0.0, $8089 = 0.0, $809 = 0.0, $8090 = 0, $8091 = 0, $8092 = 0.0, $8093 = 0.0, $8094 = 0.0, $8095 = 0.0, $8096 = 0.0, $8097 = 0, $8098 = 0, $8099 = 0.0, $81 = 0.0, $810 = 0, $8100 = 0.0, $8101 = 0.0;
 var $8102 = 0, $8103 = 0, $8104 = 0.0, $8105 = 0.0, $8106 = 0.0, $8107 = 0, $8108 = 0, $8109 = 0.0, $811 = 0.0, $8110 = 0.0, $8111 = 0.0, $8112 = 0.0, $8113 = 0.0, $8114 = 0, $8115 = 0.0, $8116 = 0, $8117 = 0, $8118 = 0.0, $8119 = 0.0, $812 = 0.0;
 var $8120 = 0.0, $8121 = 0, $8122 = 0.0, $8123 = 0, $8124 = 0, $8125 = 0.0, $8126 = 0.0, $8127 = 0.0, $8128 = 0.0, $8129 = 0, $813 = 0.0, $8130 = 0, $8131 = 0.0, $8132 = 0.0, $8133 = 0.0, $8134 = 0, $8135 = 0, $8136 = 0.0, $8137 = 0.0, $8138 = 0.0;
 var $8139 = 0, $814 = 0.0, $8140 = 0, $8141 = 0.0, $8142 = 0.0, $8143 = 0.0, $8144 = 0.0, $8145 = 0.0, $8146 = 0, $8147 = 0.0, $8148 = 0, $8149 = 0, $815 = 0.0, $8150 = 0.0, $8151 = 0.0, $8152 = 0.0, $8153 = 0.0, $8154 = 0, $8155 = 0.0, $8156 = 0.0;
 var $8157 = 0.0, $8158 = 0.0, $8159 = 0.0, $816 = 0.0, $8160 = 0.0, $8161 = 0.0, $8162 = 0, $8163 = 0, $8164 = 0.0, $8165 = 0.0, $8166 = 0.0, $8167 = 0.0, $8168 = 0, $8169 = 0.0, $817 = 0, $8170 = 0.0, $8171 = 0.0, $8172 = 0.0, $8173 = 0.0, $8174 = 0.0;
 var $8175 = 0.0, $8176 = 0.0, $8177 = 0, $8178 = 0, $8179 = 0.0, $818 = 0.0, $8180 = 0.0, $8181 = 0.0, $8182 = 0.0, $8183 = 0, $8184 = 0.0, $8185 = 0.0, $8186 = 0.0, $8187 = 0.0, $8188 = 0.0, $8189 = 0.0, $819 = 0.0, $8190 = 0.0, $8191 = 0.0, $8192 = 0.0;
 var $8193 = 0.0, $8194 = 0, $8195 = 0.0, $8196 = 0.0, $8197 = 0.0, $8198 = 0, $8199 = 0, $82 = 0.0, $820 = 0.0, $8200 = 0.0, $8201 = 0.0, $8202 = 0.0, $8203 = 0.0, $8204 = 0, $8205 = 0, $8206 = 0.0, $8207 = 0.0, $8208 = 0.0, $8209 = 0.0, $821 = 0.0;
 var $8210 = 0.0, $8211 = 0, $8212 = 0, $8213 = 0.0, $8214 = 0, $8215 = 0.0, $8216 = 0, $8217 = 0, $8218 = 0.0, $8219 = 0.0, $822 = 0.0, $8220 = 0.0, $8221 = 0.0, $8222 = 0.0, $8223 = 0.0, $8224 = 0.0, $8225 = 0.0, $8226 = 0.0, $8227 = 0.0, $8228 = 0.0;
 var $8229 = 0.0, $823 = 0.0, $8230 = 0.0, $8231 = 0.0, $8232 = 0.0, $8233 = 0, $8234 = 0, $8235 = 0.0, $8236 = 0.0, $8237 = 0.0, $8238 = 0.0, $8239 = 0, $824 = 0, $8240 = 0, $8241 = 0.0, $8242 = 0.0, $8243 = 0.0, $8244 = 0, $8245 = 0, $8246 = 0.0;
 var $8247 = 0.0, $8248 = 0.0, $8249 = 0.0, $825 = 0.0, $8250 = 0.0, $8251 = 0, $8252 = 0, $8253 = 0.0, $8254 = 0.0, $8255 = 0.0, $8256 = 0, $8257 = 0, $8258 = 0.0, $8259 = 0.0, $826 = 0.0, $8260 = 0.0, $8261 = 0, $8262 = 0, $8263 = 0.0, $8264 = 0.0;
 var $8265 = 0.0, $8266 = 0.0, $8267 = 0.0, $8268 = 0, $8269 = 0.0, $827 = 0.0, $8270 = 0, $8271 = 0, $8272 = 0.0, $8273 = 0.0, $8274 = 0.0, $8275 = 0.0, $8276 = 0, $8277 = 0.0, $8278 = 0.0, $8279 = 0.0, $828 = 0.0, $8280 = 0, $8281 = 0, $8282 = 0.0;
 var $8283 = 0.0, $8284 = 0.0, $8285 = 0.0, $8286 = 0, $8287 = 0, $8288 = 0.0, $8289 = 0.0, $829 = 0.0, $8290 = 0.0, $8291 = 0.0, $8292 = 0.0, $8293 = 0.0, $8294 = 0, $8295 = 0, $8296 = 0.0, $8297 = 0.0, $8298 = 0.0, $8299 = 0.0, $83 = 0.0, $830 = 0.0;
 var $8300 = 0.0, $8301 = 0.0, $8302 = 0, $8303 = 0.0, $8304 = 0, $8305 = 0, $8306 = 0.0, $8307 = 0.0, $8308 = 0, $8309 = 0, $831 = 0, $8310 = 0.0, $8311 = 0.0, $8312 = 0.0, $8313 = 0.0, $8314 = 0, $8315 = 0.0, $8316 = 0.0, $8317 = 0.0, $8318 = 0.0;
 var $8319 = 0.0, $832 = 0.0, $8320 = 0.0, $8321 = 0.0, $8322 = 0, $8323 = 0, $8324 = 0.0, $8325 = 0.0, $8326 = 0.0, $8327 = 0.0, $8328 = 0.0, $8329 = 0.0, $833 = 0.0, $8330 = 0, $8331 = 0.0, $8332 = 0, $8333 = 0, $8334 = 0.0, $8335 = 0.0, $8336 = 0;
 var $8337 = 0, $8338 = 0.0, $8339 = 0.0, $834 = 0.0, $8340 = 0.0, $8341 = 0.0, $8342 = 0, $8343 = 0.0, $8344 = 0.0, $8345 = 0.0, $8346 = 0.0, $8347 = 0.0, $8348 = 0.0, $8349 = 0.0, $835 = 0.0, $8350 = 0, $8351 = 0, $8352 = 0.0, $8353 = 0.0, $8354 = 0.0;
 var $8355 = 0.0, $8356 = 0.0, $8357 = 0.0, $8358 = 0, $8359 = 0.0, $836 = 0.0, $8360 = 0, $8361 = 0, $8362 = 0.0, $8363 = 0.0, $8364 = 0.0, $8365 = 0, $8366 = 0, $8367 = 0.0, $8368 = 0, $8369 = 0, $837 = 0.0, $8370 = 0.0, $8371 = 0.0, $8372 = 0.0;
 var $8373 = 0.0, $8374 = 0, $8375 = 0, $8376 = 0.0, $8377 = 0.0, $8378 = 0.0, $8379 = 0, $838 = 0, $8380 = 0, $8381 = 0.0, $8382 = 0.0, $8383 = 0.0, $8384 = 0, $8385 = 0, $8386 = 0.0, $8387 = 0.0, $8388 = 0.0, $8389 = 0.0, $839 = 0.0, $8390 = 0.0;
 var $8391 = 0, $8392 = 0, $8393 = 0, $8394 = 0.0, $8395 = 0, $8396 = 0.0, $8397 = 0, $8398 = 0, $8399 = 0.0, $84 = 0.0, $840 = 0.0, $8400 = 0.0, $8401 = 0.0, $8402 = 0.0, $8403 = 0.0, $8404 = 0.0, $8405 = 0.0, $8406 = 0.0, $8407 = 0, $8408 = 0.0;
 var $8409 = 0, $841 = 0.0, $8410 = 0, $8411 = 0.0, $8412 = 0.0, $8413 = 0.0, $8414 = 0.0, $8415 = 0, $8416 = 0, $8417 = 0.0, $8418 = 0.0, $8419 = 0.0, $842 = 0.0, $8420 = 0.0, $8421 = 0.0, $8422 = 0.0, $8423 = 0.0, $8424 = 0.0, $8425 = 0, $8426 = 0;
 var $8427 = 0.0, $8428 = 0.0, $8429 = 0.0, $843 = 0.0, $8430 = 0, $8431 = 0, $8432 = 0.0, $8433 = 0.0, $8434 = 0.0, $8435 = 0, $8436 = 0, $8437 = 0.0, $8438 = 0.0, $8439 = 0.0, $844 = 0.0, $8440 = 0.0, $8441 = 0.0, $8442 = 0, $8443 = 0.0, $8444 = 0;
 var $8445 = 0, $8446 = 0.0, $8447 = 0.0, $8448 = 0.0, $8449 = 0.0, $845 = 0, $8450 = 0, $8451 = 0.0, $8452 = 0.0, $8453 = 0.0, $8454 = 0, $8455 = 0, $8456 = 0.0, $8457 = 0.0, $8458 = 0.0, $8459 = 0.0, $846 = 0.0, $8460 = 0, $8461 = 0, $8462 = 0.0;
 var $8463 = 0.0, $8464 = 0.0, $8465 = 0.0, $8466 = 0.0, $8467 = 0.0, $8468 = 0, $8469 = 0, $847 = 0.0, $8470 = 0.0, $8471 = 0.0, $8472 = 0.0, $8473 = 0.0, $8474 = 0.0, $8475 = 0.0, $8476 = 0, $8477 = 0.0, $8478 = 0, $8479 = 0, $848 = 0.0, $8480 = 0.0;
 var $8481 = 0.0, $8482 = 0, $8483 = 0, $8484 = 0.0, $8485 = 0.0, $8486 = 0.0, $8487 = 0.0, $8488 = 0, $8489 = 0.0, $849 = 0.0, $8490 = 0.0, $8491 = 0.0, $8492 = 0.0, $8493 = 0.0, $8494 = 0.0, $8495 = 0.0, $8496 = 0, $8497 = 0, $8498 = 0.0, $8499 = 0.0;
 var $85 = 0.0, $850 = 0.0, $8500 = 0.0, $8501 = 0.0, $8502 = 0.0, $8503 = 0.0, $8504 = 0, $8505 = 0.0, $8506 = 0, $8507 = 0, $8508 = 0.0, $8509 = 0.0, $851 = 0.0, $8510 = 0.0, $8511 = 0, $8512 = 0.0, $8513 = 0, $8514 = 0, $8515 = 0.0, $8516 = 0.0;
 var $8517 = 0.0, $8518 = 0.0, $8519 = 0, $852 = 0.0, $8520 = 0, $8521 = 0.0, $8522 = 0.0, $8523 = 0.0, $8524 = 0, $8525 = 0, $8526 = 0.0, $8527 = 0.0, $8528 = 0.0, $8529 = 0, $853 = 0.0, $8530 = 0, $8531 = 0.0, $8532 = 0.0, $8533 = 0.0, $8534 = 0.0;
 var $8535 = 0.0, $8536 = 0, $8537 = 0, $8538 = 0, $8539 = 0.0, $854 = 0.0, $8540 = 0, $8541 = 0.0, $8542 = 0, $8543 = 0, $8544 = 0.0, $8545 = 0.0, $8546 = 0.0, $8547 = 0.0, $8548 = 0.0, $8549 = 0.0, $855 = 0.0, $8550 = 0.0, $8551 = 0.0, $8552 = 0;
 var $8553 = 0.0, $8554 = 0, $8555 = 0, $8556 = 0.0, $8557 = 0.0, $8558 = 0.0, $8559 = 0.0, $856 = 0.0, $8560 = 0, $8561 = 0, $8562 = 0.0, $8563 = 0.0, $8564 = 0.0, $8565 = 0.0, $8566 = 0.0, $8567 = 0.0, $8568 = 0.0, $8569 = 0.0, $857 = 0.0, $8570 = 0;
 var $8571 = 0, $8572 = 0.0, $8573 = 0.0, $8574 = 0.0, $8575 = 0, $8576 = 0, $8577 = 0.0, $8578 = 0.0, $8579 = 0.0, $858 = 0.0, $8580 = 0, $8581 = 0, $8582 = 0.0, $8583 = 0.0, $8584 = 0.0, $8585 = 0.0, $8586 = 0.0, $8587 = 0, $8588 = 0.0, $8589 = 0;
 var $859 = 0.0, $8590 = 0, $8591 = 0.0, $8592 = 0.0, $8593 = 0.0, $8594 = 0.0, $8595 = 0, $8596 = 0.0, $8597 = 0.0, $8598 = 0.0, $8599 = 0, $86 = 0.0, $860 = 0, $8600 = 0, $8601 = 0.0, $8602 = 0.0, $8603 = 0.0, $8604 = 0.0, $8605 = 0, $8606 = 0;
 var $8607 = 0.0, $8608 = 0.0, $8609 = 0.0, $861 = 0.0, $8610 = 0.0, $8611 = 0.0, $8612 = 0.0, $8613 = 0, $8614 = 0, $8615 = 0.0, $8616 = 0.0, $8617 = 0.0, $8618 = 0.0, $8619 = 0.0, $862 = 0.0, $8620 = 0.0, $8621 = 0, $8622 = 0.0, $8623 = 0, $8624 = 0;
 var $8625 = 0.0, $8626 = 0.0, $8627 = 0.0, $8628 = 0, $8629 = 0.0, $863 = 0.0, $8630 = 0, $8631 = 0, $8632 = 0.0, $8633 = 0.0, $8634 = 0.0, $8635 = 0.0, $8636 = 0, $8637 = 0, $8638 = 0.0, $8639 = 0.0, $864 = 0.0, $8640 = 0.0, $8641 = 0, $8642 = 0;
 var $8643 = 0.0, $8644 = 0.0, $8645 = 0.0, $8646 = 0, $8647 = 0, $8648 = 0.0, $8649 = 0.0, $865 = 0.0, $8650 = 0.0, $8651 = 0.0, $8652 = 0.0, $8653 = 0, $8654 = 0, $8655 = 0, $8656 = 0.0, $8657 = 0, $8658 = 0.0, $8659 = 0, $866 = 0.0, $8660 = 0;
 var $8661 = 0.0, $8662 = 0.0, $8663 = 0.0, $8664 = 0.0, $8665 = 0.0, $8666 = 0.0, $8667 = 0.0, $8668 = 0.0, $8669 = 0, $867 = 0, $8670 = 0.0, $8671 = 0, $8672 = 0, $8673 = 0.0, $8674 = 0.0, $8675 = 0.0, $8676 = 0.0, $8677 = 0.0, $8678 = 0.0, $8679 = 0.0;
 var $868 = 0.0, $8680 = 0, $8681 = 0, $8682 = 0.0, $8683 = 0.0, $8684 = 0.0, $8685 = 0.0, $8686 = 0.0, $8687 = 0, $8688 = 0, $8689 = 0.0, $869 = 0.0, $8690 = 0.0, $8691 = 0.0, $8692 = 0, $8693 = 0, $8694 = 0.0, $8695 = 0.0, $8696 = 0.0, $8697 = 0;
 var $8698 = 0, $8699 = 0.0, $87 = 0.0, $870 = 0.0, $8700 = 0.0, $8701 = 0.0, $8702 = 0.0, $8703 = 0.0, $8704 = 0, $8705 = 0.0, $8706 = 0, $8707 = 0, $8708 = 0.0, $8709 = 0.0, $871 = 0.0, $8710 = 0.0, $8711 = 0, $8712 = 0.0, $8713 = 0, $8714 = 0;
 var $8715 = 0.0, $8716 = 0.0, $8717 = 0.0, $8718 = 0.0, $8719 = 0, $872 = 0.0, $8720 = 0, $8721 = 0.0, $8722 = 0.0, $8723 = 0.0, $8724 = 0, $8725 = 0, $8726 = 0.0, $8727 = 0.0, $8728 = 0.0, $8729 = 0, $873 = 0.0, $8730 = 0, $8731 = 0.0, $8732 = 0.0;
 var $8733 = 0.0, $8734 = 0.0, $8735 = 0.0, $8736 = 0, $8737 = 0.0, $8738 = 0, $8739 = 0, $874 = 0, $8740 = 0.0, $8741 = 0.0, $8742 = 0.0, $8743 = 0.0, $8744 = 0, $8745 = 0.0, $8746 = 0.0, $8747 = 0.0, $8748 = 0.0, $8749 = 0.0, $875 = 0.0, $8750 = 0.0;
 var $8751 = 0.0, $8752 = 0, $8753 = 0, $8754 = 0.0, $8755 = 0.0, $8756 = 0.0, $8757 = 0.0, $8758 = 0, $8759 = 0.0, $876 = 0.0, $8760 = 0.0, $8761 = 0.0, $8762 = 0.0, $8763 = 0.0, $8764 = 0.0, $8765 = 0.0, $8766 = 0.0, $8767 = 0, $8768 = 0, $8769 = 0.0;
 var $877 = 0.0, $8770 = 0.0, $8771 = 0.0, $8772 = 0.0, $8773 = 0, $8774 = 0.0, $8775 = 0.0, $8776 = 0.0, $8777 = 0.0, $8778 = 0.0, $8779 = 0.0, $878 = 0.0, $8780 = 0.0, $8781 = 0.0, $8782 = 0.0, $8783 = 0.0, $8784 = 0, $8785 = 0.0, $8786 = 0.0, $8787 = 0.0;
 var $8788 = 0, $8789 = 0, $879 = 0.0, $8790 = 0.0, $8791 = 0.0, $8792 = 0.0, $8793 = 0.0, $8794 = 0, $8795 = 0, $8796 = 0.0, $8797 = 0.0, $8798 = 0.0, $8799 = 0.0, $88 = 0.0, $880 = 0.0, $8800 = 0.0, $8801 = 0, $8802 = 0, $8803 = 0.0, $8804 = 0;
 var $8805 = 0.0, $8806 = 0, $8807 = 0, $8808 = 0.0, $8809 = 0.0, $881 = 0, $8810 = 0.0, $8811 = 0.0, $8812 = 0.0, $8813 = 0.0, $8814 = 0.0, $8815 = 0.0, $8816 = 0.0, $8817 = 0, $8818 = 0, $8819 = 0.0, $882 = 0.0, $8820 = 0.0, $8821 = 0.0, $8822 = 0.0;
 var $8823 = 0, $8824 = 0, $8825 = 0.0, $8826 = 0.0, $8827 = 0.0, $8828 = 0, $8829 = 0, $883 = 0.0, $8830 = 0.0, $8831 = 0.0, $8832 = 0.0, $8833 = 0.0, $8834 = 0.0, $8835 = 0, $8836 = 0, $8837 = 0.0, $8838 = 0.0, $8839 = 0.0, $884 = 0.0, $8840 = 0;
 var $8841 = 0, $8842 = 0.0, $8843 = 0.0, $8844 = 0.0, $8845 = 0, $8846 = 0, $8847 = 0.0, $8848 = 0.0, $8849 = 0.0, $885 = 0.0, $8850 = 0.0, $8851 = 0.0, $8852 = 0, $8853 = 0.0, $8854 = 0, $8855 = 0, $8856 = 0.0, $8857 = 0.0, $8858 = 0.0, $8859 = 0.0;
 var $886 = 0.0, $8860 = 0, $8861 = 0.0, $8862 = 0.0, $8863 = 0.0, $8864 = 0, $8865 = 0, $8866 = 0.0, $8867 = 0.0, $8868 = 0.0, $8869 = 0.0, $887 = 0.0, $8870 = 0, $8871 = 0, $8872 = 0.0, $8873 = 0.0, $8874 = 0.0, $8875 = 0.0, $8876 = 0.0, $8877 = 0.0;
 var $8878 = 0, $8879 = 0, $888 = 0, $8880 = 0.0, $8881 = 0.0, $8882 = 0.0, $8883 = 0.0, $8884 = 0.0, $8885 = 0.0, $8886 = 0, $8887 = 0.0, $8888 = 0, $8889 = 0, $889 = 0.0, $8890 = 0.0, $8891 = 0.0, $8892 = 0, $8893 = 0, $8894 = 0.0, $8895 = 0.0;
 var $8896 = 0.0, $8897 = 0.0, $8898 = 0, $8899 = 0.0, $89 = 0.0, $890 = 0.0, $8900 = 0.0, $8901 = 0.0, $8902 = 0.0, $8903 = 0.0, $8904 = 0.0, $8905 = 0.0, $8906 = 0, $8907 = 0, $8908 = 0.0, $8909 = 0.0, $891 = 0.0, $8910 = 0.0, $8911 = 0.0, $8912 = 0.0;
 var $8913 = 0.0, $8914 = 0, $8915 = 0.0, $8916 = 0, $8917 = 0, $8918 = 0.0, $8919 = 0.0, $892 = 0.0, $8920 = 0, $8921 = 0, $8922 = 0.0, $8923 = 0.0, $8924 = 0.0, $8925 = 0.0, $8926 = 0, $8927 = 0.0, $8928 = 0.0, $8929 = 0.0, $893 = 0.0, $8930 = 0.0;
 var $8931 = 0.0, $8932 = 0.0, $8933 = 0.0, $8934 = 0, $8935 = 0, $8936 = 0.0, $8937 = 0.0, $8938 = 0.0, $8939 = 0.0, $894 = 0.0, $8940 = 0.0, $8941 = 0.0, $8942 = 0, $8943 = 0.0, $8944 = 0, $8945 = 0, $8946 = 0.0, $8947 = 0.0, $8948 = 0.0, $8949 = 0;
 var $895 = 0, $8950 = 0, $8951 = 0.0, $8952 = 0, $8953 = 0, $8954 = 0.0, $8955 = 0.0, $8956 = 0.0, $8957 = 0.0, $8958 = 0, $8959 = 0, $896 = 0.0, $8960 = 0.0, $8961 = 0.0, $8962 = 0.0, $8963 = 0, $8964 = 0, $8965 = 0.0, $8966 = 0.0, $8967 = 0.0;
 var $8968 = 0, $8969 = 0, $897 = 0.0, $8970 = 0.0, $8971 = 0.0, $8972 = 0.0, $8973 = 0.0, $8974 = 0.0, $8975 = 0, $8976 = 0, $8977 = 0, $8978 = 0.0, $8979 = 0, $898 = 0.0, $8980 = 0.0, $8981 = 0, $8982 = 0, $8983 = 0.0, $8984 = 0.0, $8985 = 0.0;
 var $8986 = 0.0, $8987 = 0.0, $8988 = 0.0, $8989 = 0.0, $899 = 0.0, $8990 = 0.0, $8991 = 0, $8992 = 0.0, $8993 = 0, $8994 = 0, $8995 = 0.0, $8996 = 0.0, $8997 = 0.0, $8998 = 0.0, $8999 = 0, $9 = 0, $90 = 0.0, $900 = 0.0, $9000 = 0, $9001 = 0.0;
 var $9002 = 0.0, $9003 = 0.0, $9004 = 0.0, $9005 = 0.0, $9006 = 0.0, $9007 = 0.0, $9008 = 0.0, $9009 = 0, $901 = 0.0, $9010 = 0, $9011 = 0.0, $9012 = 0.0, $9013 = 0.0, $9014 = 0, $9015 = 0, $9016 = 0.0, $9017 = 0.0, $9018 = 0.0, $9019 = 0, $902 = 0.0;
 var $9020 = 0, $9021 = 0.0, $9022 = 0.0, $9023 = 0.0, $9024 = 0.0, $9025 = 0.0, $9026 = 0, $9027 = 0.0, $9028 = 0, $9029 = 0, $903 = 0.0, $9030 = 0.0, $9031 = 0.0, $9032 = 0.0, $9033 = 0.0, $9034 = 0, $9035 = 0.0, $9036 = 0.0, $9037 = 0.0, $9038 = 0;
 var $9039 = 0, $904 = 0.0, $9040 = 0.0, $9041 = 0.0, $9042 = 0.0, $9043 = 0.0, $9044 = 0, $9045 = 0, $9046 = 0.0, $9047 = 0.0, $9048 = 0.0, $9049 = 0.0, $905 = 0.0, $9050 = 0.0, $9051 = 0.0, $9052 = 0, $9053 = 0, $9054 = 0.0, $9055 = 0.0, $9056 = 0.0;
 var $9057 = 0.0, $9058 = 0.0, $9059 = 0.0, $906 = 0.0, $9060 = 0, $9061 = 0.0, $9062 = 0, $9063 = 0, $9064 = 0.0, $9065 = 0.0, $9066 = 0, $9067 = 0, $9068 = 0.0, $9069 = 0.0, $907 = 0.0, $9070 = 0.0, $9071 = 0.0, $9072 = 0, $9073 = 0.0, $9074 = 0.0;
 var $9075 = 0.0, $9076 = 0.0, $9077 = 0.0, $9078 = 0.0, $9079 = 0.0, $908 = 0.0, $9080 = 0, $9081 = 0, $9082 = 0.0, $9083 = 0.0, $9084 = 0.0, $9085 = 0.0, $9086 = 0.0, $9087 = 0.0, $9088 = 0, $9089 = 0.0, $909 = 0.0, $9090 = 0, $9091 = 0, $9092 = 0.0;
 var $9093 = 0.0, $9094 = 0.0, $9095 = 0, $9096 = 0.0, $9097 = 0, $9098 = 0, $9099 = 0.0, $91 = 0.0, $910 = 0, $9100 = 0.0, $9101 = 0.0, $9102 = 0.0, $9103 = 0, $9104 = 0, $9105 = 0.0, $9106 = 0.0, $9107 = 0.0, $9108 = 0, $9109 = 0, $911 = 0.0;
 var $9110 = 0.0, $9111 = 0.0, $9112 = 0.0, $9113 = 0, $9114 = 0, $9115 = 0.0, $9116 = 0.0, $9117 = 0.0, $9118 = 0.0, $9119 = 0.0, $912 = 0.0, $9120 = 0, $9121 = 0, $9122 = 0, $9123 = 0.0, $9124 = 0, $9125 = 0.0, $9126 = 0, $9127 = 0, $9128 = 0.0;
 var $9129 = 0.0, $913 = 0.0, $9130 = 0.0, $9131 = 0.0, $9132 = 0.0, $9133 = 0.0, $9134 = 0.0, $9135 = 0.0, $9136 = 0, $9137 = 0.0, $9138 = 0, $9139 = 0, $914 = 0.0, $9140 = 0.0, $9141 = 0.0, $9142 = 0.0, $9143 = 0.0, $9144 = 0, $9145 = 0, $9146 = 0.0;
 var $9147 = 0.0, $9148 = 0.0, $9149 = 0.0, $915 = 0.0, $9150 = 0.0, $9151 = 0.0, $9152 = 0.0, $9153 = 0.0, $9154 = 0, $9155 = 0, $9156 = 0.0, $9157 = 0.0, $9158 = 0.0, $9159 = 0, $916 = 0.0, $9160 = 0, $9161 = 0.0, $9162 = 0.0, $9163 = 0.0, $9164 = 0;
 var $9165 = 0, $9166 = 0.0, $9167 = 0.0, $9168 = 0.0, $9169 = 0.0, $917 = 0, $9170 = 0.0, $9171 = 0, $9172 = 0.0, $9173 = 0, $9174 = 0, $9175 = 0.0, $9176 = 0.0, $9177 = 0.0, $9178 = 0.0, $9179 = 0, $918 = 0.0, $9180 = 0.0, $9181 = 0.0, $9182 = 0.0;
 var $9183 = 0, $9184 = 0, $9185 = 0.0, $9186 = 0.0, $9187 = 0.0, $9188 = 0.0, $9189 = 0, $919 = 0.0, $9190 = 0, $9191 = 0.0, $9192 = 0.0, $9193 = 0.0, $9194 = 0.0, $9195 = 0.0, $9196 = 0.0, $9197 = 0, $9198 = 0, $9199 = 0.0, $92 = 0.0, $920 = 0.0;
 var $9200 = 0.0, $9201 = 0.0, $9202 = 0.0, $9203 = 0.0, $9204 = 0.0, $9205 = 0, $9206 = 0.0, $9207 = 0, $9208 = 0, $9209 = 0.0, $921 = 0.0, $9210 = 0.0, $9211 = 0.0, $9212 = 0, $9213 = 0.0, $9214 = 0, $9215 = 0, $9216 = 0.0, $9217 = 0.0, $9218 = 0.0;
 var $9219 = 0.0, $922 = 0.0, $9220 = 0, $9221 = 0, $9222 = 0.0, $9223 = 0.0, $9224 = 0.0, $9225 = 0, $9226 = 0, $9227 = 0.0, $9228 = 0.0, $9229 = 0.0, $923 = 0.0, $9230 = 0, $9231 = 0, $9232 = 0.0, $9233 = 0.0, $9234 = 0.0, $9235 = 0.0, $9236 = 0.0;
 var $9237 = 0, $9238 = 0, $9239 = 0, $924 = 0, $9240 = 0.0, $9241 = 0, $9242 = 0.0, $9243 = 0, $9244 = 0, $9245 = 0.0, $9246 = 0.0, $9247 = 0.0, $9248 = 0.0, $9249 = 0.0, $925 = 0.0, $9250 = 0.0, $9251 = 0.0, $9252 = 0.0, $9253 = 0, $9254 = 0.0;
 var $9255 = 0, $9256 = 0, $9257 = 0.0, $9258 = 0.0, $9259 = 0.0, $926 = 0.0, $9260 = 0.0, $9261 = 0.0, $9262 = 0.0, $9263 = 0.0, $9264 = 0, $9265 = 0, $9266 = 0.0, $9267 = 0.0, $9268 = 0.0, $9269 = 0.0, $927 = 0.0, $9270 = 0.0, $9271 = 0, $9272 = 0;
 var $9273 = 0.0, $9274 = 0.0, $9275 = 0.0, $9276 = 0, $9277 = 0, $9278 = 0.0, $9279 = 0.0, $928 = 0.0, $9280 = 0.0, $9281 = 0, $9282 = 0, $9283 = 0.0, $9284 = 0.0, $9285 = 0.0, $9286 = 0.0, $9287 = 0.0, $9288 = 0, $9289 = 0.0, $929 = 0.0, $9290 = 0;
 var $9291 = 0, $9292 = 0.0, $9293 = 0.0, $9294 = 0.0, $9295 = 0, $9296 = 0.0, $9297 = 0, $9298 = 0, $9299 = 0.0, $93 = 0.0, $930 = 0.0, $9300 = 0.0, $9301 = 0.0, $9302 = 0.0, $9303 = 0, $9304 = 0, $9305 = 0.0, $9306 = 0.0, $9307 = 0.0, $9308 = 0;
 var $9309 = 0, $931 = 0, $9310 = 0.0, $9311 = 0.0, $9312 = 0.0, $9313 = 0, $9314 = 0, $9315 = 0.0, $9316 = 0.0, $9317 = 0.0, $9318 = 0.0, $9319 = 0.0, $932 = 0.0, $9320 = 0, $9321 = 0.0, $9322 = 0, $9323 = 0, $9324 = 0.0, $9325 = 0.0, $9326 = 0.0;
 var $9327 = 0.0, $9328 = 0, $9329 = 0.0, $933 = 0.0, $9330 = 0.0, $9331 = 0.0, $9332 = 0.0, $9333 = 0.0, $9334 = 0.0, $9335 = 0.0, $9336 = 0, $9337 = 0, $9338 = 0.0, $9339 = 0.0, $934 = 0.0, $9340 = 0.0, $9341 = 0.0, $9342 = 0, $9343 = 0.0, $9344 = 0.0;
 var $9345 = 0.0, $9346 = 0.0, $9347 = 0.0, $9348 = 0.0, $9349 = 0.0, $935 = 0.0, $9350 = 0.0, $9351 = 0, $9352 = 0, $9353 = 0.0, $9354 = 0.0, $9355 = 0.0, $9356 = 0.0, $9357 = 0, $9358 = 0.0, $9359 = 0.0, $936 = 0.0, $9360 = 0.0, $9361 = 0.0, $9362 = 0.0;
 var $9363 = 0.0, $9364 = 0.0, $9365 = 0.0, $9366 = 0.0, $9367 = 0.0, $9368 = 0, $9369 = 0.0, $937 = 0.0, $9370 = 0.0, $9371 = 0.0, $9372 = 0, $9373 = 0, $9374 = 0.0, $9375 = 0.0, $9376 = 0.0, $9377 = 0.0, $9378 = 0, $9379 = 0, $938 = 0, $9380 = 0.0;
 var $9381 = 0.0, $9382 = 0.0, $9383 = 0.0, $9384 = 0.0, $9385 = 0, $9386 = 0, $9387 = 0.0, $9388 = 0, $9389 = 0.0, $939 = 0.0, $9390 = 0, $9391 = 0, $9392 = 0.0, $9393 = 0.0, $9394 = 0.0, $9395 = 0.0, $9396 = 0.0, $9397 = 0.0, $9398 = 0.0, $9399 = 0.0;
 var $94 = 0.0, $940 = 0.0, $9400 = 0.0, $9401 = 0.0, $9402 = 0.0, $9403 = 0.0, $9404 = 0, $9405 = 0, $9406 = 0.0, $9407 = 0.0, $9408 = 0.0, $9409 = 0.0, $941 = 0.0, $9410 = 0, $9411 = 0, $9412 = 0.0, $9413 = 0.0, $9414 = 0.0, $9415 = 0, $9416 = 0;
 var $9417 = 0.0, $9418 = 0.0, $9419 = 0.0, $942 = 0.0, $9420 = 0.0, $9421 = 0.0, $9422 = 0, $9423 = 0, $9424 = 0.0, $9425 = 0.0, $9426 = 0.0, $9427 = 0, $9428 = 0, $9429 = 0.0, $943 = 0.0, $9430 = 0.0, $9431 = 0.0, $9432 = 0, $9433 = 0, $9434 = 0.0;
 var $9435 = 0.0, $9436 = 0.0, $9437 = 0.0, $9438 = 0.0, $9439 = 0, $944 = 0.0, $9440 = 0.0, $9441 = 0, $9442 = 0, $9443 = 0.0, $9444 = 0.0, $9445 = 0.0, $9446 = 0.0, $9447 = 0, $9448 = 0.0, $9449 = 0.0, $945 = 0, $9450 = 0.0, $9451 = 0, $9452 = 0;
 var $9453 = 0.0, $9454 = 0.0, $9455 = 0.0, $9456 = 0.0, $9457 = 0, $9458 = 0, $9459 = 0.0, $946 = 0.0, $9460 = 0.0, $9461 = 0.0, $9462 = 0.0, $9463 = 0.0, $9464 = 0.0, $9465 = 0, $9466 = 0, $9467 = 0.0, $9468 = 0.0, $9469 = 0.0, $947 = 0.0, $9470 = 0.0;
 var $9471 = 0.0, $9472 = 0.0, $9473 = 0, $9474 = 0.0, $9475 = 0, $9476 = 0, $9477 = 0.0, $9478 = 0.0, $9479 = 0, $948 = 0.0, $9480 = 0, $9481 = 0.0, $9482 = 0.0, $9483 = 0.0, $9484 = 0.0, $9485 = 0, $9486 = 0.0, $9487 = 0.0, $9488 = 0.0, $9489 = 0.0;
 var $949 = 0.0, $9490 = 0.0, $9491 = 0.0, $9492 = 0.0, $9493 = 0, $9494 = 0, $9495 = 0.0, $9496 = 0.0, $9497 = 0.0, $9498 = 0.0, $9499 = 0.0, $95 = 0, $950 = 0.0, $9500 = 0.0, $9501 = 0, $9502 = 0.0, $9503 = 0, $9504 = 0, $9505 = 0.0, $9506 = 0.0;
 var $9507 = 0, $9508 = 0, $9509 = 0.0, $951 = 0.0, $9510 = 0.0, $9511 = 0.0, $9512 = 0.0, $9513 = 0, $9514 = 0.0, $9515 = 0.0, $9516 = 0.0, $9517 = 0.0, $9518 = 0.0, $9519 = 0.0, $952 = 0.0, $9520 = 0.0, $9521 = 0, $9522 = 0, $9523 = 0.0, $9524 = 0.0;
 var $9525 = 0.0, $9526 = 0.0, $9527 = 0.0, $9528 = 0.0, $9529 = 0, $953 = 0.0, $9530 = 0.0, $9531 = 0, $9532 = 0, $9533 = 0.0, $9534 = 0.0, $9535 = 0.0, $9536 = 0, $9537 = 0, $9538 = 0.0, $9539 = 0, $954 = 0.0, $9540 = 0, $9541 = 0.0, $9542 = 0.0;
 var $9543 = 0.0, $9544 = 0.0, $9545 = 0, $9546 = 0, $9547 = 0.0, $9548 = 0.0, $9549 = 0.0, $955 = 0.0, $9550 = 0, $9551 = 0, $9552 = 0.0, $9553 = 0.0, $9554 = 0.0, $9555 = 0, $9556 = 0, $9557 = 0.0, $9558 = 0.0, $9559 = 0.0, $956 = 0.0, $9560 = 0.0;
 var $9561 = 0.0, $9562 = 0, $9563 = 0, $9564 = 0, $9565 = 0.0, $9566 = 0, $9567 = 0.0, $9568 = 0, $9569 = 0, $957 = 0.0, $9570 = 0.0, $9571 = 0.0, $9572 = 0.0, $9573 = 0.0, $9574 = 0.0, $9575 = 0.0, $9576 = 0.0, $9577 = 0.0, $9578 = 0, $9579 = 0.0;
 var $958 = 0.0, $9580 = 0, $9581 = 0, $9582 = 0.0, $9583 = 0.0, $9584 = 0.0, $9585 = 0.0, $9586 = 0.0, $9587 = 0.0, $9588 = 0.0, $9589 = 0, $959 = 0.0, $9590 = 0, $9591 = 0.0, $9592 = 0.0, $9593 = 0.0, $9594 = 0.0, $9595 = 0.0, $9596 = 0, $9597 = 0;
 var $9598 = 0.0, $9599 = 0.0, $96 = 0.0, $960 = 0, $9600 = 0.0, $9601 = 0, $9602 = 0, $9603 = 0.0, $9604 = 0.0, $9605 = 0.0, $9606 = 0, $9607 = 0, $9608 = 0.0, $9609 = 0.0, $961 = 0.0, $9610 = 0.0, $9611 = 0.0, $9612 = 0.0, $9613 = 0, $9614 = 0.0;
 var $9615 = 0, $9616 = 0, $9617 = 0.0, $9618 = 0.0, $9619 = 0.0, $962 = 0.0, $9620 = 0.0, $9621 = 0, $9622 = 0.0, $9623 = 0.0, $9624 = 0.0, $9625 = 0, $9626 = 0, $9627 = 0.0, $9628 = 0.0, $9629 = 0.0, $963 = 0.0, $9630 = 0.0, $9631 = 0, $9632 = 0;
 var $9633 = 0.0, $9634 = 0.0, $9635 = 0.0, $9636 = 0.0, $9637 = 0.0, $9638 = 0.0, $9639 = 0, $964 = 0.0, $9640 = 0, $9641 = 0.0, $9642 = 0.0, $9643 = 0.0, $9644 = 0.0, $9645 = 0.0, $9646 = 0.0, $9647 = 0, $9648 = 0.0, $9649 = 0, $965 = 0.0, $9650 = 0;
 var $9651 = 0.0, $9652 = 0.0, $9653 = 0, $9654 = 0, $9655 = 0.0, $9656 = 0.0, $9657 = 0.0, $9658 = 0.0, $9659 = 0, $966 = 0.0, $9660 = 0.0, $9661 = 0.0, $9662 = 0.0, $9663 = 0.0, $9664 = 0.0, $9665 = 0.0, $9666 = 0.0, $9667 = 0, $9668 = 0, $9669 = 0.0;
 var $967 = 0, $9670 = 0.0, $9671 = 0.0, $9672 = 0.0, $9673 = 0.0, $9674 = 0.0, $9675 = 0, $9676 = 0.0, $9677 = 0, $9678 = 0, $9679 = 0.0, $968 = 0.0, $9680 = 0.0, $9681 = 0.0, $9682 = 0, $9683 = 0.0, $9684 = 0, $9685 = 0, $9686 = 0.0, $9687 = 0.0;
 var $9688 = 0.0, $9689 = 0.0, $969 = 0.0, $9690 = 0, $9691 = 0, $9692 = 0.0, $9693 = 0.0, $9694 = 0.0, $9695 = 0, $9696 = 0, $9697 = 0.0, $9698 = 0.0, $9699 = 0.0, $97 = 0, $970 = 0.0, $9700 = 0, $9701 = 0, $9702 = 0.0, $9703 = 0.0, $9704 = 0.0;
 var $9705 = 0.0, $9706 = 0.0, $9707 = 0, $9708 = 0, $9709 = 0, $971 = 0.0, $9710 = 0.0, $9711 = 0, $9712 = 0.0, $9713 = 0, $9714 = 0, $9715 = 0.0, $9716 = 0.0, $9717 = 0.0, $9718 = 0.0, $9719 = 0.0, $972 = 0.0, $9720 = 0.0, $9721 = 0.0, $9722 = 0.0;
 var $9723 = 0, $9724 = 0.0, $9725 = 0, $9726 = 0, $9727 = 0.0, $9728 = 0.0, $9729 = 0.0, $973 = 0.0, $9730 = 0.0, $9731 = 0.0, $9732 = 0.0, $9733 = 0.0, $9734 = 0, $9735 = 0, $9736 = 0.0, $9737 = 0.0, $9738 = 0.0, $9739 = 0.0, $974 = 0, $9740 = 0.0;
 var $9741 = 0, $9742 = 0, $9743 = 0.0, $9744 = 0.0, $9745 = 0.0, $9746 = 0, $9747 = 0, $9748 = 0.0, $9749 = 0.0, $975 = 0.0, $9750 = 0.0, $9751 = 0, $9752 = 0, $9753 = 0.0, $9754 = 0.0, $9755 = 0.0, $9756 = 0.0, $9757 = 0.0, $9758 = 0, $9759 = 0.0;
 var $976 = 0.0, $9760 = 0, $9761 = 0, $9762 = 0.0, $9763 = 0.0, $9764 = 0.0, $9765 = 0.0, $9766 = 0, $9767 = 0.0, $9768 = 0.0, $9769 = 0.0, $977 = 0.0, $9770 = 0, $9771 = 0, $9772 = 0.0, $9773 = 0.0, $9774 = 0.0, $9775 = 0.0, $9776 = 0, $9777 = 0;
 var $9778 = 0.0, $9779 = 0.0, $978 = 0.0, $9780 = 0.0, $9781 = 0.0, $9782 = 0.0, $9783 = 0.0, $9784 = 0, $9785 = 0, $9786 = 0.0, $9787 = 0.0, $9788 = 0.0, $9789 = 0.0, $979 = 0.0, $9790 = 0.0, $9791 = 0.0, $9792 = 0, $9793 = 0.0, $9794 = 0, $9795 = 0;
 var $9796 = 0.0, $9797 = 0.0, $9798 = 0.0, $9799 = 0, $98 = 0.0, $980 = 0.0, $9800 = 0.0, $9801 = 0, $9802 = 0, $9803 = 0.0, $9804 = 0.0, $9805 = 0.0, $9806 = 0.0, $9807 = 0, $9808 = 0, $9809 = 0.0, $981 = 0, $9810 = 0.0, $9811 = 0.0, $9812 = 0;
 var $9813 = 0, $9814 = 0.0, $9815 = 0.0, $9816 = 0.0, $9817 = 0, $9818 = 0, $9819 = 0.0, $982 = 0.0, $9820 = 0.0, $9821 = 0.0, $9822 = 0.0, $9823 = 0.0, $9824 = 0, $9825 = 0, $9826 = 0, $9827 = 0.0, $9828 = 0, $9829 = 0.0, $983 = 0.0, $9830 = 0;
 var $9831 = 0, $9832 = 0.0, $9833 = 0.0, $9834 = 0.0, $9835 = 0.0, $9836 = 0.0, $9837 = 0.0, $9838 = 0.0, $9839 = 0.0, $984 = 0.0, $9840 = 0, $9841 = 0.0, $9842 = 0, $9843 = 0, $9844 = 0.0, $9845 = 0.0, $9846 = 0.0, $9847 = 0.0, $9848 = 0.0, $9849 = 0.0;
 var $985 = 0.0, $9850 = 0.0, $9851 = 0, $9852 = 0, $9853 = 0.0, $9854 = 0.0, $9855 = 0.0, $9856 = 0.0, $9857 = 0.0, $9858 = 0, $9859 = 0, $986 = 0.0, $9860 = 0.0, $9861 = 0.0, $9862 = 0.0, $9863 = 0, $9864 = 0, $9865 = 0.0, $9866 = 0.0, $9867 = 0.0;
 var $9868 = 0, $9869 = 0, $987 = 0.0, $9870 = 0.0, $9871 = 0.0, $9872 = 0.0, $9873 = 0.0, $9874 = 0.0, $9875 = 0, $9876 = 0.0, $9877 = 0, $9878 = 0, $9879 = 0.0, $988 = 0, $9880 = 0.0, $9881 = 0.0, $9882 = 0, $9883 = 0.0, $9884 = 0, $9885 = 0;
 var $9886 = 0.0, $9887 = 0.0, $9888 = 0.0, $9889 = 0.0, $989 = 0.0, $9890 = 0, $9891 = 0, $9892 = 0.0, $9893 = 0.0, $9894 = 0.0, $9895 = 0, $9896 = 0, $9897 = 0.0, $9898 = 0.0, $9899 = 0.0, $99 = 0.0, $990 = 0.0, $9900 = 0, $9901 = 0, $9902 = 0.0;
 var $9903 = 0.0, $9904 = 0.0, $9905 = 0.0, $9906 = 0.0, $9907 = 0, $9908 = 0.0, $9909 = 0, $991 = 0.0, $9910 = 0, $9911 = 0.0, $9912 = 0.0, $9913 = 0.0, $9914 = 0.0, $9915 = 0, $9916 = 0.0, $9917 = 0.0, $9918 = 0.0, $9919 = 0.0, $992 = 0.0, $9920 = 0.0;
 var $9921 = 0.0, $9922 = 0.0, $9923 = 0, $9924 = 0, $9925 = 0.0, $9926 = 0.0, $9927 = 0.0, $9928 = 0.0, $9929 = 0, $993 = 0.0, $9930 = 0.0, $9931 = 0.0, $9932 = 0.0, $9933 = 0.0, $9934 = 0.0, $9935 = 0.0, $9936 = 0.0, $9937 = 0.0, $9938 = 0, $9939 = 0;
 var $994 = 0.0, $9940 = 0.0, $9941 = 0.0, $9942 = 0.0, $9943 = 0.0, $9944 = 0, $9945 = 0.0, $9946 = 0.0, $9947 = 0.0, $9948 = 0.0, $9949 = 0.0, $995 = 0, $9950 = 0.0, $9951 = 0.0, $9952 = 0.0, $9953 = 0.0, $9954 = 0.0, $9955 = 0, $9956 = 0.0, $9957 = 0.0;
 var $9958 = 0.0, $9959 = 0, $996 = 0.0, $9960 = 0, $9961 = 0.0, $9962 = 0.0, $9963 = 0.0, $9964 = 0.0, $9965 = 0, $9966 = 0, $9967 = 0.0, $9968 = 0.0, $9969 = 0.0, $997 = 0.0, $9970 = 0.0, $9971 = 0.0, $9972 = 0, $9973 = 0, $9974 = 0.0, $9975 = 0;
 var $9976 = 0.0, $9977 = 0, $9978 = 0, $9979 = 0.0, $998 = 0.0, $9980 = 0.0, $9981 = 0.0, $9982 = 0.0, $9983 = 0.0, $9984 = 0.0, $9985 = 0.0, $9986 = 0.0, $9987 = 0.0, $9988 = 0, $9989 = 0, $999 = 0.0, $9990 = 0.0, $9991 = 0.0, $9992 = 0.0, $9993 = 0.0;
 var $9994 = 0, $9995 = 0, $9996 = 0.0, $9997 = 0.0, $9998 = 0.0, $9999 = 0, $fSlow0 = 0.0, $fSlow1 = 0.0, $fSlow10 = 0.0, $fSlow100 = 0.0, $fSlow101 = 0.0, $fSlow102 = 0.0, $fSlow103 = 0.0, $fSlow104 = 0.0, $fSlow105 = 0.0, $fSlow106 = 0.0, $fSlow107 = 0.0, $fSlow108 = 0.0, $fSlow109 = 0.0, $fSlow11 = 0.0;
 var $fSlow110 = 0.0, $fSlow111 = 0.0, $fSlow112 = 0.0, $fSlow113 = 0.0, $fSlow114 = 0.0, $fSlow115 = 0.0, $fSlow116 = 0.0, $fSlow117 = 0.0, $fSlow118 = 0.0, $fSlow119 = 0.0, $fSlow12 = 0.0, $fSlow120 = 0.0, $fSlow121 = 0.0, $fSlow122 = 0.0, $fSlow123 = 0.0, $fSlow124 = 0.0, $fSlow125 = 0.0, $fSlow126 = 0.0, $fSlow127 = 0.0, $fSlow128 = 0.0;
 var $fSlow129 = 0.0, $fSlow13 = 0.0, $fSlow130 = 0.0, $fSlow131 = 0.0, $fSlow132 = 0.0, $fSlow133 = 0.0, $fSlow134 = 0.0, $fSlow135 = 0.0, $fSlow136 = 0.0, $fSlow137 = 0.0, $fSlow138 = 0.0, $fSlow139 = 0.0, $fSlow14 = 0.0, $fSlow140 = 0.0, $fSlow141 = 0.0, $fSlow142 = 0.0, $fSlow143 = 0.0, $fSlow144 = 0.0, $fSlow145 = 0.0, $fSlow146 = 0.0;
 var $fSlow147 = 0.0, $fSlow148 = 0.0, $fSlow149 = 0.0, $fSlow15 = 0.0, $fSlow150 = 0.0, $fSlow151 = 0.0, $fSlow152 = 0.0, $fSlow153 = 0.0, $fSlow154 = 0.0, $fSlow155 = 0.0, $fSlow156 = 0.0, $fSlow157 = 0.0, $fSlow158 = 0.0, $fSlow159 = 0.0, $fSlow16 = 0.0, $fSlow160 = 0.0, $fSlow161 = 0.0, $fSlow162 = 0.0, $fSlow163 = 0.0, $fSlow164 = 0.0;
 var $fSlow165 = 0.0, $fSlow166 = 0.0, $fSlow167 = 0.0, $fSlow168 = 0.0, $fSlow169 = 0.0, $fSlow17 = 0.0, $fSlow170 = 0.0, $fSlow171 = 0.0, $fSlow172 = 0.0, $fSlow173 = 0.0, $fSlow174 = 0.0, $fSlow175 = 0.0, $fSlow176 = 0.0, $fSlow177 = 0.0, $fSlow178 = 0.0, $fSlow179 = 0.0, $fSlow18 = 0.0, $fSlow180 = 0.0, $fSlow181 = 0.0, $fSlow183 = 0.0;
 var $fSlow19 = 0.0, $fSlow2 = 0.0, $fSlow20 = 0.0, $fSlow21 = 0.0, $fSlow22 = 0.0, $fSlow23 = 0.0, $fSlow24 = 0.0, $fSlow25 = 0.0, $fSlow26 = 0.0, $fSlow27 = 0.0, $fSlow28 = 0.0, $fSlow29 = 0.0, $fSlow3 = 0.0, $fSlow30 = 0.0, $fSlow31 = 0.0, $fSlow32 = 0.0, $fSlow33 = 0.0, $fSlow34 = 0.0, $fSlow35 = 0.0, $fSlow36 = 0.0;
 var $fSlow37 = 0.0, $fSlow38 = 0.0, $fSlow39 = 0.0, $fSlow4 = 0.0, $fSlow40 = 0.0, $fSlow41 = 0.0, $fSlow42 = 0.0, $fSlow43 = 0.0, $fSlow44 = 0.0, $fSlow45 = 0.0, $fSlow46 = 0.0, $fSlow47 = 0.0, $fSlow48 = 0.0, $fSlow49 = 0.0, $fSlow5 = 0.0, $fSlow50 = 0.0, $fSlow51 = 0.0, $fSlow52 = 0.0, $fSlow53 = 0.0, $fSlow54 = 0.0;
 var $fSlow55 = 0.0, $fSlow56 = 0.0, $fSlow57 = 0.0, $fSlow58 = 0.0, $fSlow59 = 0.0, $fSlow6 = 0.0, $fSlow60 = 0.0, $fSlow61 = 0.0, $fSlow62 = 0.0, $fSlow63 = 0.0, $fSlow64 = 0.0, $fSlow65 = 0.0, $fSlow66 = 0.0, $fSlow67 = 0.0, $fSlow68 = 0.0, $fSlow69 = 0.0, $fSlow7 = 0.0, $fSlow70 = 0.0, $fSlow71 = 0.0, $fSlow72 = 0.0;
 var $fSlow73 = 0.0, $fSlow74 = 0.0, $fSlow75 = 0.0, $fSlow76 = 0.0, $fSlow77 = 0.0, $fSlow78 = 0.0, $fSlow79 = 0.0, $fSlow8 = 0.0, $fSlow80 = 0.0, $fSlow81 = 0.0, $fSlow82 = 0.0, $fSlow83 = 0.0, $fSlow84 = 0.0, $fSlow85 = 0.0, $fSlow86 = 0.0, $fSlow87 = 0.0, $fSlow88 = 0.0, $fSlow89 = 0.0, $fSlow9 = 0.0, $fSlow90 = 0.0;
 var $fSlow91 = 0.0, $fSlow92 = 0.0, $fSlow93 = 0.0, $fSlow94 = 0.0, $fSlow95 = 0.0, $fSlow96 = 0.0, $fSlow97 = 0.0, $fSlow98 = 0.0, $fSlow99 = 0.0, $fTemp0 = 0.0, $fTemp10 = 0.0, $fTemp100 = 0.0, $fTemp101 = 0.0, $fTemp102 = 0.0, $fTemp103 = 0.0, $fTemp104 = 0.0, $fTemp105 = 0.0, $fTemp106 = 0.0, $fTemp107 = 0.0, $fTemp108 = 0.0;
 var $fTemp109 = 0.0, $fTemp11 = 0.0, $fTemp110 = 0.0, $fTemp111 = 0.0, $fTemp112 = 0.0, $fTemp113 = 0.0, $fTemp114 = 0.0, $fTemp115 = 0.0, $fTemp116 = 0.0, $fTemp117 = 0.0, $fTemp118 = 0.0, $fTemp119 = 0.0, $fTemp12 = 0.0, $fTemp120 = 0.0, $fTemp121 = 0.0, $fTemp122 = 0.0, $fTemp123 = 0.0, $fTemp124 = 0.0, $fTemp125 = 0.0, $fTemp126 = 0.0;
 var $fTemp127 = 0.0, $fTemp128 = 0.0, $fTemp129 = 0.0, $fTemp13 = 0.0, $fTemp130 = 0.0, $fTemp131 = 0.0, $fTemp132 = 0.0, $fTemp133 = 0.0, $fTemp134 = 0.0, $fTemp135 = 0.0, $fTemp136 = 0.0, $fTemp137 = 0.0, $fTemp138 = 0.0, $fTemp139 = 0.0, $fTemp14 = 0.0, $fTemp140 = 0.0, $fTemp141 = 0.0, $fTemp142 = 0.0, $fTemp143 = 0.0, $fTemp144 = 0.0;
 var $fTemp145 = 0.0, $fTemp146 = 0.0, $fTemp147 = 0.0, $fTemp148 = 0.0, $fTemp149 = 0.0, $fTemp15 = 0.0, $fTemp150 = 0.0, $fTemp151 = 0.0, $fTemp152 = 0.0, $fTemp153 = 0.0, $fTemp154 = 0.0, $fTemp155 = 0.0, $fTemp156 = 0.0, $fTemp157 = 0.0, $fTemp158 = 0.0, $fTemp159 = 0.0, $fTemp16 = 0.0, $fTemp160 = 0.0, $fTemp161 = 0.0, $fTemp162 = 0.0;
 var $fTemp163 = 0.0, $fTemp164 = 0.0, $fTemp165 = 0.0, $fTemp166 = 0.0, $fTemp167 = 0.0, $fTemp168 = 0.0, $fTemp169 = 0.0, $fTemp17 = 0.0, $fTemp170 = 0.0, $fTemp171 = 0.0, $fTemp172 = 0.0, $fTemp173 = 0.0, $fTemp174 = 0.0, $fTemp175 = 0.0, $fTemp176 = 0.0, $fTemp177 = 0.0, $fTemp178 = 0.0, $fTemp179 = 0.0, $fTemp18 = 0.0, $fTemp180 = 0.0;
 var $fTemp181 = 0.0, $fTemp182 = 0.0, $fTemp183 = 0.0, $fTemp184 = 0.0, $fTemp185 = 0.0, $fTemp186 = 0.0, $fTemp187 = 0.0, $fTemp188 = 0.0, $fTemp189 = 0.0, $fTemp19 = 0.0, $fTemp190 = 0.0, $fTemp191 = 0.0, $fTemp192 = 0.0, $fTemp193 = 0.0, $fTemp194 = 0.0, $fTemp195 = 0.0, $fTemp196 = 0.0, $fTemp197 = 0.0, $fTemp198 = 0.0, $fTemp199 = 0.0;
 var $fTemp2 = 0.0, $fTemp20 = 0.0, $fTemp200 = 0.0, $fTemp201 = 0.0, $fTemp202 = 0.0, $fTemp203 = 0.0, $fTemp204 = 0.0, $fTemp205 = 0.0, $fTemp206 = 0.0, $fTemp207 = 0.0, $fTemp208 = 0.0, $fTemp209 = 0.0, $fTemp21 = 0.0, $fTemp210 = 0.0, $fTemp211 = 0.0, $fTemp212 = 0.0, $fTemp213 = 0.0, $fTemp214 = 0.0, $fTemp215 = 0.0, $fTemp216 = 0.0;
 var $fTemp217 = 0.0, $fTemp218 = 0.0, $fTemp219 = 0.0, $fTemp22 = 0.0, $fTemp220 = 0.0, $fTemp221 = 0.0, $fTemp222 = 0.0, $fTemp223 = 0.0, $fTemp224 = 0.0, $fTemp225 = 0.0, $fTemp227 = 0.0, $fTemp228 = 0.0, $fTemp229 = 0.0, $fTemp23 = 0.0, $fTemp230 = 0.0, $fTemp231 = 0.0, $fTemp232 = 0.0, $fTemp233 = 0.0, $fTemp234 = 0.0, $fTemp235 = 0.0;
 var $fTemp236 = 0.0, $fTemp237 = 0.0, $fTemp238 = 0.0, $fTemp239 = 0.0, $fTemp24 = 0.0, $fTemp240 = 0.0, $fTemp241 = 0.0, $fTemp242 = 0.0, $fTemp243 = 0.0, $fTemp244 = 0.0, $fTemp245 = 0.0, $fTemp246 = 0.0, $fTemp247 = 0.0, $fTemp248 = 0.0, $fTemp249 = 0.0, $fTemp25 = 0.0, $fTemp250 = 0.0, $fTemp251 = 0.0, $fTemp252 = 0.0, $fTemp253 = 0.0;
 var $fTemp254 = 0.0, $fTemp255 = 0.0, $fTemp256 = 0.0, $fTemp257 = 0.0, $fTemp258 = 0.0, $fTemp259 = 0.0, $fTemp26 = 0.0, $fTemp260 = 0.0, $fTemp261 = 0.0, $fTemp262 = 0.0, $fTemp263 = 0.0, $fTemp27 = 0.0, $fTemp28 = 0.0, $fTemp29 = 0.0, $fTemp30 = 0.0, $fTemp31 = 0.0, $fTemp32 = 0.0, $fTemp33 = 0.0, $fTemp34 = 0.0, $fTemp35 = 0.0;
 var $fTemp36 = 0.0, $fTemp37 = 0.0, $fTemp38 = 0.0, $fTemp39 = 0.0, $fTemp4 = 0.0, $fTemp40 = 0.0, $fTemp41 = 0.0, $fTemp42 = 0.0, $fTemp43 = 0.0, $fTemp44 = 0.0, $fTemp45 = 0.0, $fTemp46 = 0.0, $fTemp47 = 0.0, $fTemp48 = 0.0, $fTemp49 = 0.0, $fTemp5 = 0.0, $fTemp50 = 0.0, $fTemp51 = 0.0, $fTemp52 = 0.0, $fTemp53 = 0.0;
 var $fTemp54 = 0.0, $fTemp55 = 0.0, $fTemp56 = 0.0, $fTemp57 = 0.0, $fTemp58 = 0.0, $fTemp59 = 0.0, $fTemp6 = 0.0, $fTemp60 = 0.0, $fTemp61 = 0.0, $fTemp62 = 0.0, $fTemp63 = 0.0, $fTemp64 = 0.0, $fTemp65 = 0.0, $fTemp66 = 0.0, $fTemp67 = 0.0, $fTemp68 = 0.0, $fTemp69 = 0.0, $fTemp7 = 0.0, $fTemp70 = 0.0, $fTemp71 = 0.0;
 var $fTemp72 = 0.0, $fTemp73 = 0.0, $fTemp74 = 0.0, $fTemp75 = 0.0, $fTemp76 = 0.0, $fTemp77 = 0.0, $fTemp78 = 0.0, $fTemp79 = 0.0, $fTemp8 = 0.0, $fTemp80 = 0.0, $fTemp81 = 0.0, $fTemp82 = 0.0, $fTemp83 = 0.0, $fTemp84 = 0.0, $fTemp85 = 0.0, $fTemp86 = 0.0, $fTemp87 = 0.0, $fTemp88 = 0.0, $fTemp89 = 0.0, $fTemp9 = 0.0;
 var $fTemp90 = 0.0, $fTemp91 = 0.0, $fTemp92 = 0.0, $fTemp93 = 0.0, $fTemp94 = 0.0, $fTemp95 = 0.0, $fTemp96 = 0.0, $fTemp97 = 0.0, $fTemp98 = 0.0, $fTemp99 = 0.0, $i = 0, $i1 = 0, $iSlow182 = 0, $iSlow184 = 0, $iSlow185 = 0, $iSlow186 = 0, $iSlow187 = 0, $iSlow188 = 0, $iSlow189 = 0, $iSlow190 = 0;
 var $iSlow191 = 0, $iSlow192 = 0, $iSlow193 = 0, $iSlow194 = 0, $iSlow195 = 0, $iSlow196 = 0, $iSlow197 = 0, $iSlow198 = 0, $iTemp1 = 0, $iTemp226 = 0, $iTemp3 = 0, $input0 = 0, $input1 = 0, $output0 = 0, $output1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1904|0;
 $0 = $this;
 $1 = $count;
 $2 = $input;
 $3 = $output;
 $4 = $0;
 $5 = (($4) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = 0.0500000007450580596924 * $6;
 $8 = (+Math_pow(10.0,(+$7)));
 $fSlow0 = $8;
 $9 = (($4) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = 0.100000001490116119385 * $10;
 $fSlow1 = $11;
 $12 = (($4) + 40|0);
 $13 = +HEAPF32[$12>>2];
 $fSlow2 = $13;
 $14 = (($4) + 52|0);
 $15 = +HEAPF32[$14>>2];
 $16 = 1.0 - $15;
 $fSlow3 = $16;
 $17 = (($4) + 56|0);
 $18 = +HEAPF32[$17>>2];
 $fSlow4 = $18;
 $19 = (($4) + 68|0);
 $20 = +HEAPF32[$19>>2];
 $21 = 0.5 * $20;
 $22 = 1.0 - $21;
 $fSlow5 = $22;
 $23 = $fSlow5;
 $24 = 0.25 * $23;
 $fSlow6 = $24;
 $25 = (($4) + 84|0);
 $26 = +HEAPF32[$25>>2];
 $fSlow7 = $26;
 $27 = (($4) + 88|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $fSlow7;
 $30 = $28 / $29;
 $fSlow8 = $30;
 $31 = (($4) + 80|0);
 $32 = +HEAPF32[$31>>2];
 $33 = $fSlow7;
 $34 = $fSlow8;
 $35 = (+Math_pow((+$34),0.0));
 $36 = $33 * $35;
 $37 = $32 * $36;
 $38 = (+Math_log((+$37)));
 $39 = 1.44269502162933349609 * $38;
 $40 = 0.5 + $39;
 $41 = (+Math_floor((+$40)));
 $42 = (+Math_pow(2.0,(+$41)));
 $fSlow9 = $42;
 $43 = $fSlow9;
 $44 = 6.90775537490844726563 * $43;
 $45 = 0.0 - $44;
 $fSlow10 = $45;
 $46 = (($4) + 92|0);
 $47 = +HEAPF32[$46>>2];
 $fSlow11 = $47;
 $48 = (($4) + 76|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $fSlow10;
 $51 = $fSlow11;
 $52 = $50 / $51;
 $53 = $49 * $52;
 $54 = (+Math_exp((+$53)));
 $fSlow12 = $54;
 $55 = (($4) + 96|0);
 $56 = +HEAPF32[$55>>2];
 $57 = (($4) + 100|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $56 * $58;
 $60 = (+Math_tan((+$59)));
 $fSlow13 = $60;
 $61 = $fSlow13;
 $62 = 1.0 / $61;
 $fSlow14 = $62;
 $63 = $fSlow14;
 $64 = $63 + 1.0;
 $65 = $fSlow13;
 $66 = $64 / $65;
 $67 = 1.0 + $66;
 $fSlow15 = $67;
 $68 = $fSlow15;
 $69 = 1.0 / $68;
 $fSlow16 = $69;
 $70 = $fSlow13;
 $71 = (+__Z10faustpowerILi2EEff($70));
 $72 = 1.0 / $71;
 $fSlow17 = $72;
 $73 = $fSlow14;
 $74 = 1.0 + $73;
 $fSlow18 = $74;
 $75 = $fSlow14;
 $76 = 1.0 - $75;
 $77 = $fSlow18;
 $78 = $76 / $77;
 $79 = 0.0 - $78;
 $fSlow19 = $79;
 $80 = $fSlow18;
 $81 = 1.0 / $80;
 $fSlow20 = $81;
 $82 = $fSlow14;
 $83 = 0.0 - $82;
 $fSlow21 = $83;
 $84 = $fSlow14;
 $85 = $84 - 1.0;
 $86 = $fSlow13;
 $87 = $85 / $86;
 $88 = 1.0 + $87;
 $fSlow22 = $88;
 $89 = $fSlow17;
 $90 = 1.0 - $89;
 $91 = 2.0 * $90;
 $fSlow23 = $91;
 $92 = $fSlow17;
 $93 = 0.0 - $92;
 $94 = 2.0 * $93;
 $fSlow24 = $94;
 $95 = (($4) + 96|0);
 $96 = +HEAPF32[$95>>2];
 $97 = (($4) + 124|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $96 * $98;
 $100 = (+Math_tan((+$99)));
 $fSlow25 = $100;
 $101 = $fSlow25;
 $102 = 1.0 / $101;
 $fSlow26 = $102;
 $103 = $fSlow26;
 $104 = 1.0 + $103;
 $105 = $fSlow25;
 $106 = $104 / $105;
 $107 = 1.0 + $106;
 $108 = 1.0 / $107;
 $fSlow27 = $108;
 $109 = $fSlow25;
 $110 = (+__Z10faustpowerILi2EEff($109));
 $111 = 1.0 / $110;
 $fSlow28 = $111;
 $112 = $fSlow28;
 $113 = 1.0 - $112;
 $114 = 2.0 * $113;
 $fSlow29 = $114;
 $115 = $fSlow26;
 $116 = $115 - 1.0;
 $117 = $fSlow25;
 $118 = $116 / $117;
 $119 = 1.0 + $118;
 $fSlow30 = $119;
 $120 = (($4) + 96|0);
 $121 = +HEAPF32[$120>>2];
 $122 = (($4) + 140|0);
 $123 = +HEAPF32[$122>>2];
 $124 = $121 * $123;
 $125 = (+Math_tan((+$124)));
 $fSlow31 = $125;
 $126 = $fSlow31;
 $127 = 1.0 / $126;
 $fSlow32 = $127;
 $128 = $fSlow32;
 $129 = 1.0 + $128;
 $130 = $fSlow31;
 $131 = $129 / $130;
 $132 = 1.0 + $131;
 $133 = 1.0 / $132;
 $fSlow33 = $133;
 $134 = $fSlow32;
 $135 = $134 - 1.0;
 $136 = $fSlow31;
 $137 = $135 / $136;
 $138 = 1.0 + $137;
 $fSlow34 = $138;
 $139 = $fSlow31;
 $140 = (+__Z10faustpowerILi2EEff($139));
 $141 = 1.0 / $140;
 $fSlow35 = $141;
 $142 = $fSlow35;
 $143 = 1.0 - $142;
 $144 = 2.0 * $143;
 $fSlow36 = $144;
 $145 = (($4) + 96|0);
 $146 = +HEAPF32[$145>>2];
 $147 = (($4) + 156|0);
 $148 = +HEAPF32[$147>>2];
 $149 = $146 * $148;
 $150 = (+Math_tan((+$149)));
 $fSlow37 = $150;
 $151 = $fSlow37;
 $152 = 1.0 / $151;
 $fSlow38 = $152;
 $153 = $fSlow38;
 $154 = 1.0 + $153;
 $155 = $fSlow37;
 $156 = $154 / $155;
 $157 = 1.0 + $156;
 $158 = 1.0 / $157;
 $fSlow39 = $158;
 $159 = $fSlow37;
 $160 = (+__Z10faustpowerILi2EEff($159));
 $161 = 1.0 / $160;
 $fSlow40 = $161;
 $162 = $fSlow40;
 $163 = 1.0 - $162;
 $164 = 2.0 * $163;
 $fSlow41 = $164;
 $165 = $fSlow38;
 $166 = $165 - 1.0;
 $167 = $fSlow37;
 $168 = $166 / $167;
 $169 = 1.0 + $168;
 $fSlow42 = $169;
 $170 = (($4) + 172|0);
 $171 = +HEAPF32[$170>>2];
 $fSlow43 = $171;
 $172 = (($4) + 76|0);
 $173 = +HEAPF32[$172>>2];
 $174 = $fSlow10;
 $175 = $fSlow43;
 $176 = $174 / $175;
 $177 = $173 * $176;
 $178 = (+Math_exp((+$177)));
 $fSlow44 = $178;
 $179 = $fSlow26;
 $180 = 1.0 + $179;
 $181 = $fSlow25;
 $182 = $180 / $181;
 $183 = 1.0 + $182;
 $fSlow45 = $183;
 $184 = $fSlow45;
 $185 = 1.0 / $184;
 $fSlow46 = $185;
 $186 = $fSlow26;
 $187 = 1.0 + $186;
 $fSlow47 = $187;
 $188 = $fSlow26;
 $189 = 1.0 - $188;
 $190 = $fSlow47;
 $191 = $189 / $190;
 $192 = 0.0 - $191;
 $fSlow48 = $192;
 $193 = $fSlow47;
 $194 = 1.0 / $193;
 $fSlow49 = $194;
 $195 = $fSlow26;
 $196 = 0.0 - $195;
 $fSlow50 = $196;
 $197 = $fSlow15;
 $198 = $fSlow25;
 $199 = $197 * $198;
 $200 = 1.0 / $199;
 $fSlow51 = $200;
 $201 = $fSlow26;
 $202 = $201 - 1.0;
 $203 = $fSlow25;
 $204 = $202 / $203;
 $205 = 1.0 + $204;
 $fSlow52 = $205;
 $206 = $fSlow28;
 $207 = 0.0 - $206;
 $208 = 2.0 * $207;
 $fSlow53 = $208;
 $209 = (($4) + 248|0);
 $210 = +HEAPF32[$209>>2];
 $fSlow54 = $210;
 $211 = (($4) + 76|0);
 $212 = +HEAPF32[$211>>2];
 $213 = $fSlow10;
 $214 = $fSlow54;
 $215 = $213 / $214;
 $216 = $212 * $215;
 $217 = (+Math_exp((+$216)));
 $fSlow55 = $217;
 $218 = $fSlow32;
 $219 = 1.0 + $218;
 $220 = $fSlow31;
 $221 = $219 / $220;
 $222 = 1.0 + $221;
 $fSlow56 = $222;
 $223 = $fSlow56;
 $224 = 1.0 / $223;
 $fSlow57 = $224;
 $225 = $fSlow32;
 $226 = 1.0 + $225;
 $fSlow58 = $226;
 $227 = $fSlow32;
 $228 = 1.0 - $227;
 $229 = $fSlow58;
 $230 = $228 / $229;
 $231 = 0.0 - $230;
 $fSlow59 = $231;
 $232 = $fSlow58;
 $233 = 1.0 / $232;
 $fSlow60 = $233;
 $234 = $fSlow32;
 $235 = 0.0 - $234;
 $fSlow61 = $235;
 $236 = $fSlow45;
 $237 = $fSlow31;
 $238 = $236 * $237;
 $239 = 1.0 / $238;
 $fSlow62 = $239;
 $240 = $fSlow32;
 $241 = $240 - 1.0;
 $242 = $fSlow31;
 $243 = $241 / $242;
 $244 = 1.0 + $243;
 $fSlow63 = $244;
 $245 = $fSlow35;
 $246 = 0.0 - $245;
 $247 = 2.0 * $246;
 $fSlow64 = $247;
 $248 = $fSlow38;
 $249 = 1.0 + $248;
 $250 = $fSlow37;
 $251 = $249 / $250;
 $252 = 1.0 + $251;
 $253 = 1.0 / $252;
 $fSlow65 = $253;
 $254 = (($4) + 312|0);
 $255 = +HEAPF32[$254>>2];
 $fSlow66 = $255;
 $256 = (($4) + 76|0);
 $257 = +HEAPF32[$256>>2];
 $258 = $fSlow10;
 $259 = $fSlow66;
 $260 = $258 / $259;
 $261 = $257 * $260;
 $262 = (+Math_exp((+$261)));
 $fSlow67 = $262;
 $263 = $fSlow38;
 $264 = 1.0 + $263;
 $fSlow68 = $264;
 $265 = $fSlow38;
 $266 = 1.0 - $265;
 $267 = $fSlow68;
 $268 = $266 / $267;
 $269 = 0.0 - $268;
 $fSlow69 = $269;
 $270 = $fSlow68;
 $271 = 1.0 / $270;
 $fSlow70 = $271;
 $272 = $fSlow38;
 $273 = 0.0 - $272;
 $fSlow71 = $273;
 $274 = $fSlow56;
 $275 = $fSlow37;
 $276 = $274 * $275;
 $277 = 1.0 / $276;
 $fSlow72 = $277;
 $278 = $fSlow38;
 $279 = $278 - 1.0;
 $280 = $fSlow37;
 $281 = $279 / $280;
 $282 = 1.0 + $281;
 $fSlow73 = $282;
 $283 = $fSlow40;
 $284 = 0.0 - $283;
 $285 = 2.0 * $284;
 $fSlow74 = $285;
 $286 = (($4) + 364|0);
 $287 = +HEAPF32[$286>>2];
 $fSlow75 = $287;
 $288 = (($4) + 76|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $fSlow10;
 $291 = $fSlow75;
 $292 = $290 / $291;
 $293 = $289 * $292;
 $294 = (+Math_exp((+$293)));
 $fSlow76 = $294;
 $295 = (($4) + 80|0);
 $296 = +HEAPF32[$295>>2];
 $297 = $fSlow7;
 $298 = $fSlow8;
 $299 = (+Math_pow((+$298),0.533333361148834228516));
 $300 = $297 * $299;
 $301 = $296 * $300;
 $302 = (+Math_log((+$301)));
 $303 = 0.318928986787796020508 * $302;
 $304 = 0.5 + $303;
 $305 = (+Math_floor((+$304)));
 $306 = (+Math_pow(23.0,(+$305)));
 $fSlow77 = $306;
 $307 = $fSlow77;
 $308 = 6.90775537490844726563 * $307;
 $309 = 0.0 - $308;
 $fSlow78 = $309;
 $310 = (($4) + 76|0);
 $311 = +HEAPF32[$310>>2];
 $312 = $fSlow78;
 $313 = $fSlow11;
 $314 = $312 / $313;
 $315 = $311 * $314;
 $316 = (+Math_exp((+$315)));
 $fSlow79 = $316;
 $317 = (($4) + 76|0);
 $318 = +HEAPF32[$317>>2];
 $319 = $fSlow78;
 $320 = $fSlow43;
 $321 = $319 / $320;
 $322 = $318 * $321;
 $323 = (+Math_exp((+$322)));
 $fSlow80 = $323;
 $324 = (($4) + 76|0);
 $325 = +HEAPF32[$324>>2];
 $326 = $fSlow78;
 $327 = $fSlow54;
 $328 = $326 / $327;
 $329 = $325 * $328;
 $330 = (+Math_exp((+$329)));
 $fSlow81 = $330;
 $331 = (($4) + 76|0);
 $332 = +HEAPF32[$331>>2];
 $333 = $fSlow78;
 $334 = $fSlow66;
 $335 = $333 / $334;
 $336 = $332 * $335;
 $337 = (+Math_exp((+$336)));
 $fSlow82 = $337;
 $338 = (($4) + 76|0);
 $339 = +HEAPF32[$338>>2];
 $340 = $fSlow78;
 $341 = $fSlow75;
 $342 = $340 / $341;
 $343 = $339 * $342;
 $344 = (+Math_exp((+$343)));
 $fSlow83 = $344;
 $345 = (($4) + 80|0);
 $346 = +HEAPF32[$345>>2];
 $347 = $fSlow7;
 $348 = $fSlow8;
 $349 = (+Math_pow((+$348),0.266666680574417114258));
 $350 = $347 * $349;
 $351 = $346 * $350;
 $352 = (+Math_log((+$351)));
 $353 = 0.417032390832901000977 * $352;
 $354 = 0.5 + $353;
 $355 = (+Math_floor((+$354)));
 $356 = (+Math_pow(11.0,(+$355)));
 $fSlow84 = $356;
 $357 = $fSlow84;
 $358 = 6.90775537490844726563 * $357;
 $359 = 0.0 - $358;
 $fSlow85 = $359;
 $360 = (($4) + 76|0);
 $361 = +HEAPF32[$360>>2];
 $362 = $fSlow85;
 $363 = $fSlow11;
 $364 = $362 / $363;
 $365 = $361 * $364;
 $366 = (+Math_exp((+$365)));
 $fSlow86 = $366;
 $367 = (($4) + 76|0);
 $368 = +HEAPF32[$367>>2];
 $369 = $fSlow85;
 $370 = $fSlow43;
 $371 = $369 / $370;
 $372 = $368 * $371;
 $373 = (+Math_exp((+$372)));
 $fSlow87 = $373;
 $374 = (($4) + 76|0);
 $375 = +HEAPF32[$374>>2];
 $376 = $fSlow85;
 $377 = $fSlow54;
 $378 = $376 / $377;
 $379 = $375 * $378;
 $380 = (+Math_exp((+$379)));
 $fSlow88 = $380;
 $381 = (($4) + 76|0);
 $382 = +HEAPF32[$381>>2];
 $383 = $fSlow85;
 $384 = $fSlow66;
 $385 = $383 / $384;
 $386 = $382 * $385;
 $387 = (+Math_exp((+$386)));
 $fSlow89 = $387;
 $388 = (($4) + 76|0);
 $389 = +HEAPF32[$388>>2];
 $390 = $fSlow85;
 $391 = $fSlow75;
 $392 = $390 / $391;
 $393 = $389 * $392;
 $394 = (+Math_exp((+$393)));
 $fSlow90 = $394;
 $395 = (($4) + 80|0);
 $396 = +HEAPF32[$395>>2];
 $397 = $fSlow7;
 $398 = $fSlow8;
 $399 = (+Math_pow((+$398),0.800000011920928955078));
 $400 = $397 * $399;
 $401 = $396 * $400;
 $402 = (+Math_log((+$401)));
 $403 = 0.269282519817352294922 * $402;
 $404 = 0.5 + $403;
 $405 = (+Math_floor((+$404)));
 $406 = (+Math_pow(41.0,(+$405)));
 $fSlow91 = $406;
 $407 = $fSlow91;
 $408 = 6.90775537490844726563 * $407;
 $409 = 0.0 - $408;
 $fSlow92 = $409;
 $410 = (($4) + 76|0);
 $411 = +HEAPF32[$410>>2];
 $412 = $fSlow92;
 $413 = $fSlow11;
 $414 = $412 / $413;
 $415 = $411 * $414;
 $416 = (+Math_exp((+$415)));
 $fSlow93 = $416;
 $417 = (($4) + 76|0);
 $418 = +HEAPF32[$417>>2];
 $419 = $fSlow92;
 $420 = $fSlow43;
 $421 = $419 / $420;
 $422 = $418 * $421;
 $423 = (+Math_exp((+$422)));
 $fSlow94 = $423;
 $424 = (($4) + 76|0);
 $425 = +HEAPF32[$424>>2];
 $426 = $fSlow92;
 $427 = $fSlow54;
 $428 = $426 / $427;
 $429 = $425 * $428;
 $430 = (+Math_exp((+$429)));
 $fSlow95 = $430;
 $431 = (($4) + 76|0);
 $432 = +HEAPF32[$431>>2];
 $433 = $fSlow92;
 $434 = $fSlow66;
 $435 = $433 / $434;
 $436 = $432 * $435;
 $437 = (+Math_exp((+$436)));
 $fSlow96 = $437;
 $438 = (($4) + 76|0);
 $439 = +HEAPF32[$438>>2];
 $440 = $fSlow92;
 $441 = $fSlow75;
 $442 = $440 / $441;
 $443 = $439 * $442;
 $444 = (+Math_exp((+$443)));
 $fSlow97 = $444;
 $445 = (($4) + 80|0);
 $446 = +HEAPF32[$445>>2];
 $447 = $fSlow7;
 $448 = $fSlow8;
 $449 = (+Math_pow((+$448),0.133333340287208557129));
 $450 = $447 * $449;
 $451 = $446 * $450;
 $452 = (+Math_log((+$451)));
 $453 = 0.621334910392761230469 * $452;
 $454 = 0.5 + $453;
 $455 = (+Math_floor((+$454)));
 $456 = (+Math_pow(5.0,(+$455)));
 $fSlow98 = $456;
 $457 = $fSlow98;
 $458 = 6.90775537490844726563 * $457;
 $459 = 0.0 - $458;
 $fSlow99 = $459;
 $460 = (($4) + 76|0);
 $461 = +HEAPF32[$460>>2];
 $462 = $fSlow99;
 $463 = $fSlow11;
 $464 = $462 / $463;
 $465 = $461 * $464;
 $466 = (+Math_exp((+$465)));
 $fSlow100 = $466;
 $467 = (($4) + 76|0);
 $468 = +HEAPF32[$467>>2];
 $469 = $fSlow99;
 $470 = $fSlow43;
 $471 = $469 / $470;
 $472 = $468 * $471;
 $473 = (+Math_exp((+$472)));
 $fSlow101 = $473;
 $474 = (($4) + 76|0);
 $475 = +HEAPF32[$474>>2];
 $476 = $fSlow99;
 $477 = $fSlow54;
 $478 = $476 / $477;
 $479 = $475 * $478;
 $480 = (+Math_exp((+$479)));
 $fSlow102 = $480;
 $481 = (($4) + 76|0);
 $482 = +HEAPF32[$481>>2];
 $483 = $fSlow99;
 $484 = $fSlow66;
 $485 = $483 / $484;
 $486 = $482 * $485;
 $487 = (+Math_exp((+$486)));
 $fSlow103 = $487;
 $488 = (($4) + 76|0);
 $489 = +HEAPF32[$488>>2];
 $490 = $fSlow99;
 $491 = $fSlow75;
 $492 = $490 / $491;
 $493 = $489 * $492;
 $494 = (+Math_exp((+$493)));
 $fSlow104 = $494;
 $495 = (($4) + 80|0);
 $496 = +HEAPF32[$495>>2];
 $497 = $fSlow7;
 $498 = $fSlow8;
 $499 = (+Math_pow((+$498),0.666666686534881591796));
 $500 = $497 * $499;
 $501 = $496 * $500;
 $502 = (+Math_log((+$501)));
 $503 = 0.291206687688827514648 * $502;
 $504 = 0.5 + $503;
 $505 = (+Math_floor((+$504)));
 $506 = (+Math_pow(31.0,(+$505)));
 $fSlow105 = $506;
 $507 = $fSlow105;
 $508 = 6.90775537490844726563 * $507;
 $509 = 0.0 - $508;
 $fSlow106 = $509;
 $510 = (($4) + 76|0);
 $511 = +HEAPF32[$510>>2];
 $512 = $fSlow106;
 $513 = $fSlow11;
 $514 = $512 / $513;
 $515 = $511 * $514;
 $516 = (+Math_exp((+$515)));
 $fSlow107 = $516;
 $517 = (($4) + 76|0);
 $518 = +HEAPF32[$517>>2];
 $519 = $fSlow106;
 $520 = $fSlow43;
 $521 = $519 / $520;
 $522 = $518 * $521;
 $523 = (+Math_exp((+$522)));
 $fSlow108 = $523;
 $524 = (($4) + 76|0);
 $525 = +HEAPF32[$524>>2];
 $526 = $fSlow106;
 $527 = $fSlow54;
 $528 = $526 / $527;
 $529 = $525 * $528;
 $530 = (+Math_exp((+$529)));
 $fSlow109 = $530;
 $531 = (($4) + 76|0);
 $532 = +HEAPF32[$531>>2];
 $533 = $fSlow106;
 $534 = $fSlow66;
 $535 = $533 / $534;
 $536 = $532 * $535;
 $537 = (+Math_exp((+$536)));
 $fSlow110 = $537;
 $538 = (($4) + 76|0);
 $539 = +HEAPF32[$538>>2];
 $540 = $fSlow106;
 $541 = $fSlow75;
 $542 = $540 / $541;
 $543 = $539 * $542;
 $544 = (+Math_exp((+$543)));
 $fSlow111 = $544;
 $545 = (($4) + 80|0);
 $546 = +HEAPF32[$545>>2];
 $547 = $fSlow7;
 $548 = $fSlow8;
 $549 = (+Math_pow((+$548),0.400000005960464477539));
 $550 = $547 * $549;
 $551 = $546 * $550;
 $552 = (+Math_log((+$551)));
 $553 = 0.352956116199493408203 * $552;
 $554 = 0.5 + $553;
 $555 = (+Math_floor((+$554)));
 $556 = (+Math_pow(17.0,(+$555)));
 $fSlow112 = $556;
 $557 = $fSlow112;
 $558 = 6.90775537490844726563 * $557;
 $559 = 0.0 - $558;
 $fSlow113 = $559;
 $560 = (($4) + 76|0);
 $561 = +HEAPF32[$560>>2];
 $562 = $fSlow113;
 $563 = $fSlow11;
 $564 = $562 / $563;
 $565 = $561 * $564;
 $566 = (+Math_exp((+$565)));
 $fSlow114 = $566;
 $567 = (($4) + 76|0);
 $568 = +HEAPF32[$567>>2];
 $569 = $fSlow113;
 $570 = $fSlow43;
 $571 = $569 / $570;
 $572 = $568 * $571;
 $573 = (+Math_exp((+$572)));
 $fSlow115 = $573;
 $574 = (($4) + 76|0);
 $575 = +HEAPF32[$574>>2];
 $576 = $fSlow113;
 $577 = $fSlow54;
 $578 = $576 / $577;
 $579 = $575 * $578;
 $580 = (+Math_exp((+$579)));
 $fSlow116 = $580;
 $581 = (($4) + 76|0);
 $582 = +HEAPF32[$581>>2];
 $583 = $fSlow113;
 $584 = $fSlow66;
 $585 = $583 / $584;
 $586 = $582 * $585;
 $587 = (+Math_exp((+$586)));
 $fSlow117 = $587;
 $588 = (($4) + 76|0);
 $589 = +HEAPF32[$588>>2];
 $590 = $fSlow113;
 $591 = $fSlow75;
 $592 = $590 / $591;
 $593 = $589 * $592;
 $594 = (+Math_exp((+$593)));
 $fSlow118 = $594;
 $595 = (($4) + 80|0);
 $596 = +HEAPF32[$595>>2];
 $597 = $fSlow7;
 $598 = $fSlow8;
 $599 = (+Math_pow((+$598),0.933333337306976318359));
 $600 = $597 * $599;
 $601 = $596 * $600;
 $602 = (+Math_log((+$601)));
 $603 = 0.259730309247970581055 * $602;
 $604 = 0.5 + $603;
 $605 = (+Math_floor((+$604)));
 $606 = (+Math_pow(47.0,(+$605)));
 $fSlow119 = $606;
 $607 = $fSlow119;
 $608 = 6.90775537490844726563 * $607;
 $609 = 0.0 - $608;
 $fSlow120 = $609;
 $610 = (($4) + 76|0);
 $611 = +HEAPF32[$610>>2];
 $612 = $fSlow120;
 $613 = $fSlow11;
 $614 = $612 / $613;
 $615 = $611 * $614;
 $616 = (+Math_exp((+$615)));
 $fSlow121 = $616;
 $617 = (($4) + 76|0);
 $618 = +HEAPF32[$617>>2];
 $619 = $fSlow120;
 $620 = $fSlow43;
 $621 = $619 / $620;
 $622 = $618 * $621;
 $623 = (+Math_exp((+$622)));
 $fSlow122 = $623;
 $624 = (($4) + 76|0);
 $625 = +HEAPF32[$624>>2];
 $626 = $fSlow120;
 $627 = $fSlow54;
 $628 = $626 / $627;
 $629 = $625 * $628;
 $630 = (+Math_exp((+$629)));
 $fSlow123 = $630;
 $631 = (($4) + 76|0);
 $632 = +HEAPF32[$631>>2];
 $633 = $fSlow120;
 $634 = $fSlow66;
 $635 = $633 / $634;
 $636 = $632 * $635;
 $637 = (+Math_exp((+$636)));
 $fSlow124 = $637;
 $638 = (($4) + 76|0);
 $639 = +HEAPF32[$638>>2];
 $640 = $fSlow120;
 $641 = $fSlow75;
 $642 = $640 / $641;
 $643 = $639 * $642;
 $644 = (+Math_exp((+$643)));
 $fSlow125 = $644;
 $645 = (($4) + 80|0);
 $646 = +HEAPF32[$645>>2];
 $647 = $fSlow7;
 $648 = $fSlow8;
 $649 = (+Math_pow((+$648),0.0666666701436042785645));
 $650 = $647 * $649;
 $651 = $646 * $650;
 $652 = (+Math_log((+$651)));
 $653 = 0.91023921966552734375 * $652;
 $654 = 0.5 + $653;
 $655 = (+Math_floor((+$654)));
 $656 = (+Math_pow(3.0,(+$655)));
 $fSlow126 = $656;
 $657 = $fSlow126;
 $658 = 6.90775537490844726563 * $657;
 $659 = 0.0 - $658;
 $fSlow127 = $659;
 $660 = (($4) + 76|0);
 $661 = +HEAPF32[$660>>2];
 $662 = $fSlow127;
 $663 = $fSlow11;
 $664 = $662 / $663;
 $665 = $661 * $664;
 $666 = (+Math_exp((+$665)));
 $fSlow128 = $666;
 $667 = (($4) + 76|0);
 $668 = +HEAPF32[$667>>2];
 $669 = $fSlow127;
 $670 = $fSlow43;
 $671 = $669 / $670;
 $672 = $668 * $671;
 $673 = (+Math_exp((+$672)));
 $fSlow129 = $673;
 $674 = (($4) + 76|0);
 $675 = +HEAPF32[$674>>2];
 $676 = $fSlow127;
 $677 = $fSlow54;
 $678 = $676 / $677;
 $679 = $675 * $678;
 $680 = (+Math_exp((+$679)));
 $fSlow130 = $680;
 $681 = (($4) + 76|0);
 $682 = +HEAPF32[$681>>2];
 $683 = $fSlow127;
 $684 = $fSlow66;
 $685 = $683 / $684;
 $686 = $682 * $685;
 $687 = (+Math_exp((+$686)));
 $fSlow131 = $687;
 $688 = (($4) + 76|0);
 $689 = +HEAPF32[$688>>2];
 $690 = $fSlow127;
 $691 = $fSlow75;
 $692 = $690 / $691;
 $693 = $689 * $692;
 $694 = (+Math_exp((+$693)));
 $fSlow132 = $694;
 $695 = (($4) + 80|0);
 $696 = +HEAPF32[$695>>2];
 $697 = $fSlow7;
 $698 = $fSlow8;
 $699 = (+Math_pow((+$698),0.600000023841857910156));
 $700 = $697 * $699;
 $701 = $696 * $700;
 $702 = (+Math_log((+$701)));
 $703 = 0.296974211931228637695 * $702;
 $704 = 0.5 + $703;
 $705 = (+Math_floor((+$704)));
 $706 = (+Math_pow(29.0,(+$705)));
 $fSlow133 = $706;
 $707 = $fSlow133;
 $708 = 6.90775537490844726563 * $707;
 $709 = 0.0 - $708;
 $fSlow134 = $709;
 $710 = (($4) + 76|0);
 $711 = +HEAPF32[$710>>2];
 $712 = $fSlow134;
 $713 = $fSlow11;
 $714 = $712 / $713;
 $715 = $711 * $714;
 $716 = (+Math_exp((+$715)));
 $fSlow135 = $716;
 $717 = (($4) + 76|0);
 $718 = +HEAPF32[$717>>2];
 $719 = $fSlow134;
 $720 = $fSlow43;
 $721 = $719 / $720;
 $722 = $718 * $721;
 $723 = (+Math_exp((+$722)));
 $fSlow136 = $723;
 $724 = (($4) + 76|0);
 $725 = +HEAPF32[$724>>2];
 $726 = $fSlow134;
 $727 = $fSlow54;
 $728 = $726 / $727;
 $729 = $725 * $728;
 $730 = (+Math_exp((+$729)));
 $fSlow137 = $730;
 $731 = (($4) + 76|0);
 $732 = +HEAPF32[$731>>2];
 $733 = $fSlow134;
 $734 = $fSlow66;
 $735 = $733 / $734;
 $736 = $732 * $735;
 $737 = (+Math_exp((+$736)));
 $fSlow138 = $737;
 $738 = (($4) + 76|0);
 $739 = +HEAPF32[$738>>2];
 $740 = $fSlow134;
 $741 = $fSlow75;
 $742 = $740 / $741;
 $743 = $739 * $742;
 $744 = (+Math_exp((+$743)));
 $fSlow139 = $744;
 $745 = (($4) + 80|0);
 $746 = +HEAPF32[$745>>2];
 $747 = $fSlow7;
 $748 = $fSlow8;
 $749 = (+Math_pow((+$748),0.333333343267440795898));
 $750 = $747 * $749;
 $751 = $746 * $750;
 $752 = (+Math_log((+$751)));
 $753 = 0.389871239662170410156 * $752;
 $754 = 0.5 + $753;
 $755 = (+Math_floor((+$754)));
 $756 = (+Math_pow(13.0,(+$755)));
 $fSlow140 = $756;
 $757 = $fSlow140;
 $758 = 6.90775537490844726563 * $757;
 $759 = 0.0 - $758;
 $fSlow141 = $759;
 $760 = (($4) + 76|0);
 $761 = +HEAPF32[$760>>2];
 $762 = $fSlow141;
 $763 = $fSlow11;
 $764 = $762 / $763;
 $765 = $761 * $764;
 $766 = (+Math_exp((+$765)));
 $fSlow142 = $766;
 $767 = (($4) + 76|0);
 $768 = +HEAPF32[$767>>2];
 $769 = $fSlow141;
 $770 = $fSlow43;
 $771 = $769 / $770;
 $772 = $768 * $771;
 $773 = (+Math_exp((+$772)));
 $fSlow143 = $773;
 $774 = (($4) + 76|0);
 $775 = +HEAPF32[$774>>2];
 $776 = $fSlow141;
 $777 = $fSlow54;
 $778 = $776 / $777;
 $779 = $775 * $778;
 $780 = (+Math_exp((+$779)));
 $fSlow144 = $780;
 $781 = (($4) + 76|0);
 $782 = +HEAPF32[$781>>2];
 $783 = $fSlow141;
 $784 = $fSlow66;
 $785 = $783 / $784;
 $786 = $782 * $785;
 $787 = (+Math_exp((+$786)));
 $fSlow145 = $787;
 $788 = (($4) + 76|0);
 $789 = +HEAPF32[$788>>2];
 $790 = $fSlow141;
 $791 = $fSlow75;
 $792 = $790 / $791;
 $793 = $789 * $792;
 $794 = (+Math_exp((+$793)));
 $fSlow146 = $794;
 $795 = (($4) + 80|0);
 $796 = +HEAPF32[$795>>2];
 $797 = $fSlow7;
 $798 = $fSlow8;
 $799 = (+Math_pow((+$798),0.866666674613952636718));
 $800 = $797 * $799;
 $801 = $796 * $800;
 $802 = (+Math_log((+$801)));
 $803 = 0.265872597694396972656 * $802;
 $804 = 0.5 + $803;
 $805 = (+Math_floor((+$804)));
 $806 = (+Math_pow(43.0,(+$805)));
 $fSlow147 = $806;
 $807 = $fSlow147;
 $808 = 6.90775537490844726563 * $807;
 $809 = 0.0 - $808;
 $fSlow148 = $809;
 $810 = (($4) + 76|0);
 $811 = +HEAPF32[$810>>2];
 $812 = $fSlow148;
 $813 = $fSlow11;
 $814 = $812 / $813;
 $815 = $811 * $814;
 $816 = (+Math_exp((+$815)));
 $fSlow149 = $816;
 $817 = (($4) + 76|0);
 $818 = +HEAPF32[$817>>2];
 $819 = $fSlow148;
 $820 = $fSlow43;
 $821 = $819 / $820;
 $822 = $818 * $821;
 $823 = (+Math_exp((+$822)));
 $fSlow150 = $823;
 $824 = (($4) + 76|0);
 $825 = +HEAPF32[$824>>2];
 $826 = $fSlow148;
 $827 = $fSlow54;
 $828 = $826 / $827;
 $829 = $825 * $828;
 $830 = (+Math_exp((+$829)));
 $fSlow151 = $830;
 $831 = (($4) + 76|0);
 $832 = +HEAPF32[$831>>2];
 $833 = $fSlow148;
 $834 = $fSlow66;
 $835 = $833 / $834;
 $836 = $832 * $835;
 $837 = (+Math_exp((+$836)));
 $fSlow152 = $837;
 $838 = (($4) + 76|0);
 $839 = +HEAPF32[$838>>2];
 $840 = $fSlow148;
 $841 = $fSlow75;
 $842 = $840 / $841;
 $843 = $839 * $842;
 $844 = (+Math_exp((+$843)));
 $fSlow153 = $844;
 $845 = (($4) + 80|0);
 $846 = +HEAPF32[$845>>2];
 $847 = $fSlow7;
 $848 = $fSlow8;
 $849 = (+Math_pow((+$848),0.20000000298023223877));
 $850 = $847 * $849;
 $851 = $846 * $850;
 $852 = (+Math_log((+$851)));
 $853 = 0.513898313045501708984 * $852;
 $854 = 0.5 + $853;
 $855 = (+Math_floor((+$854)));
 $856 = (+Math_pow(7.0,(+$855)));
 $fSlow154 = $856;
 $857 = $fSlow154;
 $858 = 6.90775537490844726563 * $857;
 $859 = 0.0 - $858;
 $fSlow155 = $859;
 $860 = (($4) + 76|0);
 $861 = +HEAPF32[$860>>2];
 $862 = $fSlow155;
 $863 = $fSlow11;
 $864 = $862 / $863;
 $865 = $861 * $864;
 $866 = (+Math_exp((+$865)));
 $fSlow156 = $866;
 $867 = (($4) + 76|0);
 $868 = +HEAPF32[$867>>2];
 $869 = $fSlow155;
 $870 = $fSlow43;
 $871 = $869 / $870;
 $872 = $868 * $871;
 $873 = (+Math_exp((+$872)));
 $fSlow157 = $873;
 $874 = (($4) + 76|0);
 $875 = +HEAPF32[$874>>2];
 $876 = $fSlow155;
 $877 = $fSlow54;
 $878 = $876 / $877;
 $879 = $875 * $878;
 $880 = (+Math_exp((+$879)));
 $fSlow158 = $880;
 $881 = (($4) + 76|0);
 $882 = +HEAPF32[$881>>2];
 $883 = $fSlow155;
 $884 = $fSlow66;
 $885 = $883 / $884;
 $886 = $882 * $885;
 $887 = (+Math_exp((+$886)));
 $fSlow159 = $887;
 $888 = (($4) + 76|0);
 $889 = +HEAPF32[$888>>2];
 $890 = $fSlow155;
 $891 = $fSlow75;
 $892 = $890 / $891;
 $893 = $889 * $892;
 $894 = (+Math_exp((+$893)));
 $fSlow160 = $894;
 $895 = (($4) + 80|0);
 $896 = +HEAPF32[$895>>2];
 $897 = $fSlow7;
 $898 = $fSlow8;
 $899 = (+Math_pow((+$898),0.733333349227905273438));
 $900 = $897 * $899;
 $901 = $896 * $900;
 $902 = (+Math_log((+$901)));
 $903 = 0.276937901973724365234 * $902;
 $904 = 0.5 + $903;
 $905 = (+Math_floor((+$904)));
 $906 = (+Math_pow(37.0,(+$905)));
 $fSlow161 = $906;
 $907 = $fSlow161;
 $908 = 6.90775537490844726563 * $907;
 $909 = 0.0 - $908;
 $fSlow162 = $909;
 $910 = (($4) + 76|0);
 $911 = +HEAPF32[$910>>2];
 $912 = $fSlow162;
 $913 = $fSlow11;
 $914 = $912 / $913;
 $915 = $911 * $914;
 $916 = (+Math_exp((+$915)));
 $fSlow163 = $916;
 $917 = (($4) + 76|0);
 $918 = +HEAPF32[$917>>2];
 $919 = $fSlow162;
 $920 = $fSlow43;
 $921 = $919 / $920;
 $922 = $918 * $921;
 $923 = (+Math_exp((+$922)));
 $fSlow164 = $923;
 $924 = (($4) + 76|0);
 $925 = +HEAPF32[$924>>2];
 $926 = $fSlow162;
 $927 = $fSlow54;
 $928 = $926 / $927;
 $929 = $925 * $928;
 $930 = (+Math_exp((+$929)));
 $fSlow165 = $930;
 $931 = (($4) + 76|0);
 $932 = +HEAPF32[$931>>2];
 $933 = $fSlow162;
 $934 = $fSlow66;
 $935 = $933 / $934;
 $936 = $932 * $935;
 $937 = (+Math_exp((+$936)));
 $fSlow166 = $937;
 $938 = (($4) + 76|0);
 $939 = +HEAPF32[$938>>2];
 $940 = $fSlow162;
 $941 = $fSlow75;
 $942 = $940 / $941;
 $943 = $939 * $942;
 $944 = (+Math_exp((+$943)));
 $fSlow167 = $944;
 $945 = (($4) + 80|0);
 $946 = +HEAPF32[$945>>2];
 $947 = $fSlow7;
 $948 = $fSlow8;
 $949 = (+Math_pow((+$948),0.46666666865348815918));
 $950 = $947 * $949;
 $951 = $946 * $950;
 $952 = (+Math_log((+$951)));
 $953 = 0.339623272418975830078 * $952;
 $954 = 0.5 + $953;
 $955 = (+Math_floor((+$954)));
 $956 = (+Math_pow(19.0,(+$955)));
 $fSlow168 = $956;
 $957 = $fSlow168;
 $958 = 6.90775537490844726563 * $957;
 $959 = 0.0 - $958;
 $fSlow169 = $959;
 $960 = (($4) + 76|0);
 $961 = +HEAPF32[$960>>2];
 $962 = $fSlow169;
 $963 = $fSlow11;
 $964 = $962 / $963;
 $965 = $961 * $964;
 $966 = (+Math_exp((+$965)));
 $fSlow170 = $966;
 $967 = (($4) + 76|0);
 $968 = +HEAPF32[$967>>2];
 $969 = $fSlow169;
 $970 = $fSlow43;
 $971 = $969 / $970;
 $972 = $968 * $971;
 $973 = (+Math_exp((+$972)));
 $fSlow171 = $973;
 $974 = (($4) + 76|0);
 $975 = +HEAPF32[$974>>2];
 $976 = $fSlow169;
 $977 = $fSlow54;
 $978 = $976 / $977;
 $979 = $975 * $978;
 $980 = (+Math_exp((+$979)));
 $fSlow172 = $980;
 $981 = (($4) + 76|0);
 $982 = +HEAPF32[$981>>2];
 $983 = $fSlow169;
 $984 = $fSlow66;
 $985 = $983 / $984;
 $986 = $982 * $985;
 $987 = (+Math_exp((+$986)));
 $fSlow173 = $987;
 $988 = (($4) + 76|0);
 $989 = +HEAPF32[$988>>2];
 $990 = $fSlow169;
 $991 = $fSlow75;
 $992 = $990 / $991;
 $993 = $989 * $992;
 $994 = (+Math_exp((+$993)));
 $fSlow174 = $994;
 $995 = (($4) + 80|0);
 $996 = +HEAPF32[$995>>2];
 $997 = $fSlow7;
 $998 = $fSlow8;
 $999 = (+Math_pow((+$998),1.0));
 $1000 = $997 * $999;
 $1001 = $996 * $1000;
 $1002 = (+Math_log((+$1001)));
 $1003 = 0.25187066197395324707 * $1002;
 $1004 = 0.5 + $1003;
 $1005 = (+Math_floor((+$1004)));
 $1006 = (+Math_pow(53.0,(+$1005)));
 $fSlow175 = $1006;
 $1007 = $fSlow175;
 $1008 = 6.90775537490844726563 * $1007;
 $1009 = 0.0 - $1008;
 $fSlow176 = $1009;
 $1010 = (($4) + 76|0);
 $1011 = +HEAPF32[$1010>>2];
 $1012 = $fSlow176;
 $1013 = $fSlow11;
 $1014 = $1012 / $1013;
 $1015 = $1011 * $1014;
 $1016 = (+Math_exp((+$1015)));
 $fSlow177 = $1016;
 $1017 = (($4) + 76|0);
 $1018 = +HEAPF32[$1017>>2];
 $1019 = $fSlow176;
 $1020 = $fSlow43;
 $1021 = $1019 / $1020;
 $1022 = $1018 * $1021;
 $1023 = (+Math_exp((+$1022)));
 $fSlow178 = $1023;
 $1024 = (($4) + 76|0);
 $1025 = +HEAPF32[$1024>>2];
 $1026 = $fSlow176;
 $1027 = $fSlow54;
 $1028 = $1026 / $1027;
 $1029 = $1025 * $1028;
 $1030 = (+Math_exp((+$1029)));
 $fSlow179 = $1030;
 $1031 = (($4) + 76|0);
 $1032 = +HEAPF32[$1031>>2];
 $1033 = $fSlow176;
 $1034 = $fSlow66;
 $1035 = $1033 / $1034;
 $1036 = $1032 * $1035;
 $1037 = (+Math_exp((+$1036)));
 $fSlow180 = $1037;
 $1038 = (($4) + 76|0);
 $1039 = +HEAPF32[$1038>>2];
 $1040 = $fSlow176;
 $1041 = $fSlow75;
 $1042 = $1040 / $1041;
 $1043 = $1039 * $1042;
 $1044 = (+Math_exp((+$1043)));
 $fSlow181 = $1044;
 $1045 = $fSlow9;
 $1046 = $1045 - 1.0;
 $1047 = (~~(($1046)));
 $1048 = $1047 & 8191;
 $iSlow182 = $1048;
 $1049 = (($4) + 37012|0);
 $1050 = +HEAPF32[$1049>>2];
 $fSlow183 = $1050;
 $1051 = $fSlow126;
 $1052 = $1051 - 1.0;
 $1053 = (~~(($1052)));
 $1054 = $1053 & 8191;
 $iSlow184 = $1054;
 $1055 = $fSlow98;
 $1056 = $1055 - 1.0;
 $1057 = (~~(($1056)));
 $1058 = $1057 & 8191;
 $iSlow185 = $1058;
 $1059 = $fSlow154;
 $1060 = $1059 - 1.0;
 $1061 = (~~(($1060)));
 $1062 = $1061 & 8191;
 $iSlow186 = $1062;
 $1063 = $fSlow84;
 $1064 = $1063 - 1.0;
 $1065 = (~~(($1064)));
 $1066 = $1065 & 8191;
 $iSlow187 = $1066;
 $1067 = $fSlow140;
 $1068 = $1067 - 1.0;
 $1069 = (~~(($1068)));
 $1070 = $1069 & 8191;
 $iSlow188 = $1070;
 $1071 = $fSlow112;
 $1072 = $1071 - 1.0;
 $1073 = (~~(($1072)));
 $1074 = $1073 & 8191;
 $iSlow189 = $1074;
 $1075 = $fSlow168;
 $1076 = $1075 - 1.0;
 $1077 = (~~(($1076)));
 $1078 = $1077 & 8191;
 $iSlow190 = $1078;
 $1079 = $fSlow77;
 $1080 = $1079 - 1.0;
 $1081 = (~~(($1080)));
 $1082 = $1081 & 8191;
 $iSlow191 = $1082;
 $1083 = $fSlow133;
 $1084 = $1083 - 1.0;
 $1085 = (~~(($1084)));
 $1086 = $1085 & 8191;
 $iSlow192 = $1086;
 $1087 = $fSlow105;
 $1088 = $1087 - 1.0;
 $1089 = (~~(($1088)));
 $1090 = $1089 & 8191;
 $iSlow193 = $1090;
 $1091 = $fSlow161;
 $1092 = $1091 - 1.0;
 $1093 = (~~(($1092)));
 $1094 = $1093 & 8191;
 $iSlow194 = $1094;
 $1095 = $fSlow91;
 $1096 = $1095 - 1.0;
 $1097 = (~~(($1096)));
 $1098 = $1097 & 8191;
 $iSlow195 = $1098;
 $1099 = $fSlow147;
 $1100 = $1099 - 1.0;
 $1101 = (~~(($1100)));
 $1102 = $1101 & 8191;
 $iSlow196 = $1102;
 $1103 = $fSlow119;
 $1104 = $1103 - 1.0;
 $1105 = (~~(($1104)));
 $1106 = $1105 & 8191;
 $iSlow197 = $1106;
 $1107 = $fSlow175;
 $1108 = $1107 - 1.0;
 $1109 = (~~(($1108)));
 $1110 = $1109 & 8191;
 $iSlow198 = $1110;
 $1111 = $2;
 $1112 = HEAP32[$1111>>2]|0;
 $input0 = $1112;
 $1113 = $2;
 $1114 = (($1113) + 4|0);
 $1115 = HEAP32[$1114>>2]|0;
 $input1 = $1115;
 $1116 = $3;
 $1117 = HEAP32[$1116>>2]|0;
 $output0 = $1117;
 $1118 = $3;
 $1119 = (($1118) + 4|0);
 $1120 = HEAP32[$1119>>2]|0;
 $output1 = $1120;
 $i = 0;
 while(1) {
  $1121 = $i;
  $1122 = $1;
  $1123 = ($1121|0)<($1122|0);
  if (!($1123)) {
   break;
  }
  $1124 = (($4) + 16|0);
  $1125 = (($1124) + 4|0);
  $1126 = HEAP32[$1125>>2]|0;
  $1127 = Math_imul(1103515245, $1126)|0;
  $1128 = (12345 + ($1127))|0;
  $1129 = (($4) + 16|0);
  HEAP32[$1129>>2] = $1128;
  $1130 = (($4) + 24|0);
  $1131 = (($1130) + 12|0);
  $1132 = +HEAPF32[$1131>>2];
  $1133 = 0.522189378738403320313 * $1132;
  $1134 = (($4) + 16|0);
  $1135 = HEAP32[$1134>>2]|0;
  $1136 = (+($1135|0));
  $1137 = 4.65661287307739257813E-10 * $1136;
  $1138 = (($4) + 24|0);
  $1139 = (($1138) + 4|0);
  $1140 = +HEAPF32[$1139>>2];
  $1141 = 2.49495601654052734375 * $1140;
  $1142 = $1137 + $1141;
  $1143 = $1133 + $1142;
  $1144 = (($4) + 24|0);
  $1145 = (($1144) + 8|0);
  $1146 = +HEAPF32[$1145>>2];
  $1147 = 2.01726579666137695313 * $1146;
  $1148 = $1143 - $1147;
  $1149 = (($4) + 24|0);
  HEAPF32[$1149>>2] = $1148;
  $1150 = $fSlow1;
  $1151 = (($4) + 24|0);
  $1152 = +HEAPF32[$1151>>2];
  $1153 = 0.049922034144401550293 * $1152;
  $1154 = (($4) + 24|0);
  $1155 = (($1154) + 8|0);
  $1156 = +HEAPF32[$1155>>2];
  $1157 = 0.0506126992404460906982 * $1156;
  $1158 = $1153 + $1157;
  $1159 = (($4) + 24|0);
  $1160 = (($1159) + 4|0);
  $1161 = +HEAPF32[$1160>>2];
  $1162 = 0.0959935337305068969727 * $1161;
  $1163 = (($4) + 24|0);
  $1164 = (($1163) + 12|0);
  $1165 = +HEAPF32[$1164>>2];
  $1166 = 0.00440878607332706451416 * $1165;
  $1167 = $1162 + $1166;
  $1168 = $1158 - $1167;
  $1169 = $1150 * $1168;
  $fTemp0 = $1169;
  $1170 = $fSlow2;
  $1171 = (($4) + 44|0);
  HEAPF32[$1171>>2] = $1170;
  $1172 = $fSlow2;
  $1173 = (($4) + 44|0);
  $1174 = (($1173) + 4|0);
  $1175 = +HEAPF32[$1174>>2];
  $1176 = $1172 - $1175;
  $1177 = $1176 > 0.0;
  $1178 = $1177&1;
  $iTemp1 = $1178;
  $1179 = $fSlow3;
  $1180 = $i;
  $1181 = $input0;
  $1182 = (($1181) + ($1180<<2)|0);
  $1183 = +HEAPF32[$1182>>2];
  $1184 = $1179 * $1183;
  $fTemp2 = $1184;
  $1185 = $fSlow4;
  $1186 = (($4) + 60|0);
  HEAPF32[$1186>>2] = $1185;
  $1187 = $fSlow4;
  $1188 = (($4) + 60|0);
  $1189 = (($1188) + 4|0);
  $1190 = +HEAPF32[$1189>>2];
  $1191 = $1187 - $1190;
  $1192 = $1191 > 0.0;
  $1193 = $1192&1;
  $iTemp3 = $1193;
  $1194 = $fSlow19;
  $1195 = (($4) + 104|0);
  $1196 = (($1195) + 4|0);
  $1197 = +HEAPF32[$1196>>2];
  $1198 = $1194 * $1197;
  $1199 = $fSlow20;
  $1200 = $fSlow14;
  $1201 = (($4) + 37000|0);
  $1202 = (($1201) + 4|0);
  $1203 = +HEAPF32[$1202>>2];
  $1204 = $1200 * $1203;
  $1205 = $fSlow21;
  $1206 = (($4) + 37000|0);
  $1207 = (($1206) + 8|0);
  $1208 = +HEAPF32[$1207>>2];
  $1209 = $1205 * $1208;
  $1210 = $1204 + $1209;
  $1211 = $1199 * $1210;
  $1212 = $1198 + $1211;
  $1213 = (($4) + 104|0);
  HEAPF32[$1213>>2] = $1212;
  $1214 = (($4) + 104|0);
  $1215 = +HEAPF32[$1214>>2];
  $1216 = $fSlow16;
  $1217 = $fSlow22;
  $1218 = (($4) + 112|0);
  $1219 = (($1218) + 8|0);
  $1220 = +HEAPF32[$1219>>2];
  $1221 = $1217 * $1220;
  $1222 = $fSlow23;
  $1223 = (($4) + 112|0);
  $1224 = (($1223) + 4|0);
  $1225 = +HEAPF32[$1224>>2];
  $1226 = $1222 * $1225;
  $1227 = $1221 + $1226;
  $1228 = $1216 * $1227;
  $1229 = $1215 - $1228;
  $1230 = (($4) + 112|0);
  HEAPF32[$1230>>2] = $1229;
  $1231 = $fSlow29;
  $1232 = (($4) + 128|0);
  $1233 = (($1232) + 4|0);
  $1234 = +HEAPF32[$1233>>2];
  $1235 = $1231 * $1234;
  $fTemp4 = $1235;
  $1236 = $fSlow16;
  $1237 = $fSlow17;
  $1238 = (($4) + 112|0);
  $1239 = +HEAPF32[$1238>>2];
  $1240 = $1237 * $1239;
  $1241 = $fSlow24;
  $1242 = (($4) + 112|0);
  $1243 = (($1242) + 4|0);
  $1244 = +HEAPF32[$1243>>2];
  $1245 = $1241 * $1244;
  $1246 = $1240 + $1245;
  $1247 = $fSlow17;
  $1248 = (($4) + 112|0);
  $1249 = (($1248) + 8|0);
  $1250 = +HEAPF32[$1249>>2];
  $1251 = $1247 * $1250;
  $1252 = $1246 + $1251;
  $1253 = $1236 * $1252;
  $1254 = $fSlow27;
  $1255 = $fTemp4;
  $1256 = $fSlow30;
  $1257 = (($4) + 128|0);
  $1258 = (($1257) + 8|0);
  $1259 = +HEAPF32[$1258>>2];
  $1260 = $1256 * $1259;
  $1261 = $1255 + $1260;
  $1262 = $1254 * $1261;
  $1263 = $1253 - $1262;
  $1264 = (($4) + 128|0);
  HEAPF32[$1264>>2] = $1263;
  $1265 = $fSlow36;
  $1266 = (($4) + 144|0);
  $1267 = (($1266) + 4|0);
  $1268 = +HEAPF32[$1267>>2];
  $1269 = $1265 * $1268;
  $fTemp5 = $1269;
  $1270 = (($4) + 128|0);
  $1271 = (($1270) + 8|0);
  $1272 = +HEAPF32[$1271>>2];
  $1273 = $fSlow27;
  $1274 = $fTemp4;
  $1275 = $fSlow30;
  $1276 = (($4) + 128|0);
  $1277 = +HEAPF32[$1276>>2];
  $1278 = $1275 * $1277;
  $1279 = $1274 + $1278;
  $1280 = $1273 * $1279;
  $1281 = $1272 + $1280;
  $1282 = $fSlow33;
  $1283 = $fSlow34;
  $1284 = (($4) + 144|0);
  $1285 = (($1284) + 8|0);
  $1286 = +HEAPF32[$1285>>2];
  $1287 = $1283 * $1286;
  $1288 = $fTemp5;
  $1289 = $1287 + $1288;
  $1290 = $1282 * $1289;
  $1291 = $1281 - $1290;
  $1292 = (($4) + 144|0);
  HEAPF32[$1292>>2] = $1291;
  $1293 = $fSlow41;
  $1294 = (($4) + 160|0);
  $1295 = (($1294) + 4|0);
  $1296 = +HEAPF32[$1295>>2];
  $1297 = $1293 * $1296;
  $fTemp6 = $1297;
  $1298 = (($4) + 144|0);
  $1299 = (($1298) + 8|0);
  $1300 = +HEAPF32[$1299>>2];
  $1301 = $fSlow33;
  $1302 = $fTemp5;
  $1303 = $fSlow34;
  $1304 = (($4) + 144|0);
  $1305 = +HEAPF32[$1304>>2];
  $1306 = $1303 * $1305;
  $1307 = $1302 + $1306;
  $1308 = $1301 * $1307;
  $1309 = $1300 + $1308;
  $1310 = $fSlow39;
  $1311 = $fTemp6;
  $1312 = $fSlow42;
  $1313 = (($4) + 160|0);
  $1314 = (($1313) + 8|0);
  $1315 = +HEAPF32[$1314>>2];
  $1316 = $1312 * $1315;
  $1317 = $1311 + $1316;
  $1318 = $1310 * $1317;
  $1319 = $1309 - $1318;
  $1320 = (($4) + 160|0);
  HEAPF32[$1320>>2] = $1319;
  $1321 = $fSlow19;
  $1322 = (($4) + 176|0);
  $1323 = (($1322) + 4|0);
  $1324 = +HEAPF32[$1323>>2];
  $1325 = $1321 * $1324;
  $1326 = $fSlow20;
  $1327 = (($4) + 37000|0);
  $1328 = (($1327) + 4|0);
  $1329 = +HEAPF32[$1328>>2];
  $1330 = (($4) + 37000|0);
  $1331 = (($1330) + 8|0);
  $1332 = +HEAPF32[$1331>>2];
  $1333 = $1329 + $1332;
  $1334 = $1326 * $1333;
  $1335 = $1325 + $1334;
  $1336 = (($4) + 176|0);
  HEAPF32[$1336>>2] = $1335;
  $1337 = (($4) + 176|0);
  $1338 = +HEAPF32[$1337>>2];
  $1339 = $fSlow16;
  $1340 = $fSlow22;
  $1341 = (($4) + 184|0);
  $1342 = (($1341) + 8|0);
  $1343 = +HEAPF32[$1342>>2];
  $1344 = $1340 * $1343;
  $1345 = $fSlow23;
  $1346 = (($4) + 184|0);
  $1347 = (($1346) + 4|0);
  $1348 = +HEAPF32[$1347>>2];
  $1349 = $1345 * $1348;
  $1350 = $1344 + $1349;
  $1351 = $1339 * $1350;
  $1352 = $1338 - $1351;
  $1353 = (($4) + 184|0);
  HEAPF32[$1353>>2] = $1352;
  $1354 = (($4) + 184|0);
  $1355 = (($1354) + 8|0);
  $1356 = +HEAPF32[$1355>>2];
  $1357 = (($4) + 184|0);
  $1358 = +HEAPF32[$1357>>2];
  $1359 = (($4) + 184|0);
  $1360 = (($1359) + 4|0);
  $1361 = +HEAPF32[$1360>>2];
  $1362 = 2.0 * $1361;
  $1363 = $1358 + $1362;
  $1364 = $1356 + $1363;
  $fTemp7 = $1364;
  $1365 = $fSlow16;
  $1366 = $fTemp7;
  $1367 = $1365 * $1366;
  $fTemp8 = $1367;
  $1368 = $fTemp8;
  $1369 = (($4) + 196|0);
  HEAPF32[$1369>>2] = $1368;
  $1370 = $fSlow48;
  $1371 = (($4) + 204|0);
  $1372 = (($1371) + 4|0);
  $1373 = +HEAPF32[$1372>>2];
  $1374 = $1370 * $1373;
  $1375 = $fSlow49;
  $1376 = $fSlow50;
  $1377 = (($4) + 196|0);
  $1378 = (($1377) + 4|0);
  $1379 = +HEAPF32[$1378>>2];
  $1380 = $1376 * $1379;
  $1381 = $fSlow51;
  $1382 = $fTemp7;
  $1383 = $1381 * $1382;
  $1384 = $1380 + $1383;
  $1385 = $1375 * $1384;
  $1386 = $1374 + $1385;
  $1387 = (($4) + 204|0);
  HEAPF32[$1387>>2] = $1386;
  $1388 = (($4) + 204|0);
  $1389 = +HEAPF32[$1388>>2];
  $1390 = $fSlow46;
  $1391 = $fSlow52;
  $1392 = (($4) + 212|0);
  $1393 = (($1392) + 8|0);
  $1394 = +HEAPF32[$1393>>2];
  $1395 = $1391 * $1394;
  $1396 = $fSlow29;
  $1397 = (($4) + 212|0);
  $1398 = (($1397) + 4|0);
  $1399 = +HEAPF32[$1398>>2];
  $1400 = $1396 * $1399;
  $1401 = $1395 + $1400;
  $1402 = $1390 * $1401;
  $1403 = $1389 - $1402;
  $1404 = (($4) + 212|0);
  HEAPF32[$1404>>2] = $1403;
  $1405 = $fSlow36;
  $1406 = (($4) + 224|0);
  $1407 = (($1406) + 4|0);
  $1408 = +HEAPF32[$1407>>2];
  $1409 = $1405 * $1408;
  $fTemp9 = $1409;
  $1410 = $fSlow46;
  $1411 = $fSlow28;
  $1412 = (($4) + 212|0);
  $1413 = +HEAPF32[$1412>>2];
  $1414 = $1411 * $1413;
  $1415 = $fSlow53;
  $1416 = (($4) + 212|0);
  $1417 = (($1416) + 4|0);
  $1418 = +HEAPF32[$1417>>2];
  $1419 = $1415 * $1418;
  $1420 = $1414 + $1419;
  $1421 = $fSlow28;
  $1422 = (($4) + 212|0);
  $1423 = (($1422) + 8|0);
  $1424 = +HEAPF32[$1423>>2];
  $1425 = $1421 * $1424;
  $1426 = $1420 + $1425;
  $1427 = $1410 * $1426;
  $1428 = $fSlow33;
  $1429 = $fSlow34;
  $1430 = (($4) + 224|0);
  $1431 = (($1430) + 8|0);
  $1432 = +HEAPF32[$1431>>2];
  $1433 = $1429 * $1432;
  $1434 = $fTemp9;
  $1435 = $1433 + $1434;
  $1436 = $1428 * $1435;
  $1437 = $1427 - $1436;
  $1438 = (($4) + 224|0);
  HEAPF32[$1438>>2] = $1437;
  $1439 = $fSlow41;
  $1440 = (($4) + 236|0);
  $1441 = (($1440) + 4|0);
  $1442 = +HEAPF32[$1441>>2];
  $1443 = $1439 * $1442;
  $fTemp10 = $1443;
  $1444 = (($4) + 224|0);
  $1445 = (($1444) + 8|0);
  $1446 = +HEAPF32[$1445>>2];
  $1447 = $fSlow33;
  $1448 = $fTemp9;
  $1449 = $fSlow34;
  $1450 = (($4) + 224|0);
  $1451 = +HEAPF32[$1450>>2];
  $1452 = $1449 * $1451;
  $1453 = $1448 + $1452;
  $1454 = $1447 * $1453;
  $1455 = $1446 + $1454;
  $1456 = $fSlow39;
  $1457 = $fSlow42;
  $1458 = (($4) + 236|0);
  $1459 = (($1458) + 8|0);
  $1460 = +HEAPF32[$1459>>2];
  $1461 = $1457 * $1460;
  $1462 = $fTemp10;
  $1463 = $1461 + $1462;
  $1464 = $1456 * $1463;
  $1465 = $1455 - $1464;
  $1466 = (($4) + 236|0);
  HEAPF32[$1466>>2] = $1465;
  $1467 = $fSlow48;
  $1468 = (($4) + 252|0);
  $1469 = (($1468) + 4|0);
  $1470 = +HEAPF32[$1469>>2];
  $1471 = $1467 * $1470;
  $1472 = $fSlow49;
  $1473 = (($4) + 196|0);
  $1474 = +HEAPF32[$1473>>2];
  $1475 = (($4) + 196|0);
  $1476 = (($1475) + 4|0);
  $1477 = +HEAPF32[$1476>>2];
  $1478 = $1474 + $1477;
  $1479 = $1472 * $1478;
  $1480 = $1471 + $1479;
  $1481 = (($4) + 252|0);
  HEAPF32[$1481>>2] = $1480;
  $1482 = (($4) + 252|0);
  $1483 = +HEAPF32[$1482>>2];
  $1484 = $fSlow46;
  $1485 = $fSlow52;
  $1486 = (($4) + 260|0);
  $1487 = (($1486) + 8|0);
  $1488 = +HEAPF32[$1487>>2];
  $1489 = $1485 * $1488;
  $1490 = $fSlow29;
  $1491 = (($4) + 260|0);
  $1492 = (($1491) + 4|0);
  $1493 = +HEAPF32[$1492>>2];
  $1494 = $1490 * $1493;
  $1495 = $1489 + $1494;
  $1496 = $1484 * $1495;
  $1497 = $1483 - $1496;
  $1498 = (($4) + 260|0);
  HEAPF32[$1498>>2] = $1497;
  $1499 = (($4) + 260|0);
  $1500 = (($1499) + 8|0);
  $1501 = +HEAPF32[$1500>>2];
  $1502 = (($4) + 260|0);
  $1503 = +HEAPF32[$1502>>2];
  $1504 = (($4) + 260|0);
  $1505 = (($1504) + 4|0);
  $1506 = +HEAPF32[$1505>>2];
  $1507 = 2.0 * $1506;
  $1508 = $1503 + $1507;
  $1509 = $1501 + $1508;
  $fTemp11 = $1509;
  $1510 = $fSlow46;
  $1511 = $fTemp11;
  $1512 = $1510 * $1511;
  $fTemp12 = $1512;
  $1513 = $fTemp12;
  $1514 = (($4) + 272|0);
  HEAPF32[$1514>>2] = $1513;
  $1515 = $fSlow59;
  $1516 = (($4) + 280|0);
  $1517 = (($1516) + 4|0);
  $1518 = +HEAPF32[$1517>>2];
  $1519 = $1515 * $1518;
  $1520 = $fSlow60;
  $1521 = $fSlow61;
  $1522 = (($4) + 272|0);
  $1523 = (($1522) + 4|0);
  $1524 = +HEAPF32[$1523>>2];
  $1525 = $1521 * $1524;
  $1526 = $fSlow62;
  $1527 = $fTemp11;
  $1528 = $1526 * $1527;
  $1529 = $1525 + $1528;
  $1530 = $1520 * $1529;
  $1531 = $1519 + $1530;
  $1532 = (($4) + 280|0);
  HEAPF32[$1532>>2] = $1531;
  $1533 = (($4) + 280|0);
  $1534 = +HEAPF32[$1533>>2];
  $1535 = $fSlow57;
  $1536 = $fSlow63;
  $1537 = (($4) + 288|0);
  $1538 = (($1537) + 8|0);
  $1539 = +HEAPF32[$1538>>2];
  $1540 = $1536 * $1539;
  $1541 = $fSlow36;
  $1542 = (($4) + 288|0);
  $1543 = (($1542) + 4|0);
  $1544 = +HEAPF32[$1543>>2];
  $1545 = $1541 * $1544;
  $1546 = $1540 + $1545;
  $1547 = $1535 * $1546;
  $1548 = $1534 - $1547;
  $1549 = (($4) + 288|0);
  HEAPF32[$1549>>2] = $1548;
  $1550 = $fSlow41;
  $1551 = (($4) + 300|0);
  $1552 = (($1551) + 4|0);
  $1553 = +HEAPF32[$1552>>2];
  $1554 = $1550 * $1553;
  $fTemp13 = $1554;
  $1555 = $fSlow57;
  $1556 = $fSlow35;
  $1557 = (($4) + 288|0);
  $1558 = +HEAPF32[$1557>>2];
  $1559 = $1556 * $1558;
  $1560 = $fSlow64;
  $1561 = (($4) + 288|0);
  $1562 = (($1561) + 4|0);
  $1563 = +HEAPF32[$1562>>2];
  $1564 = $1560 * $1563;
  $1565 = $1559 + $1564;
  $1566 = $fSlow35;
  $1567 = (($4) + 288|0);
  $1568 = (($1567) + 8|0);
  $1569 = +HEAPF32[$1568>>2];
  $1570 = $1566 * $1569;
  $1571 = $1565 + $1570;
  $1572 = $1555 * $1571;
  $1573 = $fSlow39;
  $1574 = $fSlow42;
  $1575 = (($4) + 300|0);
  $1576 = (($1575) + 8|0);
  $1577 = +HEAPF32[$1576>>2];
  $1578 = $1574 * $1577;
  $1579 = $fTemp13;
  $1580 = $1578 + $1579;
  $1581 = $1573 * $1580;
  $1582 = $1572 - $1581;
  $1583 = (($4) + 300|0);
  HEAPF32[$1583>>2] = $1582;
  $1584 = $fSlow59;
  $1585 = (($4) + 316|0);
  $1586 = (($1585) + 4|0);
  $1587 = +HEAPF32[$1586>>2];
  $1588 = $1584 * $1587;
  $1589 = $fSlow60;
  $1590 = (($4) + 272|0);
  $1591 = +HEAPF32[$1590>>2];
  $1592 = (($4) + 272|0);
  $1593 = (($1592) + 4|0);
  $1594 = +HEAPF32[$1593>>2];
  $1595 = $1591 + $1594;
  $1596 = $1589 * $1595;
  $1597 = $1588 + $1596;
  $1598 = (($4) + 316|0);
  HEAPF32[$1598>>2] = $1597;
  $1599 = (($4) + 316|0);
  $1600 = +HEAPF32[$1599>>2];
  $1601 = $fSlow57;
  $1602 = $fSlow63;
  $1603 = (($4) + 324|0);
  $1604 = (($1603) + 8|0);
  $1605 = +HEAPF32[$1604>>2];
  $1606 = $1602 * $1605;
  $1607 = $fSlow36;
  $1608 = (($4) + 324|0);
  $1609 = (($1608) + 4|0);
  $1610 = +HEAPF32[$1609>>2];
  $1611 = $1607 * $1610;
  $1612 = $1606 + $1611;
  $1613 = $1601 * $1612;
  $1614 = $1600 - $1613;
  $1615 = (($4) + 324|0);
  HEAPF32[$1615>>2] = $1614;
  $1616 = (($4) + 324|0);
  $1617 = (($1616) + 8|0);
  $1618 = +HEAPF32[$1617>>2];
  $1619 = (($4) + 324|0);
  $1620 = +HEAPF32[$1619>>2];
  $1621 = (($4) + 324|0);
  $1622 = (($1621) + 4|0);
  $1623 = +HEAPF32[$1622>>2];
  $1624 = 2.0 * $1623;
  $1625 = $1620 + $1624;
  $1626 = $1618 + $1625;
  $fTemp14 = $1626;
  $1627 = $fSlow57;
  $1628 = $fTemp14;
  $1629 = $1627 * $1628;
  $fTemp15 = $1629;
  $1630 = $fTemp15;
  $1631 = (($4) + 336|0);
  HEAPF32[$1631>>2] = $1630;
  $1632 = $fSlow69;
  $1633 = (($4) + 344|0);
  $1634 = (($1633) + 4|0);
  $1635 = +HEAPF32[$1634>>2];
  $1636 = $1632 * $1635;
  $1637 = $fSlow70;
  $1638 = $fSlow71;
  $1639 = (($4) + 336|0);
  $1640 = (($1639) + 4|0);
  $1641 = +HEAPF32[$1640>>2];
  $1642 = $1638 * $1641;
  $1643 = $fSlow72;
  $1644 = $fTemp14;
  $1645 = $1643 * $1644;
  $1646 = $1642 + $1645;
  $1647 = $1637 * $1646;
  $1648 = $1636 + $1647;
  $1649 = (($4) + 344|0);
  HEAPF32[$1649>>2] = $1648;
  $1650 = (($4) + 344|0);
  $1651 = +HEAPF32[$1650>>2];
  $1652 = $fSlow65;
  $1653 = $fSlow73;
  $1654 = (($4) + 352|0);
  $1655 = (($1654) + 8|0);
  $1656 = +HEAPF32[$1655>>2];
  $1657 = $1653 * $1656;
  $1658 = $fSlow41;
  $1659 = (($4) + 352|0);
  $1660 = (($1659) + 4|0);
  $1661 = +HEAPF32[$1660>>2];
  $1662 = $1658 * $1661;
  $1663 = $1657 + $1662;
  $1664 = $1652 * $1663;
  $1665 = $1651 - $1664;
  $1666 = (($4) + 352|0);
  HEAPF32[$1666>>2] = $1665;
  $1667 = $fSlow69;
  $1668 = (($4) + 368|0);
  $1669 = (($1668) + 4|0);
  $1670 = +HEAPF32[$1669>>2];
  $1671 = $1667 * $1670;
  $1672 = $fSlow70;
  $1673 = (($4) + 336|0);
  $1674 = +HEAPF32[$1673>>2];
  $1675 = (($4) + 336|0);
  $1676 = (($1675) + 4|0);
  $1677 = +HEAPF32[$1676>>2];
  $1678 = $1674 + $1677;
  $1679 = $1672 * $1678;
  $1680 = $1671 + $1679;
  $1681 = (($4) + 368|0);
  HEAPF32[$1681>>2] = $1680;
  $1682 = (($4) + 368|0);
  $1683 = +HEAPF32[$1682>>2];
  $1684 = $fSlow65;
  $1685 = $fSlow73;
  $1686 = (($4) + 376|0);
  $1687 = (($1686) + 8|0);
  $1688 = +HEAPF32[$1687>>2];
  $1689 = $1685 * $1688;
  $1690 = $fSlow41;
  $1691 = (($4) + 376|0);
  $1692 = (($1691) + 4|0);
  $1693 = +HEAPF32[$1692>>2];
  $1694 = $1690 * $1693;
  $1695 = $1689 + $1694;
  $1696 = $1684 * $1695;
  $1697 = $1683 - $1696;
  $1698 = (($4) + 376|0);
  HEAPF32[$1698>>2] = $1697;
  $1699 = $fSlow12;
  $1700 = (($4) + 160|0);
  $1701 = (($1700) + 8|0);
  $1702 = +HEAPF32[$1701>>2];
  $1703 = $fSlow39;
  $1704 = $fTemp6;
  $1705 = $fSlow42;
  $1706 = (($4) + 160|0);
  $1707 = +HEAPF32[$1706>>2];
  $1708 = $1705 * $1707;
  $1709 = $1704 + $1708;
  $1710 = $1703 * $1709;
  $1711 = $1702 + $1710;
  $1712 = $1699 * $1711;
  $1713 = $fSlow44;
  $1714 = (($4) + 236|0);
  $1715 = (($1714) + 8|0);
  $1716 = +HEAPF32[$1715>>2];
  $1717 = $fSlow39;
  $1718 = $fTemp10;
  $1719 = $fSlow42;
  $1720 = (($4) + 236|0);
  $1721 = +HEAPF32[$1720>>2];
  $1722 = $1719 * $1721;
  $1723 = $1718 + $1722;
  $1724 = $1717 * $1723;
  $1725 = $1716 + $1724;
  $1726 = $1713 * $1725;
  $1727 = $1712 + $1726;
  $1728 = $fSlow55;
  $1729 = (($4) + 300|0);
  $1730 = (($1729) + 8|0);
  $1731 = +HEAPF32[$1730>>2];
  $1732 = $fSlow39;
  $1733 = $fTemp13;
  $1734 = $fSlow42;
  $1735 = (($4) + 300|0);
  $1736 = +HEAPF32[$1735>>2];
  $1737 = $1734 * $1736;
  $1738 = $1733 + $1737;
  $1739 = $1732 * $1738;
  $1740 = $1731 + $1739;
  $1741 = $1728 * $1740;
  $1742 = $1727 + $1741;
  $1743 = $fSlow65;
  $1744 = $fSlow67;
  $1745 = $fSlow40;
  $1746 = (($4) + 352|0);
  $1747 = +HEAPF32[$1746>>2];
  $1748 = $1745 * $1747;
  $1749 = $fSlow74;
  $1750 = (($4) + 352|0);
  $1751 = (($1750) + 4|0);
  $1752 = +HEAPF32[$1751>>2];
  $1753 = $1749 * $1752;
  $1754 = $1748 + $1753;
  $1755 = $fSlow40;
  $1756 = (($4) + 352|0);
  $1757 = (($1756) + 8|0);
  $1758 = +HEAPF32[$1757>>2];
  $1759 = $1755 * $1758;
  $1760 = $1754 + $1759;
  $1761 = $1744 * $1760;
  $1762 = $fSlow76;
  $1763 = (($4) + 376|0);
  $1764 = (($1763) + 8|0);
  $1765 = +HEAPF32[$1764>>2];
  $1766 = (($4) + 376|0);
  $1767 = +HEAPF32[$1766>>2];
  $1768 = (($4) + 376|0);
  $1769 = (($1768) + 4|0);
  $1770 = +HEAPF32[$1769>>2];
  $1771 = 2.0 * $1770;
  $1772 = $1767 + $1771;
  $1773 = $1765 + $1772;
  $1774 = $1762 * $1773;
  $1775 = $1761 + $1774;
  $1776 = $1743 * $1775;
  $1777 = $1742 + $1776;
  $fTemp16 = $1777;
  $1778 = $fSlow19;
  $1779 = (($4) + 388|0);
  $1780 = (($1779) + 4|0);
  $1781 = +HEAPF32[$1780>>2];
  $1782 = $1778 * $1781;
  $1783 = $fSlow20;
  $1784 = $fSlow14;
  $1785 = (($4) + 299252|0);
  $1786 = (($1785) + 4|0);
  $1787 = +HEAPF32[$1786>>2];
  $1788 = $1784 * $1787;
  $1789 = $fSlow21;
  $1790 = (($4) + 299252|0);
  $1791 = (($1790) + 8|0);
  $1792 = +HEAPF32[$1791>>2];
  $1793 = $1789 * $1792;
  $1794 = $1788 + $1793;
  $1795 = $1783 * $1794;
  $1796 = $1782 + $1795;
  $1797 = (($4) + 388|0);
  HEAPF32[$1797>>2] = $1796;
  $1798 = (($4) + 388|0);
  $1799 = +HEAPF32[$1798>>2];
  $1800 = $fSlow16;
  $1801 = $fSlow22;
  $1802 = (($4) + 396|0);
  $1803 = (($1802) + 8|0);
  $1804 = +HEAPF32[$1803>>2];
  $1805 = $1801 * $1804;
  $1806 = $fSlow23;
  $1807 = (($4) + 396|0);
  $1808 = (($1807) + 4|0);
  $1809 = +HEAPF32[$1808>>2];
  $1810 = $1806 * $1809;
  $1811 = $1805 + $1810;
  $1812 = $1800 * $1811;
  $1813 = $1799 - $1812;
  $1814 = (($4) + 396|0);
  HEAPF32[$1814>>2] = $1813;
  $1815 = $fSlow29;
  $1816 = (($4) + 408|0);
  $1817 = (($1816) + 4|0);
  $1818 = +HEAPF32[$1817>>2];
  $1819 = $1815 * $1818;
  $fTemp17 = $1819;
  $1820 = $fSlow16;
  $1821 = $fSlow17;
  $1822 = (($4) + 396|0);
  $1823 = +HEAPF32[$1822>>2];
  $1824 = $1821 * $1823;
  $1825 = $fSlow24;
  $1826 = (($4) + 396|0);
  $1827 = (($1826) + 4|0);
  $1828 = +HEAPF32[$1827>>2];
  $1829 = $1825 * $1828;
  $1830 = $1824 + $1829;
  $1831 = $fSlow17;
  $1832 = (($4) + 396|0);
  $1833 = (($1832) + 8|0);
  $1834 = +HEAPF32[$1833>>2];
  $1835 = $1831 * $1834;
  $1836 = $1830 + $1835;
  $1837 = $1820 * $1836;
  $1838 = $fSlow27;
  $1839 = $fSlow30;
  $1840 = (($4) + 408|0);
  $1841 = (($1840) + 8|0);
  $1842 = +HEAPF32[$1841>>2];
  $1843 = $1839 * $1842;
  $1844 = $fTemp17;
  $1845 = $1843 + $1844;
  $1846 = $1838 * $1845;
  $1847 = $1837 - $1846;
  $1848 = (($4) + 408|0);
  HEAPF32[$1848>>2] = $1847;
  $1849 = $fSlow36;
  $1850 = (($4) + 420|0);
  $1851 = (($1850) + 4|0);
  $1852 = +HEAPF32[$1851>>2];
  $1853 = $1849 * $1852;
  $fTemp18 = $1853;
  $1854 = (($4) + 408|0);
  $1855 = (($1854) + 8|0);
  $1856 = +HEAPF32[$1855>>2];
  $1857 = $fSlow27;
  $1858 = $fTemp17;
  $1859 = $fSlow30;
  $1860 = (($4) + 408|0);
  $1861 = +HEAPF32[$1860>>2];
  $1862 = $1859 * $1861;
  $1863 = $1858 + $1862;
  $1864 = $1857 * $1863;
  $1865 = $1856 + $1864;
  $1866 = $fSlow33;
  $1867 = $fSlow34;
  $1868 = (($4) + 420|0);
  $1869 = (($1868) + 8|0);
  $1870 = +HEAPF32[$1869>>2];
  $1871 = $1867 * $1870;
  $1872 = $fTemp18;
  $1873 = $1871 + $1872;
  $1874 = $1866 * $1873;
  $1875 = $1865 - $1874;
  $1876 = (($4) + 420|0);
  HEAPF32[$1876>>2] = $1875;
  $1877 = $fSlow41;
  $1878 = (($4) + 432|0);
  $1879 = (($1878) + 4|0);
  $1880 = +HEAPF32[$1879>>2];
  $1881 = $1877 * $1880;
  $fTemp19 = $1881;
  $1882 = (($4) + 420|0);
  $1883 = (($1882) + 8|0);
  $1884 = +HEAPF32[$1883>>2];
  $1885 = $fSlow33;
  $1886 = $fSlow34;
  $1887 = (($4) + 420|0);
  $1888 = +HEAPF32[$1887>>2];
  $1889 = $1886 * $1888;
  $1890 = $fTemp18;
  $1891 = $1889 + $1890;
  $1892 = $1885 * $1891;
  $1893 = $1884 + $1892;
  $1894 = $fSlow39;
  $1895 = $fSlow42;
  $1896 = (($4) + 432|0);
  $1897 = (($1896) + 8|0);
  $1898 = +HEAPF32[$1897>>2];
  $1899 = $1895 * $1898;
  $1900 = $fTemp19;
  $1901 = $1899 + $1900;
  $1902 = $1894 * $1901;
  $1903 = $1893 - $1902;
  $1904 = (($4) + 432|0);
  HEAPF32[$1904>>2] = $1903;
  $1905 = $fSlow19;
  $1906 = (($4) + 444|0);
  $1907 = (($1906) + 4|0);
  $1908 = +HEAPF32[$1907>>2];
  $1909 = $1905 * $1908;
  $1910 = $fSlow20;
  $1911 = (($4) + 299252|0);
  $1912 = (($1911) + 4|0);
  $1913 = +HEAPF32[$1912>>2];
  $1914 = (($4) + 299252|0);
  $1915 = (($1914) + 8|0);
  $1916 = +HEAPF32[$1915>>2];
  $1917 = $1913 + $1916;
  $1918 = $1910 * $1917;
  $1919 = $1909 + $1918;
  $1920 = (($4) + 444|0);
  HEAPF32[$1920>>2] = $1919;
  $1921 = (($4) + 444|0);
  $1922 = +HEAPF32[$1921>>2];
  $1923 = $fSlow16;
  $1924 = $fSlow22;
  $1925 = (($4) + 452|0);
  $1926 = (($1925) + 8|0);
  $1927 = +HEAPF32[$1926>>2];
  $1928 = $1924 * $1927;
  $1929 = $fSlow23;
  $1930 = (($4) + 452|0);
  $1931 = (($1930) + 4|0);
  $1932 = +HEAPF32[$1931>>2];
  $1933 = $1929 * $1932;
  $1934 = $1928 + $1933;
  $1935 = $1923 * $1934;
  $1936 = $1922 - $1935;
  $1937 = (($4) + 452|0);
  HEAPF32[$1937>>2] = $1936;
  $1938 = (($4) + 452|0);
  $1939 = (($1938) + 8|0);
  $1940 = +HEAPF32[$1939>>2];
  $1941 = (($4) + 452|0);
  $1942 = +HEAPF32[$1941>>2];
  $1943 = (($4) + 452|0);
  $1944 = (($1943) + 4|0);
  $1945 = +HEAPF32[$1944>>2];
  $1946 = 2.0 * $1945;
  $1947 = $1942 + $1946;
  $1948 = $1940 + $1947;
  $fTemp20 = $1948;
  $1949 = $fSlow16;
  $1950 = $fTemp20;
  $1951 = $1949 * $1950;
  $fTemp21 = $1951;
  $1952 = $fTemp21;
  $1953 = (($4) + 464|0);
  HEAPF32[$1953>>2] = $1952;
  $1954 = $fSlow48;
  $1955 = (($4) + 472|0);
  $1956 = (($1955) + 4|0);
  $1957 = +HEAPF32[$1956>>2];
  $1958 = $1954 * $1957;
  $1959 = $fSlow49;
  $1960 = $fSlow51;
  $1961 = $fTemp20;
  $1962 = $1960 * $1961;
  $1963 = $fSlow50;
  $1964 = (($4) + 464|0);
  $1965 = (($1964) + 4|0);
  $1966 = +HEAPF32[$1965>>2];
  $1967 = $1963 * $1966;
  $1968 = $1962 + $1967;
  $1969 = $1959 * $1968;
  $1970 = $1958 + $1969;
  $1971 = (($4) + 472|0);
  HEAPF32[$1971>>2] = $1970;
  $1972 = (($4) + 472|0);
  $1973 = +HEAPF32[$1972>>2];
  $1974 = $fSlow46;
  $1975 = $fSlow52;
  $1976 = (($4) + 480|0);
  $1977 = (($1976) + 8|0);
  $1978 = +HEAPF32[$1977>>2];
  $1979 = $1975 * $1978;
  $1980 = $fSlow29;
  $1981 = (($4) + 480|0);
  $1982 = (($1981) + 4|0);
  $1983 = +HEAPF32[$1982>>2];
  $1984 = $1980 * $1983;
  $1985 = $1979 + $1984;
  $1986 = $1974 * $1985;
  $1987 = $1973 - $1986;
  $1988 = (($4) + 480|0);
  HEAPF32[$1988>>2] = $1987;
  $1989 = $fSlow36;
  $1990 = (($4) + 492|0);
  $1991 = (($1990) + 4|0);
  $1992 = +HEAPF32[$1991>>2];
  $1993 = $1989 * $1992;
  $fTemp22 = $1993;
  $1994 = $fSlow46;
  $1995 = $fSlow28;
  $1996 = (($4) + 480|0);
  $1997 = +HEAPF32[$1996>>2];
  $1998 = $1995 * $1997;
  $1999 = $fSlow53;
  $2000 = (($4) + 480|0);
  $2001 = (($2000) + 4|0);
  $2002 = +HEAPF32[$2001>>2];
  $2003 = $1999 * $2002;
  $2004 = $1998 + $2003;
  $2005 = $fSlow28;
  $2006 = (($4) + 480|0);
  $2007 = (($2006) + 8|0);
  $2008 = +HEAPF32[$2007>>2];
  $2009 = $2005 * $2008;
  $2010 = $2004 + $2009;
  $2011 = $1994 * $2010;
  $2012 = $fSlow33;
  $2013 = $fSlow34;
  $2014 = (($4) + 492|0);
  $2015 = (($2014) + 8|0);
  $2016 = +HEAPF32[$2015>>2];
  $2017 = $2013 * $2016;
  $2018 = $fTemp22;
  $2019 = $2017 + $2018;
  $2020 = $2012 * $2019;
  $2021 = $2011 - $2020;
  $2022 = (($4) + 492|0);
  HEAPF32[$2022>>2] = $2021;
  $2023 = $fSlow41;
  $2024 = (($4) + 504|0);
  $2025 = (($2024) + 4|0);
  $2026 = +HEAPF32[$2025>>2];
  $2027 = $2023 * $2026;
  $fTemp23 = $2027;
  $2028 = (($4) + 492|0);
  $2029 = (($2028) + 8|0);
  $2030 = +HEAPF32[$2029>>2];
  $2031 = $fSlow33;
  $2032 = $fTemp22;
  $2033 = $fSlow34;
  $2034 = (($4) + 492|0);
  $2035 = +HEAPF32[$2034>>2];
  $2036 = $2033 * $2035;
  $2037 = $2032 + $2036;
  $2038 = $2031 * $2037;
  $2039 = $2030 + $2038;
  $2040 = $fSlow39;
  $2041 = $fSlow42;
  $2042 = (($4) + 504|0);
  $2043 = (($2042) + 8|0);
  $2044 = +HEAPF32[$2043>>2];
  $2045 = $2041 * $2044;
  $2046 = $fTemp23;
  $2047 = $2045 + $2046;
  $2048 = $2040 * $2047;
  $2049 = $2039 - $2048;
  $2050 = (($4) + 504|0);
  HEAPF32[$2050>>2] = $2049;
  $2051 = $fSlow48;
  $2052 = (($4) + 516|0);
  $2053 = (($2052) + 4|0);
  $2054 = +HEAPF32[$2053>>2];
  $2055 = $2051 * $2054;
  $2056 = $fSlow49;
  $2057 = (($4) + 464|0);
  $2058 = +HEAPF32[$2057>>2];
  $2059 = (($4) + 464|0);
  $2060 = (($2059) + 4|0);
  $2061 = +HEAPF32[$2060>>2];
  $2062 = $2058 + $2061;
  $2063 = $2056 * $2062;
  $2064 = $2055 + $2063;
  $2065 = (($4) + 516|0);
  HEAPF32[$2065>>2] = $2064;
  $2066 = (($4) + 516|0);
  $2067 = +HEAPF32[$2066>>2];
  $2068 = $fSlow46;
  $2069 = $fSlow52;
  $2070 = (($4) + 524|0);
  $2071 = (($2070) + 8|0);
  $2072 = +HEAPF32[$2071>>2];
  $2073 = $2069 * $2072;
  $2074 = $fSlow29;
  $2075 = (($4) + 524|0);
  $2076 = (($2075) + 4|0);
  $2077 = +HEAPF32[$2076>>2];
  $2078 = $2074 * $2077;
  $2079 = $2073 + $2078;
  $2080 = $2068 * $2079;
  $2081 = $2067 - $2080;
  $2082 = (($4) + 524|0);
  HEAPF32[$2082>>2] = $2081;
  $2083 = (($4) + 524|0);
  $2084 = (($2083) + 8|0);
  $2085 = +HEAPF32[$2084>>2];
  $2086 = (($4) + 524|0);
  $2087 = +HEAPF32[$2086>>2];
  $2088 = (($4) + 524|0);
  $2089 = (($2088) + 4|0);
  $2090 = +HEAPF32[$2089>>2];
  $2091 = 2.0 * $2090;
  $2092 = $2087 + $2091;
  $2093 = $2085 + $2092;
  $fTemp24 = $2093;
  $2094 = $fSlow46;
  $2095 = $fTemp24;
  $2096 = $2094 * $2095;
  $fTemp25 = $2096;
  $2097 = $fTemp25;
  $2098 = (($4) + 536|0);
  HEAPF32[$2098>>2] = $2097;
  $2099 = $fSlow59;
  $2100 = (($4) + 544|0);
  $2101 = (($2100) + 4|0);
  $2102 = +HEAPF32[$2101>>2];
  $2103 = $2099 * $2102;
  $2104 = $fSlow60;
  $2105 = $fSlow62;
  $2106 = $fTemp24;
  $2107 = $2105 * $2106;
  $2108 = $fSlow61;
  $2109 = (($4) + 536|0);
  $2110 = (($2109) + 4|0);
  $2111 = +HEAPF32[$2110>>2];
  $2112 = $2108 * $2111;
  $2113 = $2107 + $2112;
  $2114 = $2104 * $2113;
  $2115 = $2103 + $2114;
  $2116 = (($4) + 544|0);
  HEAPF32[$2116>>2] = $2115;
  $2117 = (($4) + 544|0);
  $2118 = +HEAPF32[$2117>>2];
  $2119 = $fSlow57;
  $2120 = $fSlow63;
  $2121 = (($4) + 552|0);
  $2122 = (($2121) + 8|0);
  $2123 = +HEAPF32[$2122>>2];
  $2124 = $2120 * $2123;
  $2125 = $fSlow36;
  $2126 = (($4) + 552|0);
  $2127 = (($2126) + 4|0);
  $2128 = +HEAPF32[$2127>>2];
  $2129 = $2125 * $2128;
  $2130 = $2124 + $2129;
  $2131 = $2119 * $2130;
  $2132 = $2118 - $2131;
  $2133 = (($4) + 552|0);
  HEAPF32[$2133>>2] = $2132;
  $2134 = $fSlow41;
  $2135 = (($4) + 564|0);
  $2136 = (($2135) + 4|0);
  $2137 = +HEAPF32[$2136>>2];
  $2138 = $2134 * $2137;
  $fTemp26 = $2138;
  $2139 = $fSlow57;
  $2140 = $fSlow35;
  $2141 = (($4) + 552|0);
  $2142 = +HEAPF32[$2141>>2];
  $2143 = $2140 * $2142;
  $2144 = $fSlow64;
  $2145 = (($4) + 552|0);
  $2146 = (($2145) + 4|0);
  $2147 = +HEAPF32[$2146>>2];
  $2148 = $2144 * $2147;
  $2149 = $2143 + $2148;
  $2150 = $fSlow35;
  $2151 = (($4) + 552|0);
  $2152 = (($2151) + 8|0);
  $2153 = +HEAPF32[$2152>>2];
  $2154 = $2150 * $2153;
  $2155 = $2149 + $2154;
  $2156 = $2139 * $2155;
  $2157 = $fSlow39;
  $2158 = $fSlow42;
  $2159 = (($4) + 564|0);
  $2160 = (($2159) + 8|0);
  $2161 = +HEAPF32[$2160>>2];
  $2162 = $2158 * $2161;
  $2163 = $fTemp26;
  $2164 = $2162 + $2163;
  $2165 = $2157 * $2164;
  $2166 = $2156 - $2165;
  $2167 = (($4) + 564|0);
  HEAPF32[$2167>>2] = $2166;
  $2168 = $fSlow59;
  $2169 = (($4) + 576|0);
  $2170 = (($2169) + 4|0);
  $2171 = +HEAPF32[$2170>>2];
  $2172 = $2168 * $2171;
  $2173 = $fSlow60;
  $2174 = (($4) + 536|0);
  $2175 = +HEAPF32[$2174>>2];
  $2176 = (($4) + 536|0);
  $2177 = (($2176) + 4|0);
  $2178 = +HEAPF32[$2177>>2];
  $2179 = $2175 + $2178;
  $2180 = $2173 * $2179;
  $2181 = $2172 + $2180;
  $2182 = (($4) + 576|0);
  HEAPF32[$2182>>2] = $2181;
  $2183 = (($4) + 576|0);
  $2184 = +HEAPF32[$2183>>2];
  $2185 = $fSlow57;
  $2186 = $fSlow63;
  $2187 = (($4) + 584|0);
  $2188 = (($2187) + 8|0);
  $2189 = +HEAPF32[$2188>>2];
  $2190 = $2186 * $2189;
  $2191 = $fSlow36;
  $2192 = (($4) + 584|0);
  $2193 = (($2192) + 4|0);
  $2194 = +HEAPF32[$2193>>2];
  $2195 = $2191 * $2194;
  $2196 = $2190 + $2195;
  $2197 = $2185 * $2196;
  $2198 = $2184 - $2197;
  $2199 = (($4) + 584|0);
  HEAPF32[$2199>>2] = $2198;
  $2200 = (($4) + 584|0);
  $2201 = (($2200) + 8|0);
  $2202 = +HEAPF32[$2201>>2];
  $2203 = (($4) + 584|0);
  $2204 = +HEAPF32[$2203>>2];
  $2205 = (($4) + 584|0);
  $2206 = (($2205) + 4|0);
  $2207 = +HEAPF32[$2206>>2];
  $2208 = 2.0 * $2207;
  $2209 = $2204 + $2208;
  $2210 = $2202 + $2209;
  $fTemp27 = $2210;
  $2211 = $fSlow57;
  $2212 = $fTemp27;
  $2213 = $2211 * $2212;
  $fTemp28 = $2213;
  $2214 = $fTemp28;
  $2215 = (($4) + 596|0);
  HEAPF32[$2215>>2] = $2214;
  $2216 = $fSlow69;
  $2217 = (($4) + 604|0);
  $2218 = (($2217) + 4|0);
  $2219 = +HEAPF32[$2218>>2];
  $2220 = $2216 * $2219;
  $2221 = $fSlow70;
  $2222 = $fSlow72;
  $2223 = $fTemp27;
  $2224 = $2222 * $2223;
  $2225 = $fSlow71;
  $2226 = (($4) + 596|0);
  $2227 = (($2226) + 4|0);
  $2228 = +HEAPF32[$2227>>2];
  $2229 = $2225 * $2228;
  $2230 = $2224 + $2229;
  $2231 = $2221 * $2230;
  $2232 = $2220 + $2231;
  $2233 = (($4) + 604|0);
  HEAPF32[$2233>>2] = $2232;
  $2234 = (($4) + 604|0);
  $2235 = +HEAPF32[$2234>>2];
  $2236 = $fSlow65;
  $2237 = $fSlow73;
  $2238 = (($4) + 612|0);
  $2239 = (($2238) + 8|0);
  $2240 = +HEAPF32[$2239>>2];
  $2241 = $2237 * $2240;
  $2242 = $fSlow41;
  $2243 = (($4) + 612|0);
  $2244 = (($2243) + 4|0);
  $2245 = +HEAPF32[$2244>>2];
  $2246 = $2242 * $2245;
  $2247 = $2241 + $2246;
  $2248 = $2236 * $2247;
  $2249 = $2235 - $2248;
  $2250 = (($4) + 612|0);
  HEAPF32[$2250>>2] = $2249;
  $2251 = $fSlow69;
  $2252 = (($4) + 624|0);
  $2253 = (($2252) + 4|0);
  $2254 = +HEAPF32[$2253>>2];
  $2255 = $2251 * $2254;
  $2256 = $fSlow70;
  $2257 = (($4) + 596|0);
  $2258 = +HEAPF32[$2257>>2];
  $2259 = (($4) + 596|0);
  $2260 = (($2259) + 4|0);
  $2261 = +HEAPF32[$2260>>2];
  $2262 = $2258 + $2261;
  $2263 = $2256 * $2262;
  $2264 = $2255 + $2263;
  $2265 = (($4) + 624|0);
  HEAPF32[$2265>>2] = $2264;
  $2266 = (($4) + 624|0);
  $2267 = +HEAPF32[$2266>>2];
  $2268 = $fSlow65;
  $2269 = $fSlow73;
  $2270 = (($4) + 632|0);
  $2271 = (($2270) + 8|0);
  $2272 = +HEAPF32[$2271>>2];
  $2273 = $2269 * $2272;
  $2274 = $fSlow41;
  $2275 = (($4) + 632|0);
  $2276 = (($2275) + 4|0);
  $2277 = +HEAPF32[$2276>>2];
  $2278 = $2274 * $2277;
  $2279 = $2273 + $2278;
  $2280 = $2268 * $2279;
  $2281 = $2267 - $2280;
  $2282 = (($4) + 632|0);
  HEAPF32[$2282>>2] = $2281;
  $2283 = $fSlow79;
  $2284 = (($4) + 432|0);
  $2285 = (($2284) + 8|0);
  $2286 = +HEAPF32[$2285>>2];
  $2287 = $fSlow39;
  $2288 = $fTemp19;
  $2289 = $fSlow42;
  $2290 = (($4) + 432|0);
  $2291 = +HEAPF32[$2290>>2];
  $2292 = $2289 * $2291;
  $2293 = $2288 + $2292;
  $2294 = $2287 * $2293;
  $2295 = $2286 + $2294;
  $2296 = $2283 * $2295;
  $2297 = $fSlow80;
  $2298 = (($4) + 504|0);
  $2299 = (($2298) + 8|0);
  $2300 = +HEAPF32[$2299>>2];
  $2301 = $fSlow39;
  $2302 = $fTemp23;
  $2303 = $fSlow42;
  $2304 = (($4) + 504|0);
  $2305 = +HEAPF32[$2304>>2];
  $2306 = $2303 * $2305;
  $2307 = $2302 + $2306;
  $2308 = $2301 * $2307;
  $2309 = $2300 + $2308;
  $2310 = $2297 * $2309;
  $2311 = $2296 + $2310;
  $2312 = $fSlow81;
  $2313 = (($4) + 564|0);
  $2314 = (($2313) + 8|0);
  $2315 = +HEAPF32[$2314>>2];
  $2316 = $fSlow39;
  $2317 = $fTemp26;
  $2318 = $fSlow42;
  $2319 = (($4) + 564|0);
  $2320 = +HEAPF32[$2319>>2];
  $2321 = $2318 * $2320;
  $2322 = $2317 + $2321;
  $2323 = $2316 * $2322;
  $2324 = $2315 + $2323;
  $2325 = $2312 * $2324;
  $2326 = $2311 + $2325;
  $2327 = $fSlow65;
  $2328 = $fSlow82;
  $2329 = $fSlow40;
  $2330 = (($4) + 612|0);
  $2331 = +HEAPF32[$2330>>2];
  $2332 = $2329 * $2331;
  $2333 = $fSlow74;
  $2334 = (($4) + 612|0);
  $2335 = (($2334) + 4|0);
  $2336 = +HEAPF32[$2335>>2];
  $2337 = $2333 * $2336;
  $2338 = $2332 + $2337;
  $2339 = $fSlow40;
  $2340 = (($4) + 612|0);
  $2341 = (($2340) + 8|0);
  $2342 = +HEAPF32[$2341>>2];
  $2343 = $2339 * $2342;
  $2344 = $2338 + $2343;
  $2345 = $2328 * $2344;
  $2346 = $fSlow83;
  $2347 = (($4) + 632|0);
  $2348 = (($2347) + 8|0);
  $2349 = +HEAPF32[$2348>>2];
  $2350 = (($4) + 632|0);
  $2351 = +HEAPF32[$2350>>2];
  $2352 = (($4) + 632|0);
  $2353 = (($2352) + 4|0);
  $2354 = +HEAPF32[$2353>>2];
  $2355 = 2.0 * $2354;
  $2356 = $2351 + $2355;
  $2357 = $2349 + $2356;
  $2358 = $2346 * $2357;
  $2359 = $2345 + $2358;
  $2360 = $2327 * $2359;
  $2361 = $2326 + $2360;
  $fTemp29 = $2361;
  $2362 = $fTemp16;
  $2363 = $fTemp29;
  $2364 = $2362 + $2363;
  $fTemp30 = $2364;
  $2365 = $fSlow19;
  $2366 = (($4) + 644|0);
  $2367 = (($2366) + 4|0);
  $2368 = +HEAPF32[$2367>>2];
  $2369 = $2365 * $2368;
  $2370 = $fSlow20;
  $2371 = $fSlow14;
  $2372 = (($4) + 168132|0);
  $2373 = (($2372) + 4|0);
  $2374 = +HEAPF32[$2373>>2];
  $2375 = $2371 * $2374;
  $2376 = $fSlow21;
  $2377 = (($4) + 168132|0);
  $2378 = (($2377) + 8|0);
  $2379 = +HEAPF32[$2378>>2];
  $2380 = $2376 * $2379;
  $2381 = $2375 + $2380;
  $2382 = $2370 * $2381;
  $2383 = $2369 + $2382;
  $2384 = (($4) + 644|0);
  HEAPF32[$2384>>2] = $2383;
  $2385 = (($4) + 644|0);
  $2386 = +HEAPF32[$2385>>2];
  $2387 = $fSlow16;
  $2388 = $fSlow22;
  $2389 = (($4) + 652|0);
  $2390 = (($2389) + 8|0);
  $2391 = +HEAPF32[$2390>>2];
  $2392 = $2388 * $2391;
  $2393 = $fSlow23;
  $2394 = (($4) + 652|0);
  $2395 = (($2394) + 4|0);
  $2396 = +HEAPF32[$2395>>2];
  $2397 = $2393 * $2396;
  $2398 = $2392 + $2397;
  $2399 = $2387 * $2398;
  $2400 = $2386 - $2399;
  $2401 = (($4) + 652|0);
  HEAPF32[$2401>>2] = $2400;
  $2402 = $fSlow29;
  $2403 = (($4) + 664|0);
  $2404 = (($2403) + 4|0);
  $2405 = +HEAPF32[$2404>>2];
  $2406 = $2402 * $2405;
  $fTemp31 = $2406;
  $2407 = $fSlow16;
  $2408 = $fSlow17;
  $2409 = (($4) + 652|0);
  $2410 = +HEAPF32[$2409>>2];
  $2411 = $2408 * $2410;
  $2412 = $fSlow24;
  $2413 = (($4) + 652|0);
  $2414 = (($2413) + 4|0);
  $2415 = +HEAPF32[$2414>>2];
  $2416 = $2412 * $2415;
  $2417 = $2411 + $2416;
  $2418 = $fSlow17;
  $2419 = (($4) + 652|0);
  $2420 = (($2419) + 8|0);
  $2421 = +HEAPF32[$2420>>2];
  $2422 = $2418 * $2421;
  $2423 = $2417 + $2422;
  $2424 = $2407 * $2423;
  $2425 = $fSlow27;
  $2426 = $fSlow30;
  $2427 = (($4) + 664|0);
  $2428 = (($2427) + 8|0);
  $2429 = +HEAPF32[$2428>>2];
  $2430 = $2426 * $2429;
  $2431 = $fTemp31;
  $2432 = $2430 + $2431;
  $2433 = $2425 * $2432;
  $2434 = $2424 - $2433;
  $2435 = (($4) + 664|0);
  HEAPF32[$2435>>2] = $2434;
  $2436 = $fSlow36;
  $2437 = (($4) + 676|0);
  $2438 = (($2437) + 4|0);
  $2439 = +HEAPF32[$2438>>2];
  $2440 = $2436 * $2439;
  $fTemp32 = $2440;
  $2441 = (($4) + 664|0);
  $2442 = (($2441) + 8|0);
  $2443 = +HEAPF32[$2442>>2];
  $2444 = $fSlow27;
  $2445 = $fTemp31;
  $2446 = $fSlow30;
  $2447 = (($4) + 664|0);
  $2448 = +HEAPF32[$2447>>2];
  $2449 = $2446 * $2448;
  $2450 = $2445 + $2449;
  $2451 = $2444 * $2450;
  $2452 = $2443 + $2451;
  $2453 = $fSlow33;
  $2454 = $fSlow34;
  $2455 = (($4) + 676|0);
  $2456 = (($2455) + 8|0);
  $2457 = +HEAPF32[$2456>>2];
  $2458 = $2454 * $2457;
  $2459 = $fTemp32;
  $2460 = $2458 + $2459;
  $2461 = $2453 * $2460;
  $2462 = $2452 - $2461;
  $2463 = (($4) + 676|0);
  HEAPF32[$2463>>2] = $2462;
  $2464 = $fSlow41;
  $2465 = (($4) + 688|0);
  $2466 = (($2465) + 4|0);
  $2467 = +HEAPF32[$2466>>2];
  $2468 = $2464 * $2467;
  $fTemp33 = $2468;
  $2469 = (($4) + 676|0);
  $2470 = (($2469) + 8|0);
  $2471 = +HEAPF32[$2470>>2];
  $2472 = $fSlow33;
  $2473 = $fTemp32;
  $2474 = $fSlow34;
  $2475 = (($4) + 676|0);
  $2476 = +HEAPF32[$2475>>2];
  $2477 = $2474 * $2476;
  $2478 = $2473 + $2477;
  $2479 = $2472 * $2478;
  $2480 = $2471 + $2479;
  $2481 = $fSlow39;
  $2482 = $fSlow42;
  $2483 = (($4) + 688|0);
  $2484 = (($2483) + 8|0);
  $2485 = +HEAPF32[$2484>>2];
  $2486 = $2482 * $2485;
  $2487 = $fTemp33;
  $2488 = $2486 + $2487;
  $2489 = $2481 * $2488;
  $2490 = $2480 - $2489;
  $2491 = (($4) + 688|0);
  HEAPF32[$2491>>2] = $2490;
  $2492 = $fSlow19;
  $2493 = (($4) + 700|0);
  $2494 = (($2493) + 4|0);
  $2495 = +HEAPF32[$2494>>2];
  $2496 = $2492 * $2495;
  $2497 = $fSlow20;
  $2498 = (($4) + 168132|0);
  $2499 = (($2498) + 4|0);
  $2500 = +HEAPF32[$2499>>2];
  $2501 = (($4) + 168132|0);
  $2502 = (($2501) + 8|0);
  $2503 = +HEAPF32[$2502>>2];
  $2504 = $2500 + $2503;
  $2505 = $2497 * $2504;
  $2506 = $2496 + $2505;
  $2507 = (($4) + 700|0);
  HEAPF32[$2507>>2] = $2506;
  $2508 = (($4) + 700|0);
  $2509 = +HEAPF32[$2508>>2];
  $2510 = $fSlow16;
  $2511 = $fSlow22;
  $2512 = (($4) + 708|0);
  $2513 = (($2512) + 8|0);
  $2514 = +HEAPF32[$2513>>2];
  $2515 = $2511 * $2514;
  $2516 = $fSlow23;
  $2517 = (($4) + 708|0);
  $2518 = (($2517) + 4|0);
  $2519 = +HEAPF32[$2518>>2];
  $2520 = $2516 * $2519;
  $2521 = $2515 + $2520;
  $2522 = $2510 * $2521;
  $2523 = $2509 - $2522;
  $2524 = (($4) + 708|0);
  HEAPF32[$2524>>2] = $2523;
  $2525 = (($4) + 708|0);
  $2526 = (($2525) + 8|0);
  $2527 = +HEAPF32[$2526>>2];
  $2528 = (($4) + 708|0);
  $2529 = +HEAPF32[$2528>>2];
  $2530 = (($4) + 708|0);
  $2531 = (($2530) + 4|0);
  $2532 = +HEAPF32[$2531>>2];
  $2533 = 2.0 * $2532;
  $2534 = $2529 + $2533;
  $2535 = $2527 + $2534;
  $fTemp34 = $2535;
  $2536 = $fSlow16;
  $2537 = $fTemp34;
  $2538 = $2536 * $2537;
  $fTemp35 = $2538;
  $2539 = $fTemp35;
  $2540 = (($4) + 720|0);
  HEAPF32[$2540>>2] = $2539;
  $2541 = $fSlow48;
  $2542 = (($4) + 728|0);
  $2543 = (($2542) + 4|0);
  $2544 = +HEAPF32[$2543>>2];
  $2545 = $2541 * $2544;
  $2546 = $fSlow49;
  $2547 = $fSlow50;
  $2548 = (($4) + 720|0);
  $2549 = (($2548) + 4|0);
  $2550 = +HEAPF32[$2549>>2];
  $2551 = $2547 * $2550;
  $2552 = $fSlow51;
  $2553 = $fTemp34;
  $2554 = $2552 * $2553;
  $2555 = $2551 + $2554;
  $2556 = $2546 * $2555;
  $2557 = $2545 + $2556;
  $2558 = (($4) + 728|0);
  HEAPF32[$2558>>2] = $2557;
  $2559 = (($4) + 728|0);
  $2560 = +HEAPF32[$2559>>2];
  $2561 = $fSlow46;
  $2562 = $fSlow52;
  $2563 = (($4) + 736|0);
  $2564 = (($2563) + 8|0);
  $2565 = +HEAPF32[$2564>>2];
  $2566 = $2562 * $2565;
  $2567 = $fSlow29;
  $2568 = (($4) + 736|0);
  $2569 = (($2568) + 4|0);
  $2570 = +HEAPF32[$2569>>2];
  $2571 = $2567 * $2570;
  $2572 = $2566 + $2571;
  $2573 = $2561 * $2572;
  $2574 = $2560 - $2573;
  $2575 = (($4) + 736|0);
  HEAPF32[$2575>>2] = $2574;
  $2576 = $fSlow36;
  $2577 = (($4) + 748|0);
  $2578 = (($2577) + 4|0);
  $2579 = +HEAPF32[$2578>>2];
  $2580 = $2576 * $2579;
  $fTemp36 = $2580;
  $2581 = $fSlow46;
  $2582 = $fSlow28;
  $2583 = (($4) + 736|0);
  $2584 = +HEAPF32[$2583>>2];
  $2585 = $2582 * $2584;
  $2586 = $fSlow53;
  $2587 = (($4) + 736|0);
  $2588 = (($2587) + 4|0);
  $2589 = +HEAPF32[$2588>>2];
  $2590 = $2586 * $2589;
  $2591 = $2585 + $2590;
  $2592 = $fSlow28;
  $2593 = (($4) + 736|0);
  $2594 = (($2593) + 8|0);
  $2595 = +HEAPF32[$2594>>2];
  $2596 = $2592 * $2595;
  $2597 = $2591 + $2596;
  $2598 = $2581 * $2597;
  $2599 = $fSlow33;
  $2600 = $fSlow34;
  $2601 = (($4) + 748|0);
  $2602 = (($2601) + 8|0);
  $2603 = +HEAPF32[$2602>>2];
  $2604 = $2600 * $2603;
  $2605 = $fTemp36;
  $2606 = $2604 + $2605;
  $2607 = $2599 * $2606;
  $2608 = $2598 - $2607;
  $2609 = (($4) + 748|0);
  HEAPF32[$2609>>2] = $2608;
  $2610 = $fSlow41;
  $2611 = (($4) + 760|0);
  $2612 = (($2611) + 4|0);
  $2613 = +HEAPF32[$2612>>2];
  $2614 = $2610 * $2613;
  $fTemp37 = $2614;
  $2615 = (($4) + 748|0);
  $2616 = (($2615) + 8|0);
  $2617 = +HEAPF32[$2616>>2];
  $2618 = $fSlow33;
  $2619 = $fTemp36;
  $2620 = $fSlow34;
  $2621 = (($4) + 748|0);
  $2622 = +HEAPF32[$2621>>2];
  $2623 = $2620 * $2622;
  $2624 = $2619 + $2623;
  $2625 = $2618 * $2624;
  $2626 = $2617 + $2625;
  $2627 = $fSlow39;
  $2628 = $fSlow42;
  $2629 = (($4) + 760|0);
  $2630 = (($2629) + 8|0);
  $2631 = +HEAPF32[$2630>>2];
  $2632 = $2628 * $2631;
  $2633 = $fTemp37;
  $2634 = $2632 + $2633;
  $2635 = $2627 * $2634;
  $2636 = $2626 - $2635;
  $2637 = (($4) + 760|0);
  HEAPF32[$2637>>2] = $2636;
  $2638 = $fSlow48;
  $2639 = (($4) + 772|0);
  $2640 = (($2639) + 4|0);
  $2641 = +HEAPF32[$2640>>2];
  $2642 = $2638 * $2641;
  $2643 = $fSlow49;
  $2644 = (($4) + 720|0);
  $2645 = +HEAPF32[$2644>>2];
  $2646 = (($4) + 720|0);
  $2647 = (($2646) + 4|0);
  $2648 = +HEAPF32[$2647>>2];
  $2649 = $2645 + $2648;
  $2650 = $2643 * $2649;
  $2651 = $2642 + $2650;
  $2652 = (($4) + 772|0);
  HEAPF32[$2652>>2] = $2651;
  $2653 = (($4) + 772|0);
  $2654 = +HEAPF32[$2653>>2];
  $2655 = $fSlow46;
  $2656 = $fSlow52;
  $2657 = (($4) + 780|0);
  $2658 = (($2657) + 8|0);
  $2659 = +HEAPF32[$2658>>2];
  $2660 = $2656 * $2659;
  $2661 = $fSlow29;
  $2662 = (($4) + 780|0);
  $2663 = (($2662) + 4|0);
  $2664 = +HEAPF32[$2663>>2];
  $2665 = $2661 * $2664;
  $2666 = $2660 + $2665;
  $2667 = $2655 * $2666;
  $2668 = $2654 - $2667;
  $2669 = (($4) + 780|0);
  HEAPF32[$2669>>2] = $2668;
  $2670 = (($4) + 780|0);
  $2671 = (($2670) + 8|0);
  $2672 = +HEAPF32[$2671>>2];
  $2673 = (($4) + 780|0);
  $2674 = +HEAPF32[$2673>>2];
  $2675 = (($4) + 780|0);
  $2676 = (($2675) + 4|0);
  $2677 = +HEAPF32[$2676>>2];
  $2678 = 2.0 * $2677;
  $2679 = $2674 + $2678;
  $2680 = $2672 + $2679;
  $fTemp38 = $2680;
  $2681 = $fSlow46;
  $2682 = $fTemp38;
  $2683 = $2681 * $2682;
  $fTemp39 = $2683;
  $2684 = $fTemp39;
  $2685 = (($4) + 792|0);
  HEAPF32[$2685>>2] = $2684;
  $2686 = $fSlow59;
  $2687 = (($4) + 800|0);
  $2688 = (($2687) + 4|0);
  $2689 = +HEAPF32[$2688>>2];
  $2690 = $2686 * $2689;
  $2691 = $fSlow60;
  $2692 = $fSlow61;
  $2693 = (($4) + 792|0);
  $2694 = (($2693) + 4|0);
  $2695 = +HEAPF32[$2694>>2];
  $2696 = $2692 * $2695;
  $2697 = $fSlow62;
  $2698 = $fTemp38;
  $2699 = $2697 * $2698;
  $2700 = $2696 + $2699;
  $2701 = $2691 * $2700;
  $2702 = $2690 + $2701;
  $2703 = (($4) + 800|0);
  HEAPF32[$2703>>2] = $2702;
  $2704 = (($4) + 800|0);
  $2705 = +HEAPF32[$2704>>2];
  $2706 = $fSlow57;
  $2707 = $fSlow63;
  $2708 = (($4) + 808|0);
  $2709 = (($2708) + 8|0);
  $2710 = +HEAPF32[$2709>>2];
  $2711 = $2707 * $2710;
  $2712 = $fSlow36;
  $2713 = (($4) + 808|0);
  $2714 = (($2713) + 4|0);
  $2715 = +HEAPF32[$2714>>2];
  $2716 = $2712 * $2715;
  $2717 = $2711 + $2716;
  $2718 = $2706 * $2717;
  $2719 = $2705 - $2718;
  $2720 = (($4) + 808|0);
  HEAPF32[$2720>>2] = $2719;
  $2721 = $fSlow41;
  $2722 = (($4) + 820|0);
  $2723 = (($2722) + 4|0);
  $2724 = +HEAPF32[$2723>>2];
  $2725 = $2721 * $2724;
  $fTemp40 = $2725;
  $2726 = $fSlow57;
  $2727 = $fSlow35;
  $2728 = (($4) + 808|0);
  $2729 = +HEAPF32[$2728>>2];
  $2730 = $2727 * $2729;
  $2731 = $fSlow64;
  $2732 = (($4) + 808|0);
  $2733 = (($2732) + 4|0);
  $2734 = +HEAPF32[$2733>>2];
  $2735 = $2731 * $2734;
  $2736 = $2730 + $2735;
  $2737 = $fSlow35;
  $2738 = (($4) + 808|0);
  $2739 = (($2738) + 8|0);
  $2740 = +HEAPF32[$2739>>2];
  $2741 = $2737 * $2740;
  $2742 = $2736 + $2741;
  $2743 = $2726 * $2742;
  $2744 = $fSlow39;
  $2745 = $fSlow42;
  $2746 = (($4) + 820|0);
  $2747 = (($2746) + 8|0);
  $2748 = +HEAPF32[$2747>>2];
  $2749 = $2745 * $2748;
  $2750 = $fTemp40;
  $2751 = $2749 + $2750;
  $2752 = $2744 * $2751;
  $2753 = $2743 - $2752;
  $2754 = (($4) + 820|0);
  HEAPF32[$2754>>2] = $2753;
  $2755 = $fSlow59;
  $2756 = (($4) + 832|0);
  $2757 = (($2756) + 4|0);
  $2758 = +HEAPF32[$2757>>2];
  $2759 = $2755 * $2758;
  $2760 = $fSlow60;
  $2761 = (($4) + 792|0);
  $2762 = +HEAPF32[$2761>>2];
  $2763 = (($4) + 792|0);
  $2764 = (($2763) + 4|0);
  $2765 = +HEAPF32[$2764>>2];
  $2766 = $2762 + $2765;
  $2767 = $2760 * $2766;
  $2768 = $2759 + $2767;
  $2769 = (($4) + 832|0);
  HEAPF32[$2769>>2] = $2768;
  $2770 = (($4) + 832|0);
  $2771 = +HEAPF32[$2770>>2];
  $2772 = $fSlow57;
  $2773 = $fSlow63;
  $2774 = (($4) + 840|0);
  $2775 = (($2774) + 8|0);
  $2776 = +HEAPF32[$2775>>2];
  $2777 = $2773 * $2776;
  $2778 = $fSlow36;
  $2779 = (($4) + 840|0);
  $2780 = (($2779) + 4|0);
  $2781 = +HEAPF32[$2780>>2];
  $2782 = $2778 * $2781;
  $2783 = $2777 + $2782;
  $2784 = $2772 * $2783;
  $2785 = $2771 - $2784;
  $2786 = (($4) + 840|0);
  HEAPF32[$2786>>2] = $2785;
  $2787 = (($4) + 840|0);
  $2788 = (($2787) + 8|0);
  $2789 = +HEAPF32[$2788>>2];
  $2790 = (($4) + 840|0);
  $2791 = +HEAPF32[$2790>>2];
  $2792 = (($4) + 840|0);
  $2793 = (($2792) + 4|0);
  $2794 = +HEAPF32[$2793>>2];
  $2795 = 2.0 * $2794;
  $2796 = $2791 + $2795;
  $2797 = $2789 + $2796;
  $fTemp41 = $2797;
  $2798 = $fSlow57;
  $2799 = $fTemp41;
  $2800 = $2798 * $2799;
  $fTemp42 = $2800;
  $2801 = $fTemp42;
  $2802 = (($4) + 852|0);
  HEAPF32[$2802>>2] = $2801;
  $2803 = $fSlow69;
  $2804 = (($4) + 860|0);
  $2805 = (($2804) + 4|0);
  $2806 = +HEAPF32[$2805>>2];
  $2807 = $2803 * $2806;
  $2808 = $fSlow70;
  $2809 = $fSlow72;
  $2810 = $fTemp41;
  $2811 = $2809 * $2810;
  $2812 = $fSlow71;
  $2813 = (($4) + 852|0);
  $2814 = (($2813) + 4|0);
  $2815 = +HEAPF32[$2814>>2];
  $2816 = $2812 * $2815;
  $2817 = $2811 + $2816;
  $2818 = $2808 * $2817;
  $2819 = $2807 + $2818;
  $2820 = (($4) + 860|0);
  HEAPF32[$2820>>2] = $2819;
  $2821 = (($4) + 860|0);
  $2822 = +HEAPF32[$2821>>2];
  $2823 = $fSlow65;
  $2824 = $fSlow73;
  $2825 = (($4) + 868|0);
  $2826 = (($2825) + 8|0);
  $2827 = +HEAPF32[$2826>>2];
  $2828 = $2824 * $2827;
  $2829 = $fSlow41;
  $2830 = (($4) + 868|0);
  $2831 = (($2830) + 4|0);
  $2832 = +HEAPF32[$2831>>2];
  $2833 = $2829 * $2832;
  $2834 = $2828 + $2833;
  $2835 = $2823 * $2834;
  $2836 = $2822 - $2835;
  $2837 = (($4) + 868|0);
  HEAPF32[$2837>>2] = $2836;
  $2838 = $fSlow69;
  $2839 = (($4) + 880|0);
  $2840 = (($2839) + 4|0);
  $2841 = +HEAPF32[$2840>>2];
  $2842 = $2838 * $2841;
  $2843 = $fSlow70;
  $2844 = (($4) + 852|0);
  $2845 = +HEAPF32[$2844>>2];
  $2846 = (($4) + 852|0);
  $2847 = (($2846) + 4|0);
  $2848 = +HEAPF32[$2847>>2];
  $2849 = $2845 + $2848;
  $2850 = $2843 * $2849;
  $2851 = $2842 + $2850;
  $2852 = (($4) + 880|0);
  HEAPF32[$2852>>2] = $2851;
  $2853 = (($4) + 880|0);
  $2854 = +HEAPF32[$2853>>2];
  $2855 = $fSlow65;
  $2856 = $fSlow73;
  $2857 = (($4) + 888|0);
  $2858 = (($2857) + 8|0);
  $2859 = +HEAPF32[$2858>>2];
  $2860 = $2856 * $2859;
  $2861 = $fSlow41;
  $2862 = (($4) + 888|0);
  $2863 = (($2862) + 4|0);
  $2864 = +HEAPF32[$2863>>2];
  $2865 = $2861 * $2864;
  $2866 = $2860 + $2865;
  $2867 = $2855 * $2866;
  $2868 = $2854 - $2867;
  $2869 = (($4) + 888|0);
  HEAPF32[$2869>>2] = $2868;
  $2870 = $fSlow86;
  $2871 = (($4) + 688|0);
  $2872 = (($2871) + 8|0);
  $2873 = +HEAPF32[$2872>>2];
  $2874 = $fSlow39;
  $2875 = $fTemp33;
  $2876 = $fSlow42;
  $2877 = (($4) + 688|0);
  $2878 = +HEAPF32[$2877>>2];
  $2879 = $2876 * $2878;
  $2880 = $2875 + $2879;
  $2881 = $2874 * $2880;
  $2882 = $2873 + $2881;
  $2883 = $2870 * $2882;
  $2884 = $fSlow87;
  $2885 = (($4) + 760|0);
  $2886 = (($2885) + 8|0);
  $2887 = +HEAPF32[$2886>>2];
  $2888 = $fSlow39;
  $2889 = $fTemp37;
  $2890 = $fSlow42;
  $2891 = (($4) + 760|0);
  $2892 = +HEAPF32[$2891>>2];
  $2893 = $2890 * $2892;
  $2894 = $2889 + $2893;
  $2895 = $2888 * $2894;
  $2896 = $2887 + $2895;
  $2897 = $2884 * $2896;
  $2898 = $2883 + $2897;
  $2899 = $fSlow88;
  $2900 = (($4) + 820|0);
  $2901 = (($2900) + 8|0);
  $2902 = +HEAPF32[$2901>>2];
  $2903 = $fSlow39;
  $2904 = $fTemp40;
  $2905 = $fSlow42;
  $2906 = (($4) + 820|0);
  $2907 = +HEAPF32[$2906>>2];
  $2908 = $2905 * $2907;
  $2909 = $2904 + $2908;
  $2910 = $2903 * $2909;
  $2911 = $2902 + $2910;
  $2912 = $2899 * $2911;
  $2913 = $2898 + $2912;
  $2914 = $fSlow65;
  $2915 = $fSlow89;
  $2916 = $fSlow40;
  $2917 = (($4) + 868|0);
  $2918 = +HEAPF32[$2917>>2];
  $2919 = $2916 * $2918;
  $2920 = $fSlow74;
  $2921 = (($4) + 868|0);
  $2922 = (($2921) + 4|0);
  $2923 = +HEAPF32[$2922>>2];
  $2924 = $2920 * $2923;
  $2925 = $2919 + $2924;
  $2926 = $fSlow40;
  $2927 = (($4) + 868|0);
  $2928 = (($2927) + 8|0);
  $2929 = +HEAPF32[$2928>>2];
  $2930 = $2926 * $2929;
  $2931 = $2925 + $2930;
  $2932 = $2915 * $2931;
  $2933 = $fSlow90;
  $2934 = (($4) + 888|0);
  $2935 = (($2934) + 8|0);
  $2936 = +HEAPF32[$2935>>2];
  $2937 = (($4) + 888|0);
  $2938 = +HEAPF32[$2937>>2];
  $2939 = (($4) + 888|0);
  $2940 = (($2939) + 4|0);
  $2941 = +HEAPF32[$2940>>2];
  $2942 = 2.0 * $2941;
  $2943 = $2938 + $2942;
  $2944 = $2936 + $2943;
  $2945 = $2933 * $2944;
  $2946 = $2932 + $2945;
  $2947 = $2914 * $2946;
  $2948 = $2913 + $2947;
  $fTemp43 = $2948;
  $2949 = $fSlow19;
  $2950 = (($4) + 900|0);
  $2951 = (($2950) + 4|0);
  $2952 = +HEAPF32[$2951>>2];
  $2953 = $2949 * $2952;
  $2954 = $fSlow20;
  $2955 = $fSlow14;
  $2956 = (($4) + 430372|0);
  $2957 = (($2956) + 4|0);
  $2958 = +HEAPF32[$2957>>2];
  $2959 = $2955 * $2958;
  $2960 = $fSlow21;
  $2961 = (($4) + 430372|0);
  $2962 = (($2961) + 8|0);
  $2963 = +HEAPF32[$2962>>2];
  $2964 = $2960 * $2963;
  $2965 = $2959 + $2964;
  $2966 = $2954 * $2965;
  $2967 = $2953 + $2966;
  $2968 = (($4) + 900|0);
  HEAPF32[$2968>>2] = $2967;
  $2969 = (($4) + 900|0);
  $2970 = +HEAPF32[$2969>>2];
  $2971 = $fSlow16;
  $2972 = $fSlow22;
  $2973 = (($4) + 908|0);
  $2974 = (($2973) + 8|0);
  $2975 = +HEAPF32[$2974>>2];
  $2976 = $2972 * $2975;
  $2977 = $fSlow23;
  $2978 = (($4) + 908|0);
  $2979 = (($2978) + 4|0);
  $2980 = +HEAPF32[$2979>>2];
  $2981 = $2977 * $2980;
  $2982 = $2976 + $2981;
  $2983 = $2971 * $2982;
  $2984 = $2970 - $2983;
  $2985 = (($4) + 908|0);
  HEAPF32[$2985>>2] = $2984;
  $2986 = $fSlow29;
  $2987 = (($4) + 920|0);
  $2988 = (($2987) + 4|0);
  $2989 = +HEAPF32[$2988>>2];
  $2990 = $2986 * $2989;
  $fTemp44 = $2990;
  $2991 = $fSlow16;
  $2992 = $fSlow17;
  $2993 = (($4) + 908|0);
  $2994 = +HEAPF32[$2993>>2];
  $2995 = $2992 * $2994;
  $2996 = $fSlow24;
  $2997 = (($4) + 908|0);
  $2998 = (($2997) + 4|0);
  $2999 = +HEAPF32[$2998>>2];
  $3000 = $2996 * $2999;
  $3001 = $2995 + $3000;
  $3002 = $fSlow17;
  $3003 = (($4) + 908|0);
  $3004 = (($3003) + 8|0);
  $3005 = +HEAPF32[$3004>>2];
  $3006 = $3002 * $3005;
  $3007 = $3001 + $3006;
  $3008 = $2991 * $3007;
  $3009 = $fSlow27;
  $3010 = $fSlow30;
  $3011 = (($4) + 920|0);
  $3012 = (($3011) + 8|0);
  $3013 = +HEAPF32[$3012>>2];
  $3014 = $3010 * $3013;
  $3015 = $fTemp44;
  $3016 = $3014 + $3015;
  $3017 = $3009 * $3016;
  $3018 = $3008 - $3017;
  $3019 = (($4) + 920|0);
  HEAPF32[$3019>>2] = $3018;
  $3020 = $fSlow36;
  $3021 = (($4) + 932|0);
  $3022 = (($3021) + 4|0);
  $3023 = +HEAPF32[$3022>>2];
  $3024 = $3020 * $3023;
  $fTemp45 = $3024;
  $3025 = (($4) + 920|0);
  $3026 = (($3025) + 8|0);
  $3027 = +HEAPF32[$3026>>2];
  $3028 = $fSlow27;
  $3029 = $fTemp44;
  $3030 = $fSlow30;
  $3031 = (($4) + 920|0);
  $3032 = +HEAPF32[$3031>>2];
  $3033 = $3030 * $3032;
  $3034 = $3029 + $3033;
  $3035 = $3028 * $3034;
  $3036 = $3027 + $3035;
  $3037 = $fSlow33;
  $3038 = $fSlow34;
  $3039 = (($4) + 932|0);
  $3040 = (($3039) + 8|0);
  $3041 = +HEAPF32[$3040>>2];
  $3042 = $3038 * $3041;
  $3043 = $fTemp45;
  $3044 = $3042 + $3043;
  $3045 = $3037 * $3044;
  $3046 = $3036 - $3045;
  $3047 = (($4) + 932|0);
  HEAPF32[$3047>>2] = $3046;
  $3048 = $fSlow41;
  $3049 = (($4) + 944|0);
  $3050 = (($3049) + 4|0);
  $3051 = +HEAPF32[$3050>>2];
  $3052 = $3048 * $3051;
  $fTemp46 = $3052;
  $3053 = (($4) + 932|0);
  $3054 = (($3053) + 8|0);
  $3055 = +HEAPF32[$3054>>2];
  $3056 = $fSlow33;
  $3057 = $fTemp45;
  $3058 = $fSlow34;
  $3059 = (($4) + 932|0);
  $3060 = +HEAPF32[$3059>>2];
  $3061 = $3058 * $3060;
  $3062 = $3057 + $3061;
  $3063 = $3056 * $3062;
  $3064 = $3055 + $3063;
  $3065 = $fSlow39;
  $3066 = $fSlow42;
  $3067 = (($4) + 944|0);
  $3068 = (($3067) + 8|0);
  $3069 = +HEAPF32[$3068>>2];
  $3070 = $3066 * $3069;
  $3071 = $fTemp46;
  $3072 = $3070 + $3071;
  $3073 = $3065 * $3072;
  $3074 = $3064 - $3073;
  $3075 = (($4) + 944|0);
  HEAPF32[$3075>>2] = $3074;
  $3076 = $fSlow19;
  $3077 = (($4) + 956|0);
  $3078 = (($3077) + 4|0);
  $3079 = +HEAPF32[$3078>>2];
  $3080 = $3076 * $3079;
  $3081 = $fSlow20;
  $3082 = (($4) + 430372|0);
  $3083 = (($3082) + 4|0);
  $3084 = +HEAPF32[$3083>>2];
  $3085 = (($4) + 430372|0);
  $3086 = (($3085) + 8|0);
  $3087 = +HEAPF32[$3086>>2];
  $3088 = $3084 + $3087;
  $3089 = $3081 * $3088;
  $3090 = $3080 + $3089;
  $3091 = (($4) + 956|0);
  HEAPF32[$3091>>2] = $3090;
  $3092 = (($4) + 956|0);
  $3093 = +HEAPF32[$3092>>2];
  $3094 = $fSlow16;
  $3095 = $fSlow22;
  $3096 = (($4) + 964|0);
  $3097 = (($3096) + 8|0);
  $3098 = +HEAPF32[$3097>>2];
  $3099 = $3095 * $3098;
  $3100 = $fSlow23;
  $3101 = (($4) + 964|0);
  $3102 = (($3101) + 4|0);
  $3103 = +HEAPF32[$3102>>2];
  $3104 = $3100 * $3103;
  $3105 = $3099 + $3104;
  $3106 = $3094 * $3105;
  $3107 = $3093 - $3106;
  $3108 = (($4) + 964|0);
  HEAPF32[$3108>>2] = $3107;
  $3109 = (($4) + 964|0);
  $3110 = (($3109) + 8|0);
  $3111 = +HEAPF32[$3110>>2];
  $3112 = (($4) + 964|0);
  $3113 = +HEAPF32[$3112>>2];
  $3114 = (($4) + 964|0);
  $3115 = (($3114) + 4|0);
  $3116 = +HEAPF32[$3115>>2];
  $3117 = 2.0 * $3116;
  $3118 = $3113 + $3117;
  $3119 = $3111 + $3118;
  $fTemp47 = $3119;
  $3120 = $fSlow16;
  $3121 = $fTemp47;
  $3122 = $3120 * $3121;
  $fTemp48 = $3122;
  $3123 = $fTemp48;
  $3124 = (($4) + 976|0);
  HEAPF32[$3124>>2] = $3123;
  $3125 = $fSlow48;
  $3126 = (($4) + 984|0);
  $3127 = (($3126) + 4|0);
  $3128 = +HEAPF32[$3127>>2];
  $3129 = $3125 * $3128;
  $3130 = $fSlow49;
  $3131 = $fSlow50;
  $3132 = (($4) + 976|0);
  $3133 = (($3132) + 4|0);
  $3134 = +HEAPF32[$3133>>2];
  $3135 = $3131 * $3134;
  $3136 = $fSlow51;
  $3137 = $fTemp47;
  $3138 = $3136 * $3137;
  $3139 = $3135 + $3138;
  $3140 = $3130 * $3139;
  $3141 = $3129 + $3140;
  $3142 = (($4) + 984|0);
  HEAPF32[$3142>>2] = $3141;
  $3143 = (($4) + 984|0);
  $3144 = +HEAPF32[$3143>>2];
  $3145 = $fSlow46;
  $3146 = $fSlow52;
  $3147 = (($4) + 992|0);
  $3148 = (($3147) + 8|0);
  $3149 = +HEAPF32[$3148>>2];
  $3150 = $3146 * $3149;
  $3151 = $fSlow29;
  $3152 = (($4) + 992|0);
  $3153 = (($3152) + 4|0);
  $3154 = +HEAPF32[$3153>>2];
  $3155 = $3151 * $3154;
  $3156 = $3150 + $3155;
  $3157 = $3145 * $3156;
  $3158 = $3144 - $3157;
  $3159 = (($4) + 992|0);
  HEAPF32[$3159>>2] = $3158;
  $3160 = $fSlow36;
  $3161 = (($4) + 1004|0);
  $3162 = (($3161) + 4|0);
  $3163 = +HEAPF32[$3162>>2];
  $3164 = $3160 * $3163;
  $fTemp49 = $3164;
  $3165 = $fSlow46;
  $3166 = $fSlow28;
  $3167 = (($4) + 992|0);
  $3168 = +HEAPF32[$3167>>2];
  $3169 = $3166 * $3168;
  $3170 = $fSlow53;
  $3171 = (($4) + 992|0);
  $3172 = (($3171) + 4|0);
  $3173 = +HEAPF32[$3172>>2];
  $3174 = $3170 * $3173;
  $3175 = $3169 + $3174;
  $3176 = $fSlow28;
  $3177 = (($4) + 992|0);
  $3178 = (($3177) + 8|0);
  $3179 = +HEAPF32[$3178>>2];
  $3180 = $3176 * $3179;
  $3181 = $3175 + $3180;
  $3182 = $3165 * $3181;
  $3183 = $fSlow33;
  $3184 = $fSlow34;
  $3185 = (($4) + 1004|0);
  $3186 = (($3185) + 8|0);
  $3187 = +HEAPF32[$3186>>2];
  $3188 = $3184 * $3187;
  $3189 = $fTemp49;
  $3190 = $3188 + $3189;
  $3191 = $3183 * $3190;
  $3192 = $3182 - $3191;
  $3193 = (($4) + 1004|0);
  HEAPF32[$3193>>2] = $3192;
  $3194 = $fSlow41;
  $3195 = (($4) + 1016|0);
  $3196 = (($3195) + 4|0);
  $3197 = +HEAPF32[$3196>>2];
  $3198 = $3194 * $3197;
  $fTemp50 = $3198;
  $3199 = (($4) + 1004|0);
  $3200 = (($3199) + 8|0);
  $3201 = +HEAPF32[$3200>>2];
  $3202 = $fSlow33;
  $3203 = $fTemp49;
  $3204 = $fSlow34;
  $3205 = (($4) + 1004|0);
  $3206 = +HEAPF32[$3205>>2];
  $3207 = $3204 * $3206;
  $3208 = $3203 + $3207;
  $3209 = $3202 * $3208;
  $3210 = $3201 + $3209;
  $3211 = $fSlow39;
  $3212 = $fSlow42;
  $3213 = (($4) + 1016|0);
  $3214 = (($3213) + 8|0);
  $3215 = +HEAPF32[$3214>>2];
  $3216 = $3212 * $3215;
  $3217 = $fTemp50;
  $3218 = $3216 + $3217;
  $3219 = $3211 * $3218;
  $3220 = $3210 - $3219;
  $3221 = (($4) + 1016|0);
  HEAPF32[$3221>>2] = $3220;
  $3222 = $fSlow48;
  $3223 = (($4) + 1028|0);
  $3224 = (($3223) + 4|0);
  $3225 = +HEAPF32[$3224>>2];
  $3226 = $3222 * $3225;
  $3227 = $fSlow49;
  $3228 = (($4) + 976|0);
  $3229 = +HEAPF32[$3228>>2];
  $3230 = (($4) + 976|0);
  $3231 = (($3230) + 4|0);
  $3232 = +HEAPF32[$3231>>2];
  $3233 = $3229 + $3232;
  $3234 = $3227 * $3233;
  $3235 = $3226 + $3234;
  $3236 = (($4) + 1028|0);
  HEAPF32[$3236>>2] = $3235;
  $3237 = (($4) + 1028|0);
  $3238 = +HEAPF32[$3237>>2];
  $3239 = $fSlow46;
  $3240 = $fSlow52;
  $3241 = (($4) + 1036|0);
  $3242 = (($3241) + 8|0);
  $3243 = +HEAPF32[$3242>>2];
  $3244 = $3240 * $3243;
  $3245 = $fSlow29;
  $3246 = (($4) + 1036|0);
  $3247 = (($3246) + 4|0);
  $3248 = +HEAPF32[$3247>>2];
  $3249 = $3245 * $3248;
  $3250 = $3244 + $3249;
  $3251 = $3239 * $3250;
  $3252 = $3238 - $3251;
  $3253 = (($4) + 1036|0);
  HEAPF32[$3253>>2] = $3252;
  $3254 = (($4) + 1036|0);
  $3255 = (($3254) + 8|0);
  $3256 = +HEAPF32[$3255>>2];
  $3257 = (($4) + 1036|0);
  $3258 = +HEAPF32[$3257>>2];
  $3259 = (($4) + 1036|0);
  $3260 = (($3259) + 4|0);
  $3261 = +HEAPF32[$3260>>2];
  $3262 = 2.0 * $3261;
  $3263 = $3258 + $3262;
  $3264 = $3256 + $3263;
  $fTemp51 = $3264;
  $3265 = $fSlow46;
  $3266 = $fTemp51;
  $3267 = $3265 * $3266;
  $fTemp52 = $3267;
  $3268 = $fTemp52;
  $3269 = (($4) + 1048|0);
  HEAPF32[$3269>>2] = $3268;
  $3270 = $fSlow59;
  $3271 = (($4) + 1056|0);
  $3272 = (($3271) + 4|0);
  $3273 = +HEAPF32[$3272>>2];
  $3274 = $3270 * $3273;
  $3275 = $fSlow60;
  $3276 = $fSlow61;
  $3277 = (($4) + 1048|0);
  $3278 = (($3277) + 4|0);
  $3279 = +HEAPF32[$3278>>2];
  $3280 = $3276 * $3279;
  $3281 = $fSlow62;
  $3282 = $fTemp51;
  $3283 = $3281 * $3282;
  $3284 = $3280 + $3283;
  $3285 = $3275 * $3284;
  $3286 = $3274 + $3285;
  $3287 = (($4) + 1056|0);
  HEAPF32[$3287>>2] = $3286;
  $3288 = (($4) + 1056|0);
  $3289 = +HEAPF32[$3288>>2];
  $3290 = $fSlow57;
  $3291 = $fSlow63;
  $3292 = (($4) + 1064|0);
  $3293 = (($3292) + 8|0);
  $3294 = +HEAPF32[$3293>>2];
  $3295 = $3291 * $3294;
  $3296 = $fSlow36;
  $3297 = (($4) + 1064|0);
  $3298 = (($3297) + 4|0);
  $3299 = +HEAPF32[$3298>>2];
  $3300 = $3296 * $3299;
  $3301 = $3295 + $3300;
  $3302 = $3290 * $3301;
  $3303 = $3289 - $3302;
  $3304 = (($4) + 1064|0);
  HEAPF32[$3304>>2] = $3303;
  $3305 = $fSlow41;
  $3306 = (($4) + 1076|0);
  $3307 = (($3306) + 4|0);
  $3308 = +HEAPF32[$3307>>2];
  $3309 = $3305 * $3308;
  $fTemp53 = $3309;
  $3310 = $fSlow57;
  $3311 = $fSlow35;
  $3312 = (($4) + 1064|0);
  $3313 = +HEAPF32[$3312>>2];
  $3314 = $3311 * $3313;
  $3315 = $fSlow64;
  $3316 = (($4) + 1064|0);
  $3317 = (($3316) + 4|0);
  $3318 = +HEAPF32[$3317>>2];
  $3319 = $3315 * $3318;
  $3320 = $3314 + $3319;
  $3321 = $fSlow35;
  $3322 = (($4) + 1064|0);
  $3323 = (($3322) + 8|0);
  $3324 = +HEAPF32[$3323>>2];
  $3325 = $3321 * $3324;
  $3326 = $3320 + $3325;
  $3327 = $3310 * $3326;
  $3328 = $fSlow39;
  $3329 = $fSlow42;
  $3330 = (($4) + 1076|0);
  $3331 = (($3330) + 8|0);
  $3332 = +HEAPF32[$3331>>2];
  $3333 = $3329 * $3332;
  $3334 = $fTemp53;
  $3335 = $3333 + $3334;
  $3336 = $3328 * $3335;
  $3337 = $3327 - $3336;
  $3338 = (($4) + 1076|0);
  HEAPF32[$3338>>2] = $3337;
  $3339 = $fSlow59;
  $3340 = (($4) + 1088|0);
  $3341 = (($3340) + 4|0);
  $3342 = +HEAPF32[$3341>>2];
  $3343 = $3339 * $3342;
  $3344 = $fSlow60;
  $3345 = (($4) + 1048|0);
  $3346 = +HEAPF32[$3345>>2];
  $3347 = (($4) + 1048|0);
  $3348 = (($3347) + 4|0);
  $3349 = +HEAPF32[$3348>>2];
  $3350 = $3346 + $3349;
  $3351 = $3344 * $3350;
  $3352 = $3343 + $3351;
  $3353 = (($4) + 1088|0);
  HEAPF32[$3353>>2] = $3352;
  $3354 = (($4) + 1088|0);
  $3355 = +HEAPF32[$3354>>2];
  $3356 = $fSlow57;
  $3357 = $fSlow63;
  $3358 = (($4) + 1096|0);
  $3359 = (($3358) + 8|0);
  $3360 = +HEAPF32[$3359>>2];
  $3361 = $3357 * $3360;
  $3362 = $fSlow36;
  $3363 = (($4) + 1096|0);
  $3364 = (($3363) + 4|0);
  $3365 = +HEAPF32[$3364>>2];
  $3366 = $3362 * $3365;
  $3367 = $3361 + $3366;
  $3368 = $3356 * $3367;
  $3369 = $3355 - $3368;
  $3370 = (($4) + 1096|0);
  HEAPF32[$3370>>2] = $3369;
  $3371 = (($4) + 1096|0);
  $3372 = (($3371) + 8|0);
  $3373 = +HEAPF32[$3372>>2];
  $3374 = (($4) + 1096|0);
  $3375 = +HEAPF32[$3374>>2];
  $3376 = (($4) + 1096|0);
  $3377 = (($3376) + 4|0);
  $3378 = +HEAPF32[$3377>>2];
  $3379 = 2.0 * $3378;
  $3380 = $3375 + $3379;
  $3381 = $3373 + $3380;
  $fTemp54 = $3381;
  $3382 = $fSlow57;
  $3383 = $fTemp54;
  $3384 = $3382 * $3383;
  $fTemp55 = $3384;
  $3385 = $fTemp55;
  $3386 = (($4) + 1108|0);
  HEAPF32[$3386>>2] = $3385;
  $3387 = $fSlow69;
  $3388 = (($4) + 1116|0);
  $3389 = (($3388) + 4|0);
  $3390 = +HEAPF32[$3389>>2];
  $3391 = $3387 * $3390;
  $3392 = $fSlow70;
  $3393 = $fSlow72;
  $3394 = $fTemp54;
  $3395 = $3393 * $3394;
  $3396 = $fSlow71;
  $3397 = (($4) + 1108|0);
  $3398 = (($3397) + 4|0);
  $3399 = +HEAPF32[$3398>>2];
  $3400 = $3396 * $3399;
  $3401 = $3395 + $3400;
  $3402 = $3392 * $3401;
  $3403 = $3391 + $3402;
  $3404 = (($4) + 1116|0);
  HEAPF32[$3404>>2] = $3403;
  $3405 = (($4) + 1116|0);
  $3406 = +HEAPF32[$3405>>2];
  $3407 = $fSlow65;
  $3408 = $fSlow73;
  $3409 = (($4) + 1124|0);
  $3410 = (($3409) + 8|0);
  $3411 = +HEAPF32[$3410>>2];
  $3412 = $3408 * $3411;
  $3413 = $fSlow41;
  $3414 = (($4) + 1124|0);
  $3415 = (($3414) + 4|0);
  $3416 = +HEAPF32[$3415>>2];
  $3417 = $3413 * $3416;
  $3418 = $3412 + $3417;
  $3419 = $3407 * $3418;
  $3420 = $3406 - $3419;
  $3421 = (($4) + 1124|0);
  HEAPF32[$3421>>2] = $3420;
  $3422 = $fSlow69;
  $3423 = (($4) + 1136|0);
  $3424 = (($3423) + 4|0);
  $3425 = +HEAPF32[$3424>>2];
  $3426 = $3422 * $3425;
  $3427 = $fSlow70;
  $3428 = (($4) + 1108|0);
  $3429 = +HEAPF32[$3428>>2];
  $3430 = (($4) + 1108|0);
  $3431 = (($3430) + 4|0);
  $3432 = +HEAPF32[$3431>>2];
  $3433 = $3429 + $3432;
  $3434 = $3427 * $3433;
  $3435 = $3426 + $3434;
  $3436 = (($4) + 1136|0);
  HEAPF32[$3436>>2] = $3435;
  $3437 = (($4) + 1136|0);
  $3438 = +HEAPF32[$3437>>2];
  $3439 = $fSlow65;
  $3440 = $fSlow73;
  $3441 = (($4) + 1144|0);
  $3442 = (($3441) + 8|0);
  $3443 = +HEAPF32[$3442>>2];
  $3444 = $3440 * $3443;
  $3445 = $fSlow41;
  $3446 = (($4) + 1144|0);
  $3447 = (($3446) + 4|0);
  $3448 = +HEAPF32[$3447>>2];
  $3449 = $3445 * $3448;
  $3450 = $3444 + $3449;
  $3451 = $3439 * $3450;
  $3452 = $3438 - $3451;
  $3453 = (($4) + 1144|0);
  HEAPF32[$3453>>2] = $3452;
  $3454 = $fSlow93;
  $3455 = (($4) + 944|0);
  $3456 = (($3455) + 8|0);
  $3457 = +HEAPF32[$3456>>2];
  $3458 = $fSlow39;
  $3459 = $fTemp46;
  $3460 = $fSlow42;
  $3461 = (($4) + 944|0);
  $3462 = +HEAPF32[$3461>>2];
  $3463 = $3460 * $3462;
  $3464 = $3459 + $3463;
  $3465 = $3458 * $3464;
  $3466 = $3457 + $3465;
  $3467 = $3454 * $3466;
  $3468 = $fSlow94;
  $3469 = (($4) + 1016|0);
  $3470 = (($3469) + 8|0);
  $3471 = +HEAPF32[$3470>>2];
  $3472 = $fSlow39;
  $3473 = $fTemp50;
  $3474 = $fSlow42;
  $3475 = (($4) + 1016|0);
  $3476 = +HEAPF32[$3475>>2];
  $3477 = $3474 * $3476;
  $3478 = $3473 + $3477;
  $3479 = $3472 * $3478;
  $3480 = $3471 + $3479;
  $3481 = $3468 * $3480;
  $3482 = $3467 + $3481;
  $3483 = $fSlow95;
  $3484 = (($4) + 1076|0);
  $3485 = (($3484) + 8|0);
  $3486 = +HEAPF32[$3485>>2];
  $3487 = $fSlow39;
  $3488 = $fTemp53;
  $3489 = $fSlow42;
  $3490 = (($4) + 1076|0);
  $3491 = +HEAPF32[$3490>>2];
  $3492 = $3489 * $3491;
  $3493 = $3488 + $3492;
  $3494 = $3487 * $3493;
  $3495 = $3486 + $3494;
  $3496 = $3483 * $3495;
  $3497 = $3482 + $3496;
  $3498 = $fSlow65;
  $3499 = $fSlow96;
  $3500 = $fSlow40;
  $3501 = (($4) + 1124|0);
  $3502 = +HEAPF32[$3501>>2];
  $3503 = $3500 * $3502;
  $3504 = $fSlow74;
  $3505 = (($4) + 1124|0);
  $3506 = (($3505) + 4|0);
  $3507 = +HEAPF32[$3506>>2];
  $3508 = $3504 * $3507;
  $3509 = $3503 + $3508;
  $3510 = $fSlow40;
  $3511 = (($4) + 1124|0);
  $3512 = (($3511) + 8|0);
  $3513 = +HEAPF32[$3512>>2];
  $3514 = $3510 * $3513;
  $3515 = $3509 + $3514;
  $3516 = $3499 * $3515;
  $3517 = $fSlow97;
  $3518 = (($4) + 1144|0);
  $3519 = (($3518) + 8|0);
  $3520 = +HEAPF32[$3519>>2];
  $3521 = (($4) + 1144|0);
  $3522 = +HEAPF32[$3521>>2];
  $3523 = (($4) + 1144|0);
  $3524 = (($3523) + 4|0);
  $3525 = +HEAPF32[$3524>>2];
  $3526 = 2.0 * $3525;
  $3527 = $3522 + $3526;
  $3528 = $3520 + $3527;
  $3529 = $3517 * $3528;
  $3530 = $3516 + $3529;
  $3531 = $3498 * $3530;
  $3532 = $3497 + $3531;
  $fTemp56 = $3532;
  $3533 = $fTemp43;
  $3534 = $fTemp56;
  $3535 = $3533 + $3534;
  $fTemp57 = $3535;
  $3536 = $fTemp30;
  $3537 = $fTemp57;
  $3538 = $3536 + $3537;
  $fTemp58 = $3538;
  $3539 = $fSlow19;
  $3540 = (($4) + 1156|0);
  $3541 = (($3540) + 4|0);
  $3542 = +HEAPF32[$3541>>2];
  $3543 = $3539 * $3542;
  $3544 = $fSlow20;
  $3545 = $fSlow14;
  $3546 = (($4) + 102572|0);
  $3547 = (($3546) + 4|0);
  $3548 = +HEAPF32[$3547>>2];
  $3549 = $3545 * $3548;
  $3550 = $fSlow21;
  $3551 = (($4) + 102572|0);
  $3552 = (($3551) + 8|0);
  $3553 = +HEAPF32[$3552>>2];
  $3554 = $3550 * $3553;
  $3555 = $3549 + $3554;
  $3556 = $3544 * $3555;
  $3557 = $3543 + $3556;
  $3558 = (($4) + 1156|0);
  HEAPF32[$3558>>2] = $3557;
  $3559 = (($4) + 1156|0);
  $3560 = +HEAPF32[$3559>>2];
  $3561 = $fSlow16;
  $3562 = $fSlow22;
  $3563 = (($4) + 1164|0);
  $3564 = (($3563) + 8|0);
  $3565 = +HEAPF32[$3564>>2];
  $3566 = $3562 * $3565;
  $3567 = $fSlow23;
  $3568 = (($4) + 1164|0);
  $3569 = (($3568) + 4|0);
  $3570 = +HEAPF32[$3569>>2];
  $3571 = $3567 * $3570;
  $3572 = $3566 + $3571;
  $3573 = $3561 * $3572;
  $3574 = $3560 - $3573;
  $3575 = (($4) + 1164|0);
  HEAPF32[$3575>>2] = $3574;
  $3576 = $fSlow29;
  $3577 = (($4) + 1176|0);
  $3578 = (($3577) + 4|0);
  $3579 = +HEAPF32[$3578>>2];
  $3580 = $3576 * $3579;
  $fTemp59 = $3580;
  $3581 = $fSlow16;
  $3582 = $fSlow17;
  $3583 = (($4) + 1164|0);
  $3584 = +HEAPF32[$3583>>2];
  $3585 = $3582 * $3584;
  $3586 = $fSlow24;
  $3587 = (($4) + 1164|0);
  $3588 = (($3587) + 4|0);
  $3589 = +HEAPF32[$3588>>2];
  $3590 = $3586 * $3589;
  $3591 = $3585 + $3590;
  $3592 = $fSlow17;
  $3593 = (($4) + 1164|0);
  $3594 = (($3593) + 8|0);
  $3595 = +HEAPF32[$3594>>2];
  $3596 = $3592 * $3595;
  $3597 = $3591 + $3596;
  $3598 = $3581 * $3597;
  $3599 = $fSlow27;
  $3600 = $fSlow30;
  $3601 = (($4) + 1176|0);
  $3602 = (($3601) + 8|0);
  $3603 = +HEAPF32[$3602>>2];
  $3604 = $3600 * $3603;
  $3605 = $fTemp59;
  $3606 = $3604 + $3605;
  $3607 = $3599 * $3606;
  $3608 = $3598 - $3607;
  $3609 = (($4) + 1176|0);
  HEAPF32[$3609>>2] = $3608;
  $3610 = $fSlow36;
  $3611 = (($4) + 1188|0);
  $3612 = (($3611) + 4|0);
  $3613 = +HEAPF32[$3612>>2];
  $3614 = $3610 * $3613;
  $fTemp60 = $3614;
  $3615 = (($4) + 1176|0);
  $3616 = (($3615) + 8|0);
  $3617 = +HEAPF32[$3616>>2];
  $3618 = $fSlow27;
  $3619 = $fTemp59;
  $3620 = $fSlow30;
  $3621 = (($4) + 1176|0);
  $3622 = +HEAPF32[$3621>>2];
  $3623 = $3620 * $3622;
  $3624 = $3619 + $3623;
  $3625 = $3618 * $3624;
  $3626 = $3617 + $3625;
  $3627 = $fSlow33;
  $3628 = $fSlow34;
  $3629 = (($4) + 1188|0);
  $3630 = (($3629) + 8|0);
  $3631 = +HEAPF32[$3630>>2];
  $3632 = $3628 * $3631;
  $3633 = $fTemp60;
  $3634 = $3632 + $3633;
  $3635 = $3627 * $3634;
  $3636 = $3626 - $3635;
  $3637 = (($4) + 1188|0);
  HEAPF32[$3637>>2] = $3636;
  $3638 = $fSlow41;
  $3639 = (($4) + 1200|0);
  $3640 = (($3639) + 4|0);
  $3641 = +HEAPF32[$3640>>2];
  $3642 = $3638 * $3641;
  $fTemp61 = $3642;
  $3643 = (($4) + 1188|0);
  $3644 = (($3643) + 8|0);
  $3645 = +HEAPF32[$3644>>2];
  $3646 = $fSlow33;
  $3647 = $fTemp60;
  $3648 = $fSlow34;
  $3649 = (($4) + 1188|0);
  $3650 = +HEAPF32[$3649>>2];
  $3651 = $3648 * $3650;
  $3652 = $3647 + $3651;
  $3653 = $3646 * $3652;
  $3654 = $3645 + $3653;
  $3655 = $fSlow39;
  $3656 = $fSlow42;
  $3657 = (($4) + 1200|0);
  $3658 = (($3657) + 8|0);
  $3659 = +HEAPF32[$3658>>2];
  $3660 = $3656 * $3659;
  $3661 = $fTemp61;
  $3662 = $3660 + $3661;
  $3663 = $3655 * $3662;
  $3664 = $3654 - $3663;
  $3665 = (($4) + 1200|0);
  HEAPF32[$3665>>2] = $3664;
  $3666 = $fSlow19;
  $3667 = (($4) + 1212|0);
  $3668 = (($3667) + 4|0);
  $3669 = +HEAPF32[$3668>>2];
  $3670 = $3666 * $3669;
  $3671 = $fSlow20;
  $3672 = (($4) + 102572|0);
  $3673 = (($3672) + 4|0);
  $3674 = +HEAPF32[$3673>>2];
  $3675 = (($4) + 102572|0);
  $3676 = (($3675) + 8|0);
  $3677 = +HEAPF32[$3676>>2];
  $3678 = $3674 + $3677;
  $3679 = $3671 * $3678;
  $3680 = $3670 + $3679;
  $3681 = (($4) + 1212|0);
  HEAPF32[$3681>>2] = $3680;
  $3682 = (($4) + 1212|0);
  $3683 = +HEAPF32[$3682>>2];
  $3684 = $fSlow16;
  $3685 = $fSlow22;
  $3686 = (($4) + 1220|0);
  $3687 = (($3686) + 8|0);
  $3688 = +HEAPF32[$3687>>2];
  $3689 = $3685 * $3688;
  $3690 = $fSlow23;
  $3691 = (($4) + 1220|0);
  $3692 = (($3691) + 4|0);
  $3693 = +HEAPF32[$3692>>2];
  $3694 = $3690 * $3693;
  $3695 = $3689 + $3694;
  $3696 = $3684 * $3695;
  $3697 = $3683 - $3696;
  $3698 = (($4) + 1220|0);
  HEAPF32[$3698>>2] = $3697;
  $3699 = (($4) + 1220|0);
  $3700 = (($3699) + 8|0);
  $3701 = +HEAPF32[$3700>>2];
  $3702 = (($4) + 1220|0);
  $3703 = +HEAPF32[$3702>>2];
  $3704 = (($4) + 1220|0);
  $3705 = (($3704) + 4|0);
  $3706 = +HEAPF32[$3705>>2];
  $3707 = 2.0 * $3706;
  $3708 = $3703 + $3707;
  $3709 = $3701 + $3708;
  $fTemp62 = $3709;
  $3710 = $fSlow16;
  $3711 = $fTemp62;
  $3712 = $3710 * $3711;
  $fTemp63 = $3712;
  $3713 = $fTemp63;
  $3714 = (($4) + 1232|0);
  HEAPF32[$3714>>2] = $3713;
  $3715 = $fSlow48;
  $3716 = (($4) + 1240|0);
  $3717 = (($3716) + 4|0);
  $3718 = +HEAPF32[$3717>>2];
  $3719 = $3715 * $3718;
  $3720 = $fSlow49;
  $3721 = $fSlow51;
  $3722 = $fTemp62;
  $3723 = $3721 * $3722;
  $3724 = $fSlow50;
  $3725 = (($4) + 1232|0);
  $3726 = (($3725) + 4|0);
  $3727 = +HEAPF32[$3726>>2];
  $3728 = $3724 * $3727;
  $3729 = $3723 + $3728;
  $3730 = $3720 * $3729;
  $3731 = $3719 + $3730;
  $3732 = (($4) + 1240|0);
  HEAPF32[$3732>>2] = $3731;
  $3733 = (($4) + 1240|0);
  $3734 = +HEAPF32[$3733>>2];
  $3735 = $fSlow46;
  $3736 = $fSlow52;
  $3737 = (($4) + 1248|0);
  $3738 = (($3737) + 8|0);
  $3739 = +HEAPF32[$3738>>2];
  $3740 = $3736 * $3739;
  $3741 = $fSlow29;
  $3742 = (($4) + 1248|0);
  $3743 = (($3742) + 4|0);
  $3744 = +HEAPF32[$3743>>2];
  $3745 = $3741 * $3744;
  $3746 = $3740 + $3745;
  $3747 = $3735 * $3746;
  $3748 = $3734 - $3747;
  $3749 = (($4) + 1248|0);
  HEAPF32[$3749>>2] = $3748;
  $3750 = $fSlow36;
  $3751 = (($4) + 1260|0);
  $3752 = (($3751) + 4|0);
  $3753 = +HEAPF32[$3752>>2];
  $3754 = $3750 * $3753;
  $fTemp64 = $3754;
  $3755 = $fSlow46;
  $3756 = $fSlow28;
  $3757 = (($4) + 1248|0);
  $3758 = +HEAPF32[$3757>>2];
  $3759 = $3756 * $3758;
  $3760 = $fSlow53;
  $3761 = (($4) + 1248|0);
  $3762 = (($3761) + 4|0);
  $3763 = +HEAPF32[$3762>>2];
  $3764 = $3760 * $3763;
  $3765 = $3759 + $3764;
  $3766 = $fSlow28;
  $3767 = (($4) + 1248|0);
  $3768 = (($3767) + 8|0);
  $3769 = +HEAPF32[$3768>>2];
  $3770 = $3766 * $3769;
  $3771 = $3765 + $3770;
  $3772 = $3755 * $3771;
  $3773 = $fSlow33;
  $3774 = $fSlow34;
  $3775 = (($4) + 1260|0);
  $3776 = (($3775) + 8|0);
  $3777 = +HEAPF32[$3776>>2];
  $3778 = $3774 * $3777;
  $3779 = $fTemp64;
  $3780 = $3778 + $3779;
  $3781 = $3773 * $3780;
  $3782 = $3772 - $3781;
  $3783 = (($4) + 1260|0);
  HEAPF32[$3783>>2] = $3782;
  $3784 = $fSlow41;
  $3785 = (($4) + 1272|0);
  $3786 = (($3785) + 4|0);
  $3787 = +HEAPF32[$3786>>2];
  $3788 = $3784 * $3787;
  $fTemp65 = $3788;
  $3789 = (($4) + 1260|0);
  $3790 = (($3789) + 8|0);
  $3791 = +HEAPF32[$3790>>2];
  $3792 = $fSlow33;
  $3793 = $fTemp64;
  $3794 = $fSlow34;
  $3795 = (($4) + 1260|0);
  $3796 = +HEAPF32[$3795>>2];
  $3797 = $3794 * $3796;
  $3798 = $3793 + $3797;
  $3799 = $3792 * $3798;
  $3800 = $3791 + $3799;
  $3801 = $fSlow39;
  $3802 = $fSlow42;
  $3803 = (($4) + 1272|0);
  $3804 = (($3803) + 8|0);
  $3805 = +HEAPF32[$3804>>2];
  $3806 = $3802 * $3805;
  $3807 = $fTemp65;
  $3808 = $3806 + $3807;
  $3809 = $3801 * $3808;
  $3810 = $3800 - $3809;
  $3811 = (($4) + 1272|0);
  HEAPF32[$3811>>2] = $3810;
  $3812 = $fSlow48;
  $3813 = (($4) + 1284|0);
  $3814 = (($3813) + 4|0);
  $3815 = +HEAPF32[$3814>>2];
  $3816 = $3812 * $3815;
  $3817 = $fSlow49;
  $3818 = (($4) + 1232|0);
  $3819 = +HEAPF32[$3818>>2];
  $3820 = (($4) + 1232|0);
  $3821 = (($3820) + 4|0);
  $3822 = +HEAPF32[$3821>>2];
  $3823 = $3819 + $3822;
  $3824 = $3817 * $3823;
  $3825 = $3816 + $3824;
  $3826 = (($4) + 1284|0);
  HEAPF32[$3826>>2] = $3825;
  $3827 = (($4) + 1284|0);
  $3828 = +HEAPF32[$3827>>2];
  $3829 = $fSlow46;
  $3830 = $fSlow52;
  $3831 = (($4) + 1292|0);
  $3832 = (($3831) + 8|0);
  $3833 = +HEAPF32[$3832>>2];
  $3834 = $3830 * $3833;
  $3835 = $fSlow29;
  $3836 = (($4) + 1292|0);
  $3837 = (($3836) + 4|0);
  $3838 = +HEAPF32[$3837>>2];
  $3839 = $3835 * $3838;
  $3840 = $3834 + $3839;
  $3841 = $3829 * $3840;
  $3842 = $3828 - $3841;
  $3843 = (($4) + 1292|0);
  HEAPF32[$3843>>2] = $3842;
  $3844 = (($4) + 1292|0);
  $3845 = (($3844) + 8|0);
  $3846 = +HEAPF32[$3845>>2];
  $3847 = (($4) + 1292|0);
  $3848 = +HEAPF32[$3847>>2];
  $3849 = (($4) + 1292|0);
  $3850 = (($3849) + 4|0);
  $3851 = +HEAPF32[$3850>>2];
  $3852 = 2.0 * $3851;
  $3853 = $3848 + $3852;
  $3854 = $3846 + $3853;
  $fTemp66 = $3854;
  $3855 = $fSlow46;
  $3856 = $fTemp66;
  $3857 = $3855 * $3856;
  $fTemp67 = $3857;
  $3858 = $fTemp67;
  $3859 = (($4) + 1304|0);
  HEAPF32[$3859>>2] = $3858;
  $3860 = $fSlow59;
  $3861 = (($4) + 1312|0);
  $3862 = (($3861) + 4|0);
  $3863 = +HEAPF32[$3862>>2];
  $3864 = $3860 * $3863;
  $3865 = $fSlow60;
  $3866 = $fSlow62;
  $3867 = $fTemp66;
  $3868 = $3866 * $3867;
  $3869 = $fSlow61;
  $3870 = (($4) + 1304|0);
  $3871 = (($3870) + 4|0);
  $3872 = +HEAPF32[$3871>>2];
  $3873 = $3869 * $3872;
  $3874 = $3868 + $3873;
  $3875 = $3865 * $3874;
  $3876 = $3864 + $3875;
  $3877 = (($4) + 1312|0);
  HEAPF32[$3877>>2] = $3876;
  $3878 = (($4) + 1312|0);
  $3879 = +HEAPF32[$3878>>2];
  $3880 = $fSlow57;
  $3881 = $fSlow63;
  $3882 = (($4) + 1320|0);
  $3883 = (($3882) + 8|0);
  $3884 = +HEAPF32[$3883>>2];
  $3885 = $3881 * $3884;
  $3886 = $fSlow36;
  $3887 = (($4) + 1320|0);
  $3888 = (($3887) + 4|0);
  $3889 = +HEAPF32[$3888>>2];
  $3890 = $3886 * $3889;
  $3891 = $3885 + $3890;
  $3892 = $3880 * $3891;
  $3893 = $3879 - $3892;
  $3894 = (($4) + 1320|0);
  HEAPF32[$3894>>2] = $3893;
  $3895 = $fSlow41;
  $3896 = (($4) + 1332|0);
  $3897 = (($3896) + 4|0);
  $3898 = +HEAPF32[$3897>>2];
  $3899 = $3895 * $3898;
  $fTemp68 = $3899;
  $3900 = $fSlow57;
  $3901 = $fSlow35;
  $3902 = (($4) + 1320|0);
  $3903 = +HEAPF32[$3902>>2];
  $3904 = $3901 * $3903;
  $3905 = $fSlow64;
  $3906 = (($4) + 1320|0);
  $3907 = (($3906) + 4|0);
  $3908 = +HEAPF32[$3907>>2];
  $3909 = $3905 * $3908;
  $3910 = $3904 + $3909;
  $3911 = $fSlow35;
  $3912 = (($4) + 1320|0);
  $3913 = (($3912) + 8|0);
  $3914 = +HEAPF32[$3913>>2];
  $3915 = $3911 * $3914;
  $3916 = $3910 + $3915;
  $3917 = $3900 * $3916;
  $3918 = $fSlow39;
  $3919 = $fSlow42;
  $3920 = (($4) + 1332|0);
  $3921 = (($3920) + 8|0);
  $3922 = +HEAPF32[$3921>>2];
  $3923 = $3919 * $3922;
  $3924 = $fTemp68;
  $3925 = $3923 + $3924;
  $3926 = $3918 * $3925;
  $3927 = $3917 - $3926;
  $3928 = (($4) + 1332|0);
  HEAPF32[$3928>>2] = $3927;
  $3929 = $fSlow59;
  $3930 = (($4) + 1344|0);
  $3931 = (($3930) + 4|0);
  $3932 = +HEAPF32[$3931>>2];
  $3933 = $3929 * $3932;
  $3934 = $fSlow60;
  $3935 = (($4) + 1304|0);
  $3936 = +HEAPF32[$3935>>2];
  $3937 = (($4) + 1304|0);
  $3938 = (($3937) + 4|0);
  $3939 = +HEAPF32[$3938>>2];
  $3940 = $3936 + $3939;
  $3941 = $3934 * $3940;
  $3942 = $3933 + $3941;
  $3943 = (($4) + 1344|0);
  HEAPF32[$3943>>2] = $3942;
  $3944 = (($4) + 1344|0);
  $3945 = +HEAPF32[$3944>>2];
  $3946 = $fSlow57;
  $3947 = $fSlow63;
  $3948 = (($4) + 1352|0);
  $3949 = (($3948) + 8|0);
  $3950 = +HEAPF32[$3949>>2];
  $3951 = $3947 * $3950;
  $3952 = $fSlow36;
  $3953 = (($4) + 1352|0);
  $3954 = (($3953) + 4|0);
  $3955 = +HEAPF32[$3954>>2];
  $3956 = $3952 * $3955;
  $3957 = $3951 + $3956;
  $3958 = $3946 * $3957;
  $3959 = $3945 - $3958;
  $3960 = (($4) + 1352|0);
  HEAPF32[$3960>>2] = $3959;
  $3961 = (($4) + 1352|0);
  $3962 = (($3961) + 8|0);
  $3963 = +HEAPF32[$3962>>2];
  $3964 = (($4) + 1352|0);
  $3965 = +HEAPF32[$3964>>2];
  $3966 = (($4) + 1352|0);
  $3967 = (($3966) + 4|0);
  $3968 = +HEAPF32[$3967>>2];
  $3969 = 2.0 * $3968;
  $3970 = $3965 + $3969;
  $3971 = $3963 + $3970;
  $fTemp69 = $3971;
  $3972 = $fSlow57;
  $3973 = $fTemp69;
  $3974 = $3972 * $3973;
  $fTemp70 = $3974;
  $3975 = $fTemp70;
  $3976 = (($4) + 1364|0);
  HEAPF32[$3976>>2] = $3975;
  $3977 = $fSlow69;
  $3978 = (($4) + 1372|0);
  $3979 = (($3978) + 4|0);
  $3980 = +HEAPF32[$3979>>2];
  $3981 = $3977 * $3980;
  $3982 = $fSlow70;
  $3983 = $fSlow72;
  $3984 = $fTemp69;
  $3985 = $3983 * $3984;
  $3986 = $fSlow71;
  $3987 = (($4) + 1364|0);
  $3988 = (($3987) + 4|0);
  $3989 = +HEAPF32[$3988>>2];
  $3990 = $3986 * $3989;
  $3991 = $3985 + $3990;
  $3992 = $3982 * $3991;
  $3993 = $3981 + $3992;
  $3994 = (($4) + 1372|0);
  HEAPF32[$3994>>2] = $3993;
  $3995 = (($4) + 1372|0);
  $3996 = +HEAPF32[$3995>>2];
  $3997 = $fSlow65;
  $3998 = $fSlow73;
  $3999 = (($4) + 1380|0);
  $4000 = (($3999) + 8|0);
  $4001 = +HEAPF32[$4000>>2];
  $4002 = $3998 * $4001;
  $4003 = $fSlow41;
  $4004 = (($4) + 1380|0);
  $4005 = (($4004) + 4|0);
  $4006 = +HEAPF32[$4005>>2];
  $4007 = $4003 * $4006;
  $4008 = $4002 + $4007;
  $4009 = $3997 * $4008;
  $4010 = $3996 - $4009;
  $4011 = (($4) + 1380|0);
  HEAPF32[$4011>>2] = $4010;
  $4012 = $fSlow69;
  $4013 = (($4) + 1392|0);
  $4014 = (($4013) + 4|0);
  $4015 = +HEAPF32[$4014>>2];
  $4016 = $4012 * $4015;
  $4017 = $fSlow70;
  $4018 = (($4) + 1364|0);
  $4019 = +HEAPF32[$4018>>2];
  $4020 = (($4) + 1364|0);
  $4021 = (($4020) + 4|0);
  $4022 = +HEAPF32[$4021>>2];
  $4023 = $4019 + $4022;
  $4024 = $4017 * $4023;
  $4025 = $4016 + $4024;
  $4026 = (($4) + 1392|0);
  HEAPF32[$4026>>2] = $4025;
  $4027 = (($4) + 1392|0);
  $4028 = +HEAPF32[$4027>>2];
  $4029 = $fSlow65;
  $4030 = $fSlow73;
  $4031 = (($4) + 1400|0);
  $4032 = (($4031) + 8|0);
  $4033 = +HEAPF32[$4032>>2];
  $4034 = $4030 * $4033;
  $4035 = $fSlow41;
  $4036 = (($4) + 1400|0);
  $4037 = (($4036) + 4|0);
  $4038 = +HEAPF32[$4037>>2];
  $4039 = $4035 * $4038;
  $4040 = $4034 + $4039;
  $4041 = $4029 * $4040;
  $4042 = $4028 - $4041;
  $4043 = (($4) + 1400|0);
  HEAPF32[$4043>>2] = $4042;
  $4044 = $fSlow100;
  $4045 = (($4) + 1200|0);
  $4046 = (($4045) + 8|0);
  $4047 = +HEAPF32[$4046>>2];
  $4048 = $fSlow39;
  $4049 = $fTemp61;
  $4050 = $fSlow42;
  $4051 = (($4) + 1200|0);
  $4052 = +HEAPF32[$4051>>2];
  $4053 = $4050 * $4052;
  $4054 = $4049 + $4053;
  $4055 = $4048 * $4054;
  $4056 = $4047 + $4055;
  $4057 = $4044 * $4056;
  $4058 = $fSlow101;
  $4059 = (($4) + 1272|0);
  $4060 = (($4059) + 8|0);
  $4061 = +HEAPF32[$4060>>2];
  $4062 = $fSlow39;
  $4063 = $fTemp65;
  $4064 = $fSlow42;
  $4065 = (($4) + 1272|0);
  $4066 = +HEAPF32[$4065>>2];
  $4067 = $4064 * $4066;
  $4068 = $4063 + $4067;
  $4069 = $4062 * $4068;
  $4070 = $4061 + $4069;
  $4071 = $4058 * $4070;
  $4072 = $4057 + $4071;
  $4073 = $fSlow102;
  $4074 = (($4) + 1332|0);
  $4075 = (($4074) + 8|0);
  $4076 = +HEAPF32[$4075>>2];
  $4077 = $fSlow39;
  $4078 = $fTemp68;
  $4079 = $fSlow42;
  $4080 = (($4) + 1332|0);
  $4081 = +HEAPF32[$4080>>2];
  $4082 = $4079 * $4081;
  $4083 = $4078 + $4082;
  $4084 = $4077 * $4083;
  $4085 = $4076 + $4084;
  $4086 = $4073 * $4085;
  $4087 = $4072 + $4086;
  $4088 = $fSlow65;
  $4089 = $fSlow103;
  $4090 = $fSlow40;
  $4091 = (($4) + 1380|0);
  $4092 = +HEAPF32[$4091>>2];
  $4093 = $4090 * $4092;
  $4094 = $fSlow74;
  $4095 = (($4) + 1380|0);
  $4096 = (($4095) + 4|0);
  $4097 = +HEAPF32[$4096>>2];
  $4098 = $4094 * $4097;
  $4099 = $4093 + $4098;
  $4100 = $fSlow40;
  $4101 = (($4) + 1380|0);
  $4102 = (($4101) + 8|0);
  $4103 = +HEAPF32[$4102>>2];
  $4104 = $4100 * $4103;
  $4105 = $4099 + $4104;
  $4106 = $4089 * $4105;
  $4107 = $fSlow104;
  $4108 = (($4) + 1400|0);
  $4109 = (($4108) + 8|0);
  $4110 = +HEAPF32[$4109>>2];
  $4111 = (($4) + 1400|0);
  $4112 = +HEAPF32[$4111>>2];
  $4113 = (($4) + 1400|0);
  $4114 = (($4113) + 4|0);
  $4115 = +HEAPF32[$4114>>2];
  $4116 = 2.0 * $4115;
  $4117 = $4112 + $4116;
  $4118 = $4110 + $4117;
  $4119 = $4107 * $4118;
  $4120 = $4106 + $4119;
  $4121 = $4088 * $4120;
  $4122 = $4087 + $4121;
  $fTemp71 = $4122;
  $4123 = $fSlow19;
  $4124 = (($4) + 1412|0);
  $4125 = (($4124) + 4|0);
  $4126 = +HEAPF32[$4125>>2];
  $4127 = $4123 * $4126;
  $4128 = $fSlow20;
  $4129 = $fSlow14;
  $4130 = (($4) + 364812|0);
  $4131 = (($4130) + 4|0);
  $4132 = +HEAPF32[$4131>>2];
  $4133 = $4129 * $4132;
  $4134 = $fSlow21;
  $4135 = (($4) + 364812|0);
  $4136 = (($4135) + 8|0);
  $4137 = +HEAPF32[$4136>>2];
  $4138 = $4134 * $4137;
  $4139 = $4133 + $4138;
  $4140 = $4128 * $4139;
  $4141 = $4127 + $4140;
  $4142 = (($4) + 1412|0);
  HEAPF32[$4142>>2] = $4141;
  $4143 = (($4) + 1412|0);
  $4144 = +HEAPF32[$4143>>2];
  $4145 = $fSlow16;
  $4146 = $fSlow22;
  $4147 = (($4) + 1420|0);
  $4148 = (($4147) + 8|0);
  $4149 = +HEAPF32[$4148>>2];
  $4150 = $4146 * $4149;
  $4151 = $fSlow23;
  $4152 = (($4) + 1420|0);
  $4153 = (($4152) + 4|0);
  $4154 = +HEAPF32[$4153>>2];
  $4155 = $4151 * $4154;
  $4156 = $4150 + $4155;
  $4157 = $4145 * $4156;
  $4158 = $4144 - $4157;
  $4159 = (($4) + 1420|0);
  HEAPF32[$4159>>2] = $4158;
  $4160 = $fSlow29;
  $4161 = (($4) + 1432|0);
  $4162 = (($4161) + 4|0);
  $4163 = +HEAPF32[$4162>>2];
  $4164 = $4160 * $4163;
  $fTemp72 = $4164;
  $4165 = $fSlow16;
  $4166 = $fSlow17;
  $4167 = (($4) + 1420|0);
  $4168 = +HEAPF32[$4167>>2];
  $4169 = $4166 * $4168;
  $4170 = $fSlow24;
  $4171 = (($4) + 1420|0);
  $4172 = (($4171) + 4|0);
  $4173 = +HEAPF32[$4172>>2];
  $4174 = $4170 * $4173;
  $4175 = $4169 + $4174;
  $4176 = $fSlow17;
  $4177 = (($4) + 1420|0);
  $4178 = (($4177) + 8|0);
  $4179 = +HEAPF32[$4178>>2];
  $4180 = $4176 * $4179;
  $4181 = $4175 + $4180;
  $4182 = $4165 * $4181;
  $4183 = $fSlow27;
  $4184 = $fSlow30;
  $4185 = (($4) + 1432|0);
  $4186 = (($4185) + 8|0);
  $4187 = +HEAPF32[$4186>>2];
  $4188 = $4184 * $4187;
  $4189 = $fTemp72;
  $4190 = $4188 + $4189;
  $4191 = $4183 * $4190;
  $4192 = $4182 - $4191;
  $4193 = (($4) + 1432|0);
  HEAPF32[$4193>>2] = $4192;
  $4194 = $fSlow36;
  $4195 = (($4) + 1444|0);
  $4196 = (($4195) + 4|0);
  $4197 = +HEAPF32[$4196>>2];
  $4198 = $4194 * $4197;
  $fTemp73 = $4198;
  $4199 = (($4) + 1432|0);
  $4200 = (($4199) + 8|0);
  $4201 = +HEAPF32[$4200>>2];
  $4202 = $fSlow27;
  $4203 = $fTemp72;
  $4204 = $fSlow30;
  $4205 = (($4) + 1432|0);
  $4206 = +HEAPF32[$4205>>2];
  $4207 = $4204 * $4206;
  $4208 = $4203 + $4207;
  $4209 = $4202 * $4208;
  $4210 = $4201 + $4209;
  $4211 = $fSlow33;
  $4212 = $fSlow34;
  $4213 = (($4) + 1444|0);
  $4214 = (($4213) + 8|0);
  $4215 = +HEAPF32[$4214>>2];
  $4216 = $4212 * $4215;
  $4217 = $fTemp73;
  $4218 = $4216 + $4217;
  $4219 = $4211 * $4218;
  $4220 = $4210 - $4219;
  $4221 = (($4) + 1444|0);
  HEAPF32[$4221>>2] = $4220;
  $4222 = $fSlow41;
  $4223 = (($4) + 1456|0);
  $4224 = (($4223) + 4|0);
  $4225 = +HEAPF32[$4224>>2];
  $4226 = $4222 * $4225;
  $fTemp74 = $4226;
  $4227 = (($4) + 1444|0);
  $4228 = (($4227) + 8|0);
  $4229 = +HEAPF32[$4228>>2];
  $4230 = $fSlow33;
  $4231 = $fTemp73;
  $4232 = $fSlow34;
  $4233 = (($4) + 1444|0);
  $4234 = +HEAPF32[$4233>>2];
  $4235 = $4232 * $4234;
  $4236 = $4231 + $4235;
  $4237 = $4230 * $4236;
  $4238 = $4229 + $4237;
  $4239 = $fSlow39;
  $4240 = $fSlow42;
  $4241 = (($4) + 1456|0);
  $4242 = (($4241) + 8|0);
  $4243 = +HEAPF32[$4242>>2];
  $4244 = $4240 * $4243;
  $4245 = $fTemp74;
  $4246 = $4244 + $4245;
  $4247 = $4239 * $4246;
  $4248 = $4238 - $4247;
  $4249 = (($4) + 1456|0);
  HEAPF32[$4249>>2] = $4248;
  $4250 = $fSlow19;
  $4251 = (($4) + 1468|0);
  $4252 = (($4251) + 4|0);
  $4253 = +HEAPF32[$4252>>2];
  $4254 = $4250 * $4253;
  $4255 = $fSlow20;
  $4256 = (($4) + 364812|0);
  $4257 = (($4256) + 4|0);
  $4258 = +HEAPF32[$4257>>2];
  $4259 = (($4) + 364812|0);
  $4260 = (($4259) + 8|0);
  $4261 = +HEAPF32[$4260>>2];
  $4262 = $4258 + $4261;
  $4263 = $4255 * $4262;
  $4264 = $4254 + $4263;
  $4265 = (($4) + 1468|0);
  HEAPF32[$4265>>2] = $4264;
  $4266 = (($4) + 1468|0);
  $4267 = +HEAPF32[$4266>>2];
  $4268 = $fSlow16;
  $4269 = $fSlow22;
  $4270 = (($4) + 1476|0);
  $4271 = (($4270) + 8|0);
  $4272 = +HEAPF32[$4271>>2];
  $4273 = $4269 * $4272;
  $4274 = $fSlow23;
  $4275 = (($4) + 1476|0);
  $4276 = (($4275) + 4|0);
  $4277 = +HEAPF32[$4276>>2];
  $4278 = $4274 * $4277;
  $4279 = $4273 + $4278;
  $4280 = $4268 * $4279;
  $4281 = $4267 - $4280;
  $4282 = (($4) + 1476|0);
  HEAPF32[$4282>>2] = $4281;
  $4283 = (($4) + 1476|0);
  $4284 = (($4283) + 8|0);
  $4285 = +HEAPF32[$4284>>2];
  $4286 = (($4) + 1476|0);
  $4287 = +HEAPF32[$4286>>2];
  $4288 = (($4) + 1476|0);
  $4289 = (($4288) + 4|0);
  $4290 = +HEAPF32[$4289>>2];
  $4291 = 2.0 * $4290;
  $4292 = $4287 + $4291;
  $4293 = $4285 + $4292;
  $fTemp75 = $4293;
  $4294 = $fSlow16;
  $4295 = $fTemp75;
  $4296 = $4294 * $4295;
  $fTemp76 = $4296;
  $4297 = $fTemp76;
  $4298 = (($4) + 1488|0);
  HEAPF32[$4298>>2] = $4297;
  $4299 = $fSlow48;
  $4300 = (($4) + 1496|0);
  $4301 = (($4300) + 4|0);
  $4302 = +HEAPF32[$4301>>2];
  $4303 = $4299 * $4302;
  $4304 = $fSlow49;
  $4305 = $fSlow50;
  $4306 = (($4) + 1488|0);
  $4307 = (($4306) + 4|0);
  $4308 = +HEAPF32[$4307>>2];
  $4309 = $4305 * $4308;
  $4310 = $fSlow51;
  $4311 = $fTemp75;
  $4312 = $4310 * $4311;
  $4313 = $4309 + $4312;
  $4314 = $4304 * $4313;
  $4315 = $4303 + $4314;
  $4316 = (($4) + 1496|0);
  HEAPF32[$4316>>2] = $4315;
  $4317 = (($4) + 1496|0);
  $4318 = +HEAPF32[$4317>>2];
  $4319 = $fSlow46;
  $4320 = $fSlow52;
  $4321 = (($4) + 1504|0);
  $4322 = (($4321) + 8|0);
  $4323 = +HEAPF32[$4322>>2];
  $4324 = $4320 * $4323;
  $4325 = $fSlow29;
  $4326 = (($4) + 1504|0);
  $4327 = (($4326) + 4|0);
  $4328 = +HEAPF32[$4327>>2];
  $4329 = $4325 * $4328;
  $4330 = $4324 + $4329;
  $4331 = $4319 * $4330;
  $4332 = $4318 - $4331;
  $4333 = (($4) + 1504|0);
  HEAPF32[$4333>>2] = $4332;
  $4334 = $fSlow36;
  $4335 = (($4) + 1516|0);
  $4336 = (($4335) + 4|0);
  $4337 = +HEAPF32[$4336>>2];
  $4338 = $4334 * $4337;
  $fTemp77 = $4338;
  $4339 = $fSlow46;
  $4340 = $fSlow28;
  $4341 = (($4) + 1504|0);
  $4342 = +HEAPF32[$4341>>2];
  $4343 = $4340 * $4342;
  $4344 = $fSlow53;
  $4345 = (($4) + 1504|0);
  $4346 = (($4345) + 4|0);
  $4347 = +HEAPF32[$4346>>2];
  $4348 = $4344 * $4347;
  $4349 = $4343 + $4348;
  $4350 = $fSlow28;
  $4351 = (($4) + 1504|0);
  $4352 = (($4351) + 8|0);
  $4353 = +HEAPF32[$4352>>2];
  $4354 = $4350 * $4353;
  $4355 = $4349 + $4354;
  $4356 = $4339 * $4355;
  $4357 = $fSlow33;
  $4358 = $fSlow34;
  $4359 = (($4) + 1516|0);
  $4360 = (($4359) + 8|0);
  $4361 = +HEAPF32[$4360>>2];
  $4362 = $4358 * $4361;
  $4363 = $fTemp77;
  $4364 = $4362 + $4363;
  $4365 = $4357 * $4364;
  $4366 = $4356 - $4365;
  $4367 = (($4) + 1516|0);
  HEAPF32[$4367>>2] = $4366;
  $4368 = $fSlow41;
  $4369 = (($4) + 1528|0);
  $4370 = (($4369) + 4|0);
  $4371 = +HEAPF32[$4370>>2];
  $4372 = $4368 * $4371;
  $fTemp78 = $4372;
  $4373 = (($4) + 1516|0);
  $4374 = (($4373) + 8|0);
  $4375 = +HEAPF32[$4374>>2];
  $4376 = $fSlow33;
  $4377 = $fTemp77;
  $4378 = $fSlow34;
  $4379 = (($4) + 1516|0);
  $4380 = +HEAPF32[$4379>>2];
  $4381 = $4378 * $4380;
  $4382 = $4377 + $4381;
  $4383 = $4376 * $4382;
  $4384 = $4375 + $4383;
  $4385 = $fSlow39;
  $4386 = $fSlow42;
  $4387 = (($4) + 1528|0);
  $4388 = (($4387) + 8|0);
  $4389 = +HEAPF32[$4388>>2];
  $4390 = $4386 * $4389;
  $4391 = $fTemp78;
  $4392 = $4390 + $4391;
  $4393 = $4385 * $4392;
  $4394 = $4384 - $4393;
  $4395 = (($4) + 1528|0);
  HEAPF32[$4395>>2] = $4394;
  $4396 = $fSlow48;
  $4397 = (($4) + 1540|0);
  $4398 = (($4397) + 4|0);
  $4399 = +HEAPF32[$4398>>2];
  $4400 = $4396 * $4399;
  $4401 = $fSlow49;
  $4402 = (($4) + 1488|0);
  $4403 = +HEAPF32[$4402>>2];
  $4404 = (($4) + 1488|0);
  $4405 = (($4404) + 4|0);
  $4406 = +HEAPF32[$4405>>2];
  $4407 = $4403 + $4406;
  $4408 = $4401 * $4407;
  $4409 = $4400 + $4408;
  $4410 = (($4) + 1540|0);
  HEAPF32[$4410>>2] = $4409;
  $4411 = (($4) + 1540|0);
  $4412 = +HEAPF32[$4411>>2];
  $4413 = $fSlow46;
  $4414 = $fSlow52;
  $4415 = (($4) + 1548|0);
  $4416 = (($4415) + 8|0);
  $4417 = +HEAPF32[$4416>>2];
  $4418 = $4414 * $4417;
  $4419 = $fSlow29;
  $4420 = (($4) + 1548|0);
  $4421 = (($4420) + 4|0);
  $4422 = +HEAPF32[$4421>>2];
  $4423 = $4419 * $4422;
  $4424 = $4418 + $4423;
  $4425 = $4413 * $4424;
  $4426 = $4412 - $4425;
  $4427 = (($4) + 1548|0);
  HEAPF32[$4427>>2] = $4426;
  $4428 = (($4) + 1548|0);
  $4429 = (($4428) + 8|0);
  $4430 = +HEAPF32[$4429>>2];
  $4431 = (($4) + 1548|0);
  $4432 = +HEAPF32[$4431>>2];
  $4433 = (($4) + 1548|0);
  $4434 = (($4433) + 4|0);
  $4435 = +HEAPF32[$4434>>2];
  $4436 = 2.0 * $4435;
  $4437 = $4432 + $4436;
  $4438 = $4430 + $4437;
  $fTemp79 = $4438;
  $4439 = $fSlow46;
  $4440 = $fTemp79;
  $4441 = $4439 * $4440;
  $fTemp80 = $4441;
  $4442 = $fTemp80;
  $4443 = (($4) + 1560|0);
  HEAPF32[$4443>>2] = $4442;
  $4444 = $fSlow59;
  $4445 = (($4) + 1568|0);
  $4446 = (($4445) + 4|0);
  $4447 = +HEAPF32[$4446>>2];
  $4448 = $4444 * $4447;
  $4449 = $fSlow60;
  $4450 = $fSlow61;
  $4451 = (($4) + 1560|0);
  $4452 = (($4451) + 4|0);
  $4453 = +HEAPF32[$4452>>2];
  $4454 = $4450 * $4453;
  $4455 = $fSlow62;
  $4456 = $fTemp79;
  $4457 = $4455 * $4456;
  $4458 = $4454 + $4457;
  $4459 = $4449 * $4458;
  $4460 = $4448 + $4459;
  $4461 = (($4) + 1568|0);
  HEAPF32[$4461>>2] = $4460;
  $4462 = (($4) + 1568|0);
  $4463 = +HEAPF32[$4462>>2];
  $4464 = $fSlow57;
  $4465 = $fSlow63;
  $4466 = (($4) + 1576|0);
  $4467 = (($4466) + 8|0);
  $4468 = +HEAPF32[$4467>>2];
  $4469 = $4465 * $4468;
  $4470 = $fSlow36;
  $4471 = (($4) + 1576|0);
  $4472 = (($4471) + 4|0);
  $4473 = +HEAPF32[$4472>>2];
  $4474 = $4470 * $4473;
  $4475 = $4469 + $4474;
  $4476 = $4464 * $4475;
  $4477 = $4463 - $4476;
  $4478 = (($4) + 1576|0);
  HEAPF32[$4478>>2] = $4477;
  $4479 = $fSlow41;
  $4480 = (($4) + 1588|0);
  $4481 = (($4480) + 4|0);
  $4482 = +HEAPF32[$4481>>2];
  $4483 = $4479 * $4482;
  $fTemp81 = $4483;
  $4484 = $fSlow57;
  $4485 = $fSlow35;
  $4486 = (($4) + 1576|0);
  $4487 = +HEAPF32[$4486>>2];
  $4488 = $4485 * $4487;
  $4489 = $fSlow64;
  $4490 = (($4) + 1576|0);
  $4491 = (($4490) + 4|0);
  $4492 = +HEAPF32[$4491>>2];
  $4493 = $4489 * $4492;
  $4494 = $4488 + $4493;
  $4495 = $fSlow35;
  $4496 = (($4) + 1576|0);
  $4497 = (($4496) + 8|0);
  $4498 = +HEAPF32[$4497>>2];
  $4499 = $4495 * $4498;
  $4500 = $4494 + $4499;
  $4501 = $4484 * $4500;
  $4502 = $fSlow39;
  $4503 = $fSlow42;
  $4504 = (($4) + 1588|0);
  $4505 = (($4504) + 8|0);
  $4506 = +HEAPF32[$4505>>2];
  $4507 = $4503 * $4506;
  $4508 = $fTemp81;
  $4509 = $4507 + $4508;
  $4510 = $4502 * $4509;
  $4511 = $4501 - $4510;
  $4512 = (($4) + 1588|0);
  HEAPF32[$4512>>2] = $4511;
  $4513 = $fSlow59;
  $4514 = (($4) + 1600|0);
  $4515 = (($4514) + 4|0);
  $4516 = +HEAPF32[$4515>>2];
  $4517 = $4513 * $4516;
  $4518 = $fSlow60;
  $4519 = (($4) + 1560|0);
  $4520 = +HEAPF32[$4519>>2];
  $4521 = (($4) + 1560|0);
  $4522 = (($4521) + 4|0);
  $4523 = +HEAPF32[$4522>>2];
  $4524 = $4520 + $4523;
  $4525 = $4518 * $4524;
  $4526 = $4517 + $4525;
  $4527 = (($4) + 1600|0);
  HEAPF32[$4527>>2] = $4526;
  $4528 = (($4) + 1600|0);
  $4529 = +HEAPF32[$4528>>2];
  $4530 = $fSlow57;
  $4531 = $fSlow63;
  $4532 = (($4) + 1608|0);
  $4533 = (($4532) + 8|0);
  $4534 = +HEAPF32[$4533>>2];
  $4535 = $4531 * $4534;
  $4536 = $fSlow36;
  $4537 = (($4) + 1608|0);
  $4538 = (($4537) + 4|0);
  $4539 = +HEAPF32[$4538>>2];
  $4540 = $4536 * $4539;
  $4541 = $4535 + $4540;
  $4542 = $4530 * $4541;
  $4543 = $4529 - $4542;
  $4544 = (($4) + 1608|0);
  HEAPF32[$4544>>2] = $4543;
  $4545 = (($4) + 1608|0);
  $4546 = (($4545) + 8|0);
  $4547 = +HEAPF32[$4546>>2];
  $4548 = (($4) + 1608|0);
  $4549 = +HEAPF32[$4548>>2];
  $4550 = (($4) + 1608|0);
  $4551 = (($4550) + 4|0);
  $4552 = +HEAPF32[$4551>>2];
  $4553 = 2.0 * $4552;
  $4554 = $4549 + $4553;
  $4555 = $4547 + $4554;
  $fTemp82 = $4555;
  $4556 = $fSlow57;
  $4557 = $fTemp82;
  $4558 = $4556 * $4557;
  $fTemp83 = $4558;
  $4559 = $fTemp83;
  $4560 = (($4) + 1620|0);
  HEAPF32[$4560>>2] = $4559;
  $4561 = $fSlow69;
  $4562 = (($4) + 1628|0);
  $4563 = (($4562) + 4|0);
  $4564 = +HEAPF32[$4563>>2];
  $4565 = $4561 * $4564;
  $4566 = $fSlow70;
  $4567 = $fSlow72;
  $4568 = $fTemp82;
  $4569 = $4567 * $4568;
  $4570 = $fSlow71;
  $4571 = (($4) + 1620|0);
  $4572 = (($4571) + 4|0);
  $4573 = +HEAPF32[$4572>>2];
  $4574 = $4570 * $4573;
  $4575 = $4569 + $4574;
  $4576 = $4566 * $4575;
  $4577 = $4565 + $4576;
  $4578 = (($4) + 1628|0);
  HEAPF32[$4578>>2] = $4577;
  $4579 = (($4) + 1628|0);
  $4580 = +HEAPF32[$4579>>2];
  $4581 = $fSlow65;
  $4582 = $fSlow73;
  $4583 = (($4) + 1636|0);
  $4584 = (($4583) + 8|0);
  $4585 = +HEAPF32[$4584>>2];
  $4586 = $4582 * $4585;
  $4587 = $fSlow41;
  $4588 = (($4) + 1636|0);
  $4589 = (($4588) + 4|0);
  $4590 = +HEAPF32[$4589>>2];
  $4591 = $4587 * $4590;
  $4592 = $4586 + $4591;
  $4593 = $4581 * $4592;
  $4594 = $4580 - $4593;
  $4595 = (($4) + 1636|0);
  HEAPF32[$4595>>2] = $4594;
  $4596 = $fSlow69;
  $4597 = (($4) + 1648|0);
  $4598 = (($4597) + 4|0);
  $4599 = +HEAPF32[$4598>>2];
  $4600 = $4596 * $4599;
  $4601 = $fSlow70;
  $4602 = (($4) + 1620|0);
  $4603 = +HEAPF32[$4602>>2];
  $4604 = (($4) + 1620|0);
  $4605 = (($4604) + 4|0);
  $4606 = +HEAPF32[$4605>>2];
  $4607 = $4603 + $4606;
  $4608 = $4601 * $4607;
  $4609 = $4600 + $4608;
  $4610 = (($4) + 1648|0);
  HEAPF32[$4610>>2] = $4609;
  $4611 = (($4) + 1648|0);
  $4612 = +HEAPF32[$4611>>2];
  $4613 = $fSlow65;
  $4614 = $fSlow73;
  $4615 = (($4) + 1656|0);
  $4616 = (($4615) + 8|0);
  $4617 = +HEAPF32[$4616>>2];
  $4618 = $4614 * $4617;
  $4619 = $fSlow41;
  $4620 = (($4) + 1656|0);
  $4621 = (($4620) + 4|0);
  $4622 = +HEAPF32[$4621>>2];
  $4623 = $4619 * $4622;
  $4624 = $4618 + $4623;
  $4625 = $4613 * $4624;
  $4626 = $4612 - $4625;
  $4627 = (($4) + 1656|0);
  HEAPF32[$4627>>2] = $4626;
  $4628 = $fSlow107;
  $4629 = (($4) + 1456|0);
  $4630 = (($4629) + 8|0);
  $4631 = +HEAPF32[$4630>>2];
  $4632 = $fSlow39;
  $4633 = $fTemp74;
  $4634 = $fSlow42;
  $4635 = (($4) + 1456|0);
  $4636 = +HEAPF32[$4635>>2];
  $4637 = $4634 * $4636;
  $4638 = $4633 + $4637;
  $4639 = $4632 * $4638;
  $4640 = $4631 + $4639;
  $4641 = $4628 * $4640;
  $4642 = $fSlow108;
  $4643 = (($4) + 1528|0);
  $4644 = (($4643) + 8|0);
  $4645 = +HEAPF32[$4644>>2];
  $4646 = $fSlow39;
  $4647 = $fTemp78;
  $4648 = $fSlow42;
  $4649 = (($4) + 1528|0);
  $4650 = +HEAPF32[$4649>>2];
  $4651 = $4648 * $4650;
  $4652 = $4647 + $4651;
  $4653 = $4646 * $4652;
  $4654 = $4645 + $4653;
  $4655 = $4642 * $4654;
  $4656 = $4641 + $4655;
  $4657 = $fSlow109;
  $4658 = (($4) + 1588|0);
  $4659 = (($4658) + 8|0);
  $4660 = +HEAPF32[$4659>>2];
  $4661 = $fSlow39;
  $4662 = $fTemp81;
  $4663 = $fSlow42;
  $4664 = (($4) + 1588|0);
  $4665 = +HEAPF32[$4664>>2];
  $4666 = $4663 * $4665;
  $4667 = $4662 + $4666;
  $4668 = $4661 * $4667;
  $4669 = $4660 + $4668;
  $4670 = $4657 * $4669;
  $4671 = $4656 + $4670;
  $4672 = $fSlow65;
  $4673 = $fSlow110;
  $4674 = $fSlow40;
  $4675 = (($4) + 1636|0);
  $4676 = +HEAPF32[$4675>>2];
  $4677 = $4674 * $4676;
  $4678 = $fSlow74;
  $4679 = (($4) + 1636|0);
  $4680 = (($4679) + 4|0);
  $4681 = +HEAPF32[$4680>>2];
  $4682 = $4678 * $4681;
  $4683 = $4677 + $4682;
  $4684 = $fSlow40;
  $4685 = (($4) + 1636|0);
  $4686 = (($4685) + 8|0);
  $4687 = +HEAPF32[$4686>>2];
  $4688 = $4684 * $4687;
  $4689 = $4683 + $4688;
  $4690 = $4673 * $4689;
  $4691 = $fSlow111;
  $4692 = (($4) + 1656|0);
  $4693 = (($4692) + 8|0);
  $4694 = +HEAPF32[$4693>>2];
  $4695 = (($4) + 1656|0);
  $4696 = +HEAPF32[$4695>>2];
  $4697 = (($4) + 1656|0);
  $4698 = (($4697) + 4|0);
  $4699 = +HEAPF32[$4698>>2];
  $4700 = 2.0 * $4699;
  $4701 = $4696 + $4700;
  $4702 = $4694 + $4701;
  $4703 = $4691 * $4702;
  $4704 = $4690 + $4703;
  $4705 = $4672 * $4704;
  $4706 = $4671 + $4705;
  $fTemp84 = $4706;
  $4707 = $fTemp71;
  $4708 = $fTemp84;
  $4709 = $4707 + $4708;
  $fTemp85 = $4709;
  $4710 = $fSlow19;
  $4711 = (($4) + 1668|0);
  $4712 = (($4711) + 4|0);
  $4713 = +HEAPF32[$4712>>2];
  $4714 = $4710 * $4713;
  $4715 = $fSlow20;
  $4716 = $fSlow14;
  $4717 = (($4) + 233692|0);
  $4718 = (($4717) + 4|0);
  $4719 = +HEAPF32[$4718>>2];
  $4720 = $4716 * $4719;
  $4721 = $fSlow21;
  $4722 = (($4) + 233692|0);
  $4723 = (($4722) + 8|0);
  $4724 = +HEAPF32[$4723>>2];
  $4725 = $4721 * $4724;
  $4726 = $4720 + $4725;
  $4727 = $4715 * $4726;
  $4728 = $4714 + $4727;
  $4729 = (($4) + 1668|0);
  HEAPF32[$4729>>2] = $4728;
  $4730 = (($4) + 1668|0);
  $4731 = +HEAPF32[$4730>>2];
  $4732 = $fSlow16;
  $4733 = $fSlow22;
  $4734 = (($4) + 1676|0);
  $4735 = (($4734) + 8|0);
  $4736 = +HEAPF32[$4735>>2];
  $4737 = $4733 * $4736;
  $4738 = $fSlow23;
  $4739 = (($4) + 1676|0);
  $4740 = (($4739) + 4|0);
  $4741 = +HEAPF32[$4740>>2];
  $4742 = $4738 * $4741;
  $4743 = $4737 + $4742;
  $4744 = $4732 * $4743;
  $4745 = $4731 - $4744;
  $4746 = (($4) + 1676|0);
  HEAPF32[$4746>>2] = $4745;
  $4747 = $fSlow29;
  $4748 = (($4) + 1688|0);
  $4749 = (($4748) + 4|0);
  $4750 = +HEAPF32[$4749>>2];
  $4751 = $4747 * $4750;
  $fTemp86 = $4751;
  $4752 = $fSlow16;
  $4753 = $fSlow17;
  $4754 = (($4) + 1676|0);
  $4755 = +HEAPF32[$4754>>2];
  $4756 = $4753 * $4755;
  $4757 = $fSlow24;
  $4758 = (($4) + 1676|0);
  $4759 = (($4758) + 4|0);
  $4760 = +HEAPF32[$4759>>2];
  $4761 = $4757 * $4760;
  $4762 = $4756 + $4761;
  $4763 = $fSlow17;
  $4764 = (($4) + 1676|0);
  $4765 = (($4764) + 8|0);
  $4766 = +HEAPF32[$4765>>2];
  $4767 = $4763 * $4766;
  $4768 = $4762 + $4767;
  $4769 = $4752 * $4768;
  $4770 = $fSlow27;
  $4771 = $fSlow30;
  $4772 = (($4) + 1688|0);
  $4773 = (($4772) + 8|0);
  $4774 = +HEAPF32[$4773>>2];
  $4775 = $4771 * $4774;
  $4776 = $fTemp86;
  $4777 = $4775 + $4776;
  $4778 = $4770 * $4777;
  $4779 = $4769 - $4778;
  $4780 = (($4) + 1688|0);
  HEAPF32[$4780>>2] = $4779;
  $4781 = $fSlow36;
  $4782 = (($4) + 1700|0);
  $4783 = (($4782) + 4|0);
  $4784 = +HEAPF32[$4783>>2];
  $4785 = $4781 * $4784;
  $fTemp87 = $4785;
  $4786 = (($4) + 1688|0);
  $4787 = (($4786) + 8|0);
  $4788 = +HEAPF32[$4787>>2];
  $4789 = $fSlow27;
  $4790 = $fTemp86;
  $4791 = $fSlow30;
  $4792 = (($4) + 1688|0);
  $4793 = +HEAPF32[$4792>>2];
  $4794 = $4791 * $4793;
  $4795 = $4790 + $4794;
  $4796 = $4789 * $4795;
  $4797 = $4788 + $4796;
  $4798 = $fSlow33;
  $4799 = $fSlow34;
  $4800 = (($4) + 1700|0);
  $4801 = (($4800) + 8|0);
  $4802 = +HEAPF32[$4801>>2];
  $4803 = $4799 * $4802;
  $4804 = $fTemp87;
  $4805 = $4803 + $4804;
  $4806 = $4798 * $4805;
  $4807 = $4797 - $4806;
  $4808 = (($4) + 1700|0);
  HEAPF32[$4808>>2] = $4807;
  $4809 = $fSlow41;
  $4810 = (($4) + 1712|0);
  $4811 = (($4810) + 4|0);
  $4812 = +HEAPF32[$4811>>2];
  $4813 = $4809 * $4812;
  $fTemp88 = $4813;
  $4814 = (($4) + 1700|0);
  $4815 = (($4814) + 8|0);
  $4816 = +HEAPF32[$4815>>2];
  $4817 = $fSlow33;
  $4818 = $fTemp87;
  $4819 = $fSlow34;
  $4820 = (($4) + 1700|0);
  $4821 = +HEAPF32[$4820>>2];
  $4822 = $4819 * $4821;
  $4823 = $4818 + $4822;
  $4824 = $4817 * $4823;
  $4825 = $4816 + $4824;
  $4826 = $fSlow39;
  $4827 = $fSlow42;
  $4828 = (($4) + 1712|0);
  $4829 = (($4828) + 8|0);
  $4830 = +HEAPF32[$4829>>2];
  $4831 = $4827 * $4830;
  $4832 = $fTemp88;
  $4833 = $4831 + $4832;
  $4834 = $4826 * $4833;
  $4835 = $4825 - $4834;
  $4836 = (($4) + 1712|0);
  HEAPF32[$4836>>2] = $4835;
  $4837 = $fSlow19;
  $4838 = (($4) + 1724|0);
  $4839 = (($4838) + 4|0);
  $4840 = +HEAPF32[$4839>>2];
  $4841 = $4837 * $4840;
  $4842 = $fSlow20;
  $4843 = (($4) + 233692|0);
  $4844 = (($4843) + 4|0);
  $4845 = +HEAPF32[$4844>>2];
  $4846 = (($4) + 233692|0);
  $4847 = (($4846) + 8|0);
  $4848 = +HEAPF32[$4847>>2];
  $4849 = $4845 + $4848;
  $4850 = $4842 * $4849;
  $4851 = $4841 + $4850;
  $4852 = (($4) + 1724|0);
  HEAPF32[$4852>>2] = $4851;
  $4853 = (($4) + 1724|0);
  $4854 = +HEAPF32[$4853>>2];
  $4855 = $fSlow16;
  $4856 = $fSlow22;
  $4857 = (($4) + 1732|0);
  $4858 = (($4857) + 8|0);
  $4859 = +HEAPF32[$4858>>2];
  $4860 = $4856 * $4859;
  $4861 = $fSlow23;
  $4862 = (($4) + 1732|0);
  $4863 = (($4862) + 4|0);
  $4864 = +HEAPF32[$4863>>2];
  $4865 = $4861 * $4864;
  $4866 = $4860 + $4865;
  $4867 = $4855 * $4866;
  $4868 = $4854 - $4867;
  $4869 = (($4) + 1732|0);
  HEAPF32[$4869>>2] = $4868;
  $4870 = (($4) + 1732|0);
  $4871 = (($4870) + 8|0);
  $4872 = +HEAPF32[$4871>>2];
  $4873 = (($4) + 1732|0);
  $4874 = +HEAPF32[$4873>>2];
  $4875 = (($4) + 1732|0);
  $4876 = (($4875) + 4|0);
  $4877 = +HEAPF32[$4876>>2];
  $4878 = 2.0 * $4877;
  $4879 = $4874 + $4878;
  $4880 = $4872 + $4879;
  $fTemp89 = $4880;
  $4881 = $fSlow16;
  $4882 = $fTemp89;
  $4883 = $4881 * $4882;
  $fTemp90 = $4883;
  $4884 = $fTemp90;
  $4885 = (($4) + 1744|0);
  HEAPF32[$4885>>2] = $4884;
  $4886 = $fSlow48;
  $4887 = (($4) + 1752|0);
  $4888 = (($4887) + 4|0);
  $4889 = +HEAPF32[$4888>>2];
  $4890 = $4886 * $4889;
  $4891 = $fSlow49;
  $4892 = $fSlow51;
  $4893 = $fTemp89;
  $4894 = $4892 * $4893;
  $4895 = $fSlow50;
  $4896 = (($4) + 1744|0);
  $4897 = (($4896) + 4|0);
  $4898 = +HEAPF32[$4897>>2];
  $4899 = $4895 * $4898;
  $4900 = $4894 + $4899;
  $4901 = $4891 * $4900;
  $4902 = $4890 + $4901;
  $4903 = (($4) + 1752|0);
  HEAPF32[$4903>>2] = $4902;
  $4904 = (($4) + 1752|0);
  $4905 = +HEAPF32[$4904>>2];
  $4906 = $fSlow46;
  $4907 = $fSlow52;
  $4908 = (($4) + 1760|0);
  $4909 = (($4908) + 8|0);
  $4910 = +HEAPF32[$4909>>2];
  $4911 = $4907 * $4910;
  $4912 = $fSlow29;
  $4913 = (($4) + 1760|0);
  $4914 = (($4913) + 4|0);
  $4915 = +HEAPF32[$4914>>2];
  $4916 = $4912 * $4915;
  $4917 = $4911 + $4916;
  $4918 = $4906 * $4917;
  $4919 = $4905 - $4918;
  $4920 = (($4) + 1760|0);
  HEAPF32[$4920>>2] = $4919;
  $4921 = $fSlow36;
  $4922 = (($4) + 1772|0);
  $4923 = (($4922) + 4|0);
  $4924 = +HEAPF32[$4923>>2];
  $4925 = $4921 * $4924;
  $fTemp91 = $4925;
  $4926 = $fSlow46;
  $4927 = $fSlow28;
  $4928 = (($4) + 1760|0);
  $4929 = +HEAPF32[$4928>>2];
  $4930 = $4927 * $4929;
  $4931 = $fSlow53;
  $4932 = (($4) + 1760|0);
  $4933 = (($4932) + 4|0);
  $4934 = +HEAPF32[$4933>>2];
  $4935 = $4931 * $4934;
  $4936 = $4930 + $4935;
  $4937 = $fSlow28;
  $4938 = (($4) + 1760|0);
  $4939 = (($4938) + 8|0);
  $4940 = +HEAPF32[$4939>>2];
  $4941 = $4937 * $4940;
  $4942 = $4936 + $4941;
  $4943 = $4926 * $4942;
  $4944 = $fSlow33;
  $4945 = $fSlow34;
  $4946 = (($4) + 1772|0);
  $4947 = (($4946) + 8|0);
  $4948 = +HEAPF32[$4947>>2];
  $4949 = $4945 * $4948;
  $4950 = $fTemp91;
  $4951 = $4949 + $4950;
  $4952 = $4944 * $4951;
  $4953 = $4943 - $4952;
  $4954 = (($4) + 1772|0);
  HEAPF32[$4954>>2] = $4953;
  $4955 = $fSlow41;
  $4956 = (($4) + 1784|0);
  $4957 = (($4956) + 4|0);
  $4958 = +HEAPF32[$4957>>2];
  $4959 = $4955 * $4958;
  $fTemp92 = $4959;
  $4960 = (($4) + 1772|0);
  $4961 = (($4960) + 8|0);
  $4962 = +HEAPF32[$4961>>2];
  $4963 = $fSlow33;
  $4964 = $fTemp91;
  $4965 = $fSlow34;
  $4966 = (($4) + 1772|0);
  $4967 = +HEAPF32[$4966>>2];
  $4968 = $4965 * $4967;
  $4969 = $4964 + $4968;
  $4970 = $4963 * $4969;
  $4971 = $4962 + $4970;
  $4972 = $fSlow39;
  $4973 = $fSlow42;
  $4974 = (($4) + 1784|0);
  $4975 = (($4974) + 8|0);
  $4976 = +HEAPF32[$4975>>2];
  $4977 = $4973 * $4976;
  $4978 = $fTemp92;
  $4979 = $4977 + $4978;
  $4980 = $4972 * $4979;
  $4981 = $4971 - $4980;
  $4982 = (($4) + 1784|0);
  HEAPF32[$4982>>2] = $4981;
  $4983 = $fSlow48;
  $4984 = (($4) + 1796|0);
  $4985 = (($4984) + 4|0);
  $4986 = +HEAPF32[$4985>>2];
  $4987 = $4983 * $4986;
  $4988 = $fSlow49;
  $4989 = (($4) + 1744|0);
  $4990 = +HEAPF32[$4989>>2];
  $4991 = (($4) + 1744|0);
  $4992 = (($4991) + 4|0);
  $4993 = +HEAPF32[$4992>>2];
  $4994 = $4990 + $4993;
  $4995 = $4988 * $4994;
  $4996 = $4987 + $4995;
  $4997 = (($4) + 1796|0);
  HEAPF32[$4997>>2] = $4996;
  $4998 = (($4) + 1796|0);
  $4999 = +HEAPF32[$4998>>2];
  $5000 = $fSlow46;
  $5001 = $fSlow52;
  $5002 = (($4) + 1804|0);
  $5003 = (($5002) + 8|0);
  $5004 = +HEAPF32[$5003>>2];
  $5005 = $5001 * $5004;
  $5006 = $fSlow29;
  $5007 = (($4) + 1804|0);
  $5008 = (($5007) + 4|0);
  $5009 = +HEAPF32[$5008>>2];
  $5010 = $5006 * $5009;
  $5011 = $5005 + $5010;
  $5012 = $5000 * $5011;
  $5013 = $4999 - $5012;
  $5014 = (($4) + 1804|0);
  HEAPF32[$5014>>2] = $5013;
  $5015 = (($4) + 1804|0);
  $5016 = (($5015) + 8|0);
  $5017 = +HEAPF32[$5016>>2];
  $5018 = (($4) + 1804|0);
  $5019 = +HEAPF32[$5018>>2];
  $5020 = (($4) + 1804|0);
  $5021 = (($5020) + 4|0);
  $5022 = +HEAPF32[$5021>>2];
  $5023 = 2.0 * $5022;
  $5024 = $5019 + $5023;
  $5025 = $5017 + $5024;
  $fTemp93 = $5025;
  $5026 = $fSlow46;
  $5027 = $fTemp93;
  $5028 = $5026 * $5027;
  $fTemp94 = $5028;
  $5029 = $fTemp94;
  $5030 = (($4) + 1816|0);
  HEAPF32[$5030>>2] = $5029;
  $5031 = $fSlow59;
  $5032 = (($4) + 1824|0);
  $5033 = (($5032) + 4|0);
  $5034 = +HEAPF32[$5033>>2];
  $5035 = $5031 * $5034;
  $5036 = $fSlow60;
  $5037 = $fSlow62;
  $5038 = $fTemp93;
  $5039 = $5037 * $5038;
  $5040 = $fSlow61;
  $5041 = (($4) + 1816|0);
  $5042 = (($5041) + 4|0);
  $5043 = +HEAPF32[$5042>>2];
  $5044 = $5040 * $5043;
  $5045 = $5039 + $5044;
  $5046 = $5036 * $5045;
  $5047 = $5035 + $5046;
  $5048 = (($4) + 1824|0);
  HEAPF32[$5048>>2] = $5047;
  $5049 = (($4) + 1824|0);
  $5050 = +HEAPF32[$5049>>2];
  $5051 = $fSlow57;
  $5052 = $fSlow63;
  $5053 = (($4) + 1832|0);
  $5054 = (($5053) + 8|0);
  $5055 = +HEAPF32[$5054>>2];
  $5056 = $5052 * $5055;
  $5057 = $fSlow36;
  $5058 = (($4) + 1832|0);
  $5059 = (($5058) + 4|0);
  $5060 = +HEAPF32[$5059>>2];
  $5061 = $5057 * $5060;
  $5062 = $5056 + $5061;
  $5063 = $5051 * $5062;
  $5064 = $5050 - $5063;
  $5065 = (($4) + 1832|0);
  HEAPF32[$5065>>2] = $5064;
  $5066 = $fSlow41;
  $5067 = (($4) + 1844|0);
  $5068 = (($5067) + 4|0);
  $5069 = +HEAPF32[$5068>>2];
  $5070 = $5066 * $5069;
  $fTemp95 = $5070;
  $5071 = $fSlow57;
  $5072 = $fSlow35;
  $5073 = (($4) + 1832|0);
  $5074 = +HEAPF32[$5073>>2];
  $5075 = $5072 * $5074;
  $5076 = $fSlow64;
  $5077 = (($4) + 1832|0);
  $5078 = (($5077) + 4|0);
  $5079 = +HEAPF32[$5078>>2];
  $5080 = $5076 * $5079;
  $5081 = $5075 + $5080;
  $5082 = $fSlow35;
  $5083 = (($4) + 1832|0);
  $5084 = (($5083) + 8|0);
  $5085 = +HEAPF32[$5084>>2];
  $5086 = $5082 * $5085;
  $5087 = $5081 + $5086;
  $5088 = $5071 * $5087;
  $5089 = $fSlow39;
  $5090 = $fSlow42;
  $5091 = (($4) + 1844|0);
  $5092 = (($5091) + 8|0);
  $5093 = +HEAPF32[$5092>>2];
  $5094 = $5090 * $5093;
  $5095 = $fTemp95;
  $5096 = $5094 + $5095;
  $5097 = $5089 * $5096;
  $5098 = $5088 - $5097;
  $5099 = (($4) + 1844|0);
  HEAPF32[$5099>>2] = $5098;
  $5100 = $fSlow59;
  $5101 = (($4) + 1856|0);
  $5102 = (($5101) + 4|0);
  $5103 = +HEAPF32[$5102>>2];
  $5104 = $5100 * $5103;
  $5105 = $fSlow60;
  $5106 = (($4) + 1816|0);
  $5107 = +HEAPF32[$5106>>2];
  $5108 = (($4) + 1816|0);
  $5109 = (($5108) + 4|0);
  $5110 = +HEAPF32[$5109>>2];
  $5111 = $5107 + $5110;
  $5112 = $5105 * $5111;
  $5113 = $5104 + $5112;
  $5114 = (($4) + 1856|0);
  HEAPF32[$5114>>2] = $5113;
  $5115 = (($4) + 1856|0);
  $5116 = +HEAPF32[$5115>>2];
  $5117 = $fSlow57;
  $5118 = $fSlow63;
  $5119 = (($4) + 1864|0);
  $5120 = (($5119) + 8|0);
  $5121 = +HEAPF32[$5120>>2];
  $5122 = $5118 * $5121;
  $5123 = $fSlow36;
  $5124 = (($4) + 1864|0);
  $5125 = (($5124) + 4|0);
  $5126 = +HEAPF32[$5125>>2];
  $5127 = $5123 * $5126;
  $5128 = $5122 + $5127;
  $5129 = $5117 * $5128;
  $5130 = $5116 - $5129;
  $5131 = (($4) + 1864|0);
  HEAPF32[$5131>>2] = $5130;
  $5132 = (($4) + 1864|0);
  $5133 = (($5132) + 8|0);
  $5134 = +HEAPF32[$5133>>2];
  $5135 = (($4) + 1864|0);
  $5136 = +HEAPF32[$5135>>2];
  $5137 = (($4) + 1864|0);
  $5138 = (($5137) + 4|0);
  $5139 = +HEAPF32[$5138>>2];
  $5140 = 2.0 * $5139;
  $5141 = $5136 + $5140;
  $5142 = $5134 + $5141;
  $fTemp96 = $5142;
  $5143 = $fSlow57;
  $5144 = $fTemp96;
  $5145 = $5143 * $5144;
  $fTemp97 = $5145;
  $5146 = $fTemp97;
  $5147 = (($4) + 1876|0);
  HEAPF32[$5147>>2] = $5146;
  $5148 = $fSlow69;
  $5149 = (($4) + 1884|0);
  $5150 = (($5149) + 4|0);
  $5151 = +HEAPF32[$5150>>2];
  $5152 = $5148 * $5151;
  $5153 = $fSlow70;
  $5154 = $fSlow72;
  $5155 = $fTemp96;
  $5156 = $5154 * $5155;
  $5157 = $fSlow71;
  $5158 = (($4) + 1876|0);
  $5159 = (($5158) + 4|0);
  $5160 = +HEAPF32[$5159>>2];
  $5161 = $5157 * $5160;
  $5162 = $5156 + $5161;
  $5163 = $5153 * $5162;
  $5164 = $5152 + $5163;
  $5165 = (($4) + 1884|0);
  HEAPF32[$5165>>2] = $5164;
  $5166 = (($4) + 1884|0);
  $5167 = +HEAPF32[$5166>>2];
  $5168 = $fSlow65;
  $5169 = $fSlow73;
  $5170 = (($4) + 1892|0);
  $5171 = (($5170) + 8|0);
  $5172 = +HEAPF32[$5171>>2];
  $5173 = $5169 * $5172;
  $5174 = $fSlow41;
  $5175 = (($4) + 1892|0);
  $5176 = (($5175) + 4|0);
  $5177 = +HEAPF32[$5176>>2];
  $5178 = $5174 * $5177;
  $5179 = $5173 + $5178;
  $5180 = $5168 * $5179;
  $5181 = $5167 - $5180;
  $5182 = (($4) + 1892|0);
  HEAPF32[$5182>>2] = $5181;
  $5183 = $fSlow69;
  $5184 = (($4) + 1904|0);
  $5185 = (($5184) + 4|0);
  $5186 = +HEAPF32[$5185>>2];
  $5187 = $5183 * $5186;
  $5188 = $fSlow70;
  $5189 = (($4) + 1876|0);
  $5190 = +HEAPF32[$5189>>2];
  $5191 = (($4) + 1876|0);
  $5192 = (($5191) + 4|0);
  $5193 = +HEAPF32[$5192>>2];
  $5194 = $5190 + $5193;
  $5195 = $5188 * $5194;
  $5196 = $5187 + $5195;
  $5197 = (($4) + 1904|0);
  HEAPF32[$5197>>2] = $5196;
  $5198 = (($4) + 1904|0);
  $5199 = +HEAPF32[$5198>>2];
  $5200 = $fSlow65;
  $5201 = $fSlow73;
  $5202 = (($4) + 1912|0);
  $5203 = (($5202) + 8|0);
  $5204 = +HEAPF32[$5203>>2];
  $5205 = $5201 * $5204;
  $5206 = $fSlow41;
  $5207 = (($4) + 1912|0);
  $5208 = (($5207) + 4|0);
  $5209 = +HEAPF32[$5208>>2];
  $5210 = $5206 * $5209;
  $5211 = $5205 + $5210;
  $5212 = $5200 * $5211;
  $5213 = $5199 - $5212;
  $5214 = (($4) + 1912|0);
  HEAPF32[$5214>>2] = $5213;
  $5215 = $fSlow114;
  $5216 = (($4) + 1712|0);
  $5217 = (($5216) + 8|0);
  $5218 = +HEAPF32[$5217>>2];
  $5219 = $fSlow39;
  $5220 = $fTemp88;
  $5221 = $fSlow42;
  $5222 = (($4) + 1712|0);
  $5223 = +HEAPF32[$5222>>2];
  $5224 = $5221 * $5223;
  $5225 = $5220 + $5224;
  $5226 = $5219 * $5225;
  $5227 = $5218 + $5226;
  $5228 = $5215 * $5227;
  $5229 = $fSlow115;
  $5230 = (($4) + 1784|0);
  $5231 = (($5230) + 8|0);
  $5232 = +HEAPF32[$5231>>2];
  $5233 = $fSlow39;
  $5234 = $fTemp92;
  $5235 = $fSlow42;
  $5236 = (($4) + 1784|0);
  $5237 = +HEAPF32[$5236>>2];
  $5238 = $5235 * $5237;
  $5239 = $5234 + $5238;
  $5240 = $5233 * $5239;
  $5241 = $5232 + $5240;
  $5242 = $5229 * $5241;
  $5243 = $5228 + $5242;
  $5244 = $fSlow116;
  $5245 = (($4) + 1844|0);
  $5246 = (($5245) + 8|0);
  $5247 = +HEAPF32[$5246>>2];
  $5248 = $fSlow39;
  $5249 = $fTemp95;
  $5250 = $fSlow42;
  $5251 = (($4) + 1844|0);
  $5252 = +HEAPF32[$5251>>2];
  $5253 = $5250 * $5252;
  $5254 = $5249 + $5253;
  $5255 = $5248 * $5254;
  $5256 = $5247 + $5255;
  $5257 = $5244 * $5256;
  $5258 = $5243 + $5257;
  $5259 = $fSlow65;
  $5260 = $fSlow117;
  $5261 = $fSlow40;
  $5262 = (($4) + 1892|0);
  $5263 = +HEAPF32[$5262>>2];
  $5264 = $5261 * $5263;
  $5265 = $fSlow74;
  $5266 = (($4) + 1892|0);
  $5267 = (($5266) + 4|0);
  $5268 = +HEAPF32[$5267>>2];
  $5269 = $5265 * $5268;
  $5270 = $5264 + $5269;
  $5271 = $fSlow40;
  $5272 = (($4) + 1892|0);
  $5273 = (($5272) + 8|0);
  $5274 = +HEAPF32[$5273>>2];
  $5275 = $5271 * $5274;
  $5276 = $5270 + $5275;
  $5277 = $5260 * $5276;
  $5278 = $fSlow118;
  $5279 = (($4) + 1912|0);
  $5280 = (($5279) + 8|0);
  $5281 = +HEAPF32[$5280>>2];
  $5282 = (($4) + 1912|0);
  $5283 = +HEAPF32[$5282>>2];
  $5284 = (($4) + 1912|0);
  $5285 = (($5284) + 4|0);
  $5286 = +HEAPF32[$5285>>2];
  $5287 = 2.0 * $5286;
  $5288 = $5283 + $5287;
  $5289 = $5281 + $5288;
  $5290 = $5278 * $5289;
  $5291 = $5277 + $5290;
  $5292 = $5259 * $5291;
  $5293 = $5258 + $5292;
  $fTemp98 = $5293;
  $5294 = $fSlow19;
  $5295 = (($4) + 1924|0);
  $5296 = (($5295) + 4|0);
  $5297 = +HEAPF32[$5296>>2];
  $5298 = $5294 * $5297;
  $5299 = $fSlow20;
  $5300 = $fSlow14;
  $5301 = (($4) + 495932|0);
  $5302 = (($5301) + 4|0);
  $5303 = +HEAPF32[$5302>>2];
  $5304 = $5300 * $5303;
  $5305 = $fSlow21;
  $5306 = (($4) + 495932|0);
  $5307 = (($5306) + 8|0);
  $5308 = +HEAPF32[$5307>>2];
  $5309 = $5305 * $5308;
  $5310 = $5304 + $5309;
  $5311 = $5299 * $5310;
  $5312 = $5298 + $5311;
  $5313 = (($4) + 1924|0);
  HEAPF32[$5313>>2] = $5312;
  $5314 = (($4) + 1924|0);
  $5315 = +HEAPF32[$5314>>2];
  $5316 = $fSlow16;
  $5317 = $fSlow22;
  $5318 = (($4) + 1932|0);
  $5319 = (($5318) + 8|0);
  $5320 = +HEAPF32[$5319>>2];
  $5321 = $5317 * $5320;
  $5322 = $fSlow23;
  $5323 = (($4) + 1932|0);
  $5324 = (($5323) + 4|0);
  $5325 = +HEAPF32[$5324>>2];
  $5326 = $5322 * $5325;
  $5327 = $5321 + $5326;
  $5328 = $5316 * $5327;
  $5329 = $5315 - $5328;
  $5330 = (($4) + 1932|0);
  HEAPF32[$5330>>2] = $5329;
  $5331 = $fSlow29;
  $5332 = (($4) + 1944|0);
  $5333 = (($5332) + 4|0);
  $5334 = +HEAPF32[$5333>>2];
  $5335 = $5331 * $5334;
  $fTemp99 = $5335;
  $5336 = $fSlow16;
  $5337 = $fSlow17;
  $5338 = (($4) + 1932|0);
  $5339 = +HEAPF32[$5338>>2];
  $5340 = $5337 * $5339;
  $5341 = $fSlow24;
  $5342 = (($4) + 1932|0);
  $5343 = (($5342) + 4|0);
  $5344 = +HEAPF32[$5343>>2];
  $5345 = $5341 * $5344;
  $5346 = $5340 + $5345;
  $5347 = $fSlow17;
  $5348 = (($4) + 1932|0);
  $5349 = (($5348) + 8|0);
  $5350 = +HEAPF32[$5349>>2];
  $5351 = $5347 * $5350;
  $5352 = $5346 + $5351;
  $5353 = $5336 * $5352;
  $5354 = $fSlow27;
  $5355 = $fSlow30;
  $5356 = (($4) + 1944|0);
  $5357 = (($5356) + 8|0);
  $5358 = +HEAPF32[$5357>>2];
  $5359 = $5355 * $5358;
  $5360 = $fTemp99;
  $5361 = $5359 + $5360;
  $5362 = $5354 * $5361;
  $5363 = $5353 - $5362;
  $5364 = (($4) + 1944|0);
  HEAPF32[$5364>>2] = $5363;
  $5365 = $fSlow36;
  $5366 = (($4) + 1956|0);
  $5367 = (($5366) + 4|0);
  $5368 = +HEAPF32[$5367>>2];
  $5369 = $5365 * $5368;
  $fTemp100 = $5369;
  $5370 = (($4) + 1944|0);
  $5371 = (($5370) + 8|0);
  $5372 = +HEAPF32[$5371>>2];
  $5373 = $fSlow27;
  $5374 = $fTemp99;
  $5375 = $fSlow30;
  $5376 = (($4) + 1944|0);
  $5377 = +HEAPF32[$5376>>2];
  $5378 = $5375 * $5377;
  $5379 = $5374 + $5378;
  $5380 = $5373 * $5379;
  $5381 = $5372 + $5380;
  $5382 = $fSlow33;
  $5383 = $fSlow34;
  $5384 = (($4) + 1956|0);
  $5385 = (($5384) + 8|0);
  $5386 = +HEAPF32[$5385>>2];
  $5387 = $5383 * $5386;
  $5388 = $fTemp100;
  $5389 = $5387 + $5388;
  $5390 = $5382 * $5389;
  $5391 = $5381 - $5390;
  $5392 = (($4) + 1956|0);
  HEAPF32[$5392>>2] = $5391;
  $5393 = $fSlow41;
  $5394 = (($4) + 1968|0);
  $5395 = (($5394) + 4|0);
  $5396 = +HEAPF32[$5395>>2];
  $5397 = $5393 * $5396;
  $fTemp101 = $5397;
  $5398 = (($4) + 1956|0);
  $5399 = (($5398) + 8|0);
  $5400 = +HEAPF32[$5399>>2];
  $5401 = $fSlow33;
  $5402 = $fTemp100;
  $5403 = $fSlow34;
  $5404 = (($4) + 1956|0);
  $5405 = +HEAPF32[$5404>>2];
  $5406 = $5403 * $5405;
  $5407 = $5402 + $5406;
  $5408 = $5401 * $5407;
  $5409 = $5400 + $5408;
  $5410 = $fSlow39;
  $5411 = $fSlow42;
  $5412 = (($4) + 1968|0);
  $5413 = (($5412) + 8|0);
  $5414 = +HEAPF32[$5413>>2];
  $5415 = $5411 * $5414;
  $5416 = $fTemp101;
  $5417 = $5415 + $5416;
  $5418 = $5410 * $5417;
  $5419 = $5409 - $5418;
  $5420 = (($4) + 1968|0);
  HEAPF32[$5420>>2] = $5419;
  $5421 = $fSlow19;
  $5422 = (($4) + 1980|0);
  $5423 = (($5422) + 4|0);
  $5424 = +HEAPF32[$5423>>2];
  $5425 = $5421 * $5424;
  $5426 = $fSlow20;
  $5427 = (($4) + 495932|0);
  $5428 = (($5427) + 4|0);
  $5429 = +HEAPF32[$5428>>2];
  $5430 = (($4) + 495932|0);
  $5431 = (($5430) + 8|0);
  $5432 = +HEAPF32[$5431>>2];
  $5433 = $5429 + $5432;
  $5434 = $5426 * $5433;
  $5435 = $5425 + $5434;
  $5436 = (($4) + 1980|0);
  HEAPF32[$5436>>2] = $5435;
  $5437 = (($4) + 1980|0);
  $5438 = +HEAPF32[$5437>>2];
  $5439 = $fSlow16;
  $5440 = $fSlow22;
  $5441 = (($4) + 1988|0);
  $5442 = (($5441) + 8|0);
  $5443 = +HEAPF32[$5442>>2];
  $5444 = $5440 * $5443;
  $5445 = $fSlow23;
  $5446 = (($4) + 1988|0);
  $5447 = (($5446) + 4|0);
  $5448 = +HEAPF32[$5447>>2];
  $5449 = $5445 * $5448;
  $5450 = $5444 + $5449;
  $5451 = $5439 * $5450;
  $5452 = $5438 - $5451;
  $5453 = (($4) + 1988|0);
  HEAPF32[$5453>>2] = $5452;
  $5454 = (($4) + 1988|0);
  $5455 = (($5454) + 8|0);
  $5456 = +HEAPF32[$5455>>2];
  $5457 = (($4) + 1988|0);
  $5458 = +HEAPF32[$5457>>2];
  $5459 = (($4) + 1988|0);
  $5460 = (($5459) + 4|0);
  $5461 = +HEAPF32[$5460>>2];
  $5462 = 2.0 * $5461;
  $5463 = $5458 + $5462;
  $5464 = $5456 + $5463;
  $fTemp102 = $5464;
  $5465 = $fSlow16;
  $5466 = $fTemp102;
  $5467 = $5465 * $5466;
  $fTemp103 = $5467;
  $5468 = $fTemp103;
  $5469 = (($4) + 2000|0);
  HEAPF32[$5469>>2] = $5468;
  $5470 = $fSlow48;
  $5471 = (($4) + 2008|0);
  $5472 = (($5471) + 4|0);
  $5473 = +HEAPF32[$5472>>2];
  $5474 = $5470 * $5473;
  $5475 = $fSlow49;
  $5476 = $fSlow51;
  $5477 = $fTemp102;
  $5478 = $5476 * $5477;
  $5479 = $fSlow50;
  $5480 = (($4) + 2000|0);
  $5481 = (($5480) + 4|0);
  $5482 = +HEAPF32[$5481>>2];
  $5483 = $5479 * $5482;
  $5484 = $5478 + $5483;
  $5485 = $5475 * $5484;
  $5486 = $5474 + $5485;
  $5487 = (($4) + 2008|0);
  HEAPF32[$5487>>2] = $5486;
  $5488 = (($4) + 2008|0);
  $5489 = +HEAPF32[$5488>>2];
  $5490 = $fSlow46;
  $5491 = $fSlow52;
  $5492 = (($4) + 2016|0);
  $5493 = (($5492) + 8|0);
  $5494 = +HEAPF32[$5493>>2];
  $5495 = $5491 * $5494;
  $5496 = $fSlow29;
  $5497 = (($4) + 2016|0);
  $5498 = (($5497) + 4|0);
  $5499 = +HEAPF32[$5498>>2];
  $5500 = $5496 * $5499;
  $5501 = $5495 + $5500;
  $5502 = $5490 * $5501;
  $5503 = $5489 - $5502;
  $5504 = (($4) + 2016|0);
  HEAPF32[$5504>>2] = $5503;
  $5505 = $fSlow36;
  $5506 = (($4) + 2028|0);
  $5507 = (($5506) + 4|0);
  $5508 = +HEAPF32[$5507>>2];
  $5509 = $5505 * $5508;
  $fTemp104 = $5509;
  $5510 = $fSlow46;
  $5511 = $fSlow28;
  $5512 = (($4) + 2016|0);
  $5513 = +HEAPF32[$5512>>2];
  $5514 = $5511 * $5513;
  $5515 = $fSlow53;
  $5516 = (($4) + 2016|0);
  $5517 = (($5516) + 4|0);
  $5518 = +HEAPF32[$5517>>2];
  $5519 = $5515 * $5518;
  $5520 = $5514 + $5519;
  $5521 = $fSlow28;
  $5522 = (($4) + 2016|0);
  $5523 = (($5522) + 8|0);
  $5524 = +HEAPF32[$5523>>2];
  $5525 = $5521 * $5524;
  $5526 = $5520 + $5525;
  $5527 = $5510 * $5526;
  $5528 = $fSlow33;
  $5529 = $fSlow34;
  $5530 = (($4) + 2028|0);
  $5531 = (($5530) + 8|0);
  $5532 = +HEAPF32[$5531>>2];
  $5533 = $5529 * $5532;
  $5534 = $fTemp104;
  $5535 = $5533 + $5534;
  $5536 = $5528 * $5535;
  $5537 = $5527 - $5536;
  $5538 = (($4) + 2028|0);
  HEAPF32[$5538>>2] = $5537;
  $5539 = $fSlow41;
  $5540 = (($4) + 2040|0);
  $5541 = (($5540) + 4|0);
  $5542 = +HEAPF32[$5541>>2];
  $5543 = $5539 * $5542;
  $fTemp105 = $5543;
  $5544 = (($4) + 2028|0);
  $5545 = (($5544) + 8|0);
  $5546 = +HEAPF32[$5545>>2];
  $5547 = $fSlow33;
  $5548 = $fTemp104;
  $5549 = $fSlow34;
  $5550 = (($4) + 2028|0);
  $5551 = +HEAPF32[$5550>>2];
  $5552 = $5549 * $5551;
  $5553 = $5548 + $5552;
  $5554 = $5547 * $5553;
  $5555 = $5546 + $5554;
  $5556 = $fSlow39;
  $5557 = $fSlow42;
  $5558 = (($4) + 2040|0);
  $5559 = (($5558) + 8|0);
  $5560 = +HEAPF32[$5559>>2];
  $5561 = $5557 * $5560;
  $5562 = $fTemp105;
  $5563 = $5561 + $5562;
  $5564 = $5556 * $5563;
  $5565 = $5555 - $5564;
  $5566 = (($4) + 2040|0);
  HEAPF32[$5566>>2] = $5565;
  $5567 = $fSlow48;
  $5568 = (($4) + 2052|0);
  $5569 = (($5568) + 4|0);
  $5570 = +HEAPF32[$5569>>2];
  $5571 = $5567 * $5570;
  $5572 = $fSlow49;
  $5573 = (($4) + 2000|0);
  $5574 = +HEAPF32[$5573>>2];
  $5575 = (($4) + 2000|0);
  $5576 = (($5575) + 4|0);
  $5577 = +HEAPF32[$5576>>2];
  $5578 = $5574 + $5577;
  $5579 = $5572 * $5578;
  $5580 = $5571 + $5579;
  $5581 = (($4) + 2052|0);
  HEAPF32[$5581>>2] = $5580;
  $5582 = (($4) + 2052|0);
  $5583 = +HEAPF32[$5582>>2];
  $5584 = $fSlow46;
  $5585 = $fSlow52;
  $5586 = (($4) + 2060|0);
  $5587 = (($5586) + 8|0);
  $5588 = +HEAPF32[$5587>>2];
  $5589 = $5585 * $5588;
  $5590 = $fSlow29;
  $5591 = (($4) + 2060|0);
  $5592 = (($5591) + 4|0);
  $5593 = +HEAPF32[$5592>>2];
  $5594 = $5590 * $5593;
  $5595 = $5589 + $5594;
  $5596 = $5584 * $5595;
  $5597 = $5583 - $5596;
  $5598 = (($4) + 2060|0);
  HEAPF32[$5598>>2] = $5597;
  $5599 = (($4) + 2060|0);
  $5600 = (($5599) + 8|0);
  $5601 = +HEAPF32[$5600>>2];
  $5602 = (($4) + 2060|0);
  $5603 = +HEAPF32[$5602>>2];
  $5604 = (($4) + 2060|0);
  $5605 = (($5604) + 4|0);
  $5606 = +HEAPF32[$5605>>2];
  $5607 = 2.0 * $5606;
  $5608 = $5603 + $5607;
  $5609 = $5601 + $5608;
  $fTemp106 = $5609;
  $5610 = $fSlow46;
  $5611 = $fTemp106;
  $5612 = $5610 * $5611;
  $fTemp107 = $5612;
  $5613 = $fTemp107;
  $5614 = (($4) + 2072|0);
  HEAPF32[$5614>>2] = $5613;
  $5615 = $fSlow59;
  $5616 = (($4) + 2080|0);
  $5617 = (($5616) + 4|0);
  $5618 = +HEAPF32[$5617>>2];
  $5619 = $5615 * $5618;
  $5620 = $fSlow60;
  $5621 = $fSlow62;
  $5622 = $fTemp106;
  $5623 = $5621 * $5622;
  $5624 = $fSlow61;
  $5625 = (($4) + 2072|0);
  $5626 = (($5625) + 4|0);
  $5627 = +HEAPF32[$5626>>2];
  $5628 = $5624 * $5627;
  $5629 = $5623 + $5628;
  $5630 = $5620 * $5629;
  $5631 = $5619 + $5630;
  $5632 = (($4) + 2080|0);
  HEAPF32[$5632>>2] = $5631;
  $5633 = (($4) + 2080|0);
  $5634 = +HEAPF32[$5633>>2];
  $5635 = $fSlow57;
  $5636 = $fSlow63;
  $5637 = (($4) + 2088|0);
  $5638 = (($5637) + 8|0);
  $5639 = +HEAPF32[$5638>>2];
  $5640 = $5636 * $5639;
  $5641 = $fSlow36;
  $5642 = (($4) + 2088|0);
  $5643 = (($5642) + 4|0);
  $5644 = +HEAPF32[$5643>>2];
  $5645 = $5641 * $5644;
  $5646 = $5640 + $5645;
  $5647 = $5635 * $5646;
  $5648 = $5634 - $5647;
  $5649 = (($4) + 2088|0);
  HEAPF32[$5649>>2] = $5648;
  $5650 = $fSlow41;
  $5651 = (($4) + 2100|0);
  $5652 = (($5651) + 4|0);
  $5653 = +HEAPF32[$5652>>2];
  $5654 = $5650 * $5653;
  $fTemp108 = $5654;
  $5655 = $fSlow57;
  $5656 = $fSlow35;
  $5657 = (($4) + 2088|0);
  $5658 = +HEAPF32[$5657>>2];
  $5659 = $5656 * $5658;
  $5660 = $fSlow64;
  $5661 = (($4) + 2088|0);
  $5662 = (($5661) + 4|0);
  $5663 = +HEAPF32[$5662>>2];
  $5664 = $5660 * $5663;
  $5665 = $5659 + $5664;
  $5666 = $fSlow35;
  $5667 = (($4) + 2088|0);
  $5668 = (($5667) + 8|0);
  $5669 = +HEAPF32[$5668>>2];
  $5670 = $5666 * $5669;
  $5671 = $5665 + $5670;
  $5672 = $5655 * $5671;
  $5673 = $fSlow39;
  $5674 = $fSlow42;
  $5675 = (($4) + 2100|0);
  $5676 = (($5675) + 8|0);
  $5677 = +HEAPF32[$5676>>2];
  $5678 = $5674 * $5677;
  $5679 = $fTemp108;
  $5680 = $5678 + $5679;
  $5681 = $5673 * $5680;
  $5682 = $5672 - $5681;
  $5683 = (($4) + 2100|0);
  HEAPF32[$5683>>2] = $5682;
  $5684 = $fSlow59;
  $5685 = (($4) + 2112|0);
  $5686 = (($5685) + 4|0);
  $5687 = +HEAPF32[$5686>>2];
  $5688 = $5684 * $5687;
  $5689 = $fSlow60;
  $5690 = (($4) + 2072|0);
  $5691 = +HEAPF32[$5690>>2];
  $5692 = (($4) + 2072|0);
  $5693 = (($5692) + 4|0);
  $5694 = +HEAPF32[$5693>>2];
  $5695 = $5691 + $5694;
  $5696 = $5689 * $5695;
  $5697 = $5688 + $5696;
  $5698 = (($4) + 2112|0);
  HEAPF32[$5698>>2] = $5697;
  $5699 = (($4) + 2112|0);
  $5700 = +HEAPF32[$5699>>2];
  $5701 = $fSlow57;
  $5702 = $fSlow63;
  $5703 = (($4) + 2120|0);
  $5704 = (($5703) + 8|0);
  $5705 = +HEAPF32[$5704>>2];
  $5706 = $5702 * $5705;
  $5707 = $fSlow36;
  $5708 = (($4) + 2120|0);
  $5709 = (($5708) + 4|0);
  $5710 = +HEAPF32[$5709>>2];
  $5711 = $5707 * $5710;
  $5712 = $5706 + $5711;
  $5713 = $5701 * $5712;
  $5714 = $5700 - $5713;
  $5715 = (($4) + 2120|0);
  HEAPF32[$5715>>2] = $5714;
  $5716 = (($4) + 2120|0);
  $5717 = (($5716) + 8|0);
  $5718 = +HEAPF32[$5717>>2];
  $5719 = (($4) + 2120|0);
  $5720 = +HEAPF32[$5719>>2];
  $5721 = (($4) + 2120|0);
  $5722 = (($5721) + 4|0);
  $5723 = +HEAPF32[$5722>>2];
  $5724 = 2.0 * $5723;
  $5725 = $5720 + $5724;
  $5726 = $5718 + $5725;
  $fTemp109 = $5726;
  $5727 = $fSlow57;
  $5728 = $fTemp109;
  $5729 = $5727 * $5728;
  $fTemp110 = $5729;
  $5730 = $fTemp110;
  $5731 = (($4) + 2132|0);
  HEAPF32[$5731>>2] = $5730;
  $5732 = $fSlow69;
  $5733 = (($4) + 2140|0);
  $5734 = (($5733) + 4|0);
  $5735 = +HEAPF32[$5734>>2];
  $5736 = $5732 * $5735;
  $5737 = $fSlow70;
  $5738 = $fSlow72;
  $5739 = $fTemp109;
  $5740 = $5738 * $5739;
  $5741 = $fSlow71;
  $5742 = (($4) + 2132|0);
  $5743 = (($5742) + 4|0);
  $5744 = +HEAPF32[$5743>>2];
  $5745 = $5741 * $5744;
  $5746 = $5740 + $5745;
  $5747 = $5737 * $5746;
  $5748 = $5736 + $5747;
  $5749 = (($4) + 2140|0);
  HEAPF32[$5749>>2] = $5748;
  $5750 = (($4) + 2140|0);
  $5751 = +HEAPF32[$5750>>2];
  $5752 = $fSlow65;
  $5753 = $fSlow73;
  $5754 = (($4) + 2148|0);
  $5755 = (($5754) + 8|0);
  $5756 = +HEAPF32[$5755>>2];
  $5757 = $5753 * $5756;
  $5758 = $fSlow41;
  $5759 = (($4) + 2148|0);
  $5760 = (($5759) + 4|0);
  $5761 = +HEAPF32[$5760>>2];
  $5762 = $5758 * $5761;
  $5763 = $5757 + $5762;
  $5764 = $5752 * $5763;
  $5765 = $5751 - $5764;
  $5766 = (($4) + 2148|0);
  HEAPF32[$5766>>2] = $5765;
  $5767 = $fSlow69;
  $5768 = (($4) + 2160|0);
  $5769 = (($5768) + 4|0);
  $5770 = +HEAPF32[$5769>>2];
  $5771 = $5767 * $5770;
  $5772 = $fSlow70;
  $5773 = (($4) + 2132|0);
  $5774 = +HEAPF32[$5773>>2];
  $5775 = (($4) + 2132|0);
  $5776 = (($5775) + 4|0);
  $5777 = +HEAPF32[$5776>>2];
  $5778 = $5774 + $5777;
  $5779 = $5772 * $5778;
  $5780 = $5771 + $5779;
  $5781 = (($4) + 2160|0);
  HEAPF32[$5781>>2] = $5780;
  $5782 = (($4) + 2160|0);
  $5783 = +HEAPF32[$5782>>2];
  $5784 = $fSlow65;
  $5785 = $fSlow73;
  $5786 = (($4) + 2168|0);
  $5787 = (($5786) + 8|0);
  $5788 = +HEAPF32[$5787>>2];
  $5789 = $5785 * $5788;
  $5790 = $fSlow41;
  $5791 = (($4) + 2168|0);
  $5792 = (($5791) + 4|0);
  $5793 = +HEAPF32[$5792>>2];
  $5794 = $5790 * $5793;
  $5795 = $5789 + $5794;
  $5796 = $5784 * $5795;
  $5797 = $5783 - $5796;
  $5798 = (($4) + 2168|0);
  HEAPF32[$5798>>2] = $5797;
  $5799 = $fSlow121;
  $5800 = (($4) + 1968|0);
  $5801 = (($5800) + 8|0);
  $5802 = +HEAPF32[$5801>>2];
  $5803 = $fSlow39;
  $5804 = $fTemp101;
  $5805 = $fSlow42;
  $5806 = (($4) + 1968|0);
  $5807 = +HEAPF32[$5806>>2];
  $5808 = $5805 * $5807;
  $5809 = $5804 + $5808;
  $5810 = $5803 * $5809;
  $5811 = $5802 + $5810;
  $5812 = $5799 * $5811;
  $5813 = $fSlow122;
  $5814 = (($4) + 2040|0);
  $5815 = (($5814) + 8|0);
  $5816 = +HEAPF32[$5815>>2];
  $5817 = $fSlow39;
  $5818 = $fTemp105;
  $5819 = $fSlow42;
  $5820 = (($4) + 2040|0);
  $5821 = +HEAPF32[$5820>>2];
  $5822 = $5819 * $5821;
  $5823 = $5818 + $5822;
  $5824 = $5817 * $5823;
  $5825 = $5816 + $5824;
  $5826 = $5813 * $5825;
  $5827 = $5812 + $5826;
  $5828 = $fSlow123;
  $5829 = (($4) + 2100|0);
  $5830 = (($5829) + 8|0);
  $5831 = +HEAPF32[$5830>>2];
  $5832 = $fSlow39;
  $5833 = $fTemp108;
  $5834 = $fSlow42;
  $5835 = (($4) + 2100|0);
  $5836 = +HEAPF32[$5835>>2];
  $5837 = $5834 * $5836;
  $5838 = $5833 + $5837;
  $5839 = $5832 * $5838;
  $5840 = $5831 + $5839;
  $5841 = $5828 * $5840;
  $5842 = $5827 + $5841;
  $5843 = $fSlow65;
  $5844 = $fSlow124;
  $5845 = $fSlow40;
  $5846 = (($4) + 2148|0);
  $5847 = +HEAPF32[$5846>>2];
  $5848 = $5845 * $5847;
  $5849 = $fSlow74;
  $5850 = (($4) + 2148|0);
  $5851 = (($5850) + 4|0);
  $5852 = +HEAPF32[$5851>>2];
  $5853 = $5849 * $5852;
  $5854 = $5848 + $5853;
  $5855 = $fSlow40;
  $5856 = (($4) + 2148|0);
  $5857 = (($5856) + 8|0);
  $5858 = +HEAPF32[$5857>>2];
  $5859 = $5855 * $5858;
  $5860 = $5854 + $5859;
  $5861 = $5844 * $5860;
  $5862 = $fSlow125;
  $5863 = (($4) + 2168|0);
  $5864 = (($5863) + 8|0);
  $5865 = +HEAPF32[$5864>>2];
  $5866 = (($4) + 2168|0);
  $5867 = +HEAPF32[$5866>>2];
  $5868 = (($4) + 2168|0);
  $5869 = (($5868) + 4|0);
  $5870 = +HEAPF32[$5869>>2];
  $5871 = 2.0 * $5870;
  $5872 = $5867 + $5871;
  $5873 = $5865 + $5872;
  $5874 = $5862 * $5873;
  $5875 = $5861 + $5874;
  $5876 = $5843 * $5875;
  $5877 = $5842 + $5876;
  $fTemp111 = $5877;
  $5878 = $fTemp98;
  $5879 = $fTemp111;
  $5880 = $5878 + $5879;
  $fTemp112 = $5880;
  $5881 = $fTemp85;
  $5882 = $fTemp112;
  $5883 = $5881 + $5882;
  $fTemp113 = $5883;
  $5884 = $fTemp58;
  $5885 = $fTemp113;
  $5886 = $5884 + $5885;
  $fTemp114 = $5886;
  $5887 = $fSlow19;
  $5888 = (($4) + 2180|0);
  $5889 = (($5888) + 4|0);
  $5890 = +HEAPF32[$5889>>2];
  $5891 = $5887 * $5890;
  $5892 = $fSlow20;
  $5893 = $fSlow14;
  $5894 = (($4) + 69792|0);
  $5895 = (($5894) + 4|0);
  $5896 = +HEAPF32[$5895>>2];
  $5897 = $5893 * $5896;
  $5898 = $fSlow21;
  $5899 = (($4) + 69792|0);
  $5900 = (($5899) + 8|0);
  $5901 = +HEAPF32[$5900>>2];
  $5902 = $5898 * $5901;
  $5903 = $5897 + $5902;
  $5904 = $5892 * $5903;
  $5905 = $5891 + $5904;
  $5906 = (($4) + 2180|0);
  HEAPF32[$5906>>2] = $5905;
  $5907 = (($4) + 2180|0);
  $5908 = +HEAPF32[$5907>>2];
  $5909 = $fSlow16;
  $5910 = $fSlow22;
  $5911 = (($4) + 2188|0);
  $5912 = (($5911) + 8|0);
  $5913 = +HEAPF32[$5912>>2];
  $5914 = $5910 * $5913;
  $5915 = $fSlow23;
  $5916 = (($4) + 2188|0);
  $5917 = (($5916) + 4|0);
  $5918 = +HEAPF32[$5917>>2];
  $5919 = $5915 * $5918;
  $5920 = $5914 + $5919;
  $5921 = $5909 * $5920;
  $5922 = $5908 - $5921;
  $5923 = (($4) + 2188|0);
  HEAPF32[$5923>>2] = $5922;
  $5924 = $fSlow29;
  $5925 = (($4) + 2200|0);
  $5926 = (($5925) + 4|0);
  $5927 = +HEAPF32[$5926>>2];
  $5928 = $5924 * $5927;
  $fTemp115 = $5928;
  $5929 = $fSlow16;
  $5930 = $fSlow17;
  $5931 = (($4) + 2188|0);
  $5932 = +HEAPF32[$5931>>2];
  $5933 = $5930 * $5932;
  $5934 = $fSlow24;
  $5935 = (($4) + 2188|0);
  $5936 = (($5935) + 4|0);
  $5937 = +HEAPF32[$5936>>2];
  $5938 = $5934 * $5937;
  $5939 = $5933 + $5938;
  $5940 = $fSlow17;
  $5941 = (($4) + 2188|0);
  $5942 = (($5941) + 8|0);
  $5943 = +HEAPF32[$5942>>2];
  $5944 = $5940 * $5943;
  $5945 = $5939 + $5944;
  $5946 = $5929 * $5945;
  $5947 = $fSlow27;
  $5948 = $fSlow30;
  $5949 = (($4) + 2200|0);
  $5950 = (($5949) + 8|0);
  $5951 = +HEAPF32[$5950>>2];
  $5952 = $5948 * $5951;
  $5953 = $fTemp115;
  $5954 = $5952 + $5953;
  $5955 = $5947 * $5954;
  $5956 = $5946 - $5955;
  $5957 = (($4) + 2200|0);
  HEAPF32[$5957>>2] = $5956;
  $5958 = $fSlow36;
  $5959 = (($4) + 2212|0);
  $5960 = (($5959) + 4|0);
  $5961 = +HEAPF32[$5960>>2];
  $5962 = $5958 * $5961;
  $fTemp116 = $5962;
  $5963 = (($4) + 2200|0);
  $5964 = (($5963) + 8|0);
  $5965 = +HEAPF32[$5964>>2];
  $5966 = $fSlow27;
  $5967 = $fTemp115;
  $5968 = $fSlow30;
  $5969 = (($4) + 2200|0);
  $5970 = +HEAPF32[$5969>>2];
  $5971 = $5968 * $5970;
  $5972 = $5967 + $5971;
  $5973 = $5966 * $5972;
  $5974 = $5965 + $5973;
  $5975 = $fSlow33;
  $5976 = $fSlow34;
  $5977 = (($4) + 2212|0);
  $5978 = (($5977) + 8|0);
  $5979 = +HEAPF32[$5978>>2];
  $5980 = $5976 * $5979;
  $5981 = $fTemp116;
  $5982 = $5980 + $5981;
  $5983 = $5975 * $5982;
  $5984 = $5974 - $5983;
  $5985 = (($4) + 2212|0);
  HEAPF32[$5985>>2] = $5984;
  $5986 = $fSlow41;
  $5987 = (($4) + 2224|0);
  $5988 = (($5987) + 4|0);
  $5989 = +HEAPF32[$5988>>2];
  $5990 = $5986 * $5989;
  $fTemp117 = $5990;
  $5991 = (($4) + 2212|0);
  $5992 = (($5991) + 8|0);
  $5993 = +HEAPF32[$5992>>2];
  $5994 = $fSlow33;
  $5995 = $fTemp116;
  $5996 = $fSlow34;
  $5997 = (($4) + 2212|0);
  $5998 = +HEAPF32[$5997>>2];
  $5999 = $5996 * $5998;
  $6000 = $5995 + $5999;
  $6001 = $5994 * $6000;
  $6002 = $5993 + $6001;
  $6003 = $fSlow39;
  $6004 = $fSlow42;
  $6005 = (($4) + 2224|0);
  $6006 = (($6005) + 8|0);
  $6007 = +HEAPF32[$6006>>2];
  $6008 = $6004 * $6007;
  $6009 = $fTemp117;
  $6010 = $6008 + $6009;
  $6011 = $6003 * $6010;
  $6012 = $6002 - $6011;
  $6013 = (($4) + 2224|0);
  HEAPF32[$6013>>2] = $6012;
  $6014 = $fSlow19;
  $6015 = (($4) + 2236|0);
  $6016 = (($6015) + 4|0);
  $6017 = +HEAPF32[$6016>>2];
  $6018 = $6014 * $6017;
  $6019 = $fSlow20;
  $6020 = (($4) + 69792|0);
  $6021 = (($6020) + 4|0);
  $6022 = +HEAPF32[$6021>>2];
  $6023 = (($4) + 69792|0);
  $6024 = (($6023) + 8|0);
  $6025 = +HEAPF32[$6024>>2];
  $6026 = $6022 + $6025;
  $6027 = $6019 * $6026;
  $6028 = $6018 + $6027;
  $6029 = (($4) + 2236|0);
  HEAPF32[$6029>>2] = $6028;
  $6030 = (($4) + 2236|0);
  $6031 = +HEAPF32[$6030>>2];
  $6032 = $fSlow16;
  $6033 = $fSlow22;
  $6034 = (($4) + 2244|0);
  $6035 = (($6034) + 8|0);
  $6036 = +HEAPF32[$6035>>2];
  $6037 = $6033 * $6036;
  $6038 = $fSlow23;
  $6039 = (($4) + 2244|0);
  $6040 = (($6039) + 4|0);
  $6041 = +HEAPF32[$6040>>2];
  $6042 = $6038 * $6041;
  $6043 = $6037 + $6042;
  $6044 = $6032 * $6043;
  $6045 = $6031 - $6044;
  $6046 = (($4) + 2244|0);
  HEAPF32[$6046>>2] = $6045;
  $6047 = (($4) + 2244|0);
  $6048 = (($6047) + 8|0);
  $6049 = +HEAPF32[$6048>>2];
  $6050 = (($4) + 2244|0);
  $6051 = +HEAPF32[$6050>>2];
  $6052 = (($4) + 2244|0);
  $6053 = (($6052) + 4|0);
  $6054 = +HEAPF32[$6053>>2];
  $6055 = 2.0 * $6054;
  $6056 = $6051 + $6055;
  $6057 = $6049 + $6056;
  $fTemp118 = $6057;
  $6058 = $fSlow16;
  $6059 = $fTemp118;
  $6060 = $6058 * $6059;
  $fTemp119 = $6060;
  $6061 = $fTemp119;
  $6062 = (($4) + 2256|0);
  HEAPF32[$6062>>2] = $6061;
  $6063 = $fSlow48;
  $6064 = (($4) + 2264|0);
  $6065 = (($6064) + 4|0);
  $6066 = +HEAPF32[$6065>>2];
  $6067 = $6063 * $6066;
  $6068 = $fSlow49;
  $6069 = $fSlow50;
  $6070 = (($4) + 2256|0);
  $6071 = (($6070) + 4|0);
  $6072 = +HEAPF32[$6071>>2];
  $6073 = $6069 * $6072;
  $6074 = $fSlow51;
  $6075 = $fTemp118;
  $6076 = $6074 * $6075;
  $6077 = $6073 + $6076;
  $6078 = $6068 * $6077;
  $6079 = $6067 + $6078;
  $6080 = (($4) + 2264|0);
  HEAPF32[$6080>>2] = $6079;
  $6081 = (($4) + 2264|0);
  $6082 = +HEAPF32[$6081>>2];
  $6083 = $fSlow46;
  $6084 = $fSlow52;
  $6085 = (($4) + 2272|0);
  $6086 = (($6085) + 8|0);
  $6087 = +HEAPF32[$6086>>2];
  $6088 = $6084 * $6087;
  $6089 = $fSlow29;
  $6090 = (($4) + 2272|0);
  $6091 = (($6090) + 4|0);
  $6092 = +HEAPF32[$6091>>2];
  $6093 = $6089 * $6092;
  $6094 = $6088 + $6093;
  $6095 = $6083 * $6094;
  $6096 = $6082 - $6095;
  $6097 = (($4) + 2272|0);
  HEAPF32[$6097>>2] = $6096;
  $6098 = $fSlow36;
  $6099 = (($4) + 2284|0);
  $6100 = (($6099) + 4|0);
  $6101 = +HEAPF32[$6100>>2];
  $6102 = $6098 * $6101;
  $fTemp120 = $6102;
  $6103 = $fSlow46;
  $6104 = $fSlow28;
  $6105 = (($4) + 2272|0);
  $6106 = +HEAPF32[$6105>>2];
  $6107 = $6104 * $6106;
  $6108 = $fSlow53;
  $6109 = (($4) + 2272|0);
  $6110 = (($6109) + 4|0);
  $6111 = +HEAPF32[$6110>>2];
  $6112 = $6108 * $6111;
  $6113 = $6107 + $6112;
  $6114 = $fSlow28;
  $6115 = (($4) + 2272|0);
  $6116 = (($6115) + 8|0);
  $6117 = +HEAPF32[$6116>>2];
  $6118 = $6114 * $6117;
  $6119 = $6113 + $6118;
  $6120 = $6103 * $6119;
  $6121 = $fSlow33;
  $6122 = $fSlow34;
  $6123 = (($4) + 2284|0);
  $6124 = (($6123) + 8|0);
  $6125 = +HEAPF32[$6124>>2];
  $6126 = $6122 * $6125;
  $6127 = $fTemp120;
  $6128 = $6126 + $6127;
  $6129 = $6121 * $6128;
  $6130 = $6120 - $6129;
  $6131 = (($4) + 2284|0);
  HEAPF32[$6131>>2] = $6130;
  $6132 = $fSlow41;
  $6133 = (($4) + 2296|0);
  $6134 = (($6133) + 4|0);
  $6135 = +HEAPF32[$6134>>2];
  $6136 = $6132 * $6135;
  $fTemp121 = $6136;
  $6137 = (($4) + 2284|0);
  $6138 = (($6137) + 8|0);
  $6139 = +HEAPF32[$6138>>2];
  $6140 = $fSlow33;
  $6141 = $fTemp120;
  $6142 = $fSlow34;
  $6143 = (($4) + 2284|0);
  $6144 = +HEAPF32[$6143>>2];
  $6145 = $6142 * $6144;
  $6146 = $6141 + $6145;
  $6147 = $6140 * $6146;
  $6148 = $6139 + $6147;
  $6149 = $fSlow39;
  $6150 = $fSlow42;
  $6151 = (($4) + 2296|0);
  $6152 = (($6151) + 8|0);
  $6153 = +HEAPF32[$6152>>2];
  $6154 = $6150 * $6153;
  $6155 = $fTemp121;
  $6156 = $6154 + $6155;
  $6157 = $6149 * $6156;
  $6158 = $6148 - $6157;
  $6159 = (($4) + 2296|0);
  HEAPF32[$6159>>2] = $6158;
  $6160 = $fSlow48;
  $6161 = (($4) + 2308|0);
  $6162 = (($6161) + 4|0);
  $6163 = +HEAPF32[$6162>>2];
  $6164 = $6160 * $6163;
  $6165 = $fSlow49;
  $6166 = (($4) + 2256|0);
  $6167 = +HEAPF32[$6166>>2];
  $6168 = (($4) + 2256|0);
  $6169 = (($6168) + 4|0);
  $6170 = +HEAPF32[$6169>>2];
  $6171 = $6167 + $6170;
  $6172 = $6165 * $6171;
  $6173 = $6164 + $6172;
  $6174 = (($4) + 2308|0);
  HEAPF32[$6174>>2] = $6173;
  $6175 = (($4) + 2308|0);
  $6176 = +HEAPF32[$6175>>2];
  $6177 = $fSlow46;
  $6178 = $fSlow52;
  $6179 = (($4) + 2316|0);
  $6180 = (($6179) + 8|0);
  $6181 = +HEAPF32[$6180>>2];
  $6182 = $6178 * $6181;
  $6183 = $fSlow29;
  $6184 = (($4) + 2316|0);
  $6185 = (($6184) + 4|0);
  $6186 = +HEAPF32[$6185>>2];
  $6187 = $6183 * $6186;
  $6188 = $6182 + $6187;
  $6189 = $6177 * $6188;
  $6190 = $6176 - $6189;
  $6191 = (($4) + 2316|0);
  HEAPF32[$6191>>2] = $6190;
  $6192 = (($4) + 2316|0);
  $6193 = (($6192) + 8|0);
  $6194 = +HEAPF32[$6193>>2];
  $6195 = (($4) + 2316|0);
  $6196 = +HEAPF32[$6195>>2];
  $6197 = (($4) + 2316|0);
  $6198 = (($6197) + 4|0);
  $6199 = +HEAPF32[$6198>>2];
  $6200 = 2.0 * $6199;
  $6201 = $6196 + $6200;
  $6202 = $6194 + $6201;
  $fTemp122 = $6202;
  $6203 = $fSlow46;
  $6204 = $fTemp122;
  $6205 = $6203 * $6204;
  $fTemp123 = $6205;
  $6206 = $fTemp123;
  $6207 = (($4) + 2328|0);
  HEAPF32[$6207>>2] = $6206;
  $6208 = $fSlow59;
  $6209 = (($4) + 2336|0);
  $6210 = (($6209) + 4|0);
  $6211 = +HEAPF32[$6210>>2];
  $6212 = $6208 * $6211;
  $6213 = $fSlow60;
  $6214 = $fSlow61;
  $6215 = (($4) + 2328|0);
  $6216 = (($6215) + 4|0);
  $6217 = +HEAPF32[$6216>>2];
  $6218 = $6214 * $6217;
  $6219 = $fSlow62;
  $6220 = $fTemp122;
  $6221 = $6219 * $6220;
  $6222 = $6218 + $6221;
  $6223 = $6213 * $6222;
  $6224 = $6212 + $6223;
  $6225 = (($4) + 2336|0);
  HEAPF32[$6225>>2] = $6224;
  $6226 = (($4) + 2336|0);
  $6227 = +HEAPF32[$6226>>2];
  $6228 = $fSlow57;
  $6229 = $fSlow63;
  $6230 = (($4) + 2344|0);
  $6231 = (($6230) + 8|0);
  $6232 = +HEAPF32[$6231>>2];
  $6233 = $6229 * $6232;
  $6234 = $fSlow36;
  $6235 = (($4) + 2344|0);
  $6236 = (($6235) + 4|0);
  $6237 = +HEAPF32[$6236>>2];
  $6238 = $6234 * $6237;
  $6239 = $6233 + $6238;
  $6240 = $6228 * $6239;
  $6241 = $6227 - $6240;
  $6242 = (($4) + 2344|0);
  HEAPF32[$6242>>2] = $6241;
  $6243 = $fSlow41;
  $6244 = (($4) + 2356|0);
  $6245 = (($6244) + 4|0);
  $6246 = +HEAPF32[$6245>>2];
  $6247 = $6243 * $6246;
  $fTemp124 = $6247;
  $6248 = $fSlow57;
  $6249 = $fSlow35;
  $6250 = (($4) + 2344|0);
  $6251 = +HEAPF32[$6250>>2];
  $6252 = $6249 * $6251;
  $6253 = $fSlow64;
  $6254 = (($4) + 2344|0);
  $6255 = (($6254) + 4|0);
  $6256 = +HEAPF32[$6255>>2];
  $6257 = $6253 * $6256;
  $6258 = $6252 + $6257;
  $6259 = $fSlow35;
  $6260 = (($4) + 2344|0);
  $6261 = (($6260) + 8|0);
  $6262 = +HEAPF32[$6261>>2];
  $6263 = $6259 * $6262;
  $6264 = $6258 + $6263;
  $6265 = $6248 * $6264;
  $6266 = $fSlow39;
  $6267 = $fSlow42;
  $6268 = (($4) + 2356|0);
  $6269 = (($6268) + 8|0);
  $6270 = +HEAPF32[$6269>>2];
  $6271 = $6267 * $6270;
  $6272 = $fTemp124;
  $6273 = $6271 + $6272;
  $6274 = $6266 * $6273;
  $6275 = $6265 - $6274;
  $6276 = (($4) + 2356|0);
  HEAPF32[$6276>>2] = $6275;
  $6277 = $fSlow59;
  $6278 = (($4) + 2368|0);
  $6279 = (($6278) + 4|0);
  $6280 = +HEAPF32[$6279>>2];
  $6281 = $6277 * $6280;
  $6282 = $fSlow60;
  $6283 = (($4) + 2328|0);
  $6284 = +HEAPF32[$6283>>2];
  $6285 = (($4) + 2328|0);
  $6286 = (($6285) + 4|0);
  $6287 = +HEAPF32[$6286>>2];
  $6288 = $6284 + $6287;
  $6289 = $6282 * $6288;
  $6290 = $6281 + $6289;
  $6291 = (($4) + 2368|0);
  HEAPF32[$6291>>2] = $6290;
  $6292 = (($4) + 2368|0);
  $6293 = +HEAPF32[$6292>>2];
  $6294 = $fSlow57;
  $6295 = $fSlow63;
  $6296 = (($4) + 2376|0);
  $6297 = (($6296) + 8|0);
  $6298 = +HEAPF32[$6297>>2];
  $6299 = $6295 * $6298;
  $6300 = $fSlow36;
  $6301 = (($4) + 2376|0);
  $6302 = (($6301) + 4|0);
  $6303 = +HEAPF32[$6302>>2];
  $6304 = $6300 * $6303;
  $6305 = $6299 + $6304;
  $6306 = $6294 * $6305;
  $6307 = $6293 - $6306;
  $6308 = (($4) + 2376|0);
  HEAPF32[$6308>>2] = $6307;
  $6309 = (($4) + 2376|0);
  $6310 = (($6309) + 8|0);
  $6311 = +HEAPF32[$6310>>2];
  $6312 = (($4) + 2376|0);
  $6313 = +HEAPF32[$6312>>2];
  $6314 = (($4) + 2376|0);
  $6315 = (($6314) + 4|0);
  $6316 = +HEAPF32[$6315>>2];
  $6317 = 2.0 * $6316;
  $6318 = $6313 + $6317;
  $6319 = $6311 + $6318;
  $fTemp125 = $6319;
  $6320 = $fSlow57;
  $6321 = $fTemp125;
  $6322 = $6320 * $6321;
  $fTemp126 = $6322;
  $6323 = $fTemp126;
  $6324 = (($4) + 2388|0);
  HEAPF32[$6324>>2] = $6323;
  $6325 = $fSlow69;
  $6326 = (($4) + 2396|0);
  $6327 = (($6326) + 4|0);
  $6328 = +HEAPF32[$6327>>2];
  $6329 = $6325 * $6328;
  $6330 = $fSlow70;
  $6331 = $fSlow72;
  $6332 = $fTemp125;
  $6333 = $6331 * $6332;
  $6334 = $fSlow71;
  $6335 = (($4) + 2388|0);
  $6336 = (($6335) + 4|0);
  $6337 = +HEAPF32[$6336>>2];
  $6338 = $6334 * $6337;
  $6339 = $6333 + $6338;
  $6340 = $6330 * $6339;
  $6341 = $6329 + $6340;
  $6342 = (($4) + 2396|0);
  HEAPF32[$6342>>2] = $6341;
  $6343 = (($4) + 2396|0);
  $6344 = +HEAPF32[$6343>>2];
  $6345 = $fSlow65;
  $6346 = $fSlow73;
  $6347 = (($4) + 2404|0);
  $6348 = (($6347) + 8|0);
  $6349 = +HEAPF32[$6348>>2];
  $6350 = $6346 * $6349;
  $6351 = $fSlow41;
  $6352 = (($4) + 2404|0);
  $6353 = (($6352) + 4|0);
  $6354 = +HEAPF32[$6353>>2];
  $6355 = $6351 * $6354;
  $6356 = $6350 + $6355;
  $6357 = $6345 * $6356;
  $6358 = $6344 - $6357;
  $6359 = (($4) + 2404|0);
  HEAPF32[$6359>>2] = $6358;
  $6360 = $fSlow69;
  $6361 = (($4) + 2416|0);
  $6362 = (($6361) + 4|0);
  $6363 = +HEAPF32[$6362>>2];
  $6364 = $6360 * $6363;
  $6365 = $fSlow70;
  $6366 = (($4) + 2388|0);
  $6367 = +HEAPF32[$6366>>2];
  $6368 = (($4) + 2388|0);
  $6369 = (($6368) + 4|0);
  $6370 = +HEAPF32[$6369>>2];
  $6371 = $6367 + $6370;
  $6372 = $6365 * $6371;
  $6373 = $6364 + $6372;
  $6374 = (($4) + 2416|0);
  HEAPF32[$6374>>2] = $6373;
  $6375 = (($4) + 2416|0);
  $6376 = +HEAPF32[$6375>>2];
  $6377 = $fSlow65;
  $6378 = $fSlow73;
  $6379 = (($4) + 2424|0);
  $6380 = (($6379) + 8|0);
  $6381 = +HEAPF32[$6380>>2];
  $6382 = $6378 * $6381;
  $6383 = $fSlow41;
  $6384 = (($4) + 2424|0);
  $6385 = (($6384) + 4|0);
  $6386 = +HEAPF32[$6385>>2];
  $6387 = $6383 * $6386;
  $6388 = $6382 + $6387;
  $6389 = $6377 * $6388;
  $6390 = $6376 - $6389;
  $6391 = (($4) + 2424|0);
  HEAPF32[$6391>>2] = $6390;
  $6392 = $fSlow128;
  $6393 = (($4) + 2224|0);
  $6394 = (($6393) + 8|0);
  $6395 = +HEAPF32[$6394>>2];
  $6396 = $fSlow39;
  $6397 = $fTemp117;
  $6398 = $fSlow42;
  $6399 = (($4) + 2224|0);
  $6400 = +HEAPF32[$6399>>2];
  $6401 = $6398 * $6400;
  $6402 = $6397 + $6401;
  $6403 = $6396 * $6402;
  $6404 = $6395 + $6403;
  $6405 = $6392 * $6404;
  $6406 = $fSlow129;
  $6407 = (($4) + 2296|0);
  $6408 = (($6407) + 8|0);
  $6409 = +HEAPF32[$6408>>2];
  $6410 = $fSlow39;
  $6411 = $fTemp121;
  $6412 = $fSlow42;
  $6413 = (($4) + 2296|0);
  $6414 = +HEAPF32[$6413>>2];
  $6415 = $6412 * $6414;
  $6416 = $6411 + $6415;
  $6417 = $6410 * $6416;
  $6418 = $6409 + $6417;
  $6419 = $6406 * $6418;
  $6420 = $6405 + $6419;
  $6421 = $fSlow130;
  $6422 = (($4) + 2356|0);
  $6423 = (($6422) + 8|0);
  $6424 = +HEAPF32[$6423>>2];
  $6425 = $fSlow39;
  $6426 = $fTemp124;
  $6427 = $fSlow42;
  $6428 = (($4) + 2356|0);
  $6429 = +HEAPF32[$6428>>2];
  $6430 = $6427 * $6429;
  $6431 = $6426 + $6430;
  $6432 = $6425 * $6431;
  $6433 = $6424 + $6432;
  $6434 = $6421 * $6433;
  $6435 = $6420 + $6434;
  $6436 = $fSlow65;
  $6437 = $fSlow131;
  $6438 = $fSlow40;
  $6439 = (($4) + 2404|0);
  $6440 = +HEAPF32[$6439>>2];
  $6441 = $6438 * $6440;
  $6442 = $fSlow74;
  $6443 = (($4) + 2404|0);
  $6444 = (($6443) + 4|0);
  $6445 = +HEAPF32[$6444>>2];
  $6446 = $6442 * $6445;
  $6447 = $6441 + $6446;
  $6448 = $fSlow40;
  $6449 = (($4) + 2404|0);
  $6450 = (($6449) + 8|0);
  $6451 = +HEAPF32[$6450>>2];
  $6452 = $6448 * $6451;
  $6453 = $6447 + $6452;
  $6454 = $6437 * $6453;
  $6455 = $fSlow132;
  $6456 = (($4) + 2424|0);
  $6457 = (($6456) + 8|0);
  $6458 = +HEAPF32[$6457>>2];
  $6459 = (($4) + 2424|0);
  $6460 = +HEAPF32[$6459>>2];
  $6461 = (($4) + 2424|0);
  $6462 = (($6461) + 4|0);
  $6463 = +HEAPF32[$6462>>2];
  $6464 = 2.0 * $6463;
  $6465 = $6460 + $6464;
  $6466 = $6458 + $6465;
  $6467 = $6455 * $6466;
  $6468 = $6454 + $6467;
  $6469 = $6436 * $6468;
  $6470 = $6435 + $6469;
  $fTemp127 = $6470;
  $6471 = $fSlow19;
  $6472 = (($4) + 2436|0);
  $6473 = (($6472) + 4|0);
  $6474 = +HEAPF32[$6473>>2];
  $6475 = $6471 * $6474;
  $6476 = $fSlow20;
  $6477 = $fSlow14;
  $6478 = (($4) + 332032|0);
  $6479 = (($6478) + 4|0);
  $6480 = +HEAPF32[$6479>>2];
  $6481 = $6477 * $6480;
  $6482 = $fSlow21;
  $6483 = (($4) + 332032|0);
  $6484 = (($6483) + 8|0);
  $6485 = +HEAPF32[$6484>>2];
  $6486 = $6482 * $6485;
  $6487 = $6481 + $6486;
  $6488 = $6476 * $6487;
  $6489 = $6475 + $6488;
  $6490 = (($4) + 2436|0);
  HEAPF32[$6490>>2] = $6489;
  $6491 = (($4) + 2436|0);
  $6492 = +HEAPF32[$6491>>2];
  $6493 = $fSlow16;
  $6494 = $fSlow22;
  $6495 = (($4) + 2444|0);
  $6496 = (($6495) + 8|0);
  $6497 = +HEAPF32[$6496>>2];
  $6498 = $6494 * $6497;
  $6499 = $fSlow23;
  $6500 = (($4) + 2444|0);
  $6501 = (($6500) + 4|0);
  $6502 = +HEAPF32[$6501>>2];
  $6503 = $6499 * $6502;
  $6504 = $6498 + $6503;
  $6505 = $6493 * $6504;
  $6506 = $6492 - $6505;
  $6507 = (($4) + 2444|0);
  HEAPF32[$6507>>2] = $6506;
  $6508 = $fSlow29;
  $6509 = (($4) + 2456|0);
  $6510 = (($6509) + 4|0);
  $6511 = +HEAPF32[$6510>>2];
  $6512 = $6508 * $6511;
  $fTemp128 = $6512;
  $6513 = $fSlow16;
  $6514 = $fSlow17;
  $6515 = (($4) + 2444|0);
  $6516 = +HEAPF32[$6515>>2];
  $6517 = $6514 * $6516;
  $6518 = $fSlow24;
  $6519 = (($4) + 2444|0);
  $6520 = (($6519) + 4|0);
  $6521 = +HEAPF32[$6520>>2];
  $6522 = $6518 * $6521;
  $6523 = $6517 + $6522;
  $6524 = $fSlow17;
  $6525 = (($4) + 2444|0);
  $6526 = (($6525) + 8|0);
  $6527 = +HEAPF32[$6526>>2];
  $6528 = $6524 * $6527;
  $6529 = $6523 + $6528;
  $6530 = $6513 * $6529;
  $6531 = $fSlow27;
  $6532 = $fSlow30;
  $6533 = (($4) + 2456|0);
  $6534 = (($6533) + 8|0);
  $6535 = +HEAPF32[$6534>>2];
  $6536 = $6532 * $6535;
  $6537 = $fTemp128;
  $6538 = $6536 + $6537;
  $6539 = $6531 * $6538;
  $6540 = $6530 - $6539;
  $6541 = (($4) + 2456|0);
  HEAPF32[$6541>>2] = $6540;
  $6542 = $fSlow36;
  $6543 = (($4) + 2468|0);
  $6544 = (($6543) + 4|0);
  $6545 = +HEAPF32[$6544>>2];
  $6546 = $6542 * $6545;
  $fTemp129 = $6546;
  $6547 = (($4) + 2456|0);
  $6548 = (($6547) + 8|0);
  $6549 = +HEAPF32[$6548>>2];
  $6550 = $fSlow27;
  $6551 = $fTemp128;
  $6552 = $fSlow30;
  $6553 = (($4) + 2456|0);
  $6554 = +HEAPF32[$6553>>2];
  $6555 = $6552 * $6554;
  $6556 = $6551 + $6555;
  $6557 = $6550 * $6556;
  $6558 = $6549 + $6557;
  $6559 = $fSlow33;
  $6560 = $fSlow34;
  $6561 = (($4) + 2468|0);
  $6562 = (($6561) + 8|0);
  $6563 = +HEAPF32[$6562>>2];
  $6564 = $6560 * $6563;
  $6565 = $fTemp129;
  $6566 = $6564 + $6565;
  $6567 = $6559 * $6566;
  $6568 = $6558 - $6567;
  $6569 = (($4) + 2468|0);
  HEAPF32[$6569>>2] = $6568;
  $6570 = $fSlow41;
  $6571 = (($4) + 2480|0);
  $6572 = (($6571) + 4|0);
  $6573 = +HEAPF32[$6572>>2];
  $6574 = $6570 * $6573;
  $fTemp130 = $6574;
  $6575 = (($4) + 2468|0);
  $6576 = (($6575) + 8|0);
  $6577 = +HEAPF32[$6576>>2];
  $6578 = $fSlow33;
  $6579 = $fTemp129;
  $6580 = $fSlow34;
  $6581 = (($4) + 2468|0);
  $6582 = +HEAPF32[$6581>>2];
  $6583 = $6580 * $6582;
  $6584 = $6579 + $6583;
  $6585 = $6578 * $6584;
  $6586 = $6577 + $6585;
  $6587 = $fSlow39;
  $6588 = $fSlow42;
  $6589 = (($4) + 2480|0);
  $6590 = (($6589) + 8|0);
  $6591 = +HEAPF32[$6590>>2];
  $6592 = $6588 * $6591;
  $6593 = $fTemp130;
  $6594 = $6592 + $6593;
  $6595 = $6587 * $6594;
  $6596 = $6586 - $6595;
  $6597 = (($4) + 2480|0);
  HEAPF32[$6597>>2] = $6596;
  $6598 = $fSlow19;
  $6599 = (($4) + 2492|0);
  $6600 = (($6599) + 4|0);
  $6601 = +HEAPF32[$6600>>2];
  $6602 = $6598 * $6601;
  $6603 = $fSlow20;
  $6604 = (($4) + 332032|0);
  $6605 = (($6604) + 4|0);
  $6606 = +HEAPF32[$6605>>2];
  $6607 = (($4) + 332032|0);
  $6608 = (($6607) + 8|0);
  $6609 = +HEAPF32[$6608>>2];
  $6610 = $6606 + $6609;
  $6611 = $6603 * $6610;
  $6612 = $6602 + $6611;
  $6613 = (($4) + 2492|0);
  HEAPF32[$6613>>2] = $6612;
  $6614 = (($4) + 2492|0);
  $6615 = +HEAPF32[$6614>>2];
  $6616 = $fSlow16;
  $6617 = $fSlow22;
  $6618 = (($4) + 2500|0);
  $6619 = (($6618) + 8|0);
  $6620 = +HEAPF32[$6619>>2];
  $6621 = $6617 * $6620;
  $6622 = $fSlow23;
  $6623 = (($4) + 2500|0);
  $6624 = (($6623) + 4|0);
  $6625 = +HEAPF32[$6624>>2];
  $6626 = $6622 * $6625;
  $6627 = $6621 + $6626;
  $6628 = $6616 * $6627;
  $6629 = $6615 - $6628;
  $6630 = (($4) + 2500|0);
  HEAPF32[$6630>>2] = $6629;
  $6631 = (($4) + 2500|0);
  $6632 = (($6631) + 8|0);
  $6633 = +HEAPF32[$6632>>2];
  $6634 = (($4) + 2500|0);
  $6635 = +HEAPF32[$6634>>2];
  $6636 = (($4) + 2500|0);
  $6637 = (($6636) + 4|0);
  $6638 = +HEAPF32[$6637>>2];
  $6639 = 2.0 * $6638;
  $6640 = $6635 + $6639;
  $6641 = $6633 + $6640;
  $fTemp131 = $6641;
  $6642 = $fSlow16;
  $6643 = $fTemp131;
  $6644 = $6642 * $6643;
  $fTemp132 = $6644;
  $6645 = $fTemp132;
  $6646 = (($4) + 2512|0);
  HEAPF32[$6646>>2] = $6645;
  $6647 = $fSlow48;
  $6648 = (($4) + 2520|0);
  $6649 = (($6648) + 4|0);
  $6650 = +HEAPF32[$6649>>2];
  $6651 = $6647 * $6650;
  $6652 = $fSlow49;
  $6653 = $fSlow50;
  $6654 = (($4) + 2512|0);
  $6655 = (($6654) + 4|0);
  $6656 = +HEAPF32[$6655>>2];
  $6657 = $6653 * $6656;
  $6658 = $fSlow51;
  $6659 = $fTemp131;
  $6660 = $6658 * $6659;
  $6661 = $6657 + $6660;
  $6662 = $6652 * $6661;
  $6663 = $6651 + $6662;
  $6664 = (($4) + 2520|0);
  HEAPF32[$6664>>2] = $6663;
  $6665 = (($4) + 2520|0);
  $6666 = +HEAPF32[$6665>>2];
  $6667 = $fSlow46;
  $6668 = $fSlow52;
  $6669 = (($4) + 2528|0);
  $6670 = (($6669) + 8|0);
  $6671 = +HEAPF32[$6670>>2];
  $6672 = $6668 * $6671;
  $6673 = $fSlow29;
  $6674 = (($4) + 2528|0);
  $6675 = (($6674) + 4|0);
  $6676 = +HEAPF32[$6675>>2];
  $6677 = $6673 * $6676;
  $6678 = $6672 + $6677;
  $6679 = $6667 * $6678;
  $6680 = $6666 - $6679;
  $6681 = (($4) + 2528|0);
  HEAPF32[$6681>>2] = $6680;
  $6682 = $fSlow36;
  $6683 = (($4) + 2540|0);
  $6684 = (($6683) + 4|0);
  $6685 = +HEAPF32[$6684>>2];
  $6686 = $6682 * $6685;
  $fTemp133 = $6686;
  $6687 = $fSlow46;
  $6688 = $fSlow28;
  $6689 = (($4) + 2528|0);
  $6690 = +HEAPF32[$6689>>2];
  $6691 = $6688 * $6690;
  $6692 = $fSlow53;
  $6693 = (($4) + 2528|0);
  $6694 = (($6693) + 4|0);
  $6695 = +HEAPF32[$6694>>2];
  $6696 = $6692 * $6695;
  $6697 = $6691 + $6696;
  $6698 = $fSlow28;
  $6699 = (($4) + 2528|0);
  $6700 = (($6699) + 8|0);
  $6701 = +HEAPF32[$6700>>2];
  $6702 = $6698 * $6701;
  $6703 = $6697 + $6702;
  $6704 = $6687 * $6703;
  $6705 = $fSlow33;
  $6706 = $fSlow34;
  $6707 = (($4) + 2540|0);
  $6708 = (($6707) + 8|0);
  $6709 = +HEAPF32[$6708>>2];
  $6710 = $6706 * $6709;
  $6711 = $fTemp133;
  $6712 = $6710 + $6711;
  $6713 = $6705 * $6712;
  $6714 = $6704 - $6713;
  $6715 = (($4) + 2540|0);
  HEAPF32[$6715>>2] = $6714;
  $6716 = $fSlow41;
  $6717 = (($4) + 2552|0);
  $6718 = (($6717) + 4|0);
  $6719 = +HEAPF32[$6718>>2];
  $6720 = $6716 * $6719;
  $fTemp134 = $6720;
  $6721 = (($4) + 2540|0);
  $6722 = (($6721) + 8|0);
  $6723 = +HEAPF32[$6722>>2];
  $6724 = $fSlow33;
  $6725 = $fTemp133;
  $6726 = $fSlow34;
  $6727 = (($4) + 2540|0);
  $6728 = +HEAPF32[$6727>>2];
  $6729 = $6726 * $6728;
  $6730 = $6725 + $6729;
  $6731 = $6724 * $6730;
  $6732 = $6723 + $6731;
  $6733 = $fSlow39;
  $6734 = $fSlow42;
  $6735 = (($4) + 2552|0);
  $6736 = (($6735) + 8|0);
  $6737 = +HEAPF32[$6736>>2];
  $6738 = $6734 * $6737;
  $6739 = $fTemp134;
  $6740 = $6738 + $6739;
  $6741 = $6733 * $6740;
  $6742 = $6732 - $6741;
  $6743 = (($4) + 2552|0);
  HEAPF32[$6743>>2] = $6742;
  $6744 = $fSlow48;
  $6745 = (($4) + 2564|0);
  $6746 = (($6745) + 4|0);
  $6747 = +HEAPF32[$6746>>2];
  $6748 = $6744 * $6747;
  $6749 = $fSlow49;
  $6750 = (($4) + 2512|0);
  $6751 = +HEAPF32[$6750>>2];
  $6752 = (($4) + 2512|0);
  $6753 = (($6752) + 4|0);
  $6754 = +HEAPF32[$6753>>2];
  $6755 = $6751 + $6754;
  $6756 = $6749 * $6755;
  $6757 = $6748 + $6756;
  $6758 = (($4) + 2564|0);
  HEAPF32[$6758>>2] = $6757;
  $6759 = (($4) + 2564|0);
  $6760 = +HEAPF32[$6759>>2];
  $6761 = $fSlow46;
  $6762 = $fSlow52;
  $6763 = (($4) + 2572|0);
  $6764 = (($6763) + 8|0);
  $6765 = +HEAPF32[$6764>>2];
  $6766 = $6762 * $6765;
  $6767 = $fSlow29;
  $6768 = (($4) + 2572|0);
  $6769 = (($6768) + 4|0);
  $6770 = +HEAPF32[$6769>>2];
  $6771 = $6767 * $6770;
  $6772 = $6766 + $6771;
  $6773 = $6761 * $6772;
  $6774 = $6760 - $6773;
  $6775 = (($4) + 2572|0);
  HEAPF32[$6775>>2] = $6774;
  $6776 = (($4) + 2572|0);
  $6777 = (($6776) + 8|0);
  $6778 = +HEAPF32[$6777>>2];
  $6779 = (($4) + 2572|0);
  $6780 = +HEAPF32[$6779>>2];
  $6781 = (($4) + 2572|0);
  $6782 = (($6781) + 4|0);
  $6783 = +HEAPF32[$6782>>2];
  $6784 = 2.0 * $6783;
  $6785 = $6780 + $6784;
  $6786 = $6778 + $6785;
  $fTemp135 = $6786;
  $6787 = $fSlow46;
  $6788 = $fTemp135;
  $6789 = $6787 * $6788;
  $fTemp136 = $6789;
  $6790 = $fTemp136;
  $6791 = (($4) + 2584|0);
  HEAPF32[$6791>>2] = $6790;
  $6792 = $fSlow59;
  $6793 = (($4) + 2592|0);
  $6794 = (($6793) + 4|0);
  $6795 = +HEAPF32[$6794>>2];
  $6796 = $6792 * $6795;
  $6797 = $fSlow60;
  $6798 = $fSlow61;
  $6799 = (($4) + 2584|0);
  $6800 = (($6799) + 4|0);
  $6801 = +HEAPF32[$6800>>2];
  $6802 = $6798 * $6801;
  $6803 = $fSlow62;
  $6804 = $fTemp135;
  $6805 = $6803 * $6804;
  $6806 = $6802 + $6805;
  $6807 = $6797 * $6806;
  $6808 = $6796 + $6807;
  $6809 = (($4) + 2592|0);
  HEAPF32[$6809>>2] = $6808;
  $6810 = (($4) + 2592|0);
  $6811 = +HEAPF32[$6810>>2];
  $6812 = $fSlow57;
  $6813 = $fSlow63;
  $6814 = (($4) + 2600|0);
  $6815 = (($6814) + 8|0);
  $6816 = +HEAPF32[$6815>>2];
  $6817 = $6813 * $6816;
  $6818 = $fSlow36;
  $6819 = (($4) + 2600|0);
  $6820 = (($6819) + 4|0);
  $6821 = +HEAPF32[$6820>>2];
  $6822 = $6818 * $6821;
  $6823 = $6817 + $6822;
  $6824 = $6812 * $6823;
  $6825 = $6811 - $6824;
  $6826 = (($4) + 2600|0);
  HEAPF32[$6826>>2] = $6825;
  $6827 = $fSlow41;
  $6828 = (($4) + 2612|0);
  $6829 = (($6828) + 4|0);
  $6830 = +HEAPF32[$6829>>2];
  $6831 = $6827 * $6830;
  $fTemp137 = $6831;
  $6832 = $fSlow57;
  $6833 = $fSlow35;
  $6834 = (($4) + 2600|0);
  $6835 = +HEAPF32[$6834>>2];
  $6836 = $6833 * $6835;
  $6837 = $fSlow64;
  $6838 = (($4) + 2600|0);
  $6839 = (($6838) + 4|0);
  $6840 = +HEAPF32[$6839>>2];
  $6841 = $6837 * $6840;
  $6842 = $6836 + $6841;
  $6843 = $fSlow35;
  $6844 = (($4) + 2600|0);
  $6845 = (($6844) + 8|0);
  $6846 = +HEAPF32[$6845>>2];
  $6847 = $6843 * $6846;
  $6848 = $6842 + $6847;
  $6849 = $6832 * $6848;
  $6850 = $fSlow39;
  $6851 = $fSlow42;
  $6852 = (($4) + 2612|0);
  $6853 = (($6852) + 8|0);
  $6854 = +HEAPF32[$6853>>2];
  $6855 = $6851 * $6854;
  $6856 = $fTemp137;
  $6857 = $6855 + $6856;
  $6858 = $6850 * $6857;
  $6859 = $6849 - $6858;
  $6860 = (($4) + 2612|0);
  HEAPF32[$6860>>2] = $6859;
  $6861 = $fSlow59;
  $6862 = (($4) + 2624|0);
  $6863 = (($6862) + 4|0);
  $6864 = +HEAPF32[$6863>>2];
  $6865 = $6861 * $6864;
  $6866 = $fSlow60;
  $6867 = (($4) + 2584|0);
  $6868 = +HEAPF32[$6867>>2];
  $6869 = (($4) + 2584|0);
  $6870 = (($6869) + 4|0);
  $6871 = +HEAPF32[$6870>>2];
  $6872 = $6868 + $6871;
  $6873 = $6866 * $6872;
  $6874 = $6865 + $6873;
  $6875 = (($4) + 2624|0);
  HEAPF32[$6875>>2] = $6874;
  $6876 = (($4) + 2624|0);
  $6877 = +HEAPF32[$6876>>2];
  $6878 = $fSlow57;
  $6879 = $fSlow63;
  $6880 = (($4) + 2632|0);
  $6881 = (($6880) + 8|0);
  $6882 = +HEAPF32[$6881>>2];
  $6883 = $6879 * $6882;
  $6884 = $fSlow36;
  $6885 = (($4) + 2632|0);
  $6886 = (($6885) + 4|0);
  $6887 = +HEAPF32[$6886>>2];
  $6888 = $6884 * $6887;
  $6889 = $6883 + $6888;
  $6890 = $6878 * $6889;
  $6891 = $6877 - $6890;
  $6892 = (($4) + 2632|0);
  HEAPF32[$6892>>2] = $6891;
  $6893 = (($4) + 2632|0);
  $6894 = (($6893) + 8|0);
  $6895 = +HEAPF32[$6894>>2];
  $6896 = (($4) + 2632|0);
  $6897 = +HEAPF32[$6896>>2];
  $6898 = (($4) + 2632|0);
  $6899 = (($6898) + 4|0);
  $6900 = +HEAPF32[$6899>>2];
  $6901 = 2.0 * $6900;
  $6902 = $6897 + $6901;
  $6903 = $6895 + $6902;
  $fTemp138 = $6903;
  $6904 = $fSlow57;
  $6905 = $fTemp138;
  $6906 = $6904 * $6905;
  $fTemp139 = $6906;
  $6907 = $fTemp139;
  $6908 = (($4) + 2644|0);
  HEAPF32[$6908>>2] = $6907;
  $6909 = $fSlow69;
  $6910 = (($4) + 2652|0);
  $6911 = (($6910) + 4|0);
  $6912 = +HEAPF32[$6911>>2];
  $6913 = $6909 * $6912;
  $6914 = $fSlow70;
  $6915 = $fSlow72;
  $6916 = $fTemp138;
  $6917 = $6915 * $6916;
  $6918 = $fSlow71;
  $6919 = (($4) + 2644|0);
  $6920 = (($6919) + 4|0);
  $6921 = +HEAPF32[$6920>>2];
  $6922 = $6918 * $6921;
  $6923 = $6917 + $6922;
  $6924 = $6914 * $6923;
  $6925 = $6913 + $6924;
  $6926 = (($4) + 2652|0);
  HEAPF32[$6926>>2] = $6925;
  $6927 = (($4) + 2652|0);
  $6928 = +HEAPF32[$6927>>2];
  $6929 = $fSlow65;
  $6930 = $fSlow73;
  $6931 = (($4) + 2660|0);
  $6932 = (($6931) + 8|0);
  $6933 = +HEAPF32[$6932>>2];
  $6934 = $6930 * $6933;
  $6935 = $fSlow41;
  $6936 = (($4) + 2660|0);
  $6937 = (($6936) + 4|0);
  $6938 = +HEAPF32[$6937>>2];
  $6939 = $6935 * $6938;
  $6940 = $6934 + $6939;
  $6941 = $6929 * $6940;
  $6942 = $6928 - $6941;
  $6943 = (($4) + 2660|0);
  HEAPF32[$6943>>2] = $6942;
  $6944 = $fSlow69;
  $6945 = (($4) + 2672|0);
  $6946 = (($6945) + 4|0);
  $6947 = +HEAPF32[$6946>>2];
  $6948 = $6944 * $6947;
  $6949 = $fSlow70;
  $6950 = (($4) + 2644|0);
  $6951 = +HEAPF32[$6950>>2];
  $6952 = (($4) + 2644|0);
  $6953 = (($6952) + 4|0);
  $6954 = +HEAPF32[$6953>>2];
  $6955 = $6951 + $6954;
  $6956 = $6949 * $6955;
  $6957 = $6948 + $6956;
  $6958 = (($4) + 2672|0);
  HEAPF32[$6958>>2] = $6957;
  $6959 = (($4) + 2672|0);
  $6960 = +HEAPF32[$6959>>2];
  $6961 = $fSlow65;
  $6962 = $fSlow73;
  $6963 = (($4) + 2680|0);
  $6964 = (($6963) + 8|0);
  $6965 = +HEAPF32[$6964>>2];
  $6966 = $6962 * $6965;
  $6967 = $fSlow41;
  $6968 = (($4) + 2680|0);
  $6969 = (($6968) + 4|0);
  $6970 = +HEAPF32[$6969>>2];
  $6971 = $6967 * $6970;
  $6972 = $6966 + $6971;
  $6973 = $6961 * $6972;
  $6974 = $6960 - $6973;
  $6975 = (($4) + 2680|0);
  HEAPF32[$6975>>2] = $6974;
  $6976 = $fSlow135;
  $6977 = (($4) + 2480|0);
  $6978 = (($6977) + 8|0);
  $6979 = +HEAPF32[$6978>>2];
  $6980 = $fSlow39;
  $6981 = $fTemp130;
  $6982 = $fSlow42;
  $6983 = (($4) + 2480|0);
  $6984 = +HEAPF32[$6983>>2];
  $6985 = $6982 * $6984;
  $6986 = $6981 + $6985;
  $6987 = $6980 * $6986;
  $6988 = $6979 + $6987;
  $6989 = $6976 * $6988;
  $6990 = $fSlow136;
  $6991 = (($4) + 2552|0);
  $6992 = (($6991) + 8|0);
  $6993 = +HEAPF32[$6992>>2];
  $6994 = $fSlow39;
  $6995 = $fTemp134;
  $6996 = $fSlow42;
  $6997 = (($4) + 2552|0);
  $6998 = +HEAPF32[$6997>>2];
  $6999 = $6996 * $6998;
  $7000 = $6995 + $6999;
  $7001 = $6994 * $7000;
  $7002 = $6993 + $7001;
  $7003 = $6990 * $7002;
  $7004 = $6989 + $7003;
  $7005 = $fSlow137;
  $7006 = (($4) + 2612|0);
  $7007 = (($7006) + 8|0);
  $7008 = +HEAPF32[$7007>>2];
  $7009 = $fSlow39;
  $7010 = $fTemp137;
  $7011 = $fSlow42;
  $7012 = (($4) + 2612|0);
  $7013 = +HEAPF32[$7012>>2];
  $7014 = $7011 * $7013;
  $7015 = $7010 + $7014;
  $7016 = $7009 * $7015;
  $7017 = $7008 + $7016;
  $7018 = $7005 * $7017;
  $7019 = $7004 + $7018;
  $7020 = $fSlow65;
  $7021 = $fSlow138;
  $7022 = $fSlow40;
  $7023 = (($4) + 2660|0);
  $7024 = +HEAPF32[$7023>>2];
  $7025 = $7022 * $7024;
  $7026 = $fSlow74;
  $7027 = (($4) + 2660|0);
  $7028 = (($7027) + 4|0);
  $7029 = +HEAPF32[$7028>>2];
  $7030 = $7026 * $7029;
  $7031 = $7025 + $7030;
  $7032 = $fSlow40;
  $7033 = (($4) + 2660|0);
  $7034 = (($7033) + 8|0);
  $7035 = +HEAPF32[$7034>>2];
  $7036 = $7032 * $7035;
  $7037 = $7031 + $7036;
  $7038 = $7021 * $7037;
  $7039 = $fSlow139;
  $7040 = (($4) + 2680|0);
  $7041 = (($7040) + 8|0);
  $7042 = +HEAPF32[$7041>>2];
  $7043 = (($4) + 2680|0);
  $7044 = +HEAPF32[$7043>>2];
  $7045 = (($4) + 2680|0);
  $7046 = (($7045) + 4|0);
  $7047 = +HEAPF32[$7046>>2];
  $7048 = 2.0 * $7047;
  $7049 = $7044 + $7048;
  $7050 = $7042 + $7049;
  $7051 = $7039 * $7050;
  $7052 = $7038 + $7051;
  $7053 = $7020 * $7052;
  $7054 = $7019 + $7053;
  $fTemp140 = $7054;
  $7055 = $fTemp127;
  $7056 = $fTemp140;
  $7057 = $7055 + $7056;
  $fTemp141 = $7057;
  $7058 = $fSlow19;
  $7059 = (($4) + 2692|0);
  $7060 = (($7059) + 4|0);
  $7061 = +HEAPF32[$7060>>2];
  $7062 = $7058 * $7061;
  $7063 = $fSlow20;
  $7064 = $fSlow14;
  $7065 = (($4) + 200912|0);
  $7066 = (($7065) + 4|0);
  $7067 = +HEAPF32[$7066>>2];
  $7068 = $7064 * $7067;
  $7069 = $fSlow21;
  $7070 = (($4) + 200912|0);
  $7071 = (($7070) + 8|0);
  $7072 = +HEAPF32[$7071>>2];
  $7073 = $7069 * $7072;
  $7074 = $7068 + $7073;
  $7075 = $7063 * $7074;
  $7076 = $7062 + $7075;
  $7077 = (($4) + 2692|0);
  HEAPF32[$7077>>2] = $7076;
  $7078 = (($4) + 2692|0);
  $7079 = +HEAPF32[$7078>>2];
  $7080 = $fSlow16;
  $7081 = $fSlow22;
  $7082 = (($4) + 2700|0);
  $7083 = (($7082) + 8|0);
  $7084 = +HEAPF32[$7083>>2];
  $7085 = $7081 * $7084;
  $7086 = $fSlow23;
  $7087 = (($4) + 2700|0);
  $7088 = (($7087) + 4|0);
  $7089 = +HEAPF32[$7088>>2];
  $7090 = $7086 * $7089;
  $7091 = $7085 + $7090;
  $7092 = $7080 * $7091;
  $7093 = $7079 - $7092;
  $7094 = (($4) + 2700|0);
  HEAPF32[$7094>>2] = $7093;
  $7095 = $fSlow29;
  $7096 = (($4) + 2712|0);
  $7097 = (($7096) + 4|0);
  $7098 = +HEAPF32[$7097>>2];
  $7099 = $7095 * $7098;
  $fTemp142 = $7099;
  $7100 = $fSlow16;
  $7101 = $fSlow17;
  $7102 = (($4) + 2700|0);
  $7103 = +HEAPF32[$7102>>2];
  $7104 = $7101 * $7103;
  $7105 = $fSlow24;
  $7106 = (($4) + 2700|0);
  $7107 = (($7106) + 4|0);
  $7108 = +HEAPF32[$7107>>2];
  $7109 = $7105 * $7108;
  $7110 = $7104 + $7109;
  $7111 = $fSlow17;
  $7112 = (($4) + 2700|0);
  $7113 = (($7112) + 8|0);
  $7114 = +HEAPF32[$7113>>2];
  $7115 = $7111 * $7114;
  $7116 = $7110 + $7115;
  $7117 = $7100 * $7116;
  $7118 = $fSlow27;
  $7119 = $fSlow30;
  $7120 = (($4) + 2712|0);
  $7121 = (($7120) + 8|0);
  $7122 = +HEAPF32[$7121>>2];
  $7123 = $7119 * $7122;
  $7124 = $fTemp142;
  $7125 = $7123 + $7124;
  $7126 = $7118 * $7125;
  $7127 = $7117 - $7126;
  $7128 = (($4) + 2712|0);
  HEAPF32[$7128>>2] = $7127;
  $7129 = $fSlow36;
  $7130 = (($4) + 2724|0);
  $7131 = (($7130) + 4|0);
  $7132 = +HEAPF32[$7131>>2];
  $7133 = $7129 * $7132;
  $fTemp143 = $7133;
  $7134 = (($4) + 2712|0);
  $7135 = (($7134) + 8|0);
  $7136 = +HEAPF32[$7135>>2];
  $7137 = $fSlow27;
  $7138 = $fTemp142;
  $7139 = $fSlow30;
  $7140 = (($4) + 2712|0);
  $7141 = +HEAPF32[$7140>>2];
  $7142 = $7139 * $7141;
  $7143 = $7138 + $7142;
  $7144 = $7137 * $7143;
  $7145 = $7136 + $7144;
  $7146 = $fSlow33;
  $7147 = $fSlow34;
  $7148 = (($4) + 2724|0);
  $7149 = (($7148) + 8|0);
  $7150 = +HEAPF32[$7149>>2];
  $7151 = $7147 * $7150;
  $7152 = $fTemp143;
  $7153 = $7151 + $7152;
  $7154 = $7146 * $7153;
  $7155 = $7145 - $7154;
  $7156 = (($4) + 2724|0);
  HEAPF32[$7156>>2] = $7155;
  $7157 = $fSlow41;
  $7158 = (($4) + 2736|0);
  $7159 = (($7158) + 4|0);
  $7160 = +HEAPF32[$7159>>2];
  $7161 = $7157 * $7160;
  $fTemp144 = $7161;
  $7162 = (($4) + 2724|0);
  $7163 = (($7162) + 8|0);
  $7164 = +HEAPF32[$7163>>2];
  $7165 = $fSlow33;
  $7166 = $fTemp143;
  $7167 = $fSlow34;
  $7168 = (($4) + 2724|0);
  $7169 = +HEAPF32[$7168>>2];
  $7170 = $7167 * $7169;
  $7171 = $7166 + $7170;
  $7172 = $7165 * $7171;
  $7173 = $7164 + $7172;
  $7174 = $fSlow39;
  $7175 = $fSlow42;
  $7176 = (($4) + 2736|0);
  $7177 = (($7176) + 8|0);
  $7178 = +HEAPF32[$7177>>2];
  $7179 = $7175 * $7178;
  $7180 = $fTemp144;
  $7181 = $7179 + $7180;
  $7182 = $7174 * $7181;
  $7183 = $7173 - $7182;
  $7184 = (($4) + 2736|0);
  HEAPF32[$7184>>2] = $7183;
  $7185 = $fSlow19;
  $7186 = (($4) + 2748|0);
  $7187 = (($7186) + 4|0);
  $7188 = +HEAPF32[$7187>>2];
  $7189 = $7185 * $7188;
  $7190 = $fSlow20;
  $7191 = (($4) + 200912|0);
  $7192 = (($7191) + 4|0);
  $7193 = +HEAPF32[$7192>>2];
  $7194 = (($4) + 200912|0);
  $7195 = (($7194) + 8|0);
  $7196 = +HEAPF32[$7195>>2];
  $7197 = $7193 + $7196;
  $7198 = $7190 * $7197;
  $7199 = $7189 + $7198;
  $7200 = (($4) + 2748|0);
  HEAPF32[$7200>>2] = $7199;
  $7201 = (($4) + 2748|0);
  $7202 = +HEAPF32[$7201>>2];
  $7203 = $fSlow16;
  $7204 = $fSlow22;
  $7205 = (($4) + 2756|0);
  $7206 = (($7205) + 8|0);
  $7207 = +HEAPF32[$7206>>2];
  $7208 = $7204 * $7207;
  $7209 = $fSlow23;
  $7210 = (($4) + 2756|0);
  $7211 = (($7210) + 4|0);
  $7212 = +HEAPF32[$7211>>2];
  $7213 = $7209 * $7212;
  $7214 = $7208 + $7213;
  $7215 = $7203 * $7214;
  $7216 = $7202 - $7215;
  $7217 = (($4) + 2756|0);
  HEAPF32[$7217>>2] = $7216;
  $7218 = (($4) + 2756|0);
  $7219 = (($7218) + 8|0);
  $7220 = +HEAPF32[$7219>>2];
  $7221 = (($4) + 2756|0);
  $7222 = +HEAPF32[$7221>>2];
  $7223 = (($4) + 2756|0);
  $7224 = (($7223) + 4|0);
  $7225 = +HEAPF32[$7224>>2];
  $7226 = 2.0 * $7225;
  $7227 = $7222 + $7226;
  $7228 = $7220 + $7227;
  $fTemp145 = $7228;
  $7229 = $fSlow16;
  $7230 = $fTemp145;
  $7231 = $7229 * $7230;
  $fTemp146 = $7231;
  $7232 = $fTemp146;
  $7233 = (($4) + 2768|0);
  HEAPF32[$7233>>2] = $7232;
  $7234 = $fSlow48;
  $7235 = (($4) + 2776|0);
  $7236 = (($7235) + 4|0);
  $7237 = +HEAPF32[$7236>>2];
  $7238 = $7234 * $7237;
  $7239 = $fSlow49;
  $7240 = $fSlow51;
  $7241 = $fTemp145;
  $7242 = $7240 * $7241;
  $7243 = $fSlow50;
  $7244 = (($4) + 2768|0);
  $7245 = (($7244) + 4|0);
  $7246 = +HEAPF32[$7245>>2];
  $7247 = $7243 * $7246;
  $7248 = $7242 + $7247;
  $7249 = $7239 * $7248;
  $7250 = $7238 + $7249;
  $7251 = (($4) + 2776|0);
  HEAPF32[$7251>>2] = $7250;
  $7252 = (($4) + 2776|0);
  $7253 = +HEAPF32[$7252>>2];
  $7254 = $fSlow46;
  $7255 = $fSlow52;
  $7256 = (($4) + 2784|0);
  $7257 = (($7256) + 8|0);
  $7258 = +HEAPF32[$7257>>2];
  $7259 = $7255 * $7258;
  $7260 = $fSlow29;
  $7261 = (($4) + 2784|0);
  $7262 = (($7261) + 4|0);
  $7263 = +HEAPF32[$7262>>2];
  $7264 = $7260 * $7263;
  $7265 = $7259 + $7264;
  $7266 = $7254 * $7265;
  $7267 = $7253 - $7266;
  $7268 = (($4) + 2784|0);
  HEAPF32[$7268>>2] = $7267;
  $7269 = $fSlow36;
  $7270 = (($4) + 2796|0);
  $7271 = (($7270) + 4|0);
  $7272 = +HEAPF32[$7271>>2];
  $7273 = $7269 * $7272;
  $fTemp147 = $7273;
  $7274 = $fSlow46;
  $7275 = $fSlow28;
  $7276 = (($4) + 2784|0);
  $7277 = +HEAPF32[$7276>>2];
  $7278 = $7275 * $7277;
  $7279 = $fSlow53;
  $7280 = (($4) + 2784|0);
  $7281 = (($7280) + 4|0);
  $7282 = +HEAPF32[$7281>>2];
  $7283 = $7279 * $7282;
  $7284 = $7278 + $7283;
  $7285 = $fSlow28;
  $7286 = (($4) + 2784|0);
  $7287 = (($7286) + 8|0);
  $7288 = +HEAPF32[$7287>>2];
  $7289 = $7285 * $7288;
  $7290 = $7284 + $7289;
  $7291 = $7274 * $7290;
  $7292 = $fSlow33;
  $7293 = $fSlow34;
  $7294 = (($4) + 2796|0);
  $7295 = (($7294) + 8|0);
  $7296 = +HEAPF32[$7295>>2];
  $7297 = $7293 * $7296;
  $7298 = $fTemp147;
  $7299 = $7297 + $7298;
  $7300 = $7292 * $7299;
  $7301 = $7291 - $7300;
  $7302 = (($4) + 2796|0);
  HEAPF32[$7302>>2] = $7301;
  $7303 = $fSlow41;
  $7304 = (($4) + 2808|0);
  $7305 = (($7304) + 4|0);
  $7306 = +HEAPF32[$7305>>2];
  $7307 = $7303 * $7306;
  $fTemp148 = $7307;
  $7308 = (($4) + 2796|0);
  $7309 = (($7308) + 8|0);
  $7310 = +HEAPF32[$7309>>2];
  $7311 = $fSlow33;
  $7312 = $fTemp147;
  $7313 = $fSlow34;
  $7314 = (($4) + 2796|0);
  $7315 = +HEAPF32[$7314>>2];
  $7316 = $7313 * $7315;
  $7317 = $7312 + $7316;
  $7318 = $7311 * $7317;
  $7319 = $7310 + $7318;
  $7320 = $fSlow39;
  $7321 = $fSlow42;
  $7322 = (($4) + 2808|0);
  $7323 = (($7322) + 8|0);
  $7324 = +HEAPF32[$7323>>2];
  $7325 = $7321 * $7324;
  $7326 = $fTemp148;
  $7327 = $7325 + $7326;
  $7328 = $7320 * $7327;
  $7329 = $7319 - $7328;
  $7330 = (($4) + 2808|0);
  HEAPF32[$7330>>2] = $7329;
  $7331 = $fSlow48;
  $7332 = (($4) + 2820|0);
  $7333 = (($7332) + 4|0);
  $7334 = +HEAPF32[$7333>>2];
  $7335 = $7331 * $7334;
  $7336 = $fSlow49;
  $7337 = (($4) + 2768|0);
  $7338 = +HEAPF32[$7337>>2];
  $7339 = (($4) + 2768|0);
  $7340 = (($7339) + 4|0);
  $7341 = +HEAPF32[$7340>>2];
  $7342 = $7338 + $7341;
  $7343 = $7336 * $7342;
  $7344 = $7335 + $7343;
  $7345 = (($4) + 2820|0);
  HEAPF32[$7345>>2] = $7344;
  $7346 = (($4) + 2820|0);
  $7347 = +HEAPF32[$7346>>2];
  $7348 = $fSlow46;
  $7349 = $fSlow52;
  $7350 = (($4) + 2828|0);
  $7351 = (($7350) + 8|0);
  $7352 = +HEAPF32[$7351>>2];
  $7353 = $7349 * $7352;
  $7354 = $fSlow29;
  $7355 = (($4) + 2828|0);
  $7356 = (($7355) + 4|0);
  $7357 = +HEAPF32[$7356>>2];
  $7358 = $7354 * $7357;
  $7359 = $7353 + $7358;
  $7360 = $7348 * $7359;
  $7361 = $7347 - $7360;
  $7362 = (($4) + 2828|0);
  HEAPF32[$7362>>2] = $7361;
  $7363 = (($4) + 2828|0);
  $7364 = (($7363) + 8|0);
  $7365 = +HEAPF32[$7364>>2];
  $7366 = (($4) + 2828|0);
  $7367 = +HEAPF32[$7366>>2];
  $7368 = (($4) + 2828|0);
  $7369 = (($7368) + 4|0);
  $7370 = +HEAPF32[$7369>>2];
  $7371 = 2.0 * $7370;
  $7372 = $7367 + $7371;
  $7373 = $7365 + $7372;
  $fTemp149 = $7373;
  $7374 = $fSlow46;
  $7375 = $fTemp149;
  $7376 = $7374 * $7375;
  $fTemp150 = $7376;
  $7377 = $fTemp150;
  $7378 = (($4) + 2840|0);
  HEAPF32[$7378>>2] = $7377;
  $7379 = $fSlow59;
  $7380 = (($4) + 2848|0);
  $7381 = (($7380) + 4|0);
  $7382 = +HEAPF32[$7381>>2];
  $7383 = $7379 * $7382;
  $7384 = $fSlow60;
  $7385 = $fSlow62;
  $7386 = $fTemp149;
  $7387 = $7385 * $7386;
  $7388 = $fSlow61;
  $7389 = (($4) + 2840|0);
  $7390 = (($7389) + 4|0);
  $7391 = +HEAPF32[$7390>>2];
  $7392 = $7388 * $7391;
  $7393 = $7387 + $7392;
  $7394 = $7384 * $7393;
  $7395 = $7383 + $7394;
  $7396 = (($4) + 2848|0);
  HEAPF32[$7396>>2] = $7395;
  $7397 = (($4) + 2848|0);
  $7398 = +HEAPF32[$7397>>2];
  $7399 = $fSlow57;
  $7400 = $fSlow63;
  $7401 = (($4) + 2856|0);
  $7402 = (($7401) + 8|0);
  $7403 = +HEAPF32[$7402>>2];
  $7404 = $7400 * $7403;
  $7405 = $fSlow36;
  $7406 = (($4) + 2856|0);
  $7407 = (($7406) + 4|0);
  $7408 = +HEAPF32[$7407>>2];
  $7409 = $7405 * $7408;
  $7410 = $7404 + $7409;
  $7411 = $7399 * $7410;
  $7412 = $7398 - $7411;
  $7413 = (($4) + 2856|0);
  HEAPF32[$7413>>2] = $7412;
  $7414 = $fSlow41;
  $7415 = (($4) + 2868|0);
  $7416 = (($7415) + 4|0);
  $7417 = +HEAPF32[$7416>>2];
  $7418 = $7414 * $7417;
  $fTemp151 = $7418;
  $7419 = $fSlow57;
  $7420 = $fSlow35;
  $7421 = (($4) + 2856|0);
  $7422 = +HEAPF32[$7421>>2];
  $7423 = $7420 * $7422;
  $7424 = $fSlow64;
  $7425 = (($4) + 2856|0);
  $7426 = (($7425) + 4|0);
  $7427 = +HEAPF32[$7426>>2];
  $7428 = $7424 * $7427;
  $7429 = $7423 + $7428;
  $7430 = $fSlow35;
  $7431 = (($4) + 2856|0);
  $7432 = (($7431) + 8|0);
  $7433 = +HEAPF32[$7432>>2];
  $7434 = $7430 * $7433;
  $7435 = $7429 + $7434;
  $7436 = $7419 * $7435;
  $7437 = $fSlow39;
  $7438 = $fSlow42;
  $7439 = (($4) + 2868|0);
  $7440 = (($7439) + 8|0);
  $7441 = +HEAPF32[$7440>>2];
  $7442 = $7438 * $7441;
  $7443 = $fTemp151;
  $7444 = $7442 + $7443;
  $7445 = $7437 * $7444;
  $7446 = $7436 - $7445;
  $7447 = (($4) + 2868|0);
  HEAPF32[$7447>>2] = $7446;
  $7448 = $fSlow59;
  $7449 = (($4) + 2880|0);
  $7450 = (($7449) + 4|0);
  $7451 = +HEAPF32[$7450>>2];
  $7452 = $7448 * $7451;
  $7453 = $fSlow60;
  $7454 = (($4) + 2840|0);
  $7455 = +HEAPF32[$7454>>2];
  $7456 = (($4) + 2840|0);
  $7457 = (($7456) + 4|0);
  $7458 = +HEAPF32[$7457>>2];
  $7459 = $7455 + $7458;
  $7460 = $7453 * $7459;
  $7461 = $7452 + $7460;
  $7462 = (($4) + 2880|0);
  HEAPF32[$7462>>2] = $7461;
  $7463 = (($4) + 2880|0);
  $7464 = +HEAPF32[$7463>>2];
  $7465 = $fSlow57;
  $7466 = $fSlow63;
  $7467 = (($4) + 2888|0);
  $7468 = (($7467) + 8|0);
  $7469 = +HEAPF32[$7468>>2];
  $7470 = $7466 * $7469;
  $7471 = $fSlow36;
  $7472 = (($4) + 2888|0);
  $7473 = (($7472) + 4|0);
  $7474 = +HEAPF32[$7473>>2];
  $7475 = $7471 * $7474;
  $7476 = $7470 + $7475;
  $7477 = $7465 * $7476;
  $7478 = $7464 - $7477;
  $7479 = (($4) + 2888|0);
  HEAPF32[$7479>>2] = $7478;
  $7480 = (($4) + 2888|0);
  $7481 = (($7480) + 8|0);
  $7482 = +HEAPF32[$7481>>2];
  $7483 = (($4) + 2888|0);
  $7484 = +HEAPF32[$7483>>2];
  $7485 = (($4) + 2888|0);
  $7486 = (($7485) + 4|0);
  $7487 = +HEAPF32[$7486>>2];
  $7488 = 2.0 * $7487;
  $7489 = $7484 + $7488;
  $7490 = $7482 + $7489;
  $fTemp152 = $7490;
  $7491 = $fSlow57;
  $7492 = $fTemp152;
  $7493 = $7491 * $7492;
  $fTemp153 = $7493;
  $7494 = $fTemp153;
  $7495 = (($4) + 2900|0);
  HEAPF32[$7495>>2] = $7494;
  $7496 = $fSlow69;
  $7497 = (($4) + 2908|0);
  $7498 = (($7497) + 4|0);
  $7499 = +HEAPF32[$7498>>2];
  $7500 = $7496 * $7499;
  $7501 = $fSlow70;
  $7502 = $fSlow72;
  $7503 = $fTemp152;
  $7504 = $7502 * $7503;
  $7505 = $fSlow71;
  $7506 = (($4) + 2900|0);
  $7507 = (($7506) + 4|0);
  $7508 = +HEAPF32[$7507>>2];
  $7509 = $7505 * $7508;
  $7510 = $7504 + $7509;
  $7511 = $7501 * $7510;
  $7512 = $7500 + $7511;
  $7513 = (($4) + 2908|0);
  HEAPF32[$7513>>2] = $7512;
  $7514 = (($4) + 2908|0);
  $7515 = +HEAPF32[$7514>>2];
  $7516 = $fSlow65;
  $7517 = $fSlow73;
  $7518 = (($4) + 2916|0);
  $7519 = (($7518) + 8|0);
  $7520 = +HEAPF32[$7519>>2];
  $7521 = $7517 * $7520;
  $7522 = $fSlow41;
  $7523 = (($4) + 2916|0);
  $7524 = (($7523) + 4|0);
  $7525 = +HEAPF32[$7524>>2];
  $7526 = $7522 * $7525;
  $7527 = $7521 + $7526;
  $7528 = $7516 * $7527;
  $7529 = $7515 - $7528;
  $7530 = (($4) + 2916|0);
  HEAPF32[$7530>>2] = $7529;
  $7531 = $fSlow69;
  $7532 = (($4) + 2928|0);
  $7533 = (($7532) + 4|0);
  $7534 = +HEAPF32[$7533>>2];
  $7535 = $7531 * $7534;
  $7536 = $fSlow70;
  $7537 = (($4) + 2900|0);
  $7538 = +HEAPF32[$7537>>2];
  $7539 = (($4) + 2900|0);
  $7540 = (($7539) + 4|0);
  $7541 = +HEAPF32[$7540>>2];
  $7542 = $7538 + $7541;
  $7543 = $7536 * $7542;
  $7544 = $7535 + $7543;
  $7545 = (($4) + 2928|0);
  HEAPF32[$7545>>2] = $7544;
  $7546 = (($4) + 2928|0);
  $7547 = +HEAPF32[$7546>>2];
  $7548 = $fSlow65;
  $7549 = $fSlow73;
  $7550 = (($4) + 2936|0);
  $7551 = (($7550) + 8|0);
  $7552 = +HEAPF32[$7551>>2];
  $7553 = $7549 * $7552;
  $7554 = $fSlow41;
  $7555 = (($4) + 2936|0);
  $7556 = (($7555) + 4|0);
  $7557 = +HEAPF32[$7556>>2];
  $7558 = $7554 * $7557;
  $7559 = $7553 + $7558;
  $7560 = $7548 * $7559;
  $7561 = $7547 - $7560;
  $7562 = (($4) + 2936|0);
  HEAPF32[$7562>>2] = $7561;
  $7563 = $fSlow142;
  $7564 = (($4) + 2736|0);
  $7565 = (($7564) + 8|0);
  $7566 = +HEAPF32[$7565>>2];
  $7567 = $fSlow39;
  $7568 = $fTemp144;
  $7569 = $fSlow42;
  $7570 = (($4) + 2736|0);
  $7571 = +HEAPF32[$7570>>2];
  $7572 = $7569 * $7571;
  $7573 = $7568 + $7572;
  $7574 = $7567 * $7573;
  $7575 = $7566 + $7574;
  $7576 = $7563 * $7575;
  $7577 = $fSlow143;
  $7578 = (($4) + 2808|0);
  $7579 = (($7578) + 8|0);
  $7580 = +HEAPF32[$7579>>2];
  $7581 = $fSlow39;
  $7582 = $fTemp148;
  $7583 = $fSlow42;
  $7584 = (($4) + 2808|0);
  $7585 = +HEAPF32[$7584>>2];
  $7586 = $7583 * $7585;
  $7587 = $7582 + $7586;
  $7588 = $7581 * $7587;
  $7589 = $7580 + $7588;
  $7590 = $7577 * $7589;
  $7591 = $7576 + $7590;
  $7592 = $fSlow144;
  $7593 = (($4) + 2868|0);
  $7594 = (($7593) + 8|0);
  $7595 = +HEAPF32[$7594>>2];
  $7596 = $fSlow39;
  $7597 = $fTemp151;
  $7598 = $fSlow42;
  $7599 = (($4) + 2868|0);
  $7600 = +HEAPF32[$7599>>2];
  $7601 = $7598 * $7600;
  $7602 = $7597 + $7601;
  $7603 = $7596 * $7602;
  $7604 = $7595 + $7603;
  $7605 = $7592 * $7604;
  $7606 = $7591 + $7605;
  $7607 = $fSlow65;
  $7608 = $fSlow145;
  $7609 = $fSlow40;
  $7610 = (($4) + 2916|0);
  $7611 = +HEAPF32[$7610>>2];
  $7612 = $7609 * $7611;
  $7613 = $fSlow74;
  $7614 = (($4) + 2916|0);
  $7615 = (($7614) + 4|0);
  $7616 = +HEAPF32[$7615>>2];
  $7617 = $7613 * $7616;
  $7618 = $7612 + $7617;
  $7619 = $fSlow40;
  $7620 = (($4) + 2916|0);
  $7621 = (($7620) + 8|0);
  $7622 = +HEAPF32[$7621>>2];
  $7623 = $7619 * $7622;
  $7624 = $7618 + $7623;
  $7625 = $7608 * $7624;
  $7626 = $fSlow146;
  $7627 = (($4) + 2936|0);
  $7628 = (($7627) + 8|0);
  $7629 = +HEAPF32[$7628>>2];
  $7630 = (($4) + 2936|0);
  $7631 = +HEAPF32[$7630>>2];
  $7632 = (($4) + 2936|0);
  $7633 = (($7632) + 4|0);
  $7634 = +HEAPF32[$7633>>2];
  $7635 = 2.0 * $7634;
  $7636 = $7631 + $7635;
  $7637 = $7629 + $7636;
  $7638 = $7626 * $7637;
  $7639 = $7625 + $7638;
  $7640 = $7607 * $7639;
  $7641 = $7606 + $7640;
  $fTemp154 = $7641;
  $7642 = $fSlow19;
  $7643 = (($4) + 2948|0);
  $7644 = (($7643) + 4|0);
  $7645 = +HEAPF32[$7644>>2];
  $7646 = $7642 * $7645;
  $7647 = $fSlow20;
  $7648 = $fSlow14;
  $7649 = (($4) + 463152|0);
  $7650 = (($7649) + 4|0);
  $7651 = +HEAPF32[$7650>>2];
  $7652 = $7648 * $7651;
  $7653 = $fSlow21;
  $7654 = (($4) + 463152|0);
  $7655 = (($7654) + 8|0);
  $7656 = +HEAPF32[$7655>>2];
  $7657 = $7653 * $7656;
  $7658 = $7652 + $7657;
  $7659 = $7647 * $7658;
  $7660 = $7646 + $7659;
  $7661 = (($4) + 2948|0);
  HEAPF32[$7661>>2] = $7660;
  $7662 = (($4) + 2948|0);
  $7663 = +HEAPF32[$7662>>2];
  $7664 = $fSlow16;
  $7665 = $fSlow22;
  $7666 = (($4) + 2956|0);
  $7667 = (($7666) + 8|0);
  $7668 = +HEAPF32[$7667>>2];
  $7669 = $7665 * $7668;
  $7670 = $fSlow23;
  $7671 = (($4) + 2956|0);
  $7672 = (($7671) + 4|0);
  $7673 = +HEAPF32[$7672>>2];
  $7674 = $7670 * $7673;
  $7675 = $7669 + $7674;
  $7676 = $7664 * $7675;
  $7677 = $7663 - $7676;
  $7678 = (($4) + 2956|0);
  HEAPF32[$7678>>2] = $7677;
  $7679 = $fSlow29;
  $7680 = (($4) + 2968|0);
  $7681 = (($7680) + 4|0);
  $7682 = +HEAPF32[$7681>>2];
  $7683 = $7679 * $7682;
  $fTemp155 = $7683;
  $7684 = $fSlow16;
  $7685 = $fSlow17;
  $7686 = (($4) + 2956|0);
  $7687 = +HEAPF32[$7686>>2];
  $7688 = $7685 * $7687;
  $7689 = $fSlow24;
  $7690 = (($4) + 2956|0);
  $7691 = (($7690) + 4|0);
  $7692 = +HEAPF32[$7691>>2];
  $7693 = $7689 * $7692;
  $7694 = $7688 + $7693;
  $7695 = $fSlow17;
  $7696 = (($4) + 2956|0);
  $7697 = (($7696) + 8|0);
  $7698 = +HEAPF32[$7697>>2];
  $7699 = $7695 * $7698;
  $7700 = $7694 + $7699;
  $7701 = $7684 * $7700;
  $7702 = $fSlow27;
  $7703 = $fSlow30;
  $7704 = (($4) + 2968|0);
  $7705 = (($7704) + 8|0);
  $7706 = +HEAPF32[$7705>>2];
  $7707 = $7703 * $7706;
  $7708 = $fTemp155;
  $7709 = $7707 + $7708;
  $7710 = $7702 * $7709;
  $7711 = $7701 - $7710;
  $7712 = (($4) + 2968|0);
  HEAPF32[$7712>>2] = $7711;
  $7713 = $fSlow36;
  $7714 = (($4) + 2980|0);
  $7715 = (($7714) + 4|0);
  $7716 = +HEAPF32[$7715>>2];
  $7717 = $7713 * $7716;
  $fTemp156 = $7717;
  $7718 = (($4) + 2968|0);
  $7719 = (($7718) + 8|0);
  $7720 = +HEAPF32[$7719>>2];
  $7721 = $fSlow27;
  $7722 = $fTemp155;
  $7723 = $fSlow30;
  $7724 = (($4) + 2968|0);
  $7725 = +HEAPF32[$7724>>2];
  $7726 = $7723 * $7725;
  $7727 = $7722 + $7726;
  $7728 = $7721 * $7727;
  $7729 = $7720 + $7728;
  $7730 = $fSlow33;
  $7731 = $fSlow34;
  $7732 = (($4) + 2980|0);
  $7733 = (($7732) + 8|0);
  $7734 = +HEAPF32[$7733>>2];
  $7735 = $7731 * $7734;
  $7736 = $fTemp156;
  $7737 = $7735 + $7736;
  $7738 = $7730 * $7737;
  $7739 = $7729 - $7738;
  $7740 = (($4) + 2980|0);
  HEAPF32[$7740>>2] = $7739;
  $7741 = $fSlow41;
  $7742 = (($4) + 2992|0);
  $7743 = (($7742) + 4|0);
  $7744 = +HEAPF32[$7743>>2];
  $7745 = $7741 * $7744;
  $fTemp157 = $7745;
  $7746 = (($4) + 2980|0);
  $7747 = (($7746) + 8|0);
  $7748 = +HEAPF32[$7747>>2];
  $7749 = $fSlow33;
  $7750 = $fTemp156;
  $7751 = $fSlow34;
  $7752 = (($4) + 2980|0);
  $7753 = +HEAPF32[$7752>>2];
  $7754 = $7751 * $7753;
  $7755 = $7750 + $7754;
  $7756 = $7749 * $7755;
  $7757 = $7748 + $7756;
  $7758 = $fSlow39;
  $7759 = $fSlow42;
  $7760 = (($4) + 2992|0);
  $7761 = (($7760) + 8|0);
  $7762 = +HEAPF32[$7761>>2];
  $7763 = $7759 * $7762;
  $7764 = $fTemp157;
  $7765 = $7763 + $7764;
  $7766 = $7758 * $7765;
  $7767 = $7757 - $7766;
  $7768 = (($4) + 2992|0);
  HEAPF32[$7768>>2] = $7767;
  $7769 = $fSlow19;
  $7770 = (($4) + 3004|0);
  $7771 = (($7770) + 4|0);
  $7772 = +HEAPF32[$7771>>2];
  $7773 = $7769 * $7772;
  $7774 = $fSlow20;
  $7775 = (($4) + 463152|0);
  $7776 = (($7775) + 4|0);
  $7777 = +HEAPF32[$7776>>2];
  $7778 = (($4) + 463152|0);
  $7779 = (($7778) + 8|0);
  $7780 = +HEAPF32[$7779>>2];
  $7781 = $7777 + $7780;
  $7782 = $7774 * $7781;
  $7783 = $7773 + $7782;
  $7784 = (($4) + 3004|0);
  HEAPF32[$7784>>2] = $7783;
  $7785 = (($4) + 3004|0);
  $7786 = +HEAPF32[$7785>>2];
  $7787 = $fSlow16;
  $7788 = $fSlow22;
  $7789 = (($4) + 3012|0);
  $7790 = (($7789) + 8|0);
  $7791 = +HEAPF32[$7790>>2];
  $7792 = $7788 * $7791;
  $7793 = $fSlow23;
  $7794 = (($4) + 3012|0);
  $7795 = (($7794) + 4|0);
  $7796 = +HEAPF32[$7795>>2];
  $7797 = $7793 * $7796;
  $7798 = $7792 + $7797;
  $7799 = $7787 * $7798;
  $7800 = $7786 - $7799;
  $7801 = (($4) + 3012|0);
  HEAPF32[$7801>>2] = $7800;
  $7802 = (($4) + 3012|0);
  $7803 = (($7802) + 8|0);
  $7804 = +HEAPF32[$7803>>2];
  $7805 = (($4) + 3012|0);
  $7806 = +HEAPF32[$7805>>2];
  $7807 = (($4) + 3012|0);
  $7808 = (($7807) + 4|0);
  $7809 = +HEAPF32[$7808>>2];
  $7810 = 2.0 * $7809;
  $7811 = $7806 + $7810;
  $7812 = $7804 + $7811;
  $fTemp158 = $7812;
  $7813 = $fSlow16;
  $7814 = $fTemp158;
  $7815 = $7813 * $7814;
  $fTemp159 = $7815;
  $7816 = $fTemp159;
  $7817 = (($4) + 3024|0);
  HEAPF32[$7817>>2] = $7816;
  $7818 = $fSlow48;
  $7819 = (($4) + 3032|0);
  $7820 = (($7819) + 4|0);
  $7821 = +HEAPF32[$7820>>2];
  $7822 = $7818 * $7821;
  $7823 = $fSlow49;
  $7824 = $fSlow51;
  $7825 = $fTemp158;
  $7826 = $7824 * $7825;
  $7827 = $fSlow50;
  $7828 = (($4) + 3024|0);
  $7829 = (($7828) + 4|0);
  $7830 = +HEAPF32[$7829>>2];
  $7831 = $7827 * $7830;
  $7832 = $7826 + $7831;
  $7833 = $7823 * $7832;
  $7834 = $7822 + $7833;
  $7835 = (($4) + 3032|0);
  HEAPF32[$7835>>2] = $7834;
  $7836 = (($4) + 3032|0);
  $7837 = +HEAPF32[$7836>>2];
  $7838 = $fSlow46;
  $7839 = $fSlow52;
  $7840 = (($4) + 3040|0);
  $7841 = (($7840) + 8|0);
  $7842 = +HEAPF32[$7841>>2];
  $7843 = $7839 * $7842;
  $7844 = $fSlow29;
  $7845 = (($4) + 3040|0);
  $7846 = (($7845) + 4|0);
  $7847 = +HEAPF32[$7846>>2];
  $7848 = $7844 * $7847;
  $7849 = $7843 + $7848;
  $7850 = $7838 * $7849;
  $7851 = $7837 - $7850;
  $7852 = (($4) + 3040|0);
  HEAPF32[$7852>>2] = $7851;
  $7853 = $fSlow36;
  $7854 = (($4) + 3052|0);
  $7855 = (($7854) + 4|0);
  $7856 = +HEAPF32[$7855>>2];
  $7857 = $7853 * $7856;
  $fTemp160 = $7857;
  $7858 = $fSlow46;
  $7859 = $fSlow28;
  $7860 = (($4) + 3040|0);
  $7861 = +HEAPF32[$7860>>2];
  $7862 = $7859 * $7861;
  $7863 = $fSlow53;
  $7864 = (($4) + 3040|0);
  $7865 = (($7864) + 4|0);
  $7866 = +HEAPF32[$7865>>2];
  $7867 = $7863 * $7866;
  $7868 = $7862 + $7867;
  $7869 = $fSlow28;
  $7870 = (($4) + 3040|0);
  $7871 = (($7870) + 8|0);
  $7872 = +HEAPF32[$7871>>2];
  $7873 = $7869 * $7872;
  $7874 = $7868 + $7873;
  $7875 = $7858 * $7874;
  $7876 = $fSlow33;
  $7877 = $fSlow34;
  $7878 = (($4) + 3052|0);
  $7879 = (($7878) + 8|0);
  $7880 = +HEAPF32[$7879>>2];
  $7881 = $7877 * $7880;
  $7882 = $fTemp160;
  $7883 = $7881 + $7882;
  $7884 = $7876 * $7883;
  $7885 = $7875 - $7884;
  $7886 = (($4) + 3052|0);
  HEAPF32[$7886>>2] = $7885;
  $7887 = $fSlow41;
  $7888 = (($4) + 3064|0);
  $7889 = (($7888) + 4|0);
  $7890 = +HEAPF32[$7889>>2];
  $7891 = $7887 * $7890;
  $fTemp161 = $7891;
  $7892 = (($4) + 3052|0);
  $7893 = (($7892) + 8|0);
  $7894 = +HEAPF32[$7893>>2];
  $7895 = $fSlow33;
  $7896 = $fTemp160;
  $7897 = $fSlow34;
  $7898 = (($4) + 3052|0);
  $7899 = +HEAPF32[$7898>>2];
  $7900 = $7897 * $7899;
  $7901 = $7896 + $7900;
  $7902 = $7895 * $7901;
  $7903 = $7894 + $7902;
  $7904 = $fSlow39;
  $7905 = $fSlow42;
  $7906 = (($4) + 3064|0);
  $7907 = (($7906) + 8|0);
  $7908 = +HEAPF32[$7907>>2];
  $7909 = $7905 * $7908;
  $7910 = $fTemp161;
  $7911 = $7909 + $7910;
  $7912 = $7904 * $7911;
  $7913 = $7903 - $7912;
  $7914 = (($4) + 3064|0);
  HEAPF32[$7914>>2] = $7913;
  $7915 = $fSlow48;
  $7916 = (($4) + 3076|0);
  $7917 = (($7916) + 4|0);
  $7918 = +HEAPF32[$7917>>2];
  $7919 = $7915 * $7918;
  $7920 = $fSlow49;
  $7921 = (($4) + 3024|0);
  $7922 = +HEAPF32[$7921>>2];
  $7923 = (($4) + 3024|0);
  $7924 = (($7923) + 4|0);
  $7925 = +HEAPF32[$7924>>2];
  $7926 = $7922 + $7925;
  $7927 = $7920 * $7926;
  $7928 = $7919 + $7927;
  $7929 = (($4) + 3076|0);
  HEAPF32[$7929>>2] = $7928;
  $7930 = (($4) + 3076|0);
  $7931 = +HEAPF32[$7930>>2];
  $7932 = $fSlow46;
  $7933 = $fSlow52;
  $7934 = (($4) + 3084|0);
  $7935 = (($7934) + 8|0);
  $7936 = +HEAPF32[$7935>>2];
  $7937 = $7933 * $7936;
  $7938 = $fSlow29;
  $7939 = (($4) + 3084|0);
  $7940 = (($7939) + 4|0);
  $7941 = +HEAPF32[$7940>>2];
  $7942 = $7938 * $7941;
  $7943 = $7937 + $7942;
  $7944 = $7932 * $7943;
  $7945 = $7931 - $7944;
  $7946 = (($4) + 3084|0);
  HEAPF32[$7946>>2] = $7945;
  $7947 = (($4) + 3084|0);
  $7948 = (($7947) + 8|0);
  $7949 = +HEAPF32[$7948>>2];
  $7950 = (($4) + 3084|0);
  $7951 = +HEAPF32[$7950>>2];
  $7952 = (($4) + 3084|0);
  $7953 = (($7952) + 4|0);
  $7954 = +HEAPF32[$7953>>2];
  $7955 = 2.0 * $7954;
  $7956 = $7951 + $7955;
  $7957 = $7949 + $7956;
  $fTemp162 = $7957;
  $7958 = $fSlow46;
  $7959 = $fTemp162;
  $7960 = $7958 * $7959;
  $fTemp163 = $7960;
  $7961 = $fTemp163;
  $7962 = (($4) + 3096|0);
  HEAPF32[$7962>>2] = $7961;
  $7963 = $fSlow59;
  $7964 = (($4) + 3104|0);
  $7965 = (($7964) + 4|0);
  $7966 = +HEAPF32[$7965>>2];
  $7967 = $7963 * $7966;
  $7968 = $fSlow60;
  $7969 = $fSlow62;
  $7970 = $fTemp162;
  $7971 = $7969 * $7970;
  $7972 = $fSlow61;
  $7973 = (($4) + 3096|0);
  $7974 = (($7973) + 4|0);
  $7975 = +HEAPF32[$7974>>2];
  $7976 = $7972 * $7975;
  $7977 = $7971 + $7976;
  $7978 = $7968 * $7977;
  $7979 = $7967 + $7978;
  $7980 = (($4) + 3104|0);
  HEAPF32[$7980>>2] = $7979;
  $7981 = (($4) + 3104|0);
  $7982 = +HEAPF32[$7981>>2];
  $7983 = $fSlow57;
  $7984 = $fSlow63;
  $7985 = (($4) + 3112|0);
  $7986 = (($7985) + 8|0);
  $7987 = +HEAPF32[$7986>>2];
  $7988 = $7984 * $7987;
  $7989 = $fSlow36;
  $7990 = (($4) + 3112|0);
  $7991 = (($7990) + 4|0);
  $7992 = +HEAPF32[$7991>>2];
  $7993 = $7989 * $7992;
  $7994 = $7988 + $7993;
  $7995 = $7983 * $7994;
  $7996 = $7982 - $7995;
  $7997 = (($4) + 3112|0);
  HEAPF32[$7997>>2] = $7996;
  $7998 = $fSlow41;
  $7999 = (($4) + 3124|0);
  $8000 = (($7999) + 4|0);
  $8001 = +HEAPF32[$8000>>2];
  $8002 = $7998 * $8001;
  $fTemp164 = $8002;
  $8003 = $fSlow57;
  $8004 = $fSlow35;
  $8005 = (($4) + 3112|0);
  $8006 = +HEAPF32[$8005>>2];
  $8007 = $8004 * $8006;
  $8008 = $fSlow64;
  $8009 = (($4) + 3112|0);
  $8010 = (($8009) + 4|0);
  $8011 = +HEAPF32[$8010>>2];
  $8012 = $8008 * $8011;
  $8013 = $8007 + $8012;
  $8014 = $fSlow35;
  $8015 = (($4) + 3112|0);
  $8016 = (($8015) + 8|0);
  $8017 = +HEAPF32[$8016>>2];
  $8018 = $8014 * $8017;
  $8019 = $8013 + $8018;
  $8020 = $8003 * $8019;
  $8021 = $fSlow39;
  $8022 = $fSlow42;
  $8023 = (($4) + 3124|0);
  $8024 = (($8023) + 8|0);
  $8025 = +HEAPF32[$8024>>2];
  $8026 = $8022 * $8025;
  $8027 = $fTemp164;
  $8028 = $8026 + $8027;
  $8029 = $8021 * $8028;
  $8030 = $8020 - $8029;
  $8031 = (($4) + 3124|0);
  HEAPF32[$8031>>2] = $8030;
  $8032 = $fSlow59;
  $8033 = (($4) + 3136|0);
  $8034 = (($8033) + 4|0);
  $8035 = +HEAPF32[$8034>>2];
  $8036 = $8032 * $8035;
  $8037 = $fSlow60;
  $8038 = (($4) + 3096|0);
  $8039 = +HEAPF32[$8038>>2];
  $8040 = (($4) + 3096|0);
  $8041 = (($8040) + 4|0);
  $8042 = +HEAPF32[$8041>>2];
  $8043 = $8039 + $8042;
  $8044 = $8037 * $8043;
  $8045 = $8036 + $8044;
  $8046 = (($4) + 3136|0);
  HEAPF32[$8046>>2] = $8045;
  $8047 = (($4) + 3136|0);
  $8048 = +HEAPF32[$8047>>2];
  $8049 = $fSlow57;
  $8050 = $fSlow63;
  $8051 = (($4) + 3144|0);
  $8052 = (($8051) + 8|0);
  $8053 = +HEAPF32[$8052>>2];
  $8054 = $8050 * $8053;
  $8055 = $fSlow36;
  $8056 = (($4) + 3144|0);
  $8057 = (($8056) + 4|0);
  $8058 = +HEAPF32[$8057>>2];
  $8059 = $8055 * $8058;
  $8060 = $8054 + $8059;
  $8061 = $8049 * $8060;
  $8062 = $8048 - $8061;
  $8063 = (($4) + 3144|0);
  HEAPF32[$8063>>2] = $8062;
  $8064 = (($4) + 3144|0);
  $8065 = (($8064) + 8|0);
  $8066 = +HEAPF32[$8065>>2];
  $8067 = (($4) + 3144|0);
  $8068 = +HEAPF32[$8067>>2];
  $8069 = (($4) + 3144|0);
  $8070 = (($8069) + 4|0);
  $8071 = +HEAPF32[$8070>>2];
  $8072 = 2.0 * $8071;
  $8073 = $8068 + $8072;
  $8074 = $8066 + $8073;
  $fTemp165 = $8074;
  $8075 = $fSlow57;
  $8076 = $fTemp165;
  $8077 = $8075 * $8076;
  $fTemp166 = $8077;
  $8078 = $fTemp166;
  $8079 = (($4) + 3156|0);
  HEAPF32[$8079>>2] = $8078;
  $8080 = $fSlow69;
  $8081 = (($4) + 3164|0);
  $8082 = (($8081) + 4|0);
  $8083 = +HEAPF32[$8082>>2];
  $8084 = $8080 * $8083;
  $8085 = $fSlow70;
  $8086 = $fSlow72;
  $8087 = $fTemp165;
  $8088 = $8086 * $8087;
  $8089 = $fSlow71;
  $8090 = (($4) + 3156|0);
  $8091 = (($8090) + 4|0);
  $8092 = +HEAPF32[$8091>>2];
  $8093 = $8089 * $8092;
  $8094 = $8088 + $8093;
  $8095 = $8085 * $8094;
  $8096 = $8084 + $8095;
  $8097 = (($4) + 3164|0);
  HEAPF32[$8097>>2] = $8096;
  $8098 = (($4) + 3164|0);
  $8099 = +HEAPF32[$8098>>2];
  $8100 = $fSlow65;
  $8101 = $fSlow73;
  $8102 = (($4) + 3172|0);
  $8103 = (($8102) + 8|0);
  $8104 = +HEAPF32[$8103>>2];
  $8105 = $8101 * $8104;
  $8106 = $fSlow41;
  $8107 = (($4) + 3172|0);
  $8108 = (($8107) + 4|0);
  $8109 = +HEAPF32[$8108>>2];
  $8110 = $8106 * $8109;
  $8111 = $8105 + $8110;
  $8112 = $8100 * $8111;
  $8113 = $8099 - $8112;
  $8114 = (($4) + 3172|0);
  HEAPF32[$8114>>2] = $8113;
  $8115 = $fSlow69;
  $8116 = (($4) + 3184|0);
  $8117 = (($8116) + 4|0);
  $8118 = +HEAPF32[$8117>>2];
  $8119 = $8115 * $8118;
  $8120 = $fSlow70;
  $8121 = (($4) + 3156|0);
  $8122 = +HEAPF32[$8121>>2];
  $8123 = (($4) + 3156|0);
  $8124 = (($8123) + 4|0);
  $8125 = +HEAPF32[$8124>>2];
  $8126 = $8122 + $8125;
  $8127 = $8120 * $8126;
  $8128 = $8119 + $8127;
  $8129 = (($4) + 3184|0);
  HEAPF32[$8129>>2] = $8128;
  $8130 = (($4) + 3184|0);
  $8131 = +HEAPF32[$8130>>2];
  $8132 = $fSlow65;
  $8133 = $fSlow73;
  $8134 = (($4) + 3192|0);
  $8135 = (($8134) + 8|0);
  $8136 = +HEAPF32[$8135>>2];
  $8137 = $8133 * $8136;
  $8138 = $fSlow41;
  $8139 = (($4) + 3192|0);
  $8140 = (($8139) + 4|0);
  $8141 = +HEAPF32[$8140>>2];
  $8142 = $8138 * $8141;
  $8143 = $8137 + $8142;
  $8144 = $8132 * $8143;
  $8145 = $8131 - $8144;
  $8146 = (($4) + 3192|0);
  HEAPF32[$8146>>2] = $8145;
  $8147 = $fSlow149;
  $8148 = (($4) + 2992|0);
  $8149 = (($8148) + 8|0);
  $8150 = +HEAPF32[$8149>>2];
  $8151 = $fSlow39;
  $8152 = $fTemp157;
  $8153 = $fSlow42;
  $8154 = (($4) + 2992|0);
  $8155 = +HEAPF32[$8154>>2];
  $8156 = $8153 * $8155;
  $8157 = $8152 + $8156;
  $8158 = $8151 * $8157;
  $8159 = $8150 + $8158;
  $8160 = $8147 * $8159;
  $8161 = $fSlow150;
  $8162 = (($4) + 3064|0);
  $8163 = (($8162) + 8|0);
  $8164 = +HEAPF32[$8163>>2];
  $8165 = $fSlow39;
  $8166 = $fTemp161;
  $8167 = $fSlow42;
  $8168 = (($4) + 3064|0);
  $8169 = +HEAPF32[$8168>>2];
  $8170 = $8167 * $8169;
  $8171 = $8166 + $8170;
  $8172 = $8165 * $8171;
  $8173 = $8164 + $8172;
  $8174 = $8161 * $8173;
  $8175 = $8160 + $8174;
  $8176 = $fSlow151;
  $8177 = (($4) + 3124|0);
  $8178 = (($8177) + 8|0);
  $8179 = +HEAPF32[$8178>>2];
  $8180 = $fSlow39;
  $8181 = $fTemp164;
  $8182 = $fSlow42;
  $8183 = (($4) + 3124|0);
  $8184 = +HEAPF32[$8183>>2];
  $8185 = $8182 * $8184;
  $8186 = $8181 + $8185;
  $8187 = $8180 * $8186;
  $8188 = $8179 + $8187;
  $8189 = $8176 * $8188;
  $8190 = $8175 + $8189;
  $8191 = $fSlow65;
  $8192 = $fSlow152;
  $8193 = $fSlow40;
  $8194 = (($4) + 3172|0);
  $8195 = +HEAPF32[$8194>>2];
  $8196 = $8193 * $8195;
  $8197 = $fSlow74;
  $8198 = (($4) + 3172|0);
  $8199 = (($8198) + 4|0);
  $8200 = +HEAPF32[$8199>>2];
  $8201 = $8197 * $8200;
  $8202 = $8196 + $8201;
  $8203 = $fSlow40;
  $8204 = (($4) + 3172|0);
  $8205 = (($8204) + 8|0);
  $8206 = +HEAPF32[$8205>>2];
  $8207 = $8203 * $8206;
  $8208 = $8202 + $8207;
  $8209 = $8192 * $8208;
  $8210 = $fSlow153;
  $8211 = (($4) + 3192|0);
  $8212 = (($8211) + 8|0);
  $8213 = +HEAPF32[$8212>>2];
  $8214 = (($4) + 3192|0);
  $8215 = +HEAPF32[$8214>>2];
  $8216 = (($4) + 3192|0);
  $8217 = (($8216) + 4|0);
  $8218 = +HEAPF32[$8217>>2];
  $8219 = 2.0 * $8218;
  $8220 = $8215 + $8219;
  $8221 = $8213 + $8220;
  $8222 = $8210 * $8221;
  $8223 = $8209 + $8222;
  $8224 = $8191 * $8223;
  $8225 = $8190 + $8224;
  $fTemp167 = $8225;
  $8226 = $fTemp154;
  $8227 = $fTemp167;
  $8228 = $8226 + $8227;
  $fTemp168 = $8228;
  $8229 = $fTemp141;
  $8230 = $fTemp168;
  $8231 = $8229 + $8230;
  $fTemp169 = $8231;
  $8232 = $fSlow19;
  $8233 = (($4) + 3204|0);
  $8234 = (($8233) + 4|0);
  $8235 = +HEAPF32[$8234>>2];
  $8236 = $8232 * $8235;
  $8237 = $fSlow20;
  $8238 = $fSlow14;
  $8239 = (($4) + 135352|0);
  $8240 = (($8239) + 4|0);
  $8241 = +HEAPF32[$8240>>2];
  $8242 = $8238 * $8241;
  $8243 = $fSlow21;
  $8244 = (($4) + 135352|0);
  $8245 = (($8244) + 8|0);
  $8246 = +HEAPF32[$8245>>2];
  $8247 = $8243 * $8246;
  $8248 = $8242 + $8247;
  $8249 = $8237 * $8248;
  $8250 = $8236 + $8249;
  $8251 = (($4) + 3204|0);
  HEAPF32[$8251>>2] = $8250;
  $8252 = (($4) + 3204|0);
  $8253 = +HEAPF32[$8252>>2];
  $8254 = $fSlow16;
  $8255 = $fSlow22;
  $8256 = (($4) + 3212|0);
  $8257 = (($8256) + 8|0);
  $8258 = +HEAPF32[$8257>>2];
  $8259 = $8255 * $8258;
  $8260 = $fSlow23;
  $8261 = (($4) + 3212|0);
  $8262 = (($8261) + 4|0);
  $8263 = +HEAPF32[$8262>>2];
  $8264 = $8260 * $8263;
  $8265 = $8259 + $8264;
  $8266 = $8254 * $8265;
  $8267 = $8253 - $8266;
  $8268 = (($4) + 3212|0);
  HEAPF32[$8268>>2] = $8267;
  $8269 = $fSlow29;
  $8270 = (($4) + 3224|0);
  $8271 = (($8270) + 4|0);
  $8272 = +HEAPF32[$8271>>2];
  $8273 = $8269 * $8272;
  $fTemp170 = $8273;
  $8274 = $fSlow16;
  $8275 = $fSlow17;
  $8276 = (($4) + 3212|0);
  $8277 = +HEAPF32[$8276>>2];
  $8278 = $8275 * $8277;
  $8279 = $fSlow24;
  $8280 = (($4) + 3212|0);
  $8281 = (($8280) + 4|0);
  $8282 = +HEAPF32[$8281>>2];
  $8283 = $8279 * $8282;
  $8284 = $8278 + $8283;
  $8285 = $fSlow17;
  $8286 = (($4) + 3212|0);
  $8287 = (($8286) + 8|0);
  $8288 = +HEAPF32[$8287>>2];
  $8289 = $8285 * $8288;
  $8290 = $8284 + $8289;
  $8291 = $8274 * $8290;
  $8292 = $fSlow27;
  $8293 = $fSlow30;
  $8294 = (($4) + 3224|0);
  $8295 = (($8294) + 8|0);
  $8296 = +HEAPF32[$8295>>2];
  $8297 = $8293 * $8296;
  $8298 = $fTemp170;
  $8299 = $8297 + $8298;
  $8300 = $8292 * $8299;
  $8301 = $8291 - $8300;
  $8302 = (($4) + 3224|0);
  HEAPF32[$8302>>2] = $8301;
  $8303 = $fSlow36;
  $8304 = (($4) + 3236|0);
  $8305 = (($8304) + 4|0);
  $8306 = +HEAPF32[$8305>>2];
  $8307 = $8303 * $8306;
  $fTemp171 = $8307;
  $8308 = (($4) + 3224|0);
  $8309 = (($8308) + 8|0);
  $8310 = +HEAPF32[$8309>>2];
  $8311 = $fSlow27;
  $8312 = $fTemp170;
  $8313 = $fSlow30;
  $8314 = (($4) + 3224|0);
  $8315 = +HEAPF32[$8314>>2];
  $8316 = $8313 * $8315;
  $8317 = $8312 + $8316;
  $8318 = $8311 * $8317;
  $8319 = $8310 + $8318;
  $8320 = $fSlow33;
  $8321 = $fSlow34;
  $8322 = (($4) + 3236|0);
  $8323 = (($8322) + 8|0);
  $8324 = +HEAPF32[$8323>>2];
  $8325 = $8321 * $8324;
  $8326 = $fTemp171;
  $8327 = $8325 + $8326;
  $8328 = $8320 * $8327;
  $8329 = $8319 - $8328;
  $8330 = (($4) + 3236|0);
  HEAPF32[$8330>>2] = $8329;
  $8331 = $fSlow41;
  $8332 = (($4) + 3248|0);
  $8333 = (($8332) + 4|0);
  $8334 = +HEAPF32[$8333>>2];
  $8335 = $8331 * $8334;
  $fTemp172 = $8335;
  $8336 = (($4) + 3236|0);
  $8337 = (($8336) + 8|0);
  $8338 = +HEAPF32[$8337>>2];
  $8339 = $fSlow33;
  $8340 = $fTemp171;
  $8341 = $fSlow34;
  $8342 = (($4) + 3236|0);
  $8343 = +HEAPF32[$8342>>2];
  $8344 = $8341 * $8343;
  $8345 = $8340 + $8344;
  $8346 = $8339 * $8345;
  $8347 = $8338 + $8346;
  $8348 = $fSlow39;
  $8349 = $fSlow42;
  $8350 = (($4) + 3248|0);
  $8351 = (($8350) + 8|0);
  $8352 = +HEAPF32[$8351>>2];
  $8353 = $8349 * $8352;
  $8354 = $fTemp172;
  $8355 = $8353 + $8354;
  $8356 = $8348 * $8355;
  $8357 = $8347 - $8356;
  $8358 = (($4) + 3248|0);
  HEAPF32[$8358>>2] = $8357;
  $8359 = $fSlow19;
  $8360 = (($4) + 3260|0);
  $8361 = (($8360) + 4|0);
  $8362 = +HEAPF32[$8361>>2];
  $8363 = $8359 * $8362;
  $8364 = $fSlow20;
  $8365 = (($4) + 135352|0);
  $8366 = (($8365) + 4|0);
  $8367 = +HEAPF32[$8366>>2];
  $8368 = (($4) + 135352|0);
  $8369 = (($8368) + 8|0);
  $8370 = +HEAPF32[$8369>>2];
  $8371 = $8367 + $8370;
  $8372 = $8364 * $8371;
  $8373 = $8363 + $8372;
  $8374 = (($4) + 3260|0);
  HEAPF32[$8374>>2] = $8373;
  $8375 = (($4) + 3260|0);
  $8376 = +HEAPF32[$8375>>2];
  $8377 = $fSlow16;
  $8378 = $fSlow22;
  $8379 = (($4) + 3268|0);
  $8380 = (($8379) + 8|0);
  $8381 = +HEAPF32[$8380>>2];
  $8382 = $8378 * $8381;
  $8383 = $fSlow23;
  $8384 = (($4) + 3268|0);
  $8385 = (($8384) + 4|0);
  $8386 = +HEAPF32[$8385>>2];
  $8387 = $8383 * $8386;
  $8388 = $8382 + $8387;
  $8389 = $8377 * $8388;
  $8390 = $8376 - $8389;
  $8391 = (($4) + 3268|0);
  HEAPF32[$8391>>2] = $8390;
  $8392 = (($4) + 3268|0);
  $8393 = (($8392) + 8|0);
  $8394 = +HEAPF32[$8393>>2];
  $8395 = (($4) + 3268|0);
  $8396 = +HEAPF32[$8395>>2];
  $8397 = (($4) + 3268|0);
  $8398 = (($8397) + 4|0);
  $8399 = +HEAPF32[$8398>>2];
  $8400 = 2.0 * $8399;
  $8401 = $8396 + $8400;
  $8402 = $8394 + $8401;
  $fTemp173 = $8402;
  $8403 = $fSlow16;
  $8404 = $fTemp173;
  $8405 = $8403 * $8404;
  $fTemp174 = $8405;
  $8406 = $fTemp174;
  $8407 = (($4) + 3280|0);
  HEAPF32[$8407>>2] = $8406;
  $8408 = $fSlow48;
  $8409 = (($4) + 3288|0);
  $8410 = (($8409) + 4|0);
  $8411 = +HEAPF32[$8410>>2];
  $8412 = $8408 * $8411;
  $8413 = $fSlow49;
  $8414 = $fSlow50;
  $8415 = (($4) + 3280|0);
  $8416 = (($8415) + 4|0);
  $8417 = +HEAPF32[$8416>>2];
  $8418 = $8414 * $8417;
  $8419 = $fSlow51;
  $8420 = $fTemp173;
  $8421 = $8419 * $8420;
  $8422 = $8418 + $8421;
  $8423 = $8413 * $8422;
  $8424 = $8412 + $8423;
  $8425 = (($4) + 3288|0);
  HEAPF32[$8425>>2] = $8424;
  $8426 = (($4) + 3288|0);
  $8427 = +HEAPF32[$8426>>2];
  $8428 = $fSlow46;
  $8429 = $fSlow52;
  $8430 = (($4) + 3296|0);
  $8431 = (($8430) + 8|0);
  $8432 = +HEAPF32[$8431>>2];
  $8433 = $8429 * $8432;
  $8434 = $fSlow29;
  $8435 = (($4) + 3296|0);
  $8436 = (($8435) + 4|0);
  $8437 = +HEAPF32[$8436>>2];
  $8438 = $8434 * $8437;
  $8439 = $8433 + $8438;
  $8440 = $8428 * $8439;
  $8441 = $8427 - $8440;
  $8442 = (($4) + 3296|0);
  HEAPF32[$8442>>2] = $8441;
  $8443 = $fSlow36;
  $8444 = (($4) + 3308|0);
  $8445 = (($8444) + 4|0);
  $8446 = +HEAPF32[$8445>>2];
  $8447 = $8443 * $8446;
  $fTemp175 = $8447;
  $8448 = $fSlow46;
  $8449 = $fSlow28;
  $8450 = (($4) + 3296|0);
  $8451 = +HEAPF32[$8450>>2];
  $8452 = $8449 * $8451;
  $8453 = $fSlow53;
  $8454 = (($4) + 3296|0);
  $8455 = (($8454) + 4|0);
  $8456 = +HEAPF32[$8455>>2];
  $8457 = $8453 * $8456;
  $8458 = $8452 + $8457;
  $8459 = $fSlow28;
  $8460 = (($4) + 3296|0);
  $8461 = (($8460) + 8|0);
  $8462 = +HEAPF32[$8461>>2];
  $8463 = $8459 * $8462;
  $8464 = $8458 + $8463;
  $8465 = $8448 * $8464;
  $8466 = $fSlow33;
  $8467 = $fSlow34;
  $8468 = (($4) + 3308|0);
  $8469 = (($8468) + 8|0);
  $8470 = +HEAPF32[$8469>>2];
  $8471 = $8467 * $8470;
  $8472 = $fTemp175;
  $8473 = $8471 + $8472;
  $8474 = $8466 * $8473;
  $8475 = $8465 - $8474;
  $8476 = (($4) + 3308|0);
  HEAPF32[$8476>>2] = $8475;
  $8477 = $fSlow41;
  $8478 = (($4) + 3320|0);
  $8479 = (($8478) + 4|0);
  $8480 = +HEAPF32[$8479>>2];
  $8481 = $8477 * $8480;
  $fTemp176 = $8481;
  $8482 = (($4) + 3308|0);
  $8483 = (($8482) + 8|0);
  $8484 = +HEAPF32[$8483>>2];
  $8485 = $fSlow33;
  $8486 = $fTemp175;
  $8487 = $fSlow34;
  $8488 = (($4) + 3308|0);
  $8489 = +HEAPF32[$8488>>2];
  $8490 = $8487 * $8489;
  $8491 = $8486 + $8490;
  $8492 = $8485 * $8491;
  $8493 = $8484 + $8492;
  $8494 = $fSlow39;
  $8495 = $fSlow42;
  $8496 = (($4) + 3320|0);
  $8497 = (($8496) + 8|0);
  $8498 = +HEAPF32[$8497>>2];
  $8499 = $8495 * $8498;
  $8500 = $fTemp176;
  $8501 = $8499 + $8500;
  $8502 = $8494 * $8501;
  $8503 = $8493 - $8502;
  $8504 = (($4) + 3320|0);
  HEAPF32[$8504>>2] = $8503;
  $8505 = $fSlow48;
  $8506 = (($4) + 3332|0);
  $8507 = (($8506) + 4|0);
  $8508 = +HEAPF32[$8507>>2];
  $8509 = $8505 * $8508;
  $8510 = $fSlow49;
  $8511 = (($4) + 3280|0);
  $8512 = +HEAPF32[$8511>>2];
  $8513 = (($4) + 3280|0);
  $8514 = (($8513) + 4|0);
  $8515 = +HEAPF32[$8514>>2];
  $8516 = $8512 + $8515;
  $8517 = $8510 * $8516;
  $8518 = $8509 + $8517;
  $8519 = (($4) + 3332|0);
  HEAPF32[$8519>>2] = $8518;
  $8520 = (($4) + 3332|0);
  $8521 = +HEAPF32[$8520>>2];
  $8522 = $fSlow46;
  $8523 = $fSlow52;
  $8524 = (($4) + 3340|0);
  $8525 = (($8524) + 8|0);
  $8526 = +HEAPF32[$8525>>2];
  $8527 = $8523 * $8526;
  $8528 = $fSlow29;
  $8529 = (($4) + 3340|0);
  $8530 = (($8529) + 4|0);
  $8531 = +HEAPF32[$8530>>2];
  $8532 = $8528 * $8531;
  $8533 = $8527 + $8532;
  $8534 = $8522 * $8533;
  $8535 = $8521 - $8534;
  $8536 = (($4) + 3340|0);
  HEAPF32[$8536>>2] = $8535;
  $8537 = (($4) + 3340|0);
  $8538 = (($8537) + 8|0);
  $8539 = +HEAPF32[$8538>>2];
  $8540 = (($4) + 3340|0);
  $8541 = +HEAPF32[$8540>>2];
  $8542 = (($4) + 3340|0);
  $8543 = (($8542) + 4|0);
  $8544 = +HEAPF32[$8543>>2];
  $8545 = 2.0 * $8544;
  $8546 = $8541 + $8545;
  $8547 = $8539 + $8546;
  $fTemp177 = $8547;
  $8548 = $fSlow46;
  $8549 = $fTemp177;
  $8550 = $8548 * $8549;
  $fTemp178 = $8550;
  $8551 = $fTemp178;
  $8552 = (($4) + 3352|0);
  HEAPF32[$8552>>2] = $8551;
  $8553 = $fSlow59;
  $8554 = (($4) + 3360|0);
  $8555 = (($8554) + 4|0);
  $8556 = +HEAPF32[$8555>>2];
  $8557 = $8553 * $8556;
  $8558 = $fSlow60;
  $8559 = $fSlow61;
  $8560 = (($4) + 3352|0);
  $8561 = (($8560) + 4|0);
  $8562 = +HEAPF32[$8561>>2];
  $8563 = $8559 * $8562;
  $8564 = $fSlow62;
  $8565 = $fTemp177;
  $8566 = $8564 * $8565;
  $8567 = $8563 + $8566;
  $8568 = $8558 * $8567;
  $8569 = $8557 + $8568;
  $8570 = (($4) + 3360|0);
  HEAPF32[$8570>>2] = $8569;
  $8571 = (($4) + 3360|0);
  $8572 = +HEAPF32[$8571>>2];
  $8573 = $fSlow57;
  $8574 = $fSlow63;
  $8575 = (($4) + 3368|0);
  $8576 = (($8575) + 8|0);
  $8577 = +HEAPF32[$8576>>2];
  $8578 = $8574 * $8577;
  $8579 = $fSlow36;
  $8580 = (($4) + 3368|0);
  $8581 = (($8580) + 4|0);
  $8582 = +HEAPF32[$8581>>2];
  $8583 = $8579 * $8582;
  $8584 = $8578 + $8583;
  $8585 = $8573 * $8584;
  $8586 = $8572 - $8585;
  $8587 = (($4) + 3368|0);
  HEAPF32[$8587>>2] = $8586;
  $8588 = $fSlow41;
  $8589 = (($4) + 3380|0);
  $8590 = (($8589) + 4|0);
  $8591 = +HEAPF32[$8590>>2];
  $8592 = $8588 * $8591;
  $fTemp179 = $8592;
  $8593 = $fSlow57;
  $8594 = $fSlow35;
  $8595 = (($4) + 3368|0);
  $8596 = +HEAPF32[$8595>>2];
  $8597 = $8594 * $8596;
  $8598 = $fSlow64;
  $8599 = (($4) + 3368|0);
  $8600 = (($8599) + 4|0);
  $8601 = +HEAPF32[$8600>>2];
  $8602 = $8598 * $8601;
  $8603 = $8597 + $8602;
  $8604 = $fSlow35;
  $8605 = (($4) + 3368|0);
  $8606 = (($8605) + 8|0);
  $8607 = +HEAPF32[$8606>>2];
  $8608 = $8604 * $8607;
  $8609 = $8603 + $8608;
  $8610 = $8593 * $8609;
  $8611 = $fSlow39;
  $8612 = $fSlow42;
  $8613 = (($4) + 3380|0);
  $8614 = (($8613) + 8|0);
  $8615 = +HEAPF32[$8614>>2];
  $8616 = $8612 * $8615;
  $8617 = $fTemp179;
  $8618 = $8616 + $8617;
  $8619 = $8611 * $8618;
  $8620 = $8610 - $8619;
  $8621 = (($4) + 3380|0);
  HEAPF32[$8621>>2] = $8620;
  $8622 = $fSlow59;
  $8623 = (($4) + 3392|0);
  $8624 = (($8623) + 4|0);
  $8625 = +HEAPF32[$8624>>2];
  $8626 = $8622 * $8625;
  $8627 = $fSlow60;
  $8628 = (($4) + 3352|0);
  $8629 = +HEAPF32[$8628>>2];
  $8630 = (($4) + 3352|0);
  $8631 = (($8630) + 4|0);
  $8632 = +HEAPF32[$8631>>2];
  $8633 = $8629 + $8632;
  $8634 = $8627 * $8633;
  $8635 = $8626 + $8634;
  $8636 = (($4) + 3392|0);
  HEAPF32[$8636>>2] = $8635;
  $8637 = (($4) + 3392|0);
  $8638 = +HEAPF32[$8637>>2];
  $8639 = $fSlow57;
  $8640 = $fSlow63;
  $8641 = (($4) + 3400|0);
  $8642 = (($8641) + 8|0);
  $8643 = +HEAPF32[$8642>>2];
  $8644 = $8640 * $8643;
  $8645 = $fSlow36;
  $8646 = (($4) + 3400|0);
  $8647 = (($8646) + 4|0);
  $8648 = +HEAPF32[$8647>>2];
  $8649 = $8645 * $8648;
  $8650 = $8644 + $8649;
  $8651 = $8639 * $8650;
  $8652 = $8638 - $8651;
  $8653 = (($4) + 3400|0);
  HEAPF32[$8653>>2] = $8652;
  $8654 = (($4) + 3400|0);
  $8655 = (($8654) + 8|0);
  $8656 = +HEAPF32[$8655>>2];
  $8657 = (($4) + 3400|0);
  $8658 = +HEAPF32[$8657>>2];
  $8659 = (($4) + 3400|0);
  $8660 = (($8659) + 4|0);
  $8661 = +HEAPF32[$8660>>2];
  $8662 = 2.0 * $8661;
  $8663 = $8658 + $8662;
  $8664 = $8656 + $8663;
  $fTemp180 = $8664;
  $8665 = $fSlow57;
  $8666 = $fTemp180;
  $8667 = $8665 * $8666;
  $fTemp181 = $8667;
  $8668 = $fTemp181;
  $8669 = (($4) + 3412|0);
  HEAPF32[$8669>>2] = $8668;
  $8670 = $fSlow69;
  $8671 = (($4) + 3420|0);
  $8672 = (($8671) + 4|0);
  $8673 = +HEAPF32[$8672>>2];
  $8674 = $8670 * $8673;
  $8675 = $fSlow70;
  $8676 = $fSlow72;
  $8677 = $fTemp180;
  $8678 = $8676 * $8677;
  $8679 = $fSlow71;
  $8680 = (($4) + 3412|0);
  $8681 = (($8680) + 4|0);
  $8682 = +HEAPF32[$8681>>2];
  $8683 = $8679 * $8682;
  $8684 = $8678 + $8683;
  $8685 = $8675 * $8684;
  $8686 = $8674 + $8685;
  $8687 = (($4) + 3420|0);
  HEAPF32[$8687>>2] = $8686;
  $8688 = (($4) + 3420|0);
  $8689 = +HEAPF32[$8688>>2];
  $8690 = $fSlow65;
  $8691 = $fSlow73;
  $8692 = (($4) + 3428|0);
  $8693 = (($8692) + 8|0);
  $8694 = +HEAPF32[$8693>>2];
  $8695 = $8691 * $8694;
  $8696 = $fSlow41;
  $8697 = (($4) + 3428|0);
  $8698 = (($8697) + 4|0);
  $8699 = +HEAPF32[$8698>>2];
  $8700 = $8696 * $8699;
  $8701 = $8695 + $8700;
  $8702 = $8690 * $8701;
  $8703 = $8689 - $8702;
  $8704 = (($4) + 3428|0);
  HEAPF32[$8704>>2] = $8703;
  $8705 = $fSlow69;
  $8706 = (($4) + 3440|0);
  $8707 = (($8706) + 4|0);
  $8708 = +HEAPF32[$8707>>2];
  $8709 = $8705 * $8708;
  $8710 = $fSlow70;
  $8711 = (($4) + 3412|0);
  $8712 = +HEAPF32[$8711>>2];
  $8713 = (($4) + 3412|0);
  $8714 = (($8713) + 4|0);
  $8715 = +HEAPF32[$8714>>2];
  $8716 = $8712 + $8715;
  $8717 = $8710 * $8716;
  $8718 = $8709 + $8717;
  $8719 = (($4) + 3440|0);
  HEAPF32[$8719>>2] = $8718;
  $8720 = (($4) + 3440|0);
  $8721 = +HEAPF32[$8720>>2];
  $8722 = $fSlow65;
  $8723 = $fSlow73;
  $8724 = (($4) + 3448|0);
  $8725 = (($8724) + 8|0);
  $8726 = +HEAPF32[$8725>>2];
  $8727 = $8723 * $8726;
  $8728 = $fSlow41;
  $8729 = (($4) + 3448|0);
  $8730 = (($8729) + 4|0);
  $8731 = +HEAPF32[$8730>>2];
  $8732 = $8728 * $8731;
  $8733 = $8727 + $8732;
  $8734 = $8722 * $8733;
  $8735 = $8721 - $8734;
  $8736 = (($4) + 3448|0);
  HEAPF32[$8736>>2] = $8735;
  $8737 = $fSlow156;
  $8738 = (($4) + 3248|0);
  $8739 = (($8738) + 8|0);
  $8740 = +HEAPF32[$8739>>2];
  $8741 = $fSlow39;
  $8742 = $fTemp172;
  $8743 = $fSlow42;
  $8744 = (($4) + 3248|0);
  $8745 = +HEAPF32[$8744>>2];
  $8746 = $8743 * $8745;
  $8747 = $8742 + $8746;
  $8748 = $8741 * $8747;
  $8749 = $8740 + $8748;
  $8750 = $8737 * $8749;
  $8751 = $fSlow157;
  $8752 = (($4) + 3320|0);
  $8753 = (($8752) + 8|0);
  $8754 = +HEAPF32[$8753>>2];
  $8755 = $fSlow39;
  $8756 = $fTemp176;
  $8757 = $fSlow42;
  $8758 = (($4) + 3320|0);
  $8759 = +HEAPF32[$8758>>2];
  $8760 = $8757 * $8759;
  $8761 = $8756 + $8760;
  $8762 = $8755 * $8761;
  $8763 = $8754 + $8762;
  $8764 = $8751 * $8763;
  $8765 = $8750 + $8764;
  $8766 = $fSlow158;
  $8767 = (($4) + 3380|0);
  $8768 = (($8767) + 8|0);
  $8769 = +HEAPF32[$8768>>2];
  $8770 = $fSlow39;
  $8771 = $fTemp179;
  $8772 = $fSlow42;
  $8773 = (($4) + 3380|0);
  $8774 = +HEAPF32[$8773>>2];
  $8775 = $8772 * $8774;
  $8776 = $8771 + $8775;
  $8777 = $8770 * $8776;
  $8778 = $8769 + $8777;
  $8779 = $8766 * $8778;
  $8780 = $8765 + $8779;
  $8781 = $fSlow65;
  $8782 = $fSlow159;
  $8783 = $fSlow40;
  $8784 = (($4) + 3428|0);
  $8785 = +HEAPF32[$8784>>2];
  $8786 = $8783 * $8785;
  $8787 = $fSlow74;
  $8788 = (($4) + 3428|0);
  $8789 = (($8788) + 4|0);
  $8790 = +HEAPF32[$8789>>2];
  $8791 = $8787 * $8790;
  $8792 = $8786 + $8791;
  $8793 = $fSlow40;
  $8794 = (($4) + 3428|0);
  $8795 = (($8794) + 8|0);
  $8796 = +HEAPF32[$8795>>2];
  $8797 = $8793 * $8796;
  $8798 = $8792 + $8797;
  $8799 = $8782 * $8798;
  $8800 = $fSlow160;
  $8801 = (($4) + 3448|0);
  $8802 = (($8801) + 8|0);
  $8803 = +HEAPF32[$8802>>2];
  $8804 = (($4) + 3448|0);
  $8805 = +HEAPF32[$8804>>2];
  $8806 = (($4) + 3448|0);
  $8807 = (($8806) + 4|0);
  $8808 = +HEAPF32[$8807>>2];
  $8809 = 2.0 * $8808;
  $8810 = $8805 + $8809;
  $8811 = $8803 + $8810;
  $8812 = $8800 * $8811;
  $8813 = $8799 + $8812;
  $8814 = $8781 * $8813;
  $8815 = $8780 + $8814;
  $fTemp182 = $8815;
  $8816 = $fSlow19;
  $8817 = (($4) + 3460|0);
  $8818 = (($8817) + 4|0);
  $8819 = +HEAPF32[$8818>>2];
  $8820 = $8816 * $8819;
  $8821 = $fSlow20;
  $8822 = $fSlow14;
  $8823 = (($4) + 397592|0);
  $8824 = (($8823) + 4|0);
  $8825 = +HEAPF32[$8824>>2];
  $8826 = $8822 * $8825;
  $8827 = $fSlow21;
  $8828 = (($4) + 397592|0);
  $8829 = (($8828) + 8|0);
  $8830 = +HEAPF32[$8829>>2];
  $8831 = $8827 * $8830;
  $8832 = $8826 + $8831;
  $8833 = $8821 * $8832;
  $8834 = $8820 + $8833;
  $8835 = (($4) + 3460|0);
  HEAPF32[$8835>>2] = $8834;
  $8836 = (($4) + 3460|0);
  $8837 = +HEAPF32[$8836>>2];
  $8838 = $fSlow16;
  $8839 = $fSlow22;
  $8840 = (($4) + 3468|0);
  $8841 = (($8840) + 8|0);
  $8842 = +HEAPF32[$8841>>2];
  $8843 = $8839 * $8842;
  $8844 = $fSlow23;
  $8845 = (($4) + 3468|0);
  $8846 = (($8845) + 4|0);
  $8847 = +HEAPF32[$8846>>2];
  $8848 = $8844 * $8847;
  $8849 = $8843 + $8848;
  $8850 = $8838 * $8849;
  $8851 = $8837 - $8850;
  $8852 = (($4) + 3468|0);
  HEAPF32[$8852>>2] = $8851;
  $8853 = $fSlow29;
  $8854 = (($4) + 3480|0);
  $8855 = (($8854) + 4|0);
  $8856 = +HEAPF32[$8855>>2];
  $8857 = $8853 * $8856;
  $fTemp183 = $8857;
  $8858 = $fSlow16;
  $8859 = $fSlow17;
  $8860 = (($4) + 3468|0);
  $8861 = +HEAPF32[$8860>>2];
  $8862 = $8859 * $8861;
  $8863 = $fSlow24;
  $8864 = (($4) + 3468|0);
  $8865 = (($8864) + 4|0);
  $8866 = +HEAPF32[$8865>>2];
  $8867 = $8863 * $8866;
  $8868 = $8862 + $8867;
  $8869 = $fSlow17;
  $8870 = (($4) + 3468|0);
  $8871 = (($8870) + 8|0);
  $8872 = +HEAPF32[$8871>>2];
  $8873 = $8869 * $8872;
  $8874 = $8868 + $8873;
  $8875 = $8858 * $8874;
  $8876 = $fSlow27;
  $8877 = $fSlow30;
  $8878 = (($4) + 3480|0);
  $8879 = (($8878) + 8|0);
  $8880 = +HEAPF32[$8879>>2];
  $8881 = $8877 * $8880;
  $8882 = $fTemp183;
  $8883 = $8881 + $8882;
  $8884 = $8876 * $8883;
  $8885 = $8875 - $8884;
  $8886 = (($4) + 3480|0);
  HEAPF32[$8886>>2] = $8885;
  $8887 = $fSlow36;
  $8888 = (($4) + 3492|0);
  $8889 = (($8888) + 4|0);
  $8890 = +HEAPF32[$8889>>2];
  $8891 = $8887 * $8890;
  $fTemp184 = $8891;
  $8892 = (($4) + 3480|0);
  $8893 = (($8892) + 8|0);
  $8894 = +HEAPF32[$8893>>2];
  $8895 = $fSlow27;
  $8896 = $fTemp183;
  $8897 = $fSlow30;
  $8898 = (($4) + 3480|0);
  $8899 = +HEAPF32[$8898>>2];
  $8900 = $8897 * $8899;
  $8901 = $8896 + $8900;
  $8902 = $8895 * $8901;
  $8903 = $8894 + $8902;
  $8904 = $fSlow33;
  $8905 = $fSlow34;
  $8906 = (($4) + 3492|0);
  $8907 = (($8906) + 8|0);
  $8908 = +HEAPF32[$8907>>2];
  $8909 = $8905 * $8908;
  $8910 = $fTemp184;
  $8911 = $8909 + $8910;
  $8912 = $8904 * $8911;
  $8913 = $8903 - $8912;
  $8914 = (($4) + 3492|0);
  HEAPF32[$8914>>2] = $8913;
  $8915 = $fSlow41;
  $8916 = (($4) + 3504|0);
  $8917 = (($8916) + 4|0);
  $8918 = +HEAPF32[$8917>>2];
  $8919 = $8915 * $8918;
  $fTemp185 = $8919;
  $8920 = (($4) + 3492|0);
  $8921 = (($8920) + 8|0);
  $8922 = +HEAPF32[$8921>>2];
  $8923 = $fSlow33;
  $8924 = $fTemp184;
  $8925 = $fSlow34;
  $8926 = (($4) + 3492|0);
  $8927 = +HEAPF32[$8926>>2];
  $8928 = $8925 * $8927;
  $8929 = $8924 + $8928;
  $8930 = $8923 * $8929;
  $8931 = $8922 + $8930;
  $8932 = $fSlow39;
  $8933 = $fSlow42;
  $8934 = (($4) + 3504|0);
  $8935 = (($8934) + 8|0);
  $8936 = +HEAPF32[$8935>>2];
  $8937 = $8933 * $8936;
  $8938 = $fTemp185;
  $8939 = $8937 + $8938;
  $8940 = $8932 * $8939;
  $8941 = $8931 - $8940;
  $8942 = (($4) + 3504|0);
  HEAPF32[$8942>>2] = $8941;
  $8943 = $fSlow19;
  $8944 = (($4) + 3516|0);
  $8945 = (($8944) + 4|0);
  $8946 = +HEAPF32[$8945>>2];
  $8947 = $8943 * $8946;
  $8948 = $fSlow20;
  $8949 = (($4) + 397592|0);
  $8950 = (($8949) + 4|0);
  $8951 = +HEAPF32[$8950>>2];
  $8952 = (($4) + 397592|0);
  $8953 = (($8952) + 8|0);
  $8954 = +HEAPF32[$8953>>2];
  $8955 = $8951 + $8954;
  $8956 = $8948 * $8955;
  $8957 = $8947 + $8956;
  $8958 = (($4) + 3516|0);
  HEAPF32[$8958>>2] = $8957;
  $8959 = (($4) + 3516|0);
  $8960 = +HEAPF32[$8959>>2];
  $8961 = $fSlow16;
  $8962 = $fSlow22;
  $8963 = (($4) + 3524|0);
  $8964 = (($8963) + 8|0);
  $8965 = +HEAPF32[$8964>>2];
  $8966 = $8962 * $8965;
  $8967 = $fSlow23;
  $8968 = (($4) + 3524|0);
  $8969 = (($8968) + 4|0);
  $8970 = +HEAPF32[$8969>>2];
  $8971 = $8967 * $8970;
  $8972 = $8966 + $8971;
  $8973 = $8961 * $8972;
  $8974 = $8960 - $8973;
  $8975 = (($4) + 3524|0);
  HEAPF32[$8975>>2] = $8974;
  $8976 = (($4) + 3524|0);
  $8977 = (($8976) + 8|0);
  $8978 = +HEAPF32[$8977>>2];
  $8979 = (($4) + 3524|0);
  $8980 = +HEAPF32[$8979>>2];
  $8981 = (($4) + 3524|0);
  $8982 = (($8981) + 4|0);
  $8983 = +HEAPF32[$8982>>2];
  $8984 = 2.0 * $8983;
  $8985 = $8980 + $8984;
  $8986 = $8978 + $8985;
  $fTemp186 = $8986;
  $8987 = $fSlow16;
  $8988 = $fTemp186;
  $8989 = $8987 * $8988;
  $fTemp187 = $8989;
  $8990 = $fTemp187;
  $8991 = (($4) + 3536|0);
  HEAPF32[$8991>>2] = $8990;
  $8992 = $fSlow48;
  $8993 = (($4) + 3544|0);
  $8994 = (($8993) + 4|0);
  $8995 = +HEAPF32[$8994>>2];
  $8996 = $8992 * $8995;
  $8997 = $fSlow49;
  $8998 = $fSlow50;
  $8999 = (($4) + 3536|0);
  $9000 = (($8999) + 4|0);
  $9001 = +HEAPF32[$9000>>2];
  $9002 = $8998 * $9001;
  $9003 = $fSlow51;
  $9004 = $fTemp186;
  $9005 = $9003 * $9004;
  $9006 = $9002 + $9005;
  $9007 = $8997 * $9006;
  $9008 = $8996 + $9007;
  $9009 = (($4) + 3544|0);
  HEAPF32[$9009>>2] = $9008;
  $9010 = (($4) + 3544|0);
  $9011 = +HEAPF32[$9010>>2];
  $9012 = $fSlow46;
  $9013 = $fSlow52;
  $9014 = (($4) + 3552|0);
  $9015 = (($9014) + 8|0);
  $9016 = +HEAPF32[$9015>>2];
  $9017 = $9013 * $9016;
  $9018 = $fSlow29;
  $9019 = (($4) + 3552|0);
  $9020 = (($9019) + 4|0);
  $9021 = +HEAPF32[$9020>>2];
  $9022 = $9018 * $9021;
  $9023 = $9017 + $9022;
  $9024 = $9012 * $9023;
  $9025 = $9011 - $9024;
  $9026 = (($4) + 3552|0);
  HEAPF32[$9026>>2] = $9025;
  $9027 = $fSlow36;
  $9028 = (($4) + 3564|0);
  $9029 = (($9028) + 4|0);
  $9030 = +HEAPF32[$9029>>2];
  $9031 = $9027 * $9030;
  $fTemp188 = $9031;
  $9032 = $fSlow46;
  $9033 = $fSlow28;
  $9034 = (($4) + 3552|0);
  $9035 = +HEAPF32[$9034>>2];
  $9036 = $9033 * $9035;
  $9037 = $fSlow53;
  $9038 = (($4) + 3552|0);
  $9039 = (($9038) + 4|0);
  $9040 = +HEAPF32[$9039>>2];
  $9041 = $9037 * $9040;
  $9042 = $9036 + $9041;
  $9043 = $fSlow28;
  $9044 = (($4) + 3552|0);
  $9045 = (($9044) + 8|0);
  $9046 = +HEAPF32[$9045>>2];
  $9047 = $9043 * $9046;
  $9048 = $9042 + $9047;
  $9049 = $9032 * $9048;
  $9050 = $fSlow33;
  $9051 = $fSlow34;
  $9052 = (($4) + 3564|0);
  $9053 = (($9052) + 8|0);
  $9054 = +HEAPF32[$9053>>2];
  $9055 = $9051 * $9054;
  $9056 = $fTemp188;
  $9057 = $9055 + $9056;
  $9058 = $9050 * $9057;
  $9059 = $9049 - $9058;
  $9060 = (($4) + 3564|0);
  HEAPF32[$9060>>2] = $9059;
  $9061 = $fSlow41;
  $9062 = (($4) + 3576|0);
  $9063 = (($9062) + 4|0);
  $9064 = +HEAPF32[$9063>>2];
  $9065 = $9061 * $9064;
  $fTemp189 = $9065;
  $9066 = (($4) + 3564|0);
  $9067 = (($9066) + 8|0);
  $9068 = +HEAPF32[$9067>>2];
  $9069 = $fSlow33;
  $9070 = $fTemp188;
  $9071 = $fSlow34;
  $9072 = (($4) + 3564|0);
  $9073 = +HEAPF32[$9072>>2];
  $9074 = $9071 * $9073;
  $9075 = $9070 + $9074;
  $9076 = $9069 * $9075;
  $9077 = $9068 + $9076;
  $9078 = $fSlow39;
  $9079 = $fSlow42;
  $9080 = (($4) + 3576|0);
  $9081 = (($9080) + 8|0);
  $9082 = +HEAPF32[$9081>>2];
  $9083 = $9079 * $9082;
  $9084 = $fTemp189;
  $9085 = $9083 + $9084;
  $9086 = $9078 * $9085;
  $9087 = $9077 - $9086;
  $9088 = (($4) + 3576|0);
  HEAPF32[$9088>>2] = $9087;
  $9089 = $fSlow48;
  $9090 = (($4) + 3588|0);
  $9091 = (($9090) + 4|0);
  $9092 = +HEAPF32[$9091>>2];
  $9093 = $9089 * $9092;
  $9094 = $fSlow49;
  $9095 = (($4) + 3536|0);
  $9096 = +HEAPF32[$9095>>2];
  $9097 = (($4) + 3536|0);
  $9098 = (($9097) + 4|0);
  $9099 = +HEAPF32[$9098>>2];
  $9100 = $9096 + $9099;
  $9101 = $9094 * $9100;
  $9102 = $9093 + $9101;
  $9103 = (($4) + 3588|0);
  HEAPF32[$9103>>2] = $9102;
  $9104 = (($4) + 3588|0);
  $9105 = +HEAPF32[$9104>>2];
  $9106 = $fSlow46;
  $9107 = $fSlow52;
  $9108 = (($4) + 3596|0);
  $9109 = (($9108) + 8|0);
  $9110 = +HEAPF32[$9109>>2];
  $9111 = $9107 * $9110;
  $9112 = $fSlow29;
  $9113 = (($4) + 3596|0);
  $9114 = (($9113) + 4|0);
  $9115 = +HEAPF32[$9114>>2];
  $9116 = $9112 * $9115;
  $9117 = $9111 + $9116;
  $9118 = $9106 * $9117;
  $9119 = $9105 - $9118;
  $9120 = (($4) + 3596|0);
  HEAPF32[$9120>>2] = $9119;
  $9121 = (($4) + 3596|0);
  $9122 = (($9121) + 8|0);
  $9123 = +HEAPF32[$9122>>2];
  $9124 = (($4) + 3596|0);
  $9125 = +HEAPF32[$9124>>2];
  $9126 = (($4) + 3596|0);
  $9127 = (($9126) + 4|0);
  $9128 = +HEAPF32[$9127>>2];
  $9129 = 2.0 * $9128;
  $9130 = $9125 + $9129;
  $9131 = $9123 + $9130;
  $fTemp190 = $9131;
  $9132 = $fSlow46;
  $9133 = $fTemp190;
  $9134 = $9132 * $9133;
  $fTemp191 = $9134;
  $9135 = $fTemp191;
  $9136 = (($4) + 3608|0);
  HEAPF32[$9136>>2] = $9135;
  $9137 = $fSlow59;
  $9138 = (($4) + 3616|0);
  $9139 = (($9138) + 4|0);
  $9140 = +HEAPF32[$9139>>2];
  $9141 = $9137 * $9140;
  $9142 = $fSlow60;
  $9143 = $fSlow61;
  $9144 = (($4) + 3608|0);
  $9145 = (($9144) + 4|0);
  $9146 = +HEAPF32[$9145>>2];
  $9147 = $9143 * $9146;
  $9148 = $fSlow62;
  $9149 = $fTemp190;
  $9150 = $9148 * $9149;
  $9151 = $9147 + $9150;
  $9152 = $9142 * $9151;
  $9153 = $9141 + $9152;
  $9154 = (($4) + 3616|0);
  HEAPF32[$9154>>2] = $9153;
  $9155 = (($4) + 3616|0);
  $9156 = +HEAPF32[$9155>>2];
  $9157 = $fSlow57;
  $9158 = $fSlow63;
  $9159 = (($4) + 3624|0);
  $9160 = (($9159) + 8|0);
  $9161 = +HEAPF32[$9160>>2];
  $9162 = $9158 * $9161;
  $9163 = $fSlow36;
  $9164 = (($4) + 3624|0);
  $9165 = (($9164) + 4|0);
  $9166 = +HEAPF32[$9165>>2];
  $9167 = $9163 * $9166;
  $9168 = $9162 + $9167;
  $9169 = $9157 * $9168;
  $9170 = $9156 - $9169;
  $9171 = (($4) + 3624|0);
  HEAPF32[$9171>>2] = $9170;
  $9172 = $fSlow41;
  $9173 = (($4) + 3636|0);
  $9174 = (($9173) + 4|0);
  $9175 = +HEAPF32[$9174>>2];
  $9176 = $9172 * $9175;
  $fTemp192 = $9176;
  $9177 = $fSlow57;
  $9178 = $fSlow35;
  $9179 = (($4) + 3624|0);
  $9180 = +HEAPF32[$9179>>2];
  $9181 = $9178 * $9180;
  $9182 = $fSlow64;
  $9183 = (($4) + 3624|0);
  $9184 = (($9183) + 4|0);
  $9185 = +HEAPF32[$9184>>2];
  $9186 = $9182 * $9185;
  $9187 = $9181 + $9186;
  $9188 = $fSlow35;
  $9189 = (($4) + 3624|0);
  $9190 = (($9189) + 8|0);
  $9191 = +HEAPF32[$9190>>2];
  $9192 = $9188 * $9191;
  $9193 = $9187 + $9192;
  $9194 = $9177 * $9193;
  $9195 = $fSlow39;
  $9196 = $fSlow42;
  $9197 = (($4) + 3636|0);
  $9198 = (($9197) + 8|0);
  $9199 = +HEAPF32[$9198>>2];
  $9200 = $9196 * $9199;
  $9201 = $fTemp192;
  $9202 = $9200 + $9201;
  $9203 = $9195 * $9202;
  $9204 = $9194 - $9203;
  $9205 = (($4) + 3636|0);
  HEAPF32[$9205>>2] = $9204;
  $9206 = $fSlow59;
  $9207 = (($4) + 3648|0);
  $9208 = (($9207) + 4|0);
  $9209 = +HEAPF32[$9208>>2];
  $9210 = $9206 * $9209;
  $9211 = $fSlow60;
  $9212 = (($4) + 3608|0);
  $9213 = +HEAPF32[$9212>>2];
  $9214 = (($4) + 3608|0);
  $9215 = (($9214) + 4|0);
  $9216 = +HEAPF32[$9215>>2];
  $9217 = $9213 + $9216;
  $9218 = $9211 * $9217;
  $9219 = $9210 + $9218;
  $9220 = (($4) + 3648|0);
  HEAPF32[$9220>>2] = $9219;
  $9221 = (($4) + 3648|0);
  $9222 = +HEAPF32[$9221>>2];
  $9223 = $fSlow57;
  $9224 = $fSlow63;
  $9225 = (($4) + 3656|0);
  $9226 = (($9225) + 8|0);
  $9227 = +HEAPF32[$9226>>2];
  $9228 = $9224 * $9227;
  $9229 = $fSlow36;
  $9230 = (($4) + 3656|0);
  $9231 = (($9230) + 4|0);
  $9232 = +HEAPF32[$9231>>2];
  $9233 = $9229 * $9232;
  $9234 = $9228 + $9233;
  $9235 = $9223 * $9234;
  $9236 = $9222 - $9235;
  $9237 = (($4) + 3656|0);
  HEAPF32[$9237>>2] = $9236;
  $9238 = (($4) + 3656|0);
  $9239 = (($9238) + 8|0);
  $9240 = +HEAPF32[$9239>>2];
  $9241 = (($4) + 3656|0);
  $9242 = +HEAPF32[$9241>>2];
  $9243 = (($4) + 3656|0);
  $9244 = (($9243) + 4|0);
  $9245 = +HEAPF32[$9244>>2];
  $9246 = 2.0 * $9245;
  $9247 = $9242 + $9246;
  $9248 = $9240 + $9247;
  $fTemp193 = $9248;
  $9249 = $fSlow57;
  $9250 = $fTemp193;
  $9251 = $9249 * $9250;
  $fTemp194 = $9251;
  $9252 = $fTemp194;
  $9253 = (($4) + 3668|0);
  HEAPF32[$9253>>2] = $9252;
  $9254 = $fSlow69;
  $9255 = (($4) + 3676|0);
  $9256 = (($9255) + 4|0);
  $9257 = +HEAPF32[$9256>>2];
  $9258 = $9254 * $9257;
  $9259 = $fSlow70;
  $9260 = $fSlow72;
  $9261 = $fTemp193;
  $9262 = $9260 * $9261;
  $9263 = $fSlow71;
  $9264 = (($4) + 3668|0);
  $9265 = (($9264) + 4|0);
  $9266 = +HEAPF32[$9265>>2];
  $9267 = $9263 * $9266;
  $9268 = $9262 + $9267;
  $9269 = $9259 * $9268;
  $9270 = $9258 + $9269;
  $9271 = (($4) + 3676|0);
  HEAPF32[$9271>>2] = $9270;
  $9272 = (($4) + 3676|0);
  $9273 = +HEAPF32[$9272>>2];
  $9274 = $fSlow65;
  $9275 = $fSlow73;
  $9276 = (($4) + 3684|0);
  $9277 = (($9276) + 8|0);
  $9278 = +HEAPF32[$9277>>2];
  $9279 = $9275 * $9278;
  $9280 = $fSlow41;
  $9281 = (($4) + 3684|0);
  $9282 = (($9281) + 4|0);
  $9283 = +HEAPF32[$9282>>2];
  $9284 = $9280 * $9283;
  $9285 = $9279 + $9284;
  $9286 = $9274 * $9285;
  $9287 = $9273 - $9286;
  $9288 = (($4) + 3684|0);
  HEAPF32[$9288>>2] = $9287;
  $9289 = $fSlow69;
  $9290 = (($4) + 3696|0);
  $9291 = (($9290) + 4|0);
  $9292 = +HEAPF32[$9291>>2];
  $9293 = $9289 * $9292;
  $9294 = $fSlow70;
  $9295 = (($4) + 3668|0);
  $9296 = +HEAPF32[$9295>>2];
  $9297 = (($4) + 3668|0);
  $9298 = (($9297) + 4|0);
  $9299 = +HEAPF32[$9298>>2];
  $9300 = $9296 + $9299;
  $9301 = $9294 * $9300;
  $9302 = $9293 + $9301;
  $9303 = (($4) + 3696|0);
  HEAPF32[$9303>>2] = $9302;
  $9304 = (($4) + 3696|0);
  $9305 = +HEAPF32[$9304>>2];
  $9306 = $fSlow65;
  $9307 = $fSlow73;
  $9308 = (($4) + 3704|0);
  $9309 = (($9308) + 8|0);
  $9310 = +HEAPF32[$9309>>2];
  $9311 = $9307 * $9310;
  $9312 = $fSlow41;
  $9313 = (($4) + 3704|0);
  $9314 = (($9313) + 4|0);
  $9315 = +HEAPF32[$9314>>2];
  $9316 = $9312 * $9315;
  $9317 = $9311 + $9316;
  $9318 = $9306 * $9317;
  $9319 = $9305 - $9318;
  $9320 = (($4) + 3704|0);
  HEAPF32[$9320>>2] = $9319;
  $9321 = $fSlow163;
  $9322 = (($4) + 3504|0);
  $9323 = (($9322) + 8|0);
  $9324 = +HEAPF32[$9323>>2];
  $9325 = $fSlow39;
  $9326 = $fTemp185;
  $9327 = $fSlow42;
  $9328 = (($4) + 3504|0);
  $9329 = +HEAPF32[$9328>>2];
  $9330 = $9327 * $9329;
  $9331 = $9326 + $9330;
  $9332 = $9325 * $9331;
  $9333 = $9324 + $9332;
  $9334 = $9321 * $9333;
  $9335 = $fSlow164;
  $9336 = (($4) + 3576|0);
  $9337 = (($9336) + 8|0);
  $9338 = +HEAPF32[$9337>>2];
  $9339 = $fSlow39;
  $9340 = $fTemp189;
  $9341 = $fSlow42;
  $9342 = (($4) + 3576|0);
  $9343 = +HEAPF32[$9342>>2];
  $9344 = $9341 * $9343;
  $9345 = $9340 + $9344;
  $9346 = $9339 * $9345;
  $9347 = $9338 + $9346;
  $9348 = $9335 * $9347;
  $9349 = $9334 + $9348;
  $9350 = $fSlow165;
  $9351 = (($4) + 3636|0);
  $9352 = (($9351) + 8|0);
  $9353 = +HEAPF32[$9352>>2];
  $9354 = $fSlow39;
  $9355 = $fTemp192;
  $9356 = $fSlow42;
  $9357 = (($4) + 3636|0);
  $9358 = +HEAPF32[$9357>>2];
  $9359 = $9356 * $9358;
  $9360 = $9355 + $9359;
  $9361 = $9354 * $9360;
  $9362 = $9353 + $9361;
  $9363 = $9350 * $9362;
  $9364 = $9349 + $9363;
  $9365 = $fSlow65;
  $9366 = $fSlow166;
  $9367 = $fSlow40;
  $9368 = (($4) + 3684|0);
  $9369 = +HEAPF32[$9368>>2];
  $9370 = $9367 * $9369;
  $9371 = $fSlow74;
  $9372 = (($4) + 3684|0);
  $9373 = (($9372) + 4|0);
  $9374 = +HEAPF32[$9373>>2];
  $9375 = $9371 * $9374;
  $9376 = $9370 + $9375;
  $9377 = $fSlow40;
  $9378 = (($4) + 3684|0);
  $9379 = (($9378) + 8|0);
  $9380 = +HEAPF32[$9379>>2];
  $9381 = $9377 * $9380;
  $9382 = $9376 + $9381;
  $9383 = $9366 * $9382;
  $9384 = $fSlow167;
  $9385 = (($4) + 3704|0);
  $9386 = (($9385) + 8|0);
  $9387 = +HEAPF32[$9386>>2];
  $9388 = (($4) + 3704|0);
  $9389 = +HEAPF32[$9388>>2];
  $9390 = (($4) + 3704|0);
  $9391 = (($9390) + 4|0);
  $9392 = +HEAPF32[$9391>>2];
  $9393 = 2.0 * $9392;
  $9394 = $9389 + $9393;
  $9395 = $9387 + $9394;
  $9396 = $9384 * $9395;
  $9397 = $9383 + $9396;
  $9398 = $9365 * $9397;
  $9399 = $9364 + $9398;
  $fTemp195 = $9399;
  $9400 = $fTemp182;
  $9401 = $fTemp195;
  $9402 = $9400 + $9401;
  $fTemp196 = $9402;
  $9403 = $fSlow19;
  $9404 = (($4) + 3716|0);
  $9405 = (($9404) + 4|0);
  $9406 = +HEAPF32[$9405>>2];
  $9407 = $9403 * $9406;
  $9408 = $fSlow20;
  $9409 = $fSlow14;
  $9410 = (($4) + 266472|0);
  $9411 = (($9410) + 4|0);
  $9412 = +HEAPF32[$9411>>2];
  $9413 = $9409 * $9412;
  $9414 = $fSlow21;
  $9415 = (($4) + 266472|0);
  $9416 = (($9415) + 8|0);
  $9417 = +HEAPF32[$9416>>2];
  $9418 = $9414 * $9417;
  $9419 = $9413 + $9418;
  $9420 = $9408 * $9419;
  $9421 = $9407 + $9420;
  $9422 = (($4) + 3716|0);
  HEAPF32[$9422>>2] = $9421;
  $9423 = (($4) + 3716|0);
  $9424 = +HEAPF32[$9423>>2];
  $9425 = $fSlow16;
  $9426 = $fSlow22;
  $9427 = (($4) + 3724|0);
  $9428 = (($9427) + 8|0);
  $9429 = +HEAPF32[$9428>>2];
  $9430 = $9426 * $9429;
  $9431 = $fSlow23;
  $9432 = (($4) + 3724|0);
  $9433 = (($9432) + 4|0);
  $9434 = +HEAPF32[$9433>>2];
  $9435 = $9431 * $9434;
  $9436 = $9430 + $9435;
  $9437 = $9425 * $9436;
  $9438 = $9424 - $9437;
  $9439 = (($4) + 3724|0);
  HEAPF32[$9439>>2] = $9438;
  $9440 = $fSlow29;
  $9441 = (($4) + 3736|0);
  $9442 = (($9441) + 4|0);
  $9443 = +HEAPF32[$9442>>2];
  $9444 = $9440 * $9443;
  $fTemp197 = $9444;
  $9445 = $fSlow16;
  $9446 = $fSlow17;
  $9447 = (($4) + 3724|0);
  $9448 = +HEAPF32[$9447>>2];
  $9449 = $9446 * $9448;
  $9450 = $fSlow24;
  $9451 = (($4) + 3724|0);
  $9452 = (($9451) + 4|0);
  $9453 = +HEAPF32[$9452>>2];
  $9454 = $9450 * $9453;
  $9455 = $9449 + $9454;
  $9456 = $fSlow17;
  $9457 = (($4) + 3724|0);
  $9458 = (($9457) + 8|0);
  $9459 = +HEAPF32[$9458>>2];
  $9460 = $9456 * $9459;
  $9461 = $9455 + $9460;
  $9462 = $9445 * $9461;
  $9463 = $fSlow27;
  $9464 = $fSlow30;
  $9465 = (($4) + 3736|0);
  $9466 = (($9465) + 8|0);
  $9467 = +HEAPF32[$9466>>2];
  $9468 = $9464 * $9467;
  $9469 = $fTemp197;
  $9470 = $9468 + $9469;
  $9471 = $9463 * $9470;
  $9472 = $9462 - $9471;
  $9473 = (($4) + 3736|0);
  HEAPF32[$9473>>2] = $9472;
  $9474 = $fSlow36;
  $9475 = (($4) + 3748|0);
  $9476 = (($9475) + 4|0);
  $9477 = +HEAPF32[$9476>>2];
  $9478 = $9474 * $9477;
  $fTemp198 = $9478;
  $9479 = (($4) + 3736|0);
  $9480 = (($9479) + 8|0);
  $9481 = +HEAPF32[$9480>>2];
  $9482 = $fSlow27;
  $9483 = $fTemp197;
  $9484 = $fSlow30;
  $9485 = (($4) + 3736|0);
  $9486 = +HEAPF32[$9485>>2];
  $9487 = $9484 * $9486;
  $9488 = $9483 + $9487;
  $9489 = $9482 * $9488;
  $9490 = $9481 + $9489;
  $9491 = $fSlow33;
  $9492 = $fSlow34;
  $9493 = (($4) + 3748|0);
  $9494 = (($9493) + 8|0);
  $9495 = +HEAPF32[$9494>>2];
  $9496 = $9492 * $9495;
  $9497 = $fTemp198;
  $9498 = $9496 + $9497;
  $9499 = $9491 * $9498;
  $9500 = $9490 - $9499;
  $9501 = (($4) + 3748|0);
  HEAPF32[$9501>>2] = $9500;
  $9502 = $fSlow41;
  $9503 = (($4) + 3760|0);
  $9504 = (($9503) + 4|0);
  $9505 = +HEAPF32[$9504>>2];
  $9506 = $9502 * $9505;
  $fTemp199 = $9506;
  $9507 = (($4) + 3748|0);
  $9508 = (($9507) + 8|0);
  $9509 = +HEAPF32[$9508>>2];
  $9510 = $fSlow33;
  $9511 = $fTemp198;
  $9512 = $fSlow34;
  $9513 = (($4) + 3748|0);
  $9514 = +HEAPF32[$9513>>2];
  $9515 = $9512 * $9514;
  $9516 = $9511 + $9515;
  $9517 = $9510 * $9516;
  $9518 = $9509 + $9517;
  $9519 = $fSlow39;
  $9520 = $fSlow42;
  $9521 = (($4) + 3760|0);
  $9522 = (($9521) + 8|0);
  $9523 = +HEAPF32[$9522>>2];
  $9524 = $9520 * $9523;
  $9525 = $fTemp199;
  $9526 = $9524 + $9525;
  $9527 = $9519 * $9526;
  $9528 = $9518 - $9527;
  $9529 = (($4) + 3760|0);
  HEAPF32[$9529>>2] = $9528;
  $9530 = $fSlow19;
  $9531 = (($4) + 3772|0);
  $9532 = (($9531) + 4|0);
  $9533 = +HEAPF32[$9532>>2];
  $9534 = $9530 * $9533;
  $9535 = $fSlow20;
  $9536 = (($4) + 266472|0);
  $9537 = (($9536) + 4|0);
  $9538 = +HEAPF32[$9537>>2];
  $9539 = (($4) + 266472|0);
  $9540 = (($9539) + 8|0);
  $9541 = +HEAPF32[$9540>>2];
  $9542 = $9538 + $9541;
  $9543 = $9535 * $9542;
  $9544 = $9534 + $9543;
  $9545 = (($4) + 3772|0);
  HEAPF32[$9545>>2] = $9544;
  $9546 = (($4) + 3772|0);
  $9547 = +HEAPF32[$9546>>2];
  $9548 = $fSlow16;
  $9549 = $fSlow22;
  $9550 = (($4) + 3780|0);
  $9551 = (($9550) + 8|0);
  $9552 = +HEAPF32[$9551>>2];
  $9553 = $9549 * $9552;
  $9554 = $fSlow23;
  $9555 = (($4) + 3780|0);
  $9556 = (($9555) + 4|0);
  $9557 = +HEAPF32[$9556>>2];
  $9558 = $9554 * $9557;
  $9559 = $9553 + $9558;
  $9560 = $9548 * $9559;
  $9561 = $9547 - $9560;
  $9562 = (($4) + 3780|0);
  HEAPF32[$9562>>2] = $9561;
  $9563 = (($4) + 3780|0);
  $9564 = (($9563) + 8|0);
  $9565 = +HEAPF32[$9564>>2];
  $9566 = (($4) + 3780|0);
  $9567 = +HEAPF32[$9566>>2];
  $9568 = (($4) + 3780|0);
  $9569 = (($9568) + 4|0);
  $9570 = +HEAPF32[$9569>>2];
  $9571 = 2.0 * $9570;
  $9572 = $9567 + $9571;
  $9573 = $9565 + $9572;
  $fTemp200 = $9573;
  $9574 = $fSlow16;
  $9575 = $fTemp200;
  $9576 = $9574 * $9575;
  $fTemp201 = $9576;
  $9577 = $fTemp201;
  $9578 = (($4) + 3792|0);
  HEAPF32[$9578>>2] = $9577;
  $9579 = $fSlow48;
  $9580 = (($4) + 3800|0);
  $9581 = (($9580) + 4|0);
  $9582 = +HEAPF32[$9581>>2];
  $9583 = $9579 * $9582;
  $9584 = $fSlow49;
  $9585 = $fSlow51;
  $9586 = $fTemp200;
  $9587 = $9585 * $9586;
  $9588 = $fSlow50;
  $9589 = (($4) + 3792|0);
  $9590 = (($9589) + 4|0);
  $9591 = +HEAPF32[$9590>>2];
  $9592 = $9588 * $9591;
  $9593 = $9587 + $9592;
  $9594 = $9584 * $9593;
  $9595 = $9583 + $9594;
  $9596 = (($4) + 3800|0);
  HEAPF32[$9596>>2] = $9595;
  $9597 = (($4) + 3800|0);
  $9598 = +HEAPF32[$9597>>2];
  $9599 = $fSlow46;
  $9600 = $fSlow52;
  $9601 = (($4) + 3808|0);
  $9602 = (($9601) + 8|0);
  $9603 = +HEAPF32[$9602>>2];
  $9604 = $9600 * $9603;
  $9605 = $fSlow29;
  $9606 = (($4) + 3808|0);
  $9607 = (($9606) + 4|0);
  $9608 = +HEAPF32[$9607>>2];
  $9609 = $9605 * $9608;
  $9610 = $9604 + $9609;
  $9611 = $9599 * $9610;
  $9612 = $9598 - $9611;
  $9613 = (($4) + 3808|0);
  HEAPF32[$9613>>2] = $9612;
  $9614 = $fSlow36;
  $9615 = (($4) + 3820|0);
  $9616 = (($9615) + 4|0);
  $9617 = +HEAPF32[$9616>>2];
  $9618 = $9614 * $9617;
  $fTemp202 = $9618;
  $9619 = $fSlow46;
  $9620 = $fSlow28;
  $9621 = (($4) + 3808|0);
  $9622 = +HEAPF32[$9621>>2];
  $9623 = $9620 * $9622;
  $9624 = $fSlow53;
  $9625 = (($4) + 3808|0);
  $9626 = (($9625) + 4|0);
  $9627 = +HEAPF32[$9626>>2];
  $9628 = $9624 * $9627;
  $9629 = $9623 + $9628;
  $9630 = $fSlow28;
  $9631 = (($4) + 3808|0);
  $9632 = (($9631) + 8|0);
  $9633 = +HEAPF32[$9632>>2];
  $9634 = $9630 * $9633;
  $9635 = $9629 + $9634;
  $9636 = $9619 * $9635;
  $9637 = $fSlow33;
  $9638 = $fSlow34;
  $9639 = (($4) + 3820|0);
  $9640 = (($9639) + 8|0);
  $9641 = +HEAPF32[$9640>>2];
  $9642 = $9638 * $9641;
  $9643 = $fTemp202;
  $9644 = $9642 + $9643;
  $9645 = $9637 * $9644;
  $9646 = $9636 - $9645;
  $9647 = (($4) + 3820|0);
  HEAPF32[$9647>>2] = $9646;
  $9648 = $fSlow41;
  $9649 = (($4) + 3832|0);
  $9650 = (($9649) + 4|0);
  $9651 = +HEAPF32[$9650>>2];
  $9652 = $9648 * $9651;
  $fTemp203 = $9652;
  $9653 = (($4) + 3820|0);
  $9654 = (($9653) + 8|0);
  $9655 = +HEAPF32[$9654>>2];
  $9656 = $fSlow33;
  $9657 = $fTemp202;
  $9658 = $fSlow34;
  $9659 = (($4) + 3820|0);
  $9660 = +HEAPF32[$9659>>2];
  $9661 = $9658 * $9660;
  $9662 = $9657 + $9661;
  $9663 = $9656 * $9662;
  $9664 = $9655 + $9663;
  $9665 = $fSlow39;
  $9666 = $fSlow42;
  $9667 = (($4) + 3832|0);
  $9668 = (($9667) + 8|0);
  $9669 = +HEAPF32[$9668>>2];
  $9670 = $9666 * $9669;
  $9671 = $fTemp203;
  $9672 = $9670 + $9671;
  $9673 = $9665 * $9672;
  $9674 = $9664 - $9673;
  $9675 = (($4) + 3832|0);
  HEAPF32[$9675>>2] = $9674;
  $9676 = $fSlow48;
  $9677 = (($4) + 3844|0);
  $9678 = (($9677) + 4|0);
  $9679 = +HEAPF32[$9678>>2];
  $9680 = $9676 * $9679;
  $9681 = $fSlow49;
  $9682 = (($4) + 3792|0);
  $9683 = +HEAPF32[$9682>>2];
  $9684 = (($4) + 3792|0);
  $9685 = (($9684) + 4|0);
  $9686 = +HEAPF32[$9685>>2];
  $9687 = $9683 + $9686;
  $9688 = $9681 * $9687;
  $9689 = $9680 + $9688;
  $9690 = (($4) + 3844|0);
  HEAPF32[$9690>>2] = $9689;
  $9691 = (($4) + 3844|0);
  $9692 = +HEAPF32[$9691>>2];
  $9693 = $fSlow46;
  $9694 = $fSlow52;
  $9695 = (($4) + 3852|0);
  $9696 = (($9695) + 8|0);
  $9697 = +HEAPF32[$9696>>2];
  $9698 = $9694 * $9697;
  $9699 = $fSlow29;
  $9700 = (($4) + 3852|0);
  $9701 = (($9700) + 4|0);
  $9702 = +HEAPF32[$9701>>2];
  $9703 = $9699 * $9702;
  $9704 = $9698 + $9703;
  $9705 = $9693 * $9704;
  $9706 = $9692 - $9705;
  $9707 = (($4) + 3852|0);
  HEAPF32[$9707>>2] = $9706;
  $9708 = (($4) + 3852|0);
  $9709 = (($9708) + 8|0);
  $9710 = +HEAPF32[$9709>>2];
  $9711 = (($4) + 3852|0);
  $9712 = +HEAPF32[$9711>>2];
  $9713 = (($4) + 3852|0);
  $9714 = (($9713) + 4|0);
  $9715 = +HEAPF32[$9714>>2];
  $9716 = 2.0 * $9715;
  $9717 = $9712 + $9716;
  $9718 = $9710 + $9717;
  $fTemp204 = $9718;
  $9719 = $fSlow46;
  $9720 = $fTemp204;
  $9721 = $9719 * $9720;
  $fTemp205 = $9721;
  $9722 = $fTemp205;
  $9723 = (($4) + 3864|0);
  HEAPF32[$9723>>2] = $9722;
  $9724 = $fSlow59;
  $9725 = (($4) + 3872|0);
  $9726 = (($9725) + 4|0);
  $9727 = +HEAPF32[$9726>>2];
  $9728 = $9724 * $9727;
  $9729 = $fSlow60;
  $9730 = $fSlow62;
  $9731 = $fTemp204;
  $9732 = $9730 * $9731;
  $9733 = $fSlow61;
  $9734 = (($4) + 3864|0);
  $9735 = (($9734) + 4|0);
  $9736 = +HEAPF32[$9735>>2];
  $9737 = $9733 * $9736;
  $9738 = $9732 + $9737;
  $9739 = $9729 * $9738;
  $9740 = $9728 + $9739;
  $9741 = (($4) + 3872|0);
  HEAPF32[$9741>>2] = $9740;
  $9742 = (($4) + 3872|0);
  $9743 = +HEAPF32[$9742>>2];
  $9744 = $fSlow57;
  $9745 = $fSlow63;
  $9746 = (($4) + 3880|0);
  $9747 = (($9746) + 8|0);
  $9748 = +HEAPF32[$9747>>2];
  $9749 = $9745 * $9748;
  $9750 = $fSlow36;
  $9751 = (($4) + 3880|0);
  $9752 = (($9751) + 4|0);
  $9753 = +HEAPF32[$9752>>2];
  $9754 = $9750 * $9753;
  $9755 = $9749 + $9754;
  $9756 = $9744 * $9755;
  $9757 = $9743 - $9756;
  $9758 = (($4) + 3880|0);
  HEAPF32[$9758>>2] = $9757;
  $9759 = $fSlow41;
  $9760 = (($4) + 3892|0);
  $9761 = (($9760) + 4|0);
  $9762 = +HEAPF32[$9761>>2];
  $9763 = $9759 * $9762;
  $fTemp206 = $9763;
  $9764 = $fSlow57;
  $9765 = $fSlow35;
  $9766 = (($4) + 3880|0);
  $9767 = +HEAPF32[$9766>>2];
  $9768 = $9765 * $9767;
  $9769 = $fSlow64;
  $9770 = (($4) + 3880|0);
  $9771 = (($9770) + 4|0);
  $9772 = +HEAPF32[$9771>>2];
  $9773 = $9769 * $9772;
  $9774 = $9768 + $9773;
  $9775 = $fSlow35;
  $9776 = (($4) + 3880|0);
  $9777 = (($9776) + 8|0);
  $9778 = +HEAPF32[$9777>>2];
  $9779 = $9775 * $9778;
  $9780 = $9774 + $9779;
  $9781 = $9764 * $9780;
  $9782 = $fSlow39;
  $9783 = $fSlow42;
  $9784 = (($4) + 3892|0);
  $9785 = (($9784) + 8|0);
  $9786 = +HEAPF32[$9785>>2];
  $9787 = $9783 * $9786;
  $9788 = $fTemp206;
  $9789 = $9787 + $9788;
  $9790 = $9782 * $9789;
  $9791 = $9781 - $9790;
  $9792 = (($4) + 3892|0);
  HEAPF32[$9792>>2] = $9791;
  $9793 = $fSlow59;
  $9794 = (($4) + 3904|0);
  $9795 = (($9794) + 4|0);
  $9796 = +HEAPF32[$9795>>2];
  $9797 = $9793 * $9796;
  $9798 = $fSlow60;
  $9799 = (($4) + 3864|0);
  $9800 = +HEAPF32[$9799>>2];
  $9801 = (($4) + 3864|0);
  $9802 = (($9801) + 4|0);
  $9803 = +HEAPF32[$9802>>2];
  $9804 = $9800 + $9803;
  $9805 = $9798 * $9804;
  $9806 = $9797 + $9805;
  $9807 = (($4) + 3904|0);
  HEAPF32[$9807>>2] = $9806;
  $9808 = (($4) + 3904|0);
  $9809 = +HEAPF32[$9808>>2];
  $9810 = $fSlow57;
  $9811 = $fSlow63;
  $9812 = (($4) + 3912|0);
  $9813 = (($9812) + 8|0);
  $9814 = +HEAPF32[$9813>>2];
  $9815 = $9811 * $9814;
  $9816 = $fSlow36;
  $9817 = (($4) + 3912|0);
  $9818 = (($9817) + 4|0);
  $9819 = +HEAPF32[$9818>>2];
  $9820 = $9816 * $9819;
  $9821 = $9815 + $9820;
  $9822 = $9810 * $9821;
  $9823 = $9809 - $9822;
  $9824 = (($4) + 3912|0);
  HEAPF32[$9824>>2] = $9823;
  $9825 = (($4) + 3912|0);
  $9826 = (($9825) + 8|0);
  $9827 = +HEAPF32[$9826>>2];
  $9828 = (($4) + 3912|0);
  $9829 = +HEAPF32[$9828>>2];
  $9830 = (($4) + 3912|0);
  $9831 = (($9830) + 4|0);
  $9832 = +HEAPF32[$9831>>2];
  $9833 = 2.0 * $9832;
  $9834 = $9829 + $9833;
  $9835 = $9827 + $9834;
  $fTemp207 = $9835;
  $9836 = $fSlow57;
  $9837 = $fTemp207;
  $9838 = $9836 * $9837;
  $fTemp208 = $9838;
  $9839 = $fTemp208;
  $9840 = (($4) + 3924|0);
  HEAPF32[$9840>>2] = $9839;
  $9841 = $fSlow69;
  $9842 = (($4) + 3932|0);
  $9843 = (($9842) + 4|0);
  $9844 = +HEAPF32[$9843>>2];
  $9845 = $9841 * $9844;
  $9846 = $fSlow70;
  $9847 = $fSlow72;
  $9848 = $fTemp207;
  $9849 = $9847 * $9848;
  $9850 = $fSlow71;
  $9851 = (($4) + 3924|0);
  $9852 = (($9851) + 4|0);
  $9853 = +HEAPF32[$9852>>2];
  $9854 = $9850 * $9853;
  $9855 = $9849 + $9854;
  $9856 = $9846 * $9855;
  $9857 = $9845 + $9856;
  $9858 = (($4) + 3932|0);
  HEAPF32[$9858>>2] = $9857;
  $9859 = (($4) + 3932|0);
  $9860 = +HEAPF32[$9859>>2];
  $9861 = $fSlow65;
  $9862 = $fSlow73;
  $9863 = (($4) + 3940|0);
  $9864 = (($9863) + 8|0);
  $9865 = +HEAPF32[$9864>>2];
  $9866 = $9862 * $9865;
  $9867 = $fSlow41;
  $9868 = (($4) + 3940|0);
  $9869 = (($9868) + 4|0);
  $9870 = +HEAPF32[$9869>>2];
  $9871 = $9867 * $9870;
  $9872 = $9866 + $9871;
  $9873 = $9861 * $9872;
  $9874 = $9860 - $9873;
  $9875 = (($4) + 3940|0);
  HEAPF32[$9875>>2] = $9874;
  $9876 = $fSlow69;
  $9877 = (($4) + 3952|0);
  $9878 = (($9877) + 4|0);
  $9879 = +HEAPF32[$9878>>2];
  $9880 = $9876 * $9879;
  $9881 = $fSlow70;
  $9882 = (($4) + 3924|0);
  $9883 = +HEAPF32[$9882>>2];
  $9884 = (($4) + 3924|0);
  $9885 = (($9884) + 4|0);
  $9886 = +HEAPF32[$9885>>2];
  $9887 = $9883 + $9886;
  $9888 = $9881 * $9887;
  $9889 = $9880 + $9888;
  $9890 = (($4) + 3952|0);
  HEAPF32[$9890>>2] = $9889;
  $9891 = (($4) + 3952|0);
  $9892 = +HEAPF32[$9891>>2];
  $9893 = $fSlow65;
  $9894 = $fSlow73;
  $9895 = (($4) + 3960|0);
  $9896 = (($9895) + 8|0);
  $9897 = +HEAPF32[$9896>>2];
  $9898 = $9894 * $9897;
  $9899 = $fSlow41;
  $9900 = (($4) + 3960|0);
  $9901 = (($9900) + 4|0);
  $9902 = +HEAPF32[$9901>>2];
  $9903 = $9899 * $9902;
  $9904 = $9898 + $9903;
  $9905 = $9893 * $9904;
  $9906 = $9892 - $9905;
  $9907 = (($4) + 3960|0);
  HEAPF32[$9907>>2] = $9906;
  $9908 = $fSlow170;
  $9909 = (($4) + 3760|0);
  $9910 = (($9909) + 8|0);
  $9911 = +HEAPF32[$9910>>2];
  $9912 = $fSlow39;
  $9913 = $fTemp199;
  $9914 = $fSlow42;
  $9915 = (($4) + 3760|0);
  $9916 = +HEAPF32[$9915>>2];
  $9917 = $9914 * $9916;
  $9918 = $9913 + $9917;
  $9919 = $9912 * $9918;
  $9920 = $9911 + $9919;
  $9921 = $9908 * $9920;
  $9922 = $fSlow171;
  $9923 = (($4) + 3832|0);
  $9924 = (($9923) + 8|0);
  $9925 = +HEAPF32[$9924>>2];
  $9926 = $fSlow39;
  $9927 = $fTemp203;
  $9928 = $fSlow42;
  $9929 = (($4) + 3832|0);
  $9930 = +HEAPF32[$9929>>2];
  $9931 = $9928 * $9930;
  $9932 = $9927 + $9931;
  $9933 = $9926 * $9932;
  $9934 = $9925 + $9933;
  $9935 = $9922 * $9934;
  $9936 = $9921 + $9935;
  $9937 = $fSlow172;
  $9938 = (($4) + 3892|0);
  $9939 = (($9938) + 8|0);
  $9940 = +HEAPF32[$9939>>2];
  $9941 = $fSlow39;
  $9942 = $fTemp206;
  $9943 = $fSlow42;
  $9944 = (($4) + 3892|0);
  $9945 = +HEAPF32[$9944>>2];
  $9946 = $9943 * $9945;
  $9947 = $9942 + $9946;
  $9948 = $9941 * $9947;
  $9949 = $9940 + $9948;
  $9950 = $9937 * $9949;
  $9951 = $9936 + $9950;
  $9952 = $fSlow65;
  $9953 = $fSlow173;
  $9954 = $fSlow40;
  $9955 = (($4) + 3940|0);
  $9956 = +HEAPF32[$9955>>2];
  $9957 = $9954 * $9956;
  $9958 = $fSlow74;
  $9959 = (($4) + 3940|0);
  $9960 = (($9959) + 4|0);
  $9961 = +HEAPF32[$9960>>2];
  $9962 = $9958 * $9961;
  $9963 = $9957 + $9962;
  $9964 = $fSlow40;
  $9965 = (($4) + 3940|0);
  $9966 = (($9965) + 8|0);
  $9967 = +HEAPF32[$9966>>2];
  $9968 = $9964 * $9967;
  $9969 = $9963 + $9968;
  $9970 = $9953 * $9969;
  $9971 = $fSlow174;
  $9972 = (($4) + 3960|0);
  $9973 = (($9972) + 8|0);
  $9974 = +HEAPF32[$9973>>2];
  $9975 = (($4) + 3960|0);
  $9976 = +HEAPF32[$9975>>2];
  $9977 = (($4) + 3960|0);
  $9978 = (($9977) + 4|0);
  $9979 = +HEAPF32[$9978>>2];
  $9980 = 2.0 * $9979;
  $9981 = $9976 + $9980;
  $9982 = $9974 + $9981;
  $9983 = $9971 * $9982;
  $9984 = $9970 + $9983;
  $9985 = $9952 * $9984;
  $9986 = $9951 + $9985;
  $fTemp209 = $9986;
  $9987 = $fSlow19;
  $9988 = (($4) + 3972|0);
  $9989 = (($9988) + 4|0);
  $9990 = +HEAPF32[$9989>>2];
  $9991 = $9987 * $9990;
  $9992 = $fSlow20;
  $9993 = $fSlow14;
  $9994 = (($4) + 528712|0);
  $9995 = (($9994) + 4|0);
  $9996 = +HEAPF32[$9995>>2];
  $9997 = $9993 * $9996;
  $9998 = $fSlow21;
  $9999 = (($4) + 528712|0);
  $10000 = (($9999) + 8|0);
  $10001 = +HEAPF32[$10000>>2];
  $10002 = $9998 * $10001;
  $10003 = $9997 + $10002;
  $10004 = $9992 * $10003;
  $10005 = $9991 + $10004;
  $10006 = (($4) + 3972|0);
  HEAPF32[$10006>>2] = $10005;
  $10007 = (($4) + 3972|0);
  $10008 = +HEAPF32[$10007>>2];
  $10009 = $fSlow16;
  $10010 = $fSlow22;
  $10011 = (($4) + 3980|0);
  $10012 = (($10011) + 8|0);
  $10013 = +HEAPF32[$10012>>2];
  $10014 = $10010 * $10013;
  $10015 = $fSlow23;
  $10016 = (($4) + 3980|0);
  $10017 = (($10016) + 4|0);
  $10018 = +HEAPF32[$10017>>2];
  $10019 = $10015 * $10018;
  $10020 = $10014 + $10019;
  $10021 = $10009 * $10020;
  $10022 = $10008 - $10021;
  $10023 = (($4) + 3980|0);
  HEAPF32[$10023>>2] = $10022;
  $10024 = $fSlow29;
  $10025 = (($4) + 3992|0);
  $10026 = (($10025) + 4|0);
  $10027 = +HEAPF32[$10026>>2];
  $10028 = $10024 * $10027;
  $fTemp210 = $10028;
  $10029 = $fSlow16;
  $10030 = $fSlow17;
  $10031 = (($4) + 3980|0);
  $10032 = +HEAPF32[$10031>>2];
  $10033 = $10030 * $10032;
  $10034 = $fSlow24;
  $10035 = (($4) + 3980|0);
  $10036 = (($10035) + 4|0);
  $10037 = +HEAPF32[$10036>>2];
  $10038 = $10034 * $10037;
  $10039 = $10033 + $10038;
  $10040 = $fSlow17;
  $10041 = (($4) + 3980|0);
  $10042 = (($10041) + 8|0);
  $10043 = +HEAPF32[$10042>>2];
  $10044 = $10040 * $10043;
  $10045 = $10039 + $10044;
  $10046 = $10029 * $10045;
  $10047 = $fSlow27;
  $10048 = $fSlow30;
  $10049 = (($4) + 3992|0);
  $10050 = (($10049) + 8|0);
  $10051 = +HEAPF32[$10050>>2];
  $10052 = $10048 * $10051;
  $10053 = $fTemp210;
  $10054 = $10052 + $10053;
  $10055 = $10047 * $10054;
  $10056 = $10046 - $10055;
  $10057 = (($4) + 3992|0);
  HEAPF32[$10057>>2] = $10056;
  $10058 = $fSlow36;
  $10059 = (($4) + 4004|0);
  $10060 = (($10059) + 4|0);
  $10061 = +HEAPF32[$10060>>2];
  $10062 = $10058 * $10061;
  $fTemp211 = $10062;
  $10063 = (($4) + 3992|0);
  $10064 = (($10063) + 8|0);
  $10065 = +HEAPF32[$10064>>2];
  $10066 = $fSlow27;
  $10067 = $fTemp210;
  $10068 = $fSlow30;
  $10069 = (($4) + 3992|0);
  $10070 = +HEAPF32[$10069>>2];
  $10071 = $10068 * $10070;
  $10072 = $10067 + $10071;
  $10073 = $10066 * $10072;
  $10074 = $10065 + $10073;
  $10075 = $fSlow33;
  $10076 = $fSlow34;
  $10077 = (($4) + 4004|0);
  $10078 = (($10077) + 8|0);
  $10079 = +HEAPF32[$10078>>2];
  $10080 = $10076 * $10079;
  $10081 = $fTemp211;
  $10082 = $10080 + $10081;
  $10083 = $10075 * $10082;
  $10084 = $10074 - $10083;
  $10085 = (($4) + 4004|0);
  HEAPF32[$10085>>2] = $10084;
  $10086 = $fSlow41;
  $10087 = (($4) + 4016|0);
  $10088 = (($10087) + 4|0);
  $10089 = +HEAPF32[$10088>>2];
  $10090 = $10086 * $10089;
  $fTemp212 = $10090;
  $10091 = (($4) + 4004|0);
  $10092 = (($10091) + 8|0);
  $10093 = +HEAPF32[$10092>>2];
  $10094 = $fSlow33;
  $10095 = $fTemp211;
  $10096 = $fSlow34;
  $10097 = (($4) + 4004|0);
  $10098 = +HEAPF32[$10097>>2];
  $10099 = $10096 * $10098;
  $10100 = $10095 + $10099;
  $10101 = $10094 * $10100;
  $10102 = $10093 + $10101;
  $10103 = $fSlow39;
  $10104 = $fSlow42;
  $10105 = (($4) + 4016|0);
  $10106 = (($10105) + 8|0);
  $10107 = +HEAPF32[$10106>>2];
  $10108 = $10104 * $10107;
  $10109 = $fTemp212;
  $10110 = $10108 + $10109;
  $10111 = $10103 * $10110;
  $10112 = $10102 - $10111;
  $10113 = (($4) + 4016|0);
  HEAPF32[$10113>>2] = $10112;
  $10114 = $fSlow19;
  $10115 = (($4) + 4028|0);
  $10116 = (($10115) + 4|0);
  $10117 = +HEAPF32[$10116>>2];
  $10118 = $10114 * $10117;
  $10119 = $fSlow20;
  $10120 = (($4) + 528712|0);
  $10121 = (($10120) + 4|0);
  $10122 = +HEAPF32[$10121>>2];
  $10123 = (($4) + 528712|0);
  $10124 = (($10123) + 8|0);
  $10125 = +HEAPF32[$10124>>2];
  $10126 = $10122 + $10125;
  $10127 = $10119 * $10126;
  $10128 = $10118 + $10127;
  $10129 = (($4) + 4028|0);
  HEAPF32[$10129>>2] = $10128;
  $10130 = (($4) + 4028|0);
  $10131 = +HEAPF32[$10130>>2];
  $10132 = $fSlow16;
  $10133 = $fSlow22;
  $10134 = (($4) + 4036|0);
  $10135 = (($10134) + 8|0);
  $10136 = +HEAPF32[$10135>>2];
  $10137 = $10133 * $10136;
  $10138 = $fSlow23;
  $10139 = (($4) + 4036|0);
  $10140 = (($10139) + 4|0);
  $10141 = +HEAPF32[$10140>>2];
  $10142 = $10138 * $10141;
  $10143 = $10137 + $10142;
  $10144 = $10132 * $10143;
  $10145 = $10131 - $10144;
  $10146 = (($4) + 4036|0);
  HEAPF32[$10146>>2] = $10145;
  $10147 = (($4) + 4036|0);
  $10148 = (($10147) + 8|0);
  $10149 = +HEAPF32[$10148>>2];
  $10150 = (($4) + 4036|0);
  $10151 = +HEAPF32[$10150>>2];
  $10152 = (($4) + 4036|0);
  $10153 = (($10152) + 4|0);
  $10154 = +HEAPF32[$10153>>2];
  $10155 = 2.0 * $10154;
  $10156 = $10151 + $10155;
  $10157 = $10149 + $10156;
  $fTemp213 = $10157;
  $10158 = $fSlow16;
  $10159 = $fTemp213;
  $10160 = $10158 * $10159;
  $fTemp214 = $10160;
  $10161 = $fTemp214;
  $10162 = (($4) + 4048|0);
  HEAPF32[$10162>>2] = $10161;
  $10163 = $fSlow48;
  $10164 = (($4) + 4056|0);
  $10165 = (($10164) + 4|0);
  $10166 = +HEAPF32[$10165>>2];
  $10167 = $10163 * $10166;
  $10168 = $fSlow49;
  $10169 = $fSlow51;
  $10170 = $fTemp213;
  $10171 = $10169 * $10170;
  $10172 = $fSlow50;
  $10173 = (($4) + 4048|0);
  $10174 = (($10173) + 4|0);
  $10175 = +HEAPF32[$10174>>2];
  $10176 = $10172 * $10175;
  $10177 = $10171 + $10176;
  $10178 = $10168 * $10177;
  $10179 = $10167 + $10178;
  $10180 = (($4) + 4056|0);
  HEAPF32[$10180>>2] = $10179;
  $10181 = (($4) + 4056|0);
  $10182 = +HEAPF32[$10181>>2];
  $10183 = $fSlow46;
  $10184 = $fSlow52;
  $10185 = (($4) + 4064|0);
  $10186 = (($10185) + 8|0);
  $10187 = +HEAPF32[$10186>>2];
  $10188 = $10184 * $10187;
  $10189 = $fSlow29;
  $10190 = (($4) + 4064|0);
  $10191 = (($10190) + 4|0);
  $10192 = +HEAPF32[$10191>>2];
  $10193 = $10189 * $10192;
  $10194 = $10188 + $10193;
  $10195 = $10183 * $10194;
  $10196 = $10182 - $10195;
  $10197 = (($4) + 4064|0);
  HEAPF32[$10197>>2] = $10196;
  $10198 = $fSlow36;
  $10199 = (($4) + 4076|0);
  $10200 = (($10199) + 4|0);
  $10201 = +HEAPF32[$10200>>2];
  $10202 = $10198 * $10201;
  $fTemp215 = $10202;
  $10203 = $fSlow46;
  $10204 = $fSlow28;
  $10205 = (($4) + 4064|0);
  $10206 = +HEAPF32[$10205>>2];
  $10207 = $10204 * $10206;
  $10208 = $fSlow53;
  $10209 = (($4) + 4064|0);
  $10210 = (($10209) + 4|0);
  $10211 = +HEAPF32[$10210>>2];
  $10212 = $10208 * $10211;
  $10213 = $10207 + $10212;
  $10214 = $fSlow28;
  $10215 = (($4) + 4064|0);
  $10216 = (($10215) + 8|0);
  $10217 = +HEAPF32[$10216>>2];
  $10218 = $10214 * $10217;
  $10219 = $10213 + $10218;
  $10220 = $10203 * $10219;
  $10221 = $fSlow33;
  $10222 = $fSlow34;
  $10223 = (($4) + 4076|0);
  $10224 = (($10223) + 8|0);
  $10225 = +HEAPF32[$10224>>2];
  $10226 = $10222 * $10225;
  $10227 = $fTemp215;
  $10228 = $10226 + $10227;
  $10229 = $10221 * $10228;
  $10230 = $10220 - $10229;
  $10231 = (($4) + 4076|0);
  HEAPF32[$10231>>2] = $10230;
  $10232 = $fSlow41;
  $10233 = (($4) + 4088|0);
  $10234 = (($10233) + 4|0);
  $10235 = +HEAPF32[$10234>>2];
  $10236 = $10232 * $10235;
  $fTemp216 = $10236;
  $10237 = (($4) + 4076|0);
  $10238 = (($10237) + 8|0);
  $10239 = +HEAPF32[$10238>>2];
  $10240 = $fSlow33;
  $10241 = $fTemp215;
  $10242 = $fSlow34;
  $10243 = (($4) + 4076|0);
  $10244 = +HEAPF32[$10243>>2];
  $10245 = $10242 * $10244;
  $10246 = $10241 + $10245;
  $10247 = $10240 * $10246;
  $10248 = $10239 + $10247;
  $10249 = $fSlow39;
  $10250 = $fSlow42;
  $10251 = (($4) + 4088|0);
  $10252 = (($10251) + 8|0);
  $10253 = +HEAPF32[$10252>>2];
  $10254 = $10250 * $10253;
  $10255 = $fTemp216;
  $10256 = $10254 + $10255;
  $10257 = $10249 * $10256;
  $10258 = $10248 - $10257;
  $10259 = (($4) + 4088|0);
  HEAPF32[$10259>>2] = $10258;
  $10260 = $fSlow48;
  $10261 = (($4) + 4100|0);
  $10262 = (($10261) + 4|0);
  $10263 = +HEAPF32[$10262>>2];
  $10264 = $10260 * $10263;
  $10265 = $fSlow49;
  $10266 = (($4) + 4048|0);
  $10267 = +HEAPF32[$10266>>2];
  $10268 = (($4) + 4048|0);
  $10269 = (($10268) + 4|0);
  $10270 = +HEAPF32[$10269>>2];
  $10271 = $10267 + $10270;
  $10272 = $10265 * $10271;
  $10273 = $10264 + $10272;
  $10274 = (($4) + 4100|0);
  HEAPF32[$10274>>2] = $10273;
  $10275 = (($4) + 4100|0);
  $10276 = +HEAPF32[$10275>>2];
  $10277 = $fSlow46;
  $10278 = $fSlow52;
  $10279 = (($4) + 4108|0);
  $10280 = (($10279) + 8|0);
  $10281 = +HEAPF32[$10280>>2];
  $10282 = $10278 * $10281;
  $10283 = $fSlow29;
  $10284 = (($4) + 4108|0);
  $10285 = (($10284) + 4|0);
  $10286 = +HEAPF32[$10285>>2];
  $10287 = $10283 * $10286;
  $10288 = $10282 + $10287;
  $10289 = $10277 * $10288;
  $10290 = $10276 - $10289;
  $10291 = (($4) + 4108|0);
  HEAPF32[$10291>>2] = $10290;
  $10292 = (($4) + 4108|0);
  $10293 = (($10292) + 8|0);
  $10294 = +HEAPF32[$10293>>2];
  $10295 = (($4) + 4108|0);
  $10296 = +HEAPF32[$10295>>2];
  $10297 = (($4) + 4108|0);
  $10298 = (($10297) + 4|0);
  $10299 = +HEAPF32[$10298>>2];
  $10300 = 2.0 * $10299;
  $10301 = $10296 + $10300;
  $10302 = $10294 + $10301;
  $fTemp217 = $10302;
  $10303 = $fSlow46;
  $10304 = $fTemp217;
  $10305 = $10303 * $10304;
  $fTemp218 = $10305;
  $10306 = $fTemp218;
  $10307 = (($4) + 4120|0);
  HEAPF32[$10307>>2] = $10306;
  $10308 = $fSlow59;
  $10309 = (($4) + 4128|0);
  $10310 = (($10309) + 4|0);
  $10311 = +HEAPF32[$10310>>2];
  $10312 = $10308 * $10311;
  $10313 = $fSlow60;
  $10314 = $fSlow62;
  $10315 = $fTemp217;
  $10316 = $10314 * $10315;
  $10317 = $fSlow61;
  $10318 = (($4) + 4120|0);
  $10319 = (($10318) + 4|0);
  $10320 = +HEAPF32[$10319>>2];
  $10321 = $10317 * $10320;
  $10322 = $10316 + $10321;
  $10323 = $10313 * $10322;
  $10324 = $10312 + $10323;
  $10325 = (($4) + 4128|0);
  HEAPF32[$10325>>2] = $10324;
  $10326 = (($4) + 4128|0);
  $10327 = +HEAPF32[$10326>>2];
  $10328 = $fSlow57;
  $10329 = $fSlow63;
  $10330 = (($4) + 4136|0);
  $10331 = (($10330) + 8|0);
  $10332 = +HEAPF32[$10331>>2];
  $10333 = $10329 * $10332;
  $10334 = $fSlow36;
  $10335 = (($4) + 4136|0);
  $10336 = (($10335) + 4|0);
  $10337 = +HEAPF32[$10336>>2];
  $10338 = $10334 * $10337;
  $10339 = $10333 + $10338;
  $10340 = $10328 * $10339;
  $10341 = $10327 - $10340;
  $10342 = (($4) + 4136|0);
  HEAPF32[$10342>>2] = $10341;
  $10343 = $fSlow41;
  $10344 = (($4) + 4148|0);
  $10345 = (($10344) + 4|0);
  $10346 = +HEAPF32[$10345>>2];
  $10347 = $10343 * $10346;
  $fTemp219 = $10347;
  $10348 = $fSlow57;
  $10349 = $fSlow35;
  $10350 = (($4) + 4136|0);
  $10351 = +HEAPF32[$10350>>2];
  $10352 = $10349 * $10351;
  $10353 = $fSlow64;
  $10354 = (($4) + 4136|0);
  $10355 = (($10354) + 4|0);
  $10356 = +HEAPF32[$10355>>2];
  $10357 = $10353 * $10356;
  $10358 = $10352 + $10357;
  $10359 = $fSlow35;
  $10360 = (($4) + 4136|0);
  $10361 = (($10360) + 8|0);
  $10362 = +HEAPF32[$10361>>2];
  $10363 = $10359 * $10362;
  $10364 = $10358 + $10363;
  $10365 = $10348 * $10364;
  $10366 = $fSlow39;
  $10367 = $fSlow42;
  $10368 = (($4) + 4148|0);
  $10369 = (($10368) + 8|0);
  $10370 = +HEAPF32[$10369>>2];
  $10371 = $10367 * $10370;
  $10372 = $fTemp219;
  $10373 = $10371 + $10372;
  $10374 = $10366 * $10373;
  $10375 = $10365 - $10374;
  $10376 = (($4) + 4148|0);
  HEAPF32[$10376>>2] = $10375;
  $10377 = $fSlow59;
  $10378 = (($4) + 4160|0);
  $10379 = (($10378) + 4|0);
  $10380 = +HEAPF32[$10379>>2];
  $10381 = $10377 * $10380;
  $10382 = $fSlow60;
  $10383 = (($4) + 4120|0);
  $10384 = +HEAPF32[$10383>>2];
  $10385 = (($4) + 4120|0);
  $10386 = (($10385) + 4|0);
  $10387 = +HEAPF32[$10386>>2];
  $10388 = $10384 + $10387;
  $10389 = $10382 * $10388;
  $10390 = $10381 + $10389;
  $10391 = (($4) + 4160|0);
  HEAPF32[$10391>>2] = $10390;
  $10392 = (($4) + 4160|0);
  $10393 = +HEAPF32[$10392>>2];
  $10394 = $fSlow57;
  $10395 = $fSlow63;
  $10396 = (($4) + 4168|0);
  $10397 = (($10396) + 8|0);
  $10398 = +HEAPF32[$10397>>2];
  $10399 = $10395 * $10398;
  $10400 = $fSlow36;
  $10401 = (($4) + 4168|0);
  $10402 = (($10401) + 4|0);
  $10403 = +HEAPF32[$10402>>2];
  $10404 = $10400 * $10403;
  $10405 = $10399 + $10404;
  $10406 = $10394 * $10405;
  $10407 = $10393 - $10406;
  $10408 = (($4) + 4168|0);
  HEAPF32[$10408>>2] = $10407;
  $10409 = (($4) + 4168|0);
  $10410 = (($10409) + 8|0);
  $10411 = +HEAPF32[$10410>>2];
  $10412 = (($4) + 4168|0);
  $10413 = +HEAPF32[$10412>>2];
  $10414 = (($4) + 4168|0);
  $10415 = (($10414) + 4|0);
  $10416 = +HEAPF32[$10415>>2];
  $10417 = 2.0 * $10416;
  $10418 = $10413 + $10417;
  $10419 = $10411 + $10418;
  $fTemp220 = $10419;
  $10420 = $fSlow57;
  $10421 = $fTemp220;
  $10422 = $10420 * $10421;
  $fTemp221 = $10422;
  $10423 = $fTemp221;
  $10424 = (($4) + 4180|0);
  HEAPF32[$10424>>2] = $10423;
  $10425 = $fSlow69;
  $10426 = (($4) + 4188|0);
  $10427 = (($10426) + 4|0);
  $10428 = +HEAPF32[$10427>>2];
  $10429 = $10425 * $10428;
  $10430 = $fSlow70;
  $10431 = $fSlow72;
  $10432 = $fTemp220;
  $10433 = $10431 * $10432;
  $10434 = $fSlow71;
  $10435 = (($4) + 4180|0);
  $10436 = (($10435) + 4|0);
  $10437 = +HEAPF32[$10436>>2];
  $10438 = $10434 * $10437;
  $10439 = $10433 + $10438;
  $10440 = $10430 * $10439;
  $10441 = $10429 + $10440;
  $10442 = (($4) + 4188|0);
  HEAPF32[$10442>>2] = $10441;
  $10443 = (($4) + 4188|0);
  $10444 = +HEAPF32[$10443>>2];
  $10445 = $fSlow65;
  $10446 = $fSlow73;
  $10447 = (($4) + 4196|0);
  $10448 = (($10447) + 8|0);
  $10449 = +HEAPF32[$10448>>2];
  $10450 = $10446 * $10449;
  $10451 = $fSlow41;
  $10452 = (($4) + 4196|0);
  $10453 = (($10452) + 4|0);
  $10454 = +HEAPF32[$10453>>2];
  $10455 = $10451 * $10454;
  $10456 = $10450 + $10455;
  $10457 = $10445 * $10456;
  $10458 = $10444 - $10457;
  $10459 = (($4) + 4196|0);
  HEAPF32[$10459>>2] = $10458;
  $10460 = $fSlow69;
  $10461 = (($4) + 4208|0);
  $10462 = (($10461) + 4|0);
  $10463 = +HEAPF32[$10462>>2];
  $10464 = $10460 * $10463;
  $10465 = $fSlow70;
  $10466 = (($4) + 4180|0);
  $10467 = +HEAPF32[$10466>>2];
  $10468 = (($4) + 4180|0);
  $10469 = (($10468) + 4|0);
  $10470 = +HEAPF32[$10469>>2];
  $10471 = $10467 + $10470;
  $10472 = $10465 * $10471;
  $10473 = $10464 + $10472;
  $10474 = (($4) + 4208|0);
  HEAPF32[$10474>>2] = $10473;
  $10475 = (($4) + 4208|0);
  $10476 = +HEAPF32[$10475>>2];
  $10477 = $fSlow65;
  $10478 = $fSlow73;
  $10479 = (($4) + 4216|0);
  $10480 = (($10479) + 8|0);
  $10481 = +HEAPF32[$10480>>2];
  $10482 = $10478 * $10481;
  $10483 = $fSlow41;
  $10484 = (($4) + 4216|0);
  $10485 = (($10484) + 4|0);
  $10486 = +HEAPF32[$10485>>2];
  $10487 = $10483 * $10486;
  $10488 = $10482 + $10487;
  $10489 = $10477 * $10488;
  $10490 = $10476 - $10489;
  $10491 = (($4) + 4216|0);
  HEAPF32[$10491>>2] = $10490;
  $10492 = $fSlow177;
  $10493 = (($4) + 4016|0);
  $10494 = (($10493) + 8|0);
  $10495 = +HEAPF32[$10494>>2];
  $10496 = $fSlow39;
  $10497 = $fTemp212;
  $10498 = $fSlow42;
  $10499 = (($4) + 4016|0);
  $10500 = +HEAPF32[$10499>>2];
  $10501 = $10498 * $10500;
  $10502 = $10497 + $10501;
  $10503 = $10496 * $10502;
  $10504 = $10495 + $10503;
  $10505 = $10492 * $10504;
  $10506 = $fSlow178;
  $10507 = (($4) + 4088|0);
  $10508 = (($10507) + 8|0);
  $10509 = +HEAPF32[$10508>>2];
  $10510 = $fSlow39;
  $10511 = $fTemp216;
  $10512 = $fSlow42;
  $10513 = (($4) + 4088|0);
  $10514 = +HEAPF32[$10513>>2];
  $10515 = $10512 * $10514;
  $10516 = $10511 + $10515;
  $10517 = $10510 * $10516;
  $10518 = $10509 + $10517;
  $10519 = $10506 * $10518;
  $10520 = $10505 + $10519;
  $10521 = $fSlow179;
  $10522 = (($4) + 4148|0);
  $10523 = (($10522) + 8|0);
  $10524 = +HEAPF32[$10523>>2];
  $10525 = $fSlow39;
  $10526 = $fTemp219;
  $10527 = $fSlow42;
  $10528 = (($4) + 4148|0);
  $10529 = +HEAPF32[$10528>>2];
  $10530 = $10527 * $10529;
  $10531 = $10526 + $10530;
  $10532 = $10525 * $10531;
  $10533 = $10524 + $10532;
  $10534 = $10521 * $10533;
  $10535 = $10520 + $10534;
  $10536 = $fSlow65;
  $10537 = $fSlow180;
  $10538 = $fSlow40;
  $10539 = (($4) + 4196|0);
  $10540 = +HEAPF32[$10539>>2];
  $10541 = $10538 * $10540;
  $10542 = $fSlow74;
  $10543 = (($4) + 4196|0);
  $10544 = (($10543) + 4|0);
  $10545 = +HEAPF32[$10544>>2];
  $10546 = $10542 * $10545;
  $10547 = $10541 + $10546;
  $10548 = $fSlow40;
  $10549 = (($4) + 4196|0);
  $10550 = (($10549) + 8|0);
  $10551 = +HEAPF32[$10550>>2];
  $10552 = $10548 * $10551;
  $10553 = $10547 + $10552;
  $10554 = $10537 * $10553;
  $10555 = $fSlow181;
  $10556 = (($4) + 4216|0);
  $10557 = (($10556) + 8|0);
  $10558 = +HEAPF32[$10557>>2];
  $10559 = (($4) + 4216|0);
  $10560 = +HEAPF32[$10559>>2];
  $10561 = (($4) + 4216|0);
  $10562 = (($10561) + 4|0);
  $10563 = +HEAPF32[$10562>>2];
  $10564 = 2.0 * $10563;
  $10565 = $10560 + $10564;
  $10566 = $10558 + $10565;
  $10567 = $10555 * $10566;
  $10568 = $10554 + $10567;
  $10569 = $10536 * $10568;
  $10570 = $10535 + $10569;
  $fTemp222 = $10570;
  $10571 = $fTemp209;
  $10572 = $fTemp222;
  $10573 = $10571 + $10572;
  $fTemp223 = $10573;
  $10574 = $fTemp196;
  $10575 = $fTemp223;
  $10576 = $10574 + $10575;
  $fTemp224 = $10576;
  $10577 = $fTemp169;
  $10578 = $fTemp224;
  $10579 = $10577 + $10578;
  $fTemp225 = $10579;
  $10580 = $fTemp0;
  $10581 = $iTemp1;
  $10582 = (+($10581|0));
  $10583 = $fTemp2;
  $10584 = $iTemp3;
  $10585 = (+($10584|0));
  $10586 = $fSlow6;
  $10587 = $fTemp114;
  $10588 = $fTemp225;
  $10589 = $10587 + $10588;
  $10590 = $10586 * $10589;
  $10591 = $10585 + $10590;
  $10592 = $10583 + $10591;
  $10593 = $10582 + $10592;
  $10594 = $10580 + $10593;
  $10595 = (($4) + 4228|0);
  $10596 = HEAP32[$10595>>2]|0;
  $10597 = $10596 & 8191;
  $10598 = (($4) + 4232|0);
  $10599 = (($10598) + ($10597<<2)|0);
  HEAPF32[$10599>>2] = $10594;
  $10600 = (($4) + 4228|0);
  $10601 = HEAP32[$10600>>2]|0;
  $10602 = $iSlow182;
  $10603 = (($10601) - ($10602))|0;
  $10604 = $10603 & 8191;
  $10605 = (($4) + 4232|0);
  $10606 = (($10605) + ($10604<<2)|0);
  $10607 = +HEAPF32[$10606>>2];
  $10608 = (($4) + 37000|0);
  HEAPF32[$10608>>2] = $10607;
  $10609 = $fSlow183;
  $10610 = (($4) + 37016|0);
  HEAPF32[$10610>>2] = $10609;
  $10611 = $fSlow183;
  $10612 = (($4) + 37016|0);
  $10613 = (($10612) + 4|0);
  $10614 = +HEAPF32[$10613>>2];
  $10615 = $10611 - $10614;
  $10616 = $10615 > 0.0;
  $10617 = $10616&1;
  $iTemp226 = $10617;
  $10618 = $fSlow3;
  $10619 = $i;
  $10620 = $input1;
  $10621 = (($10620) + ($10619<<2)|0);
  $10622 = +HEAPF32[$10621>>2];
  $10623 = $10618 * $10622;
  $10624 = $iTemp1;
  $10625 = (+($10624|0));
  $10626 = $fTemp0;
  $10627 = $10625 + $10626;
  $10628 = $10623 + $10627;
  $fTemp227 = $10628;
  $10629 = $iTemp226;
  $10630 = (+($10629|0));
  $10631 = $fSlow5;
  $10632 = $fTemp114;
  $10633 = 0.25 * $10632;
  $10634 = $fTemp225;
  $10635 = 0.25 * $10634;
  $10636 = $10633 - $10635;
  $10637 = $10631 * $10636;
  $10638 = $fTemp227;
  $10639 = $10637 + $10638;
  $10640 = $10630 + $10639;
  $10641 = (($4) + 4228|0);
  $10642 = HEAP32[$10641>>2]|0;
  $10643 = $10642 & 8191;
  $10644 = (($4) + 37024|0);
  $10645 = (($10644) + ($10643<<2)|0);
  HEAPF32[$10645>>2] = $10640;
  $10646 = (($4) + 4228|0);
  $10647 = HEAP32[$10646>>2]|0;
  $10648 = $iSlow184;
  $10649 = (($10647) - ($10648))|0;
  $10650 = $10649 & 8191;
  $10651 = (($4) + 37024|0);
  $10652 = (($10651) + ($10650<<2)|0);
  $10653 = +HEAPF32[$10652>>2];
  $10654 = (($4) + 69792|0);
  HEAPF32[$10654>>2] = $10653;
  $10655 = $iTemp1;
  $10656 = (+($10655|0));
  $10657 = $iTemp3;
  $10658 = (+($10657|0));
  $10659 = $fTemp2;
  $10660 = $10658 + $10659;
  $10661 = $10656 + $10660;
  $10662 = $fTemp0;
  $10663 = $10661 + $10662;
  $fTemp228 = $10663;
  $10664 = $fTemp58;
  $10665 = 0.25 * $10664;
  $10666 = $fTemp113;
  $10667 = 0.25 * $10666;
  $10668 = $10665 - $10667;
  $fTemp229 = $10668;
  $10669 = $fTemp169;
  $10670 = 0.25 * $10669;
  $10671 = $fTemp224;
  $10672 = 0.25 * $10671;
  $10673 = $10670 - $10672;
  $fTemp230 = $10673;
  $10674 = $fTemp228;
  $10675 = $fSlow5;
  $10676 = $fTemp229;
  $10677 = $fTemp230;
  $10678 = $10676 + $10677;
  $10679 = $10675 * $10678;
  $10680 = $10674 + $10679;
  $10681 = (($4) + 4228|0);
  $10682 = HEAP32[$10681>>2]|0;
  $10683 = $10682 & 8191;
  $10684 = (($4) + 69804|0);
  $10685 = (($10684) + ($10683<<2)|0);
  HEAPF32[$10685>>2] = $10680;
  $10686 = (($4) + 4228|0);
  $10687 = HEAP32[$10686>>2]|0;
  $10688 = $iSlow185;
  $10689 = (($10687) - ($10688))|0;
  $10690 = $10689 & 8191;
  $10691 = (($4) + 69804|0);
  $10692 = (($10691) + ($10690<<2)|0);
  $10693 = +HEAPF32[$10692>>2];
  $10694 = (($4) + 102572|0);
  HEAPF32[$10694>>2] = $10693;
  $10695 = $iTemp226;
  $10696 = (+($10695|0));
  $10697 = $fTemp227;
  $10698 = $10696 + $10697;
  $fTemp231 = $10698;
  $10699 = $fTemp231;
  $10700 = $fSlow5;
  $10701 = $fTemp229;
  $10702 = $fTemp230;
  $10703 = $10701 - $10702;
  $10704 = $10700 * $10703;
  $10705 = $10699 + $10704;
  $10706 = (($4) + 4228|0);
  $10707 = HEAP32[$10706>>2]|0;
  $10708 = $10707 & 8191;
  $10709 = (($4) + 102584|0);
  $10710 = (($10709) + ($10708<<2)|0);
  HEAPF32[$10710>>2] = $10705;
  $10711 = (($4) + 4228|0);
  $10712 = HEAP32[$10711>>2]|0;
  $10713 = $iSlow186;
  $10714 = (($10712) - ($10713))|0;
  $10715 = $10714 & 8191;
  $10716 = (($4) + 102584|0);
  $10717 = (($10716) + ($10715<<2)|0);
  $10718 = +HEAPF32[$10717>>2];
  $10719 = (($4) + 135352|0);
  HEAPF32[$10719>>2] = $10718;
  $10720 = $fTemp30;
  $10721 = 0.25 * $10720;
  $10722 = $fTemp57;
  $10723 = 0.25 * $10722;
  $10724 = $10721 - $10723;
  $fTemp232 = $10724;
  $10725 = $fTemp85;
  $10726 = 0.25 * $10725;
  $10727 = $fTemp112;
  $10728 = 0.25 * $10727;
  $10729 = $10726 - $10728;
  $fTemp233 = $10729;
  $10730 = $fTemp232;
  $10731 = $fTemp233;
  $10732 = $10730 + $10731;
  $fTemp234 = $10732;
  $10733 = $fTemp141;
  $10734 = 0.25 * $10733;
  $10735 = $fTemp168;
  $10736 = 0.25 * $10735;
  $10737 = $10734 - $10736;
  $fTemp235 = $10737;
  $10738 = $fTemp196;
  $10739 = 0.25 * $10738;
  $10740 = $fTemp223;
  $10741 = 0.25 * $10740;
  $10742 = $10739 - $10741;
  $fTemp236 = $10742;
  $10743 = $fTemp235;
  $10744 = $fTemp236;
  $10745 = $10743 + $10744;
  $fTemp237 = $10745;
  $10746 = $fTemp228;
  $10747 = $fSlow5;
  $10748 = $fTemp234;
  $10749 = $fTemp237;
  $10750 = $10748 + $10749;
  $10751 = $10747 * $10750;
  $10752 = $10746 + $10751;
  $10753 = (($4) + 4228|0);
  $10754 = HEAP32[$10753>>2]|0;
  $10755 = $10754 & 8191;
  $10756 = (($4) + 135364|0);
  $10757 = (($10756) + ($10755<<2)|0);
  HEAPF32[$10757>>2] = $10752;
  $10758 = (($4) + 4228|0);
  $10759 = HEAP32[$10758>>2]|0;
  $10760 = $iSlow187;
  $10761 = (($10759) - ($10760))|0;
  $10762 = $10761 & 8191;
  $10763 = (($4) + 135364|0);
  $10764 = (($10763) + ($10762<<2)|0);
  $10765 = +HEAPF32[$10764>>2];
  $10766 = (($4) + 168132|0);
  HEAPF32[$10766>>2] = $10765;
  $10767 = $fTemp231;
  $10768 = $fSlow5;
  $10769 = $fTemp234;
  $10770 = $fTemp237;
  $10771 = $10769 - $10770;
  $10772 = $10768 * $10771;
  $10773 = $10767 + $10772;
  $10774 = (($4) + 4228|0);
  $10775 = HEAP32[$10774>>2]|0;
  $10776 = $10775 & 8191;
  $10777 = (($4) + 168144|0);
  $10778 = (($10777) + ($10776<<2)|0);
  HEAPF32[$10778>>2] = $10773;
  $10779 = (($4) + 4228|0);
  $10780 = HEAP32[$10779>>2]|0;
  $10781 = $iSlow188;
  $10782 = (($10780) - ($10781))|0;
  $10783 = $10782 & 8191;
  $10784 = (($4) + 168144|0);
  $10785 = (($10784) + ($10783<<2)|0);
  $10786 = +HEAPF32[$10785>>2];
  $10787 = (($4) + 200912|0);
  HEAPF32[$10787>>2] = $10786;
  $10788 = $fTemp232;
  $10789 = $fTemp233;
  $10790 = $10788 - $10789;
  $fTemp238 = $10790;
  $10791 = $fTemp235;
  $10792 = $fTemp236;
  $10793 = $10791 - $10792;
  $fTemp239 = $10793;
  $10794 = $fTemp228;
  $10795 = $fSlow5;
  $10796 = $fTemp238;
  $10797 = $fTemp239;
  $10798 = $10796 + $10797;
  $10799 = $10795 * $10798;
  $10800 = $10794 + $10799;
  $10801 = (($4) + 4228|0);
  $10802 = HEAP32[$10801>>2]|0;
  $10803 = $10802 & 8191;
  $10804 = (($4) + 200924|0);
  $10805 = (($10804) + ($10803<<2)|0);
  HEAPF32[$10805>>2] = $10800;
  $10806 = (($4) + 4228|0);
  $10807 = HEAP32[$10806>>2]|0;
  $10808 = $iSlow189;
  $10809 = (($10807) - ($10808))|0;
  $10810 = $10809 & 8191;
  $10811 = (($4) + 200924|0);
  $10812 = (($10811) + ($10810<<2)|0);
  $10813 = +HEAPF32[$10812>>2];
  $10814 = (($4) + 233692|0);
  HEAPF32[$10814>>2] = $10813;
  $10815 = $fTemp231;
  $10816 = $fSlow5;
  $10817 = $fTemp238;
  $10818 = $fTemp239;
  $10819 = $10817 - $10818;
  $10820 = $10816 * $10819;
  $10821 = $10815 + $10820;
  $10822 = (($4) + 4228|0);
  $10823 = HEAP32[$10822>>2]|0;
  $10824 = $10823 & 8191;
  $10825 = (($4) + 233704|0);
  $10826 = (($10825) + ($10824<<2)|0);
  HEAPF32[$10826>>2] = $10821;
  $10827 = (($4) + 4228|0);
  $10828 = HEAP32[$10827>>2]|0;
  $10829 = $iSlow190;
  $10830 = (($10828) - ($10829))|0;
  $10831 = $10830 & 8191;
  $10832 = (($4) + 233704|0);
  $10833 = (($10832) + ($10831<<2)|0);
  $10834 = +HEAPF32[$10833>>2];
  $10835 = (($4) + 266472|0);
  HEAPF32[$10835>>2] = $10834;
  $10836 = $fTemp16;
  $10837 = 0.25 * $10836;
  $10838 = $fTemp29;
  $10839 = 0.25 * $10838;
  $10840 = $10837 - $10839;
  $fTemp240 = $10840;
  $10841 = $fTemp43;
  $10842 = 0.25 * $10841;
  $10843 = $fTemp56;
  $10844 = 0.25 * $10843;
  $10845 = $10842 - $10844;
  $fTemp241 = $10845;
  $10846 = $fTemp240;
  $10847 = $fTemp241;
  $10848 = $10846 + $10847;
  $fTemp242 = $10848;
  $10849 = $fTemp71;
  $10850 = 0.25 * $10849;
  $10851 = $fTemp84;
  $10852 = 0.25 * $10851;
  $10853 = $10850 - $10852;
  $fTemp243 = $10853;
  $10854 = $fTemp98;
  $10855 = 0.25 * $10854;
  $10856 = $fTemp111;
  $10857 = 0.25 * $10856;
  $10858 = $10855 - $10857;
  $fTemp244 = $10858;
  $10859 = $fTemp243;
  $10860 = $fTemp244;
  $10861 = $10859 + $10860;
  $fTemp245 = $10861;
  $10862 = $fTemp242;
  $10863 = $fTemp245;
  $10864 = $10862 + $10863;
  $fTemp246 = $10864;
  $10865 = $fTemp127;
  $10866 = 0.25 * $10865;
  $10867 = $fTemp140;
  $10868 = 0.25 * $10867;
  $10869 = $10866 - $10868;
  $fTemp247 = $10869;
  $10870 = $fTemp154;
  $10871 = 0.25 * $10870;
  $10872 = $fTemp167;
  $10873 = 0.25 * $10872;
  $10874 = $10871 - $10873;
  $fTemp248 = $10874;
  $10875 = $fTemp247;
  $10876 = $fTemp248;
  $10877 = $10875 + $10876;
  $fTemp249 = $10877;
  $10878 = $fTemp182;
  $10879 = 0.25 * $10878;
  $10880 = $fTemp195;
  $10881 = 0.25 * $10880;
  $10882 = $10879 - $10881;
  $fTemp250 = $10882;
  $10883 = $fTemp209;
  $10884 = 0.25 * $10883;
  $10885 = $fTemp222;
  $10886 = 0.25 * $10885;
  $10887 = $10884 - $10886;
  $fTemp251 = $10887;
  $10888 = $fTemp250;
  $10889 = $fTemp251;
  $10890 = $10888 + $10889;
  $fTemp252 = $10890;
  $10891 = $fTemp249;
  $10892 = $fTemp252;
  $10893 = $10891 + $10892;
  $fTemp253 = $10893;
  $10894 = $fTemp228;
  $10895 = $fSlow5;
  $10896 = $fTemp246;
  $10897 = $fTemp253;
  $10898 = $10896 + $10897;
  $10899 = $10895 * $10898;
  $10900 = $10894 + $10899;
  $10901 = (($4) + 4228|0);
  $10902 = HEAP32[$10901>>2]|0;
  $10903 = $10902 & 8191;
  $10904 = (($4) + 266484|0);
  $10905 = (($10904) + ($10903<<2)|0);
  HEAPF32[$10905>>2] = $10900;
  $10906 = (($4) + 4228|0);
  $10907 = HEAP32[$10906>>2]|0;
  $10908 = $iSlow191;
  $10909 = (($10907) - ($10908))|0;
  $10910 = $10909 & 8191;
  $10911 = (($4) + 266484|0);
  $10912 = (($10911) + ($10910<<2)|0);
  $10913 = +HEAPF32[$10912>>2];
  $10914 = (($4) + 299252|0);
  HEAPF32[$10914>>2] = $10913;
  $10915 = $fTemp231;
  $10916 = $fSlow5;
  $10917 = $fTemp246;
  $10918 = $fTemp253;
  $10919 = $10917 - $10918;
  $10920 = $10916 * $10919;
  $10921 = $10915 + $10920;
  $10922 = (($4) + 4228|0);
  $10923 = HEAP32[$10922>>2]|0;
  $10924 = $10923 & 8191;
  $10925 = (($4) + 299264|0);
  $10926 = (($10925) + ($10924<<2)|0);
  HEAPF32[$10926>>2] = $10921;
  $10927 = (($4) + 4228|0);
  $10928 = HEAP32[$10927>>2]|0;
  $10929 = $iSlow192;
  $10930 = (($10928) - ($10929))|0;
  $10931 = $10930 & 8191;
  $10932 = (($4) + 299264|0);
  $10933 = (($10932) + ($10931<<2)|0);
  $10934 = +HEAPF32[$10933>>2];
  $10935 = (($4) + 332032|0);
  HEAPF32[$10935>>2] = $10934;
  $10936 = $fTemp242;
  $10937 = $fTemp245;
  $10938 = $10936 - $10937;
  $fTemp254 = $10938;
  $10939 = $fTemp249;
  $10940 = $fTemp252;
  $10941 = $10939 - $10940;
  $fTemp255 = $10941;
  $10942 = $fTemp228;
  $10943 = $fSlow5;
  $10944 = $fTemp254;
  $10945 = $fTemp255;
  $10946 = $10944 + $10945;
  $10947 = $10943 * $10946;
  $10948 = $10942 + $10947;
  $10949 = (($4) + 4228|0);
  $10950 = HEAP32[$10949>>2]|0;
  $10951 = $10950 & 8191;
  $10952 = (($4) + 332044|0);
  $10953 = (($10952) + ($10951<<2)|0);
  HEAPF32[$10953>>2] = $10948;
  $10954 = (($4) + 4228|0);
  $10955 = HEAP32[$10954>>2]|0;
  $10956 = $iSlow193;
  $10957 = (($10955) - ($10956))|0;
  $10958 = $10957 & 8191;
  $10959 = (($4) + 332044|0);
  $10960 = (($10959) + ($10958<<2)|0);
  $10961 = +HEAPF32[$10960>>2];
  $10962 = (($4) + 364812|0);
  HEAPF32[$10962>>2] = $10961;
  $10963 = $fTemp231;
  $10964 = $fSlow5;
  $10965 = $fTemp254;
  $10966 = $fTemp255;
  $10967 = $10965 - $10966;
  $10968 = $10964 * $10967;
  $10969 = $10963 + $10968;
  $10970 = (($4) + 4228|0);
  $10971 = HEAP32[$10970>>2]|0;
  $10972 = $10971 & 8191;
  $10973 = (($4) + 364824|0);
  $10974 = (($10973) + ($10972<<2)|0);
  HEAPF32[$10974>>2] = $10969;
  $10975 = (($4) + 4228|0);
  $10976 = HEAP32[$10975>>2]|0;
  $10977 = $iSlow194;
  $10978 = (($10976) - ($10977))|0;
  $10979 = $10978 & 8191;
  $10980 = (($4) + 364824|0);
  $10981 = (($10980) + ($10979<<2)|0);
  $10982 = +HEAPF32[$10981>>2];
  $10983 = (($4) + 397592|0);
  HEAPF32[$10983>>2] = $10982;
  $10984 = $fTemp240;
  $10985 = $fTemp241;
  $10986 = $10984 - $10985;
  $fTemp256 = $10986;
  $10987 = $fTemp243;
  $10988 = $fTemp244;
  $10989 = $10987 - $10988;
  $fTemp257 = $10989;
  $10990 = $fTemp256;
  $10991 = $fTemp257;
  $10992 = $10990 + $10991;
  $fTemp258 = $10992;
  $10993 = $fTemp247;
  $10994 = $fTemp248;
  $10995 = $10993 - $10994;
  $fTemp259 = $10995;
  $10996 = $fTemp250;
  $10997 = $fTemp251;
  $10998 = $10996 - $10997;
  $fTemp260 = $10998;
  $10999 = $fTemp259;
  $11000 = $fTemp260;
  $11001 = $10999 + $11000;
  $fTemp261 = $11001;
  $11002 = $fTemp228;
  $11003 = $fSlow5;
  $11004 = $fTemp258;
  $11005 = $fTemp261;
  $11006 = $11004 + $11005;
  $11007 = $11003 * $11006;
  $11008 = $11002 + $11007;
  $11009 = (($4) + 4228|0);
  $11010 = HEAP32[$11009>>2]|0;
  $11011 = $11010 & 8191;
  $11012 = (($4) + 397604|0);
  $11013 = (($11012) + ($11011<<2)|0);
  HEAPF32[$11013>>2] = $11008;
  $11014 = (($4) + 4228|0);
  $11015 = HEAP32[$11014>>2]|0;
  $11016 = $iSlow195;
  $11017 = (($11015) - ($11016))|0;
  $11018 = $11017 & 8191;
  $11019 = (($4) + 397604|0);
  $11020 = (($11019) + ($11018<<2)|0);
  $11021 = +HEAPF32[$11020>>2];
  $11022 = (($4) + 430372|0);
  HEAPF32[$11022>>2] = $11021;
  $11023 = $fTemp231;
  $11024 = $fSlow5;
  $11025 = $fTemp258;
  $11026 = $fTemp261;
  $11027 = $11025 - $11026;
  $11028 = $11024 * $11027;
  $11029 = $11023 + $11028;
  $11030 = (($4) + 4228|0);
  $11031 = HEAP32[$11030>>2]|0;
  $11032 = $11031 & 8191;
  $11033 = (($4) + 430384|0);
  $11034 = (($11033) + ($11032<<2)|0);
  HEAPF32[$11034>>2] = $11029;
  $11035 = (($4) + 4228|0);
  $11036 = HEAP32[$11035>>2]|0;
  $11037 = $iSlow196;
  $11038 = (($11036) - ($11037))|0;
  $11039 = $11038 & 8191;
  $11040 = (($4) + 430384|0);
  $11041 = (($11040) + ($11039<<2)|0);
  $11042 = +HEAPF32[$11041>>2];
  $11043 = (($4) + 463152|0);
  HEAPF32[$11043>>2] = $11042;
  $11044 = $fTemp256;
  $11045 = $fTemp257;
  $11046 = $11044 - $11045;
  $fTemp262 = $11046;
  $11047 = $fTemp259;
  $11048 = $fTemp260;
  $11049 = $11047 - $11048;
  $fTemp263 = $11049;
  $11050 = $fTemp228;
  $11051 = $fSlow5;
  $11052 = $fTemp262;
  $11053 = $fTemp263;
  $11054 = $11052 + $11053;
  $11055 = $11051 * $11054;
  $11056 = $11050 + $11055;
  $11057 = (($4) + 4228|0);
  $11058 = HEAP32[$11057>>2]|0;
  $11059 = $11058 & 8191;
  $11060 = (($4) + 463164|0);
  $11061 = (($11060) + ($11059<<2)|0);
  HEAPF32[$11061>>2] = $11056;
  $11062 = (($4) + 4228|0);
  $11063 = HEAP32[$11062>>2]|0;
  $11064 = $iSlow197;
  $11065 = (($11063) - ($11064))|0;
  $11066 = $11065 & 8191;
  $11067 = (($4) + 463164|0);
  $11068 = (($11067) + ($11066<<2)|0);
  $11069 = +HEAPF32[$11068>>2];
  $11070 = (($4) + 495932|0);
  HEAPF32[$11070>>2] = $11069;
  $11071 = $fTemp231;
  $11072 = $fSlow5;
  $11073 = $fTemp262;
  $11074 = $fTemp263;
  $11075 = $11073 - $11074;
  $11076 = $11072 * $11075;
  $11077 = $11071 + $11076;
  $11078 = (($4) + 4228|0);
  $11079 = HEAP32[$11078>>2]|0;
  $11080 = $11079 & 8191;
  $11081 = (($4) + 495944|0);
  $11082 = (($11081) + ($11080<<2)|0);
  HEAPF32[$11082>>2] = $11077;
  $11083 = (($4) + 4228|0);
  $11084 = HEAP32[$11083>>2]|0;
  $11085 = $iSlow198;
  $11086 = (($11084) - ($11085))|0;
  $11087 = $11086 & 8191;
  $11088 = (($4) + 495944|0);
  $11089 = (($11088) + ($11087<<2)|0);
  $11090 = +HEAPF32[$11089>>2];
  $11091 = (($4) + 528712|0);
  HEAPF32[$11091>>2] = $11090;
  $11092 = $fSlow0;
  $11093 = (($4) + 37000|0);
  $11094 = +HEAPF32[$11093>>2];
  $11095 = (($4) + 102572|0);
  $11096 = +HEAPF32[$11095>>2];
  $11097 = $11094 + $11096;
  $11098 = (($4) + 168132|0);
  $11099 = +HEAPF32[$11098>>2];
  $11100 = $11097 + $11099;
  $11101 = (($4) + 233692|0);
  $11102 = +HEAPF32[$11101>>2];
  $11103 = $11100 + $11102;
  $11104 = (($4) + 299252|0);
  $11105 = +HEAPF32[$11104>>2];
  $11106 = $11103 + $11105;
  $11107 = (($4) + 364812|0);
  $11108 = +HEAPF32[$11107>>2];
  $11109 = $11106 + $11108;
  $11110 = (($4) + 430372|0);
  $11111 = +HEAPF32[$11110>>2];
  $11112 = $11109 + $11111;
  $11113 = (($4) + 495932|0);
  $11114 = +HEAPF32[$11113>>2];
  $11115 = $11112 + $11114;
  $11116 = $11092 * $11115;
  $11117 = $i;
  $11118 = $output0;
  $11119 = (($11118) + ($11117<<2)|0);
  HEAPF32[$11119>>2] = $11116;
  $11120 = $fSlow0;
  $11121 = (($4) + 69792|0);
  $11122 = +HEAPF32[$11121>>2];
  $11123 = (($4) + 135352|0);
  $11124 = +HEAPF32[$11123>>2];
  $11125 = $11122 + $11124;
  $11126 = (($4) + 200912|0);
  $11127 = +HEAPF32[$11126>>2];
  $11128 = $11125 + $11127;
  $11129 = (($4) + 266472|0);
  $11130 = +HEAPF32[$11129>>2];
  $11131 = $11128 + $11130;
  $11132 = (($4) + 332032|0);
  $11133 = +HEAPF32[$11132>>2];
  $11134 = $11131 + $11133;
  $11135 = (($4) + 397592|0);
  $11136 = +HEAPF32[$11135>>2];
  $11137 = $11134 + $11136;
  $11138 = (($4) + 463152|0);
  $11139 = +HEAPF32[$11138>>2];
  $11140 = $11137 + $11139;
  $11141 = (($4) + 528712|0);
  $11142 = +HEAPF32[$11141>>2];
  $11143 = $11140 + $11142;
  $11144 = $11120 * $11143;
  $11145 = $i;
  $11146 = $output1;
  $11147 = (($11146) + ($11145<<2)|0);
  HEAPF32[$11147>>2] = $11144;
  $11148 = (($4) + 528712|0);
  $11149 = (($11148) + 4|0);
  $11150 = +HEAPF32[$11149>>2];
  $11151 = (($4) + 528712|0);
  $11152 = (($11151) + 8|0);
  HEAPF32[$11152>>2] = $11150;
  $11153 = (($4) + 528712|0);
  $11154 = +HEAPF32[$11153>>2];
  $11155 = (($4) + 528712|0);
  $11156 = (($11155) + 4|0);
  HEAPF32[$11156>>2] = $11154;
  $11157 = (($4) + 495932|0);
  $11158 = (($11157) + 4|0);
  $11159 = +HEAPF32[$11158>>2];
  $11160 = (($4) + 495932|0);
  $11161 = (($11160) + 8|0);
  HEAPF32[$11161>>2] = $11159;
  $11162 = (($4) + 495932|0);
  $11163 = +HEAPF32[$11162>>2];
  $11164 = (($4) + 495932|0);
  $11165 = (($11164) + 4|0);
  HEAPF32[$11165>>2] = $11163;
  $11166 = (($4) + 463152|0);
  $11167 = (($11166) + 4|0);
  $11168 = +HEAPF32[$11167>>2];
  $11169 = (($4) + 463152|0);
  $11170 = (($11169) + 8|0);
  HEAPF32[$11170>>2] = $11168;
  $11171 = (($4) + 463152|0);
  $11172 = +HEAPF32[$11171>>2];
  $11173 = (($4) + 463152|0);
  $11174 = (($11173) + 4|0);
  HEAPF32[$11174>>2] = $11172;
  $11175 = (($4) + 430372|0);
  $11176 = (($11175) + 4|0);
  $11177 = +HEAPF32[$11176>>2];
  $11178 = (($4) + 430372|0);
  $11179 = (($11178) + 8|0);
  HEAPF32[$11179>>2] = $11177;
  $11180 = (($4) + 430372|0);
  $11181 = +HEAPF32[$11180>>2];
  $11182 = (($4) + 430372|0);
  $11183 = (($11182) + 4|0);
  HEAPF32[$11183>>2] = $11181;
  $11184 = (($4) + 397592|0);
  $11185 = (($11184) + 4|0);
  $11186 = +HEAPF32[$11185>>2];
  $11187 = (($4) + 397592|0);
  $11188 = (($11187) + 8|0);
  HEAPF32[$11188>>2] = $11186;
  $11189 = (($4) + 397592|0);
  $11190 = +HEAPF32[$11189>>2];
  $11191 = (($4) + 397592|0);
  $11192 = (($11191) + 4|0);
  HEAPF32[$11192>>2] = $11190;
  $11193 = (($4) + 364812|0);
  $11194 = (($11193) + 4|0);
  $11195 = +HEAPF32[$11194>>2];
  $11196 = (($4) + 364812|0);
  $11197 = (($11196) + 8|0);
  HEAPF32[$11197>>2] = $11195;
  $11198 = (($4) + 364812|0);
  $11199 = +HEAPF32[$11198>>2];
  $11200 = (($4) + 364812|0);
  $11201 = (($11200) + 4|0);
  HEAPF32[$11201>>2] = $11199;
  $11202 = (($4) + 332032|0);
  $11203 = (($11202) + 4|0);
  $11204 = +HEAPF32[$11203>>2];
  $11205 = (($4) + 332032|0);
  $11206 = (($11205) + 8|0);
  HEAPF32[$11206>>2] = $11204;
  $11207 = (($4) + 332032|0);
  $11208 = +HEAPF32[$11207>>2];
  $11209 = (($4) + 332032|0);
  $11210 = (($11209) + 4|0);
  HEAPF32[$11210>>2] = $11208;
  $11211 = (($4) + 299252|0);
  $11212 = (($11211) + 4|0);
  $11213 = +HEAPF32[$11212>>2];
  $11214 = (($4) + 299252|0);
  $11215 = (($11214) + 8|0);
  HEAPF32[$11215>>2] = $11213;
  $11216 = (($4) + 299252|0);
  $11217 = +HEAPF32[$11216>>2];
  $11218 = (($4) + 299252|0);
  $11219 = (($11218) + 4|0);
  HEAPF32[$11219>>2] = $11217;
  $11220 = (($4) + 266472|0);
  $11221 = (($11220) + 4|0);
  $11222 = +HEAPF32[$11221>>2];
  $11223 = (($4) + 266472|0);
  $11224 = (($11223) + 8|0);
  HEAPF32[$11224>>2] = $11222;
  $11225 = (($4) + 266472|0);
  $11226 = +HEAPF32[$11225>>2];
  $11227 = (($4) + 266472|0);
  $11228 = (($11227) + 4|0);
  HEAPF32[$11228>>2] = $11226;
  $11229 = (($4) + 233692|0);
  $11230 = (($11229) + 4|0);
  $11231 = +HEAPF32[$11230>>2];
  $11232 = (($4) + 233692|0);
  $11233 = (($11232) + 8|0);
  HEAPF32[$11233>>2] = $11231;
  $11234 = (($4) + 233692|0);
  $11235 = +HEAPF32[$11234>>2];
  $11236 = (($4) + 233692|0);
  $11237 = (($11236) + 4|0);
  HEAPF32[$11237>>2] = $11235;
  $11238 = (($4) + 200912|0);
  $11239 = (($11238) + 4|0);
  $11240 = +HEAPF32[$11239>>2];
  $11241 = (($4) + 200912|0);
  $11242 = (($11241) + 8|0);
  HEAPF32[$11242>>2] = $11240;
  $11243 = (($4) + 200912|0);
  $11244 = +HEAPF32[$11243>>2];
  $11245 = (($4) + 200912|0);
  $11246 = (($11245) + 4|0);
  HEAPF32[$11246>>2] = $11244;
  $11247 = (($4) + 168132|0);
  $11248 = (($11247) + 4|0);
  $11249 = +HEAPF32[$11248>>2];
  $11250 = (($4) + 168132|0);
  $11251 = (($11250) + 8|0);
  HEAPF32[$11251>>2] = $11249;
  $11252 = (($4) + 168132|0);
  $11253 = +HEAPF32[$11252>>2];
  $11254 = (($4) + 168132|0);
  $11255 = (($11254) + 4|0);
  HEAPF32[$11255>>2] = $11253;
  $11256 = (($4) + 135352|0);
  $11257 = (($11256) + 4|0);
  $11258 = +HEAPF32[$11257>>2];
  $11259 = (($4) + 135352|0);
  $11260 = (($11259) + 8|0);
  HEAPF32[$11260>>2] = $11258;
  $11261 = (($4) + 135352|0);
  $11262 = +HEAPF32[$11261>>2];
  $11263 = (($4) + 135352|0);
  $11264 = (($11263) + 4|0);
  HEAPF32[$11264>>2] = $11262;
  $11265 = (($4) + 102572|0);
  $11266 = (($11265) + 4|0);
  $11267 = +HEAPF32[$11266>>2];
  $11268 = (($4) + 102572|0);
  $11269 = (($11268) + 8|0);
  HEAPF32[$11269>>2] = $11267;
  $11270 = (($4) + 102572|0);
  $11271 = +HEAPF32[$11270>>2];
  $11272 = (($4) + 102572|0);
  $11273 = (($11272) + 4|0);
  HEAPF32[$11273>>2] = $11271;
  $11274 = (($4) + 69792|0);
  $11275 = (($11274) + 4|0);
  $11276 = +HEAPF32[$11275>>2];
  $11277 = (($4) + 69792|0);
  $11278 = (($11277) + 8|0);
  HEAPF32[$11278>>2] = $11276;
  $11279 = (($4) + 69792|0);
  $11280 = +HEAPF32[$11279>>2];
  $11281 = (($4) + 69792|0);
  $11282 = (($11281) + 4|0);
  HEAPF32[$11282>>2] = $11280;
  $11283 = (($4) + 37016|0);
  $11284 = +HEAPF32[$11283>>2];
  $11285 = (($4) + 37016|0);
  $11286 = (($11285) + 4|0);
  HEAPF32[$11286>>2] = $11284;
  $11287 = (($4) + 37000|0);
  $11288 = (($11287) + 4|0);
  $11289 = +HEAPF32[$11288>>2];
  $11290 = (($4) + 37000|0);
  $11291 = (($11290) + 8|0);
  HEAPF32[$11291>>2] = $11289;
  $11292 = (($4) + 37000|0);
  $11293 = +HEAPF32[$11292>>2];
  $11294 = (($4) + 37000|0);
  $11295 = (($11294) + 4|0);
  HEAPF32[$11295>>2] = $11293;
  $11296 = (($4) + 4228|0);
  $11297 = HEAP32[$11296>>2]|0;
  $11298 = (($11297) + 1)|0;
  $11299 = (($4) + 4228|0);
  HEAP32[$11299>>2] = $11298;
  $11300 = (($4) + 4216|0);
  $11301 = (($11300) + 4|0);
  $11302 = +HEAPF32[$11301>>2];
  $11303 = (($4) + 4216|0);
  $11304 = (($11303) + 8|0);
  HEAPF32[$11304>>2] = $11302;
  $11305 = (($4) + 4216|0);
  $11306 = +HEAPF32[$11305>>2];
  $11307 = (($4) + 4216|0);
  $11308 = (($11307) + 4|0);
  HEAPF32[$11308>>2] = $11306;
  $11309 = (($4) + 4208|0);
  $11310 = +HEAPF32[$11309>>2];
  $11311 = (($4) + 4208|0);
  $11312 = (($11311) + 4|0);
  HEAPF32[$11312>>2] = $11310;
  $11313 = (($4) + 4196|0);
  $11314 = (($11313) + 4|0);
  $11315 = +HEAPF32[$11314>>2];
  $11316 = (($4) + 4196|0);
  $11317 = (($11316) + 8|0);
  HEAPF32[$11317>>2] = $11315;
  $11318 = (($4) + 4196|0);
  $11319 = +HEAPF32[$11318>>2];
  $11320 = (($4) + 4196|0);
  $11321 = (($11320) + 4|0);
  HEAPF32[$11321>>2] = $11319;
  $11322 = (($4) + 4188|0);
  $11323 = +HEAPF32[$11322>>2];
  $11324 = (($4) + 4188|0);
  $11325 = (($11324) + 4|0);
  HEAPF32[$11325>>2] = $11323;
  $11326 = (($4) + 4180|0);
  $11327 = +HEAPF32[$11326>>2];
  $11328 = (($4) + 4180|0);
  $11329 = (($11328) + 4|0);
  HEAPF32[$11329>>2] = $11327;
  $11330 = (($4) + 4168|0);
  $11331 = (($11330) + 4|0);
  $11332 = +HEAPF32[$11331>>2];
  $11333 = (($4) + 4168|0);
  $11334 = (($11333) + 8|0);
  HEAPF32[$11334>>2] = $11332;
  $11335 = (($4) + 4168|0);
  $11336 = +HEAPF32[$11335>>2];
  $11337 = (($4) + 4168|0);
  $11338 = (($11337) + 4|0);
  HEAPF32[$11338>>2] = $11336;
  $11339 = (($4) + 4160|0);
  $11340 = +HEAPF32[$11339>>2];
  $11341 = (($4) + 4160|0);
  $11342 = (($11341) + 4|0);
  HEAPF32[$11342>>2] = $11340;
  $11343 = (($4) + 4148|0);
  $11344 = (($11343) + 4|0);
  $11345 = +HEAPF32[$11344>>2];
  $11346 = (($4) + 4148|0);
  $11347 = (($11346) + 8|0);
  HEAPF32[$11347>>2] = $11345;
  $11348 = (($4) + 4148|0);
  $11349 = +HEAPF32[$11348>>2];
  $11350 = (($4) + 4148|0);
  $11351 = (($11350) + 4|0);
  HEAPF32[$11351>>2] = $11349;
  $11352 = (($4) + 4136|0);
  $11353 = (($11352) + 4|0);
  $11354 = +HEAPF32[$11353>>2];
  $11355 = (($4) + 4136|0);
  $11356 = (($11355) + 8|0);
  HEAPF32[$11356>>2] = $11354;
  $11357 = (($4) + 4136|0);
  $11358 = +HEAPF32[$11357>>2];
  $11359 = (($4) + 4136|0);
  $11360 = (($11359) + 4|0);
  HEAPF32[$11360>>2] = $11358;
  $11361 = (($4) + 4128|0);
  $11362 = +HEAPF32[$11361>>2];
  $11363 = (($4) + 4128|0);
  $11364 = (($11363) + 4|0);
  HEAPF32[$11364>>2] = $11362;
  $11365 = (($4) + 4120|0);
  $11366 = +HEAPF32[$11365>>2];
  $11367 = (($4) + 4120|0);
  $11368 = (($11367) + 4|0);
  HEAPF32[$11368>>2] = $11366;
  $11369 = (($4) + 4108|0);
  $11370 = (($11369) + 4|0);
  $11371 = +HEAPF32[$11370>>2];
  $11372 = (($4) + 4108|0);
  $11373 = (($11372) + 8|0);
  HEAPF32[$11373>>2] = $11371;
  $11374 = (($4) + 4108|0);
  $11375 = +HEAPF32[$11374>>2];
  $11376 = (($4) + 4108|0);
  $11377 = (($11376) + 4|0);
  HEAPF32[$11377>>2] = $11375;
  $11378 = (($4) + 4100|0);
  $11379 = +HEAPF32[$11378>>2];
  $11380 = (($4) + 4100|0);
  $11381 = (($11380) + 4|0);
  HEAPF32[$11381>>2] = $11379;
  $11382 = (($4) + 4088|0);
  $11383 = (($11382) + 4|0);
  $11384 = +HEAPF32[$11383>>2];
  $11385 = (($4) + 4088|0);
  $11386 = (($11385) + 8|0);
  HEAPF32[$11386>>2] = $11384;
  $11387 = (($4) + 4088|0);
  $11388 = +HEAPF32[$11387>>2];
  $11389 = (($4) + 4088|0);
  $11390 = (($11389) + 4|0);
  HEAPF32[$11390>>2] = $11388;
  $11391 = (($4) + 4076|0);
  $11392 = (($11391) + 4|0);
  $11393 = +HEAPF32[$11392>>2];
  $11394 = (($4) + 4076|0);
  $11395 = (($11394) + 8|0);
  HEAPF32[$11395>>2] = $11393;
  $11396 = (($4) + 4076|0);
  $11397 = +HEAPF32[$11396>>2];
  $11398 = (($4) + 4076|0);
  $11399 = (($11398) + 4|0);
  HEAPF32[$11399>>2] = $11397;
  $11400 = (($4) + 4064|0);
  $11401 = (($11400) + 4|0);
  $11402 = +HEAPF32[$11401>>2];
  $11403 = (($4) + 4064|0);
  $11404 = (($11403) + 8|0);
  HEAPF32[$11404>>2] = $11402;
  $11405 = (($4) + 4064|0);
  $11406 = +HEAPF32[$11405>>2];
  $11407 = (($4) + 4064|0);
  $11408 = (($11407) + 4|0);
  HEAPF32[$11408>>2] = $11406;
  $11409 = (($4) + 4056|0);
  $11410 = +HEAPF32[$11409>>2];
  $11411 = (($4) + 4056|0);
  $11412 = (($11411) + 4|0);
  HEAPF32[$11412>>2] = $11410;
  $11413 = (($4) + 4048|0);
  $11414 = +HEAPF32[$11413>>2];
  $11415 = (($4) + 4048|0);
  $11416 = (($11415) + 4|0);
  HEAPF32[$11416>>2] = $11414;
  $11417 = (($4) + 4036|0);
  $11418 = (($11417) + 4|0);
  $11419 = +HEAPF32[$11418>>2];
  $11420 = (($4) + 4036|0);
  $11421 = (($11420) + 8|0);
  HEAPF32[$11421>>2] = $11419;
  $11422 = (($4) + 4036|0);
  $11423 = +HEAPF32[$11422>>2];
  $11424 = (($4) + 4036|0);
  $11425 = (($11424) + 4|0);
  HEAPF32[$11425>>2] = $11423;
  $11426 = (($4) + 4028|0);
  $11427 = +HEAPF32[$11426>>2];
  $11428 = (($4) + 4028|0);
  $11429 = (($11428) + 4|0);
  HEAPF32[$11429>>2] = $11427;
  $11430 = (($4) + 4016|0);
  $11431 = (($11430) + 4|0);
  $11432 = +HEAPF32[$11431>>2];
  $11433 = (($4) + 4016|0);
  $11434 = (($11433) + 8|0);
  HEAPF32[$11434>>2] = $11432;
  $11435 = (($4) + 4016|0);
  $11436 = +HEAPF32[$11435>>2];
  $11437 = (($4) + 4016|0);
  $11438 = (($11437) + 4|0);
  HEAPF32[$11438>>2] = $11436;
  $11439 = (($4) + 4004|0);
  $11440 = (($11439) + 4|0);
  $11441 = +HEAPF32[$11440>>2];
  $11442 = (($4) + 4004|0);
  $11443 = (($11442) + 8|0);
  HEAPF32[$11443>>2] = $11441;
  $11444 = (($4) + 4004|0);
  $11445 = +HEAPF32[$11444>>2];
  $11446 = (($4) + 4004|0);
  $11447 = (($11446) + 4|0);
  HEAPF32[$11447>>2] = $11445;
  $11448 = (($4) + 3992|0);
  $11449 = (($11448) + 4|0);
  $11450 = +HEAPF32[$11449>>2];
  $11451 = (($4) + 3992|0);
  $11452 = (($11451) + 8|0);
  HEAPF32[$11452>>2] = $11450;
  $11453 = (($4) + 3992|0);
  $11454 = +HEAPF32[$11453>>2];
  $11455 = (($4) + 3992|0);
  $11456 = (($11455) + 4|0);
  HEAPF32[$11456>>2] = $11454;
  $11457 = (($4) + 3980|0);
  $11458 = (($11457) + 4|0);
  $11459 = +HEAPF32[$11458>>2];
  $11460 = (($4) + 3980|0);
  $11461 = (($11460) + 8|0);
  HEAPF32[$11461>>2] = $11459;
  $11462 = (($4) + 3980|0);
  $11463 = +HEAPF32[$11462>>2];
  $11464 = (($4) + 3980|0);
  $11465 = (($11464) + 4|0);
  HEAPF32[$11465>>2] = $11463;
  $11466 = (($4) + 3972|0);
  $11467 = +HEAPF32[$11466>>2];
  $11468 = (($4) + 3972|0);
  $11469 = (($11468) + 4|0);
  HEAPF32[$11469>>2] = $11467;
  $11470 = (($4) + 3960|0);
  $11471 = (($11470) + 4|0);
  $11472 = +HEAPF32[$11471>>2];
  $11473 = (($4) + 3960|0);
  $11474 = (($11473) + 8|0);
  HEAPF32[$11474>>2] = $11472;
  $11475 = (($4) + 3960|0);
  $11476 = +HEAPF32[$11475>>2];
  $11477 = (($4) + 3960|0);
  $11478 = (($11477) + 4|0);
  HEAPF32[$11478>>2] = $11476;
  $11479 = (($4) + 3952|0);
  $11480 = +HEAPF32[$11479>>2];
  $11481 = (($4) + 3952|0);
  $11482 = (($11481) + 4|0);
  HEAPF32[$11482>>2] = $11480;
  $11483 = (($4) + 3940|0);
  $11484 = (($11483) + 4|0);
  $11485 = +HEAPF32[$11484>>2];
  $11486 = (($4) + 3940|0);
  $11487 = (($11486) + 8|0);
  HEAPF32[$11487>>2] = $11485;
  $11488 = (($4) + 3940|0);
  $11489 = +HEAPF32[$11488>>2];
  $11490 = (($4) + 3940|0);
  $11491 = (($11490) + 4|0);
  HEAPF32[$11491>>2] = $11489;
  $11492 = (($4) + 3932|0);
  $11493 = +HEAPF32[$11492>>2];
  $11494 = (($4) + 3932|0);
  $11495 = (($11494) + 4|0);
  HEAPF32[$11495>>2] = $11493;
  $11496 = (($4) + 3924|0);
  $11497 = +HEAPF32[$11496>>2];
  $11498 = (($4) + 3924|0);
  $11499 = (($11498) + 4|0);
  HEAPF32[$11499>>2] = $11497;
  $11500 = (($4) + 3912|0);
  $11501 = (($11500) + 4|0);
  $11502 = +HEAPF32[$11501>>2];
  $11503 = (($4) + 3912|0);
  $11504 = (($11503) + 8|0);
  HEAPF32[$11504>>2] = $11502;
  $11505 = (($4) + 3912|0);
  $11506 = +HEAPF32[$11505>>2];
  $11507 = (($4) + 3912|0);
  $11508 = (($11507) + 4|0);
  HEAPF32[$11508>>2] = $11506;
  $11509 = (($4) + 3904|0);
  $11510 = +HEAPF32[$11509>>2];
  $11511 = (($4) + 3904|0);
  $11512 = (($11511) + 4|0);
  HEAPF32[$11512>>2] = $11510;
  $11513 = (($4) + 3892|0);
  $11514 = (($11513) + 4|0);
  $11515 = +HEAPF32[$11514>>2];
  $11516 = (($4) + 3892|0);
  $11517 = (($11516) + 8|0);
  HEAPF32[$11517>>2] = $11515;
  $11518 = (($4) + 3892|0);
  $11519 = +HEAPF32[$11518>>2];
  $11520 = (($4) + 3892|0);
  $11521 = (($11520) + 4|0);
  HEAPF32[$11521>>2] = $11519;
  $11522 = (($4) + 3880|0);
  $11523 = (($11522) + 4|0);
  $11524 = +HEAPF32[$11523>>2];
  $11525 = (($4) + 3880|0);
  $11526 = (($11525) + 8|0);
  HEAPF32[$11526>>2] = $11524;
  $11527 = (($4) + 3880|0);
  $11528 = +HEAPF32[$11527>>2];
  $11529 = (($4) + 3880|0);
  $11530 = (($11529) + 4|0);
  HEAPF32[$11530>>2] = $11528;
  $11531 = (($4) + 3872|0);
  $11532 = +HEAPF32[$11531>>2];
  $11533 = (($4) + 3872|0);
  $11534 = (($11533) + 4|0);
  HEAPF32[$11534>>2] = $11532;
  $11535 = (($4) + 3864|0);
  $11536 = +HEAPF32[$11535>>2];
  $11537 = (($4) + 3864|0);
  $11538 = (($11537) + 4|0);
  HEAPF32[$11538>>2] = $11536;
  $11539 = (($4) + 3852|0);
  $11540 = (($11539) + 4|0);
  $11541 = +HEAPF32[$11540>>2];
  $11542 = (($4) + 3852|0);
  $11543 = (($11542) + 8|0);
  HEAPF32[$11543>>2] = $11541;
  $11544 = (($4) + 3852|0);
  $11545 = +HEAPF32[$11544>>2];
  $11546 = (($4) + 3852|0);
  $11547 = (($11546) + 4|0);
  HEAPF32[$11547>>2] = $11545;
  $11548 = (($4) + 3844|0);
  $11549 = +HEAPF32[$11548>>2];
  $11550 = (($4) + 3844|0);
  $11551 = (($11550) + 4|0);
  HEAPF32[$11551>>2] = $11549;
  $11552 = (($4) + 3832|0);
  $11553 = (($11552) + 4|0);
  $11554 = +HEAPF32[$11553>>2];
  $11555 = (($4) + 3832|0);
  $11556 = (($11555) + 8|0);
  HEAPF32[$11556>>2] = $11554;
  $11557 = (($4) + 3832|0);
  $11558 = +HEAPF32[$11557>>2];
  $11559 = (($4) + 3832|0);
  $11560 = (($11559) + 4|0);
  HEAPF32[$11560>>2] = $11558;
  $11561 = (($4) + 3820|0);
  $11562 = (($11561) + 4|0);
  $11563 = +HEAPF32[$11562>>2];
  $11564 = (($4) + 3820|0);
  $11565 = (($11564) + 8|0);
  HEAPF32[$11565>>2] = $11563;
  $11566 = (($4) + 3820|0);
  $11567 = +HEAPF32[$11566>>2];
  $11568 = (($4) + 3820|0);
  $11569 = (($11568) + 4|0);
  HEAPF32[$11569>>2] = $11567;
  $11570 = (($4) + 3808|0);
  $11571 = (($11570) + 4|0);
  $11572 = +HEAPF32[$11571>>2];
  $11573 = (($4) + 3808|0);
  $11574 = (($11573) + 8|0);
  HEAPF32[$11574>>2] = $11572;
  $11575 = (($4) + 3808|0);
  $11576 = +HEAPF32[$11575>>2];
  $11577 = (($4) + 3808|0);
  $11578 = (($11577) + 4|0);
  HEAPF32[$11578>>2] = $11576;
  $11579 = (($4) + 3800|0);
  $11580 = +HEAPF32[$11579>>2];
  $11581 = (($4) + 3800|0);
  $11582 = (($11581) + 4|0);
  HEAPF32[$11582>>2] = $11580;
  $11583 = (($4) + 3792|0);
  $11584 = +HEAPF32[$11583>>2];
  $11585 = (($4) + 3792|0);
  $11586 = (($11585) + 4|0);
  HEAPF32[$11586>>2] = $11584;
  $11587 = (($4) + 3780|0);
  $11588 = (($11587) + 4|0);
  $11589 = +HEAPF32[$11588>>2];
  $11590 = (($4) + 3780|0);
  $11591 = (($11590) + 8|0);
  HEAPF32[$11591>>2] = $11589;
  $11592 = (($4) + 3780|0);
  $11593 = +HEAPF32[$11592>>2];
  $11594 = (($4) + 3780|0);
  $11595 = (($11594) + 4|0);
  HEAPF32[$11595>>2] = $11593;
  $11596 = (($4) + 3772|0);
  $11597 = +HEAPF32[$11596>>2];
  $11598 = (($4) + 3772|0);
  $11599 = (($11598) + 4|0);
  HEAPF32[$11599>>2] = $11597;
  $11600 = (($4) + 3760|0);
  $11601 = (($11600) + 4|0);
  $11602 = +HEAPF32[$11601>>2];
  $11603 = (($4) + 3760|0);
  $11604 = (($11603) + 8|0);
  HEAPF32[$11604>>2] = $11602;
  $11605 = (($4) + 3760|0);
  $11606 = +HEAPF32[$11605>>2];
  $11607 = (($4) + 3760|0);
  $11608 = (($11607) + 4|0);
  HEAPF32[$11608>>2] = $11606;
  $11609 = (($4) + 3748|0);
  $11610 = (($11609) + 4|0);
  $11611 = +HEAPF32[$11610>>2];
  $11612 = (($4) + 3748|0);
  $11613 = (($11612) + 8|0);
  HEAPF32[$11613>>2] = $11611;
  $11614 = (($4) + 3748|0);
  $11615 = +HEAPF32[$11614>>2];
  $11616 = (($4) + 3748|0);
  $11617 = (($11616) + 4|0);
  HEAPF32[$11617>>2] = $11615;
  $11618 = (($4) + 3736|0);
  $11619 = (($11618) + 4|0);
  $11620 = +HEAPF32[$11619>>2];
  $11621 = (($4) + 3736|0);
  $11622 = (($11621) + 8|0);
  HEAPF32[$11622>>2] = $11620;
  $11623 = (($4) + 3736|0);
  $11624 = +HEAPF32[$11623>>2];
  $11625 = (($4) + 3736|0);
  $11626 = (($11625) + 4|0);
  HEAPF32[$11626>>2] = $11624;
  $11627 = (($4) + 3724|0);
  $11628 = (($11627) + 4|0);
  $11629 = +HEAPF32[$11628>>2];
  $11630 = (($4) + 3724|0);
  $11631 = (($11630) + 8|0);
  HEAPF32[$11631>>2] = $11629;
  $11632 = (($4) + 3724|0);
  $11633 = +HEAPF32[$11632>>2];
  $11634 = (($4) + 3724|0);
  $11635 = (($11634) + 4|0);
  HEAPF32[$11635>>2] = $11633;
  $11636 = (($4) + 3716|0);
  $11637 = +HEAPF32[$11636>>2];
  $11638 = (($4) + 3716|0);
  $11639 = (($11638) + 4|0);
  HEAPF32[$11639>>2] = $11637;
  $11640 = (($4) + 3704|0);
  $11641 = (($11640) + 4|0);
  $11642 = +HEAPF32[$11641>>2];
  $11643 = (($4) + 3704|0);
  $11644 = (($11643) + 8|0);
  HEAPF32[$11644>>2] = $11642;
  $11645 = (($4) + 3704|0);
  $11646 = +HEAPF32[$11645>>2];
  $11647 = (($4) + 3704|0);
  $11648 = (($11647) + 4|0);
  HEAPF32[$11648>>2] = $11646;
  $11649 = (($4) + 3696|0);
  $11650 = +HEAPF32[$11649>>2];
  $11651 = (($4) + 3696|0);
  $11652 = (($11651) + 4|0);
  HEAPF32[$11652>>2] = $11650;
  $11653 = (($4) + 3684|0);
  $11654 = (($11653) + 4|0);
  $11655 = +HEAPF32[$11654>>2];
  $11656 = (($4) + 3684|0);
  $11657 = (($11656) + 8|0);
  HEAPF32[$11657>>2] = $11655;
  $11658 = (($4) + 3684|0);
  $11659 = +HEAPF32[$11658>>2];
  $11660 = (($4) + 3684|0);
  $11661 = (($11660) + 4|0);
  HEAPF32[$11661>>2] = $11659;
  $11662 = (($4) + 3676|0);
  $11663 = +HEAPF32[$11662>>2];
  $11664 = (($4) + 3676|0);
  $11665 = (($11664) + 4|0);
  HEAPF32[$11665>>2] = $11663;
  $11666 = (($4) + 3668|0);
  $11667 = +HEAPF32[$11666>>2];
  $11668 = (($4) + 3668|0);
  $11669 = (($11668) + 4|0);
  HEAPF32[$11669>>2] = $11667;
  $11670 = (($4) + 3656|0);
  $11671 = (($11670) + 4|0);
  $11672 = +HEAPF32[$11671>>2];
  $11673 = (($4) + 3656|0);
  $11674 = (($11673) + 8|0);
  HEAPF32[$11674>>2] = $11672;
  $11675 = (($4) + 3656|0);
  $11676 = +HEAPF32[$11675>>2];
  $11677 = (($4) + 3656|0);
  $11678 = (($11677) + 4|0);
  HEAPF32[$11678>>2] = $11676;
  $11679 = (($4) + 3648|0);
  $11680 = +HEAPF32[$11679>>2];
  $11681 = (($4) + 3648|0);
  $11682 = (($11681) + 4|0);
  HEAPF32[$11682>>2] = $11680;
  $11683 = (($4) + 3636|0);
  $11684 = (($11683) + 4|0);
  $11685 = +HEAPF32[$11684>>2];
  $11686 = (($4) + 3636|0);
  $11687 = (($11686) + 8|0);
  HEAPF32[$11687>>2] = $11685;
  $11688 = (($4) + 3636|0);
  $11689 = +HEAPF32[$11688>>2];
  $11690 = (($4) + 3636|0);
  $11691 = (($11690) + 4|0);
  HEAPF32[$11691>>2] = $11689;
  $11692 = (($4) + 3624|0);
  $11693 = (($11692) + 4|0);
  $11694 = +HEAPF32[$11693>>2];
  $11695 = (($4) + 3624|0);
  $11696 = (($11695) + 8|0);
  HEAPF32[$11696>>2] = $11694;
  $11697 = (($4) + 3624|0);
  $11698 = +HEAPF32[$11697>>2];
  $11699 = (($4) + 3624|0);
  $11700 = (($11699) + 4|0);
  HEAPF32[$11700>>2] = $11698;
  $11701 = (($4) + 3616|0);
  $11702 = +HEAPF32[$11701>>2];
  $11703 = (($4) + 3616|0);
  $11704 = (($11703) + 4|0);
  HEAPF32[$11704>>2] = $11702;
  $11705 = (($4) + 3608|0);
  $11706 = +HEAPF32[$11705>>2];
  $11707 = (($4) + 3608|0);
  $11708 = (($11707) + 4|0);
  HEAPF32[$11708>>2] = $11706;
  $11709 = (($4) + 3596|0);
  $11710 = (($11709) + 4|0);
  $11711 = +HEAPF32[$11710>>2];
  $11712 = (($4) + 3596|0);
  $11713 = (($11712) + 8|0);
  HEAPF32[$11713>>2] = $11711;
  $11714 = (($4) + 3596|0);
  $11715 = +HEAPF32[$11714>>2];
  $11716 = (($4) + 3596|0);
  $11717 = (($11716) + 4|0);
  HEAPF32[$11717>>2] = $11715;
  $11718 = (($4) + 3588|0);
  $11719 = +HEAPF32[$11718>>2];
  $11720 = (($4) + 3588|0);
  $11721 = (($11720) + 4|0);
  HEAPF32[$11721>>2] = $11719;
  $11722 = (($4) + 3576|0);
  $11723 = (($11722) + 4|0);
  $11724 = +HEAPF32[$11723>>2];
  $11725 = (($4) + 3576|0);
  $11726 = (($11725) + 8|0);
  HEAPF32[$11726>>2] = $11724;
  $11727 = (($4) + 3576|0);
  $11728 = +HEAPF32[$11727>>2];
  $11729 = (($4) + 3576|0);
  $11730 = (($11729) + 4|0);
  HEAPF32[$11730>>2] = $11728;
  $11731 = (($4) + 3564|0);
  $11732 = (($11731) + 4|0);
  $11733 = +HEAPF32[$11732>>2];
  $11734 = (($4) + 3564|0);
  $11735 = (($11734) + 8|0);
  HEAPF32[$11735>>2] = $11733;
  $11736 = (($4) + 3564|0);
  $11737 = +HEAPF32[$11736>>2];
  $11738 = (($4) + 3564|0);
  $11739 = (($11738) + 4|0);
  HEAPF32[$11739>>2] = $11737;
  $11740 = (($4) + 3552|0);
  $11741 = (($11740) + 4|0);
  $11742 = +HEAPF32[$11741>>2];
  $11743 = (($4) + 3552|0);
  $11744 = (($11743) + 8|0);
  HEAPF32[$11744>>2] = $11742;
  $11745 = (($4) + 3552|0);
  $11746 = +HEAPF32[$11745>>2];
  $11747 = (($4) + 3552|0);
  $11748 = (($11747) + 4|0);
  HEAPF32[$11748>>2] = $11746;
  $11749 = (($4) + 3544|0);
  $11750 = +HEAPF32[$11749>>2];
  $11751 = (($4) + 3544|0);
  $11752 = (($11751) + 4|0);
  HEAPF32[$11752>>2] = $11750;
  $11753 = (($4) + 3536|0);
  $11754 = +HEAPF32[$11753>>2];
  $11755 = (($4) + 3536|0);
  $11756 = (($11755) + 4|0);
  HEAPF32[$11756>>2] = $11754;
  $11757 = (($4) + 3524|0);
  $11758 = (($11757) + 4|0);
  $11759 = +HEAPF32[$11758>>2];
  $11760 = (($4) + 3524|0);
  $11761 = (($11760) + 8|0);
  HEAPF32[$11761>>2] = $11759;
  $11762 = (($4) + 3524|0);
  $11763 = +HEAPF32[$11762>>2];
  $11764 = (($4) + 3524|0);
  $11765 = (($11764) + 4|0);
  HEAPF32[$11765>>2] = $11763;
  $11766 = (($4) + 3516|0);
  $11767 = +HEAPF32[$11766>>2];
  $11768 = (($4) + 3516|0);
  $11769 = (($11768) + 4|0);
  HEAPF32[$11769>>2] = $11767;
  $11770 = (($4) + 3504|0);
  $11771 = (($11770) + 4|0);
  $11772 = +HEAPF32[$11771>>2];
  $11773 = (($4) + 3504|0);
  $11774 = (($11773) + 8|0);
  HEAPF32[$11774>>2] = $11772;
  $11775 = (($4) + 3504|0);
  $11776 = +HEAPF32[$11775>>2];
  $11777 = (($4) + 3504|0);
  $11778 = (($11777) + 4|0);
  HEAPF32[$11778>>2] = $11776;
  $11779 = (($4) + 3492|0);
  $11780 = (($11779) + 4|0);
  $11781 = +HEAPF32[$11780>>2];
  $11782 = (($4) + 3492|0);
  $11783 = (($11782) + 8|0);
  HEAPF32[$11783>>2] = $11781;
  $11784 = (($4) + 3492|0);
  $11785 = +HEAPF32[$11784>>2];
  $11786 = (($4) + 3492|0);
  $11787 = (($11786) + 4|0);
  HEAPF32[$11787>>2] = $11785;
  $11788 = (($4) + 3480|0);
  $11789 = (($11788) + 4|0);
  $11790 = +HEAPF32[$11789>>2];
  $11791 = (($4) + 3480|0);
  $11792 = (($11791) + 8|0);
  HEAPF32[$11792>>2] = $11790;
  $11793 = (($4) + 3480|0);
  $11794 = +HEAPF32[$11793>>2];
  $11795 = (($4) + 3480|0);
  $11796 = (($11795) + 4|0);
  HEAPF32[$11796>>2] = $11794;
  $11797 = (($4) + 3468|0);
  $11798 = (($11797) + 4|0);
  $11799 = +HEAPF32[$11798>>2];
  $11800 = (($4) + 3468|0);
  $11801 = (($11800) + 8|0);
  HEAPF32[$11801>>2] = $11799;
  $11802 = (($4) + 3468|0);
  $11803 = +HEAPF32[$11802>>2];
  $11804 = (($4) + 3468|0);
  $11805 = (($11804) + 4|0);
  HEAPF32[$11805>>2] = $11803;
  $11806 = (($4) + 3460|0);
  $11807 = +HEAPF32[$11806>>2];
  $11808 = (($4) + 3460|0);
  $11809 = (($11808) + 4|0);
  HEAPF32[$11809>>2] = $11807;
  $11810 = (($4) + 3448|0);
  $11811 = (($11810) + 4|0);
  $11812 = +HEAPF32[$11811>>2];
  $11813 = (($4) + 3448|0);
  $11814 = (($11813) + 8|0);
  HEAPF32[$11814>>2] = $11812;
  $11815 = (($4) + 3448|0);
  $11816 = +HEAPF32[$11815>>2];
  $11817 = (($4) + 3448|0);
  $11818 = (($11817) + 4|0);
  HEAPF32[$11818>>2] = $11816;
  $11819 = (($4) + 3440|0);
  $11820 = +HEAPF32[$11819>>2];
  $11821 = (($4) + 3440|0);
  $11822 = (($11821) + 4|0);
  HEAPF32[$11822>>2] = $11820;
  $11823 = (($4) + 3428|0);
  $11824 = (($11823) + 4|0);
  $11825 = +HEAPF32[$11824>>2];
  $11826 = (($4) + 3428|0);
  $11827 = (($11826) + 8|0);
  HEAPF32[$11827>>2] = $11825;
  $11828 = (($4) + 3428|0);
  $11829 = +HEAPF32[$11828>>2];
  $11830 = (($4) + 3428|0);
  $11831 = (($11830) + 4|0);
  HEAPF32[$11831>>2] = $11829;
  $11832 = (($4) + 3420|0);
  $11833 = +HEAPF32[$11832>>2];
  $11834 = (($4) + 3420|0);
  $11835 = (($11834) + 4|0);
  HEAPF32[$11835>>2] = $11833;
  $11836 = (($4) + 3412|0);
  $11837 = +HEAPF32[$11836>>2];
  $11838 = (($4) + 3412|0);
  $11839 = (($11838) + 4|0);
  HEAPF32[$11839>>2] = $11837;
  $11840 = (($4) + 3400|0);
  $11841 = (($11840) + 4|0);
  $11842 = +HEAPF32[$11841>>2];
  $11843 = (($4) + 3400|0);
  $11844 = (($11843) + 8|0);
  HEAPF32[$11844>>2] = $11842;
  $11845 = (($4) + 3400|0);
  $11846 = +HEAPF32[$11845>>2];
  $11847 = (($4) + 3400|0);
  $11848 = (($11847) + 4|0);
  HEAPF32[$11848>>2] = $11846;
  $11849 = (($4) + 3392|0);
  $11850 = +HEAPF32[$11849>>2];
  $11851 = (($4) + 3392|0);
  $11852 = (($11851) + 4|0);
  HEAPF32[$11852>>2] = $11850;
  $11853 = (($4) + 3380|0);
  $11854 = (($11853) + 4|0);
  $11855 = +HEAPF32[$11854>>2];
  $11856 = (($4) + 3380|0);
  $11857 = (($11856) + 8|0);
  HEAPF32[$11857>>2] = $11855;
  $11858 = (($4) + 3380|0);
  $11859 = +HEAPF32[$11858>>2];
  $11860 = (($4) + 3380|0);
  $11861 = (($11860) + 4|0);
  HEAPF32[$11861>>2] = $11859;
  $11862 = (($4) + 3368|0);
  $11863 = (($11862) + 4|0);
  $11864 = +HEAPF32[$11863>>2];
  $11865 = (($4) + 3368|0);
  $11866 = (($11865) + 8|0);
  HEAPF32[$11866>>2] = $11864;
  $11867 = (($4) + 3368|0);
  $11868 = +HEAPF32[$11867>>2];
  $11869 = (($4) + 3368|0);
  $11870 = (($11869) + 4|0);
  HEAPF32[$11870>>2] = $11868;
  $11871 = (($4) + 3360|0);
  $11872 = +HEAPF32[$11871>>2];
  $11873 = (($4) + 3360|0);
  $11874 = (($11873) + 4|0);
  HEAPF32[$11874>>2] = $11872;
  $11875 = (($4) + 3352|0);
  $11876 = +HEAPF32[$11875>>2];
  $11877 = (($4) + 3352|0);
  $11878 = (($11877) + 4|0);
  HEAPF32[$11878>>2] = $11876;
  $11879 = (($4) + 3340|0);
  $11880 = (($11879) + 4|0);
  $11881 = +HEAPF32[$11880>>2];
  $11882 = (($4) + 3340|0);
  $11883 = (($11882) + 8|0);
  HEAPF32[$11883>>2] = $11881;
  $11884 = (($4) + 3340|0);
  $11885 = +HEAPF32[$11884>>2];
  $11886 = (($4) + 3340|0);
  $11887 = (($11886) + 4|0);
  HEAPF32[$11887>>2] = $11885;
  $11888 = (($4) + 3332|0);
  $11889 = +HEAPF32[$11888>>2];
  $11890 = (($4) + 3332|0);
  $11891 = (($11890) + 4|0);
  HEAPF32[$11891>>2] = $11889;
  $11892 = (($4) + 3320|0);
  $11893 = (($11892) + 4|0);
  $11894 = +HEAPF32[$11893>>2];
  $11895 = (($4) + 3320|0);
  $11896 = (($11895) + 8|0);
  HEAPF32[$11896>>2] = $11894;
  $11897 = (($4) + 3320|0);
  $11898 = +HEAPF32[$11897>>2];
  $11899 = (($4) + 3320|0);
  $11900 = (($11899) + 4|0);
  HEAPF32[$11900>>2] = $11898;
  $11901 = (($4) + 3308|0);
  $11902 = (($11901) + 4|0);
  $11903 = +HEAPF32[$11902>>2];
  $11904 = (($4) + 3308|0);
  $11905 = (($11904) + 8|0);
  HEAPF32[$11905>>2] = $11903;
  $11906 = (($4) + 3308|0);
  $11907 = +HEAPF32[$11906>>2];
  $11908 = (($4) + 3308|0);
  $11909 = (($11908) + 4|0);
  HEAPF32[$11909>>2] = $11907;
  $11910 = (($4) + 3296|0);
  $11911 = (($11910) + 4|0);
  $11912 = +HEAPF32[$11911>>2];
  $11913 = (($4) + 3296|0);
  $11914 = (($11913) + 8|0);
  HEAPF32[$11914>>2] = $11912;
  $11915 = (($4) + 3296|0);
  $11916 = +HEAPF32[$11915>>2];
  $11917 = (($4) + 3296|0);
  $11918 = (($11917) + 4|0);
  HEAPF32[$11918>>2] = $11916;
  $11919 = (($4) + 3288|0);
  $11920 = +HEAPF32[$11919>>2];
  $11921 = (($4) + 3288|0);
  $11922 = (($11921) + 4|0);
  HEAPF32[$11922>>2] = $11920;
  $11923 = (($4) + 3280|0);
  $11924 = +HEAPF32[$11923>>2];
  $11925 = (($4) + 3280|0);
  $11926 = (($11925) + 4|0);
  HEAPF32[$11926>>2] = $11924;
  $11927 = (($4) + 3268|0);
  $11928 = (($11927) + 4|0);
  $11929 = +HEAPF32[$11928>>2];
  $11930 = (($4) + 3268|0);
  $11931 = (($11930) + 8|0);
  HEAPF32[$11931>>2] = $11929;
  $11932 = (($4) + 3268|0);
  $11933 = +HEAPF32[$11932>>2];
  $11934 = (($4) + 3268|0);
  $11935 = (($11934) + 4|0);
  HEAPF32[$11935>>2] = $11933;
  $11936 = (($4) + 3260|0);
  $11937 = +HEAPF32[$11936>>2];
  $11938 = (($4) + 3260|0);
  $11939 = (($11938) + 4|0);
  HEAPF32[$11939>>2] = $11937;
  $11940 = (($4) + 3248|0);
  $11941 = (($11940) + 4|0);
  $11942 = +HEAPF32[$11941>>2];
  $11943 = (($4) + 3248|0);
  $11944 = (($11943) + 8|0);
  HEAPF32[$11944>>2] = $11942;
  $11945 = (($4) + 3248|0);
  $11946 = +HEAPF32[$11945>>2];
  $11947 = (($4) + 3248|0);
  $11948 = (($11947) + 4|0);
  HEAPF32[$11948>>2] = $11946;
  $11949 = (($4) + 3236|0);
  $11950 = (($11949) + 4|0);
  $11951 = +HEAPF32[$11950>>2];
  $11952 = (($4) + 3236|0);
  $11953 = (($11952) + 8|0);
  HEAPF32[$11953>>2] = $11951;
  $11954 = (($4) + 3236|0);
  $11955 = +HEAPF32[$11954>>2];
  $11956 = (($4) + 3236|0);
  $11957 = (($11956) + 4|0);
  HEAPF32[$11957>>2] = $11955;
  $11958 = (($4) + 3224|0);
  $11959 = (($11958) + 4|0);
  $11960 = +HEAPF32[$11959>>2];
  $11961 = (($4) + 3224|0);
  $11962 = (($11961) + 8|0);
  HEAPF32[$11962>>2] = $11960;
  $11963 = (($4) + 3224|0);
  $11964 = +HEAPF32[$11963>>2];
  $11965 = (($4) + 3224|0);
  $11966 = (($11965) + 4|0);
  HEAPF32[$11966>>2] = $11964;
  $11967 = (($4) + 3212|0);
  $11968 = (($11967) + 4|0);
  $11969 = +HEAPF32[$11968>>2];
  $11970 = (($4) + 3212|0);
  $11971 = (($11970) + 8|0);
  HEAPF32[$11971>>2] = $11969;
  $11972 = (($4) + 3212|0);
  $11973 = +HEAPF32[$11972>>2];
  $11974 = (($4) + 3212|0);
  $11975 = (($11974) + 4|0);
  HEAPF32[$11975>>2] = $11973;
  $11976 = (($4) + 3204|0);
  $11977 = +HEAPF32[$11976>>2];
  $11978 = (($4) + 3204|0);
  $11979 = (($11978) + 4|0);
  HEAPF32[$11979>>2] = $11977;
  $11980 = (($4) + 3192|0);
  $11981 = (($11980) + 4|0);
  $11982 = +HEAPF32[$11981>>2];
  $11983 = (($4) + 3192|0);
  $11984 = (($11983) + 8|0);
  HEAPF32[$11984>>2] = $11982;
  $11985 = (($4) + 3192|0);
  $11986 = +HEAPF32[$11985>>2];
  $11987 = (($4) + 3192|0);
  $11988 = (($11987) + 4|0);
  HEAPF32[$11988>>2] = $11986;
  $11989 = (($4) + 3184|0);
  $11990 = +HEAPF32[$11989>>2];
  $11991 = (($4) + 3184|0);
  $11992 = (($11991) + 4|0);
  HEAPF32[$11992>>2] = $11990;
  $11993 = (($4) + 3172|0);
  $11994 = (($11993) + 4|0);
  $11995 = +HEAPF32[$11994>>2];
  $11996 = (($4) + 3172|0);
  $11997 = (($11996) + 8|0);
  HEAPF32[$11997>>2] = $11995;
  $11998 = (($4) + 3172|0);
  $11999 = +HEAPF32[$11998>>2];
  $12000 = (($4) + 3172|0);
  $12001 = (($12000) + 4|0);
  HEAPF32[$12001>>2] = $11999;
  $12002 = (($4) + 3164|0);
  $12003 = +HEAPF32[$12002>>2];
  $12004 = (($4) + 3164|0);
  $12005 = (($12004) + 4|0);
  HEAPF32[$12005>>2] = $12003;
  $12006 = (($4) + 3156|0);
  $12007 = +HEAPF32[$12006>>2];
  $12008 = (($4) + 3156|0);
  $12009 = (($12008) + 4|0);
  HEAPF32[$12009>>2] = $12007;
  $12010 = (($4) + 3144|0);
  $12011 = (($12010) + 4|0);
  $12012 = +HEAPF32[$12011>>2];
  $12013 = (($4) + 3144|0);
  $12014 = (($12013) + 8|0);
  HEAPF32[$12014>>2] = $12012;
  $12015 = (($4) + 3144|0);
  $12016 = +HEAPF32[$12015>>2];
  $12017 = (($4) + 3144|0);
  $12018 = (($12017) + 4|0);
  HEAPF32[$12018>>2] = $12016;
  $12019 = (($4) + 3136|0);
  $12020 = +HEAPF32[$12019>>2];
  $12021 = (($4) + 3136|0);
  $12022 = (($12021) + 4|0);
  HEAPF32[$12022>>2] = $12020;
  $12023 = (($4) + 3124|0);
  $12024 = (($12023) + 4|0);
  $12025 = +HEAPF32[$12024>>2];
  $12026 = (($4) + 3124|0);
  $12027 = (($12026) + 8|0);
  HEAPF32[$12027>>2] = $12025;
  $12028 = (($4) + 3124|0);
  $12029 = +HEAPF32[$12028>>2];
  $12030 = (($4) + 3124|0);
  $12031 = (($12030) + 4|0);
  HEAPF32[$12031>>2] = $12029;
  $12032 = (($4) + 3112|0);
  $12033 = (($12032) + 4|0);
  $12034 = +HEAPF32[$12033>>2];
  $12035 = (($4) + 3112|0);
  $12036 = (($12035) + 8|0);
  HEAPF32[$12036>>2] = $12034;
  $12037 = (($4) + 3112|0);
  $12038 = +HEAPF32[$12037>>2];
  $12039 = (($4) + 3112|0);
  $12040 = (($12039) + 4|0);
  HEAPF32[$12040>>2] = $12038;
  $12041 = (($4) + 3104|0);
  $12042 = +HEAPF32[$12041>>2];
  $12043 = (($4) + 3104|0);
  $12044 = (($12043) + 4|0);
  HEAPF32[$12044>>2] = $12042;
  $12045 = (($4) + 3096|0);
  $12046 = +HEAPF32[$12045>>2];
  $12047 = (($4) + 3096|0);
  $12048 = (($12047) + 4|0);
  HEAPF32[$12048>>2] = $12046;
  $12049 = (($4) + 3084|0);
  $12050 = (($12049) + 4|0);
  $12051 = +HEAPF32[$12050>>2];
  $12052 = (($4) + 3084|0);
  $12053 = (($12052) + 8|0);
  HEAPF32[$12053>>2] = $12051;
  $12054 = (($4) + 3084|0);
  $12055 = +HEAPF32[$12054>>2];
  $12056 = (($4) + 3084|0);
  $12057 = (($12056) + 4|0);
  HEAPF32[$12057>>2] = $12055;
  $12058 = (($4) + 3076|0);
  $12059 = +HEAPF32[$12058>>2];
  $12060 = (($4) + 3076|0);
  $12061 = (($12060) + 4|0);
  HEAPF32[$12061>>2] = $12059;
  $12062 = (($4) + 3064|0);
  $12063 = (($12062) + 4|0);
  $12064 = +HEAPF32[$12063>>2];
  $12065 = (($4) + 3064|0);
  $12066 = (($12065) + 8|0);
  HEAPF32[$12066>>2] = $12064;
  $12067 = (($4) + 3064|0);
  $12068 = +HEAPF32[$12067>>2];
  $12069 = (($4) + 3064|0);
  $12070 = (($12069) + 4|0);
  HEAPF32[$12070>>2] = $12068;
  $12071 = (($4) + 3052|0);
  $12072 = (($12071) + 4|0);
  $12073 = +HEAPF32[$12072>>2];
  $12074 = (($4) + 3052|0);
  $12075 = (($12074) + 8|0);
  HEAPF32[$12075>>2] = $12073;
  $12076 = (($4) + 3052|0);
  $12077 = +HEAPF32[$12076>>2];
  $12078 = (($4) + 3052|0);
  $12079 = (($12078) + 4|0);
  HEAPF32[$12079>>2] = $12077;
  $12080 = (($4) + 3040|0);
  $12081 = (($12080) + 4|0);
  $12082 = +HEAPF32[$12081>>2];
  $12083 = (($4) + 3040|0);
  $12084 = (($12083) + 8|0);
  HEAPF32[$12084>>2] = $12082;
  $12085 = (($4) + 3040|0);
  $12086 = +HEAPF32[$12085>>2];
  $12087 = (($4) + 3040|0);
  $12088 = (($12087) + 4|0);
  HEAPF32[$12088>>2] = $12086;
  $12089 = (($4) + 3032|0);
  $12090 = +HEAPF32[$12089>>2];
  $12091 = (($4) + 3032|0);
  $12092 = (($12091) + 4|0);
  HEAPF32[$12092>>2] = $12090;
  $12093 = (($4) + 3024|0);
  $12094 = +HEAPF32[$12093>>2];
  $12095 = (($4) + 3024|0);
  $12096 = (($12095) + 4|0);
  HEAPF32[$12096>>2] = $12094;
  $12097 = (($4) + 3012|0);
  $12098 = (($12097) + 4|0);
  $12099 = +HEAPF32[$12098>>2];
  $12100 = (($4) + 3012|0);
  $12101 = (($12100) + 8|0);
  HEAPF32[$12101>>2] = $12099;
  $12102 = (($4) + 3012|0);
  $12103 = +HEAPF32[$12102>>2];
  $12104 = (($4) + 3012|0);
  $12105 = (($12104) + 4|0);
  HEAPF32[$12105>>2] = $12103;
  $12106 = (($4) + 3004|0);
  $12107 = +HEAPF32[$12106>>2];
  $12108 = (($4) + 3004|0);
  $12109 = (($12108) + 4|0);
  HEAPF32[$12109>>2] = $12107;
  $12110 = (($4) + 2992|0);
  $12111 = (($12110) + 4|0);
  $12112 = +HEAPF32[$12111>>2];
  $12113 = (($4) + 2992|0);
  $12114 = (($12113) + 8|0);
  HEAPF32[$12114>>2] = $12112;
  $12115 = (($4) + 2992|0);
  $12116 = +HEAPF32[$12115>>2];
  $12117 = (($4) + 2992|0);
  $12118 = (($12117) + 4|0);
  HEAPF32[$12118>>2] = $12116;
  $12119 = (($4) + 2980|0);
  $12120 = (($12119) + 4|0);
  $12121 = +HEAPF32[$12120>>2];
  $12122 = (($4) + 2980|0);
  $12123 = (($12122) + 8|0);
  HEAPF32[$12123>>2] = $12121;
  $12124 = (($4) + 2980|0);
  $12125 = +HEAPF32[$12124>>2];
  $12126 = (($4) + 2980|0);
  $12127 = (($12126) + 4|0);
  HEAPF32[$12127>>2] = $12125;
  $12128 = (($4) + 2968|0);
  $12129 = (($12128) + 4|0);
  $12130 = +HEAPF32[$12129>>2];
  $12131 = (($4) + 2968|0);
  $12132 = (($12131) + 8|0);
  HEAPF32[$12132>>2] = $12130;
  $12133 = (($4) + 2968|0);
  $12134 = +HEAPF32[$12133>>2];
  $12135 = (($4) + 2968|0);
  $12136 = (($12135) + 4|0);
  HEAPF32[$12136>>2] = $12134;
  $12137 = (($4) + 2956|0);
  $12138 = (($12137) + 4|0);
  $12139 = +HEAPF32[$12138>>2];
  $12140 = (($4) + 2956|0);
  $12141 = (($12140) + 8|0);
  HEAPF32[$12141>>2] = $12139;
  $12142 = (($4) + 2956|0);
  $12143 = +HEAPF32[$12142>>2];
  $12144 = (($4) + 2956|0);
  $12145 = (($12144) + 4|0);
  HEAPF32[$12145>>2] = $12143;
  $12146 = (($4) + 2948|0);
  $12147 = +HEAPF32[$12146>>2];
  $12148 = (($4) + 2948|0);
  $12149 = (($12148) + 4|0);
  HEAPF32[$12149>>2] = $12147;
  $12150 = (($4) + 2936|0);
  $12151 = (($12150) + 4|0);
  $12152 = +HEAPF32[$12151>>2];
  $12153 = (($4) + 2936|0);
  $12154 = (($12153) + 8|0);
  HEAPF32[$12154>>2] = $12152;
  $12155 = (($4) + 2936|0);
  $12156 = +HEAPF32[$12155>>2];
  $12157 = (($4) + 2936|0);
  $12158 = (($12157) + 4|0);
  HEAPF32[$12158>>2] = $12156;
  $12159 = (($4) + 2928|0);
  $12160 = +HEAPF32[$12159>>2];
  $12161 = (($4) + 2928|0);
  $12162 = (($12161) + 4|0);
  HEAPF32[$12162>>2] = $12160;
  $12163 = (($4) + 2916|0);
  $12164 = (($12163) + 4|0);
  $12165 = +HEAPF32[$12164>>2];
  $12166 = (($4) + 2916|0);
  $12167 = (($12166) + 8|0);
  HEAPF32[$12167>>2] = $12165;
  $12168 = (($4) + 2916|0);
  $12169 = +HEAPF32[$12168>>2];
  $12170 = (($4) + 2916|0);
  $12171 = (($12170) + 4|0);
  HEAPF32[$12171>>2] = $12169;
  $12172 = (($4) + 2908|0);
  $12173 = +HEAPF32[$12172>>2];
  $12174 = (($4) + 2908|0);
  $12175 = (($12174) + 4|0);
  HEAPF32[$12175>>2] = $12173;
  $12176 = (($4) + 2900|0);
  $12177 = +HEAPF32[$12176>>2];
  $12178 = (($4) + 2900|0);
  $12179 = (($12178) + 4|0);
  HEAPF32[$12179>>2] = $12177;
  $12180 = (($4) + 2888|0);
  $12181 = (($12180) + 4|0);
  $12182 = +HEAPF32[$12181>>2];
  $12183 = (($4) + 2888|0);
  $12184 = (($12183) + 8|0);
  HEAPF32[$12184>>2] = $12182;
  $12185 = (($4) + 2888|0);
  $12186 = +HEAPF32[$12185>>2];
  $12187 = (($4) + 2888|0);
  $12188 = (($12187) + 4|0);
  HEAPF32[$12188>>2] = $12186;
  $12189 = (($4) + 2880|0);
  $12190 = +HEAPF32[$12189>>2];
  $12191 = (($4) + 2880|0);
  $12192 = (($12191) + 4|0);
  HEAPF32[$12192>>2] = $12190;
  $12193 = (($4) + 2868|0);
  $12194 = (($12193) + 4|0);
  $12195 = +HEAPF32[$12194>>2];
  $12196 = (($4) + 2868|0);
  $12197 = (($12196) + 8|0);
  HEAPF32[$12197>>2] = $12195;
  $12198 = (($4) + 2868|0);
  $12199 = +HEAPF32[$12198>>2];
  $12200 = (($4) + 2868|0);
  $12201 = (($12200) + 4|0);
  HEAPF32[$12201>>2] = $12199;
  $12202 = (($4) + 2856|0);
  $12203 = (($12202) + 4|0);
  $12204 = +HEAPF32[$12203>>2];
  $12205 = (($4) + 2856|0);
  $12206 = (($12205) + 8|0);
  HEAPF32[$12206>>2] = $12204;
  $12207 = (($4) + 2856|0);
  $12208 = +HEAPF32[$12207>>2];
  $12209 = (($4) + 2856|0);
  $12210 = (($12209) + 4|0);
  HEAPF32[$12210>>2] = $12208;
  $12211 = (($4) + 2848|0);
  $12212 = +HEAPF32[$12211>>2];
  $12213 = (($4) + 2848|0);
  $12214 = (($12213) + 4|0);
  HEAPF32[$12214>>2] = $12212;
  $12215 = (($4) + 2840|0);
  $12216 = +HEAPF32[$12215>>2];
  $12217 = (($4) + 2840|0);
  $12218 = (($12217) + 4|0);
  HEAPF32[$12218>>2] = $12216;
  $12219 = (($4) + 2828|0);
  $12220 = (($12219) + 4|0);
  $12221 = +HEAPF32[$12220>>2];
  $12222 = (($4) + 2828|0);
  $12223 = (($12222) + 8|0);
  HEAPF32[$12223>>2] = $12221;
  $12224 = (($4) + 2828|0);
  $12225 = +HEAPF32[$12224>>2];
  $12226 = (($4) + 2828|0);
  $12227 = (($12226) + 4|0);
  HEAPF32[$12227>>2] = $12225;
  $12228 = (($4) + 2820|0);
  $12229 = +HEAPF32[$12228>>2];
  $12230 = (($4) + 2820|0);
  $12231 = (($12230) + 4|0);
  HEAPF32[$12231>>2] = $12229;
  $12232 = (($4) + 2808|0);
  $12233 = (($12232) + 4|0);
  $12234 = +HEAPF32[$12233>>2];
  $12235 = (($4) + 2808|0);
  $12236 = (($12235) + 8|0);
  HEAPF32[$12236>>2] = $12234;
  $12237 = (($4) + 2808|0);
  $12238 = +HEAPF32[$12237>>2];
  $12239 = (($4) + 2808|0);
  $12240 = (($12239) + 4|0);
  HEAPF32[$12240>>2] = $12238;
  $12241 = (($4) + 2796|0);
  $12242 = (($12241) + 4|0);
  $12243 = +HEAPF32[$12242>>2];
  $12244 = (($4) + 2796|0);
  $12245 = (($12244) + 8|0);
  HEAPF32[$12245>>2] = $12243;
  $12246 = (($4) + 2796|0);
  $12247 = +HEAPF32[$12246>>2];
  $12248 = (($4) + 2796|0);
  $12249 = (($12248) + 4|0);
  HEAPF32[$12249>>2] = $12247;
  $12250 = (($4) + 2784|0);
  $12251 = (($12250) + 4|0);
  $12252 = +HEAPF32[$12251>>2];
  $12253 = (($4) + 2784|0);
  $12254 = (($12253) + 8|0);
  HEAPF32[$12254>>2] = $12252;
  $12255 = (($4) + 2784|0);
  $12256 = +HEAPF32[$12255>>2];
  $12257 = (($4) + 2784|0);
  $12258 = (($12257) + 4|0);
  HEAPF32[$12258>>2] = $12256;
  $12259 = (($4) + 2776|0);
  $12260 = +HEAPF32[$12259>>2];
  $12261 = (($4) + 2776|0);
  $12262 = (($12261) + 4|0);
  HEAPF32[$12262>>2] = $12260;
  $12263 = (($4) + 2768|0);
  $12264 = +HEAPF32[$12263>>2];
  $12265 = (($4) + 2768|0);
  $12266 = (($12265) + 4|0);
  HEAPF32[$12266>>2] = $12264;
  $12267 = (($4) + 2756|0);
  $12268 = (($12267) + 4|0);
  $12269 = +HEAPF32[$12268>>2];
  $12270 = (($4) + 2756|0);
  $12271 = (($12270) + 8|0);
  HEAPF32[$12271>>2] = $12269;
  $12272 = (($4) + 2756|0);
  $12273 = +HEAPF32[$12272>>2];
  $12274 = (($4) + 2756|0);
  $12275 = (($12274) + 4|0);
  HEAPF32[$12275>>2] = $12273;
  $12276 = (($4) + 2748|0);
  $12277 = +HEAPF32[$12276>>2];
  $12278 = (($4) + 2748|0);
  $12279 = (($12278) + 4|0);
  HEAPF32[$12279>>2] = $12277;
  $12280 = (($4) + 2736|0);
  $12281 = (($12280) + 4|0);
  $12282 = +HEAPF32[$12281>>2];
  $12283 = (($4) + 2736|0);
  $12284 = (($12283) + 8|0);
  HEAPF32[$12284>>2] = $12282;
  $12285 = (($4) + 2736|0);
  $12286 = +HEAPF32[$12285>>2];
  $12287 = (($4) + 2736|0);
  $12288 = (($12287) + 4|0);
  HEAPF32[$12288>>2] = $12286;
  $12289 = (($4) + 2724|0);
  $12290 = (($12289) + 4|0);
  $12291 = +HEAPF32[$12290>>2];
  $12292 = (($4) + 2724|0);
  $12293 = (($12292) + 8|0);
  HEAPF32[$12293>>2] = $12291;
  $12294 = (($4) + 2724|0);
  $12295 = +HEAPF32[$12294>>2];
  $12296 = (($4) + 2724|0);
  $12297 = (($12296) + 4|0);
  HEAPF32[$12297>>2] = $12295;
  $12298 = (($4) + 2712|0);
  $12299 = (($12298) + 4|0);
  $12300 = +HEAPF32[$12299>>2];
  $12301 = (($4) + 2712|0);
  $12302 = (($12301) + 8|0);
  HEAPF32[$12302>>2] = $12300;
  $12303 = (($4) + 2712|0);
  $12304 = +HEAPF32[$12303>>2];
  $12305 = (($4) + 2712|0);
  $12306 = (($12305) + 4|0);
  HEAPF32[$12306>>2] = $12304;
  $12307 = (($4) + 2700|0);
  $12308 = (($12307) + 4|0);
  $12309 = +HEAPF32[$12308>>2];
  $12310 = (($4) + 2700|0);
  $12311 = (($12310) + 8|0);
  HEAPF32[$12311>>2] = $12309;
  $12312 = (($4) + 2700|0);
  $12313 = +HEAPF32[$12312>>2];
  $12314 = (($4) + 2700|0);
  $12315 = (($12314) + 4|0);
  HEAPF32[$12315>>2] = $12313;
  $12316 = (($4) + 2692|0);
  $12317 = +HEAPF32[$12316>>2];
  $12318 = (($4) + 2692|0);
  $12319 = (($12318) + 4|0);
  HEAPF32[$12319>>2] = $12317;
  $12320 = (($4) + 2680|0);
  $12321 = (($12320) + 4|0);
  $12322 = +HEAPF32[$12321>>2];
  $12323 = (($4) + 2680|0);
  $12324 = (($12323) + 8|0);
  HEAPF32[$12324>>2] = $12322;
  $12325 = (($4) + 2680|0);
  $12326 = +HEAPF32[$12325>>2];
  $12327 = (($4) + 2680|0);
  $12328 = (($12327) + 4|0);
  HEAPF32[$12328>>2] = $12326;
  $12329 = (($4) + 2672|0);
  $12330 = +HEAPF32[$12329>>2];
  $12331 = (($4) + 2672|0);
  $12332 = (($12331) + 4|0);
  HEAPF32[$12332>>2] = $12330;
  $12333 = (($4) + 2660|0);
  $12334 = (($12333) + 4|0);
  $12335 = +HEAPF32[$12334>>2];
  $12336 = (($4) + 2660|0);
  $12337 = (($12336) + 8|0);
  HEAPF32[$12337>>2] = $12335;
  $12338 = (($4) + 2660|0);
  $12339 = +HEAPF32[$12338>>2];
  $12340 = (($4) + 2660|0);
  $12341 = (($12340) + 4|0);
  HEAPF32[$12341>>2] = $12339;
  $12342 = (($4) + 2652|0);
  $12343 = +HEAPF32[$12342>>2];
  $12344 = (($4) + 2652|0);
  $12345 = (($12344) + 4|0);
  HEAPF32[$12345>>2] = $12343;
  $12346 = (($4) + 2644|0);
  $12347 = +HEAPF32[$12346>>2];
  $12348 = (($4) + 2644|0);
  $12349 = (($12348) + 4|0);
  HEAPF32[$12349>>2] = $12347;
  $12350 = (($4) + 2632|0);
  $12351 = (($12350) + 4|0);
  $12352 = +HEAPF32[$12351>>2];
  $12353 = (($4) + 2632|0);
  $12354 = (($12353) + 8|0);
  HEAPF32[$12354>>2] = $12352;
  $12355 = (($4) + 2632|0);
  $12356 = +HEAPF32[$12355>>2];
  $12357 = (($4) + 2632|0);
  $12358 = (($12357) + 4|0);
  HEAPF32[$12358>>2] = $12356;
  $12359 = (($4) + 2624|0);
  $12360 = +HEAPF32[$12359>>2];
  $12361 = (($4) + 2624|0);
  $12362 = (($12361) + 4|0);
  HEAPF32[$12362>>2] = $12360;
  $12363 = (($4) + 2612|0);
  $12364 = (($12363) + 4|0);
  $12365 = +HEAPF32[$12364>>2];
  $12366 = (($4) + 2612|0);
  $12367 = (($12366) + 8|0);
  HEAPF32[$12367>>2] = $12365;
  $12368 = (($4) + 2612|0);
  $12369 = +HEAPF32[$12368>>2];
  $12370 = (($4) + 2612|0);
  $12371 = (($12370) + 4|0);
  HEAPF32[$12371>>2] = $12369;
  $12372 = (($4) + 2600|0);
  $12373 = (($12372) + 4|0);
  $12374 = +HEAPF32[$12373>>2];
  $12375 = (($4) + 2600|0);
  $12376 = (($12375) + 8|0);
  HEAPF32[$12376>>2] = $12374;
  $12377 = (($4) + 2600|0);
  $12378 = +HEAPF32[$12377>>2];
  $12379 = (($4) + 2600|0);
  $12380 = (($12379) + 4|0);
  HEAPF32[$12380>>2] = $12378;
  $12381 = (($4) + 2592|0);
  $12382 = +HEAPF32[$12381>>2];
  $12383 = (($4) + 2592|0);
  $12384 = (($12383) + 4|0);
  HEAPF32[$12384>>2] = $12382;
  $12385 = (($4) + 2584|0);
  $12386 = +HEAPF32[$12385>>2];
  $12387 = (($4) + 2584|0);
  $12388 = (($12387) + 4|0);
  HEAPF32[$12388>>2] = $12386;
  $12389 = (($4) + 2572|0);
  $12390 = (($12389) + 4|0);
  $12391 = +HEAPF32[$12390>>2];
  $12392 = (($4) + 2572|0);
  $12393 = (($12392) + 8|0);
  HEAPF32[$12393>>2] = $12391;
  $12394 = (($4) + 2572|0);
  $12395 = +HEAPF32[$12394>>2];
  $12396 = (($4) + 2572|0);
  $12397 = (($12396) + 4|0);
  HEAPF32[$12397>>2] = $12395;
  $12398 = (($4) + 2564|0);
  $12399 = +HEAPF32[$12398>>2];
  $12400 = (($4) + 2564|0);
  $12401 = (($12400) + 4|0);
  HEAPF32[$12401>>2] = $12399;
  $12402 = (($4) + 2552|0);
  $12403 = (($12402) + 4|0);
  $12404 = +HEAPF32[$12403>>2];
  $12405 = (($4) + 2552|0);
  $12406 = (($12405) + 8|0);
  HEAPF32[$12406>>2] = $12404;
  $12407 = (($4) + 2552|0);
  $12408 = +HEAPF32[$12407>>2];
  $12409 = (($4) + 2552|0);
  $12410 = (($12409) + 4|0);
  HEAPF32[$12410>>2] = $12408;
  $12411 = (($4) + 2540|0);
  $12412 = (($12411) + 4|0);
  $12413 = +HEAPF32[$12412>>2];
  $12414 = (($4) + 2540|0);
  $12415 = (($12414) + 8|0);
  HEAPF32[$12415>>2] = $12413;
  $12416 = (($4) + 2540|0);
  $12417 = +HEAPF32[$12416>>2];
  $12418 = (($4) + 2540|0);
  $12419 = (($12418) + 4|0);
  HEAPF32[$12419>>2] = $12417;
  $12420 = (($4) + 2528|0);
  $12421 = (($12420) + 4|0);
  $12422 = +HEAPF32[$12421>>2];
  $12423 = (($4) + 2528|0);
  $12424 = (($12423) + 8|0);
  HEAPF32[$12424>>2] = $12422;
  $12425 = (($4) + 2528|0);
  $12426 = +HEAPF32[$12425>>2];
  $12427 = (($4) + 2528|0);
  $12428 = (($12427) + 4|0);
  HEAPF32[$12428>>2] = $12426;
  $12429 = (($4) + 2520|0);
  $12430 = +HEAPF32[$12429>>2];
  $12431 = (($4) + 2520|0);
  $12432 = (($12431) + 4|0);
  HEAPF32[$12432>>2] = $12430;
  $12433 = (($4) + 2512|0);
  $12434 = +HEAPF32[$12433>>2];
  $12435 = (($4) + 2512|0);
  $12436 = (($12435) + 4|0);
  HEAPF32[$12436>>2] = $12434;
  $12437 = (($4) + 2500|0);
  $12438 = (($12437) + 4|0);
  $12439 = +HEAPF32[$12438>>2];
  $12440 = (($4) + 2500|0);
  $12441 = (($12440) + 8|0);
  HEAPF32[$12441>>2] = $12439;
  $12442 = (($4) + 2500|0);
  $12443 = +HEAPF32[$12442>>2];
  $12444 = (($4) + 2500|0);
  $12445 = (($12444) + 4|0);
  HEAPF32[$12445>>2] = $12443;
  $12446 = (($4) + 2492|0);
  $12447 = +HEAPF32[$12446>>2];
  $12448 = (($4) + 2492|0);
  $12449 = (($12448) + 4|0);
  HEAPF32[$12449>>2] = $12447;
  $12450 = (($4) + 2480|0);
  $12451 = (($12450) + 4|0);
  $12452 = +HEAPF32[$12451>>2];
  $12453 = (($4) + 2480|0);
  $12454 = (($12453) + 8|0);
  HEAPF32[$12454>>2] = $12452;
  $12455 = (($4) + 2480|0);
  $12456 = +HEAPF32[$12455>>2];
  $12457 = (($4) + 2480|0);
  $12458 = (($12457) + 4|0);
  HEAPF32[$12458>>2] = $12456;
  $12459 = (($4) + 2468|0);
  $12460 = (($12459) + 4|0);
  $12461 = +HEAPF32[$12460>>2];
  $12462 = (($4) + 2468|0);
  $12463 = (($12462) + 8|0);
  HEAPF32[$12463>>2] = $12461;
  $12464 = (($4) + 2468|0);
  $12465 = +HEAPF32[$12464>>2];
  $12466 = (($4) + 2468|0);
  $12467 = (($12466) + 4|0);
  HEAPF32[$12467>>2] = $12465;
  $12468 = (($4) + 2456|0);
  $12469 = (($12468) + 4|0);
  $12470 = +HEAPF32[$12469>>2];
  $12471 = (($4) + 2456|0);
  $12472 = (($12471) + 8|0);
  HEAPF32[$12472>>2] = $12470;
  $12473 = (($4) + 2456|0);
  $12474 = +HEAPF32[$12473>>2];
  $12475 = (($4) + 2456|0);
  $12476 = (($12475) + 4|0);
  HEAPF32[$12476>>2] = $12474;
  $12477 = (($4) + 2444|0);
  $12478 = (($12477) + 4|0);
  $12479 = +HEAPF32[$12478>>2];
  $12480 = (($4) + 2444|0);
  $12481 = (($12480) + 8|0);
  HEAPF32[$12481>>2] = $12479;
  $12482 = (($4) + 2444|0);
  $12483 = +HEAPF32[$12482>>2];
  $12484 = (($4) + 2444|0);
  $12485 = (($12484) + 4|0);
  HEAPF32[$12485>>2] = $12483;
  $12486 = (($4) + 2436|0);
  $12487 = +HEAPF32[$12486>>2];
  $12488 = (($4) + 2436|0);
  $12489 = (($12488) + 4|0);
  HEAPF32[$12489>>2] = $12487;
  $12490 = (($4) + 2424|0);
  $12491 = (($12490) + 4|0);
  $12492 = +HEAPF32[$12491>>2];
  $12493 = (($4) + 2424|0);
  $12494 = (($12493) + 8|0);
  HEAPF32[$12494>>2] = $12492;
  $12495 = (($4) + 2424|0);
  $12496 = +HEAPF32[$12495>>2];
  $12497 = (($4) + 2424|0);
  $12498 = (($12497) + 4|0);
  HEAPF32[$12498>>2] = $12496;
  $12499 = (($4) + 2416|0);
  $12500 = +HEAPF32[$12499>>2];
  $12501 = (($4) + 2416|0);
  $12502 = (($12501) + 4|0);
  HEAPF32[$12502>>2] = $12500;
  $12503 = (($4) + 2404|0);
  $12504 = (($12503) + 4|0);
  $12505 = +HEAPF32[$12504>>2];
  $12506 = (($4) + 2404|0);
  $12507 = (($12506) + 8|0);
  HEAPF32[$12507>>2] = $12505;
  $12508 = (($4) + 2404|0);
  $12509 = +HEAPF32[$12508>>2];
  $12510 = (($4) + 2404|0);
  $12511 = (($12510) + 4|0);
  HEAPF32[$12511>>2] = $12509;
  $12512 = (($4) + 2396|0);
  $12513 = +HEAPF32[$12512>>2];
  $12514 = (($4) + 2396|0);
  $12515 = (($12514) + 4|0);
  HEAPF32[$12515>>2] = $12513;
  $12516 = (($4) + 2388|0);
  $12517 = +HEAPF32[$12516>>2];
  $12518 = (($4) + 2388|0);
  $12519 = (($12518) + 4|0);
  HEAPF32[$12519>>2] = $12517;
  $12520 = (($4) + 2376|0);
  $12521 = (($12520) + 4|0);
  $12522 = +HEAPF32[$12521>>2];
  $12523 = (($4) + 2376|0);
  $12524 = (($12523) + 8|0);
  HEAPF32[$12524>>2] = $12522;
  $12525 = (($4) + 2376|0);
  $12526 = +HEAPF32[$12525>>2];
  $12527 = (($4) + 2376|0);
  $12528 = (($12527) + 4|0);
  HEAPF32[$12528>>2] = $12526;
  $12529 = (($4) + 2368|0);
  $12530 = +HEAPF32[$12529>>2];
  $12531 = (($4) + 2368|0);
  $12532 = (($12531) + 4|0);
  HEAPF32[$12532>>2] = $12530;
  $12533 = (($4) + 2356|0);
  $12534 = (($12533) + 4|0);
  $12535 = +HEAPF32[$12534>>2];
  $12536 = (($4) + 2356|0);
  $12537 = (($12536) + 8|0);
  HEAPF32[$12537>>2] = $12535;
  $12538 = (($4) + 2356|0);
  $12539 = +HEAPF32[$12538>>2];
  $12540 = (($4) + 2356|0);
  $12541 = (($12540) + 4|0);
  HEAPF32[$12541>>2] = $12539;
  $12542 = (($4) + 2344|0);
  $12543 = (($12542) + 4|0);
  $12544 = +HEAPF32[$12543>>2];
  $12545 = (($4) + 2344|0);
  $12546 = (($12545) + 8|0);
  HEAPF32[$12546>>2] = $12544;
  $12547 = (($4) + 2344|0);
  $12548 = +HEAPF32[$12547>>2];
  $12549 = (($4) + 2344|0);
  $12550 = (($12549) + 4|0);
  HEAPF32[$12550>>2] = $12548;
  $12551 = (($4) + 2336|0);
  $12552 = +HEAPF32[$12551>>2];
  $12553 = (($4) + 2336|0);
  $12554 = (($12553) + 4|0);
  HEAPF32[$12554>>2] = $12552;
  $12555 = (($4) + 2328|0);
  $12556 = +HEAPF32[$12555>>2];
  $12557 = (($4) + 2328|0);
  $12558 = (($12557) + 4|0);
  HEAPF32[$12558>>2] = $12556;
  $12559 = (($4) + 2316|0);
  $12560 = (($12559) + 4|0);
  $12561 = +HEAPF32[$12560>>2];
  $12562 = (($4) + 2316|0);
  $12563 = (($12562) + 8|0);
  HEAPF32[$12563>>2] = $12561;
  $12564 = (($4) + 2316|0);
  $12565 = +HEAPF32[$12564>>2];
  $12566 = (($4) + 2316|0);
  $12567 = (($12566) + 4|0);
  HEAPF32[$12567>>2] = $12565;
  $12568 = (($4) + 2308|0);
  $12569 = +HEAPF32[$12568>>2];
  $12570 = (($4) + 2308|0);
  $12571 = (($12570) + 4|0);
  HEAPF32[$12571>>2] = $12569;
  $12572 = (($4) + 2296|0);
  $12573 = (($12572) + 4|0);
  $12574 = +HEAPF32[$12573>>2];
  $12575 = (($4) + 2296|0);
  $12576 = (($12575) + 8|0);
  HEAPF32[$12576>>2] = $12574;
  $12577 = (($4) + 2296|0);
  $12578 = +HEAPF32[$12577>>2];
  $12579 = (($4) + 2296|0);
  $12580 = (($12579) + 4|0);
  HEAPF32[$12580>>2] = $12578;
  $12581 = (($4) + 2284|0);
  $12582 = (($12581) + 4|0);
  $12583 = +HEAPF32[$12582>>2];
  $12584 = (($4) + 2284|0);
  $12585 = (($12584) + 8|0);
  HEAPF32[$12585>>2] = $12583;
  $12586 = (($4) + 2284|0);
  $12587 = +HEAPF32[$12586>>2];
  $12588 = (($4) + 2284|0);
  $12589 = (($12588) + 4|0);
  HEAPF32[$12589>>2] = $12587;
  $12590 = (($4) + 2272|0);
  $12591 = (($12590) + 4|0);
  $12592 = +HEAPF32[$12591>>2];
  $12593 = (($4) + 2272|0);
  $12594 = (($12593) + 8|0);
  HEAPF32[$12594>>2] = $12592;
  $12595 = (($4) + 2272|0);
  $12596 = +HEAPF32[$12595>>2];
  $12597 = (($4) + 2272|0);
  $12598 = (($12597) + 4|0);
  HEAPF32[$12598>>2] = $12596;
  $12599 = (($4) + 2264|0);
  $12600 = +HEAPF32[$12599>>2];
  $12601 = (($4) + 2264|0);
  $12602 = (($12601) + 4|0);
  HEAPF32[$12602>>2] = $12600;
  $12603 = (($4) + 2256|0);
  $12604 = +HEAPF32[$12603>>2];
  $12605 = (($4) + 2256|0);
  $12606 = (($12605) + 4|0);
  HEAPF32[$12606>>2] = $12604;
  $12607 = (($4) + 2244|0);
  $12608 = (($12607) + 4|0);
  $12609 = +HEAPF32[$12608>>2];
  $12610 = (($4) + 2244|0);
  $12611 = (($12610) + 8|0);
  HEAPF32[$12611>>2] = $12609;
  $12612 = (($4) + 2244|0);
  $12613 = +HEAPF32[$12612>>2];
  $12614 = (($4) + 2244|0);
  $12615 = (($12614) + 4|0);
  HEAPF32[$12615>>2] = $12613;
  $12616 = (($4) + 2236|0);
  $12617 = +HEAPF32[$12616>>2];
  $12618 = (($4) + 2236|0);
  $12619 = (($12618) + 4|0);
  HEAPF32[$12619>>2] = $12617;
  $12620 = (($4) + 2224|0);
  $12621 = (($12620) + 4|0);
  $12622 = +HEAPF32[$12621>>2];
  $12623 = (($4) + 2224|0);
  $12624 = (($12623) + 8|0);
  HEAPF32[$12624>>2] = $12622;
  $12625 = (($4) + 2224|0);
  $12626 = +HEAPF32[$12625>>2];
  $12627 = (($4) + 2224|0);
  $12628 = (($12627) + 4|0);
  HEAPF32[$12628>>2] = $12626;
  $12629 = (($4) + 2212|0);
  $12630 = (($12629) + 4|0);
  $12631 = +HEAPF32[$12630>>2];
  $12632 = (($4) + 2212|0);
  $12633 = (($12632) + 8|0);
  HEAPF32[$12633>>2] = $12631;
  $12634 = (($4) + 2212|0);
  $12635 = +HEAPF32[$12634>>2];
  $12636 = (($4) + 2212|0);
  $12637 = (($12636) + 4|0);
  HEAPF32[$12637>>2] = $12635;
  $12638 = (($4) + 2200|0);
  $12639 = (($12638) + 4|0);
  $12640 = +HEAPF32[$12639>>2];
  $12641 = (($4) + 2200|0);
  $12642 = (($12641) + 8|0);
  HEAPF32[$12642>>2] = $12640;
  $12643 = (($4) + 2200|0);
  $12644 = +HEAPF32[$12643>>2];
  $12645 = (($4) + 2200|0);
  $12646 = (($12645) + 4|0);
  HEAPF32[$12646>>2] = $12644;
  $12647 = (($4) + 2188|0);
  $12648 = (($12647) + 4|0);
  $12649 = +HEAPF32[$12648>>2];
  $12650 = (($4) + 2188|0);
  $12651 = (($12650) + 8|0);
  HEAPF32[$12651>>2] = $12649;
  $12652 = (($4) + 2188|0);
  $12653 = +HEAPF32[$12652>>2];
  $12654 = (($4) + 2188|0);
  $12655 = (($12654) + 4|0);
  HEAPF32[$12655>>2] = $12653;
  $12656 = (($4) + 2180|0);
  $12657 = +HEAPF32[$12656>>2];
  $12658 = (($4) + 2180|0);
  $12659 = (($12658) + 4|0);
  HEAPF32[$12659>>2] = $12657;
  $12660 = (($4) + 2168|0);
  $12661 = (($12660) + 4|0);
  $12662 = +HEAPF32[$12661>>2];
  $12663 = (($4) + 2168|0);
  $12664 = (($12663) + 8|0);
  HEAPF32[$12664>>2] = $12662;
  $12665 = (($4) + 2168|0);
  $12666 = +HEAPF32[$12665>>2];
  $12667 = (($4) + 2168|0);
  $12668 = (($12667) + 4|0);
  HEAPF32[$12668>>2] = $12666;
  $12669 = (($4) + 2160|0);
  $12670 = +HEAPF32[$12669>>2];
  $12671 = (($4) + 2160|0);
  $12672 = (($12671) + 4|0);
  HEAPF32[$12672>>2] = $12670;
  $12673 = (($4) + 2148|0);
  $12674 = (($12673) + 4|0);
  $12675 = +HEAPF32[$12674>>2];
  $12676 = (($4) + 2148|0);
  $12677 = (($12676) + 8|0);
  HEAPF32[$12677>>2] = $12675;
  $12678 = (($4) + 2148|0);
  $12679 = +HEAPF32[$12678>>2];
  $12680 = (($4) + 2148|0);
  $12681 = (($12680) + 4|0);
  HEAPF32[$12681>>2] = $12679;
  $12682 = (($4) + 2140|0);
  $12683 = +HEAPF32[$12682>>2];
  $12684 = (($4) + 2140|0);
  $12685 = (($12684) + 4|0);
  HEAPF32[$12685>>2] = $12683;
  $12686 = (($4) + 2132|0);
  $12687 = +HEAPF32[$12686>>2];
  $12688 = (($4) + 2132|0);
  $12689 = (($12688) + 4|0);
  HEAPF32[$12689>>2] = $12687;
  $12690 = (($4) + 2120|0);
  $12691 = (($12690) + 4|0);
  $12692 = +HEAPF32[$12691>>2];
  $12693 = (($4) + 2120|0);
  $12694 = (($12693) + 8|0);
  HEAPF32[$12694>>2] = $12692;
  $12695 = (($4) + 2120|0);
  $12696 = +HEAPF32[$12695>>2];
  $12697 = (($4) + 2120|0);
  $12698 = (($12697) + 4|0);
  HEAPF32[$12698>>2] = $12696;
  $12699 = (($4) + 2112|0);
  $12700 = +HEAPF32[$12699>>2];
  $12701 = (($4) + 2112|0);
  $12702 = (($12701) + 4|0);
  HEAPF32[$12702>>2] = $12700;
  $12703 = (($4) + 2100|0);
  $12704 = (($12703) + 4|0);
  $12705 = +HEAPF32[$12704>>2];
  $12706 = (($4) + 2100|0);
  $12707 = (($12706) + 8|0);
  HEAPF32[$12707>>2] = $12705;
  $12708 = (($4) + 2100|0);
  $12709 = +HEAPF32[$12708>>2];
  $12710 = (($4) + 2100|0);
  $12711 = (($12710) + 4|0);
  HEAPF32[$12711>>2] = $12709;
  $12712 = (($4) + 2088|0);
  $12713 = (($12712) + 4|0);
  $12714 = +HEAPF32[$12713>>2];
  $12715 = (($4) + 2088|0);
  $12716 = (($12715) + 8|0);
  HEAPF32[$12716>>2] = $12714;
  $12717 = (($4) + 2088|0);
  $12718 = +HEAPF32[$12717>>2];
  $12719 = (($4) + 2088|0);
  $12720 = (($12719) + 4|0);
  HEAPF32[$12720>>2] = $12718;
  $12721 = (($4) + 2080|0);
  $12722 = +HEAPF32[$12721>>2];
  $12723 = (($4) + 2080|0);
  $12724 = (($12723) + 4|0);
  HEAPF32[$12724>>2] = $12722;
  $12725 = (($4) + 2072|0);
  $12726 = +HEAPF32[$12725>>2];
  $12727 = (($4) + 2072|0);
  $12728 = (($12727) + 4|0);
  HEAPF32[$12728>>2] = $12726;
  $12729 = (($4) + 2060|0);
  $12730 = (($12729) + 4|0);
  $12731 = +HEAPF32[$12730>>2];
  $12732 = (($4) + 2060|0);
  $12733 = (($12732) + 8|0);
  HEAPF32[$12733>>2] = $12731;
  $12734 = (($4) + 2060|0);
  $12735 = +HEAPF32[$12734>>2];
  $12736 = (($4) + 2060|0);
  $12737 = (($12736) + 4|0);
  HEAPF32[$12737>>2] = $12735;
  $12738 = (($4) + 2052|0);
  $12739 = +HEAPF32[$12738>>2];
  $12740 = (($4) + 2052|0);
  $12741 = (($12740) + 4|0);
  HEAPF32[$12741>>2] = $12739;
  $12742 = (($4) + 2040|0);
  $12743 = (($12742) + 4|0);
  $12744 = +HEAPF32[$12743>>2];
  $12745 = (($4) + 2040|0);
  $12746 = (($12745) + 8|0);
  HEAPF32[$12746>>2] = $12744;
  $12747 = (($4) + 2040|0);
  $12748 = +HEAPF32[$12747>>2];
  $12749 = (($4) + 2040|0);
  $12750 = (($12749) + 4|0);
  HEAPF32[$12750>>2] = $12748;
  $12751 = (($4) + 2028|0);
  $12752 = (($12751) + 4|0);
  $12753 = +HEAPF32[$12752>>2];
  $12754 = (($4) + 2028|0);
  $12755 = (($12754) + 8|0);
  HEAPF32[$12755>>2] = $12753;
  $12756 = (($4) + 2028|0);
  $12757 = +HEAPF32[$12756>>2];
  $12758 = (($4) + 2028|0);
  $12759 = (($12758) + 4|0);
  HEAPF32[$12759>>2] = $12757;
  $12760 = (($4) + 2016|0);
  $12761 = (($12760) + 4|0);
  $12762 = +HEAPF32[$12761>>2];
  $12763 = (($4) + 2016|0);
  $12764 = (($12763) + 8|0);
  HEAPF32[$12764>>2] = $12762;
  $12765 = (($4) + 2016|0);
  $12766 = +HEAPF32[$12765>>2];
  $12767 = (($4) + 2016|0);
  $12768 = (($12767) + 4|0);
  HEAPF32[$12768>>2] = $12766;
  $12769 = (($4) + 2008|0);
  $12770 = +HEAPF32[$12769>>2];
  $12771 = (($4) + 2008|0);
  $12772 = (($12771) + 4|0);
  HEAPF32[$12772>>2] = $12770;
  $12773 = (($4) + 2000|0);
  $12774 = +HEAPF32[$12773>>2];
  $12775 = (($4) + 2000|0);
  $12776 = (($12775) + 4|0);
  HEAPF32[$12776>>2] = $12774;
  $12777 = (($4) + 1988|0);
  $12778 = (($12777) + 4|0);
  $12779 = +HEAPF32[$12778>>2];
  $12780 = (($4) + 1988|0);
  $12781 = (($12780) + 8|0);
  HEAPF32[$12781>>2] = $12779;
  $12782 = (($4) + 1988|0);
  $12783 = +HEAPF32[$12782>>2];
  $12784 = (($4) + 1988|0);
  $12785 = (($12784) + 4|0);
  HEAPF32[$12785>>2] = $12783;
  $12786 = (($4) + 1980|0);
  $12787 = +HEAPF32[$12786>>2];
  $12788 = (($4) + 1980|0);
  $12789 = (($12788) + 4|0);
  HEAPF32[$12789>>2] = $12787;
  $12790 = (($4) + 1968|0);
  $12791 = (($12790) + 4|0);
  $12792 = +HEAPF32[$12791>>2];
  $12793 = (($4) + 1968|0);
  $12794 = (($12793) + 8|0);
  HEAPF32[$12794>>2] = $12792;
  $12795 = (($4) + 1968|0);
  $12796 = +HEAPF32[$12795>>2];
  $12797 = (($4) + 1968|0);
  $12798 = (($12797) + 4|0);
  HEAPF32[$12798>>2] = $12796;
  $12799 = (($4) + 1956|0);
  $12800 = (($12799) + 4|0);
  $12801 = +HEAPF32[$12800>>2];
  $12802 = (($4) + 1956|0);
  $12803 = (($12802) + 8|0);
  HEAPF32[$12803>>2] = $12801;
  $12804 = (($4) + 1956|0);
  $12805 = +HEAPF32[$12804>>2];
  $12806 = (($4) + 1956|0);
  $12807 = (($12806) + 4|0);
  HEAPF32[$12807>>2] = $12805;
  $12808 = (($4) + 1944|0);
  $12809 = (($12808) + 4|0);
  $12810 = +HEAPF32[$12809>>2];
  $12811 = (($4) + 1944|0);
  $12812 = (($12811) + 8|0);
  HEAPF32[$12812>>2] = $12810;
  $12813 = (($4) + 1944|0);
  $12814 = +HEAPF32[$12813>>2];
  $12815 = (($4) + 1944|0);
  $12816 = (($12815) + 4|0);
  HEAPF32[$12816>>2] = $12814;
  $12817 = (($4) + 1932|0);
  $12818 = (($12817) + 4|0);
  $12819 = +HEAPF32[$12818>>2];
  $12820 = (($4) + 1932|0);
  $12821 = (($12820) + 8|0);
  HEAPF32[$12821>>2] = $12819;
  $12822 = (($4) + 1932|0);
  $12823 = +HEAPF32[$12822>>2];
  $12824 = (($4) + 1932|0);
  $12825 = (($12824) + 4|0);
  HEAPF32[$12825>>2] = $12823;
  $12826 = (($4) + 1924|0);
  $12827 = +HEAPF32[$12826>>2];
  $12828 = (($4) + 1924|0);
  $12829 = (($12828) + 4|0);
  HEAPF32[$12829>>2] = $12827;
  $12830 = (($4) + 1912|0);
  $12831 = (($12830) + 4|0);
  $12832 = +HEAPF32[$12831>>2];
  $12833 = (($4) + 1912|0);
  $12834 = (($12833) + 8|0);
  HEAPF32[$12834>>2] = $12832;
  $12835 = (($4) + 1912|0);
  $12836 = +HEAPF32[$12835>>2];
  $12837 = (($4) + 1912|0);
  $12838 = (($12837) + 4|0);
  HEAPF32[$12838>>2] = $12836;
  $12839 = (($4) + 1904|0);
  $12840 = +HEAPF32[$12839>>2];
  $12841 = (($4) + 1904|0);
  $12842 = (($12841) + 4|0);
  HEAPF32[$12842>>2] = $12840;
  $12843 = (($4) + 1892|0);
  $12844 = (($12843) + 4|0);
  $12845 = +HEAPF32[$12844>>2];
  $12846 = (($4) + 1892|0);
  $12847 = (($12846) + 8|0);
  HEAPF32[$12847>>2] = $12845;
  $12848 = (($4) + 1892|0);
  $12849 = +HEAPF32[$12848>>2];
  $12850 = (($4) + 1892|0);
  $12851 = (($12850) + 4|0);
  HEAPF32[$12851>>2] = $12849;
  $12852 = (($4) + 1884|0);
  $12853 = +HEAPF32[$12852>>2];
  $12854 = (($4) + 1884|0);
  $12855 = (($12854) + 4|0);
  HEAPF32[$12855>>2] = $12853;
  $12856 = (($4) + 1876|0);
  $12857 = +HEAPF32[$12856>>2];
  $12858 = (($4) + 1876|0);
  $12859 = (($12858) + 4|0);
  HEAPF32[$12859>>2] = $12857;
  $12860 = (($4) + 1864|0);
  $12861 = (($12860) + 4|0);
  $12862 = +HEAPF32[$12861>>2];
  $12863 = (($4) + 1864|0);
  $12864 = (($12863) + 8|0);
  HEAPF32[$12864>>2] = $12862;
  $12865 = (($4) + 1864|0);
  $12866 = +HEAPF32[$12865>>2];
  $12867 = (($4) + 1864|0);
  $12868 = (($12867) + 4|0);
  HEAPF32[$12868>>2] = $12866;
  $12869 = (($4) + 1856|0);
  $12870 = +HEAPF32[$12869>>2];
  $12871 = (($4) + 1856|0);
  $12872 = (($12871) + 4|0);
  HEAPF32[$12872>>2] = $12870;
  $12873 = (($4) + 1844|0);
  $12874 = (($12873) + 4|0);
  $12875 = +HEAPF32[$12874>>2];
  $12876 = (($4) + 1844|0);
  $12877 = (($12876) + 8|0);
  HEAPF32[$12877>>2] = $12875;
  $12878 = (($4) + 1844|0);
  $12879 = +HEAPF32[$12878>>2];
  $12880 = (($4) + 1844|0);
  $12881 = (($12880) + 4|0);
  HEAPF32[$12881>>2] = $12879;
  $12882 = (($4) + 1832|0);
  $12883 = (($12882) + 4|0);
  $12884 = +HEAPF32[$12883>>2];
  $12885 = (($4) + 1832|0);
  $12886 = (($12885) + 8|0);
  HEAPF32[$12886>>2] = $12884;
  $12887 = (($4) + 1832|0);
  $12888 = +HEAPF32[$12887>>2];
  $12889 = (($4) + 1832|0);
  $12890 = (($12889) + 4|0);
  HEAPF32[$12890>>2] = $12888;
  $12891 = (($4) + 1824|0);
  $12892 = +HEAPF32[$12891>>2];
  $12893 = (($4) + 1824|0);
  $12894 = (($12893) + 4|0);
  HEAPF32[$12894>>2] = $12892;
  $12895 = (($4) + 1816|0);
  $12896 = +HEAPF32[$12895>>2];
  $12897 = (($4) + 1816|0);
  $12898 = (($12897) + 4|0);
  HEAPF32[$12898>>2] = $12896;
  $12899 = (($4) + 1804|0);
  $12900 = (($12899) + 4|0);
  $12901 = +HEAPF32[$12900>>2];
  $12902 = (($4) + 1804|0);
  $12903 = (($12902) + 8|0);
  HEAPF32[$12903>>2] = $12901;
  $12904 = (($4) + 1804|0);
  $12905 = +HEAPF32[$12904>>2];
  $12906 = (($4) + 1804|0);
  $12907 = (($12906) + 4|0);
  HEAPF32[$12907>>2] = $12905;
  $12908 = (($4) + 1796|0);
  $12909 = +HEAPF32[$12908>>2];
  $12910 = (($4) + 1796|0);
  $12911 = (($12910) + 4|0);
  HEAPF32[$12911>>2] = $12909;
  $12912 = (($4) + 1784|0);
  $12913 = (($12912) + 4|0);
  $12914 = +HEAPF32[$12913>>2];
  $12915 = (($4) + 1784|0);
  $12916 = (($12915) + 8|0);
  HEAPF32[$12916>>2] = $12914;
  $12917 = (($4) + 1784|0);
  $12918 = +HEAPF32[$12917>>2];
  $12919 = (($4) + 1784|0);
  $12920 = (($12919) + 4|0);
  HEAPF32[$12920>>2] = $12918;
  $12921 = (($4) + 1772|0);
  $12922 = (($12921) + 4|0);
  $12923 = +HEAPF32[$12922>>2];
  $12924 = (($4) + 1772|0);
  $12925 = (($12924) + 8|0);
  HEAPF32[$12925>>2] = $12923;
  $12926 = (($4) + 1772|0);
  $12927 = +HEAPF32[$12926>>2];
  $12928 = (($4) + 1772|0);
  $12929 = (($12928) + 4|0);
  HEAPF32[$12929>>2] = $12927;
  $12930 = (($4) + 1760|0);
  $12931 = (($12930) + 4|0);
  $12932 = +HEAPF32[$12931>>2];
  $12933 = (($4) + 1760|0);
  $12934 = (($12933) + 8|0);
  HEAPF32[$12934>>2] = $12932;
  $12935 = (($4) + 1760|0);
  $12936 = +HEAPF32[$12935>>2];
  $12937 = (($4) + 1760|0);
  $12938 = (($12937) + 4|0);
  HEAPF32[$12938>>2] = $12936;
  $12939 = (($4) + 1752|0);
  $12940 = +HEAPF32[$12939>>2];
  $12941 = (($4) + 1752|0);
  $12942 = (($12941) + 4|0);
  HEAPF32[$12942>>2] = $12940;
  $12943 = (($4) + 1744|0);
  $12944 = +HEAPF32[$12943>>2];
  $12945 = (($4) + 1744|0);
  $12946 = (($12945) + 4|0);
  HEAPF32[$12946>>2] = $12944;
  $12947 = (($4) + 1732|0);
  $12948 = (($12947) + 4|0);
  $12949 = +HEAPF32[$12948>>2];
  $12950 = (($4) + 1732|0);
  $12951 = (($12950) + 8|0);
  HEAPF32[$12951>>2] = $12949;
  $12952 = (($4) + 1732|0);
  $12953 = +HEAPF32[$12952>>2];
  $12954 = (($4) + 1732|0);
  $12955 = (($12954) + 4|0);
  HEAPF32[$12955>>2] = $12953;
  $12956 = (($4) + 1724|0);
  $12957 = +HEAPF32[$12956>>2];
  $12958 = (($4) + 1724|0);
  $12959 = (($12958) + 4|0);
  HEAPF32[$12959>>2] = $12957;
  $12960 = (($4) + 1712|0);
  $12961 = (($12960) + 4|0);
  $12962 = +HEAPF32[$12961>>2];
  $12963 = (($4) + 1712|0);
  $12964 = (($12963) + 8|0);
  HEAPF32[$12964>>2] = $12962;
  $12965 = (($4) + 1712|0);
  $12966 = +HEAPF32[$12965>>2];
  $12967 = (($4) + 1712|0);
  $12968 = (($12967) + 4|0);
  HEAPF32[$12968>>2] = $12966;
  $12969 = (($4) + 1700|0);
  $12970 = (($12969) + 4|0);
  $12971 = +HEAPF32[$12970>>2];
  $12972 = (($4) + 1700|0);
  $12973 = (($12972) + 8|0);
  HEAPF32[$12973>>2] = $12971;
  $12974 = (($4) + 1700|0);
  $12975 = +HEAPF32[$12974>>2];
  $12976 = (($4) + 1700|0);
  $12977 = (($12976) + 4|0);
  HEAPF32[$12977>>2] = $12975;
  $12978 = (($4) + 1688|0);
  $12979 = (($12978) + 4|0);
  $12980 = +HEAPF32[$12979>>2];
  $12981 = (($4) + 1688|0);
  $12982 = (($12981) + 8|0);
  HEAPF32[$12982>>2] = $12980;
  $12983 = (($4) + 1688|0);
  $12984 = +HEAPF32[$12983>>2];
  $12985 = (($4) + 1688|0);
  $12986 = (($12985) + 4|0);
  HEAPF32[$12986>>2] = $12984;
  $12987 = (($4) + 1676|0);
  $12988 = (($12987) + 4|0);
  $12989 = +HEAPF32[$12988>>2];
  $12990 = (($4) + 1676|0);
  $12991 = (($12990) + 8|0);
  HEAPF32[$12991>>2] = $12989;
  $12992 = (($4) + 1676|0);
  $12993 = +HEAPF32[$12992>>2];
  $12994 = (($4) + 1676|0);
  $12995 = (($12994) + 4|0);
  HEAPF32[$12995>>2] = $12993;
  $12996 = (($4) + 1668|0);
  $12997 = +HEAPF32[$12996>>2];
  $12998 = (($4) + 1668|0);
  $12999 = (($12998) + 4|0);
  HEAPF32[$12999>>2] = $12997;
  $13000 = (($4) + 1656|0);
  $13001 = (($13000) + 4|0);
  $13002 = +HEAPF32[$13001>>2];
  $13003 = (($4) + 1656|0);
  $13004 = (($13003) + 8|0);
  HEAPF32[$13004>>2] = $13002;
  $13005 = (($4) + 1656|0);
  $13006 = +HEAPF32[$13005>>2];
  $13007 = (($4) + 1656|0);
  $13008 = (($13007) + 4|0);
  HEAPF32[$13008>>2] = $13006;
  $13009 = (($4) + 1648|0);
  $13010 = +HEAPF32[$13009>>2];
  $13011 = (($4) + 1648|0);
  $13012 = (($13011) + 4|0);
  HEAPF32[$13012>>2] = $13010;
  $13013 = (($4) + 1636|0);
  $13014 = (($13013) + 4|0);
  $13015 = +HEAPF32[$13014>>2];
  $13016 = (($4) + 1636|0);
  $13017 = (($13016) + 8|0);
  HEAPF32[$13017>>2] = $13015;
  $13018 = (($4) + 1636|0);
  $13019 = +HEAPF32[$13018>>2];
  $13020 = (($4) + 1636|0);
  $13021 = (($13020) + 4|0);
  HEAPF32[$13021>>2] = $13019;
  $13022 = (($4) + 1628|0);
  $13023 = +HEAPF32[$13022>>2];
  $13024 = (($4) + 1628|0);
  $13025 = (($13024) + 4|0);
  HEAPF32[$13025>>2] = $13023;
  $13026 = (($4) + 1620|0);
  $13027 = +HEAPF32[$13026>>2];
  $13028 = (($4) + 1620|0);
  $13029 = (($13028) + 4|0);
  HEAPF32[$13029>>2] = $13027;
  $13030 = (($4) + 1608|0);
  $13031 = (($13030) + 4|0);
  $13032 = +HEAPF32[$13031>>2];
  $13033 = (($4) + 1608|0);
  $13034 = (($13033) + 8|0);
  HEAPF32[$13034>>2] = $13032;
  $13035 = (($4) + 1608|0);
  $13036 = +HEAPF32[$13035>>2];
  $13037 = (($4) + 1608|0);
  $13038 = (($13037) + 4|0);
  HEAPF32[$13038>>2] = $13036;
  $13039 = (($4) + 1600|0);
  $13040 = +HEAPF32[$13039>>2];
  $13041 = (($4) + 1600|0);
  $13042 = (($13041) + 4|0);
  HEAPF32[$13042>>2] = $13040;
  $13043 = (($4) + 1588|0);
  $13044 = (($13043) + 4|0);
  $13045 = +HEAPF32[$13044>>2];
  $13046 = (($4) + 1588|0);
  $13047 = (($13046) + 8|0);
  HEAPF32[$13047>>2] = $13045;
  $13048 = (($4) + 1588|0);
  $13049 = +HEAPF32[$13048>>2];
  $13050 = (($4) + 1588|0);
  $13051 = (($13050) + 4|0);
  HEAPF32[$13051>>2] = $13049;
  $13052 = (($4) + 1576|0);
  $13053 = (($13052) + 4|0);
  $13054 = +HEAPF32[$13053>>2];
  $13055 = (($4) + 1576|0);
  $13056 = (($13055) + 8|0);
  HEAPF32[$13056>>2] = $13054;
  $13057 = (($4) + 1576|0);
  $13058 = +HEAPF32[$13057>>2];
  $13059 = (($4) + 1576|0);
  $13060 = (($13059) + 4|0);
  HEAPF32[$13060>>2] = $13058;
  $13061 = (($4) + 1568|0);
  $13062 = +HEAPF32[$13061>>2];
  $13063 = (($4) + 1568|0);
  $13064 = (($13063) + 4|0);
  HEAPF32[$13064>>2] = $13062;
  $13065 = (($4) + 1560|0);
  $13066 = +HEAPF32[$13065>>2];
  $13067 = (($4) + 1560|0);
  $13068 = (($13067) + 4|0);
  HEAPF32[$13068>>2] = $13066;
  $13069 = (($4) + 1548|0);
  $13070 = (($13069) + 4|0);
  $13071 = +HEAPF32[$13070>>2];
  $13072 = (($4) + 1548|0);
  $13073 = (($13072) + 8|0);
  HEAPF32[$13073>>2] = $13071;
  $13074 = (($4) + 1548|0);
  $13075 = +HEAPF32[$13074>>2];
  $13076 = (($4) + 1548|0);
  $13077 = (($13076) + 4|0);
  HEAPF32[$13077>>2] = $13075;
  $13078 = (($4) + 1540|0);
  $13079 = +HEAPF32[$13078>>2];
  $13080 = (($4) + 1540|0);
  $13081 = (($13080) + 4|0);
  HEAPF32[$13081>>2] = $13079;
  $13082 = (($4) + 1528|0);
  $13083 = (($13082) + 4|0);
  $13084 = +HEAPF32[$13083>>2];
  $13085 = (($4) + 1528|0);
  $13086 = (($13085) + 8|0);
  HEAPF32[$13086>>2] = $13084;
  $13087 = (($4) + 1528|0);
  $13088 = +HEAPF32[$13087>>2];
  $13089 = (($4) + 1528|0);
  $13090 = (($13089) + 4|0);
  HEAPF32[$13090>>2] = $13088;
  $13091 = (($4) + 1516|0);
  $13092 = (($13091) + 4|0);
  $13093 = +HEAPF32[$13092>>2];
  $13094 = (($4) + 1516|0);
  $13095 = (($13094) + 8|0);
  HEAPF32[$13095>>2] = $13093;
  $13096 = (($4) + 1516|0);
  $13097 = +HEAPF32[$13096>>2];
  $13098 = (($4) + 1516|0);
  $13099 = (($13098) + 4|0);
  HEAPF32[$13099>>2] = $13097;
  $13100 = (($4) + 1504|0);
  $13101 = (($13100) + 4|0);
  $13102 = +HEAPF32[$13101>>2];
  $13103 = (($4) + 1504|0);
  $13104 = (($13103) + 8|0);
  HEAPF32[$13104>>2] = $13102;
  $13105 = (($4) + 1504|0);
  $13106 = +HEAPF32[$13105>>2];
  $13107 = (($4) + 1504|0);
  $13108 = (($13107) + 4|0);
  HEAPF32[$13108>>2] = $13106;
  $13109 = (($4) + 1496|0);
  $13110 = +HEAPF32[$13109>>2];
  $13111 = (($4) + 1496|0);
  $13112 = (($13111) + 4|0);
  HEAPF32[$13112>>2] = $13110;
  $13113 = (($4) + 1488|0);
  $13114 = +HEAPF32[$13113>>2];
  $13115 = (($4) + 1488|0);
  $13116 = (($13115) + 4|0);
  HEAPF32[$13116>>2] = $13114;
  $13117 = (($4) + 1476|0);
  $13118 = (($13117) + 4|0);
  $13119 = +HEAPF32[$13118>>2];
  $13120 = (($4) + 1476|0);
  $13121 = (($13120) + 8|0);
  HEAPF32[$13121>>2] = $13119;
  $13122 = (($4) + 1476|0);
  $13123 = +HEAPF32[$13122>>2];
  $13124 = (($4) + 1476|0);
  $13125 = (($13124) + 4|0);
  HEAPF32[$13125>>2] = $13123;
  $13126 = (($4) + 1468|0);
  $13127 = +HEAPF32[$13126>>2];
  $13128 = (($4) + 1468|0);
  $13129 = (($13128) + 4|0);
  HEAPF32[$13129>>2] = $13127;
  $13130 = (($4) + 1456|0);
  $13131 = (($13130) + 4|0);
  $13132 = +HEAPF32[$13131>>2];
  $13133 = (($4) + 1456|0);
  $13134 = (($13133) + 8|0);
  HEAPF32[$13134>>2] = $13132;
  $13135 = (($4) + 1456|0);
  $13136 = +HEAPF32[$13135>>2];
  $13137 = (($4) + 1456|0);
  $13138 = (($13137) + 4|0);
  HEAPF32[$13138>>2] = $13136;
  $13139 = (($4) + 1444|0);
  $13140 = (($13139) + 4|0);
  $13141 = +HEAPF32[$13140>>2];
  $13142 = (($4) + 1444|0);
  $13143 = (($13142) + 8|0);
  HEAPF32[$13143>>2] = $13141;
  $13144 = (($4) + 1444|0);
  $13145 = +HEAPF32[$13144>>2];
  $13146 = (($4) + 1444|0);
  $13147 = (($13146) + 4|0);
  HEAPF32[$13147>>2] = $13145;
  $13148 = (($4) + 1432|0);
  $13149 = (($13148) + 4|0);
  $13150 = +HEAPF32[$13149>>2];
  $13151 = (($4) + 1432|0);
  $13152 = (($13151) + 8|0);
  HEAPF32[$13152>>2] = $13150;
  $13153 = (($4) + 1432|0);
  $13154 = +HEAPF32[$13153>>2];
  $13155 = (($4) + 1432|0);
  $13156 = (($13155) + 4|0);
  HEAPF32[$13156>>2] = $13154;
  $13157 = (($4) + 1420|0);
  $13158 = (($13157) + 4|0);
  $13159 = +HEAPF32[$13158>>2];
  $13160 = (($4) + 1420|0);
  $13161 = (($13160) + 8|0);
  HEAPF32[$13161>>2] = $13159;
  $13162 = (($4) + 1420|0);
  $13163 = +HEAPF32[$13162>>2];
  $13164 = (($4) + 1420|0);
  $13165 = (($13164) + 4|0);
  HEAPF32[$13165>>2] = $13163;
  $13166 = (($4) + 1412|0);
  $13167 = +HEAPF32[$13166>>2];
  $13168 = (($4) + 1412|0);
  $13169 = (($13168) + 4|0);
  HEAPF32[$13169>>2] = $13167;
  $13170 = (($4) + 1400|0);
  $13171 = (($13170) + 4|0);
  $13172 = +HEAPF32[$13171>>2];
  $13173 = (($4) + 1400|0);
  $13174 = (($13173) + 8|0);
  HEAPF32[$13174>>2] = $13172;
  $13175 = (($4) + 1400|0);
  $13176 = +HEAPF32[$13175>>2];
  $13177 = (($4) + 1400|0);
  $13178 = (($13177) + 4|0);
  HEAPF32[$13178>>2] = $13176;
  $13179 = (($4) + 1392|0);
  $13180 = +HEAPF32[$13179>>2];
  $13181 = (($4) + 1392|0);
  $13182 = (($13181) + 4|0);
  HEAPF32[$13182>>2] = $13180;
  $13183 = (($4) + 1380|0);
  $13184 = (($13183) + 4|0);
  $13185 = +HEAPF32[$13184>>2];
  $13186 = (($4) + 1380|0);
  $13187 = (($13186) + 8|0);
  HEAPF32[$13187>>2] = $13185;
  $13188 = (($4) + 1380|0);
  $13189 = +HEAPF32[$13188>>2];
  $13190 = (($4) + 1380|0);
  $13191 = (($13190) + 4|0);
  HEAPF32[$13191>>2] = $13189;
  $13192 = (($4) + 1372|0);
  $13193 = +HEAPF32[$13192>>2];
  $13194 = (($4) + 1372|0);
  $13195 = (($13194) + 4|0);
  HEAPF32[$13195>>2] = $13193;
  $13196 = (($4) + 1364|0);
  $13197 = +HEAPF32[$13196>>2];
  $13198 = (($4) + 1364|0);
  $13199 = (($13198) + 4|0);
  HEAPF32[$13199>>2] = $13197;
  $13200 = (($4) + 1352|0);
  $13201 = (($13200) + 4|0);
  $13202 = +HEAPF32[$13201>>2];
  $13203 = (($4) + 1352|0);
  $13204 = (($13203) + 8|0);
  HEAPF32[$13204>>2] = $13202;
  $13205 = (($4) + 1352|0);
  $13206 = +HEAPF32[$13205>>2];
  $13207 = (($4) + 1352|0);
  $13208 = (($13207) + 4|0);
  HEAPF32[$13208>>2] = $13206;
  $13209 = (($4) + 1344|0);
  $13210 = +HEAPF32[$13209>>2];
  $13211 = (($4) + 1344|0);
  $13212 = (($13211) + 4|0);
  HEAPF32[$13212>>2] = $13210;
  $13213 = (($4) + 1332|0);
  $13214 = (($13213) + 4|0);
  $13215 = +HEAPF32[$13214>>2];
  $13216 = (($4) + 1332|0);
  $13217 = (($13216) + 8|0);
  HEAPF32[$13217>>2] = $13215;
  $13218 = (($4) + 1332|0);
  $13219 = +HEAPF32[$13218>>2];
  $13220 = (($4) + 1332|0);
  $13221 = (($13220) + 4|0);
  HEAPF32[$13221>>2] = $13219;
  $13222 = (($4) + 1320|0);
  $13223 = (($13222) + 4|0);
  $13224 = +HEAPF32[$13223>>2];
  $13225 = (($4) + 1320|0);
  $13226 = (($13225) + 8|0);
  HEAPF32[$13226>>2] = $13224;
  $13227 = (($4) + 1320|0);
  $13228 = +HEAPF32[$13227>>2];
  $13229 = (($4) + 1320|0);
  $13230 = (($13229) + 4|0);
  HEAPF32[$13230>>2] = $13228;
  $13231 = (($4) + 1312|0);
  $13232 = +HEAPF32[$13231>>2];
  $13233 = (($4) + 1312|0);
  $13234 = (($13233) + 4|0);
  HEAPF32[$13234>>2] = $13232;
  $13235 = (($4) + 1304|0);
  $13236 = +HEAPF32[$13235>>2];
  $13237 = (($4) + 1304|0);
  $13238 = (($13237) + 4|0);
  HEAPF32[$13238>>2] = $13236;
  $13239 = (($4) + 1292|0);
  $13240 = (($13239) + 4|0);
  $13241 = +HEAPF32[$13240>>2];
  $13242 = (($4) + 1292|0);
  $13243 = (($13242) + 8|0);
  HEAPF32[$13243>>2] = $13241;
  $13244 = (($4) + 1292|0);
  $13245 = +HEAPF32[$13244>>2];
  $13246 = (($4) + 1292|0);
  $13247 = (($13246) + 4|0);
  HEAPF32[$13247>>2] = $13245;
  $13248 = (($4) + 1284|0);
  $13249 = +HEAPF32[$13248>>2];
  $13250 = (($4) + 1284|0);
  $13251 = (($13250) + 4|0);
  HEAPF32[$13251>>2] = $13249;
  $13252 = (($4) + 1272|0);
  $13253 = (($13252) + 4|0);
  $13254 = +HEAPF32[$13253>>2];
  $13255 = (($4) + 1272|0);
  $13256 = (($13255) + 8|0);
  HEAPF32[$13256>>2] = $13254;
  $13257 = (($4) + 1272|0);
  $13258 = +HEAPF32[$13257>>2];
  $13259 = (($4) + 1272|0);
  $13260 = (($13259) + 4|0);
  HEAPF32[$13260>>2] = $13258;
  $13261 = (($4) + 1260|0);
  $13262 = (($13261) + 4|0);
  $13263 = +HEAPF32[$13262>>2];
  $13264 = (($4) + 1260|0);
  $13265 = (($13264) + 8|0);
  HEAPF32[$13265>>2] = $13263;
  $13266 = (($4) + 1260|0);
  $13267 = +HEAPF32[$13266>>2];
  $13268 = (($4) + 1260|0);
  $13269 = (($13268) + 4|0);
  HEAPF32[$13269>>2] = $13267;
  $13270 = (($4) + 1248|0);
  $13271 = (($13270) + 4|0);
  $13272 = +HEAPF32[$13271>>2];
  $13273 = (($4) + 1248|0);
  $13274 = (($13273) + 8|0);
  HEAPF32[$13274>>2] = $13272;
  $13275 = (($4) + 1248|0);
  $13276 = +HEAPF32[$13275>>2];
  $13277 = (($4) + 1248|0);
  $13278 = (($13277) + 4|0);
  HEAPF32[$13278>>2] = $13276;
  $13279 = (($4) + 1240|0);
  $13280 = +HEAPF32[$13279>>2];
  $13281 = (($4) + 1240|0);
  $13282 = (($13281) + 4|0);
  HEAPF32[$13282>>2] = $13280;
  $13283 = (($4) + 1232|0);
  $13284 = +HEAPF32[$13283>>2];
  $13285 = (($4) + 1232|0);
  $13286 = (($13285) + 4|0);
  HEAPF32[$13286>>2] = $13284;
  $13287 = (($4) + 1220|0);
  $13288 = (($13287) + 4|0);
  $13289 = +HEAPF32[$13288>>2];
  $13290 = (($4) + 1220|0);
  $13291 = (($13290) + 8|0);
  HEAPF32[$13291>>2] = $13289;
  $13292 = (($4) + 1220|0);
  $13293 = +HEAPF32[$13292>>2];
  $13294 = (($4) + 1220|0);
  $13295 = (($13294) + 4|0);
  HEAPF32[$13295>>2] = $13293;
  $13296 = (($4) + 1212|0);
  $13297 = +HEAPF32[$13296>>2];
  $13298 = (($4) + 1212|0);
  $13299 = (($13298) + 4|0);
  HEAPF32[$13299>>2] = $13297;
  $13300 = (($4) + 1200|0);
  $13301 = (($13300) + 4|0);
  $13302 = +HEAPF32[$13301>>2];
  $13303 = (($4) + 1200|0);
  $13304 = (($13303) + 8|0);
  HEAPF32[$13304>>2] = $13302;
  $13305 = (($4) + 1200|0);
  $13306 = +HEAPF32[$13305>>2];
  $13307 = (($4) + 1200|0);
  $13308 = (($13307) + 4|0);
  HEAPF32[$13308>>2] = $13306;
  $13309 = (($4) + 1188|0);
  $13310 = (($13309) + 4|0);
  $13311 = +HEAPF32[$13310>>2];
  $13312 = (($4) + 1188|0);
  $13313 = (($13312) + 8|0);
  HEAPF32[$13313>>2] = $13311;
  $13314 = (($4) + 1188|0);
  $13315 = +HEAPF32[$13314>>2];
  $13316 = (($4) + 1188|0);
  $13317 = (($13316) + 4|0);
  HEAPF32[$13317>>2] = $13315;
  $13318 = (($4) + 1176|0);
  $13319 = (($13318) + 4|0);
  $13320 = +HEAPF32[$13319>>2];
  $13321 = (($4) + 1176|0);
  $13322 = (($13321) + 8|0);
  HEAPF32[$13322>>2] = $13320;
  $13323 = (($4) + 1176|0);
  $13324 = +HEAPF32[$13323>>2];
  $13325 = (($4) + 1176|0);
  $13326 = (($13325) + 4|0);
  HEAPF32[$13326>>2] = $13324;
  $13327 = (($4) + 1164|0);
  $13328 = (($13327) + 4|0);
  $13329 = +HEAPF32[$13328>>2];
  $13330 = (($4) + 1164|0);
  $13331 = (($13330) + 8|0);
  HEAPF32[$13331>>2] = $13329;
  $13332 = (($4) + 1164|0);
  $13333 = +HEAPF32[$13332>>2];
  $13334 = (($4) + 1164|0);
  $13335 = (($13334) + 4|0);
  HEAPF32[$13335>>2] = $13333;
  $13336 = (($4) + 1156|0);
  $13337 = +HEAPF32[$13336>>2];
  $13338 = (($4) + 1156|0);
  $13339 = (($13338) + 4|0);
  HEAPF32[$13339>>2] = $13337;
  $13340 = (($4) + 1144|0);
  $13341 = (($13340) + 4|0);
  $13342 = +HEAPF32[$13341>>2];
  $13343 = (($4) + 1144|0);
  $13344 = (($13343) + 8|0);
  HEAPF32[$13344>>2] = $13342;
  $13345 = (($4) + 1144|0);
  $13346 = +HEAPF32[$13345>>2];
  $13347 = (($4) + 1144|0);
  $13348 = (($13347) + 4|0);
  HEAPF32[$13348>>2] = $13346;
  $13349 = (($4) + 1136|0);
  $13350 = +HEAPF32[$13349>>2];
  $13351 = (($4) + 1136|0);
  $13352 = (($13351) + 4|0);
  HEAPF32[$13352>>2] = $13350;
  $13353 = (($4) + 1124|0);
  $13354 = (($13353) + 4|0);
  $13355 = +HEAPF32[$13354>>2];
  $13356 = (($4) + 1124|0);
  $13357 = (($13356) + 8|0);
  HEAPF32[$13357>>2] = $13355;
  $13358 = (($4) + 1124|0);
  $13359 = +HEAPF32[$13358>>2];
  $13360 = (($4) + 1124|0);
  $13361 = (($13360) + 4|0);
  HEAPF32[$13361>>2] = $13359;
  $13362 = (($4) + 1116|0);
  $13363 = +HEAPF32[$13362>>2];
  $13364 = (($4) + 1116|0);
  $13365 = (($13364) + 4|0);
  HEAPF32[$13365>>2] = $13363;
  $13366 = (($4) + 1108|0);
  $13367 = +HEAPF32[$13366>>2];
  $13368 = (($4) + 1108|0);
  $13369 = (($13368) + 4|0);
  HEAPF32[$13369>>2] = $13367;
  $13370 = (($4) + 1096|0);
  $13371 = (($13370) + 4|0);
  $13372 = +HEAPF32[$13371>>2];
  $13373 = (($4) + 1096|0);
  $13374 = (($13373) + 8|0);
  HEAPF32[$13374>>2] = $13372;
  $13375 = (($4) + 1096|0);
  $13376 = +HEAPF32[$13375>>2];
  $13377 = (($4) + 1096|0);
  $13378 = (($13377) + 4|0);
  HEAPF32[$13378>>2] = $13376;
  $13379 = (($4) + 1088|0);
  $13380 = +HEAPF32[$13379>>2];
  $13381 = (($4) + 1088|0);
  $13382 = (($13381) + 4|0);
  HEAPF32[$13382>>2] = $13380;
  $13383 = (($4) + 1076|0);
  $13384 = (($13383) + 4|0);
  $13385 = +HEAPF32[$13384>>2];
  $13386 = (($4) + 1076|0);
  $13387 = (($13386) + 8|0);
  HEAPF32[$13387>>2] = $13385;
  $13388 = (($4) + 1076|0);
  $13389 = +HEAPF32[$13388>>2];
  $13390 = (($4) + 1076|0);
  $13391 = (($13390) + 4|0);
  HEAPF32[$13391>>2] = $13389;
  $13392 = (($4) + 1064|0);
  $13393 = (($13392) + 4|0);
  $13394 = +HEAPF32[$13393>>2];
  $13395 = (($4) + 1064|0);
  $13396 = (($13395) + 8|0);
  HEAPF32[$13396>>2] = $13394;
  $13397 = (($4) + 1064|0);
  $13398 = +HEAPF32[$13397>>2];
  $13399 = (($4) + 1064|0);
  $13400 = (($13399) + 4|0);
  HEAPF32[$13400>>2] = $13398;
  $13401 = (($4) + 1056|0);
  $13402 = +HEAPF32[$13401>>2];
  $13403 = (($4) + 1056|0);
  $13404 = (($13403) + 4|0);
  HEAPF32[$13404>>2] = $13402;
  $13405 = (($4) + 1048|0);
  $13406 = +HEAPF32[$13405>>2];
  $13407 = (($4) + 1048|0);
  $13408 = (($13407) + 4|0);
  HEAPF32[$13408>>2] = $13406;
  $13409 = (($4) + 1036|0);
  $13410 = (($13409) + 4|0);
  $13411 = +HEAPF32[$13410>>2];
  $13412 = (($4) + 1036|0);
  $13413 = (($13412) + 8|0);
  HEAPF32[$13413>>2] = $13411;
  $13414 = (($4) + 1036|0);
  $13415 = +HEAPF32[$13414>>2];
  $13416 = (($4) + 1036|0);
  $13417 = (($13416) + 4|0);
  HEAPF32[$13417>>2] = $13415;
  $13418 = (($4) + 1028|0);
  $13419 = +HEAPF32[$13418>>2];
  $13420 = (($4) + 1028|0);
  $13421 = (($13420) + 4|0);
  HEAPF32[$13421>>2] = $13419;
  $13422 = (($4) + 1016|0);
  $13423 = (($13422) + 4|0);
  $13424 = +HEAPF32[$13423>>2];
  $13425 = (($4) + 1016|0);
  $13426 = (($13425) + 8|0);
  HEAPF32[$13426>>2] = $13424;
  $13427 = (($4) + 1016|0);
  $13428 = +HEAPF32[$13427>>2];
  $13429 = (($4) + 1016|0);
  $13430 = (($13429) + 4|0);
  HEAPF32[$13430>>2] = $13428;
  $13431 = (($4) + 1004|0);
  $13432 = (($13431) + 4|0);
  $13433 = +HEAPF32[$13432>>2];
  $13434 = (($4) + 1004|0);
  $13435 = (($13434) + 8|0);
  HEAPF32[$13435>>2] = $13433;
  $13436 = (($4) + 1004|0);
  $13437 = +HEAPF32[$13436>>2];
  $13438 = (($4) + 1004|0);
  $13439 = (($13438) + 4|0);
  HEAPF32[$13439>>2] = $13437;
  $13440 = (($4) + 992|0);
  $13441 = (($13440) + 4|0);
  $13442 = +HEAPF32[$13441>>2];
  $13443 = (($4) + 992|0);
  $13444 = (($13443) + 8|0);
  HEAPF32[$13444>>2] = $13442;
  $13445 = (($4) + 992|0);
  $13446 = +HEAPF32[$13445>>2];
  $13447 = (($4) + 992|0);
  $13448 = (($13447) + 4|0);
  HEAPF32[$13448>>2] = $13446;
  $13449 = (($4) + 984|0);
  $13450 = +HEAPF32[$13449>>2];
  $13451 = (($4) + 984|0);
  $13452 = (($13451) + 4|0);
  HEAPF32[$13452>>2] = $13450;
  $13453 = (($4) + 976|0);
  $13454 = +HEAPF32[$13453>>2];
  $13455 = (($4) + 976|0);
  $13456 = (($13455) + 4|0);
  HEAPF32[$13456>>2] = $13454;
  $13457 = (($4) + 964|0);
  $13458 = (($13457) + 4|0);
  $13459 = +HEAPF32[$13458>>2];
  $13460 = (($4) + 964|0);
  $13461 = (($13460) + 8|0);
  HEAPF32[$13461>>2] = $13459;
  $13462 = (($4) + 964|0);
  $13463 = +HEAPF32[$13462>>2];
  $13464 = (($4) + 964|0);
  $13465 = (($13464) + 4|0);
  HEAPF32[$13465>>2] = $13463;
  $13466 = (($4) + 956|0);
  $13467 = +HEAPF32[$13466>>2];
  $13468 = (($4) + 956|0);
  $13469 = (($13468) + 4|0);
  HEAPF32[$13469>>2] = $13467;
  $13470 = (($4) + 944|0);
  $13471 = (($13470) + 4|0);
  $13472 = +HEAPF32[$13471>>2];
  $13473 = (($4) + 944|0);
  $13474 = (($13473) + 8|0);
  HEAPF32[$13474>>2] = $13472;
  $13475 = (($4) + 944|0);
  $13476 = +HEAPF32[$13475>>2];
  $13477 = (($4) + 944|0);
  $13478 = (($13477) + 4|0);
  HEAPF32[$13478>>2] = $13476;
  $13479 = (($4) + 932|0);
  $13480 = (($13479) + 4|0);
  $13481 = +HEAPF32[$13480>>2];
  $13482 = (($4) + 932|0);
  $13483 = (($13482) + 8|0);
  HEAPF32[$13483>>2] = $13481;
  $13484 = (($4) + 932|0);
  $13485 = +HEAPF32[$13484>>2];
  $13486 = (($4) + 932|0);
  $13487 = (($13486) + 4|0);
  HEAPF32[$13487>>2] = $13485;
  $13488 = (($4) + 920|0);
  $13489 = (($13488) + 4|0);
  $13490 = +HEAPF32[$13489>>2];
  $13491 = (($4) + 920|0);
  $13492 = (($13491) + 8|0);
  HEAPF32[$13492>>2] = $13490;
  $13493 = (($4) + 920|0);
  $13494 = +HEAPF32[$13493>>2];
  $13495 = (($4) + 920|0);
  $13496 = (($13495) + 4|0);
  HEAPF32[$13496>>2] = $13494;
  $13497 = (($4) + 908|0);
  $13498 = (($13497) + 4|0);
  $13499 = +HEAPF32[$13498>>2];
  $13500 = (($4) + 908|0);
  $13501 = (($13500) + 8|0);
  HEAPF32[$13501>>2] = $13499;
  $13502 = (($4) + 908|0);
  $13503 = +HEAPF32[$13502>>2];
  $13504 = (($4) + 908|0);
  $13505 = (($13504) + 4|0);
  HEAPF32[$13505>>2] = $13503;
  $13506 = (($4) + 900|0);
  $13507 = +HEAPF32[$13506>>2];
  $13508 = (($4) + 900|0);
  $13509 = (($13508) + 4|0);
  HEAPF32[$13509>>2] = $13507;
  $13510 = (($4) + 888|0);
  $13511 = (($13510) + 4|0);
  $13512 = +HEAPF32[$13511>>2];
  $13513 = (($4) + 888|0);
  $13514 = (($13513) + 8|0);
  HEAPF32[$13514>>2] = $13512;
  $13515 = (($4) + 888|0);
  $13516 = +HEAPF32[$13515>>2];
  $13517 = (($4) + 888|0);
  $13518 = (($13517) + 4|0);
  HEAPF32[$13518>>2] = $13516;
  $13519 = (($4) + 880|0);
  $13520 = +HEAPF32[$13519>>2];
  $13521 = (($4) + 880|0);
  $13522 = (($13521) + 4|0);
  HEAPF32[$13522>>2] = $13520;
  $13523 = (($4) + 868|0);
  $13524 = (($13523) + 4|0);
  $13525 = +HEAPF32[$13524>>2];
  $13526 = (($4) + 868|0);
  $13527 = (($13526) + 8|0);
  HEAPF32[$13527>>2] = $13525;
  $13528 = (($4) + 868|0);
  $13529 = +HEAPF32[$13528>>2];
  $13530 = (($4) + 868|0);
  $13531 = (($13530) + 4|0);
  HEAPF32[$13531>>2] = $13529;
  $13532 = (($4) + 860|0);
  $13533 = +HEAPF32[$13532>>2];
  $13534 = (($4) + 860|0);
  $13535 = (($13534) + 4|0);
  HEAPF32[$13535>>2] = $13533;
  $13536 = (($4) + 852|0);
  $13537 = +HEAPF32[$13536>>2];
  $13538 = (($4) + 852|0);
  $13539 = (($13538) + 4|0);
  HEAPF32[$13539>>2] = $13537;
  $13540 = (($4) + 840|0);
  $13541 = (($13540) + 4|0);
  $13542 = +HEAPF32[$13541>>2];
  $13543 = (($4) + 840|0);
  $13544 = (($13543) + 8|0);
  HEAPF32[$13544>>2] = $13542;
  $13545 = (($4) + 840|0);
  $13546 = +HEAPF32[$13545>>2];
  $13547 = (($4) + 840|0);
  $13548 = (($13547) + 4|0);
  HEAPF32[$13548>>2] = $13546;
  $13549 = (($4) + 832|0);
  $13550 = +HEAPF32[$13549>>2];
  $13551 = (($4) + 832|0);
  $13552 = (($13551) + 4|0);
  HEAPF32[$13552>>2] = $13550;
  $13553 = (($4) + 820|0);
  $13554 = (($13553) + 4|0);
  $13555 = +HEAPF32[$13554>>2];
  $13556 = (($4) + 820|0);
  $13557 = (($13556) + 8|0);
  HEAPF32[$13557>>2] = $13555;
  $13558 = (($4) + 820|0);
  $13559 = +HEAPF32[$13558>>2];
  $13560 = (($4) + 820|0);
  $13561 = (($13560) + 4|0);
  HEAPF32[$13561>>2] = $13559;
  $13562 = (($4) + 808|0);
  $13563 = (($13562) + 4|0);
  $13564 = +HEAPF32[$13563>>2];
  $13565 = (($4) + 808|0);
  $13566 = (($13565) + 8|0);
  HEAPF32[$13566>>2] = $13564;
  $13567 = (($4) + 808|0);
  $13568 = +HEAPF32[$13567>>2];
  $13569 = (($4) + 808|0);
  $13570 = (($13569) + 4|0);
  HEAPF32[$13570>>2] = $13568;
  $13571 = (($4) + 800|0);
  $13572 = +HEAPF32[$13571>>2];
  $13573 = (($4) + 800|0);
  $13574 = (($13573) + 4|0);
  HEAPF32[$13574>>2] = $13572;
  $13575 = (($4) + 792|0);
  $13576 = +HEAPF32[$13575>>2];
  $13577 = (($4) + 792|0);
  $13578 = (($13577) + 4|0);
  HEAPF32[$13578>>2] = $13576;
  $13579 = (($4) + 780|0);
  $13580 = (($13579) + 4|0);
  $13581 = +HEAPF32[$13580>>2];
  $13582 = (($4) + 780|0);
  $13583 = (($13582) + 8|0);
  HEAPF32[$13583>>2] = $13581;
  $13584 = (($4) + 780|0);
  $13585 = +HEAPF32[$13584>>2];
  $13586 = (($4) + 780|0);
  $13587 = (($13586) + 4|0);
  HEAPF32[$13587>>2] = $13585;
  $13588 = (($4) + 772|0);
  $13589 = +HEAPF32[$13588>>2];
  $13590 = (($4) + 772|0);
  $13591 = (($13590) + 4|0);
  HEAPF32[$13591>>2] = $13589;
  $13592 = (($4) + 760|0);
  $13593 = (($13592) + 4|0);
  $13594 = +HEAPF32[$13593>>2];
  $13595 = (($4) + 760|0);
  $13596 = (($13595) + 8|0);
  HEAPF32[$13596>>2] = $13594;
  $13597 = (($4) + 760|0);
  $13598 = +HEAPF32[$13597>>2];
  $13599 = (($4) + 760|0);
  $13600 = (($13599) + 4|0);
  HEAPF32[$13600>>2] = $13598;
  $13601 = (($4) + 748|0);
  $13602 = (($13601) + 4|0);
  $13603 = +HEAPF32[$13602>>2];
  $13604 = (($4) + 748|0);
  $13605 = (($13604) + 8|0);
  HEAPF32[$13605>>2] = $13603;
  $13606 = (($4) + 748|0);
  $13607 = +HEAPF32[$13606>>2];
  $13608 = (($4) + 748|0);
  $13609 = (($13608) + 4|0);
  HEAPF32[$13609>>2] = $13607;
  $13610 = (($4) + 736|0);
  $13611 = (($13610) + 4|0);
  $13612 = +HEAPF32[$13611>>2];
  $13613 = (($4) + 736|0);
  $13614 = (($13613) + 8|0);
  HEAPF32[$13614>>2] = $13612;
  $13615 = (($4) + 736|0);
  $13616 = +HEAPF32[$13615>>2];
  $13617 = (($4) + 736|0);
  $13618 = (($13617) + 4|0);
  HEAPF32[$13618>>2] = $13616;
  $13619 = (($4) + 728|0);
  $13620 = +HEAPF32[$13619>>2];
  $13621 = (($4) + 728|0);
  $13622 = (($13621) + 4|0);
  HEAPF32[$13622>>2] = $13620;
  $13623 = (($4) + 720|0);
  $13624 = +HEAPF32[$13623>>2];
  $13625 = (($4) + 720|0);
  $13626 = (($13625) + 4|0);
  HEAPF32[$13626>>2] = $13624;
  $13627 = (($4) + 708|0);
  $13628 = (($13627) + 4|0);
  $13629 = +HEAPF32[$13628>>2];
  $13630 = (($4) + 708|0);
  $13631 = (($13630) + 8|0);
  HEAPF32[$13631>>2] = $13629;
  $13632 = (($4) + 708|0);
  $13633 = +HEAPF32[$13632>>2];
  $13634 = (($4) + 708|0);
  $13635 = (($13634) + 4|0);
  HEAPF32[$13635>>2] = $13633;
  $13636 = (($4) + 700|0);
  $13637 = +HEAPF32[$13636>>2];
  $13638 = (($4) + 700|0);
  $13639 = (($13638) + 4|0);
  HEAPF32[$13639>>2] = $13637;
  $13640 = (($4) + 688|0);
  $13641 = (($13640) + 4|0);
  $13642 = +HEAPF32[$13641>>2];
  $13643 = (($4) + 688|0);
  $13644 = (($13643) + 8|0);
  HEAPF32[$13644>>2] = $13642;
  $13645 = (($4) + 688|0);
  $13646 = +HEAPF32[$13645>>2];
  $13647 = (($4) + 688|0);
  $13648 = (($13647) + 4|0);
  HEAPF32[$13648>>2] = $13646;
  $13649 = (($4) + 676|0);
  $13650 = (($13649) + 4|0);
  $13651 = +HEAPF32[$13650>>2];
  $13652 = (($4) + 676|0);
  $13653 = (($13652) + 8|0);
  HEAPF32[$13653>>2] = $13651;
  $13654 = (($4) + 676|0);
  $13655 = +HEAPF32[$13654>>2];
  $13656 = (($4) + 676|0);
  $13657 = (($13656) + 4|0);
  HEAPF32[$13657>>2] = $13655;
  $13658 = (($4) + 664|0);
  $13659 = (($13658) + 4|0);
  $13660 = +HEAPF32[$13659>>2];
  $13661 = (($4) + 664|0);
  $13662 = (($13661) + 8|0);
  HEAPF32[$13662>>2] = $13660;
  $13663 = (($4) + 664|0);
  $13664 = +HEAPF32[$13663>>2];
  $13665 = (($4) + 664|0);
  $13666 = (($13665) + 4|0);
  HEAPF32[$13666>>2] = $13664;
  $13667 = (($4) + 652|0);
  $13668 = (($13667) + 4|0);
  $13669 = +HEAPF32[$13668>>2];
  $13670 = (($4) + 652|0);
  $13671 = (($13670) + 8|0);
  HEAPF32[$13671>>2] = $13669;
  $13672 = (($4) + 652|0);
  $13673 = +HEAPF32[$13672>>2];
  $13674 = (($4) + 652|0);
  $13675 = (($13674) + 4|0);
  HEAPF32[$13675>>2] = $13673;
  $13676 = (($4) + 644|0);
  $13677 = +HEAPF32[$13676>>2];
  $13678 = (($4) + 644|0);
  $13679 = (($13678) + 4|0);
  HEAPF32[$13679>>2] = $13677;
  $13680 = (($4) + 632|0);
  $13681 = (($13680) + 4|0);
  $13682 = +HEAPF32[$13681>>2];
  $13683 = (($4) + 632|0);
  $13684 = (($13683) + 8|0);
  HEAPF32[$13684>>2] = $13682;
  $13685 = (($4) + 632|0);
  $13686 = +HEAPF32[$13685>>2];
  $13687 = (($4) + 632|0);
  $13688 = (($13687) + 4|0);
  HEAPF32[$13688>>2] = $13686;
  $13689 = (($4) + 624|0);
  $13690 = +HEAPF32[$13689>>2];
  $13691 = (($4) + 624|0);
  $13692 = (($13691) + 4|0);
  HEAPF32[$13692>>2] = $13690;
  $13693 = (($4) + 612|0);
  $13694 = (($13693) + 4|0);
  $13695 = +HEAPF32[$13694>>2];
  $13696 = (($4) + 612|0);
  $13697 = (($13696) + 8|0);
  HEAPF32[$13697>>2] = $13695;
  $13698 = (($4) + 612|0);
  $13699 = +HEAPF32[$13698>>2];
  $13700 = (($4) + 612|0);
  $13701 = (($13700) + 4|0);
  HEAPF32[$13701>>2] = $13699;
  $13702 = (($4) + 604|0);
  $13703 = +HEAPF32[$13702>>2];
  $13704 = (($4) + 604|0);
  $13705 = (($13704) + 4|0);
  HEAPF32[$13705>>2] = $13703;
  $13706 = (($4) + 596|0);
  $13707 = +HEAPF32[$13706>>2];
  $13708 = (($4) + 596|0);
  $13709 = (($13708) + 4|0);
  HEAPF32[$13709>>2] = $13707;
  $13710 = (($4) + 584|0);
  $13711 = (($13710) + 4|0);
  $13712 = +HEAPF32[$13711>>2];
  $13713 = (($4) + 584|0);
  $13714 = (($13713) + 8|0);
  HEAPF32[$13714>>2] = $13712;
  $13715 = (($4) + 584|0);
  $13716 = +HEAPF32[$13715>>2];
  $13717 = (($4) + 584|0);
  $13718 = (($13717) + 4|0);
  HEAPF32[$13718>>2] = $13716;
  $13719 = (($4) + 576|0);
  $13720 = +HEAPF32[$13719>>2];
  $13721 = (($4) + 576|0);
  $13722 = (($13721) + 4|0);
  HEAPF32[$13722>>2] = $13720;
  $13723 = (($4) + 564|0);
  $13724 = (($13723) + 4|0);
  $13725 = +HEAPF32[$13724>>2];
  $13726 = (($4) + 564|0);
  $13727 = (($13726) + 8|0);
  HEAPF32[$13727>>2] = $13725;
  $13728 = (($4) + 564|0);
  $13729 = +HEAPF32[$13728>>2];
  $13730 = (($4) + 564|0);
  $13731 = (($13730) + 4|0);
  HEAPF32[$13731>>2] = $13729;
  $13732 = (($4) + 552|0);
  $13733 = (($13732) + 4|0);
  $13734 = +HEAPF32[$13733>>2];
  $13735 = (($4) + 552|0);
  $13736 = (($13735) + 8|0);
  HEAPF32[$13736>>2] = $13734;
  $13737 = (($4) + 552|0);
  $13738 = +HEAPF32[$13737>>2];
  $13739 = (($4) + 552|0);
  $13740 = (($13739) + 4|0);
  HEAPF32[$13740>>2] = $13738;
  $13741 = (($4) + 544|0);
  $13742 = +HEAPF32[$13741>>2];
  $13743 = (($4) + 544|0);
  $13744 = (($13743) + 4|0);
  HEAPF32[$13744>>2] = $13742;
  $13745 = (($4) + 536|0);
  $13746 = +HEAPF32[$13745>>2];
  $13747 = (($4) + 536|0);
  $13748 = (($13747) + 4|0);
  HEAPF32[$13748>>2] = $13746;
  $13749 = (($4) + 524|0);
  $13750 = (($13749) + 4|0);
  $13751 = +HEAPF32[$13750>>2];
  $13752 = (($4) + 524|0);
  $13753 = (($13752) + 8|0);
  HEAPF32[$13753>>2] = $13751;
  $13754 = (($4) + 524|0);
  $13755 = +HEAPF32[$13754>>2];
  $13756 = (($4) + 524|0);
  $13757 = (($13756) + 4|0);
  HEAPF32[$13757>>2] = $13755;
  $13758 = (($4) + 516|0);
  $13759 = +HEAPF32[$13758>>2];
  $13760 = (($4) + 516|0);
  $13761 = (($13760) + 4|0);
  HEAPF32[$13761>>2] = $13759;
  $13762 = (($4) + 504|0);
  $13763 = (($13762) + 4|0);
  $13764 = +HEAPF32[$13763>>2];
  $13765 = (($4) + 504|0);
  $13766 = (($13765) + 8|0);
  HEAPF32[$13766>>2] = $13764;
  $13767 = (($4) + 504|0);
  $13768 = +HEAPF32[$13767>>2];
  $13769 = (($4) + 504|0);
  $13770 = (($13769) + 4|0);
  HEAPF32[$13770>>2] = $13768;
  $13771 = (($4) + 492|0);
  $13772 = (($13771) + 4|0);
  $13773 = +HEAPF32[$13772>>2];
  $13774 = (($4) + 492|0);
  $13775 = (($13774) + 8|0);
  HEAPF32[$13775>>2] = $13773;
  $13776 = (($4) + 492|0);
  $13777 = +HEAPF32[$13776>>2];
  $13778 = (($4) + 492|0);
  $13779 = (($13778) + 4|0);
  HEAPF32[$13779>>2] = $13777;
  $13780 = (($4) + 480|0);
  $13781 = (($13780) + 4|0);
  $13782 = +HEAPF32[$13781>>2];
  $13783 = (($4) + 480|0);
  $13784 = (($13783) + 8|0);
  HEAPF32[$13784>>2] = $13782;
  $13785 = (($4) + 480|0);
  $13786 = +HEAPF32[$13785>>2];
  $13787 = (($4) + 480|0);
  $13788 = (($13787) + 4|0);
  HEAPF32[$13788>>2] = $13786;
  $13789 = (($4) + 472|0);
  $13790 = +HEAPF32[$13789>>2];
  $13791 = (($4) + 472|0);
  $13792 = (($13791) + 4|0);
  HEAPF32[$13792>>2] = $13790;
  $13793 = (($4) + 464|0);
  $13794 = +HEAPF32[$13793>>2];
  $13795 = (($4) + 464|0);
  $13796 = (($13795) + 4|0);
  HEAPF32[$13796>>2] = $13794;
  $13797 = (($4) + 452|0);
  $13798 = (($13797) + 4|0);
  $13799 = +HEAPF32[$13798>>2];
  $13800 = (($4) + 452|0);
  $13801 = (($13800) + 8|0);
  HEAPF32[$13801>>2] = $13799;
  $13802 = (($4) + 452|0);
  $13803 = +HEAPF32[$13802>>2];
  $13804 = (($4) + 452|0);
  $13805 = (($13804) + 4|0);
  HEAPF32[$13805>>2] = $13803;
  $13806 = (($4) + 444|0);
  $13807 = +HEAPF32[$13806>>2];
  $13808 = (($4) + 444|0);
  $13809 = (($13808) + 4|0);
  HEAPF32[$13809>>2] = $13807;
  $13810 = (($4) + 432|0);
  $13811 = (($13810) + 4|0);
  $13812 = +HEAPF32[$13811>>2];
  $13813 = (($4) + 432|0);
  $13814 = (($13813) + 8|0);
  HEAPF32[$13814>>2] = $13812;
  $13815 = (($4) + 432|0);
  $13816 = +HEAPF32[$13815>>2];
  $13817 = (($4) + 432|0);
  $13818 = (($13817) + 4|0);
  HEAPF32[$13818>>2] = $13816;
  $13819 = (($4) + 420|0);
  $13820 = (($13819) + 4|0);
  $13821 = +HEAPF32[$13820>>2];
  $13822 = (($4) + 420|0);
  $13823 = (($13822) + 8|0);
  HEAPF32[$13823>>2] = $13821;
  $13824 = (($4) + 420|0);
  $13825 = +HEAPF32[$13824>>2];
  $13826 = (($4) + 420|0);
  $13827 = (($13826) + 4|0);
  HEAPF32[$13827>>2] = $13825;
  $13828 = (($4) + 408|0);
  $13829 = (($13828) + 4|0);
  $13830 = +HEAPF32[$13829>>2];
  $13831 = (($4) + 408|0);
  $13832 = (($13831) + 8|0);
  HEAPF32[$13832>>2] = $13830;
  $13833 = (($4) + 408|0);
  $13834 = +HEAPF32[$13833>>2];
  $13835 = (($4) + 408|0);
  $13836 = (($13835) + 4|0);
  HEAPF32[$13836>>2] = $13834;
  $13837 = (($4) + 396|0);
  $13838 = (($13837) + 4|0);
  $13839 = +HEAPF32[$13838>>2];
  $13840 = (($4) + 396|0);
  $13841 = (($13840) + 8|0);
  HEAPF32[$13841>>2] = $13839;
  $13842 = (($4) + 396|0);
  $13843 = +HEAPF32[$13842>>2];
  $13844 = (($4) + 396|0);
  $13845 = (($13844) + 4|0);
  HEAPF32[$13845>>2] = $13843;
  $13846 = (($4) + 388|0);
  $13847 = +HEAPF32[$13846>>2];
  $13848 = (($4) + 388|0);
  $13849 = (($13848) + 4|0);
  HEAPF32[$13849>>2] = $13847;
  $13850 = (($4) + 376|0);
  $13851 = (($13850) + 4|0);
  $13852 = +HEAPF32[$13851>>2];
  $13853 = (($4) + 376|0);
  $13854 = (($13853) + 8|0);
  HEAPF32[$13854>>2] = $13852;
  $13855 = (($4) + 376|0);
  $13856 = +HEAPF32[$13855>>2];
  $13857 = (($4) + 376|0);
  $13858 = (($13857) + 4|0);
  HEAPF32[$13858>>2] = $13856;
  $13859 = (($4) + 368|0);
  $13860 = +HEAPF32[$13859>>2];
  $13861 = (($4) + 368|0);
  $13862 = (($13861) + 4|0);
  HEAPF32[$13862>>2] = $13860;
  $13863 = (($4) + 352|0);
  $13864 = (($13863) + 4|0);
  $13865 = +HEAPF32[$13864>>2];
  $13866 = (($4) + 352|0);
  $13867 = (($13866) + 8|0);
  HEAPF32[$13867>>2] = $13865;
  $13868 = (($4) + 352|0);
  $13869 = +HEAPF32[$13868>>2];
  $13870 = (($4) + 352|0);
  $13871 = (($13870) + 4|0);
  HEAPF32[$13871>>2] = $13869;
  $13872 = (($4) + 344|0);
  $13873 = +HEAPF32[$13872>>2];
  $13874 = (($4) + 344|0);
  $13875 = (($13874) + 4|0);
  HEAPF32[$13875>>2] = $13873;
  $13876 = (($4) + 336|0);
  $13877 = +HEAPF32[$13876>>2];
  $13878 = (($4) + 336|0);
  $13879 = (($13878) + 4|0);
  HEAPF32[$13879>>2] = $13877;
  $13880 = (($4) + 324|0);
  $13881 = (($13880) + 4|0);
  $13882 = +HEAPF32[$13881>>2];
  $13883 = (($4) + 324|0);
  $13884 = (($13883) + 8|0);
  HEAPF32[$13884>>2] = $13882;
  $13885 = (($4) + 324|0);
  $13886 = +HEAPF32[$13885>>2];
  $13887 = (($4) + 324|0);
  $13888 = (($13887) + 4|0);
  HEAPF32[$13888>>2] = $13886;
  $13889 = (($4) + 316|0);
  $13890 = +HEAPF32[$13889>>2];
  $13891 = (($4) + 316|0);
  $13892 = (($13891) + 4|0);
  HEAPF32[$13892>>2] = $13890;
  $13893 = (($4) + 300|0);
  $13894 = (($13893) + 4|0);
  $13895 = +HEAPF32[$13894>>2];
  $13896 = (($4) + 300|0);
  $13897 = (($13896) + 8|0);
  HEAPF32[$13897>>2] = $13895;
  $13898 = (($4) + 300|0);
  $13899 = +HEAPF32[$13898>>2];
  $13900 = (($4) + 300|0);
  $13901 = (($13900) + 4|0);
  HEAPF32[$13901>>2] = $13899;
  $13902 = (($4) + 288|0);
  $13903 = (($13902) + 4|0);
  $13904 = +HEAPF32[$13903>>2];
  $13905 = (($4) + 288|0);
  $13906 = (($13905) + 8|0);
  HEAPF32[$13906>>2] = $13904;
  $13907 = (($4) + 288|0);
  $13908 = +HEAPF32[$13907>>2];
  $13909 = (($4) + 288|0);
  $13910 = (($13909) + 4|0);
  HEAPF32[$13910>>2] = $13908;
  $13911 = (($4) + 280|0);
  $13912 = +HEAPF32[$13911>>2];
  $13913 = (($4) + 280|0);
  $13914 = (($13913) + 4|0);
  HEAPF32[$13914>>2] = $13912;
  $13915 = (($4) + 272|0);
  $13916 = +HEAPF32[$13915>>2];
  $13917 = (($4) + 272|0);
  $13918 = (($13917) + 4|0);
  HEAPF32[$13918>>2] = $13916;
  $13919 = (($4) + 260|0);
  $13920 = (($13919) + 4|0);
  $13921 = +HEAPF32[$13920>>2];
  $13922 = (($4) + 260|0);
  $13923 = (($13922) + 8|0);
  HEAPF32[$13923>>2] = $13921;
  $13924 = (($4) + 260|0);
  $13925 = +HEAPF32[$13924>>2];
  $13926 = (($4) + 260|0);
  $13927 = (($13926) + 4|0);
  HEAPF32[$13927>>2] = $13925;
  $13928 = (($4) + 252|0);
  $13929 = +HEAPF32[$13928>>2];
  $13930 = (($4) + 252|0);
  $13931 = (($13930) + 4|0);
  HEAPF32[$13931>>2] = $13929;
  $13932 = (($4) + 236|0);
  $13933 = (($13932) + 4|0);
  $13934 = +HEAPF32[$13933>>2];
  $13935 = (($4) + 236|0);
  $13936 = (($13935) + 8|0);
  HEAPF32[$13936>>2] = $13934;
  $13937 = (($4) + 236|0);
  $13938 = +HEAPF32[$13937>>2];
  $13939 = (($4) + 236|0);
  $13940 = (($13939) + 4|0);
  HEAPF32[$13940>>2] = $13938;
  $13941 = (($4) + 224|0);
  $13942 = (($13941) + 4|0);
  $13943 = +HEAPF32[$13942>>2];
  $13944 = (($4) + 224|0);
  $13945 = (($13944) + 8|0);
  HEAPF32[$13945>>2] = $13943;
  $13946 = (($4) + 224|0);
  $13947 = +HEAPF32[$13946>>2];
  $13948 = (($4) + 224|0);
  $13949 = (($13948) + 4|0);
  HEAPF32[$13949>>2] = $13947;
  $13950 = (($4) + 212|0);
  $13951 = (($13950) + 4|0);
  $13952 = +HEAPF32[$13951>>2];
  $13953 = (($4) + 212|0);
  $13954 = (($13953) + 8|0);
  HEAPF32[$13954>>2] = $13952;
  $13955 = (($4) + 212|0);
  $13956 = +HEAPF32[$13955>>2];
  $13957 = (($4) + 212|0);
  $13958 = (($13957) + 4|0);
  HEAPF32[$13958>>2] = $13956;
  $13959 = (($4) + 204|0);
  $13960 = +HEAPF32[$13959>>2];
  $13961 = (($4) + 204|0);
  $13962 = (($13961) + 4|0);
  HEAPF32[$13962>>2] = $13960;
  $13963 = (($4) + 196|0);
  $13964 = +HEAPF32[$13963>>2];
  $13965 = (($4) + 196|0);
  $13966 = (($13965) + 4|0);
  HEAPF32[$13966>>2] = $13964;
  $13967 = (($4) + 184|0);
  $13968 = (($13967) + 4|0);
  $13969 = +HEAPF32[$13968>>2];
  $13970 = (($4) + 184|0);
  $13971 = (($13970) + 8|0);
  HEAPF32[$13971>>2] = $13969;
  $13972 = (($4) + 184|0);
  $13973 = +HEAPF32[$13972>>2];
  $13974 = (($4) + 184|0);
  $13975 = (($13974) + 4|0);
  HEAPF32[$13975>>2] = $13973;
  $13976 = (($4) + 176|0);
  $13977 = +HEAPF32[$13976>>2];
  $13978 = (($4) + 176|0);
  $13979 = (($13978) + 4|0);
  HEAPF32[$13979>>2] = $13977;
  $13980 = (($4) + 160|0);
  $13981 = (($13980) + 4|0);
  $13982 = +HEAPF32[$13981>>2];
  $13983 = (($4) + 160|0);
  $13984 = (($13983) + 8|0);
  HEAPF32[$13984>>2] = $13982;
  $13985 = (($4) + 160|0);
  $13986 = +HEAPF32[$13985>>2];
  $13987 = (($4) + 160|0);
  $13988 = (($13987) + 4|0);
  HEAPF32[$13988>>2] = $13986;
  $13989 = (($4) + 144|0);
  $13990 = (($13989) + 4|0);
  $13991 = +HEAPF32[$13990>>2];
  $13992 = (($4) + 144|0);
  $13993 = (($13992) + 8|0);
  HEAPF32[$13993>>2] = $13991;
  $13994 = (($4) + 144|0);
  $13995 = +HEAPF32[$13994>>2];
  $13996 = (($4) + 144|0);
  $13997 = (($13996) + 4|0);
  HEAPF32[$13997>>2] = $13995;
  $13998 = (($4) + 128|0);
  $13999 = (($13998) + 4|0);
  $14000 = +HEAPF32[$13999>>2];
  $14001 = (($4) + 128|0);
  $14002 = (($14001) + 8|0);
  HEAPF32[$14002>>2] = $14000;
  $14003 = (($4) + 128|0);
  $14004 = +HEAPF32[$14003>>2];
  $14005 = (($4) + 128|0);
  $14006 = (($14005) + 4|0);
  HEAPF32[$14006>>2] = $14004;
  $14007 = (($4) + 112|0);
  $14008 = (($14007) + 4|0);
  $14009 = +HEAPF32[$14008>>2];
  $14010 = (($4) + 112|0);
  $14011 = (($14010) + 8|0);
  HEAPF32[$14011>>2] = $14009;
  $14012 = (($4) + 112|0);
  $14013 = +HEAPF32[$14012>>2];
  $14014 = (($4) + 112|0);
  $14015 = (($14014) + 4|0);
  HEAPF32[$14015>>2] = $14013;
  $14016 = (($4) + 104|0);
  $14017 = +HEAPF32[$14016>>2];
  $14018 = (($4) + 104|0);
  $14019 = (($14018) + 4|0);
  HEAPF32[$14019>>2] = $14017;
  $14020 = (($4) + 60|0);
  $14021 = +HEAPF32[$14020>>2];
  $14022 = (($4) + 60|0);
  $14023 = (($14022) + 4|0);
  HEAPF32[$14023>>2] = $14021;
  $14024 = (($4) + 44|0);
  $14025 = +HEAPF32[$14024>>2];
  $14026 = (($4) + 44|0);
  $14027 = (($14026) + 4|0);
  HEAPF32[$14027>>2] = $14025;
  $i1 = 3;
  while(1) {
   $14028 = $i1;
   $14029 = ($14028|0)>(0);
   if (!($14029)) {
    break;
   }
   $14030 = $i1;
   $14031 = (($14030) - 1)|0;
   $14032 = (($4) + 24|0);
   $14033 = (($14032) + ($14031<<2)|0);
   $14034 = +HEAPF32[$14033>>2];
   $14035 = $i1;
   $14036 = (($4) + 24|0);
   $14037 = (($14036) + ($14035<<2)|0);
   HEAPF32[$14037>>2] = $14034;
   $14038 = $i1;
   $14039 = (($14038) + -1)|0;
   $i1 = $14039;
  }
  $14040 = (($4) + 16|0);
  $14041 = HEAP32[$14040>>2]|0;
  $14042 = (($4) + 16|0);
  $14043 = (($14042) + 4|0);
  HEAP32[$14043>>2] = $14041;
  $14044 = $i;
  $14045 = (($14044) + 1)|0;
  $i = $14045;
 }
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner12instanceInitEi($this,$samplingFreq) {
 $this = $this|0;
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0;
 var $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0;
 var $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0;
 var $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0;
 var $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0;
 var $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0;
 var $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0;
 var $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0.0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0.0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $i = 0, $i1 = 0, $i10 = 0, $i100 = 0, $i101 = 0, $i102 = 0, $i103 = 0, $i104 = 0, $i105 = 0, $i106 = 0, $i107 = 0, $i108 = 0, $i109 = 0, $i11 = 0, $i110 = 0;
 var $i111 = 0, $i112 = 0, $i113 = 0, $i114 = 0, $i115 = 0, $i116 = 0, $i117 = 0, $i118 = 0, $i119 = 0, $i12 = 0, $i120 = 0, $i121 = 0, $i122 = 0, $i123 = 0, $i124 = 0, $i125 = 0, $i126 = 0, $i127 = 0, $i128 = 0, $i129 = 0;
 var $i13 = 0, $i130 = 0, $i131 = 0, $i132 = 0, $i133 = 0, $i134 = 0, $i135 = 0, $i136 = 0, $i137 = 0, $i138 = 0, $i139 = 0, $i14 = 0, $i140 = 0, $i141 = 0, $i142 = 0, $i143 = 0, $i144 = 0, $i145 = 0, $i146 = 0, $i147 = 0;
 var $i148 = 0, $i149 = 0, $i15 = 0, $i150 = 0, $i151 = 0, $i152 = 0, $i153 = 0, $i154 = 0, $i155 = 0, $i156 = 0, $i157 = 0, $i158 = 0, $i159 = 0, $i16 = 0, $i160 = 0, $i161 = 0, $i162 = 0, $i163 = 0, $i164 = 0, $i165 = 0;
 var $i166 = 0, $i167 = 0, $i168 = 0, $i169 = 0, $i17 = 0, $i170 = 0, $i171 = 0, $i172 = 0, $i173 = 0, $i174 = 0, $i175 = 0, $i176 = 0, $i177 = 0, $i178 = 0, $i179 = 0, $i18 = 0, $i180 = 0, $i181 = 0, $i182 = 0, $i183 = 0;
 var $i184 = 0, $i185 = 0, $i186 = 0, $i187 = 0, $i188 = 0, $i189 = 0, $i19 = 0, $i190 = 0, $i191 = 0, $i192 = 0, $i193 = 0, $i194 = 0, $i195 = 0, $i196 = 0, $i197 = 0, $i198 = 0, $i199 = 0, $i2 = 0, $i20 = 0, $i200 = 0;
 var $i201 = 0, $i202 = 0, $i203 = 0, $i204 = 0, $i205 = 0, $i206 = 0, $i207 = 0, $i208 = 0, $i209 = 0, $i21 = 0, $i210 = 0, $i211 = 0, $i212 = 0, $i213 = 0, $i214 = 0, $i215 = 0, $i216 = 0, $i217 = 0, $i218 = 0, $i219 = 0;
 var $i22 = 0, $i220 = 0, $i221 = 0, $i222 = 0, $i223 = 0, $i224 = 0, $i225 = 0, $i226 = 0, $i227 = 0, $i228 = 0, $i229 = 0, $i23 = 0, $i230 = 0, $i231 = 0, $i232 = 0, $i233 = 0, $i234 = 0, $i235 = 0, $i236 = 0, $i237 = 0;
 var $i238 = 0, $i239 = 0, $i24 = 0, $i240 = 0, $i241 = 0, $i242 = 0, $i243 = 0, $i244 = 0, $i245 = 0, $i246 = 0, $i247 = 0, $i248 = 0, $i249 = 0, $i25 = 0, $i250 = 0, $i251 = 0, $i252 = 0, $i253 = 0, $i254 = 0, $i255 = 0;
 var $i256 = 0, $i257 = 0, $i258 = 0, $i259 = 0, $i26 = 0, $i260 = 0, $i261 = 0, $i262 = 0, $i263 = 0, $i264 = 0, $i265 = 0, $i266 = 0, $i267 = 0, $i268 = 0, $i269 = 0, $i27 = 0, $i270 = 0, $i271 = 0, $i272 = 0, $i273 = 0;
 var $i274 = 0, $i275 = 0, $i276 = 0, $i277 = 0, $i278 = 0, $i279 = 0, $i28 = 0, $i280 = 0, $i281 = 0, $i282 = 0, $i283 = 0, $i284 = 0, $i285 = 0, $i286 = 0, $i287 = 0, $i288 = 0, $i289 = 0, $i29 = 0, $i290 = 0, $i291 = 0;
 var $i292 = 0, $i293 = 0, $i294 = 0, $i295 = 0, $i296 = 0, $i297 = 0, $i298 = 0, $i299 = 0, $i3 = 0, $i30 = 0, $i300 = 0, $i301 = 0, $i302 = 0, $i303 = 0, $i304 = 0, $i305 = 0, $i306 = 0, $i307 = 0, $i308 = 0, $i309 = 0;
 var $i31 = 0, $i310 = 0, $i311 = 0, $i312 = 0, $i313 = 0, $i314 = 0, $i315 = 0, $i316 = 0, $i317 = 0, $i318 = 0, $i319 = 0, $i32 = 0, $i320 = 0, $i321 = 0, $i322 = 0, $i323 = 0, $i324 = 0, $i325 = 0, $i326 = 0, $i327 = 0;
 var $i328 = 0, $i329 = 0, $i33 = 0, $i330 = 0, $i331 = 0, $i332 = 0, $i333 = 0, $i334 = 0, $i335 = 0, $i336 = 0, $i337 = 0, $i338 = 0, $i339 = 0, $i34 = 0, $i340 = 0, $i341 = 0, $i342 = 0, $i343 = 0, $i344 = 0, $i345 = 0;
 var $i346 = 0, $i347 = 0, $i348 = 0, $i349 = 0, $i35 = 0, $i350 = 0, $i351 = 0, $i352 = 0, $i353 = 0, $i354 = 0, $i355 = 0, $i356 = 0, $i357 = 0, $i358 = 0, $i359 = 0, $i36 = 0, $i360 = 0, $i361 = 0, $i362 = 0, $i363 = 0;
 var $i364 = 0, $i365 = 0, $i366 = 0, $i367 = 0, $i368 = 0, $i369 = 0, $i37 = 0, $i370 = 0, $i371 = 0, $i372 = 0, $i373 = 0, $i374 = 0, $i375 = 0, $i376 = 0, $i377 = 0, $i378 = 0, $i379 = 0, $i38 = 0, $i380 = 0, $i381 = 0;
 var $i382 = 0, $i383 = 0, $i384 = 0, $i385 = 0, $i386 = 0, $i387 = 0, $i388 = 0, $i389 = 0, $i39 = 0, $i390 = 0, $i391 = 0, $i392 = 0, $i393 = 0, $i394 = 0, $i395 = 0, $i396 = 0, $i397 = 0, $i398 = 0, $i399 = 0, $i4 = 0;
 var $i40 = 0, $i400 = 0, $i401 = 0, $i402 = 0, $i403 = 0, $i404 = 0, $i405 = 0, $i406 = 0, $i407 = 0, $i408 = 0, $i409 = 0, $i41 = 0, $i410 = 0, $i411 = 0, $i412 = 0, $i413 = 0, $i414 = 0, $i415 = 0, $i416 = 0, $i417 = 0;
 var $i418 = 0, $i419 = 0, $i42 = 0, $i420 = 0, $i421 = 0, $i422 = 0, $i423 = 0, $i424 = 0, $i425 = 0, $i426 = 0, $i427 = 0, $i428 = 0, $i429 = 0, $i43 = 0, $i430 = 0, $i431 = 0, $i432 = 0, $i433 = 0, $i434 = 0, $i435 = 0;
 var $i436 = 0, $i44 = 0, $i45 = 0, $i46 = 0, $i47 = 0, $i48 = 0, $i49 = 0, $i5 = 0, $i50 = 0, $i51 = 0, $i52 = 0, $i53 = 0, $i54 = 0, $i55 = 0, $i56 = 0, $i57 = 0, $i58 = 0, $i59 = 0, $i6 = 0, $i60 = 0;
 var $i61 = 0, $i62 = 0, $i63 = 0, $i64 = 0, $i65 = 0, $i66 = 0, $i67 = 0, $i68 = 0, $i69 = 0, $i7 = 0, $i70 = 0, $i71 = 0, $i72 = 0, $i73 = 0, $i74 = 0, $i75 = 0, $i76 = 0, $i77 = 0, $i78 = 0, $i79 = 0;
 var $i8 = 0, $i80 = 0, $i81 = 0, $i82 = 0, $i83 = 0, $i84 = 0, $i85 = 0, $i86 = 0, $i87 = 0, $i88 = 0, $i89 = 0, $i9 = 0, $i90 = 0, $i91 = 0, $i92 = 0, $i93 = 0, $i94 = 0, $i95 = 0, $i96 = 0, $i97 = 0;
 var $i98 = 0, $i99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1840|0;
 $5 = sp + 8|0;
 $8 = sp + 1832|0;
 $14 = sp;
 $17 = sp + 1833|0;
 $20 = sp + 84|0;
 $21 = sp + 88|0;
 $18 = $this;
 $19 = $samplingFreq;
 $22 = $18;
 $23 = $19;
 $24 = (($22) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = (($22) + 8|0);
 HEAPF32[$25>>2] = -40.0;
 $26 = (($22) + 12|0);
 HEAPF32[$26>>2] = 0.0;
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = ($27|0)<(2);
  if (!($28)) {
   break;
  }
  $29 = $i;
  $30 = (($22) + 16|0);
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $i1 = 0;
 while(1) {
  $34 = $i1;
  $35 = ($34|0)<(4);
  if (!($35)) {
   break;
  }
  $36 = $i1;
  $37 = (($22) + 24|0);
  $38 = (($37) + ($36<<2)|0);
  HEAPF32[$38>>2] = 0.0;
  $39 = $i1;
  $40 = (($39) + 1)|0;
  $i1 = $40;
 }
 $41 = (($22) + 40|0);
 HEAPF32[$41>>2] = 0.0;
 $i2 = 0;
 while(1) {
  $42 = $i2;
  $43 = ($42|0)<(2);
  if (!($43)) {
   break;
  }
  $44 = $i2;
  $45 = (($22) + 44|0);
  $46 = (($45) + ($44<<2)|0);
  HEAPF32[$46>>2] = 0.0;
  $47 = $i2;
  $48 = (($47) + 1)|0;
  $i2 = $48;
 }
 $49 = (($22) + 52|0);
 HEAPF32[$49>>2] = 0.0;
 $50 = (($22) + 56|0);
 HEAPF32[$50>>2] = 0.0;
 $i3 = 0;
 while(1) {
  $51 = $i3;
  $52 = ($51|0)<(2);
  if (!($52)) {
   break;
  }
  $53 = $i3;
  $54 = (($22) + 60|0);
  $55 = (($54) + ($53<<2)|0);
  HEAPF32[$55>>2] = 0.0;
  $56 = $i3;
  $57 = (($56) + 1)|0;
  $i3 = $57;
 }
 $58 = (($22) + 68|0);
 HEAPF32[$58>>2] = 0.0;
 HEAP32[$20>>2] = 192000;
 HEAP32[$21>>2] = 1;
 $59 = (($22) + 4|0);
 $15 = $21;
 $16 = $59;
 $60 = $15;
 $61 = $16;
 ;HEAP8[$14+0|0]=HEAP8[$17+0|0]|0;
 $12 = $60;
 $13 = $61;
 $62 = $12;
 $63 = $13;
 $9 = $14;
 $10 = $62;
 $11 = $63;
 $64 = $10;
 $65 = HEAP32[$64>>2]|0;
 $66 = $11;
 $67 = HEAP32[$66>>2]|0;
 $68 = ($65|0)<($67|0);
 if ($68) {
  $69 = $13;
  $71 = $69;
 } else {
  $70 = $12;
  $71 = $70;
 }
 $6 = $20;
 $7 = $71;
 $72 = $6;
 $73 = $7;
 ;HEAP8[$5+0|0]=HEAP8[$8+0|0]|0;
 $3 = $72;
 $4 = $73;
 $74 = $4;
 $75 = $3;
 $0 = $5;
 $1 = $74;
 $2 = $75;
 $76 = $1;
 $77 = HEAP32[$76>>2]|0;
 $78 = $2;
 $79 = HEAP32[$78>>2]|0;
 $80 = ($77|0)<($79|0);
 if ($80) {
  $81 = $4;
  $84 = $81;
 } else {
  $82 = $3;
  $84 = $82;
 }
 $83 = HEAP32[$84>>2]|0;
 $85 = (($22) + 72|0);
 HEAP32[$85>>2] = $83;
 $86 = (($22) + 72|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (+($87|0));
 $89 = 1.0 / $88;
 $90 = (($22) + 76|0);
 HEAPF32[$90>>2] = $89;
 $91 = (($22) + 72|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (+($92|0));
 $94 = 0.00291545200161635875702 * $93;
 $95 = (($22) + 80|0);
 HEAPF32[$95>>2] = $94;
 $96 = (($22) + 84|0);
 HEAPF32[$96>>2] = 46.0;
 $97 = (($22) + 88|0);
 HEAPF32[$97>>2] = 63.0;
 $98 = (($22) + 92|0);
 HEAPF32[$98>>2] = 2.70000004768371582031;
 $99 = (($22) + 72|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (+($100|0));
 $102 = 3.14159274101257324219 / $101;
 $103 = (($22) + 96|0);
 HEAPF32[$103>>2] = $102;
 $104 = (($22) + 100|0);
 HEAPF32[$104>>2] = 4000.0;
 $i4 = 0;
 while(1) {
  $105 = $i4;
  $106 = ($105|0)<(2);
  if (!($106)) {
   break;
  }
  $107 = $i4;
  $108 = (($22) + 104|0);
  $109 = (($108) + ($107<<2)|0);
  HEAPF32[$109>>2] = 0.0;
  $110 = $i4;
  $111 = (($110) + 1)|0;
  $i4 = $111;
 }
 $i5 = 0;
 while(1) {
  $112 = $i5;
  $113 = ($112|0)<(3);
  if (!($113)) {
   break;
  }
  $114 = $i5;
  $115 = (($22) + 112|0);
  $116 = (($115) + ($114<<2)|0);
  HEAPF32[$116>>2] = 0.0;
  $117 = $i5;
  $118 = (($117) + 1)|0;
  $i5 = $118;
 }
 $119 = (($22) + 124|0);
 HEAPF32[$119>>2] = 2000.0;
 $i6 = 0;
 while(1) {
  $120 = $i6;
  $121 = ($120|0)<(3);
  if (!($121)) {
   break;
  }
  $122 = $i6;
  $123 = (($22) + 128|0);
  $124 = (($123) + ($122<<2)|0);
  HEAPF32[$124>>2] = 0.0;
  $125 = $i6;
  $126 = (($125) + 1)|0;
  $i6 = $126;
 }
 $127 = (($22) + 140|0);
 HEAPF32[$127>>2] = 1000.0;
 $i7 = 0;
 while(1) {
  $128 = $i7;
  $129 = ($128|0)<(3);
  if (!($129)) {
   break;
  }
  $130 = $i7;
  $131 = (($22) + 144|0);
  $132 = (($131) + ($130<<2)|0);
  HEAPF32[$132>>2] = 0.0;
  $133 = $i7;
  $134 = (($133) + 1)|0;
  $i7 = $134;
 }
 $135 = (($22) + 156|0);
 HEAPF32[$135>>2] = 500.0;
 $i8 = 0;
 while(1) {
  $136 = $i8;
  $137 = ($136|0)<(3);
  if (!($137)) {
   break;
  }
  $138 = $i8;
  $139 = (($22) + 160|0);
  $140 = (($139) + ($138<<2)|0);
  HEAPF32[$140>>2] = 0.0;
  $141 = $i8;
  $142 = (($141) + 1)|0;
  $i8 = $142;
 }
 $143 = (($22) + 172|0);
 HEAPF32[$143>>2] = 3.79999995231628417969;
 $i9 = 0;
 while(1) {
  $144 = $i9;
  $145 = ($144|0)<(2);
  if (!($145)) {
   break;
  }
  $146 = $i9;
  $147 = (($22) + 176|0);
  $148 = (($147) + ($146<<2)|0);
  HEAPF32[$148>>2] = 0.0;
  $149 = $i9;
  $150 = (($149) + 1)|0;
  $i9 = $150;
 }
 $i10 = 0;
 while(1) {
  $151 = $i10;
  $152 = ($151|0)<(3);
  if (!($152)) {
   break;
  }
  $153 = $i10;
  $154 = (($22) + 184|0);
  $155 = (($154) + ($153<<2)|0);
  HEAPF32[$155>>2] = 0.0;
  $156 = $i10;
  $157 = (($156) + 1)|0;
  $i10 = $157;
 }
 $i11 = 0;
 while(1) {
  $158 = $i11;
  $159 = ($158|0)<(2);
  if (!($159)) {
   break;
  }
  $160 = $i11;
  $161 = (($22) + 196|0);
  $162 = (($161) + ($160<<2)|0);
  HEAPF32[$162>>2] = 0.0;
  $163 = $i11;
  $164 = (($163) + 1)|0;
  $i11 = $164;
 }
 $i12 = 0;
 while(1) {
  $165 = $i12;
  $166 = ($165|0)<(2);
  if (!($166)) {
   break;
  }
  $167 = $i12;
  $168 = (($22) + 204|0);
  $169 = (($168) + ($167<<2)|0);
  HEAPF32[$169>>2] = 0.0;
  $170 = $i12;
  $171 = (($170) + 1)|0;
  $i12 = $171;
 }
 $i13 = 0;
 while(1) {
  $172 = $i13;
  $173 = ($172|0)<(3);
  if (!($173)) {
   break;
  }
  $174 = $i13;
  $175 = (($22) + 212|0);
  $176 = (($175) + ($174<<2)|0);
  HEAPF32[$176>>2] = 0.0;
  $177 = $i13;
  $178 = (($177) + 1)|0;
  $i13 = $178;
 }
 $i14 = 0;
 while(1) {
  $179 = $i14;
  $180 = ($179|0)<(3);
  if (!($180)) {
   break;
  }
  $181 = $i14;
  $182 = (($22) + 224|0);
  $183 = (($182) + ($181<<2)|0);
  HEAPF32[$183>>2] = 0.0;
  $184 = $i14;
  $185 = (($184) + 1)|0;
  $i14 = $185;
 }
 $i15 = 0;
 while(1) {
  $186 = $i15;
  $187 = ($186|0)<(3);
  if (!($187)) {
   break;
  }
  $188 = $i15;
  $189 = (($22) + 236|0);
  $190 = (($189) + ($188<<2)|0);
  HEAPF32[$190>>2] = 0.0;
  $191 = $i15;
  $192 = (($191) + 1)|0;
  $i15 = $192;
 }
 $193 = (($22) + 248|0);
 HEAPF32[$193>>2] = 5.0;
 $i16 = 0;
 while(1) {
  $194 = $i16;
  $195 = ($194|0)<(2);
  if (!($195)) {
   break;
  }
  $196 = $i16;
  $197 = (($22) + 252|0);
  $198 = (($197) + ($196<<2)|0);
  HEAPF32[$198>>2] = 0.0;
  $199 = $i16;
  $200 = (($199) + 1)|0;
  $i16 = $200;
 }
 $i17 = 0;
 while(1) {
  $201 = $i17;
  $202 = ($201|0)<(3);
  if (!($202)) {
   break;
  }
  $203 = $i17;
  $204 = (($22) + 260|0);
  $205 = (($204) + ($203<<2)|0);
  HEAPF32[$205>>2] = 0.0;
  $206 = $i17;
  $207 = (($206) + 1)|0;
  $i17 = $207;
 }
 $i18 = 0;
 while(1) {
  $208 = $i18;
  $209 = ($208|0)<(2);
  if (!($209)) {
   break;
  }
  $210 = $i18;
  $211 = (($22) + 272|0);
  $212 = (($211) + ($210<<2)|0);
  HEAPF32[$212>>2] = 0.0;
  $213 = $i18;
  $214 = (($213) + 1)|0;
  $i18 = $214;
 }
 $i19 = 0;
 while(1) {
  $215 = $i19;
  $216 = ($215|0)<(2);
  if (!($216)) {
   break;
  }
  $217 = $i19;
  $218 = (($22) + 280|0);
  $219 = (($218) + ($217<<2)|0);
  HEAPF32[$219>>2] = 0.0;
  $220 = $i19;
  $221 = (($220) + 1)|0;
  $i19 = $221;
 }
 $i20 = 0;
 while(1) {
  $222 = $i20;
  $223 = ($222|0)<(3);
  if (!($223)) {
   break;
  }
  $224 = $i20;
  $225 = (($22) + 288|0);
  $226 = (($225) + ($224<<2)|0);
  HEAPF32[$226>>2] = 0.0;
  $227 = $i20;
  $228 = (($227) + 1)|0;
  $i20 = $228;
 }
 $i21 = 0;
 while(1) {
  $229 = $i21;
  $230 = ($229|0)<(3);
  if (!($230)) {
   break;
  }
  $231 = $i21;
  $232 = (($22) + 300|0);
  $233 = (($232) + ($231<<2)|0);
  HEAPF32[$233>>2] = 0.0;
  $234 = $i21;
  $235 = (($234) + 1)|0;
  $i21 = $235;
 }
 $236 = (($22) + 312|0);
 HEAPF32[$236>>2] = 6.5;
 $i22 = 0;
 while(1) {
  $237 = $i22;
  $238 = ($237|0)<(2);
  if (!($238)) {
   break;
  }
  $239 = $i22;
  $240 = (($22) + 316|0);
  $241 = (($240) + ($239<<2)|0);
  HEAPF32[$241>>2] = 0.0;
  $242 = $i22;
  $243 = (($242) + 1)|0;
  $i22 = $243;
 }
 $i23 = 0;
 while(1) {
  $244 = $i23;
  $245 = ($244|0)<(3);
  if (!($245)) {
   break;
  }
  $246 = $i23;
  $247 = (($22) + 324|0);
  $248 = (($247) + ($246<<2)|0);
  HEAPF32[$248>>2] = 0.0;
  $249 = $i23;
  $250 = (($249) + 1)|0;
  $i23 = $250;
 }
 $i24 = 0;
 while(1) {
  $251 = $i24;
  $252 = ($251|0)<(2);
  if (!($252)) {
   break;
  }
  $253 = $i24;
  $254 = (($22) + 336|0);
  $255 = (($254) + ($253<<2)|0);
  HEAPF32[$255>>2] = 0.0;
  $256 = $i24;
  $257 = (($256) + 1)|0;
  $i24 = $257;
 }
 $i25 = 0;
 while(1) {
  $258 = $i25;
  $259 = ($258|0)<(2);
  if (!($259)) {
   break;
  }
  $260 = $i25;
  $261 = (($22) + 344|0);
  $262 = (($261) + ($260<<2)|0);
  HEAPF32[$262>>2] = 0.0;
  $263 = $i25;
  $264 = (($263) + 1)|0;
  $i25 = $264;
 }
 $i26 = 0;
 while(1) {
  $265 = $i26;
  $266 = ($265|0)<(3);
  if (!($266)) {
   break;
  }
  $267 = $i26;
  $268 = (($22) + 352|0);
  $269 = (($268) + ($267<<2)|0);
  HEAPF32[$269>>2] = 0.0;
  $270 = $i26;
  $271 = (($270) + 1)|0;
  $i26 = $271;
 }
 $272 = (($22) + 364|0);
 HEAPF32[$272>>2] = 8.3999996185302734375;
 $i27 = 0;
 while(1) {
  $273 = $i27;
  $274 = ($273|0)<(2);
  if (!($274)) {
   break;
  }
  $275 = $i27;
  $276 = (($22) + 368|0);
  $277 = (($276) + ($275<<2)|0);
  HEAPF32[$277>>2] = 0.0;
  $278 = $i27;
  $279 = (($278) + 1)|0;
  $i27 = $279;
 }
 $i28 = 0;
 while(1) {
  $280 = $i28;
  $281 = ($280|0)<(3);
  if (!($281)) {
   break;
  }
  $282 = $i28;
  $283 = (($22) + 376|0);
  $284 = (($283) + ($282<<2)|0);
  HEAPF32[$284>>2] = 0.0;
  $285 = $i28;
  $286 = (($285) + 1)|0;
  $i28 = $286;
 }
 $i29 = 0;
 while(1) {
  $287 = $i29;
  $288 = ($287|0)<(2);
  if (!($288)) {
   break;
  }
  $289 = $i29;
  $290 = (($22) + 388|0);
  $291 = (($290) + ($289<<2)|0);
  HEAPF32[$291>>2] = 0.0;
  $292 = $i29;
  $293 = (($292) + 1)|0;
  $i29 = $293;
 }
 $i30 = 0;
 while(1) {
  $294 = $i30;
  $295 = ($294|0)<(3);
  if (!($295)) {
   break;
  }
  $296 = $i30;
  $297 = (($22) + 396|0);
  $298 = (($297) + ($296<<2)|0);
  HEAPF32[$298>>2] = 0.0;
  $299 = $i30;
  $300 = (($299) + 1)|0;
  $i30 = $300;
 }
 $i31 = 0;
 while(1) {
  $301 = $i31;
  $302 = ($301|0)<(3);
  if (!($302)) {
   break;
  }
  $303 = $i31;
  $304 = (($22) + 408|0);
  $305 = (($304) + ($303<<2)|0);
  HEAPF32[$305>>2] = 0.0;
  $306 = $i31;
  $307 = (($306) + 1)|0;
  $i31 = $307;
 }
 $i32 = 0;
 while(1) {
  $308 = $i32;
  $309 = ($308|0)<(3);
  if (!($309)) {
   break;
  }
  $310 = $i32;
  $311 = (($22) + 420|0);
  $312 = (($311) + ($310<<2)|0);
  HEAPF32[$312>>2] = 0.0;
  $313 = $i32;
  $314 = (($313) + 1)|0;
  $i32 = $314;
 }
 $i33 = 0;
 while(1) {
  $315 = $i33;
  $316 = ($315|0)<(3);
  if (!($316)) {
   break;
  }
  $317 = $i33;
  $318 = (($22) + 432|0);
  $319 = (($318) + ($317<<2)|0);
  HEAPF32[$319>>2] = 0.0;
  $320 = $i33;
  $321 = (($320) + 1)|0;
  $i33 = $321;
 }
 $i34 = 0;
 while(1) {
  $322 = $i34;
  $323 = ($322|0)<(2);
  if (!($323)) {
   break;
  }
  $324 = $i34;
  $325 = (($22) + 444|0);
  $326 = (($325) + ($324<<2)|0);
  HEAPF32[$326>>2] = 0.0;
  $327 = $i34;
  $328 = (($327) + 1)|0;
  $i34 = $328;
 }
 $i35 = 0;
 while(1) {
  $329 = $i35;
  $330 = ($329|0)<(3);
  if (!($330)) {
   break;
  }
  $331 = $i35;
  $332 = (($22) + 452|0);
  $333 = (($332) + ($331<<2)|0);
  HEAPF32[$333>>2] = 0.0;
  $334 = $i35;
  $335 = (($334) + 1)|0;
  $i35 = $335;
 }
 $i36 = 0;
 while(1) {
  $336 = $i36;
  $337 = ($336|0)<(2);
  if (!($337)) {
   break;
  }
  $338 = $i36;
  $339 = (($22) + 464|0);
  $340 = (($339) + ($338<<2)|0);
  HEAPF32[$340>>2] = 0.0;
  $341 = $i36;
  $342 = (($341) + 1)|0;
  $i36 = $342;
 }
 $i37 = 0;
 while(1) {
  $343 = $i37;
  $344 = ($343|0)<(2);
  if (!($344)) {
   break;
  }
  $345 = $i37;
  $346 = (($22) + 472|0);
  $347 = (($346) + ($345<<2)|0);
  HEAPF32[$347>>2] = 0.0;
  $348 = $i37;
  $349 = (($348) + 1)|0;
  $i37 = $349;
 }
 $i38 = 0;
 while(1) {
  $350 = $i38;
  $351 = ($350|0)<(3);
  if (!($351)) {
   break;
  }
  $352 = $i38;
  $353 = (($22) + 480|0);
  $354 = (($353) + ($352<<2)|0);
  HEAPF32[$354>>2] = 0.0;
  $355 = $i38;
  $356 = (($355) + 1)|0;
  $i38 = $356;
 }
 $i39 = 0;
 while(1) {
  $357 = $i39;
  $358 = ($357|0)<(3);
  if (!($358)) {
   break;
  }
  $359 = $i39;
  $360 = (($22) + 492|0);
  $361 = (($360) + ($359<<2)|0);
  HEAPF32[$361>>2] = 0.0;
  $362 = $i39;
  $363 = (($362) + 1)|0;
  $i39 = $363;
 }
 $i40 = 0;
 while(1) {
  $364 = $i40;
  $365 = ($364|0)<(3);
  if (!($365)) {
   break;
  }
  $366 = $i40;
  $367 = (($22) + 504|0);
  $368 = (($367) + ($366<<2)|0);
  HEAPF32[$368>>2] = 0.0;
  $369 = $i40;
  $370 = (($369) + 1)|0;
  $i40 = $370;
 }
 $i41 = 0;
 while(1) {
  $371 = $i41;
  $372 = ($371|0)<(2);
  if (!($372)) {
   break;
  }
  $373 = $i41;
  $374 = (($22) + 516|0);
  $375 = (($374) + ($373<<2)|0);
  HEAPF32[$375>>2] = 0.0;
  $376 = $i41;
  $377 = (($376) + 1)|0;
  $i41 = $377;
 }
 $i42 = 0;
 while(1) {
  $378 = $i42;
  $379 = ($378|0)<(3);
  if (!($379)) {
   break;
  }
  $380 = $i42;
  $381 = (($22) + 524|0);
  $382 = (($381) + ($380<<2)|0);
  HEAPF32[$382>>2] = 0.0;
  $383 = $i42;
  $384 = (($383) + 1)|0;
  $i42 = $384;
 }
 $i43 = 0;
 while(1) {
  $385 = $i43;
  $386 = ($385|0)<(2);
  if (!($386)) {
   break;
  }
  $387 = $i43;
  $388 = (($22) + 536|0);
  $389 = (($388) + ($387<<2)|0);
  HEAPF32[$389>>2] = 0.0;
  $390 = $i43;
  $391 = (($390) + 1)|0;
  $i43 = $391;
 }
 $i44 = 0;
 while(1) {
  $392 = $i44;
  $393 = ($392|0)<(2);
  if (!($393)) {
   break;
  }
  $394 = $i44;
  $395 = (($22) + 544|0);
  $396 = (($395) + ($394<<2)|0);
  HEAPF32[$396>>2] = 0.0;
  $397 = $i44;
  $398 = (($397) + 1)|0;
  $i44 = $398;
 }
 $i45 = 0;
 while(1) {
  $399 = $i45;
  $400 = ($399|0)<(3);
  if (!($400)) {
   break;
  }
  $401 = $i45;
  $402 = (($22) + 552|0);
  $403 = (($402) + ($401<<2)|0);
  HEAPF32[$403>>2] = 0.0;
  $404 = $i45;
  $405 = (($404) + 1)|0;
  $i45 = $405;
 }
 $i46 = 0;
 while(1) {
  $406 = $i46;
  $407 = ($406|0)<(3);
  if (!($407)) {
   break;
  }
  $408 = $i46;
  $409 = (($22) + 564|0);
  $410 = (($409) + ($408<<2)|0);
  HEAPF32[$410>>2] = 0.0;
  $411 = $i46;
  $412 = (($411) + 1)|0;
  $i46 = $412;
 }
 $i47 = 0;
 while(1) {
  $413 = $i47;
  $414 = ($413|0)<(2);
  if (!($414)) {
   break;
  }
  $415 = $i47;
  $416 = (($22) + 576|0);
  $417 = (($416) + ($415<<2)|0);
  HEAPF32[$417>>2] = 0.0;
  $418 = $i47;
  $419 = (($418) + 1)|0;
  $i47 = $419;
 }
 $i48 = 0;
 while(1) {
  $420 = $i48;
  $421 = ($420|0)<(3);
  if (!($421)) {
   break;
  }
  $422 = $i48;
  $423 = (($22) + 584|0);
  $424 = (($423) + ($422<<2)|0);
  HEAPF32[$424>>2] = 0.0;
  $425 = $i48;
  $426 = (($425) + 1)|0;
  $i48 = $426;
 }
 $i49 = 0;
 while(1) {
  $427 = $i49;
  $428 = ($427|0)<(2);
  if (!($428)) {
   break;
  }
  $429 = $i49;
  $430 = (($22) + 596|0);
  $431 = (($430) + ($429<<2)|0);
  HEAPF32[$431>>2] = 0.0;
  $432 = $i49;
  $433 = (($432) + 1)|0;
  $i49 = $433;
 }
 $i50 = 0;
 while(1) {
  $434 = $i50;
  $435 = ($434|0)<(2);
  if (!($435)) {
   break;
  }
  $436 = $i50;
  $437 = (($22) + 604|0);
  $438 = (($437) + ($436<<2)|0);
  HEAPF32[$438>>2] = 0.0;
  $439 = $i50;
  $440 = (($439) + 1)|0;
  $i50 = $440;
 }
 $i51 = 0;
 while(1) {
  $441 = $i51;
  $442 = ($441|0)<(3);
  if (!($442)) {
   break;
  }
  $443 = $i51;
  $444 = (($22) + 612|0);
  $445 = (($444) + ($443<<2)|0);
  HEAPF32[$445>>2] = 0.0;
  $446 = $i51;
  $447 = (($446) + 1)|0;
  $i51 = $447;
 }
 $i52 = 0;
 while(1) {
  $448 = $i52;
  $449 = ($448|0)<(2);
  if (!($449)) {
   break;
  }
  $450 = $i52;
  $451 = (($22) + 624|0);
  $452 = (($451) + ($450<<2)|0);
  HEAPF32[$452>>2] = 0.0;
  $453 = $i52;
  $454 = (($453) + 1)|0;
  $i52 = $454;
 }
 $i53 = 0;
 while(1) {
  $455 = $i53;
  $456 = ($455|0)<(3);
  if (!($456)) {
   break;
  }
  $457 = $i53;
  $458 = (($22) + 632|0);
  $459 = (($458) + ($457<<2)|0);
  HEAPF32[$459>>2] = 0.0;
  $460 = $i53;
  $461 = (($460) + 1)|0;
  $i53 = $461;
 }
 $i54 = 0;
 while(1) {
  $462 = $i54;
  $463 = ($462|0)<(2);
  if (!($463)) {
   break;
  }
  $464 = $i54;
  $465 = (($22) + 644|0);
  $466 = (($465) + ($464<<2)|0);
  HEAPF32[$466>>2] = 0.0;
  $467 = $i54;
  $468 = (($467) + 1)|0;
  $i54 = $468;
 }
 $i55 = 0;
 while(1) {
  $469 = $i55;
  $470 = ($469|0)<(3);
  if (!($470)) {
   break;
  }
  $471 = $i55;
  $472 = (($22) + 652|0);
  $473 = (($472) + ($471<<2)|0);
  HEAPF32[$473>>2] = 0.0;
  $474 = $i55;
  $475 = (($474) + 1)|0;
  $i55 = $475;
 }
 $i56 = 0;
 while(1) {
  $476 = $i56;
  $477 = ($476|0)<(3);
  if (!($477)) {
   break;
  }
  $478 = $i56;
  $479 = (($22) + 664|0);
  $480 = (($479) + ($478<<2)|0);
  HEAPF32[$480>>2] = 0.0;
  $481 = $i56;
  $482 = (($481) + 1)|0;
  $i56 = $482;
 }
 $i57 = 0;
 while(1) {
  $483 = $i57;
  $484 = ($483|0)<(3);
  if (!($484)) {
   break;
  }
  $485 = $i57;
  $486 = (($22) + 676|0);
  $487 = (($486) + ($485<<2)|0);
  HEAPF32[$487>>2] = 0.0;
  $488 = $i57;
  $489 = (($488) + 1)|0;
  $i57 = $489;
 }
 $i58 = 0;
 while(1) {
  $490 = $i58;
  $491 = ($490|0)<(3);
  if (!($491)) {
   break;
  }
  $492 = $i58;
  $493 = (($22) + 688|0);
  $494 = (($493) + ($492<<2)|0);
  HEAPF32[$494>>2] = 0.0;
  $495 = $i58;
  $496 = (($495) + 1)|0;
  $i58 = $496;
 }
 $i59 = 0;
 while(1) {
  $497 = $i59;
  $498 = ($497|0)<(2);
  if (!($498)) {
   break;
  }
  $499 = $i59;
  $500 = (($22) + 700|0);
  $501 = (($500) + ($499<<2)|0);
  HEAPF32[$501>>2] = 0.0;
  $502 = $i59;
  $503 = (($502) + 1)|0;
  $i59 = $503;
 }
 $i60 = 0;
 while(1) {
  $504 = $i60;
  $505 = ($504|0)<(3);
  if (!($505)) {
   break;
  }
  $506 = $i60;
  $507 = (($22) + 708|0);
  $508 = (($507) + ($506<<2)|0);
  HEAPF32[$508>>2] = 0.0;
  $509 = $i60;
  $510 = (($509) + 1)|0;
  $i60 = $510;
 }
 $i61 = 0;
 while(1) {
  $511 = $i61;
  $512 = ($511|0)<(2);
  if (!($512)) {
   break;
  }
  $513 = $i61;
  $514 = (($22) + 720|0);
  $515 = (($514) + ($513<<2)|0);
  HEAPF32[$515>>2] = 0.0;
  $516 = $i61;
  $517 = (($516) + 1)|0;
  $i61 = $517;
 }
 $i62 = 0;
 while(1) {
  $518 = $i62;
  $519 = ($518|0)<(2);
  if (!($519)) {
   break;
  }
  $520 = $i62;
  $521 = (($22) + 728|0);
  $522 = (($521) + ($520<<2)|0);
  HEAPF32[$522>>2] = 0.0;
  $523 = $i62;
  $524 = (($523) + 1)|0;
  $i62 = $524;
 }
 $i63 = 0;
 while(1) {
  $525 = $i63;
  $526 = ($525|0)<(3);
  if (!($526)) {
   break;
  }
  $527 = $i63;
  $528 = (($22) + 736|0);
  $529 = (($528) + ($527<<2)|0);
  HEAPF32[$529>>2] = 0.0;
  $530 = $i63;
  $531 = (($530) + 1)|0;
  $i63 = $531;
 }
 $i64 = 0;
 while(1) {
  $532 = $i64;
  $533 = ($532|0)<(3);
  if (!($533)) {
   break;
  }
  $534 = $i64;
  $535 = (($22) + 748|0);
  $536 = (($535) + ($534<<2)|0);
  HEAPF32[$536>>2] = 0.0;
  $537 = $i64;
  $538 = (($537) + 1)|0;
  $i64 = $538;
 }
 $i65 = 0;
 while(1) {
  $539 = $i65;
  $540 = ($539|0)<(3);
  if (!($540)) {
   break;
  }
  $541 = $i65;
  $542 = (($22) + 760|0);
  $543 = (($542) + ($541<<2)|0);
  HEAPF32[$543>>2] = 0.0;
  $544 = $i65;
  $545 = (($544) + 1)|0;
  $i65 = $545;
 }
 $i66 = 0;
 while(1) {
  $546 = $i66;
  $547 = ($546|0)<(2);
  if (!($547)) {
   break;
  }
  $548 = $i66;
  $549 = (($22) + 772|0);
  $550 = (($549) + ($548<<2)|0);
  HEAPF32[$550>>2] = 0.0;
  $551 = $i66;
  $552 = (($551) + 1)|0;
  $i66 = $552;
 }
 $i67 = 0;
 while(1) {
  $553 = $i67;
  $554 = ($553|0)<(3);
  if (!($554)) {
   break;
  }
  $555 = $i67;
  $556 = (($22) + 780|0);
  $557 = (($556) + ($555<<2)|0);
  HEAPF32[$557>>2] = 0.0;
  $558 = $i67;
  $559 = (($558) + 1)|0;
  $i67 = $559;
 }
 $i68 = 0;
 while(1) {
  $560 = $i68;
  $561 = ($560|0)<(2);
  if (!($561)) {
   break;
  }
  $562 = $i68;
  $563 = (($22) + 792|0);
  $564 = (($563) + ($562<<2)|0);
  HEAPF32[$564>>2] = 0.0;
  $565 = $i68;
  $566 = (($565) + 1)|0;
  $i68 = $566;
 }
 $i69 = 0;
 while(1) {
  $567 = $i69;
  $568 = ($567|0)<(2);
  if (!($568)) {
   break;
  }
  $569 = $i69;
  $570 = (($22) + 800|0);
  $571 = (($570) + ($569<<2)|0);
  HEAPF32[$571>>2] = 0.0;
  $572 = $i69;
  $573 = (($572) + 1)|0;
  $i69 = $573;
 }
 $i70 = 0;
 while(1) {
  $574 = $i70;
  $575 = ($574|0)<(3);
  if (!($575)) {
   break;
  }
  $576 = $i70;
  $577 = (($22) + 808|0);
  $578 = (($577) + ($576<<2)|0);
  HEAPF32[$578>>2] = 0.0;
  $579 = $i70;
  $580 = (($579) + 1)|0;
  $i70 = $580;
 }
 $i71 = 0;
 while(1) {
  $581 = $i71;
  $582 = ($581|0)<(3);
  if (!($582)) {
   break;
  }
  $583 = $i71;
  $584 = (($22) + 820|0);
  $585 = (($584) + ($583<<2)|0);
  HEAPF32[$585>>2] = 0.0;
  $586 = $i71;
  $587 = (($586) + 1)|0;
  $i71 = $587;
 }
 $i72 = 0;
 while(1) {
  $588 = $i72;
  $589 = ($588|0)<(2);
  if (!($589)) {
   break;
  }
  $590 = $i72;
  $591 = (($22) + 832|0);
  $592 = (($591) + ($590<<2)|0);
  HEAPF32[$592>>2] = 0.0;
  $593 = $i72;
  $594 = (($593) + 1)|0;
  $i72 = $594;
 }
 $i73 = 0;
 while(1) {
  $595 = $i73;
  $596 = ($595|0)<(3);
  if (!($596)) {
   break;
  }
  $597 = $i73;
  $598 = (($22) + 840|0);
  $599 = (($598) + ($597<<2)|0);
  HEAPF32[$599>>2] = 0.0;
  $600 = $i73;
  $601 = (($600) + 1)|0;
  $i73 = $601;
 }
 $i74 = 0;
 while(1) {
  $602 = $i74;
  $603 = ($602|0)<(2);
  if (!($603)) {
   break;
  }
  $604 = $i74;
  $605 = (($22) + 852|0);
  $606 = (($605) + ($604<<2)|0);
  HEAPF32[$606>>2] = 0.0;
  $607 = $i74;
  $608 = (($607) + 1)|0;
  $i74 = $608;
 }
 $i75 = 0;
 while(1) {
  $609 = $i75;
  $610 = ($609|0)<(2);
  if (!($610)) {
   break;
  }
  $611 = $i75;
  $612 = (($22) + 860|0);
  $613 = (($612) + ($611<<2)|0);
  HEAPF32[$613>>2] = 0.0;
  $614 = $i75;
  $615 = (($614) + 1)|0;
  $i75 = $615;
 }
 $i76 = 0;
 while(1) {
  $616 = $i76;
  $617 = ($616|0)<(3);
  if (!($617)) {
   break;
  }
  $618 = $i76;
  $619 = (($22) + 868|0);
  $620 = (($619) + ($618<<2)|0);
  HEAPF32[$620>>2] = 0.0;
  $621 = $i76;
  $622 = (($621) + 1)|0;
  $i76 = $622;
 }
 $i77 = 0;
 while(1) {
  $623 = $i77;
  $624 = ($623|0)<(2);
  if (!($624)) {
   break;
  }
  $625 = $i77;
  $626 = (($22) + 880|0);
  $627 = (($626) + ($625<<2)|0);
  HEAPF32[$627>>2] = 0.0;
  $628 = $i77;
  $629 = (($628) + 1)|0;
  $i77 = $629;
 }
 $i78 = 0;
 while(1) {
  $630 = $i78;
  $631 = ($630|0)<(3);
  if (!($631)) {
   break;
  }
  $632 = $i78;
  $633 = (($22) + 888|0);
  $634 = (($633) + ($632<<2)|0);
  HEAPF32[$634>>2] = 0.0;
  $635 = $i78;
  $636 = (($635) + 1)|0;
  $i78 = $636;
 }
 $i79 = 0;
 while(1) {
  $637 = $i79;
  $638 = ($637|0)<(2);
  if (!($638)) {
   break;
  }
  $639 = $i79;
  $640 = (($22) + 900|0);
  $641 = (($640) + ($639<<2)|0);
  HEAPF32[$641>>2] = 0.0;
  $642 = $i79;
  $643 = (($642) + 1)|0;
  $i79 = $643;
 }
 $i80 = 0;
 while(1) {
  $644 = $i80;
  $645 = ($644|0)<(3);
  if (!($645)) {
   break;
  }
  $646 = $i80;
  $647 = (($22) + 908|0);
  $648 = (($647) + ($646<<2)|0);
  HEAPF32[$648>>2] = 0.0;
  $649 = $i80;
  $650 = (($649) + 1)|0;
  $i80 = $650;
 }
 $i81 = 0;
 while(1) {
  $651 = $i81;
  $652 = ($651|0)<(3);
  if (!($652)) {
   break;
  }
  $653 = $i81;
  $654 = (($22) + 920|0);
  $655 = (($654) + ($653<<2)|0);
  HEAPF32[$655>>2] = 0.0;
  $656 = $i81;
  $657 = (($656) + 1)|0;
  $i81 = $657;
 }
 $i82 = 0;
 while(1) {
  $658 = $i82;
  $659 = ($658|0)<(3);
  if (!($659)) {
   break;
  }
  $660 = $i82;
  $661 = (($22) + 932|0);
  $662 = (($661) + ($660<<2)|0);
  HEAPF32[$662>>2] = 0.0;
  $663 = $i82;
  $664 = (($663) + 1)|0;
  $i82 = $664;
 }
 $i83 = 0;
 while(1) {
  $665 = $i83;
  $666 = ($665|0)<(3);
  if (!($666)) {
   break;
  }
  $667 = $i83;
  $668 = (($22) + 944|0);
  $669 = (($668) + ($667<<2)|0);
  HEAPF32[$669>>2] = 0.0;
  $670 = $i83;
  $671 = (($670) + 1)|0;
  $i83 = $671;
 }
 $i84 = 0;
 while(1) {
  $672 = $i84;
  $673 = ($672|0)<(2);
  if (!($673)) {
   break;
  }
  $674 = $i84;
  $675 = (($22) + 956|0);
  $676 = (($675) + ($674<<2)|0);
  HEAPF32[$676>>2] = 0.0;
  $677 = $i84;
  $678 = (($677) + 1)|0;
  $i84 = $678;
 }
 $i85 = 0;
 while(1) {
  $679 = $i85;
  $680 = ($679|0)<(3);
  if (!($680)) {
   break;
  }
  $681 = $i85;
  $682 = (($22) + 964|0);
  $683 = (($682) + ($681<<2)|0);
  HEAPF32[$683>>2] = 0.0;
  $684 = $i85;
  $685 = (($684) + 1)|0;
  $i85 = $685;
 }
 $i86 = 0;
 while(1) {
  $686 = $i86;
  $687 = ($686|0)<(2);
  if (!($687)) {
   break;
  }
  $688 = $i86;
  $689 = (($22) + 976|0);
  $690 = (($689) + ($688<<2)|0);
  HEAPF32[$690>>2] = 0.0;
  $691 = $i86;
  $692 = (($691) + 1)|0;
  $i86 = $692;
 }
 $i87 = 0;
 while(1) {
  $693 = $i87;
  $694 = ($693|0)<(2);
  if (!($694)) {
   break;
  }
  $695 = $i87;
  $696 = (($22) + 984|0);
  $697 = (($696) + ($695<<2)|0);
  HEAPF32[$697>>2] = 0.0;
  $698 = $i87;
  $699 = (($698) + 1)|0;
  $i87 = $699;
 }
 $i88 = 0;
 while(1) {
  $700 = $i88;
  $701 = ($700|0)<(3);
  if (!($701)) {
   break;
  }
  $702 = $i88;
  $703 = (($22) + 992|0);
  $704 = (($703) + ($702<<2)|0);
  HEAPF32[$704>>2] = 0.0;
  $705 = $i88;
  $706 = (($705) + 1)|0;
  $i88 = $706;
 }
 $i89 = 0;
 while(1) {
  $707 = $i89;
  $708 = ($707|0)<(3);
  if (!($708)) {
   break;
  }
  $709 = $i89;
  $710 = (($22) + 1004|0);
  $711 = (($710) + ($709<<2)|0);
  HEAPF32[$711>>2] = 0.0;
  $712 = $i89;
  $713 = (($712) + 1)|0;
  $i89 = $713;
 }
 $i90 = 0;
 while(1) {
  $714 = $i90;
  $715 = ($714|0)<(3);
  if (!($715)) {
   break;
  }
  $716 = $i90;
  $717 = (($22) + 1016|0);
  $718 = (($717) + ($716<<2)|0);
  HEAPF32[$718>>2] = 0.0;
  $719 = $i90;
  $720 = (($719) + 1)|0;
  $i90 = $720;
 }
 $i91 = 0;
 while(1) {
  $721 = $i91;
  $722 = ($721|0)<(2);
  if (!($722)) {
   break;
  }
  $723 = $i91;
  $724 = (($22) + 1028|0);
  $725 = (($724) + ($723<<2)|0);
  HEAPF32[$725>>2] = 0.0;
  $726 = $i91;
  $727 = (($726) + 1)|0;
  $i91 = $727;
 }
 $i92 = 0;
 while(1) {
  $728 = $i92;
  $729 = ($728|0)<(3);
  if (!($729)) {
   break;
  }
  $730 = $i92;
  $731 = (($22) + 1036|0);
  $732 = (($731) + ($730<<2)|0);
  HEAPF32[$732>>2] = 0.0;
  $733 = $i92;
  $734 = (($733) + 1)|0;
  $i92 = $734;
 }
 $i93 = 0;
 while(1) {
  $735 = $i93;
  $736 = ($735|0)<(2);
  if (!($736)) {
   break;
  }
  $737 = $i93;
  $738 = (($22) + 1048|0);
  $739 = (($738) + ($737<<2)|0);
  HEAPF32[$739>>2] = 0.0;
  $740 = $i93;
  $741 = (($740) + 1)|0;
  $i93 = $741;
 }
 $i94 = 0;
 while(1) {
  $742 = $i94;
  $743 = ($742|0)<(2);
  if (!($743)) {
   break;
  }
  $744 = $i94;
  $745 = (($22) + 1056|0);
  $746 = (($745) + ($744<<2)|0);
  HEAPF32[$746>>2] = 0.0;
  $747 = $i94;
  $748 = (($747) + 1)|0;
  $i94 = $748;
 }
 $i95 = 0;
 while(1) {
  $749 = $i95;
  $750 = ($749|0)<(3);
  if (!($750)) {
   break;
  }
  $751 = $i95;
  $752 = (($22) + 1064|0);
  $753 = (($752) + ($751<<2)|0);
  HEAPF32[$753>>2] = 0.0;
  $754 = $i95;
  $755 = (($754) + 1)|0;
  $i95 = $755;
 }
 $i96 = 0;
 while(1) {
  $756 = $i96;
  $757 = ($756|0)<(3);
  if (!($757)) {
   break;
  }
  $758 = $i96;
  $759 = (($22) + 1076|0);
  $760 = (($759) + ($758<<2)|0);
  HEAPF32[$760>>2] = 0.0;
  $761 = $i96;
  $762 = (($761) + 1)|0;
  $i96 = $762;
 }
 $i97 = 0;
 while(1) {
  $763 = $i97;
  $764 = ($763|0)<(2);
  if (!($764)) {
   break;
  }
  $765 = $i97;
  $766 = (($22) + 1088|0);
  $767 = (($766) + ($765<<2)|0);
  HEAPF32[$767>>2] = 0.0;
  $768 = $i97;
  $769 = (($768) + 1)|0;
  $i97 = $769;
 }
 $i98 = 0;
 while(1) {
  $770 = $i98;
  $771 = ($770|0)<(3);
  if (!($771)) {
   break;
  }
  $772 = $i98;
  $773 = (($22) + 1096|0);
  $774 = (($773) + ($772<<2)|0);
  HEAPF32[$774>>2] = 0.0;
  $775 = $i98;
  $776 = (($775) + 1)|0;
  $i98 = $776;
 }
 $i99 = 0;
 while(1) {
  $777 = $i99;
  $778 = ($777|0)<(2);
  if (!($778)) {
   break;
  }
  $779 = $i99;
  $780 = (($22) + 1108|0);
  $781 = (($780) + ($779<<2)|0);
  HEAPF32[$781>>2] = 0.0;
  $782 = $i99;
  $783 = (($782) + 1)|0;
  $i99 = $783;
 }
 $i100 = 0;
 while(1) {
  $784 = $i100;
  $785 = ($784|0)<(2);
  if (!($785)) {
   break;
  }
  $786 = $i100;
  $787 = (($22) + 1116|0);
  $788 = (($787) + ($786<<2)|0);
  HEAPF32[$788>>2] = 0.0;
  $789 = $i100;
  $790 = (($789) + 1)|0;
  $i100 = $790;
 }
 $i101 = 0;
 while(1) {
  $791 = $i101;
  $792 = ($791|0)<(3);
  if (!($792)) {
   break;
  }
  $793 = $i101;
  $794 = (($22) + 1124|0);
  $795 = (($794) + ($793<<2)|0);
  HEAPF32[$795>>2] = 0.0;
  $796 = $i101;
  $797 = (($796) + 1)|0;
  $i101 = $797;
 }
 $i102 = 0;
 while(1) {
  $798 = $i102;
  $799 = ($798|0)<(2);
  if (!($799)) {
   break;
  }
  $800 = $i102;
  $801 = (($22) + 1136|0);
  $802 = (($801) + ($800<<2)|0);
  HEAPF32[$802>>2] = 0.0;
  $803 = $i102;
  $804 = (($803) + 1)|0;
  $i102 = $804;
 }
 $i103 = 0;
 while(1) {
  $805 = $i103;
  $806 = ($805|0)<(3);
  if (!($806)) {
   break;
  }
  $807 = $i103;
  $808 = (($22) + 1144|0);
  $809 = (($808) + ($807<<2)|0);
  HEAPF32[$809>>2] = 0.0;
  $810 = $i103;
  $811 = (($810) + 1)|0;
  $i103 = $811;
 }
 $i104 = 0;
 while(1) {
  $812 = $i104;
  $813 = ($812|0)<(2);
  if (!($813)) {
   break;
  }
  $814 = $i104;
  $815 = (($22) + 1156|0);
  $816 = (($815) + ($814<<2)|0);
  HEAPF32[$816>>2] = 0.0;
  $817 = $i104;
  $818 = (($817) + 1)|0;
  $i104 = $818;
 }
 $i105 = 0;
 while(1) {
  $819 = $i105;
  $820 = ($819|0)<(3);
  if (!($820)) {
   break;
  }
  $821 = $i105;
  $822 = (($22) + 1164|0);
  $823 = (($822) + ($821<<2)|0);
  HEAPF32[$823>>2] = 0.0;
  $824 = $i105;
  $825 = (($824) + 1)|0;
  $i105 = $825;
 }
 $i106 = 0;
 while(1) {
  $826 = $i106;
  $827 = ($826|0)<(3);
  if (!($827)) {
   break;
  }
  $828 = $i106;
  $829 = (($22) + 1176|0);
  $830 = (($829) + ($828<<2)|0);
  HEAPF32[$830>>2] = 0.0;
  $831 = $i106;
  $832 = (($831) + 1)|0;
  $i106 = $832;
 }
 $i107 = 0;
 while(1) {
  $833 = $i107;
  $834 = ($833|0)<(3);
  if (!($834)) {
   break;
  }
  $835 = $i107;
  $836 = (($22) + 1188|0);
  $837 = (($836) + ($835<<2)|0);
  HEAPF32[$837>>2] = 0.0;
  $838 = $i107;
  $839 = (($838) + 1)|0;
  $i107 = $839;
 }
 $i108 = 0;
 while(1) {
  $840 = $i108;
  $841 = ($840|0)<(3);
  if (!($841)) {
   break;
  }
  $842 = $i108;
  $843 = (($22) + 1200|0);
  $844 = (($843) + ($842<<2)|0);
  HEAPF32[$844>>2] = 0.0;
  $845 = $i108;
  $846 = (($845) + 1)|0;
  $i108 = $846;
 }
 $i109 = 0;
 while(1) {
  $847 = $i109;
  $848 = ($847|0)<(2);
  if (!($848)) {
   break;
  }
  $849 = $i109;
  $850 = (($22) + 1212|0);
  $851 = (($850) + ($849<<2)|0);
  HEAPF32[$851>>2] = 0.0;
  $852 = $i109;
  $853 = (($852) + 1)|0;
  $i109 = $853;
 }
 $i110 = 0;
 while(1) {
  $854 = $i110;
  $855 = ($854|0)<(3);
  if (!($855)) {
   break;
  }
  $856 = $i110;
  $857 = (($22) + 1220|0);
  $858 = (($857) + ($856<<2)|0);
  HEAPF32[$858>>2] = 0.0;
  $859 = $i110;
  $860 = (($859) + 1)|0;
  $i110 = $860;
 }
 $i111 = 0;
 while(1) {
  $861 = $i111;
  $862 = ($861|0)<(2);
  if (!($862)) {
   break;
  }
  $863 = $i111;
  $864 = (($22) + 1232|0);
  $865 = (($864) + ($863<<2)|0);
  HEAPF32[$865>>2] = 0.0;
  $866 = $i111;
  $867 = (($866) + 1)|0;
  $i111 = $867;
 }
 $i112 = 0;
 while(1) {
  $868 = $i112;
  $869 = ($868|0)<(2);
  if (!($869)) {
   break;
  }
  $870 = $i112;
  $871 = (($22) + 1240|0);
  $872 = (($871) + ($870<<2)|0);
  HEAPF32[$872>>2] = 0.0;
  $873 = $i112;
  $874 = (($873) + 1)|0;
  $i112 = $874;
 }
 $i113 = 0;
 while(1) {
  $875 = $i113;
  $876 = ($875|0)<(3);
  if (!($876)) {
   break;
  }
  $877 = $i113;
  $878 = (($22) + 1248|0);
  $879 = (($878) + ($877<<2)|0);
  HEAPF32[$879>>2] = 0.0;
  $880 = $i113;
  $881 = (($880) + 1)|0;
  $i113 = $881;
 }
 $i114 = 0;
 while(1) {
  $882 = $i114;
  $883 = ($882|0)<(3);
  if (!($883)) {
   break;
  }
  $884 = $i114;
  $885 = (($22) + 1260|0);
  $886 = (($885) + ($884<<2)|0);
  HEAPF32[$886>>2] = 0.0;
  $887 = $i114;
  $888 = (($887) + 1)|0;
  $i114 = $888;
 }
 $i115 = 0;
 while(1) {
  $889 = $i115;
  $890 = ($889|0)<(3);
  if (!($890)) {
   break;
  }
  $891 = $i115;
  $892 = (($22) + 1272|0);
  $893 = (($892) + ($891<<2)|0);
  HEAPF32[$893>>2] = 0.0;
  $894 = $i115;
  $895 = (($894) + 1)|0;
  $i115 = $895;
 }
 $i116 = 0;
 while(1) {
  $896 = $i116;
  $897 = ($896|0)<(2);
  if (!($897)) {
   break;
  }
  $898 = $i116;
  $899 = (($22) + 1284|0);
  $900 = (($899) + ($898<<2)|0);
  HEAPF32[$900>>2] = 0.0;
  $901 = $i116;
  $902 = (($901) + 1)|0;
  $i116 = $902;
 }
 $i117 = 0;
 while(1) {
  $903 = $i117;
  $904 = ($903|0)<(3);
  if (!($904)) {
   break;
  }
  $905 = $i117;
  $906 = (($22) + 1292|0);
  $907 = (($906) + ($905<<2)|0);
  HEAPF32[$907>>2] = 0.0;
  $908 = $i117;
  $909 = (($908) + 1)|0;
  $i117 = $909;
 }
 $i118 = 0;
 while(1) {
  $910 = $i118;
  $911 = ($910|0)<(2);
  if (!($911)) {
   break;
  }
  $912 = $i118;
  $913 = (($22) + 1304|0);
  $914 = (($913) + ($912<<2)|0);
  HEAPF32[$914>>2] = 0.0;
  $915 = $i118;
  $916 = (($915) + 1)|0;
  $i118 = $916;
 }
 $i119 = 0;
 while(1) {
  $917 = $i119;
  $918 = ($917|0)<(2);
  if (!($918)) {
   break;
  }
  $919 = $i119;
  $920 = (($22) + 1312|0);
  $921 = (($920) + ($919<<2)|0);
  HEAPF32[$921>>2] = 0.0;
  $922 = $i119;
  $923 = (($922) + 1)|0;
  $i119 = $923;
 }
 $i120 = 0;
 while(1) {
  $924 = $i120;
  $925 = ($924|0)<(3);
  if (!($925)) {
   break;
  }
  $926 = $i120;
  $927 = (($22) + 1320|0);
  $928 = (($927) + ($926<<2)|0);
  HEAPF32[$928>>2] = 0.0;
  $929 = $i120;
  $930 = (($929) + 1)|0;
  $i120 = $930;
 }
 $i121 = 0;
 while(1) {
  $931 = $i121;
  $932 = ($931|0)<(3);
  if (!($932)) {
   break;
  }
  $933 = $i121;
  $934 = (($22) + 1332|0);
  $935 = (($934) + ($933<<2)|0);
  HEAPF32[$935>>2] = 0.0;
  $936 = $i121;
  $937 = (($936) + 1)|0;
  $i121 = $937;
 }
 $i122 = 0;
 while(1) {
  $938 = $i122;
  $939 = ($938|0)<(2);
  if (!($939)) {
   break;
  }
  $940 = $i122;
  $941 = (($22) + 1344|0);
  $942 = (($941) + ($940<<2)|0);
  HEAPF32[$942>>2] = 0.0;
  $943 = $i122;
  $944 = (($943) + 1)|0;
  $i122 = $944;
 }
 $i123 = 0;
 while(1) {
  $945 = $i123;
  $946 = ($945|0)<(3);
  if (!($946)) {
   break;
  }
  $947 = $i123;
  $948 = (($22) + 1352|0);
  $949 = (($948) + ($947<<2)|0);
  HEAPF32[$949>>2] = 0.0;
  $950 = $i123;
  $951 = (($950) + 1)|0;
  $i123 = $951;
 }
 $i124 = 0;
 while(1) {
  $952 = $i124;
  $953 = ($952|0)<(2);
  if (!($953)) {
   break;
  }
  $954 = $i124;
  $955 = (($22) + 1364|0);
  $956 = (($955) + ($954<<2)|0);
  HEAPF32[$956>>2] = 0.0;
  $957 = $i124;
  $958 = (($957) + 1)|0;
  $i124 = $958;
 }
 $i125 = 0;
 while(1) {
  $959 = $i125;
  $960 = ($959|0)<(2);
  if (!($960)) {
   break;
  }
  $961 = $i125;
  $962 = (($22) + 1372|0);
  $963 = (($962) + ($961<<2)|0);
  HEAPF32[$963>>2] = 0.0;
  $964 = $i125;
  $965 = (($964) + 1)|0;
  $i125 = $965;
 }
 $i126 = 0;
 while(1) {
  $966 = $i126;
  $967 = ($966|0)<(3);
  if (!($967)) {
   break;
  }
  $968 = $i126;
  $969 = (($22) + 1380|0);
  $970 = (($969) + ($968<<2)|0);
  HEAPF32[$970>>2] = 0.0;
  $971 = $i126;
  $972 = (($971) + 1)|0;
  $i126 = $972;
 }
 $i127 = 0;
 while(1) {
  $973 = $i127;
  $974 = ($973|0)<(2);
  if (!($974)) {
   break;
  }
  $975 = $i127;
  $976 = (($22) + 1392|0);
  $977 = (($976) + ($975<<2)|0);
  HEAPF32[$977>>2] = 0.0;
  $978 = $i127;
  $979 = (($978) + 1)|0;
  $i127 = $979;
 }
 $i128 = 0;
 while(1) {
  $980 = $i128;
  $981 = ($980|0)<(3);
  if (!($981)) {
   break;
  }
  $982 = $i128;
  $983 = (($22) + 1400|0);
  $984 = (($983) + ($982<<2)|0);
  HEAPF32[$984>>2] = 0.0;
  $985 = $i128;
  $986 = (($985) + 1)|0;
  $i128 = $986;
 }
 $i129 = 0;
 while(1) {
  $987 = $i129;
  $988 = ($987|0)<(2);
  if (!($988)) {
   break;
  }
  $989 = $i129;
  $990 = (($22) + 1412|0);
  $991 = (($990) + ($989<<2)|0);
  HEAPF32[$991>>2] = 0.0;
  $992 = $i129;
  $993 = (($992) + 1)|0;
  $i129 = $993;
 }
 $i130 = 0;
 while(1) {
  $994 = $i130;
  $995 = ($994|0)<(3);
  if (!($995)) {
   break;
  }
  $996 = $i130;
  $997 = (($22) + 1420|0);
  $998 = (($997) + ($996<<2)|0);
  HEAPF32[$998>>2] = 0.0;
  $999 = $i130;
  $1000 = (($999) + 1)|0;
  $i130 = $1000;
 }
 $i131 = 0;
 while(1) {
  $1001 = $i131;
  $1002 = ($1001|0)<(3);
  if (!($1002)) {
   break;
  }
  $1003 = $i131;
  $1004 = (($22) + 1432|0);
  $1005 = (($1004) + ($1003<<2)|0);
  HEAPF32[$1005>>2] = 0.0;
  $1006 = $i131;
  $1007 = (($1006) + 1)|0;
  $i131 = $1007;
 }
 $i132 = 0;
 while(1) {
  $1008 = $i132;
  $1009 = ($1008|0)<(3);
  if (!($1009)) {
   break;
  }
  $1010 = $i132;
  $1011 = (($22) + 1444|0);
  $1012 = (($1011) + ($1010<<2)|0);
  HEAPF32[$1012>>2] = 0.0;
  $1013 = $i132;
  $1014 = (($1013) + 1)|0;
  $i132 = $1014;
 }
 $i133 = 0;
 while(1) {
  $1015 = $i133;
  $1016 = ($1015|0)<(3);
  if (!($1016)) {
   break;
  }
  $1017 = $i133;
  $1018 = (($22) + 1456|0);
  $1019 = (($1018) + ($1017<<2)|0);
  HEAPF32[$1019>>2] = 0.0;
  $1020 = $i133;
  $1021 = (($1020) + 1)|0;
  $i133 = $1021;
 }
 $i134 = 0;
 while(1) {
  $1022 = $i134;
  $1023 = ($1022|0)<(2);
  if (!($1023)) {
   break;
  }
  $1024 = $i134;
  $1025 = (($22) + 1468|0);
  $1026 = (($1025) + ($1024<<2)|0);
  HEAPF32[$1026>>2] = 0.0;
  $1027 = $i134;
  $1028 = (($1027) + 1)|0;
  $i134 = $1028;
 }
 $i135 = 0;
 while(1) {
  $1029 = $i135;
  $1030 = ($1029|0)<(3);
  if (!($1030)) {
   break;
  }
  $1031 = $i135;
  $1032 = (($22) + 1476|0);
  $1033 = (($1032) + ($1031<<2)|0);
  HEAPF32[$1033>>2] = 0.0;
  $1034 = $i135;
  $1035 = (($1034) + 1)|0;
  $i135 = $1035;
 }
 $i136 = 0;
 while(1) {
  $1036 = $i136;
  $1037 = ($1036|0)<(2);
  if (!($1037)) {
   break;
  }
  $1038 = $i136;
  $1039 = (($22) + 1488|0);
  $1040 = (($1039) + ($1038<<2)|0);
  HEAPF32[$1040>>2] = 0.0;
  $1041 = $i136;
  $1042 = (($1041) + 1)|0;
  $i136 = $1042;
 }
 $i137 = 0;
 while(1) {
  $1043 = $i137;
  $1044 = ($1043|0)<(2);
  if (!($1044)) {
   break;
  }
  $1045 = $i137;
  $1046 = (($22) + 1496|0);
  $1047 = (($1046) + ($1045<<2)|0);
  HEAPF32[$1047>>2] = 0.0;
  $1048 = $i137;
  $1049 = (($1048) + 1)|0;
  $i137 = $1049;
 }
 $i138 = 0;
 while(1) {
  $1050 = $i138;
  $1051 = ($1050|0)<(3);
  if (!($1051)) {
   break;
  }
  $1052 = $i138;
  $1053 = (($22) + 1504|0);
  $1054 = (($1053) + ($1052<<2)|0);
  HEAPF32[$1054>>2] = 0.0;
  $1055 = $i138;
  $1056 = (($1055) + 1)|0;
  $i138 = $1056;
 }
 $i139 = 0;
 while(1) {
  $1057 = $i139;
  $1058 = ($1057|0)<(3);
  if (!($1058)) {
   break;
  }
  $1059 = $i139;
  $1060 = (($22) + 1516|0);
  $1061 = (($1060) + ($1059<<2)|0);
  HEAPF32[$1061>>2] = 0.0;
  $1062 = $i139;
  $1063 = (($1062) + 1)|0;
  $i139 = $1063;
 }
 $i140 = 0;
 while(1) {
  $1064 = $i140;
  $1065 = ($1064|0)<(3);
  if (!($1065)) {
   break;
  }
  $1066 = $i140;
  $1067 = (($22) + 1528|0);
  $1068 = (($1067) + ($1066<<2)|0);
  HEAPF32[$1068>>2] = 0.0;
  $1069 = $i140;
  $1070 = (($1069) + 1)|0;
  $i140 = $1070;
 }
 $i141 = 0;
 while(1) {
  $1071 = $i141;
  $1072 = ($1071|0)<(2);
  if (!($1072)) {
   break;
  }
  $1073 = $i141;
  $1074 = (($22) + 1540|0);
  $1075 = (($1074) + ($1073<<2)|0);
  HEAPF32[$1075>>2] = 0.0;
  $1076 = $i141;
  $1077 = (($1076) + 1)|0;
  $i141 = $1077;
 }
 $i142 = 0;
 while(1) {
  $1078 = $i142;
  $1079 = ($1078|0)<(3);
  if (!($1079)) {
   break;
  }
  $1080 = $i142;
  $1081 = (($22) + 1548|0);
  $1082 = (($1081) + ($1080<<2)|0);
  HEAPF32[$1082>>2] = 0.0;
  $1083 = $i142;
  $1084 = (($1083) + 1)|0;
  $i142 = $1084;
 }
 $i143 = 0;
 while(1) {
  $1085 = $i143;
  $1086 = ($1085|0)<(2);
  if (!($1086)) {
   break;
  }
  $1087 = $i143;
  $1088 = (($22) + 1560|0);
  $1089 = (($1088) + ($1087<<2)|0);
  HEAPF32[$1089>>2] = 0.0;
  $1090 = $i143;
  $1091 = (($1090) + 1)|0;
  $i143 = $1091;
 }
 $i144 = 0;
 while(1) {
  $1092 = $i144;
  $1093 = ($1092|0)<(2);
  if (!($1093)) {
   break;
  }
  $1094 = $i144;
  $1095 = (($22) + 1568|0);
  $1096 = (($1095) + ($1094<<2)|0);
  HEAPF32[$1096>>2] = 0.0;
  $1097 = $i144;
  $1098 = (($1097) + 1)|0;
  $i144 = $1098;
 }
 $i145 = 0;
 while(1) {
  $1099 = $i145;
  $1100 = ($1099|0)<(3);
  if (!($1100)) {
   break;
  }
  $1101 = $i145;
  $1102 = (($22) + 1576|0);
  $1103 = (($1102) + ($1101<<2)|0);
  HEAPF32[$1103>>2] = 0.0;
  $1104 = $i145;
  $1105 = (($1104) + 1)|0;
  $i145 = $1105;
 }
 $i146 = 0;
 while(1) {
  $1106 = $i146;
  $1107 = ($1106|0)<(3);
  if (!($1107)) {
   break;
  }
  $1108 = $i146;
  $1109 = (($22) + 1588|0);
  $1110 = (($1109) + ($1108<<2)|0);
  HEAPF32[$1110>>2] = 0.0;
  $1111 = $i146;
  $1112 = (($1111) + 1)|0;
  $i146 = $1112;
 }
 $i147 = 0;
 while(1) {
  $1113 = $i147;
  $1114 = ($1113|0)<(2);
  if (!($1114)) {
   break;
  }
  $1115 = $i147;
  $1116 = (($22) + 1600|0);
  $1117 = (($1116) + ($1115<<2)|0);
  HEAPF32[$1117>>2] = 0.0;
  $1118 = $i147;
  $1119 = (($1118) + 1)|0;
  $i147 = $1119;
 }
 $i148 = 0;
 while(1) {
  $1120 = $i148;
  $1121 = ($1120|0)<(3);
  if (!($1121)) {
   break;
  }
  $1122 = $i148;
  $1123 = (($22) + 1608|0);
  $1124 = (($1123) + ($1122<<2)|0);
  HEAPF32[$1124>>2] = 0.0;
  $1125 = $i148;
  $1126 = (($1125) + 1)|0;
  $i148 = $1126;
 }
 $i149 = 0;
 while(1) {
  $1127 = $i149;
  $1128 = ($1127|0)<(2);
  if (!($1128)) {
   break;
  }
  $1129 = $i149;
  $1130 = (($22) + 1620|0);
  $1131 = (($1130) + ($1129<<2)|0);
  HEAPF32[$1131>>2] = 0.0;
  $1132 = $i149;
  $1133 = (($1132) + 1)|0;
  $i149 = $1133;
 }
 $i150 = 0;
 while(1) {
  $1134 = $i150;
  $1135 = ($1134|0)<(2);
  if (!($1135)) {
   break;
  }
  $1136 = $i150;
  $1137 = (($22) + 1628|0);
  $1138 = (($1137) + ($1136<<2)|0);
  HEAPF32[$1138>>2] = 0.0;
  $1139 = $i150;
  $1140 = (($1139) + 1)|0;
  $i150 = $1140;
 }
 $i151 = 0;
 while(1) {
  $1141 = $i151;
  $1142 = ($1141|0)<(3);
  if (!($1142)) {
   break;
  }
  $1143 = $i151;
  $1144 = (($22) + 1636|0);
  $1145 = (($1144) + ($1143<<2)|0);
  HEAPF32[$1145>>2] = 0.0;
  $1146 = $i151;
  $1147 = (($1146) + 1)|0;
  $i151 = $1147;
 }
 $i152 = 0;
 while(1) {
  $1148 = $i152;
  $1149 = ($1148|0)<(2);
  if (!($1149)) {
   break;
  }
  $1150 = $i152;
  $1151 = (($22) + 1648|0);
  $1152 = (($1151) + ($1150<<2)|0);
  HEAPF32[$1152>>2] = 0.0;
  $1153 = $i152;
  $1154 = (($1153) + 1)|0;
  $i152 = $1154;
 }
 $i153 = 0;
 while(1) {
  $1155 = $i153;
  $1156 = ($1155|0)<(3);
  if (!($1156)) {
   break;
  }
  $1157 = $i153;
  $1158 = (($22) + 1656|0);
  $1159 = (($1158) + ($1157<<2)|0);
  HEAPF32[$1159>>2] = 0.0;
  $1160 = $i153;
  $1161 = (($1160) + 1)|0;
  $i153 = $1161;
 }
 $i154 = 0;
 while(1) {
  $1162 = $i154;
  $1163 = ($1162|0)<(2);
  if (!($1163)) {
   break;
  }
  $1164 = $i154;
  $1165 = (($22) + 1668|0);
  $1166 = (($1165) + ($1164<<2)|0);
  HEAPF32[$1166>>2] = 0.0;
  $1167 = $i154;
  $1168 = (($1167) + 1)|0;
  $i154 = $1168;
 }
 $i155 = 0;
 while(1) {
  $1169 = $i155;
  $1170 = ($1169|0)<(3);
  if (!($1170)) {
   break;
  }
  $1171 = $i155;
  $1172 = (($22) + 1676|0);
  $1173 = (($1172) + ($1171<<2)|0);
  HEAPF32[$1173>>2] = 0.0;
  $1174 = $i155;
  $1175 = (($1174) + 1)|0;
  $i155 = $1175;
 }
 $i156 = 0;
 while(1) {
  $1176 = $i156;
  $1177 = ($1176|0)<(3);
  if (!($1177)) {
   break;
  }
  $1178 = $i156;
  $1179 = (($22) + 1688|0);
  $1180 = (($1179) + ($1178<<2)|0);
  HEAPF32[$1180>>2] = 0.0;
  $1181 = $i156;
  $1182 = (($1181) + 1)|0;
  $i156 = $1182;
 }
 $i157 = 0;
 while(1) {
  $1183 = $i157;
  $1184 = ($1183|0)<(3);
  if (!($1184)) {
   break;
  }
  $1185 = $i157;
  $1186 = (($22) + 1700|0);
  $1187 = (($1186) + ($1185<<2)|0);
  HEAPF32[$1187>>2] = 0.0;
  $1188 = $i157;
  $1189 = (($1188) + 1)|0;
  $i157 = $1189;
 }
 $i158 = 0;
 while(1) {
  $1190 = $i158;
  $1191 = ($1190|0)<(3);
  if (!($1191)) {
   break;
  }
  $1192 = $i158;
  $1193 = (($22) + 1712|0);
  $1194 = (($1193) + ($1192<<2)|0);
  HEAPF32[$1194>>2] = 0.0;
  $1195 = $i158;
  $1196 = (($1195) + 1)|0;
  $i158 = $1196;
 }
 $i159 = 0;
 while(1) {
  $1197 = $i159;
  $1198 = ($1197|0)<(2);
  if (!($1198)) {
   break;
  }
  $1199 = $i159;
  $1200 = (($22) + 1724|0);
  $1201 = (($1200) + ($1199<<2)|0);
  HEAPF32[$1201>>2] = 0.0;
  $1202 = $i159;
  $1203 = (($1202) + 1)|0;
  $i159 = $1203;
 }
 $i160 = 0;
 while(1) {
  $1204 = $i160;
  $1205 = ($1204|0)<(3);
  if (!($1205)) {
   break;
  }
  $1206 = $i160;
  $1207 = (($22) + 1732|0);
  $1208 = (($1207) + ($1206<<2)|0);
  HEAPF32[$1208>>2] = 0.0;
  $1209 = $i160;
  $1210 = (($1209) + 1)|0;
  $i160 = $1210;
 }
 $i161 = 0;
 while(1) {
  $1211 = $i161;
  $1212 = ($1211|0)<(2);
  if (!($1212)) {
   break;
  }
  $1213 = $i161;
  $1214 = (($22) + 1744|0);
  $1215 = (($1214) + ($1213<<2)|0);
  HEAPF32[$1215>>2] = 0.0;
  $1216 = $i161;
  $1217 = (($1216) + 1)|0;
  $i161 = $1217;
 }
 $i162 = 0;
 while(1) {
  $1218 = $i162;
  $1219 = ($1218|0)<(2);
  if (!($1219)) {
   break;
  }
  $1220 = $i162;
  $1221 = (($22) + 1752|0);
  $1222 = (($1221) + ($1220<<2)|0);
  HEAPF32[$1222>>2] = 0.0;
  $1223 = $i162;
  $1224 = (($1223) + 1)|0;
  $i162 = $1224;
 }
 $i163 = 0;
 while(1) {
  $1225 = $i163;
  $1226 = ($1225|0)<(3);
  if (!($1226)) {
   break;
  }
  $1227 = $i163;
  $1228 = (($22) + 1760|0);
  $1229 = (($1228) + ($1227<<2)|0);
  HEAPF32[$1229>>2] = 0.0;
  $1230 = $i163;
  $1231 = (($1230) + 1)|0;
  $i163 = $1231;
 }
 $i164 = 0;
 while(1) {
  $1232 = $i164;
  $1233 = ($1232|0)<(3);
  if (!($1233)) {
   break;
  }
  $1234 = $i164;
  $1235 = (($22) + 1772|0);
  $1236 = (($1235) + ($1234<<2)|0);
  HEAPF32[$1236>>2] = 0.0;
  $1237 = $i164;
  $1238 = (($1237) + 1)|0;
  $i164 = $1238;
 }
 $i165 = 0;
 while(1) {
  $1239 = $i165;
  $1240 = ($1239|0)<(3);
  if (!($1240)) {
   break;
  }
  $1241 = $i165;
  $1242 = (($22) + 1784|0);
  $1243 = (($1242) + ($1241<<2)|0);
  HEAPF32[$1243>>2] = 0.0;
  $1244 = $i165;
  $1245 = (($1244) + 1)|0;
  $i165 = $1245;
 }
 $i166 = 0;
 while(1) {
  $1246 = $i166;
  $1247 = ($1246|0)<(2);
  if (!($1247)) {
   break;
  }
  $1248 = $i166;
  $1249 = (($22) + 1796|0);
  $1250 = (($1249) + ($1248<<2)|0);
  HEAPF32[$1250>>2] = 0.0;
  $1251 = $i166;
  $1252 = (($1251) + 1)|0;
  $i166 = $1252;
 }
 $i167 = 0;
 while(1) {
  $1253 = $i167;
  $1254 = ($1253|0)<(3);
  if (!($1254)) {
   break;
  }
  $1255 = $i167;
  $1256 = (($22) + 1804|0);
  $1257 = (($1256) + ($1255<<2)|0);
  HEAPF32[$1257>>2] = 0.0;
  $1258 = $i167;
  $1259 = (($1258) + 1)|0;
  $i167 = $1259;
 }
 $i168 = 0;
 while(1) {
  $1260 = $i168;
  $1261 = ($1260|0)<(2);
  if (!($1261)) {
   break;
  }
  $1262 = $i168;
  $1263 = (($22) + 1816|0);
  $1264 = (($1263) + ($1262<<2)|0);
  HEAPF32[$1264>>2] = 0.0;
  $1265 = $i168;
  $1266 = (($1265) + 1)|0;
  $i168 = $1266;
 }
 $i169 = 0;
 while(1) {
  $1267 = $i169;
  $1268 = ($1267|0)<(2);
  if (!($1268)) {
   break;
  }
  $1269 = $i169;
  $1270 = (($22) + 1824|0);
  $1271 = (($1270) + ($1269<<2)|0);
  HEAPF32[$1271>>2] = 0.0;
  $1272 = $i169;
  $1273 = (($1272) + 1)|0;
  $i169 = $1273;
 }
 $i170 = 0;
 while(1) {
  $1274 = $i170;
  $1275 = ($1274|0)<(3);
  if (!($1275)) {
   break;
  }
  $1276 = $i170;
  $1277 = (($22) + 1832|0);
  $1278 = (($1277) + ($1276<<2)|0);
  HEAPF32[$1278>>2] = 0.0;
  $1279 = $i170;
  $1280 = (($1279) + 1)|0;
  $i170 = $1280;
 }
 $i171 = 0;
 while(1) {
  $1281 = $i171;
  $1282 = ($1281|0)<(3);
  if (!($1282)) {
   break;
  }
  $1283 = $i171;
  $1284 = (($22) + 1844|0);
  $1285 = (($1284) + ($1283<<2)|0);
  HEAPF32[$1285>>2] = 0.0;
  $1286 = $i171;
  $1287 = (($1286) + 1)|0;
  $i171 = $1287;
 }
 $i172 = 0;
 while(1) {
  $1288 = $i172;
  $1289 = ($1288|0)<(2);
  if (!($1289)) {
   break;
  }
  $1290 = $i172;
  $1291 = (($22) + 1856|0);
  $1292 = (($1291) + ($1290<<2)|0);
  HEAPF32[$1292>>2] = 0.0;
  $1293 = $i172;
  $1294 = (($1293) + 1)|0;
  $i172 = $1294;
 }
 $i173 = 0;
 while(1) {
  $1295 = $i173;
  $1296 = ($1295|0)<(3);
  if (!($1296)) {
   break;
  }
  $1297 = $i173;
  $1298 = (($22) + 1864|0);
  $1299 = (($1298) + ($1297<<2)|0);
  HEAPF32[$1299>>2] = 0.0;
  $1300 = $i173;
  $1301 = (($1300) + 1)|0;
  $i173 = $1301;
 }
 $i174 = 0;
 while(1) {
  $1302 = $i174;
  $1303 = ($1302|0)<(2);
  if (!($1303)) {
   break;
  }
  $1304 = $i174;
  $1305 = (($22) + 1876|0);
  $1306 = (($1305) + ($1304<<2)|0);
  HEAPF32[$1306>>2] = 0.0;
  $1307 = $i174;
  $1308 = (($1307) + 1)|0;
  $i174 = $1308;
 }
 $i175 = 0;
 while(1) {
  $1309 = $i175;
  $1310 = ($1309|0)<(2);
  if (!($1310)) {
   break;
  }
  $1311 = $i175;
  $1312 = (($22) + 1884|0);
  $1313 = (($1312) + ($1311<<2)|0);
  HEAPF32[$1313>>2] = 0.0;
  $1314 = $i175;
  $1315 = (($1314) + 1)|0;
  $i175 = $1315;
 }
 $i176 = 0;
 while(1) {
  $1316 = $i176;
  $1317 = ($1316|0)<(3);
  if (!($1317)) {
   break;
  }
  $1318 = $i176;
  $1319 = (($22) + 1892|0);
  $1320 = (($1319) + ($1318<<2)|0);
  HEAPF32[$1320>>2] = 0.0;
  $1321 = $i176;
  $1322 = (($1321) + 1)|0;
  $i176 = $1322;
 }
 $i177 = 0;
 while(1) {
  $1323 = $i177;
  $1324 = ($1323|0)<(2);
  if (!($1324)) {
   break;
  }
  $1325 = $i177;
  $1326 = (($22) + 1904|0);
  $1327 = (($1326) + ($1325<<2)|0);
  HEAPF32[$1327>>2] = 0.0;
  $1328 = $i177;
  $1329 = (($1328) + 1)|0;
  $i177 = $1329;
 }
 $i178 = 0;
 while(1) {
  $1330 = $i178;
  $1331 = ($1330|0)<(3);
  if (!($1331)) {
   break;
  }
  $1332 = $i178;
  $1333 = (($22) + 1912|0);
  $1334 = (($1333) + ($1332<<2)|0);
  HEAPF32[$1334>>2] = 0.0;
  $1335 = $i178;
  $1336 = (($1335) + 1)|0;
  $i178 = $1336;
 }
 $i179 = 0;
 while(1) {
  $1337 = $i179;
  $1338 = ($1337|0)<(2);
  if (!($1338)) {
   break;
  }
  $1339 = $i179;
  $1340 = (($22) + 1924|0);
  $1341 = (($1340) + ($1339<<2)|0);
  HEAPF32[$1341>>2] = 0.0;
  $1342 = $i179;
  $1343 = (($1342) + 1)|0;
  $i179 = $1343;
 }
 $i180 = 0;
 while(1) {
  $1344 = $i180;
  $1345 = ($1344|0)<(3);
  if (!($1345)) {
   break;
  }
  $1346 = $i180;
  $1347 = (($22) + 1932|0);
  $1348 = (($1347) + ($1346<<2)|0);
  HEAPF32[$1348>>2] = 0.0;
  $1349 = $i180;
  $1350 = (($1349) + 1)|0;
  $i180 = $1350;
 }
 $i181 = 0;
 while(1) {
  $1351 = $i181;
  $1352 = ($1351|0)<(3);
  if (!($1352)) {
   break;
  }
  $1353 = $i181;
  $1354 = (($22) + 1944|0);
  $1355 = (($1354) + ($1353<<2)|0);
  HEAPF32[$1355>>2] = 0.0;
  $1356 = $i181;
  $1357 = (($1356) + 1)|0;
  $i181 = $1357;
 }
 $i182 = 0;
 while(1) {
  $1358 = $i182;
  $1359 = ($1358|0)<(3);
  if (!($1359)) {
   break;
  }
  $1360 = $i182;
  $1361 = (($22) + 1956|0);
  $1362 = (($1361) + ($1360<<2)|0);
  HEAPF32[$1362>>2] = 0.0;
  $1363 = $i182;
  $1364 = (($1363) + 1)|0;
  $i182 = $1364;
 }
 $i183 = 0;
 while(1) {
  $1365 = $i183;
  $1366 = ($1365|0)<(3);
  if (!($1366)) {
   break;
  }
  $1367 = $i183;
  $1368 = (($22) + 1968|0);
  $1369 = (($1368) + ($1367<<2)|0);
  HEAPF32[$1369>>2] = 0.0;
  $1370 = $i183;
  $1371 = (($1370) + 1)|0;
  $i183 = $1371;
 }
 $i184 = 0;
 while(1) {
  $1372 = $i184;
  $1373 = ($1372|0)<(2);
  if (!($1373)) {
   break;
  }
  $1374 = $i184;
  $1375 = (($22) + 1980|0);
  $1376 = (($1375) + ($1374<<2)|0);
  HEAPF32[$1376>>2] = 0.0;
  $1377 = $i184;
  $1378 = (($1377) + 1)|0;
  $i184 = $1378;
 }
 $i185 = 0;
 while(1) {
  $1379 = $i185;
  $1380 = ($1379|0)<(3);
  if (!($1380)) {
   break;
  }
  $1381 = $i185;
  $1382 = (($22) + 1988|0);
  $1383 = (($1382) + ($1381<<2)|0);
  HEAPF32[$1383>>2] = 0.0;
  $1384 = $i185;
  $1385 = (($1384) + 1)|0;
  $i185 = $1385;
 }
 $i186 = 0;
 while(1) {
  $1386 = $i186;
  $1387 = ($1386|0)<(2);
  if (!($1387)) {
   break;
  }
  $1388 = $i186;
  $1389 = (($22) + 2000|0);
  $1390 = (($1389) + ($1388<<2)|0);
  HEAPF32[$1390>>2] = 0.0;
  $1391 = $i186;
  $1392 = (($1391) + 1)|0;
  $i186 = $1392;
 }
 $i187 = 0;
 while(1) {
  $1393 = $i187;
  $1394 = ($1393|0)<(2);
  if (!($1394)) {
   break;
  }
  $1395 = $i187;
  $1396 = (($22) + 2008|0);
  $1397 = (($1396) + ($1395<<2)|0);
  HEAPF32[$1397>>2] = 0.0;
  $1398 = $i187;
  $1399 = (($1398) + 1)|0;
  $i187 = $1399;
 }
 $i188 = 0;
 while(1) {
  $1400 = $i188;
  $1401 = ($1400|0)<(3);
  if (!($1401)) {
   break;
  }
  $1402 = $i188;
  $1403 = (($22) + 2016|0);
  $1404 = (($1403) + ($1402<<2)|0);
  HEAPF32[$1404>>2] = 0.0;
  $1405 = $i188;
  $1406 = (($1405) + 1)|0;
  $i188 = $1406;
 }
 $i189 = 0;
 while(1) {
  $1407 = $i189;
  $1408 = ($1407|0)<(3);
  if (!($1408)) {
   break;
  }
  $1409 = $i189;
  $1410 = (($22) + 2028|0);
  $1411 = (($1410) + ($1409<<2)|0);
  HEAPF32[$1411>>2] = 0.0;
  $1412 = $i189;
  $1413 = (($1412) + 1)|0;
  $i189 = $1413;
 }
 $i190 = 0;
 while(1) {
  $1414 = $i190;
  $1415 = ($1414|0)<(3);
  if (!($1415)) {
   break;
  }
  $1416 = $i190;
  $1417 = (($22) + 2040|0);
  $1418 = (($1417) + ($1416<<2)|0);
  HEAPF32[$1418>>2] = 0.0;
  $1419 = $i190;
  $1420 = (($1419) + 1)|0;
  $i190 = $1420;
 }
 $i191 = 0;
 while(1) {
  $1421 = $i191;
  $1422 = ($1421|0)<(2);
  if (!($1422)) {
   break;
  }
  $1423 = $i191;
  $1424 = (($22) + 2052|0);
  $1425 = (($1424) + ($1423<<2)|0);
  HEAPF32[$1425>>2] = 0.0;
  $1426 = $i191;
  $1427 = (($1426) + 1)|0;
  $i191 = $1427;
 }
 $i192 = 0;
 while(1) {
  $1428 = $i192;
  $1429 = ($1428|0)<(3);
  if (!($1429)) {
   break;
  }
  $1430 = $i192;
  $1431 = (($22) + 2060|0);
  $1432 = (($1431) + ($1430<<2)|0);
  HEAPF32[$1432>>2] = 0.0;
  $1433 = $i192;
  $1434 = (($1433) + 1)|0;
  $i192 = $1434;
 }
 $i193 = 0;
 while(1) {
  $1435 = $i193;
  $1436 = ($1435|0)<(2);
  if (!($1436)) {
   break;
  }
  $1437 = $i193;
  $1438 = (($22) + 2072|0);
  $1439 = (($1438) + ($1437<<2)|0);
  HEAPF32[$1439>>2] = 0.0;
  $1440 = $i193;
  $1441 = (($1440) + 1)|0;
  $i193 = $1441;
 }
 $i194 = 0;
 while(1) {
  $1442 = $i194;
  $1443 = ($1442|0)<(2);
  if (!($1443)) {
   break;
  }
  $1444 = $i194;
  $1445 = (($22) + 2080|0);
  $1446 = (($1445) + ($1444<<2)|0);
  HEAPF32[$1446>>2] = 0.0;
  $1447 = $i194;
  $1448 = (($1447) + 1)|0;
  $i194 = $1448;
 }
 $i195 = 0;
 while(1) {
  $1449 = $i195;
  $1450 = ($1449|0)<(3);
  if (!($1450)) {
   break;
  }
  $1451 = $i195;
  $1452 = (($22) + 2088|0);
  $1453 = (($1452) + ($1451<<2)|0);
  HEAPF32[$1453>>2] = 0.0;
  $1454 = $i195;
  $1455 = (($1454) + 1)|0;
  $i195 = $1455;
 }
 $i196 = 0;
 while(1) {
  $1456 = $i196;
  $1457 = ($1456|0)<(3);
  if (!($1457)) {
   break;
  }
  $1458 = $i196;
  $1459 = (($22) + 2100|0);
  $1460 = (($1459) + ($1458<<2)|0);
  HEAPF32[$1460>>2] = 0.0;
  $1461 = $i196;
  $1462 = (($1461) + 1)|0;
  $i196 = $1462;
 }
 $i197 = 0;
 while(1) {
  $1463 = $i197;
  $1464 = ($1463|0)<(2);
  if (!($1464)) {
   break;
  }
  $1465 = $i197;
  $1466 = (($22) + 2112|0);
  $1467 = (($1466) + ($1465<<2)|0);
  HEAPF32[$1467>>2] = 0.0;
  $1468 = $i197;
  $1469 = (($1468) + 1)|0;
  $i197 = $1469;
 }
 $i198 = 0;
 while(1) {
  $1470 = $i198;
  $1471 = ($1470|0)<(3);
  if (!($1471)) {
   break;
  }
  $1472 = $i198;
  $1473 = (($22) + 2120|0);
  $1474 = (($1473) + ($1472<<2)|0);
  HEAPF32[$1474>>2] = 0.0;
  $1475 = $i198;
  $1476 = (($1475) + 1)|0;
  $i198 = $1476;
 }
 $i199 = 0;
 while(1) {
  $1477 = $i199;
  $1478 = ($1477|0)<(2);
  if (!($1478)) {
   break;
  }
  $1479 = $i199;
  $1480 = (($22) + 2132|0);
  $1481 = (($1480) + ($1479<<2)|0);
  HEAPF32[$1481>>2] = 0.0;
  $1482 = $i199;
  $1483 = (($1482) + 1)|0;
  $i199 = $1483;
 }
 $i200 = 0;
 while(1) {
  $1484 = $i200;
  $1485 = ($1484|0)<(2);
  if (!($1485)) {
   break;
  }
  $1486 = $i200;
  $1487 = (($22) + 2140|0);
  $1488 = (($1487) + ($1486<<2)|0);
  HEAPF32[$1488>>2] = 0.0;
  $1489 = $i200;
  $1490 = (($1489) + 1)|0;
  $i200 = $1490;
 }
 $i201 = 0;
 while(1) {
  $1491 = $i201;
  $1492 = ($1491|0)<(3);
  if (!($1492)) {
   break;
  }
  $1493 = $i201;
  $1494 = (($22) + 2148|0);
  $1495 = (($1494) + ($1493<<2)|0);
  HEAPF32[$1495>>2] = 0.0;
  $1496 = $i201;
  $1497 = (($1496) + 1)|0;
  $i201 = $1497;
 }
 $i202 = 0;
 while(1) {
  $1498 = $i202;
  $1499 = ($1498|0)<(2);
  if (!($1499)) {
   break;
  }
  $1500 = $i202;
  $1501 = (($22) + 2160|0);
  $1502 = (($1501) + ($1500<<2)|0);
  HEAPF32[$1502>>2] = 0.0;
  $1503 = $i202;
  $1504 = (($1503) + 1)|0;
  $i202 = $1504;
 }
 $i203 = 0;
 while(1) {
  $1505 = $i203;
  $1506 = ($1505|0)<(3);
  if (!($1506)) {
   break;
  }
  $1507 = $i203;
  $1508 = (($22) + 2168|0);
  $1509 = (($1508) + ($1507<<2)|0);
  HEAPF32[$1509>>2] = 0.0;
  $1510 = $i203;
  $1511 = (($1510) + 1)|0;
  $i203 = $1511;
 }
 $i204 = 0;
 while(1) {
  $1512 = $i204;
  $1513 = ($1512|0)<(2);
  if (!($1513)) {
   break;
  }
  $1514 = $i204;
  $1515 = (($22) + 2180|0);
  $1516 = (($1515) + ($1514<<2)|0);
  HEAPF32[$1516>>2] = 0.0;
  $1517 = $i204;
  $1518 = (($1517) + 1)|0;
  $i204 = $1518;
 }
 $i205 = 0;
 while(1) {
  $1519 = $i205;
  $1520 = ($1519|0)<(3);
  if (!($1520)) {
   break;
  }
  $1521 = $i205;
  $1522 = (($22) + 2188|0);
  $1523 = (($1522) + ($1521<<2)|0);
  HEAPF32[$1523>>2] = 0.0;
  $1524 = $i205;
  $1525 = (($1524) + 1)|0;
  $i205 = $1525;
 }
 $i206 = 0;
 while(1) {
  $1526 = $i206;
  $1527 = ($1526|0)<(3);
  if (!($1527)) {
   break;
  }
  $1528 = $i206;
  $1529 = (($22) + 2200|0);
  $1530 = (($1529) + ($1528<<2)|0);
  HEAPF32[$1530>>2] = 0.0;
  $1531 = $i206;
  $1532 = (($1531) + 1)|0;
  $i206 = $1532;
 }
 $i207 = 0;
 while(1) {
  $1533 = $i207;
  $1534 = ($1533|0)<(3);
  if (!($1534)) {
   break;
  }
  $1535 = $i207;
  $1536 = (($22) + 2212|0);
  $1537 = (($1536) + ($1535<<2)|0);
  HEAPF32[$1537>>2] = 0.0;
  $1538 = $i207;
  $1539 = (($1538) + 1)|0;
  $i207 = $1539;
 }
 $i208 = 0;
 while(1) {
  $1540 = $i208;
  $1541 = ($1540|0)<(3);
  if (!($1541)) {
   break;
  }
  $1542 = $i208;
  $1543 = (($22) + 2224|0);
  $1544 = (($1543) + ($1542<<2)|0);
  HEAPF32[$1544>>2] = 0.0;
  $1545 = $i208;
  $1546 = (($1545) + 1)|0;
  $i208 = $1546;
 }
 $i209 = 0;
 while(1) {
  $1547 = $i209;
  $1548 = ($1547|0)<(2);
  if (!($1548)) {
   break;
  }
  $1549 = $i209;
  $1550 = (($22) + 2236|0);
  $1551 = (($1550) + ($1549<<2)|0);
  HEAPF32[$1551>>2] = 0.0;
  $1552 = $i209;
  $1553 = (($1552) + 1)|0;
  $i209 = $1553;
 }
 $i210 = 0;
 while(1) {
  $1554 = $i210;
  $1555 = ($1554|0)<(3);
  if (!($1555)) {
   break;
  }
  $1556 = $i210;
  $1557 = (($22) + 2244|0);
  $1558 = (($1557) + ($1556<<2)|0);
  HEAPF32[$1558>>2] = 0.0;
  $1559 = $i210;
  $1560 = (($1559) + 1)|0;
  $i210 = $1560;
 }
 $i211 = 0;
 while(1) {
  $1561 = $i211;
  $1562 = ($1561|0)<(2);
  if (!($1562)) {
   break;
  }
  $1563 = $i211;
  $1564 = (($22) + 2256|0);
  $1565 = (($1564) + ($1563<<2)|0);
  HEAPF32[$1565>>2] = 0.0;
  $1566 = $i211;
  $1567 = (($1566) + 1)|0;
  $i211 = $1567;
 }
 $i212 = 0;
 while(1) {
  $1568 = $i212;
  $1569 = ($1568|0)<(2);
  if (!($1569)) {
   break;
  }
  $1570 = $i212;
  $1571 = (($22) + 2264|0);
  $1572 = (($1571) + ($1570<<2)|0);
  HEAPF32[$1572>>2] = 0.0;
  $1573 = $i212;
  $1574 = (($1573) + 1)|0;
  $i212 = $1574;
 }
 $i213 = 0;
 while(1) {
  $1575 = $i213;
  $1576 = ($1575|0)<(3);
  if (!($1576)) {
   break;
  }
  $1577 = $i213;
  $1578 = (($22) + 2272|0);
  $1579 = (($1578) + ($1577<<2)|0);
  HEAPF32[$1579>>2] = 0.0;
  $1580 = $i213;
  $1581 = (($1580) + 1)|0;
  $i213 = $1581;
 }
 $i214 = 0;
 while(1) {
  $1582 = $i214;
  $1583 = ($1582|0)<(3);
  if (!($1583)) {
   break;
  }
  $1584 = $i214;
  $1585 = (($22) + 2284|0);
  $1586 = (($1585) + ($1584<<2)|0);
  HEAPF32[$1586>>2] = 0.0;
  $1587 = $i214;
  $1588 = (($1587) + 1)|0;
  $i214 = $1588;
 }
 $i215 = 0;
 while(1) {
  $1589 = $i215;
  $1590 = ($1589|0)<(3);
  if (!($1590)) {
   break;
  }
  $1591 = $i215;
  $1592 = (($22) + 2296|0);
  $1593 = (($1592) + ($1591<<2)|0);
  HEAPF32[$1593>>2] = 0.0;
  $1594 = $i215;
  $1595 = (($1594) + 1)|0;
  $i215 = $1595;
 }
 $i216 = 0;
 while(1) {
  $1596 = $i216;
  $1597 = ($1596|0)<(2);
  if (!($1597)) {
   break;
  }
  $1598 = $i216;
  $1599 = (($22) + 2308|0);
  $1600 = (($1599) + ($1598<<2)|0);
  HEAPF32[$1600>>2] = 0.0;
  $1601 = $i216;
  $1602 = (($1601) + 1)|0;
  $i216 = $1602;
 }
 $i217 = 0;
 while(1) {
  $1603 = $i217;
  $1604 = ($1603|0)<(3);
  if (!($1604)) {
   break;
  }
  $1605 = $i217;
  $1606 = (($22) + 2316|0);
  $1607 = (($1606) + ($1605<<2)|0);
  HEAPF32[$1607>>2] = 0.0;
  $1608 = $i217;
  $1609 = (($1608) + 1)|0;
  $i217 = $1609;
 }
 $i218 = 0;
 while(1) {
  $1610 = $i218;
  $1611 = ($1610|0)<(2);
  if (!($1611)) {
   break;
  }
  $1612 = $i218;
  $1613 = (($22) + 2328|0);
  $1614 = (($1613) + ($1612<<2)|0);
  HEAPF32[$1614>>2] = 0.0;
  $1615 = $i218;
  $1616 = (($1615) + 1)|0;
  $i218 = $1616;
 }
 $i219 = 0;
 while(1) {
  $1617 = $i219;
  $1618 = ($1617|0)<(2);
  if (!($1618)) {
   break;
  }
  $1619 = $i219;
  $1620 = (($22) + 2336|0);
  $1621 = (($1620) + ($1619<<2)|0);
  HEAPF32[$1621>>2] = 0.0;
  $1622 = $i219;
  $1623 = (($1622) + 1)|0;
  $i219 = $1623;
 }
 $i220 = 0;
 while(1) {
  $1624 = $i220;
  $1625 = ($1624|0)<(3);
  if (!($1625)) {
   break;
  }
  $1626 = $i220;
  $1627 = (($22) + 2344|0);
  $1628 = (($1627) + ($1626<<2)|0);
  HEAPF32[$1628>>2] = 0.0;
  $1629 = $i220;
  $1630 = (($1629) + 1)|0;
  $i220 = $1630;
 }
 $i221 = 0;
 while(1) {
  $1631 = $i221;
  $1632 = ($1631|0)<(3);
  if (!($1632)) {
   break;
  }
  $1633 = $i221;
  $1634 = (($22) + 2356|0);
  $1635 = (($1634) + ($1633<<2)|0);
  HEAPF32[$1635>>2] = 0.0;
  $1636 = $i221;
  $1637 = (($1636) + 1)|0;
  $i221 = $1637;
 }
 $i222 = 0;
 while(1) {
  $1638 = $i222;
  $1639 = ($1638|0)<(2);
  if (!($1639)) {
   break;
  }
  $1640 = $i222;
  $1641 = (($22) + 2368|0);
  $1642 = (($1641) + ($1640<<2)|0);
  HEAPF32[$1642>>2] = 0.0;
  $1643 = $i222;
  $1644 = (($1643) + 1)|0;
  $i222 = $1644;
 }
 $i223 = 0;
 while(1) {
  $1645 = $i223;
  $1646 = ($1645|0)<(3);
  if (!($1646)) {
   break;
  }
  $1647 = $i223;
  $1648 = (($22) + 2376|0);
  $1649 = (($1648) + ($1647<<2)|0);
  HEAPF32[$1649>>2] = 0.0;
  $1650 = $i223;
  $1651 = (($1650) + 1)|0;
  $i223 = $1651;
 }
 $i224 = 0;
 while(1) {
  $1652 = $i224;
  $1653 = ($1652|0)<(2);
  if (!($1653)) {
   break;
  }
  $1654 = $i224;
  $1655 = (($22) + 2388|0);
  $1656 = (($1655) + ($1654<<2)|0);
  HEAPF32[$1656>>2] = 0.0;
  $1657 = $i224;
  $1658 = (($1657) + 1)|0;
  $i224 = $1658;
 }
 $i225 = 0;
 while(1) {
  $1659 = $i225;
  $1660 = ($1659|0)<(2);
  if (!($1660)) {
   break;
  }
  $1661 = $i225;
  $1662 = (($22) + 2396|0);
  $1663 = (($1662) + ($1661<<2)|0);
  HEAPF32[$1663>>2] = 0.0;
  $1664 = $i225;
  $1665 = (($1664) + 1)|0;
  $i225 = $1665;
 }
 $i226 = 0;
 while(1) {
  $1666 = $i226;
  $1667 = ($1666|0)<(3);
  if (!($1667)) {
   break;
  }
  $1668 = $i226;
  $1669 = (($22) + 2404|0);
  $1670 = (($1669) + ($1668<<2)|0);
  HEAPF32[$1670>>2] = 0.0;
  $1671 = $i226;
  $1672 = (($1671) + 1)|0;
  $i226 = $1672;
 }
 $i227 = 0;
 while(1) {
  $1673 = $i227;
  $1674 = ($1673|0)<(2);
  if (!($1674)) {
   break;
  }
  $1675 = $i227;
  $1676 = (($22) + 2416|0);
  $1677 = (($1676) + ($1675<<2)|0);
  HEAPF32[$1677>>2] = 0.0;
  $1678 = $i227;
  $1679 = (($1678) + 1)|0;
  $i227 = $1679;
 }
 $i228 = 0;
 while(1) {
  $1680 = $i228;
  $1681 = ($1680|0)<(3);
  if (!($1681)) {
   break;
  }
  $1682 = $i228;
  $1683 = (($22) + 2424|0);
  $1684 = (($1683) + ($1682<<2)|0);
  HEAPF32[$1684>>2] = 0.0;
  $1685 = $i228;
  $1686 = (($1685) + 1)|0;
  $i228 = $1686;
 }
 $i229 = 0;
 while(1) {
  $1687 = $i229;
  $1688 = ($1687|0)<(2);
  if (!($1688)) {
   break;
  }
  $1689 = $i229;
  $1690 = (($22) + 2436|0);
  $1691 = (($1690) + ($1689<<2)|0);
  HEAPF32[$1691>>2] = 0.0;
  $1692 = $i229;
  $1693 = (($1692) + 1)|0;
  $i229 = $1693;
 }
 $i230 = 0;
 while(1) {
  $1694 = $i230;
  $1695 = ($1694|0)<(3);
  if (!($1695)) {
   break;
  }
  $1696 = $i230;
  $1697 = (($22) + 2444|0);
  $1698 = (($1697) + ($1696<<2)|0);
  HEAPF32[$1698>>2] = 0.0;
  $1699 = $i230;
  $1700 = (($1699) + 1)|0;
  $i230 = $1700;
 }
 $i231 = 0;
 while(1) {
  $1701 = $i231;
  $1702 = ($1701|0)<(3);
  if (!($1702)) {
   break;
  }
  $1703 = $i231;
  $1704 = (($22) + 2456|0);
  $1705 = (($1704) + ($1703<<2)|0);
  HEAPF32[$1705>>2] = 0.0;
  $1706 = $i231;
  $1707 = (($1706) + 1)|0;
  $i231 = $1707;
 }
 $i232 = 0;
 while(1) {
  $1708 = $i232;
  $1709 = ($1708|0)<(3);
  if (!($1709)) {
   break;
  }
  $1710 = $i232;
  $1711 = (($22) + 2468|0);
  $1712 = (($1711) + ($1710<<2)|0);
  HEAPF32[$1712>>2] = 0.0;
  $1713 = $i232;
  $1714 = (($1713) + 1)|0;
  $i232 = $1714;
 }
 $i233 = 0;
 while(1) {
  $1715 = $i233;
  $1716 = ($1715|0)<(3);
  if (!($1716)) {
   break;
  }
  $1717 = $i233;
  $1718 = (($22) + 2480|0);
  $1719 = (($1718) + ($1717<<2)|0);
  HEAPF32[$1719>>2] = 0.0;
  $1720 = $i233;
  $1721 = (($1720) + 1)|0;
  $i233 = $1721;
 }
 $i234 = 0;
 while(1) {
  $1722 = $i234;
  $1723 = ($1722|0)<(2);
  if (!($1723)) {
   break;
  }
  $1724 = $i234;
  $1725 = (($22) + 2492|0);
  $1726 = (($1725) + ($1724<<2)|0);
  HEAPF32[$1726>>2] = 0.0;
  $1727 = $i234;
  $1728 = (($1727) + 1)|0;
  $i234 = $1728;
 }
 $i235 = 0;
 while(1) {
  $1729 = $i235;
  $1730 = ($1729|0)<(3);
  if (!($1730)) {
   break;
  }
  $1731 = $i235;
  $1732 = (($22) + 2500|0);
  $1733 = (($1732) + ($1731<<2)|0);
  HEAPF32[$1733>>2] = 0.0;
  $1734 = $i235;
  $1735 = (($1734) + 1)|0;
  $i235 = $1735;
 }
 $i236 = 0;
 while(1) {
  $1736 = $i236;
  $1737 = ($1736|0)<(2);
  if (!($1737)) {
   break;
  }
  $1738 = $i236;
  $1739 = (($22) + 2512|0);
  $1740 = (($1739) + ($1738<<2)|0);
  HEAPF32[$1740>>2] = 0.0;
  $1741 = $i236;
  $1742 = (($1741) + 1)|0;
  $i236 = $1742;
 }
 $i237 = 0;
 while(1) {
  $1743 = $i237;
  $1744 = ($1743|0)<(2);
  if (!($1744)) {
   break;
  }
  $1745 = $i237;
  $1746 = (($22) + 2520|0);
  $1747 = (($1746) + ($1745<<2)|0);
  HEAPF32[$1747>>2] = 0.0;
  $1748 = $i237;
  $1749 = (($1748) + 1)|0;
  $i237 = $1749;
 }
 $i238 = 0;
 while(1) {
  $1750 = $i238;
  $1751 = ($1750|0)<(3);
  if (!($1751)) {
   break;
  }
  $1752 = $i238;
  $1753 = (($22) + 2528|0);
  $1754 = (($1753) + ($1752<<2)|0);
  HEAPF32[$1754>>2] = 0.0;
  $1755 = $i238;
  $1756 = (($1755) + 1)|0;
  $i238 = $1756;
 }
 $i239 = 0;
 while(1) {
  $1757 = $i239;
  $1758 = ($1757|0)<(3);
  if (!($1758)) {
   break;
  }
  $1759 = $i239;
  $1760 = (($22) + 2540|0);
  $1761 = (($1760) + ($1759<<2)|0);
  HEAPF32[$1761>>2] = 0.0;
  $1762 = $i239;
  $1763 = (($1762) + 1)|0;
  $i239 = $1763;
 }
 $i240 = 0;
 while(1) {
  $1764 = $i240;
  $1765 = ($1764|0)<(3);
  if (!($1765)) {
   break;
  }
  $1766 = $i240;
  $1767 = (($22) + 2552|0);
  $1768 = (($1767) + ($1766<<2)|0);
  HEAPF32[$1768>>2] = 0.0;
  $1769 = $i240;
  $1770 = (($1769) + 1)|0;
  $i240 = $1770;
 }
 $i241 = 0;
 while(1) {
  $1771 = $i241;
  $1772 = ($1771|0)<(2);
  if (!($1772)) {
   break;
  }
  $1773 = $i241;
  $1774 = (($22) + 2564|0);
  $1775 = (($1774) + ($1773<<2)|0);
  HEAPF32[$1775>>2] = 0.0;
  $1776 = $i241;
  $1777 = (($1776) + 1)|0;
  $i241 = $1777;
 }
 $i242 = 0;
 while(1) {
  $1778 = $i242;
  $1779 = ($1778|0)<(3);
  if (!($1779)) {
   break;
  }
  $1780 = $i242;
  $1781 = (($22) + 2572|0);
  $1782 = (($1781) + ($1780<<2)|0);
  HEAPF32[$1782>>2] = 0.0;
  $1783 = $i242;
  $1784 = (($1783) + 1)|0;
  $i242 = $1784;
 }
 $i243 = 0;
 while(1) {
  $1785 = $i243;
  $1786 = ($1785|0)<(2);
  if (!($1786)) {
   break;
  }
  $1787 = $i243;
  $1788 = (($22) + 2584|0);
  $1789 = (($1788) + ($1787<<2)|0);
  HEAPF32[$1789>>2] = 0.0;
  $1790 = $i243;
  $1791 = (($1790) + 1)|0;
  $i243 = $1791;
 }
 $i244 = 0;
 while(1) {
  $1792 = $i244;
  $1793 = ($1792|0)<(2);
  if (!($1793)) {
   break;
  }
  $1794 = $i244;
  $1795 = (($22) + 2592|0);
  $1796 = (($1795) + ($1794<<2)|0);
  HEAPF32[$1796>>2] = 0.0;
  $1797 = $i244;
  $1798 = (($1797) + 1)|0;
  $i244 = $1798;
 }
 $i245 = 0;
 while(1) {
  $1799 = $i245;
  $1800 = ($1799|0)<(3);
  if (!($1800)) {
   break;
  }
  $1801 = $i245;
  $1802 = (($22) + 2600|0);
  $1803 = (($1802) + ($1801<<2)|0);
  HEAPF32[$1803>>2] = 0.0;
  $1804 = $i245;
  $1805 = (($1804) + 1)|0;
  $i245 = $1805;
 }
 $i246 = 0;
 while(1) {
  $1806 = $i246;
  $1807 = ($1806|0)<(3);
  if (!($1807)) {
   break;
  }
  $1808 = $i246;
  $1809 = (($22) + 2612|0);
  $1810 = (($1809) + ($1808<<2)|0);
  HEAPF32[$1810>>2] = 0.0;
  $1811 = $i246;
  $1812 = (($1811) + 1)|0;
  $i246 = $1812;
 }
 $i247 = 0;
 while(1) {
  $1813 = $i247;
  $1814 = ($1813|0)<(2);
  if (!($1814)) {
   break;
  }
  $1815 = $i247;
  $1816 = (($22) + 2624|0);
  $1817 = (($1816) + ($1815<<2)|0);
  HEAPF32[$1817>>2] = 0.0;
  $1818 = $i247;
  $1819 = (($1818) + 1)|0;
  $i247 = $1819;
 }
 $i248 = 0;
 while(1) {
  $1820 = $i248;
  $1821 = ($1820|0)<(3);
  if (!($1821)) {
   break;
  }
  $1822 = $i248;
  $1823 = (($22) + 2632|0);
  $1824 = (($1823) + ($1822<<2)|0);
  HEAPF32[$1824>>2] = 0.0;
  $1825 = $i248;
  $1826 = (($1825) + 1)|0;
  $i248 = $1826;
 }
 $i249 = 0;
 while(1) {
  $1827 = $i249;
  $1828 = ($1827|0)<(2);
  if (!($1828)) {
   break;
  }
  $1829 = $i249;
  $1830 = (($22) + 2644|0);
  $1831 = (($1830) + ($1829<<2)|0);
  HEAPF32[$1831>>2] = 0.0;
  $1832 = $i249;
  $1833 = (($1832) + 1)|0;
  $i249 = $1833;
 }
 $i250 = 0;
 while(1) {
  $1834 = $i250;
  $1835 = ($1834|0)<(2);
  if (!($1835)) {
   break;
  }
  $1836 = $i250;
  $1837 = (($22) + 2652|0);
  $1838 = (($1837) + ($1836<<2)|0);
  HEAPF32[$1838>>2] = 0.0;
  $1839 = $i250;
  $1840 = (($1839) + 1)|0;
  $i250 = $1840;
 }
 $i251 = 0;
 while(1) {
  $1841 = $i251;
  $1842 = ($1841|0)<(3);
  if (!($1842)) {
   break;
  }
  $1843 = $i251;
  $1844 = (($22) + 2660|0);
  $1845 = (($1844) + ($1843<<2)|0);
  HEAPF32[$1845>>2] = 0.0;
  $1846 = $i251;
  $1847 = (($1846) + 1)|0;
  $i251 = $1847;
 }
 $i252 = 0;
 while(1) {
  $1848 = $i252;
  $1849 = ($1848|0)<(2);
  if (!($1849)) {
   break;
  }
  $1850 = $i252;
  $1851 = (($22) + 2672|0);
  $1852 = (($1851) + ($1850<<2)|0);
  HEAPF32[$1852>>2] = 0.0;
  $1853 = $i252;
  $1854 = (($1853) + 1)|0;
  $i252 = $1854;
 }
 $i253 = 0;
 while(1) {
  $1855 = $i253;
  $1856 = ($1855|0)<(3);
  if (!($1856)) {
   break;
  }
  $1857 = $i253;
  $1858 = (($22) + 2680|0);
  $1859 = (($1858) + ($1857<<2)|0);
  HEAPF32[$1859>>2] = 0.0;
  $1860 = $i253;
  $1861 = (($1860) + 1)|0;
  $i253 = $1861;
 }
 $i254 = 0;
 while(1) {
  $1862 = $i254;
  $1863 = ($1862|0)<(2);
  if (!($1863)) {
   break;
  }
  $1864 = $i254;
  $1865 = (($22) + 2692|0);
  $1866 = (($1865) + ($1864<<2)|0);
  HEAPF32[$1866>>2] = 0.0;
  $1867 = $i254;
  $1868 = (($1867) + 1)|0;
  $i254 = $1868;
 }
 $i255 = 0;
 while(1) {
  $1869 = $i255;
  $1870 = ($1869|0)<(3);
  if (!($1870)) {
   break;
  }
  $1871 = $i255;
  $1872 = (($22) + 2700|0);
  $1873 = (($1872) + ($1871<<2)|0);
  HEAPF32[$1873>>2] = 0.0;
  $1874 = $i255;
  $1875 = (($1874) + 1)|0;
  $i255 = $1875;
 }
 $i256 = 0;
 while(1) {
  $1876 = $i256;
  $1877 = ($1876|0)<(3);
  if (!($1877)) {
   break;
  }
  $1878 = $i256;
  $1879 = (($22) + 2712|0);
  $1880 = (($1879) + ($1878<<2)|0);
  HEAPF32[$1880>>2] = 0.0;
  $1881 = $i256;
  $1882 = (($1881) + 1)|0;
  $i256 = $1882;
 }
 $i257 = 0;
 while(1) {
  $1883 = $i257;
  $1884 = ($1883|0)<(3);
  if (!($1884)) {
   break;
  }
  $1885 = $i257;
  $1886 = (($22) + 2724|0);
  $1887 = (($1886) + ($1885<<2)|0);
  HEAPF32[$1887>>2] = 0.0;
  $1888 = $i257;
  $1889 = (($1888) + 1)|0;
  $i257 = $1889;
 }
 $i258 = 0;
 while(1) {
  $1890 = $i258;
  $1891 = ($1890|0)<(3);
  if (!($1891)) {
   break;
  }
  $1892 = $i258;
  $1893 = (($22) + 2736|0);
  $1894 = (($1893) + ($1892<<2)|0);
  HEAPF32[$1894>>2] = 0.0;
  $1895 = $i258;
  $1896 = (($1895) + 1)|0;
  $i258 = $1896;
 }
 $i259 = 0;
 while(1) {
  $1897 = $i259;
  $1898 = ($1897|0)<(2);
  if (!($1898)) {
   break;
  }
  $1899 = $i259;
  $1900 = (($22) + 2748|0);
  $1901 = (($1900) + ($1899<<2)|0);
  HEAPF32[$1901>>2] = 0.0;
  $1902 = $i259;
  $1903 = (($1902) + 1)|0;
  $i259 = $1903;
 }
 $i260 = 0;
 while(1) {
  $1904 = $i260;
  $1905 = ($1904|0)<(3);
  if (!($1905)) {
   break;
  }
  $1906 = $i260;
  $1907 = (($22) + 2756|0);
  $1908 = (($1907) + ($1906<<2)|0);
  HEAPF32[$1908>>2] = 0.0;
  $1909 = $i260;
  $1910 = (($1909) + 1)|0;
  $i260 = $1910;
 }
 $i261 = 0;
 while(1) {
  $1911 = $i261;
  $1912 = ($1911|0)<(2);
  if (!($1912)) {
   break;
  }
  $1913 = $i261;
  $1914 = (($22) + 2768|0);
  $1915 = (($1914) + ($1913<<2)|0);
  HEAPF32[$1915>>2] = 0.0;
  $1916 = $i261;
  $1917 = (($1916) + 1)|0;
  $i261 = $1917;
 }
 $i262 = 0;
 while(1) {
  $1918 = $i262;
  $1919 = ($1918|0)<(2);
  if (!($1919)) {
   break;
  }
  $1920 = $i262;
  $1921 = (($22) + 2776|0);
  $1922 = (($1921) + ($1920<<2)|0);
  HEAPF32[$1922>>2] = 0.0;
  $1923 = $i262;
  $1924 = (($1923) + 1)|0;
  $i262 = $1924;
 }
 $i263 = 0;
 while(1) {
  $1925 = $i263;
  $1926 = ($1925|0)<(3);
  if (!($1926)) {
   break;
  }
  $1927 = $i263;
  $1928 = (($22) + 2784|0);
  $1929 = (($1928) + ($1927<<2)|0);
  HEAPF32[$1929>>2] = 0.0;
  $1930 = $i263;
  $1931 = (($1930) + 1)|0;
  $i263 = $1931;
 }
 $i264 = 0;
 while(1) {
  $1932 = $i264;
  $1933 = ($1932|0)<(3);
  if (!($1933)) {
   break;
  }
  $1934 = $i264;
  $1935 = (($22) + 2796|0);
  $1936 = (($1935) + ($1934<<2)|0);
  HEAPF32[$1936>>2] = 0.0;
  $1937 = $i264;
  $1938 = (($1937) + 1)|0;
  $i264 = $1938;
 }
 $i265 = 0;
 while(1) {
  $1939 = $i265;
  $1940 = ($1939|0)<(3);
  if (!($1940)) {
   break;
  }
  $1941 = $i265;
  $1942 = (($22) + 2808|0);
  $1943 = (($1942) + ($1941<<2)|0);
  HEAPF32[$1943>>2] = 0.0;
  $1944 = $i265;
  $1945 = (($1944) + 1)|0;
  $i265 = $1945;
 }
 $i266 = 0;
 while(1) {
  $1946 = $i266;
  $1947 = ($1946|0)<(2);
  if (!($1947)) {
   break;
  }
  $1948 = $i266;
  $1949 = (($22) + 2820|0);
  $1950 = (($1949) + ($1948<<2)|0);
  HEAPF32[$1950>>2] = 0.0;
  $1951 = $i266;
  $1952 = (($1951) + 1)|0;
  $i266 = $1952;
 }
 $i267 = 0;
 while(1) {
  $1953 = $i267;
  $1954 = ($1953|0)<(3);
  if (!($1954)) {
   break;
  }
  $1955 = $i267;
  $1956 = (($22) + 2828|0);
  $1957 = (($1956) + ($1955<<2)|0);
  HEAPF32[$1957>>2] = 0.0;
  $1958 = $i267;
  $1959 = (($1958) + 1)|0;
  $i267 = $1959;
 }
 $i268 = 0;
 while(1) {
  $1960 = $i268;
  $1961 = ($1960|0)<(2);
  if (!($1961)) {
   break;
  }
  $1962 = $i268;
  $1963 = (($22) + 2840|0);
  $1964 = (($1963) + ($1962<<2)|0);
  HEAPF32[$1964>>2] = 0.0;
  $1965 = $i268;
  $1966 = (($1965) + 1)|0;
  $i268 = $1966;
 }
 $i269 = 0;
 while(1) {
  $1967 = $i269;
  $1968 = ($1967|0)<(2);
  if (!($1968)) {
   break;
  }
  $1969 = $i269;
  $1970 = (($22) + 2848|0);
  $1971 = (($1970) + ($1969<<2)|0);
  HEAPF32[$1971>>2] = 0.0;
  $1972 = $i269;
  $1973 = (($1972) + 1)|0;
  $i269 = $1973;
 }
 $i270 = 0;
 while(1) {
  $1974 = $i270;
  $1975 = ($1974|0)<(3);
  if (!($1975)) {
   break;
  }
  $1976 = $i270;
  $1977 = (($22) + 2856|0);
  $1978 = (($1977) + ($1976<<2)|0);
  HEAPF32[$1978>>2] = 0.0;
  $1979 = $i270;
  $1980 = (($1979) + 1)|0;
  $i270 = $1980;
 }
 $i271 = 0;
 while(1) {
  $1981 = $i271;
  $1982 = ($1981|0)<(3);
  if (!($1982)) {
   break;
  }
  $1983 = $i271;
  $1984 = (($22) + 2868|0);
  $1985 = (($1984) + ($1983<<2)|0);
  HEAPF32[$1985>>2] = 0.0;
  $1986 = $i271;
  $1987 = (($1986) + 1)|0;
  $i271 = $1987;
 }
 $i272 = 0;
 while(1) {
  $1988 = $i272;
  $1989 = ($1988|0)<(2);
  if (!($1989)) {
   break;
  }
  $1990 = $i272;
  $1991 = (($22) + 2880|0);
  $1992 = (($1991) + ($1990<<2)|0);
  HEAPF32[$1992>>2] = 0.0;
  $1993 = $i272;
  $1994 = (($1993) + 1)|0;
  $i272 = $1994;
 }
 $i273 = 0;
 while(1) {
  $1995 = $i273;
  $1996 = ($1995|0)<(3);
  if (!($1996)) {
   break;
  }
  $1997 = $i273;
  $1998 = (($22) + 2888|0);
  $1999 = (($1998) + ($1997<<2)|0);
  HEAPF32[$1999>>2] = 0.0;
  $2000 = $i273;
  $2001 = (($2000) + 1)|0;
  $i273 = $2001;
 }
 $i274 = 0;
 while(1) {
  $2002 = $i274;
  $2003 = ($2002|0)<(2);
  if (!($2003)) {
   break;
  }
  $2004 = $i274;
  $2005 = (($22) + 2900|0);
  $2006 = (($2005) + ($2004<<2)|0);
  HEAPF32[$2006>>2] = 0.0;
  $2007 = $i274;
  $2008 = (($2007) + 1)|0;
  $i274 = $2008;
 }
 $i275 = 0;
 while(1) {
  $2009 = $i275;
  $2010 = ($2009|0)<(2);
  if (!($2010)) {
   break;
  }
  $2011 = $i275;
  $2012 = (($22) + 2908|0);
  $2013 = (($2012) + ($2011<<2)|0);
  HEAPF32[$2013>>2] = 0.0;
  $2014 = $i275;
  $2015 = (($2014) + 1)|0;
  $i275 = $2015;
 }
 $i276 = 0;
 while(1) {
  $2016 = $i276;
  $2017 = ($2016|0)<(3);
  if (!($2017)) {
   break;
  }
  $2018 = $i276;
  $2019 = (($22) + 2916|0);
  $2020 = (($2019) + ($2018<<2)|0);
  HEAPF32[$2020>>2] = 0.0;
  $2021 = $i276;
  $2022 = (($2021) + 1)|0;
  $i276 = $2022;
 }
 $i277 = 0;
 while(1) {
  $2023 = $i277;
  $2024 = ($2023|0)<(2);
  if (!($2024)) {
   break;
  }
  $2025 = $i277;
  $2026 = (($22) + 2928|0);
  $2027 = (($2026) + ($2025<<2)|0);
  HEAPF32[$2027>>2] = 0.0;
  $2028 = $i277;
  $2029 = (($2028) + 1)|0;
  $i277 = $2029;
 }
 $i278 = 0;
 while(1) {
  $2030 = $i278;
  $2031 = ($2030|0)<(3);
  if (!($2031)) {
   break;
  }
  $2032 = $i278;
  $2033 = (($22) + 2936|0);
  $2034 = (($2033) + ($2032<<2)|0);
  HEAPF32[$2034>>2] = 0.0;
  $2035 = $i278;
  $2036 = (($2035) + 1)|0;
  $i278 = $2036;
 }
 $i279 = 0;
 while(1) {
  $2037 = $i279;
  $2038 = ($2037|0)<(2);
  if (!($2038)) {
   break;
  }
  $2039 = $i279;
  $2040 = (($22) + 2948|0);
  $2041 = (($2040) + ($2039<<2)|0);
  HEAPF32[$2041>>2] = 0.0;
  $2042 = $i279;
  $2043 = (($2042) + 1)|0;
  $i279 = $2043;
 }
 $i280 = 0;
 while(1) {
  $2044 = $i280;
  $2045 = ($2044|0)<(3);
  if (!($2045)) {
   break;
  }
  $2046 = $i280;
  $2047 = (($22) + 2956|0);
  $2048 = (($2047) + ($2046<<2)|0);
  HEAPF32[$2048>>2] = 0.0;
  $2049 = $i280;
  $2050 = (($2049) + 1)|0;
  $i280 = $2050;
 }
 $i281 = 0;
 while(1) {
  $2051 = $i281;
  $2052 = ($2051|0)<(3);
  if (!($2052)) {
   break;
  }
  $2053 = $i281;
  $2054 = (($22) + 2968|0);
  $2055 = (($2054) + ($2053<<2)|0);
  HEAPF32[$2055>>2] = 0.0;
  $2056 = $i281;
  $2057 = (($2056) + 1)|0;
  $i281 = $2057;
 }
 $i282 = 0;
 while(1) {
  $2058 = $i282;
  $2059 = ($2058|0)<(3);
  if (!($2059)) {
   break;
  }
  $2060 = $i282;
  $2061 = (($22) + 2980|0);
  $2062 = (($2061) + ($2060<<2)|0);
  HEAPF32[$2062>>2] = 0.0;
  $2063 = $i282;
  $2064 = (($2063) + 1)|0;
  $i282 = $2064;
 }
 $i283 = 0;
 while(1) {
  $2065 = $i283;
  $2066 = ($2065|0)<(3);
  if (!($2066)) {
   break;
  }
  $2067 = $i283;
  $2068 = (($22) + 2992|0);
  $2069 = (($2068) + ($2067<<2)|0);
  HEAPF32[$2069>>2] = 0.0;
  $2070 = $i283;
  $2071 = (($2070) + 1)|0;
  $i283 = $2071;
 }
 $i284 = 0;
 while(1) {
  $2072 = $i284;
  $2073 = ($2072|0)<(2);
  if (!($2073)) {
   break;
  }
  $2074 = $i284;
  $2075 = (($22) + 3004|0);
  $2076 = (($2075) + ($2074<<2)|0);
  HEAPF32[$2076>>2] = 0.0;
  $2077 = $i284;
  $2078 = (($2077) + 1)|0;
  $i284 = $2078;
 }
 $i285 = 0;
 while(1) {
  $2079 = $i285;
  $2080 = ($2079|0)<(3);
  if (!($2080)) {
   break;
  }
  $2081 = $i285;
  $2082 = (($22) + 3012|0);
  $2083 = (($2082) + ($2081<<2)|0);
  HEAPF32[$2083>>2] = 0.0;
  $2084 = $i285;
  $2085 = (($2084) + 1)|0;
  $i285 = $2085;
 }
 $i286 = 0;
 while(1) {
  $2086 = $i286;
  $2087 = ($2086|0)<(2);
  if (!($2087)) {
   break;
  }
  $2088 = $i286;
  $2089 = (($22) + 3024|0);
  $2090 = (($2089) + ($2088<<2)|0);
  HEAPF32[$2090>>2] = 0.0;
  $2091 = $i286;
  $2092 = (($2091) + 1)|0;
  $i286 = $2092;
 }
 $i287 = 0;
 while(1) {
  $2093 = $i287;
  $2094 = ($2093|0)<(2);
  if (!($2094)) {
   break;
  }
  $2095 = $i287;
  $2096 = (($22) + 3032|0);
  $2097 = (($2096) + ($2095<<2)|0);
  HEAPF32[$2097>>2] = 0.0;
  $2098 = $i287;
  $2099 = (($2098) + 1)|0;
  $i287 = $2099;
 }
 $i288 = 0;
 while(1) {
  $2100 = $i288;
  $2101 = ($2100|0)<(3);
  if (!($2101)) {
   break;
  }
  $2102 = $i288;
  $2103 = (($22) + 3040|0);
  $2104 = (($2103) + ($2102<<2)|0);
  HEAPF32[$2104>>2] = 0.0;
  $2105 = $i288;
  $2106 = (($2105) + 1)|0;
  $i288 = $2106;
 }
 $i289 = 0;
 while(1) {
  $2107 = $i289;
  $2108 = ($2107|0)<(3);
  if (!($2108)) {
   break;
  }
  $2109 = $i289;
  $2110 = (($22) + 3052|0);
  $2111 = (($2110) + ($2109<<2)|0);
  HEAPF32[$2111>>2] = 0.0;
  $2112 = $i289;
  $2113 = (($2112) + 1)|0;
  $i289 = $2113;
 }
 $i290 = 0;
 while(1) {
  $2114 = $i290;
  $2115 = ($2114|0)<(3);
  if (!($2115)) {
   break;
  }
  $2116 = $i290;
  $2117 = (($22) + 3064|0);
  $2118 = (($2117) + ($2116<<2)|0);
  HEAPF32[$2118>>2] = 0.0;
  $2119 = $i290;
  $2120 = (($2119) + 1)|0;
  $i290 = $2120;
 }
 $i291 = 0;
 while(1) {
  $2121 = $i291;
  $2122 = ($2121|0)<(2);
  if (!($2122)) {
   break;
  }
  $2123 = $i291;
  $2124 = (($22) + 3076|0);
  $2125 = (($2124) + ($2123<<2)|0);
  HEAPF32[$2125>>2] = 0.0;
  $2126 = $i291;
  $2127 = (($2126) + 1)|0;
  $i291 = $2127;
 }
 $i292 = 0;
 while(1) {
  $2128 = $i292;
  $2129 = ($2128|0)<(3);
  if (!($2129)) {
   break;
  }
  $2130 = $i292;
  $2131 = (($22) + 3084|0);
  $2132 = (($2131) + ($2130<<2)|0);
  HEAPF32[$2132>>2] = 0.0;
  $2133 = $i292;
  $2134 = (($2133) + 1)|0;
  $i292 = $2134;
 }
 $i293 = 0;
 while(1) {
  $2135 = $i293;
  $2136 = ($2135|0)<(2);
  if (!($2136)) {
   break;
  }
  $2137 = $i293;
  $2138 = (($22) + 3096|0);
  $2139 = (($2138) + ($2137<<2)|0);
  HEAPF32[$2139>>2] = 0.0;
  $2140 = $i293;
  $2141 = (($2140) + 1)|0;
  $i293 = $2141;
 }
 $i294 = 0;
 while(1) {
  $2142 = $i294;
  $2143 = ($2142|0)<(2);
  if (!($2143)) {
   break;
  }
  $2144 = $i294;
  $2145 = (($22) + 3104|0);
  $2146 = (($2145) + ($2144<<2)|0);
  HEAPF32[$2146>>2] = 0.0;
  $2147 = $i294;
  $2148 = (($2147) + 1)|0;
  $i294 = $2148;
 }
 $i295 = 0;
 while(1) {
  $2149 = $i295;
  $2150 = ($2149|0)<(3);
  if (!($2150)) {
   break;
  }
  $2151 = $i295;
  $2152 = (($22) + 3112|0);
  $2153 = (($2152) + ($2151<<2)|0);
  HEAPF32[$2153>>2] = 0.0;
  $2154 = $i295;
  $2155 = (($2154) + 1)|0;
  $i295 = $2155;
 }
 $i296 = 0;
 while(1) {
  $2156 = $i296;
  $2157 = ($2156|0)<(3);
  if (!($2157)) {
   break;
  }
  $2158 = $i296;
  $2159 = (($22) + 3124|0);
  $2160 = (($2159) + ($2158<<2)|0);
  HEAPF32[$2160>>2] = 0.0;
  $2161 = $i296;
  $2162 = (($2161) + 1)|0;
  $i296 = $2162;
 }
 $i297 = 0;
 while(1) {
  $2163 = $i297;
  $2164 = ($2163|0)<(2);
  if (!($2164)) {
   break;
  }
  $2165 = $i297;
  $2166 = (($22) + 3136|0);
  $2167 = (($2166) + ($2165<<2)|0);
  HEAPF32[$2167>>2] = 0.0;
  $2168 = $i297;
  $2169 = (($2168) + 1)|0;
  $i297 = $2169;
 }
 $i298 = 0;
 while(1) {
  $2170 = $i298;
  $2171 = ($2170|0)<(3);
  if (!($2171)) {
   break;
  }
  $2172 = $i298;
  $2173 = (($22) + 3144|0);
  $2174 = (($2173) + ($2172<<2)|0);
  HEAPF32[$2174>>2] = 0.0;
  $2175 = $i298;
  $2176 = (($2175) + 1)|0;
  $i298 = $2176;
 }
 $i299 = 0;
 while(1) {
  $2177 = $i299;
  $2178 = ($2177|0)<(2);
  if (!($2178)) {
   break;
  }
  $2179 = $i299;
  $2180 = (($22) + 3156|0);
  $2181 = (($2180) + ($2179<<2)|0);
  HEAPF32[$2181>>2] = 0.0;
  $2182 = $i299;
  $2183 = (($2182) + 1)|0;
  $i299 = $2183;
 }
 $i300 = 0;
 while(1) {
  $2184 = $i300;
  $2185 = ($2184|0)<(2);
  if (!($2185)) {
   break;
  }
  $2186 = $i300;
  $2187 = (($22) + 3164|0);
  $2188 = (($2187) + ($2186<<2)|0);
  HEAPF32[$2188>>2] = 0.0;
  $2189 = $i300;
  $2190 = (($2189) + 1)|0;
  $i300 = $2190;
 }
 $i301 = 0;
 while(1) {
  $2191 = $i301;
  $2192 = ($2191|0)<(3);
  if (!($2192)) {
   break;
  }
  $2193 = $i301;
  $2194 = (($22) + 3172|0);
  $2195 = (($2194) + ($2193<<2)|0);
  HEAPF32[$2195>>2] = 0.0;
  $2196 = $i301;
  $2197 = (($2196) + 1)|0;
  $i301 = $2197;
 }
 $i302 = 0;
 while(1) {
  $2198 = $i302;
  $2199 = ($2198|0)<(2);
  if (!($2199)) {
   break;
  }
  $2200 = $i302;
  $2201 = (($22) + 3184|0);
  $2202 = (($2201) + ($2200<<2)|0);
  HEAPF32[$2202>>2] = 0.0;
  $2203 = $i302;
  $2204 = (($2203) + 1)|0;
  $i302 = $2204;
 }
 $i303 = 0;
 while(1) {
  $2205 = $i303;
  $2206 = ($2205|0)<(3);
  if (!($2206)) {
   break;
  }
  $2207 = $i303;
  $2208 = (($22) + 3192|0);
  $2209 = (($2208) + ($2207<<2)|0);
  HEAPF32[$2209>>2] = 0.0;
  $2210 = $i303;
  $2211 = (($2210) + 1)|0;
  $i303 = $2211;
 }
 $i304 = 0;
 while(1) {
  $2212 = $i304;
  $2213 = ($2212|0)<(2);
  if (!($2213)) {
   break;
  }
  $2214 = $i304;
  $2215 = (($22) + 3204|0);
  $2216 = (($2215) + ($2214<<2)|0);
  HEAPF32[$2216>>2] = 0.0;
  $2217 = $i304;
  $2218 = (($2217) + 1)|0;
  $i304 = $2218;
 }
 $i305 = 0;
 while(1) {
  $2219 = $i305;
  $2220 = ($2219|0)<(3);
  if (!($2220)) {
   break;
  }
  $2221 = $i305;
  $2222 = (($22) + 3212|0);
  $2223 = (($2222) + ($2221<<2)|0);
  HEAPF32[$2223>>2] = 0.0;
  $2224 = $i305;
  $2225 = (($2224) + 1)|0;
  $i305 = $2225;
 }
 $i306 = 0;
 while(1) {
  $2226 = $i306;
  $2227 = ($2226|0)<(3);
  if (!($2227)) {
   break;
  }
  $2228 = $i306;
  $2229 = (($22) + 3224|0);
  $2230 = (($2229) + ($2228<<2)|0);
  HEAPF32[$2230>>2] = 0.0;
  $2231 = $i306;
  $2232 = (($2231) + 1)|0;
  $i306 = $2232;
 }
 $i307 = 0;
 while(1) {
  $2233 = $i307;
  $2234 = ($2233|0)<(3);
  if (!($2234)) {
   break;
  }
  $2235 = $i307;
  $2236 = (($22) + 3236|0);
  $2237 = (($2236) + ($2235<<2)|0);
  HEAPF32[$2237>>2] = 0.0;
  $2238 = $i307;
  $2239 = (($2238) + 1)|0;
  $i307 = $2239;
 }
 $i308 = 0;
 while(1) {
  $2240 = $i308;
  $2241 = ($2240|0)<(3);
  if (!($2241)) {
   break;
  }
  $2242 = $i308;
  $2243 = (($22) + 3248|0);
  $2244 = (($2243) + ($2242<<2)|0);
  HEAPF32[$2244>>2] = 0.0;
  $2245 = $i308;
  $2246 = (($2245) + 1)|0;
  $i308 = $2246;
 }
 $i309 = 0;
 while(1) {
  $2247 = $i309;
  $2248 = ($2247|0)<(2);
  if (!($2248)) {
   break;
  }
  $2249 = $i309;
  $2250 = (($22) + 3260|0);
  $2251 = (($2250) + ($2249<<2)|0);
  HEAPF32[$2251>>2] = 0.0;
  $2252 = $i309;
  $2253 = (($2252) + 1)|0;
  $i309 = $2253;
 }
 $i310 = 0;
 while(1) {
  $2254 = $i310;
  $2255 = ($2254|0)<(3);
  if (!($2255)) {
   break;
  }
  $2256 = $i310;
  $2257 = (($22) + 3268|0);
  $2258 = (($2257) + ($2256<<2)|0);
  HEAPF32[$2258>>2] = 0.0;
  $2259 = $i310;
  $2260 = (($2259) + 1)|0;
  $i310 = $2260;
 }
 $i311 = 0;
 while(1) {
  $2261 = $i311;
  $2262 = ($2261|0)<(2);
  if (!($2262)) {
   break;
  }
  $2263 = $i311;
  $2264 = (($22) + 3280|0);
  $2265 = (($2264) + ($2263<<2)|0);
  HEAPF32[$2265>>2] = 0.0;
  $2266 = $i311;
  $2267 = (($2266) + 1)|0;
  $i311 = $2267;
 }
 $i312 = 0;
 while(1) {
  $2268 = $i312;
  $2269 = ($2268|0)<(2);
  if (!($2269)) {
   break;
  }
  $2270 = $i312;
  $2271 = (($22) + 3288|0);
  $2272 = (($2271) + ($2270<<2)|0);
  HEAPF32[$2272>>2] = 0.0;
  $2273 = $i312;
  $2274 = (($2273) + 1)|0;
  $i312 = $2274;
 }
 $i313 = 0;
 while(1) {
  $2275 = $i313;
  $2276 = ($2275|0)<(3);
  if (!($2276)) {
   break;
  }
  $2277 = $i313;
  $2278 = (($22) + 3296|0);
  $2279 = (($2278) + ($2277<<2)|0);
  HEAPF32[$2279>>2] = 0.0;
  $2280 = $i313;
  $2281 = (($2280) + 1)|0;
  $i313 = $2281;
 }
 $i314 = 0;
 while(1) {
  $2282 = $i314;
  $2283 = ($2282|0)<(3);
  if (!($2283)) {
   break;
  }
  $2284 = $i314;
  $2285 = (($22) + 3308|0);
  $2286 = (($2285) + ($2284<<2)|0);
  HEAPF32[$2286>>2] = 0.0;
  $2287 = $i314;
  $2288 = (($2287) + 1)|0;
  $i314 = $2288;
 }
 $i315 = 0;
 while(1) {
  $2289 = $i315;
  $2290 = ($2289|0)<(3);
  if (!($2290)) {
   break;
  }
  $2291 = $i315;
  $2292 = (($22) + 3320|0);
  $2293 = (($2292) + ($2291<<2)|0);
  HEAPF32[$2293>>2] = 0.0;
  $2294 = $i315;
  $2295 = (($2294) + 1)|0;
  $i315 = $2295;
 }
 $i316 = 0;
 while(1) {
  $2296 = $i316;
  $2297 = ($2296|0)<(2);
  if (!($2297)) {
   break;
  }
  $2298 = $i316;
  $2299 = (($22) + 3332|0);
  $2300 = (($2299) + ($2298<<2)|0);
  HEAPF32[$2300>>2] = 0.0;
  $2301 = $i316;
  $2302 = (($2301) + 1)|0;
  $i316 = $2302;
 }
 $i317 = 0;
 while(1) {
  $2303 = $i317;
  $2304 = ($2303|0)<(3);
  if (!($2304)) {
   break;
  }
  $2305 = $i317;
  $2306 = (($22) + 3340|0);
  $2307 = (($2306) + ($2305<<2)|0);
  HEAPF32[$2307>>2] = 0.0;
  $2308 = $i317;
  $2309 = (($2308) + 1)|0;
  $i317 = $2309;
 }
 $i318 = 0;
 while(1) {
  $2310 = $i318;
  $2311 = ($2310|0)<(2);
  if (!($2311)) {
   break;
  }
  $2312 = $i318;
  $2313 = (($22) + 3352|0);
  $2314 = (($2313) + ($2312<<2)|0);
  HEAPF32[$2314>>2] = 0.0;
  $2315 = $i318;
  $2316 = (($2315) + 1)|0;
  $i318 = $2316;
 }
 $i319 = 0;
 while(1) {
  $2317 = $i319;
  $2318 = ($2317|0)<(2);
  if (!($2318)) {
   break;
  }
  $2319 = $i319;
  $2320 = (($22) + 3360|0);
  $2321 = (($2320) + ($2319<<2)|0);
  HEAPF32[$2321>>2] = 0.0;
  $2322 = $i319;
  $2323 = (($2322) + 1)|0;
  $i319 = $2323;
 }
 $i320 = 0;
 while(1) {
  $2324 = $i320;
  $2325 = ($2324|0)<(3);
  if (!($2325)) {
   break;
  }
  $2326 = $i320;
  $2327 = (($22) + 3368|0);
  $2328 = (($2327) + ($2326<<2)|0);
  HEAPF32[$2328>>2] = 0.0;
  $2329 = $i320;
  $2330 = (($2329) + 1)|0;
  $i320 = $2330;
 }
 $i321 = 0;
 while(1) {
  $2331 = $i321;
  $2332 = ($2331|0)<(3);
  if (!($2332)) {
   break;
  }
  $2333 = $i321;
  $2334 = (($22) + 3380|0);
  $2335 = (($2334) + ($2333<<2)|0);
  HEAPF32[$2335>>2] = 0.0;
  $2336 = $i321;
  $2337 = (($2336) + 1)|0;
  $i321 = $2337;
 }
 $i322 = 0;
 while(1) {
  $2338 = $i322;
  $2339 = ($2338|0)<(2);
  if (!($2339)) {
   break;
  }
  $2340 = $i322;
  $2341 = (($22) + 3392|0);
  $2342 = (($2341) + ($2340<<2)|0);
  HEAPF32[$2342>>2] = 0.0;
  $2343 = $i322;
  $2344 = (($2343) + 1)|0;
  $i322 = $2344;
 }
 $i323 = 0;
 while(1) {
  $2345 = $i323;
  $2346 = ($2345|0)<(3);
  if (!($2346)) {
   break;
  }
  $2347 = $i323;
  $2348 = (($22) + 3400|0);
  $2349 = (($2348) + ($2347<<2)|0);
  HEAPF32[$2349>>2] = 0.0;
  $2350 = $i323;
  $2351 = (($2350) + 1)|0;
  $i323 = $2351;
 }
 $i324 = 0;
 while(1) {
  $2352 = $i324;
  $2353 = ($2352|0)<(2);
  if (!($2353)) {
   break;
  }
  $2354 = $i324;
  $2355 = (($22) + 3412|0);
  $2356 = (($2355) + ($2354<<2)|0);
  HEAPF32[$2356>>2] = 0.0;
  $2357 = $i324;
  $2358 = (($2357) + 1)|0;
  $i324 = $2358;
 }
 $i325 = 0;
 while(1) {
  $2359 = $i325;
  $2360 = ($2359|0)<(2);
  if (!($2360)) {
   break;
  }
  $2361 = $i325;
  $2362 = (($22) + 3420|0);
  $2363 = (($2362) + ($2361<<2)|0);
  HEAPF32[$2363>>2] = 0.0;
  $2364 = $i325;
  $2365 = (($2364) + 1)|0;
  $i325 = $2365;
 }
 $i326 = 0;
 while(1) {
  $2366 = $i326;
  $2367 = ($2366|0)<(3);
  if (!($2367)) {
   break;
  }
  $2368 = $i326;
  $2369 = (($22) + 3428|0);
  $2370 = (($2369) + ($2368<<2)|0);
  HEAPF32[$2370>>2] = 0.0;
  $2371 = $i326;
  $2372 = (($2371) + 1)|0;
  $i326 = $2372;
 }
 $i327 = 0;
 while(1) {
  $2373 = $i327;
  $2374 = ($2373|0)<(2);
  if (!($2374)) {
   break;
  }
  $2375 = $i327;
  $2376 = (($22) + 3440|0);
  $2377 = (($2376) + ($2375<<2)|0);
  HEAPF32[$2377>>2] = 0.0;
  $2378 = $i327;
  $2379 = (($2378) + 1)|0;
  $i327 = $2379;
 }
 $i328 = 0;
 while(1) {
  $2380 = $i328;
  $2381 = ($2380|0)<(3);
  if (!($2381)) {
   break;
  }
  $2382 = $i328;
  $2383 = (($22) + 3448|0);
  $2384 = (($2383) + ($2382<<2)|0);
  HEAPF32[$2384>>2] = 0.0;
  $2385 = $i328;
  $2386 = (($2385) + 1)|0;
  $i328 = $2386;
 }
 $i329 = 0;
 while(1) {
  $2387 = $i329;
  $2388 = ($2387|0)<(2);
  if (!($2388)) {
   break;
  }
  $2389 = $i329;
  $2390 = (($22) + 3460|0);
  $2391 = (($2390) + ($2389<<2)|0);
  HEAPF32[$2391>>2] = 0.0;
  $2392 = $i329;
  $2393 = (($2392) + 1)|0;
  $i329 = $2393;
 }
 $i330 = 0;
 while(1) {
  $2394 = $i330;
  $2395 = ($2394|0)<(3);
  if (!($2395)) {
   break;
  }
  $2396 = $i330;
  $2397 = (($22) + 3468|0);
  $2398 = (($2397) + ($2396<<2)|0);
  HEAPF32[$2398>>2] = 0.0;
  $2399 = $i330;
  $2400 = (($2399) + 1)|0;
  $i330 = $2400;
 }
 $i331 = 0;
 while(1) {
  $2401 = $i331;
  $2402 = ($2401|0)<(3);
  if (!($2402)) {
   break;
  }
  $2403 = $i331;
  $2404 = (($22) + 3480|0);
  $2405 = (($2404) + ($2403<<2)|0);
  HEAPF32[$2405>>2] = 0.0;
  $2406 = $i331;
  $2407 = (($2406) + 1)|0;
  $i331 = $2407;
 }
 $i332 = 0;
 while(1) {
  $2408 = $i332;
  $2409 = ($2408|0)<(3);
  if (!($2409)) {
   break;
  }
  $2410 = $i332;
  $2411 = (($22) + 3492|0);
  $2412 = (($2411) + ($2410<<2)|0);
  HEAPF32[$2412>>2] = 0.0;
  $2413 = $i332;
  $2414 = (($2413) + 1)|0;
  $i332 = $2414;
 }
 $i333 = 0;
 while(1) {
  $2415 = $i333;
  $2416 = ($2415|0)<(3);
  if (!($2416)) {
   break;
  }
  $2417 = $i333;
  $2418 = (($22) + 3504|0);
  $2419 = (($2418) + ($2417<<2)|0);
  HEAPF32[$2419>>2] = 0.0;
  $2420 = $i333;
  $2421 = (($2420) + 1)|0;
  $i333 = $2421;
 }
 $i334 = 0;
 while(1) {
  $2422 = $i334;
  $2423 = ($2422|0)<(2);
  if (!($2423)) {
   break;
  }
  $2424 = $i334;
  $2425 = (($22) + 3516|0);
  $2426 = (($2425) + ($2424<<2)|0);
  HEAPF32[$2426>>2] = 0.0;
  $2427 = $i334;
  $2428 = (($2427) + 1)|0;
  $i334 = $2428;
 }
 $i335 = 0;
 while(1) {
  $2429 = $i335;
  $2430 = ($2429|0)<(3);
  if (!($2430)) {
   break;
  }
  $2431 = $i335;
  $2432 = (($22) + 3524|0);
  $2433 = (($2432) + ($2431<<2)|0);
  HEAPF32[$2433>>2] = 0.0;
  $2434 = $i335;
  $2435 = (($2434) + 1)|0;
  $i335 = $2435;
 }
 $i336 = 0;
 while(1) {
  $2436 = $i336;
  $2437 = ($2436|0)<(2);
  if (!($2437)) {
   break;
  }
  $2438 = $i336;
  $2439 = (($22) + 3536|0);
  $2440 = (($2439) + ($2438<<2)|0);
  HEAPF32[$2440>>2] = 0.0;
  $2441 = $i336;
  $2442 = (($2441) + 1)|0;
  $i336 = $2442;
 }
 $i337 = 0;
 while(1) {
  $2443 = $i337;
  $2444 = ($2443|0)<(2);
  if (!($2444)) {
   break;
  }
  $2445 = $i337;
  $2446 = (($22) + 3544|0);
  $2447 = (($2446) + ($2445<<2)|0);
  HEAPF32[$2447>>2] = 0.0;
  $2448 = $i337;
  $2449 = (($2448) + 1)|0;
  $i337 = $2449;
 }
 $i338 = 0;
 while(1) {
  $2450 = $i338;
  $2451 = ($2450|0)<(3);
  if (!($2451)) {
   break;
  }
  $2452 = $i338;
  $2453 = (($22) + 3552|0);
  $2454 = (($2453) + ($2452<<2)|0);
  HEAPF32[$2454>>2] = 0.0;
  $2455 = $i338;
  $2456 = (($2455) + 1)|0;
  $i338 = $2456;
 }
 $i339 = 0;
 while(1) {
  $2457 = $i339;
  $2458 = ($2457|0)<(3);
  if (!($2458)) {
   break;
  }
  $2459 = $i339;
  $2460 = (($22) + 3564|0);
  $2461 = (($2460) + ($2459<<2)|0);
  HEAPF32[$2461>>2] = 0.0;
  $2462 = $i339;
  $2463 = (($2462) + 1)|0;
  $i339 = $2463;
 }
 $i340 = 0;
 while(1) {
  $2464 = $i340;
  $2465 = ($2464|0)<(3);
  if (!($2465)) {
   break;
  }
  $2466 = $i340;
  $2467 = (($22) + 3576|0);
  $2468 = (($2467) + ($2466<<2)|0);
  HEAPF32[$2468>>2] = 0.0;
  $2469 = $i340;
  $2470 = (($2469) + 1)|0;
  $i340 = $2470;
 }
 $i341 = 0;
 while(1) {
  $2471 = $i341;
  $2472 = ($2471|0)<(2);
  if (!($2472)) {
   break;
  }
  $2473 = $i341;
  $2474 = (($22) + 3588|0);
  $2475 = (($2474) + ($2473<<2)|0);
  HEAPF32[$2475>>2] = 0.0;
  $2476 = $i341;
  $2477 = (($2476) + 1)|0;
  $i341 = $2477;
 }
 $i342 = 0;
 while(1) {
  $2478 = $i342;
  $2479 = ($2478|0)<(3);
  if (!($2479)) {
   break;
  }
  $2480 = $i342;
  $2481 = (($22) + 3596|0);
  $2482 = (($2481) + ($2480<<2)|0);
  HEAPF32[$2482>>2] = 0.0;
  $2483 = $i342;
  $2484 = (($2483) + 1)|0;
  $i342 = $2484;
 }
 $i343 = 0;
 while(1) {
  $2485 = $i343;
  $2486 = ($2485|0)<(2);
  if (!($2486)) {
   break;
  }
  $2487 = $i343;
  $2488 = (($22) + 3608|0);
  $2489 = (($2488) + ($2487<<2)|0);
  HEAPF32[$2489>>2] = 0.0;
  $2490 = $i343;
  $2491 = (($2490) + 1)|0;
  $i343 = $2491;
 }
 $i344 = 0;
 while(1) {
  $2492 = $i344;
  $2493 = ($2492|0)<(2);
  if (!($2493)) {
   break;
  }
  $2494 = $i344;
  $2495 = (($22) + 3616|0);
  $2496 = (($2495) + ($2494<<2)|0);
  HEAPF32[$2496>>2] = 0.0;
  $2497 = $i344;
  $2498 = (($2497) + 1)|0;
  $i344 = $2498;
 }
 $i345 = 0;
 while(1) {
  $2499 = $i345;
  $2500 = ($2499|0)<(3);
  if (!($2500)) {
   break;
  }
  $2501 = $i345;
  $2502 = (($22) + 3624|0);
  $2503 = (($2502) + ($2501<<2)|0);
  HEAPF32[$2503>>2] = 0.0;
  $2504 = $i345;
  $2505 = (($2504) + 1)|0;
  $i345 = $2505;
 }
 $i346 = 0;
 while(1) {
  $2506 = $i346;
  $2507 = ($2506|0)<(3);
  if (!($2507)) {
   break;
  }
  $2508 = $i346;
  $2509 = (($22) + 3636|0);
  $2510 = (($2509) + ($2508<<2)|0);
  HEAPF32[$2510>>2] = 0.0;
  $2511 = $i346;
  $2512 = (($2511) + 1)|0;
  $i346 = $2512;
 }
 $i347 = 0;
 while(1) {
  $2513 = $i347;
  $2514 = ($2513|0)<(2);
  if (!($2514)) {
   break;
  }
  $2515 = $i347;
  $2516 = (($22) + 3648|0);
  $2517 = (($2516) + ($2515<<2)|0);
  HEAPF32[$2517>>2] = 0.0;
  $2518 = $i347;
  $2519 = (($2518) + 1)|0;
  $i347 = $2519;
 }
 $i348 = 0;
 while(1) {
  $2520 = $i348;
  $2521 = ($2520|0)<(3);
  if (!($2521)) {
   break;
  }
  $2522 = $i348;
  $2523 = (($22) + 3656|0);
  $2524 = (($2523) + ($2522<<2)|0);
  HEAPF32[$2524>>2] = 0.0;
  $2525 = $i348;
  $2526 = (($2525) + 1)|0;
  $i348 = $2526;
 }
 $i349 = 0;
 while(1) {
  $2527 = $i349;
  $2528 = ($2527|0)<(2);
  if (!($2528)) {
   break;
  }
  $2529 = $i349;
  $2530 = (($22) + 3668|0);
  $2531 = (($2530) + ($2529<<2)|0);
  HEAPF32[$2531>>2] = 0.0;
  $2532 = $i349;
  $2533 = (($2532) + 1)|0;
  $i349 = $2533;
 }
 $i350 = 0;
 while(1) {
  $2534 = $i350;
  $2535 = ($2534|0)<(2);
  if (!($2535)) {
   break;
  }
  $2536 = $i350;
  $2537 = (($22) + 3676|0);
  $2538 = (($2537) + ($2536<<2)|0);
  HEAPF32[$2538>>2] = 0.0;
  $2539 = $i350;
  $2540 = (($2539) + 1)|0;
  $i350 = $2540;
 }
 $i351 = 0;
 while(1) {
  $2541 = $i351;
  $2542 = ($2541|0)<(3);
  if (!($2542)) {
   break;
  }
  $2543 = $i351;
  $2544 = (($22) + 3684|0);
  $2545 = (($2544) + ($2543<<2)|0);
  HEAPF32[$2545>>2] = 0.0;
  $2546 = $i351;
  $2547 = (($2546) + 1)|0;
  $i351 = $2547;
 }
 $i352 = 0;
 while(1) {
  $2548 = $i352;
  $2549 = ($2548|0)<(2);
  if (!($2549)) {
   break;
  }
  $2550 = $i352;
  $2551 = (($22) + 3696|0);
  $2552 = (($2551) + ($2550<<2)|0);
  HEAPF32[$2552>>2] = 0.0;
  $2553 = $i352;
  $2554 = (($2553) + 1)|0;
  $i352 = $2554;
 }
 $i353 = 0;
 while(1) {
  $2555 = $i353;
  $2556 = ($2555|0)<(3);
  if (!($2556)) {
   break;
  }
  $2557 = $i353;
  $2558 = (($22) + 3704|0);
  $2559 = (($2558) + ($2557<<2)|0);
  HEAPF32[$2559>>2] = 0.0;
  $2560 = $i353;
  $2561 = (($2560) + 1)|0;
  $i353 = $2561;
 }
 $i354 = 0;
 while(1) {
  $2562 = $i354;
  $2563 = ($2562|0)<(2);
  if (!($2563)) {
   break;
  }
  $2564 = $i354;
  $2565 = (($22) + 3716|0);
  $2566 = (($2565) + ($2564<<2)|0);
  HEAPF32[$2566>>2] = 0.0;
  $2567 = $i354;
  $2568 = (($2567) + 1)|0;
  $i354 = $2568;
 }
 $i355 = 0;
 while(1) {
  $2569 = $i355;
  $2570 = ($2569|0)<(3);
  if (!($2570)) {
   break;
  }
  $2571 = $i355;
  $2572 = (($22) + 3724|0);
  $2573 = (($2572) + ($2571<<2)|0);
  HEAPF32[$2573>>2] = 0.0;
  $2574 = $i355;
  $2575 = (($2574) + 1)|0;
  $i355 = $2575;
 }
 $i356 = 0;
 while(1) {
  $2576 = $i356;
  $2577 = ($2576|0)<(3);
  if (!($2577)) {
   break;
  }
  $2578 = $i356;
  $2579 = (($22) + 3736|0);
  $2580 = (($2579) + ($2578<<2)|0);
  HEAPF32[$2580>>2] = 0.0;
  $2581 = $i356;
  $2582 = (($2581) + 1)|0;
  $i356 = $2582;
 }
 $i357 = 0;
 while(1) {
  $2583 = $i357;
  $2584 = ($2583|0)<(3);
  if (!($2584)) {
   break;
  }
  $2585 = $i357;
  $2586 = (($22) + 3748|0);
  $2587 = (($2586) + ($2585<<2)|0);
  HEAPF32[$2587>>2] = 0.0;
  $2588 = $i357;
  $2589 = (($2588) + 1)|0;
  $i357 = $2589;
 }
 $i358 = 0;
 while(1) {
  $2590 = $i358;
  $2591 = ($2590|0)<(3);
  if (!($2591)) {
   break;
  }
  $2592 = $i358;
  $2593 = (($22) + 3760|0);
  $2594 = (($2593) + ($2592<<2)|0);
  HEAPF32[$2594>>2] = 0.0;
  $2595 = $i358;
  $2596 = (($2595) + 1)|0;
  $i358 = $2596;
 }
 $i359 = 0;
 while(1) {
  $2597 = $i359;
  $2598 = ($2597|0)<(2);
  if (!($2598)) {
   break;
  }
  $2599 = $i359;
  $2600 = (($22) + 3772|0);
  $2601 = (($2600) + ($2599<<2)|0);
  HEAPF32[$2601>>2] = 0.0;
  $2602 = $i359;
  $2603 = (($2602) + 1)|0;
  $i359 = $2603;
 }
 $i360 = 0;
 while(1) {
  $2604 = $i360;
  $2605 = ($2604|0)<(3);
  if (!($2605)) {
   break;
  }
  $2606 = $i360;
  $2607 = (($22) + 3780|0);
  $2608 = (($2607) + ($2606<<2)|0);
  HEAPF32[$2608>>2] = 0.0;
  $2609 = $i360;
  $2610 = (($2609) + 1)|0;
  $i360 = $2610;
 }
 $i361 = 0;
 while(1) {
  $2611 = $i361;
  $2612 = ($2611|0)<(2);
  if (!($2612)) {
   break;
  }
  $2613 = $i361;
  $2614 = (($22) + 3792|0);
  $2615 = (($2614) + ($2613<<2)|0);
  HEAPF32[$2615>>2] = 0.0;
  $2616 = $i361;
  $2617 = (($2616) + 1)|0;
  $i361 = $2617;
 }
 $i362 = 0;
 while(1) {
  $2618 = $i362;
  $2619 = ($2618|0)<(2);
  if (!($2619)) {
   break;
  }
  $2620 = $i362;
  $2621 = (($22) + 3800|0);
  $2622 = (($2621) + ($2620<<2)|0);
  HEAPF32[$2622>>2] = 0.0;
  $2623 = $i362;
  $2624 = (($2623) + 1)|0;
  $i362 = $2624;
 }
 $i363 = 0;
 while(1) {
  $2625 = $i363;
  $2626 = ($2625|0)<(3);
  if (!($2626)) {
   break;
  }
  $2627 = $i363;
  $2628 = (($22) + 3808|0);
  $2629 = (($2628) + ($2627<<2)|0);
  HEAPF32[$2629>>2] = 0.0;
  $2630 = $i363;
  $2631 = (($2630) + 1)|0;
  $i363 = $2631;
 }
 $i364 = 0;
 while(1) {
  $2632 = $i364;
  $2633 = ($2632|0)<(3);
  if (!($2633)) {
   break;
  }
  $2634 = $i364;
  $2635 = (($22) + 3820|0);
  $2636 = (($2635) + ($2634<<2)|0);
  HEAPF32[$2636>>2] = 0.0;
  $2637 = $i364;
  $2638 = (($2637) + 1)|0;
  $i364 = $2638;
 }
 $i365 = 0;
 while(1) {
  $2639 = $i365;
  $2640 = ($2639|0)<(3);
  if (!($2640)) {
   break;
  }
  $2641 = $i365;
  $2642 = (($22) + 3832|0);
  $2643 = (($2642) + ($2641<<2)|0);
  HEAPF32[$2643>>2] = 0.0;
  $2644 = $i365;
  $2645 = (($2644) + 1)|0;
  $i365 = $2645;
 }
 $i366 = 0;
 while(1) {
  $2646 = $i366;
  $2647 = ($2646|0)<(2);
  if (!($2647)) {
   break;
  }
  $2648 = $i366;
  $2649 = (($22) + 3844|0);
  $2650 = (($2649) + ($2648<<2)|0);
  HEAPF32[$2650>>2] = 0.0;
  $2651 = $i366;
  $2652 = (($2651) + 1)|0;
  $i366 = $2652;
 }
 $i367 = 0;
 while(1) {
  $2653 = $i367;
  $2654 = ($2653|0)<(3);
  if (!($2654)) {
   break;
  }
  $2655 = $i367;
  $2656 = (($22) + 3852|0);
  $2657 = (($2656) + ($2655<<2)|0);
  HEAPF32[$2657>>2] = 0.0;
  $2658 = $i367;
  $2659 = (($2658) + 1)|0;
  $i367 = $2659;
 }
 $i368 = 0;
 while(1) {
  $2660 = $i368;
  $2661 = ($2660|0)<(2);
  if (!($2661)) {
   break;
  }
  $2662 = $i368;
  $2663 = (($22) + 3864|0);
  $2664 = (($2663) + ($2662<<2)|0);
  HEAPF32[$2664>>2] = 0.0;
  $2665 = $i368;
  $2666 = (($2665) + 1)|0;
  $i368 = $2666;
 }
 $i369 = 0;
 while(1) {
  $2667 = $i369;
  $2668 = ($2667|0)<(2);
  if (!($2668)) {
   break;
  }
  $2669 = $i369;
  $2670 = (($22) + 3872|0);
  $2671 = (($2670) + ($2669<<2)|0);
  HEAPF32[$2671>>2] = 0.0;
  $2672 = $i369;
  $2673 = (($2672) + 1)|0;
  $i369 = $2673;
 }
 $i370 = 0;
 while(1) {
  $2674 = $i370;
  $2675 = ($2674|0)<(3);
  if (!($2675)) {
   break;
  }
  $2676 = $i370;
  $2677 = (($22) + 3880|0);
  $2678 = (($2677) + ($2676<<2)|0);
  HEAPF32[$2678>>2] = 0.0;
  $2679 = $i370;
  $2680 = (($2679) + 1)|0;
  $i370 = $2680;
 }
 $i371 = 0;
 while(1) {
  $2681 = $i371;
  $2682 = ($2681|0)<(3);
  if (!($2682)) {
   break;
  }
  $2683 = $i371;
  $2684 = (($22) + 3892|0);
  $2685 = (($2684) + ($2683<<2)|0);
  HEAPF32[$2685>>2] = 0.0;
  $2686 = $i371;
  $2687 = (($2686) + 1)|0;
  $i371 = $2687;
 }
 $i372 = 0;
 while(1) {
  $2688 = $i372;
  $2689 = ($2688|0)<(2);
  if (!($2689)) {
   break;
  }
  $2690 = $i372;
  $2691 = (($22) + 3904|0);
  $2692 = (($2691) + ($2690<<2)|0);
  HEAPF32[$2692>>2] = 0.0;
  $2693 = $i372;
  $2694 = (($2693) + 1)|0;
  $i372 = $2694;
 }
 $i373 = 0;
 while(1) {
  $2695 = $i373;
  $2696 = ($2695|0)<(3);
  if (!($2696)) {
   break;
  }
  $2697 = $i373;
  $2698 = (($22) + 3912|0);
  $2699 = (($2698) + ($2697<<2)|0);
  HEAPF32[$2699>>2] = 0.0;
  $2700 = $i373;
  $2701 = (($2700) + 1)|0;
  $i373 = $2701;
 }
 $i374 = 0;
 while(1) {
  $2702 = $i374;
  $2703 = ($2702|0)<(2);
  if (!($2703)) {
   break;
  }
  $2704 = $i374;
  $2705 = (($22) + 3924|0);
  $2706 = (($2705) + ($2704<<2)|0);
  HEAPF32[$2706>>2] = 0.0;
  $2707 = $i374;
  $2708 = (($2707) + 1)|0;
  $i374 = $2708;
 }
 $i375 = 0;
 while(1) {
  $2709 = $i375;
  $2710 = ($2709|0)<(2);
  if (!($2710)) {
   break;
  }
  $2711 = $i375;
  $2712 = (($22) + 3932|0);
  $2713 = (($2712) + ($2711<<2)|0);
  HEAPF32[$2713>>2] = 0.0;
  $2714 = $i375;
  $2715 = (($2714) + 1)|0;
  $i375 = $2715;
 }
 $i376 = 0;
 while(1) {
  $2716 = $i376;
  $2717 = ($2716|0)<(3);
  if (!($2717)) {
   break;
  }
  $2718 = $i376;
  $2719 = (($22) + 3940|0);
  $2720 = (($2719) + ($2718<<2)|0);
  HEAPF32[$2720>>2] = 0.0;
  $2721 = $i376;
  $2722 = (($2721) + 1)|0;
  $i376 = $2722;
 }
 $i377 = 0;
 while(1) {
  $2723 = $i377;
  $2724 = ($2723|0)<(2);
  if (!($2724)) {
   break;
  }
  $2725 = $i377;
  $2726 = (($22) + 3952|0);
  $2727 = (($2726) + ($2725<<2)|0);
  HEAPF32[$2727>>2] = 0.0;
  $2728 = $i377;
  $2729 = (($2728) + 1)|0;
  $i377 = $2729;
 }
 $i378 = 0;
 while(1) {
  $2730 = $i378;
  $2731 = ($2730|0)<(3);
  if (!($2731)) {
   break;
  }
  $2732 = $i378;
  $2733 = (($22) + 3960|0);
  $2734 = (($2733) + ($2732<<2)|0);
  HEAPF32[$2734>>2] = 0.0;
  $2735 = $i378;
  $2736 = (($2735) + 1)|0;
  $i378 = $2736;
 }
 $i379 = 0;
 while(1) {
  $2737 = $i379;
  $2738 = ($2737|0)<(2);
  if (!($2738)) {
   break;
  }
  $2739 = $i379;
  $2740 = (($22) + 3972|0);
  $2741 = (($2740) + ($2739<<2)|0);
  HEAPF32[$2741>>2] = 0.0;
  $2742 = $i379;
  $2743 = (($2742) + 1)|0;
  $i379 = $2743;
 }
 $i380 = 0;
 while(1) {
  $2744 = $i380;
  $2745 = ($2744|0)<(3);
  if (!($2745)) {
   break;
  }
  $2746 = $i380;
  $2747 = (($22) + 3980|0);
  $2748 = (($2747) + ($2746<<2)|0);
  HEAPF32[$2748>>2] = 0.0;
  $2749 = $i380;
  $2750 = (($2749) + 1)|0;
  $i380 = $2750;
 }
 $i381 = 0;
 while(1) {
  $2751 = $i381;
  $2752 = ($2751|0)<(3);
  if (!($2752)) {
   break;
  }
  $2753 = $i381;
  $2754 = (($22) + 3992|0);
  $2755 = (($2754) + ($2753<<2)|0);
  HEAPF32[$2755>>2] = 0.0;
  $2756 = $i381;
  $2757 = (($2756) + 1)|0;
  $i381 = $2757;
 }
 $i382 = 0;
 while(1) {
  $2758 = $i382;
  $2759 = ($2758|0)<(3);
  if (!($2759)) {
   break;
  }
  $2760 = $i382;
  $2761 = (($22) + 4004|0);
  $2762 = (($2761) + ($2760<<2)|0);
  HEAPF32[$2762>>2] = 0.0;
  $2763 = $i382;
  $2764 = (($2763) + 1)|0;
  $i382 = $2764;
 }
 $i383 = 0;
 while(1) {
  $2765 = $i383;
  $2766 = ($2765|0)<(3);
  if (!($2766)) {
   break;
  }
  $2767 = $i383;
  $2768 = (($22) + 4016|0);
  $2769 = (($2768) + ($2767<<2)|0);
  HEAPF32[$2769>>2] = 0.0;
  $2770 = $i383;
  $2771 = (($2770) + 1)|0;
  $i383 = $2771;
 }
 $i384 = 0;
 while(1) {
  $2772 = $i384;
  $2773 = ($2772|0)<(2);
  if (!($2773)) {
   break;
  }
  $2774 = $i384;
  $2775 = (($22) + 4028|0);
  $2776 = (($2775) + ($2774<<2)|0);
  HEAPF32[$2776>>2] = 0.0;
  $2777 = $i384;
  $2778 = (($2777) + 1)|0;
  $i384 = $2778;
 }
 $i385 = 0;
 while(1) {
  $2779 = $i385;
  $2780 = ($2779|0)<(3);
  if (!($2780)) {
   break;
  }
  $2781 = $i385;
  $2782 = (($22) + 4036|0);
  $2783 = (($2782) + ($2781<<2)|0);
  HEAPF32[$2783>>2] = 0.0;
  $2784 = $i385;
  $2785 = (($2784) + 1)|0;
  $i385 = $2785;
 }
 $i386 = 0;
 while(1) {
  $2786 = $i386;
  $2787 = ($2786|0)<(2);
  if (!($2787)) {
   break;
  }
  $2788 = $i386;
  $2789 = (($22) + 4048|0);
  $2790 = (($2789) + ($2788<<2)|0);
  HEAPF32[$2790>>2] = 0.0;
  $2791 = $i386;
  $2792 = (($2791) + 1)|0;
  $i386 = $2792;
 }
 $i387 = 0;
 while(1) {
  $2793 = $i387;
  $2794 = ($2793|0)<(2);
  if (!($2794)) {
   break;
  }
  $2795 = $i387;
  $2796 = (($22) + 4056|0);
  $2797 = (($2796) + ($2795<<2)|0);
  HEAPF32[$2797>>2] = 0.0;
  $2798 = $i387;
  $2799 = (($2798) + 1)|0;
  $i387 = $2799;
 }
 $i388 = 0;
 while(1) {
  $2800 = $i388;
  $2801 = ($2800|0)<(3);
  if (!($2801)) {
   break;
  }
  $2802 = $i388;
  $2803 = (($22) + 4064|0);
  $2804 = (($2803) + ($2802<<2)|0);
  HEAPF32[$2804>>2] = 0.0;
  $2805 = $i388;
  $2806 = (($2805) + 1)|0;
  $i388 = $2806;
 }
 $i389 = 0;
 while(1) {
  $2807 = $i389;
  $2808 = ($2807|0)<(3);
  if (!($2808)) {
   break;
  }
  $2809 = $i389;
  $2810 = (($22) + 4076|0);
  $2811 = (($2810) + ($2809<<2)|0);
  HEAPF32[$2811>>2] = 0.0;
  $2812 = $i389;
  $2813 = (($2812) + 1)|0;
  $i389 = $2813;
 }
 $i390 = 0;
 while(1) {
  $2814 = $i390;
  $2815 = ($2814|0)<(3);
  if (!($2815)) {
   break;
  }
  $2816 = $i390;
  $2817 = (($22) + 4088|0);
  $2818 = (($2817) + ($2816<<2)|0);
  HEAPF32[$2818>>2] = 0.0;
  $2819 = $i390;
  $2820 = (($2819) + 1)|0;
  $i390 = $2820;
 }
 $i391 = 0;
 while(1) {
  $2821 = $i391;
  $2822 = ($2821|0)<(2);
  if (!($2822)) {
   break;
  }
  $2823 = $i391;
  $2824 = (($22) + 4100|0);
  $2825 = (($2824) + ($2823<<2)|0);
  HEAPF32[$2825>>2] = 0.0;
  $2826 = $i391;
  $2827 = (($2826) + 1)|0;
  $i391 = $2827;
 }
 $i392 = 0;
 while(1) {
  $2828 = $i392;
  $2829 = ($2828|0)<(3);
  if (!($2829)) {
   break;
  }
  $2830 = $i392;
  $2831 = (($22) + 4108|0);
  $2832 = (($2831) + ($2830<<2)|0);
  HEAPF32[$2832>>2] = 0.0;
  $2833 = $i392;
  $2834 = (($2833) + 1)|0;
  $i392 = $2834;
 }
 $i393 = 0;
 while(1) {
  $2835 = $i393;
  $2836 = ($2835|0)<(2);
  if (!($2836)) {
   break;
  }
  $2837 = $i393;
  $2838 = (($22) + 4120|0);
  $2839 = (($2838) + ($2837<<2)|0);
  HEAPF32[$2839>>2] = 0.0;
  $2840 = $i393;
  $2841 = (($2840) + 1)|0;
  $i393 = $2841;
 }
 $i394 = 0;
 while(1) {
  $2842 = $i394;
  $2843 = ($2842|0)<(2);
  if (!($2843)) {
   break;
  }
  $2844 = $i394;
  $2845 = (($22) + 4128|0);
  $2846 = (($2845) + ($2844<<2)|0);
  HEAPF32[$2846>>2] = 0.0;
  $2847 = $i394;
  $2848 = (($2847) + 1)|0;
  $i394 = $2848;
 }
 $i395 = 0;
 while(1) {
  $2849 = $i395;
  $2850 = ($2849|0)<(3);
  if (!($2850)) {
   break;
  }
  $2851 = $i395;
  $2852 = (($22) + 4136|0);
  $2853 = (($2852) + ($2851<<2)|0);
  HEAPF32[$2853>>2] = 0.0;
  $2854 = $i395;
  $2855 = (($2854) + 1)|0;
  $i395 = $2855;
 }
 $i396 = 0;
 while(1) {
  $2856 = $i396;
  $2857 = ($2856|0)<(3);
  if (!($2857)) {
   break;
  }
  $2858 = $i396;
  $2859 = (($22) + 4148|0);
  $2860 = (($2859) + ($2858<<2)|0);
  HEAPF32[$2860>>2] = 0.0;
  $2861 = $i396;
  $2862 = (($2861) + 1)|0;
  $i396 = $2862;
 }
 $i397 = 0;
 while(1) {
  $2863 = $i397;
  $2864 = ($2863|0)<(2);
  if (!($2864)) {
   break;
  }
  $2865 = $i397;
  $2866 = (($22) + 4160|0);
  $2867 = (($2866) + ($2865<<2)|0);
  HEAPF32[$2867>>2] = 0.0;
  $2868 = $i397;
  $2869 = (($2868) + 1)|0;
  $i397 = $2869;
 }
 $i398 = 0;
 while(1) {
  $2870 = $i398;
  $2871 = ($2870|0)<(3);
  if (!($2871)) {
   break;
  }
  $2872 = $i398;
  $2873 = (($22) + 4168|0);
  $2874 = (($2873) + ($2872<<2)|0);
  HEAPF32[$2874>>2] = 0.0;
  $2875 = $i398;
  $2876 = (($2875) + 1)|0;
  $i398 = $2876;
 }
 $i399 = 0;
 while(1) {
  $2877 = $i399;
  $2878 = ($2877|0)<(2);
  if (!($2878)) {
   break;
  }
  $2879 = $i399;
  $2880 = (($22) + 4180|0);
  $2881 = (($2880) + ($2879<<2)|0);
  HEAPF32[$2881>>2] = 0.0;
  $2882 = $i399;
  $2883 = (($2882) + 1)|0;
  $i399 = $2883;
 }
 $i400 = 0;
 while(1) {
  $2884 = $i400;
  $2885 = ($2884|0)<(2);
  if (!($2885)) {
   break;
  }
  $2886 = $i400;
  $2887 = (($22) + 4188|0);
  $2888 = (($2887) + ($2886<<2)|0);
  HEAPF32[$2888>>2] = 0.0;
  $2889 = $i400;
  $2890 = (($2889) + 1)|0;
  $i400 = $2890;
 }
 $i401 = 0;
 while(1) {
  $2891 = $i401;
  $2892 = ($2891|0)<(3);
  if (!($2892)) {
   break;
  }
  $2893 = $i401;
  $2894 = (($22) + 4196|0);
  $2895 = (($2894) + ($2893<<2)|0);
  HEAPF32[$2895>>2] = 0.0;
  $2896 = $i401;
  $2897 = (($2896) + 1)|0;
  $i401 = $2897;
 }
 $i402 = 0;
 while(1) {
  $2898 = $i402;
  $2899 = ($2898|0)<(2);
  if (!($2899)) {
   break;
  }
  $2900 = $i402;
  $2901 = (($22) + 4208|0);
  $2902 = (($2901) + ($2900<<2)|0);
  HEAPF32[$2902>>2] = 0.0;
  $2903 = $i402;
  $2904 = (($2903) + 1)|0;
  $i402 = $2904;
 }
 $i403 = 0;
 while(1) {
  $2905 = $i403;
  $2906 = ($2905|0)<(3);
  if (!($2906)) {
   break;
  }
  $2907 = $i403;
  $2908 = (($22) + 4216|0);
  $2909 = (($2908) + ($2907<<2)|0);
  HEAPF32[$2909>>2] = 0.0;
  $2910 = $i403;
  $2911 = (($2910) + 1)|0;
  $i403 = $2911;
 }
 $2912 = (($22) + 4228|0);
 HEAP32[$2912>>2] = 0;
 $i404 = 0;
 while(1) {
  $2913 = $i404;
  $2914 = ($2913|0)<(8192);
  if (!($2914)) {
   break;
  }
  $2915 = $i404;
  $2916 = (($22) + 4232|0);
  $2917 = (($2916) + ($2915<<2)|0);
  HEAPF32[$2917>>2] = 0.0;
  $2918 = $i404;
  $2919 = (($2918) + 1)|0;
  $i404 = $2919;
 }
 $i405 = 0;
 while(1) {
  $2920 = $i405;
  $2921 = ($2920|0)<(3);
  if (!($2921)) {
   break;
  }
  $2922 = $i405;
  $2923 = (($22) + 37000|0);
  $2924 = (($2923) + ($2922<<2)|0);
  HEAPF32[$2924>>2] = 0.0;
  $2925 = $i405;
  $2926 = (($2925) + 1)|0;
  $i405 = $2926;
 }
 $2927 = (($22) + 37012|0);
 HEAPF32[$2927>>2] = 0.0;
 $i406 = 0;
 while(1) {
  $2928 = $i406;
  $2929 = ($2928|0)<(2);
  if (!($2929)) {
   break;
  }
  $2930 = $i406;
  $2931 = (($22) + 37016|0);
  $2932 = (($2931) + ($2930<<2)|0);
  HEAPF32[$2932>>2] = 0.0;
  $2933 = $i406;
  $2934 = (($2933) + 1)|0;
  $i406 = $2934;
 }
 $i407 = 0;
 while(1) {
  $2935 = $i407;
  $2936 = ($2935|0)<(8192);
  if (!($2936)) {
   break;
  }
  $2937 = $i407;
  $2938 = (($22) + 37024|0);
  $2939 = (($2938) + ($2937<<2)|0);
  HEAPF32[$2939>>2] = 0.0;
  $2940 = $i407;
  $2941 = (($2940) + 1)|0;
  $i407 = $2941;
 }
 $i408 = 0;
 while(1) {
  $2942 = $i408;
  $2943 = ($2942|0)<(3);
  if (!($2943)) {
   break;
  }
  $2944 = $i408;
  $2945 = (($22) + 69792|0);
  $2946 = (($2945) + ($2944<<2)|0);
  HEAPF32[$2946>>2] = 0.0;
  $2947 = $i408;
  $2948 = (($2947) + 1)|0;
  $i408 = $2948;
 }
 $i409 = 0;
 while(1) {
  $2949 = $i409;
  $2950 = ($2949|0)<(8192);
  if (!($2950)) {
   break;
  }
  $2951 = $i409;
  $2952 = (($22) + 69804|0);
  $2953 = (($2952) + ($2951<<2)|0);
  HEAPF32[$2953>>2] = 0.0;
  $2954 = $i409;
  $2955 = (($2954) + 1)|0;
  $i409 = $2955;
 }
 $i410 = 0;
 while(1) {
  $2956 = $i410;
  $2957 = ($2956|0)<(3);
  if (!($2957)) {
   break;
  }
  $2958 = $i410;
  $2959 = (($22) + 102572|0);
  $2960 = (($2959) + ($2958<<2)|0);
  HEAPF32[$2960>>2] = 0.0;
  $2961 = $i410;
  $2962 = (($2961) + 1)|0;
  $i410 = $2962;
 }
 $i411 = 0;
 while(1) {
  $2963 = $i411;
  $2964 = ($2963|0)<(8192);
  if (!($2964)) {
   break;
  }
  $2965 = $i411;
  $2966 = (($22) + 102584|0);
  $2967 = (($2966) + ($2965<<2)|0);
  HEAPF32[$2967>>2] = 0.0;
  $2968 = $i411;
  $2969 = (($2968) + 1)|0;
  $i411 = $2969;
 }
 $i412 = 0;
 while(1) {
  $2970 = $i412;
  $2971 = ($2970|0)<(3);
  if (!($2971)) {
   break;
  }
  $2972 = $i412;
  $2973 = (($22) + 135352|0);
  $2974 = (($2973) + ($2972<<2)|0);
  HEAPF32[$2974>>2] = 0.0;
  $2975 = $i412;
  $2976 = (($2975) + 1)|0;
  $i412 = $2976;
 }
 $i413 = 0;
 while(1) {
  $2977 = $i413;
  $2978 = ($2977|0)<(8192);
  if (!($2978)) {
   break;
  }
  $2979 = $i413;
  $2980 = (($22) + 135364|0);
  $2981 = (($2980) + ($2979<<2)|0);
  HEAPF32[$2981>>2] = 0.0;
  $2982 = $i413;
  $2983 = (($2982) + 1)|0;
  $i413 = $2983;
 }
 $i414 = 0;
 while(1) {
  $2984 = $i414;
  $2985 = ($2984|0)<(3);
  if (!($2985)) {
   break;
  }
  $2986 = $i414;
  $2987 = (($22) + 168132|0);
  $2988 = (($2987) + ($2986<<2)|0);
  HEAPF32[$2988>>2] = 0.0;
  $2989 = $i414;
  $2990 = (($2989) + 1)|0;
  $i414 = $2990;
 }
 $i415 = 0;
 while(1) {
  $2991 = $i415;
  $2992 = ($2991|0)<(8192);
  if (!($2992)) {
   break;
  }
  $2993 = $i415;
  $2994 = (($22) + 168144|0);
  $2995 = (($2994) + ($2993<<2)|0);
  HEAPF32[$2995>>2] = 0.0;
  $2996 = $i415;
  $2997 = (($2996) + 1)|0;
  $i415 = $2997;
 }
 $i416 = 0;
 while(1) {
  $2998 = $i416;
  $2999 = ($2998|0)<(3);
  if (!($2999)) {
   break;
  }
  $3000 = $i416;
  $3001 = (($22) + 200912|0);
  $3002 = (($3001) + ($3000<<2)|0);
  HEAPF32[$3002>>2] = 0.0;
  $3003 = $i416;
  $3004 = (($3003) + 1)|0;
  $i416 = $3004;
 }
 $i417 = 0;
 while(1) {
  $3005 = $i417;
  $3006 = ($3005|0)<(8192);
  if (!($3006)) {
   break;
  }
  $3007 = $i417;
  $3008 = (($22) + 200924|0);
  $3009 = (($3008) + ($3007<<2)|0);
  HEAPF32[$3009>>2] = 0.0;
  $3010 = $i417;
  $3011 = (($3010) + 1)|0;
  $i417 = $3011;
 }
 $i418 = 0;
 while(1) {
  $3012 = $i418;
  $3013 = ($3012|0)<(3);
  if (!($3013)) {
   break;
  }
  $3014 = $i418;
  $3015 = (($22) + 233692|0);
  $3016 = (($3015) + ($3014<<2)|0);
  HEAPF32[$3016>>2] = 0.0;
  $3017 = $i418;
  $3018 = (($3017) + 1)|0;
  $i418 = $3018;
 }
 $i419 = 0;
 while(1) {
  $3019 = $i419;
  $3020 = ($3019|0)<(8192);
  if (!($3020)) {
   break;
  }
  $3021 = $i419;
  $3022 = (($22) + 233704|0);
  $3023 = (($3022) + ($3021<<2)|0);
  HEAPF32[$3023>>2] = 0.0;
  $3024 = $i419;
  $3025 = (($3024) + 1)|0;
  $i419 = $3025;
 }
 $i420 = 0;
 while(1) {
  $3026 = $i420;
  $3027 = ($3026|0)<(3);
  if (!($3027)) {
   break;
  }
  $3028 = $i420;
  $3029 = (($22) + 266472|0);
  $3030 = (($3029) + ($3028<<2)|0);
  HEAPF32[$3030>>2] = 0.0;
  $3031 = $i420;
  $3032 = (($3031) + 1)|0;
  $i420 = $3032;
 }
 $i421 = 0;
 while(1) {
  $3033 = $i421;
  $3034 = ($3033|0)<(8192);
  if (!($3034)) {
   break;
  }
  $3035 = $i421;
  $3036 = (($22) + 266484|0);
  $3037 = (($3036) + ($3035<<2)|0);
  HEAPF32[$3037>>2] = 0.0;
  $3038 = $i421;
  $3039 = (($3038) + 1)|0;
  $i421 = $3039;
 }
 $i422 = 0;
 while(1) {
  $3040 = $i422;
  $3041 = ($3040|0)<(3);
  if (!($3041)) {
   break;
  }
  $3042 = $i422;
  $3043 = (($22) + 299252|0);
  $3044 = (($3043) + ($3042<<2)|0);
  HEAPF32[$3044>>2] = 0.0;
  $3045 = $i422;
  $3046 = (($3045) + 1)|0;
  $i422 = $3046;
 }
 $i423 = 0;
 while(1) {
  $3047 = $i423;
  $3048 = ($3047|0)<(8192);
  if (!($3048)) {
   break;
  }
  $3049 = $i423;
  $3050 = (($22) + 299264|0);
  $3051 = (($3050) + ($3049<<2)|0);
  HEAPF32[$3051>>2] = 0.0;
  $3052 = $i423;
  $3053 = (($3052) + 1)|0;
  $i423 = $3053;
 }
 $i424 = 0;
 while(1) {
  $3054 = $i424;
  $3055 = ($3054|0)<(3);
  if (!($3055)) {
   break;
  }
  $3056 = $i424;
  $3057 = (($22) + 332032|0);
  $3058 = (($3057) + ($3056<<2)|0);
  HEAPF32[$3058>>2] = 0.0;
  $3059 = $i424;
  $3060 = (($3059) + 1)|0;
  $i424 = $3060;
 }
 $i425 = 0;
 while(1) {
  $3061 = $i425;
  $3062 = ($3061|0)<(8192);
  if (!($3062)) {
   break;
  }
  $3063 = $i425;
  $3064 = (($22) + 332044|0);
  $3065 = (($3064) + ($3063<<2)|0);
  HEAPF32[$3065>>2] = 0.0;
  $3066 = $i425;
  $3067 = (($3066) + 1)|0;
  $i425 = $3067;
 }
 $i426 = 0;
 while(1) {
  $3068 = $i426;
  $3069 = ($3068|0)<(3);
  if (!($3069)) {
   break;
  }
  $3070 = $i426;
  $3071 = (($22) + 364812|0);
  $3072 = (($3071) + ($3070<<2)|0);
  HEAPF32[$3072>>2] = 0.0;
  $3073 = $i426;
  $3074 = (($3073) + 1)|0;
  $i426 = $3074;
 }
 $i427 = 0;
 while(1) {
  $3075 = $i427;
  $3076 = ($3075|0)<(8192);
  if (!($3076)) {
   break;
  }
  $3077 = $i427;
  $3078 = (($22) + 364824|0);
  $3079 = (($3078) + ($3077<<2)|0);
  HEAPF32[$3079>>2] = 0.0;
  $3080 = $i427;
  $3081 = (($3080) + 1)|0;
  $i427 = $3081;
 }
 $i428 = 0;
 while(1) {
  $3082 = $i428;
  $3083 = ($3082|0)<(3);
  if (!($3083)) {
   break;
  }
  $3084 = $i428;
  $3085 = (($22) + 397592|0);
  $3086 = (($3085) + ($3084<<2)|0);
  HEAPF32[$3086>>2] = 0.0;
  $3087 = $i428;
  $3088 = (($3087) + 1)|0;
  $i428 = $3088;
 }
 $i429 = 0;
 while(1) {
  $3089 = $i429;
  $3090 = ($3089|0)<(8192);
  if (!($3090)) {
   break;
  }
  $3091 = $i429;
  $3092 = (($22) + 397604|0);
  $3093 = (($3092) + ($3091<<2)|0);
  HEAPF32[$3093>>2] = 0.0;
  $3094 = $i429;
  $3095 = (($3094) + 1)|0;
  $i429 = $3095;
 }
 $i430 = 0;
 while(1) {
  $3096 = $i430;
  $3097 = ($3096|0)<(3);
  if (!($3097)) {
   break;
  }
  $3098 = $i430;
  $3099 = (($22) + 430372|0);
  $3100 = (($3099) + ($3098<<2)|0);
  HEAPF32[$3100>>2] = 0.0;
  $3101 = $i430;
  $3102 = (($3101) + 1)|0;
  $i430 = $3102;
 }
 $i431 = 0;
 while(1) {
  $3103 = $i431;
  $3104 = ($3103|0)<(8192);
  if (!($3104)) {
   break;
  }
  $3105 = $i431;
  $3106 = (($22) + 430384|0);
  $3107 = (($3106) + ($3105<<2)|0);
  HEAPF32[$3107>>2] = 0.0;
  $3108 = $i431;
  $3109 = (($3108) + 1)|0;
  $i431 = $3109;
 }
 $i432 = 0;
 while(1) {
  $3110 = $i432;
  $3111 = ($3110|0)<(3);
  if (!($3111)) {
   break;
  }
  $3112 = $i432;
  $3113 = (($22) + 463152|0);
  $3114 = (($3113) + ($3112<<2)|0);
  HEAPF32[$3114>>2] = 0.0;
  $3115 = $i432;
  $3116 = (($3115) + 1)|0;
  $i432 = $3116;
 }
 $i433 = 0;
 while(1) {
  $3117 = $i433;
  $3118 = ($3117|0)<(8192);
  if (!($3118)) {
   break;
  }
  $3119 = $i433;
  $3120 = (($22) + 463164|0);
  $3121 = (($3120) + ($3119<<2)|0);
  HEAPF32[$3121>>2] = 0.0;
  $3122 = $i433;
  $3123 = (($3122) + 1)|0;
  $i433 = $3123;
 }
 $i434 = 0;
 while(1) {
  $3124 = $i434;
  $3125 = ($3124|0)<(3);
  if (!($3125)) {
   break;
  }
  $3126 = $i434;
  $3127 = (($22) + 495932|0);
  $3128 = (($3127) + ($3126<<2)|0);
  HEAPF32[$3128>>2] = 0.0;
  $3129 = $i434;
  $3130 = (($3129) + 1)|0;
  $i434 = $3130;
 }
 $i435 = 0;
 while(1) {
  $3131 = $i435;
  $3132 = ($3131|0)<(8192);
  if (!($3132)) {
   break;
  }
  $3133 = $i435;
  $3134 = (($22) + 495944|0);
  $3135 = (($3134) + ($3133<<2)|0);
  HEAPF32[$3135>>2] = 0.0;
  $3136 = $i435;
  $3137 = (($3136) + 1)|0;
  $i435 = $3137;
 }
 $i436 = 0;
 while(1) {
  $3138 = $i436;
  $3139 = ($3138|0)<(3);
  if (!($3139)) {
   break;
  }
  $3140 = $i436;
  $3141 = (($22) + 528712|0);
  $3142 = (($3141) + ($3140<<2)|0);
  HEAPF32[$3142>>2] = 0.0;
  $3143 = $i436;
  $3144 = (($3143) + 1)|0;
  $i436 = $3144;
 }
 STACKTOP = sp;return;
}
function __Z10faustpowerILi2EEff($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $x;
 $1 = $0;
 $2 = (+Math_pow((+$1),2.0));
 STACKTOP = sp;return (+$2);
}
function __ZN14ReverbDesigner9classInitEi($samplingFreq) {
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $samplingFreq;
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN14ReverbDesignerD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN3dspD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3dspD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3dspC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 $2 = (2104 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN14ReverbDesignerD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(8,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN3dspD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $0;
 __ZN3dspD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3dspD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(10,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch(-1,-1)|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(2856,$4,2912);
 HEAP32[2144>>2] = ((4272 + 12|0));
 HEAP32[((2144 + 8|0))>>2] = ((4272 + 32|0));
 HEAP32[((2144 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(49,(((2144 + 8|0))|0),(2856|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2144 + 8|0)));
  ___resumeException($7|0);
  // unreachable;
 }
 HEAP32[((2144 + 80|0))>>2] = 0;
 HEAP32[((2144 + 84|0))>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 HEAP32[2960>>2] = ((4144 + 8|0));
 __ZNSt3__16localeC2Ev(((2960 + 4|0)));
 ;HEAP32[((2960 + 8|0))+0>>2]=0|0;HEAP32[((2960 + 8|0))+4>>2]=0|0;HEAP32[((2960 + 8|0))+8>>2]=0|0;HEAP32[((2960 + 8|0))+12>>2]=0|0;HEAP32[((2960 + 8|0))+16>>2]=0|0;HEAP32[((2960 + 8|0))+20>>2]=0|0;
 HEAP32[2960>>2] = ((3464 + 8|0));
 HEAP32[((2960 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($3,((2960 + 4|0)));
 __THREW__ = 0;
 $10 = (invoke_iii(15,($3|0),(6944|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  __ZNSt3__16localeD2Ev($3);
  HEAP32[2960>>2] = ((4144 + 8|0));
  __ZNSt3__16localeD2Ev(((2960 + 4|0)));
  ___resumeException($13|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($3);
 HEAP32[((2960 + 36|0))>>2] = $10;
 HEAP32[((2960 + 40|0))>>2] = ((2912 + 8|0));
 $15 = HEAP32[$10>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($10)|0);
 $19 = $18&1;
 HEAP8[((2960 + 44|0))] = $19;
 HEAP32[2232>>2] = ((4352 + 12|0));
 HEAP32[((2232 + 4|0))>>2] = ((4352 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2232 + 4|0))|0),(2960|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(-1,-1)|0;
  $23 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2232 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 HEAP32[((2232 + 76|0))>>2] = 0;
 HEAP32[((2232 + 80|0))>>2] = -1;
 $24 = HEAP32[_stderr>>2]|0;
 HEAP32[3008>>2] = ((4144 + 8|0));
 __ZNSt3__16localeC2Ev(((3008 + 4|0)));
 ;HEAP32[((3008 + 8|0))+0>>2]=0|0;HEAP32[((3008 + 8|0))+4>>2]=0|0;HEAP32[((3008 + 8|0))+8>>2]=0|0;HEAP32[((3008 + 8|0))+12>>2]=0|0;HEAP32[((3008 + 8|0))+16>>2]=0|0;HEAP32[((3008 + 8|0))+20>>2]=0|0;
 HEAP32[3008>>2] = ((3464 + 8|0));
 HEAP32[((3008 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($2,((3008 + 4|0)));
 __THREW__ = 0;
 $25 = (invoke_iii(15,($2|0),(6944|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch(-1,-1)|0;
  $29 = tempRet0;
  __ZNSt3__16localeD2Ev($2);
  HEAP32[3008>>2] = ((4144 + 8|0));
  __ZNSt3__16localeD2Ev(((3008 + 4|0)));
  ___resumeException($28|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($2);
 HEAP32[((3008 + 36|0))>>2] = $25;
 HEAP32[((3008 + 40|0))>>2] = ((2912 + 16|0));
 $30 = HEAP32[$25>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (FUNCTION_TABLE_ii[$32 & 127]($25)|0);
 $34 = $33&1;
 HEAP8[((3008 + 44|0))] = $34;
 HEAP32[2320>>2] = ((4352 + 12|0));
 HEAP32[((2320 + 4|0))>>2] = ((4352 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2320 + 4|0))|0),(3008|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $37 = ___cxa_find_matching_catch(-1,-1)|0;
  $38 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2320 + 4|0)));
  ___resumeException($37|0);
  // unreachable;
 }
 HEAP32[((2320 + 76|0))>>2] = 0;
 HEAP32[((2320 + 80|0))>>2] = -1;
 $39 = HEAP32[2320>>2]|0;
 $40 = (($39) + -12|0);
 $41 = HEAP32[$40>>2]|0;
 $$sum = (($41) + 24)|0;
 $42 = (2320 + ($$sum)|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[2408>>2] = ((4352 + 12|0));
 HEAP32[((2408 + 4|0))>>2] = ((4352 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2408 + 4|0))|0),($43|0));
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $46 = ___cxa_find_matching_catch(-1,-1)|0;
  $47 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2408 + 4|0)));
  ___resumeException($46|0);
  // unreachable;
 }
 HEAP32[((2408 + 76|0))>>2] = 0;
 HEAP32[((2408 + 80|0))>>2] = -1;
 $48 = HEAP32[2144>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum7 = (($50) + 72)|0;
 $51 = (2144 + ($$sum7)|0);
 HEAP32[$51>>2] = 2232;
 $52 = HEAP32[2320>>2]|0;
 $53 = (($52) + -12|0);
 $54 = HEAP32[$53>>2]|0;
 $$sum8 = (($54) + 4)|0;
 $55 = (2320 + ($$sum8)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 | 8192;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[2320>>2]|0;
 $59 = (($58) + -12|0);
 $60 = HEAP32[$59>>2]|0;
 $$sum9 = (($60) + 72)|0;
 $61 = (2320 + ($$sum9)|0);
 HEAP32[$61>>2] = 2232;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(3056,$4,((2912 + 24|0)));
 HEAP32[2496>>2] = ((4312 + 12|0));
 HEAP32[((2496 + 8|0))>>2] = ((4312 + 32|0));
 HEAP32[((2496 + 4|0))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(49,(((2496 + 8|0))|0),(3056|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2496 + 8|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 HEAP32[((2496 + 80|0))>>2] = 0;
 HEAP32[((2496 + 84|0))>>2] = -1;
 HEAP32[3112>>2] = ((4208 + 8|0));
 __ZNSt3__16localeC2Ev(((3112 + 4|0)));
 ;HEAP32[((3112 + 8|0))+0>>2]=0|0;HEAP32[((3112 + 8|0))+4>>2]=0|0;HEAP32[((3112 + 8|0))+8>>2]=0|0;HEAP32[((3112 + 8|0))+12>>2]=0|0;HEAP32[((3112 + 8|0))+16>>2]=0|0;HEAP32[((3112 + 8|0))+20>>2]=0|0;
 HEAP32[3112>>2] = ((3208 + 8|0));
 HEAP32[((3112 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($1,((3112 + 4|0)));
 __THREW__ = 0;
 $66 = (invoke_iii(15,($1|0),(6952|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[3112>>2] = ((4208 + 8|0));
  __ZNSt3__16localeD2Ev(((3112 + 4|0)));
  ___resumeException($69|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($1);
 HEAP32[((3112 + 36|0))>>2] = $66;
 HEAP32[((3112 + 40|0))>>2] = ((2912 + 32|0));
 $71 = HEAP32[$66>>2]|0;
 $72 = (($71) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (FUNCTION_TABLE_ii[$73 & 127]($66)|0);
 $75 = $74&1;
 HEAP8[((3112 + 44|0))] = $75;
 HEAP32[2584>>2] = ((4392 + 12|0));
 HEAP32[((2584 + 4|0))>>2] = ((4392 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2584 + 4|0))|0),(3112|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch(-1,-1)|0;
  $79 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2584 + 4|0)));
  ___resumeException($78|0);
  // unreachable;
 }
 HEAP32[((2584 + 76|0))>>2] = 0;
 HEAP32[((2584 + 80|0))>>2] = -1;
 HEAP32[3160>>2] = ((4208 + 8|0));
 __ZNSt3__16localeC2Ev(((3160 + 4|0)));
 ;HEAP32[((3160 + 8|0))+0>>2]=0|0;HEAP32[((3160 + 8|0))+4>>2]=0|0;HEAP32[((3160 + 8|0))+8>>2]=0|0;HEAP32[((3160 + 8|0))+12>>2]=0|0;HEAP32[((3160 + 8|0))+16>>2]=0|0;HEAP32[((3160 + 8|0))+20>>2]=0|0;
 HEAP32[3160>>2] = ((3208 + 8|0));
 HEAP32[((3160 + 32|0))>>2] = $24;
 __ZNSt3__16localeC2ERKS0_($0,((3160 + 4|0)));
 __THREW__ = 0;
 $80 = (invoke_iii(15,($0|0),(6952|0))|0);
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch(-1,-1)|0;
  $84 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[3160>>2] = ((4208 + 8|0));
  __ZNSt3__16localeD2Ev(((3160 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((3160 + 36|0))>>2] = $80;
 HEAP32[((3160 + 40|0))>>2] = ((2912 + 40|0));
 $85 = HEAP32[$80>>2]|0;
 $86 = (($85) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (FUNCTION_TABLE_ii[$87 & 127]($80)|0);
 $89 = $88&1;
 HEAP8[((3160 + 44|0))] = $89;
 HEAP32[2672>>2] = ((4392 + 12|0));
 HEAP32[((2672 + 4|0))>>2] = ((4392 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2672 + 4|0))|0),(3160|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $92 = ___cxa_find_matching_catch(-1,-1)|0;
  $93 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2672 + 4|0)));
  ___resumeException($92|0);
  // unreachable;
 }
 HEAP32[((2672 + 76|0))>>2] = 0;
 HEAP32[((2672 + 80|0))>>2] = -1;
 $94 = HEAP32[2672>>2]|0;
 $95 = (($94) + -12|0);
 $96 = HEAP32[$95>>2]|0;
 $$sum10 = (($96) + 24)|0;
 $97 = (2672 + ($$sum10)|0);
 $98 = HEAP32[$97>>2]|0;
 HEAP32[2760>>2] = ((4392 + 12|0));
 HEAP32[((2760 + 4|0))>>2] = ((4392 + 32|0));
 __THREW__ = 0;
 invoke_vii(49,(((2760 + 4|0))|0),($98|0));
 $99 = __THREW__; __THREW__ = 0;
 $100 = $99&1;
 if ($100) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  __ZNSt3__18ios_baseD2Ev(((2760 + 4|0)));
  ___resumeException($101|0);
  // unreachable;
 } else {
  HEAP32[((2760 + 76|0))>>2] = 0;
  HEAP32[((2760 + 80|0))>>2] = -1;
  $103 = HEAP32[2496>>2]|0;
  $104 = (($103) + -12|0);
  $105 = HEAP32[$104>>2]|0;
  $$sum11 = (($105) + 72)|0;
  $106 = (2496 + ($$sum11)|0);
  HEAP32[$106>>2] = 2584;
  $107 = HEAP32[2672>>2]|0;
  $108 = (($107) + -12|0);
  $109 = HEAP32[$108>>2]|0;
  $$sum12 = (($109) + 4)|0;
  $110 = (2672 + ($$sum12)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | 8192;
  HEAP32[$110>>2] = $112;
  $113 = HEAP32[2672>>2]|0;
  $114 = (($113) + -12|0);
  $115 = HEAP32[$114>>2]|0;
  $$sum13 = (($115) + 72)|0;
  $116 = (2672 + ($$sum13)|0);
  HEAP32[$116>>2] = 2584;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(66,(2232|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(66,(2408|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(67,(2584|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(67,(2760|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6952)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = (($7) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$$012>>2]|0;
     $11 = (FUNCTION_TABLE_iii[$9 & 31]($this,$10)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $$0 = $__i$03;
      break L1;
     }
     $13 = (($__i$03) + 1)|0;
     $14 = (($$012) + 4|0);
     $15 = ($13|0)<($__n|0);
     if ($15) {
      $$012 = $14;$__i$03 = $13;
     } else {
      $$0 = $13;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = (($this) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
   $$0 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((3320 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(15,($0|0),(6952|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((4208 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(130,(3424|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((4208 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6952)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(3424);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 15]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_fgetc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6944)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 31]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((3576 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 __THREW__ = 0;
 $7 = (invoke_iii(15,($0|0),(6944|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((4144 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 }
 $10 = (($this) + 36|0);
 HEAP32[$10>>2] = $7;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($7)|0);
 $15 = (($this) + 44|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$10>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 127]($16)|0);
 $21 = (($this) + 53|0);
 $22 = $20&1;
 HEAP8[$21] = $22;
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)>(8);
 if (!($24)) {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(130,(3424|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$this>>2] = ((4144 + 8|0));
  __ZNSt3__16localeD2Ev($1);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6944)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(3424);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   } else if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 15]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_fgetc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf]|0;
    HEAP8[$__1buf] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   HEAP8[$__1buf] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (_atexit((131|0),(2848|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(68,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_strlen(($7|0))|0);
 $9 = (($8) + 13)|0;
 __THREW__ = 0;
 $10 = (invoke_ii(68,($9|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($17|0);
  // unreachable;
 } else {
  $13 = (($8) + 1)|0;
  $14 = (($10) + 4|0);
  HEAP32[$14>>2] = $8;
  HEAP32[$10>>2] = $8;
  $15 = (($10) + 12|0);
  HEAP32[$0>>2] = $15;
  $16 = (($10) + 8|0);
  HEAP32[$16>>2] = 0;
  _memcpy(($15|0),($7|0),($13|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 __THREW__ = 0;
 $2 = (invoke_ii(68,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  __ZNSt9exceptionD2Ev(($this|0));
  ___resumeException($10|0);
  // unreachable;
 } else {
  $5 = (($this) + 4|0);
  $6 = (($0) + 1)|0;
  $7 = (($2) + 4|0);
  HEAP32[$7>>2] = $0;
  HEAP32[$2>>2] = $0;
  $8 = (($2) + 12|0);
  HEAP32[$5>>2] = $8;
  $9 = (($2) + 8|0);
  HEAP32[$9>>2] = 0;
  _memcpy(($8|0),($msg|0),($6|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 15]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = ($1>>>0)<(11);
 if ($3) {
  $4 = $1 << 1;
  $5 = $4&255;
  HEAP8[$agg$result] = $5;
  $6 = (($agg$result) + 1|0);
  $__p$0$i$i$i = $6;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($1) + 16)|0;
  $8 = $7 & -16;
  $9 = (__Znwj($8)|0);
  $10 = (($agg$result) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = $8 | 1;
  HEAP32[$agg$result>>2] = $11;
  $12 = (($agg$result) + 4|0);
  HEAP32[$12>>2] = $1;
  $__p$0$i$i$i = $9;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,3904,2)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 15]($0,$13,$17);
   $18 = HEAP8[$0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   (invoke_iiii(24,($what_arg|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if (!($31)) {
    $32 = HEAP8[$0]|0;
    $33 = $32 & 1;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     break;
    }
    $35 = (($0) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    __ZdlPv($36);
    break;
   }
   $37 = ___cxa_find_matching_catch(-1,-1)|0;
   $38 = tempRet0;
   $39 = HEAP8[$0]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    ___resumeException($37|0);
    // unreachable;
   }
   $42 = (($0) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   __ZdlPv($43);
   ___resumeException($37|0);
   // unreachable;
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$1] = $6;
  $7 = (($1) + 1|0);
  $__p$0$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($1) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$1>>2] = $12;
  $13 = (($1) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$i$i$i = $10;
 }
 _memcpy(($__p$0$i$i$i|0),($what_arg|0),($2|0))|0;
 $14 = (($__p$0$i$i$i) + ($2)|0);
 HEAP8[$14] = 0;
 __THREW__ = 0;
 invoke_viii(6,($0|0),($ec|0),($1|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $40 = ___cxa_find_matching_catch(-1,-1)|0;
   $41 = tempRet0;
   $$0 = $41;$$01 = $40;
  } else {
   __THREW__ = 0;
   invoke_vii(50,($this|0),($0|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    $44 = HEAP8[$0]|0;
    $45 = $44 & 1;
    $46 = ($45<<24>>24)==(0);
    if ($46) {
     $$0 = $43;$$01 = $42;
     break;
    }
    $47 = (($0) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    __ZdlPv($48);
    $$0 = $43;$$01 = $42;
    break;
   }
   $19 = HEAP8[$0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if (!($21)) {
    $22 = (($0) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    __ZdlPv($23);
   }
   $24 = HEAP8[$1]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    HEAP32[$this>>2] = ((3912 + 8|0));
    $29 = (($this) + 8|0);
    $30 = $ec;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = $29;
    $37 = $36;
    HEAP32[$37>>2] = $32;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $35;
    STACKTOP = sp;return;
   }
   $27 = (($1) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   __ZdlPv($28);
   HEAP32[$this>>2] = ((3912 + 8|0));
   $29 = (($this) + 8|0);
   $30 = $ec;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = $29;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   STACKTOP = sp;return;
  }
 } while(0);
 $49 = HEAP8[$1]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $52 = (($1) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 __ZdlPv($53);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((4056|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((4080|0),(4056|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((4056|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(69,(4056|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(70,(4056|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(69,(4056|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(71,(4080|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(70,(4056|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(69,(4056|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(71,(4080|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(2);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(3);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(51,($0|0),(4128|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((3800 + 8|0));
  ___cxa_throw(($0|0),(3848|0),(20|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 }
 $3 = (($__str) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__str) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6 << 1;
  $10 = $9&255;
  HEAP8[$this] = $10;
  $11 = (($this) + 1|0);
  $__p$0$i$i = $11;
 } else {
  $12 = (($6) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  $15 = (($this) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  HEAP32[$this>>2] = $16;
  $17 = (($this) + 4|0);
  HEAP32[$17>>2] = $6;
  $__p$0$i$i = $14;
 }
 _memcpy(($__p$0$i$i|0),($4|0),($6|0))|0;
 $18 = (($__p$0$i$i) + ($6)|0);
 HEAP8[$18] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16] = 0;
 $17 = HEAP8[$this]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this] = $22;
  STACKTOP = sp;return ($this|0);
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(72,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = $8 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
    break;
   } else {
    $37 = (($this) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $40 = $8 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $44 = $8&255;
  $45 = $44 >>> 1;
  $47 = $45;
 } else {
  $42 = (($this) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $47 = $43;
 }
 $46 = (($47) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $48 = (($21) + 1)|0;
  $49 = $48 | 1;
  HEAP32[$this>>2] = $49;
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $15;
  $51 = (($this) + 8|0);
  HEAP32[$51>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $52 = $15 << 1;
  $53 = $52&255;
  HEAP8[$this] = $53;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(72,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = $8 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $8 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $45 = $8&255;
  $46 = $45 >>> 1;
  $48 = $46;
 } else {
  $43 = (($this) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $48 = $44;
 }
 $47 = (($48) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$47)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $49 = (($21) + 1)|0;
  $50 = $49 | 1;
  HEAP32[$this>>2] = $50;
  $51 = (($this) + 4|0);
  HEAP32[$51>>2] = $15;
  $52 = (($this) + 8|0);
  HEAP32[$52>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $53 = $15 << 1;
  $54 = $53&255;
  HEAP8[$this] = $54;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 $14 = HEAP8[4496]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((4496|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   HEAP32[4488>>2] = ((5184 + 8|0));
   (_atexit((51|0),(4488|0),(___dso_handle|0))|0);
   ___cxa_guard_release((4496|0));
  }
 }
 $18 = $0;
 $19 = $18;
 HEAP32[$19>>2] = 1;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = (4488);
 __THREW__ = 0;
 ;HEAP32[$tmpcast$i$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$i$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 invoke_viii(7,($13|0),($tmpcast$i$byval_copy|0),(4544|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($24|0);
  // unreachable;
 } else {
  HEAP32[$13>>2] = ((4504 + 8|0));
  ___cxa_throw(($13|0),(4592|0),(47|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4528 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 L1: do {
  if (!($2)) {
   $i$01$i = $1;
   while(1) {
    $3 = (($i$01$i) + -1)|0;
    $4 = HEAP32[$$pre>>2]|0;
    $5 = (($4) + ($3<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = HEAP32[$$pre1>>2]|0;
    $8 = (($7) + ($3<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    __THREW__ = 0;
    invoke_viii($6|0,0,($this|0),($9|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     break;
    }
    $12 = ($3|0)==(0);
    if ($12) {
     break L1;
    } else {
     $i$01$i = $3;
    }
   }
   $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $21 = tempRet0;
   ___clang_call_terminate($20);
   // unreachable;
  }
 } while(0);
 $13 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($13);
 $14 = HEAP32[$$pre>>2]|0;
 _free($14);
 $15 = HEAP32[$$pre1>>2]|0;
 _free($15);
 $16 = (($this) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 _free($17);
 $18 = (($this) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 _free($19);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 31]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 31]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(66,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(52,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(2);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(3);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $$sum10 = (($2) + 72)|0;
   $10 = (($this) + ($$sum10)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   do {
    if ($12) {
     $$pre12 = $2;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(67,($11|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $33 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $34 = tempRet0;
      $$0 = $33;
      break;
     } else {
      $$pre$pre = HEAP32[$this>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$__s] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $15 = (($this) + ($$sum6)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($16|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     $23 = ($20|0)==(-1);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$this>>2]|0;
     $25 = (($24) + -12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (($this) + ($26)|0);
     $$sum9 = (($26) + 16)|0;
     $28 = (($this) + ($$sum9)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $29 | 1;
     __THREW__ = 0;
     invoke_vii(52,($27|0),($30|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      break;
     }
    }
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $36 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $35;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$this>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $$sum7 = (($39) + 16)|0;
   $40 = (($this) + ($$sum7)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 | 1;
   HEAP32[$40>>2] = $42;
   $$sum8 = (($39) + 20)|0;
   $43 = (($this) + ($$sum8)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & 1;
   $46 = ($45|0)==(0);
   if ($46) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(2);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if (!($48)) {
    // unreachable;
   }
   $49 = ___cxa_find_matching_catch(-1,-1)|0;
   $50 = tempRet0;
   __THREW__ = 0;
   invoke_v(3);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $54 = tempRet0;
    ___clang_call_terminate($53);
    // unreachable;
   } else {
    ___resumeException($49|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(52,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(3);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(52,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(3);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (4432|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4448,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024]|0;
    $3 = HEAP8[$$015]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$agg$result] = $6;
  $7 = (($agg$result) + 1|0);
  $__p$0$ph$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($agg$result) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$agg$result>>2] = $12;
  $13 = (($agg$result) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph$i$i$i = $10;
 }
 $14 = ($__lo|0)==($__hi|0);
 if ($14) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $15 = HEAP8[$$02$i$i$i]|0;
  HEAP8[$__p$01$i$i$i] = $15;
  $16 = (($$02$i$i$i) + 1|0);
  $17 = (($__p$01$i$i$i) + 1|0);
  $18 = ($16|0)==($__hi|0);
  if ($18) {
   break;
  } else {
   $$02$i$i$i = $16;$__p$01$i$i$i = $17;
  }
 }
 $19 = (0 - ($0))|0;
 $scevgep$i$i$i = (($__hi) + ($19)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$agg$result] = $7;
  $8 = (($agg$result) + 4|0);
  $__p$0$ph$i$i$i = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($agg$result) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$agg$result>>2] = $14;
  $15 = (($agg$result) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph$i$i$i = $12;
 }
 $16 = ($__lo|0)==($__hi|0);
 if ($16) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $18 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $18;
  $19 = (($$02$i$i$i) + 4|0);
  $20 = (($__p$01$i$i$i) + 4|0);
  $21 = ($19|0)==($__hi|0);
  if ($21) {
   break;
  } else {
   $$02$i$i$i = $19;$__p$01$i$i$i = $20;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $22 = $uglygep4$i$i$i >>> 2;
 $23 = (($22) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($23<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 60|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 56|0;
 $0 = sp + 92|0;
 $1 = sp + 72|0;
 $2 = sp + 76|0;
 $3 = sp + 80|0;
 $4 = sp + 84|0;
 $__names = sp + 32|0;
 $5 = sp + 68|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[6880>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (132);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((6880 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[7024>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 7024;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (132);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(8,(7024|0),($__p$i$i$i$i4|0),(133|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((7024 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(1,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(9,($63|0),(14840|0),(112|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(9,($38|0),(14840|0),(112|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0;
 var $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0;
 var $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(4);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $3;$__st$063 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$064]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$064) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$063] = 2;
    $33 = (($__n_might_match$061) + -1)|0;
    $34 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$063] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $35 = (($__ky$064) + 12|0);
   $36 = (($__st$063) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $35;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i16 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $54;
    }
   } else {
    $$pre$i2$i$i16 = $54;
   }
  }
  $68 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 79;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L44: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     $91 = HEAP8[$__st$133$us]|0;
     $92 = ($91<<24>>24)==(1);
     do {
      if ($92) {
       $93 = HEAP8[$__ky1$036$us]|0;
       $94 = $93 & 1;
       $95 = ($94<<24>>24)==(0);
       if ($95) {
        $98 = (($__ky1$036$us) + 1|0);
        $100 = $98;
       } else {
        $96 = (($__ky1$036$us) + 8|0);
        $97 = HEAP32[$96>>2]|0;
        $100 = $97;
       }
       $99 = (($100) + ($__indx$0)|0);
       $101 = HEAP8[$99]|0;
       $102 = ($__c$0<<24>>24)==($101<<24>>24);
       if (!($102)) {
        HEAP8[$__st$133$us] = 0;
        $103 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $103;
        break;
       }
       if ($95) {
        $106 = $93&255;
        $107 = $106 >>> 1;
        $109 = $107;
       } else {
        $104 = (($__ky1$036$us) + 4|0);
        $105 = HEAP32[$104>>2]|0;
        $109 = $105;
       }
       $108 = ($109|0)==($$pre|0);
       if ($108) {
        HEAP8[$__st$133$us] = 2;
        $110 = (($__n_might_match$331$us) + -1)|0;
        $111 = (($__n_does_match$332$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $111;$__n_might_match$4$us = $110;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $112 = (($__ky1$036$us) + 12|0);
     $113 = ($112|0)==($__ke|0);
     if ($113) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L44;
     }
     $114 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $112;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $114;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     $115 = HEAP8[$__st$133]|0;
     $116 = ($115<<24>>24)==(1);
     do {
      if ($116) {
       $117 = HEAP8[$__ky1$036]|0;
       $118 = $117 & 1;
       $119 = ($118<<24>>24)==(0);
       if ($119) {
        $122 = (($__ky1$036) + 1|0);
        $124 = $122;
       } else {
        $120 = (($__ky1$036) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $124 = $121;
       }
       $123 = (($124) + ($__indx$0)|0);
       $125 = HEAP8[$123]|0;
       $126 = HEAP32[$__ct>>2]|0;
       $127 = (($126) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       __THREW__ = 0;
       $129 = (invoke_iii($128|0,($__ct|0),($125|0))|0);
       $130 = __THREW__; __THREW__ = 0;
       $131 = $130&1;
       if ($131) {
        label = 5;
        break L19;
       }
       $132 = ($__c$0<<24>>24)==($129<<24>>24);
       if (!($132)) {
        HEAP8[$__st$133] = 0;
        $144 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $144;
        break;
       }
       $133 = HEAP8[$__ky1$036]|0;
       $134 = $133 & 1;
       $135 = ($134<<24>>24)==(0);
       if ($135) {
        $138 = $133&255;
        $139 = $138 >>> 1;
        $141 = $139;
       } else {
        $136 = (($__ky1$036) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $141 = $137;
       }
       $140 = ($141|0)==($$pre|0);
       if ($140) {
        HEAP8[$__st$133] = 2;
        $142 = (($__n_might_match$331) + -1)|0;
        $143 = (($__n_does_match$332) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $143;$__n_might_match$4 = $142;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $145 = (($__ky1$036) + 12|0);
     $146 = ($145|0)==($__ke|0);
     if ($146) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L44;
     }
     $147 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $145;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $147;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $148 = HEAP32[$__b>>2]|0;
  $149 = (($148) + 12|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($148) + 16|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($150|0)==($152|0);
  if ($153) {
   $154 = HEAP32[$148>>2]|0;
   $155 = (($154) + 40|0);
   $156 = HEAP32[$155>>2]|0;
   __THREW__ = 0;
   (invoke_ii($156|0,($148|0))|0);
   $157 = __THREW__; __THREW__ = 0;
   $158 = $157&1;
   if ($158) {
    label = 6;
    break;
   }
  } else {
   $159 = (($150) + 1|0);
   HEAP32[$149>>2] = $159;
  }
  $160 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($160>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $161 = HEAP8[$__st$246]|0;
   $162 = ($161<<24>>24)==(2);
   if ($162) {
    $163 = HEAP8[$__ky2$047]|0;
    $164 = $163 & 1;
    $165 = ($164<<24>>24)==(0);
    if ($165) {
     $168 = $163&255;
     $169 = $168 >>> 1;
     $171 = $169;
    } else {
     $166 = (($__ky2$047) + 4|0);
     $167 = HEAP32[$166>>2]|0;
     $171 = $167;
    }
    $170 = ($171|0)==($$pre|0);
    if ($170) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246] = 0;
     $172 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $172;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $173 = (($__ky2$047) + 12|0);
   $174 = (($__st$246) + 1|0);
   $175 = ($173|0)==($__ke|0);
   if ($175) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$047 = $173;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $174;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 79) {
  $176 = ($70|0)==(0|0);
  do {
   if ($176) {
    $190 = 0;
    label = 85;
   } else {
    $177 = (($70) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($70) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$70>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     __THREW__ = 0;
     $185 = (invoke_ii($184|0,($70|0))|0);
     $186 = __THREW__; __THREW__ = 0;
     $187 = $186&1;
     if (!($187)) {
      $188 = ($185|0)==(-1);
      if ($188) {
       HEAP32[$__b>>2] = 0;
       $190 = 0;
       label = 85;
       break;
      } else {
       $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
       $190 = $$pre$i$i$i12;
       label = 85;
       break;
      }
     }
    } else {
     $190 = $70;
     label = 85;
    }
   }
  } while(0);
  L109: do {
   if ((label|0) == 85) {
    $189 = ($190|0)==(0|0);
    do {
     if ($68) {
      label = 91;
     } else {
      $191 = (($$pre$i2$i$i16) + 12|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($$pre$i2$i$i16) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($192|0)==($194|0);
      if (!($195)) {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
      $196 = HEAP32[$$pre$i2$i$i16>>2]|0;
      $197 = (($196) + 36|0);
      $198 = HEAP32[$197>>2]|0;
      __THREW__ = 0;
      $199 = (invoke_ii($198|0,($$pre$i2$i$i16|0))|0);
      $200 = __THREW__; __THREW__ = 0;
      $201 = $200&1;
      if ($201) {
       break L109;
      }
      $202 = ($199|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 91;
       break;
      } else {
       if ($189) {
        break;
       } else {
        label = 93;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 91) {
     if ($189) {
      label = 93;
     }
    }
    if ((label|0) == 93) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L125: do {
     if ($23) {
      label = 98;
     } else {
      $205 = HEAP8[$__status$0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$024 = $__kb;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
       while(1) {
        $210 = (($$02680) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32581) + 1|0);
        if ($211) {
         label = 98;
         break L125;
        }
        $207 = HEAP8[$208]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$024 = $210;
         break;
        } else {
         $$02680 = $210;$__st$32581 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 98) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$024 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$024|0);
    }
    __THREW__ = 0;
    invoke_vi(134,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$024|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(134,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(6,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(7,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(8,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP16[$__v>>1] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(9,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $160 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(10,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAP32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($28|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($28) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($28) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$28>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($28|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $28;
      }
     } else {
      $143 = $28;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 65;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L6;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $10;$$pre$phi34Z2D = $$pre33;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre31 = (($__buf) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i4|0)==(0|0);
    if ($14) {
     $28 = 0;
    } else {
     $15 = (($$pre$i$i$i4) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i4) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i4>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i4|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 37;
       break;
      }
      $26 = ($23|0)==(-1);
      if ($26) {
       HEAP32[$__b>>2] = 0;
       $28 = 0;
      } else {
       $28 = $$pre$i$i$i4;
      }
     } else {
      $28 = $$pre$i$i$i4;
     }
    }
    $27 = ($28|0)==(0|0);
    $29 = HEAP32[$__e>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      label = 21;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if (!($35)) {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + 36|0);
      $38 = HEAP32[$37>>2]|0;
      __THREW__ = 0;
      $39 = (invoke_ii($38|0,($29|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 37;
       break L12;
      }
      $42 = ($39|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 21;
       break;
      } else {
       if ($27) {
        $165 = $29;
        break;
       } else {
        $$pre$i2$i$i = $29;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($27) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 37;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i19 = (($68) + -1)|0;
      $69 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 37;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi32Z2D;
     } else {
      $75 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($28) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($28) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($84|0)==($86|0);
    if ($87) {
     $88 = HEAP32[$28>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     __THREW__ = 0;
     $91 = (invoke_ii($90|0,($28|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 37;
      break;
     } else {
      $$0$i$i = $91;
     }
    } else {
     $94 = HEAP8[$84]|0;
     $95 = $94&255;
     $$0$i$i = $95;
    }
    $96 = $$0$i$i&255;
    $97 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($96,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $$pre$i2$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $99 = HEAP32[$83>>2]|0;
    $100 = HEAP32[$85>>2]|0;
    $101 = ($99|0)==($100|0);
    if ($101) {
     $102 = HEAP32[$28>>2]|0;
     $103 = (($102) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     (invoke_ii($104|0,($28|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $107 = (($99) + 1|0);
     HEAP32[$83>>2] = $107;
     $$pre$i$i$i4 = $28;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $108 = HEAP8[$__grouping]|0;
   $109 = $108 & 1;
   $110 = ($109<<24>>24)==(0);
   if ($110) {
    $113 = $108&255;
    $114 = $113 >>> 1;
    $116 = $114;
   } else {
    $111 = (($__grouping) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $116 = $112;
   }
   $115 = ($116|0)==(0);
   if (!($115)) {
    $117 = HEAP32[$__g_end>>2]|0;
    $118 = $117;
    $119 = $__g;
    $120 = (($118) - ($119))|0;
    $121 = ($120|0)<(160);
    if ($121) {
     $122 = HEAP32[$__dc>>2]|0;
     $123 = (($117) + 4|0);
     HEAP32[$__g_end>>2] = $123;
     HEAP32[$117>>2] = $122;
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (invoke_iiiii(11,($__a$2|0),($124|0),($__err|0),($$0$i|0))|0);
   $126 = tempRet0;
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = $__v;
    $130 = $129;
    HEAP32[$130>>2] = $125;
    $131 = (($129) + 4)|0;
    $132 = $131;
    HEAP32[$132>>2] = $126;
    $133 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$133,$__err);
    $134 = ($28|0)==(0|0);
    if ($134) {
     $148 = 0;
    } else {
     $135 = (($28) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($28) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136|0)==($138|0);
     if ($139) {
      $140 = HEAP32[$28>>2]|0;
      $141 = (($140) + 36|0);
      $142 = HEAP32[$141>>2]|0;
      __THREW__ = 0;
      $143 = (invoke_ii($142|0,($28|0))|0);
      $144 = __THREW__; __THREW__ = 0;
      $145 = $144&1;
      if ($145) {
       break;
      }
      $146 = ($143|0)==(-1);
      if ($146) {
       HEAP32[$__b>>2] = 0;
       $148 = 0;
      } else {
       $148 = $28;
      }
     } else {
      $148 = $28;
     }
    }
    $147 = ($148|0)==(0|0);
    $149 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($149) {
      label = 65;
     } else {
      $150 = (($$pre$i2$i$i) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($$pre$i2$i$i) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151|0)==($153|0);
      if (!($154)) {
       if (!($147)) {
        break;
       }
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $155 = HEAP32[$$pre$i2$i$i>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$pre$i2$i$i|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break L6;
      }
      $161 = ($158|0)==(-1);
      if ($161) {
       HEAP32[$__e>>2] = 0;
       label = 65;
       break;
      }
      $162 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $147 ^ $162;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $148;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 65) {
     if (!($147)) {
      HEAP32[$agg$result>>2] = $148;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $163 = HEAP32[$__err>>2]|0;
    $164 = $163 | 2;
    HEAP32[$__err>>2] = $164;
    HEAP32[$agg$result>>2] = $148;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(1,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF32[$__v>>2] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(2,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $7;$$pre$phi35Z2D = $$pre34;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point]|0;
   $11 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $160 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 33;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i19 = (($66) + -1)|0;
      $67 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 33;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi33Z2D;
     } else {
      $73 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($26) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($26) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($82|0)==($84|0);
    if ($85) {
     $86 = HEAP32[$26>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     __THREW__ = 0;
     $89 = (invoke_ii($88|0,($26|0))|0);
     $90 = __THREW__; __THREW__ = 0;
     $91 = $90&1;
     if ($91) {
      label = 33;
      break;
     } else {
      $$0$i$i = $89;
     }
    } else {
     $92 = HEAP8[$82]|0;
     $93 = $92&255;
     $$0$i$i = $93;
    }
    $94 = $$0$i$i&255;
    $95 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($94,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $96 = ($95|0)==(0);
    if (!($96)) {
     $$pre$i2$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $97 = HEAP32[$81>>2]|0;
    $98 = HEAP32[$83>>2]|0;
    $99 = ($97|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$26>>2]|0;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     (invoke_ii($102|0,($26|0))|0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $105 = (($97) + 1|0);
     HEAP32[$81>>2] = $105;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $106 = HEAP8[$__grouping]|0;
   $107 = $106 & 1;
   $108 = ($107<<24>>24)==(0);
   if ($108) {
    $111 = $106&255;
    $112 = $111 >>> 1;
    $114 = $112;
   } else {
    $109 = (($__grouping) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $114 = $110;
   }
   $113 = ($114|0)==(0);
   if (!($113)) {
    $115 = HEAP8[$__in_units]|0;
    $116 = ($115<<24>>24)==(0);
    if (!($116)) {
     $117 = HEAP32[$__g_end>>2]|0;
     $118 = $117;
     $119 = $__g;
     $120 = (($118) - ($119))|0;
     $121 = ($120|0)<(160);
     if ($121) {
      $122 = HEAP32[$__dc>>2]|0;
      $123 = (($117) + 4|0);
      HEAP32[$__g_end>>2] = $123;
      HEAP32[$117>>2] = $122;
     }
    }
   }
   $124 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $125 = (+invoke_diii(3,($__a$2|0),($124|0),($__err|0)));
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    HEAPF64[$__v>>3] = $125;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($26|0)==(0|0);
    if ($129) {
     $143 = 0;
    } else {
     $130 = (($26) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($26) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$26>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($26|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      }
      $141 = ($138|0)==(-1);
      if ($141) {
       HEAP32[$__b>>2] = 0;
       $143 = 0;
      } else {
       $143 = $26;
      }
     } else {
      $143 = $26;
     }
    }
    $142 = ($143|0)==(0|0);
    $144 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($144) {
      label = 62;
     } else {
      $145 = (($$pre$i2$i$i) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($$pre$i2$i$i) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($146|0)==($148|0);
      if (!($149)) {
       if (!($142)) {
        break;
       }
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $150 = HEAP32[$$pre$i2$i$i>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      __THREW__ = 0;
      $153 = (invoke_ii($152|0,($$pre$i2$i$i|0))|0);
      $154 = __THREW__; __THREW__ = 0;
      $155 = $154&1;
      if ($155) {
       break L1;
      }
      $156 = ($153|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      }
      $157 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $142 ^ $157;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $143;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if (!($142)) {
      HEAP32[$agg$result>>2] = $143;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $158 = HEAP32[$__err>>2]|0;
    $159 = $158 | 2;
    HEAP32[$__err>>2] = $159;
    HEAP32[$agg$result>>2] = $143;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre38 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0;
 var $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i22 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 20|0;
 $__buf = sp + 184|0;
 $__g = sp + 24|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(53,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[6880>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (132);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((6880 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 32|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(5424|0),(((5424 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 44;
      } else {
       $35 = HEAP8[$__buf]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre40 = (($__buf) + 8|0);
        $$pre$phi39Z2D = $40;$$pre$phi41Z2D = $$pre40;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre38 = (($__buf) + 1|0);
        $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 24|0);
       $43 = (($__atoms) + 25|0);
       $44 = $__g;
       $45 = (($__atoms) + 26|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$154 = $__g;$158 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i9|0)==(0|0);
        if ($48) {
         $62 = 0;
        } else {
         $49 = (($$pre$i$i$i9) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i9) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i9>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i9|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 43;
           break;
          }
          $60 = ($57|0)==(-1);
          if ($60) {
           HEAP32[$__b>>2] = 0;
           $62 = 0;
          } else {
           $62 = $$pre$i$i$i9;
          }
         } else {
          $62 = $$pre$i$i$i9;
         }
        }
        $61 = ($62|0)==(0|0);
        $63 = HEAP32[$__e>>2]|0;
        $64 = ($63|0)==(0|0);
        do {
         if ($64) {
          label = 25;
         } else {
          $65 = (($63) + 12|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = (($63) + 16|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($66|0)==($68|0);
          if (!($69)) {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
          $70 = HEAP32[$63>>2]|0;
          $71 = (($70) + 36|0);
          $72 = HEAP32[$71>>2]|0;
          __THREW__ = 0;
          $73 = (invoke_ii($72|0,($63|0))|0);
          $74 = __THREW__; __THREW__ = 0;
          $75 = $74&1;
          if ($75) {
           label = 43;
           break L19;
          }
          $76 = ($73|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 25;
           break;
          } else {
           if ($61) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($61) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(10,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 43;
          break;
         }
         $98 = HEAP8[$__buf]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i22 = (($102) + -1)|0;
          $103 = $phitmp$i22;
         }
         __THREW__ = 0;
         invoke_viii(10,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 43;
          break;
         }
         $106 = HEAP8[$__buf]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi39Z2D;
         } else {
          $109 = HEAP32[$$pre$phi41Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $137 = $110;$__a$1 = $111;
        } else {
         $137 = $78;$__a$1 = $__a$0;
        }
        $122 = (($62) + 12|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($62) + 16|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($123|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$62>>2]|0;
         $128 = (($127) + 36|0);
         $129 = HEAP32[$128>>2]|0;
         __THREW__ = 0;
         $130 = (invoke_ii($129|0,($62|0))|0);
         $131 = __THREW__; __THREW__ = 0;
         $132 = $131&1;
         if ($132) {
          label = 43;
          break;
         } else {
          $$0$i$i = $130;
         }
        } else {
         $133 = HEAP8[$123]|0;
         $134 = $133&255;
         $$0$i$i = $134;
        }
        $135 = $$0$i$i&255;
        $136 = ($137|0)==($__a$1|0);
        do {
         if ($136) {
          $138 = HEAP8[$42]|0;
          $139 = ($138<<24>>24)==($135<<24>>24);
          if (!($139)) {
           $140 = HEAP8[$43]|0;
           $141 = ($140<<24>>24)==($135<<24>>24);
           if (!($141)) {
            label = 53;
            break;
           }
          }
          $142 = $139 ? 43 : 45;
          $143 = (($137) + 1|0);
          HEAP8[$137] = $142;
          $$ph = $143;$$ph31 = $154;$$ph32 = 0;
         } else {
          label = 53;
         }
        } while(0);
        do {
         if ((label|0) == 53) {
          label = 0;
          $144 = HEAP8[$__grouping]|0;
          $145 = $144 & 1;
          $146 = ($145<<24>>24)==(0);
          if ($146) {
           $148 = $144&255;
           $149 = $148 >>> 1;
           $151 = $149;
          } else {
           $147 = HEAP32[$47>>2]|0;
           $151 = $147;
          }
          $150 = ($151|0)!=(0);
          $152 = ($135<<24>>24)==(0);
          $or$cond$i = $150 & $152;
          if ($or$cond$i) {
           $153 = $154;
           $155 = (($153) - ($44))|0;
           $156 = ($155|0)<(160);
           if (!($156)) {
            $$ph = $137;$$ph31 = $154;$$ph32 = $158;
            break;
           }
           $157 = (($154) + 4|0);
           HEAP32[$154>>2] = $158;
           $$ph = $137;$$ph31 = $157;$$ph32 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $161 = HEAP8[$$01$i$i]|0;
           $162 = ($161<<24>>24)==($135<<24>>24);
           $160 = (($$01$i$i) + 1|0);
           if ($162) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $159 = ($160|0)==($45|0);
           if ($159) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $160;
           }
          }
          $163 = $$0$lcssa$i$i;
          $164 = (($163) - ($46))|0;
          $165 = ($164|0)>(23);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($164|0)<(22);
          if ($166) {
           $177 = (5424 + ($164)|0);
           $178 = HEAP8[$177]|0;
           $179 = (($137) + 1|0);
           HEAP8[$137] = $178;
           $180 = (($158) + 1)|0;
           $$ph = $179;$$ph31 = $154;$$ph32 = $180;
           break;
          }
          if ($136) {
           $__a$2 = $137;
           break L19;
          }
          $167 = $137;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($137) + -1|0);
          $172 = HEAP8[$171]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (5424 + ($164)|0);
          $175 = HEAP8[$174]|0;
          $176 = (($137) + 1|0);
          HEAP8[$137] = $175;
          $$ph = $176;$$ph31 = $154;$$ph32 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 43;
          break;
         } else {
          $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 1|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i9 = $181;$154 = $$ph31;$158 = $$ph32;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 43) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193] = 0;
       $194 = HEAP8[6776]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((6776|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((6776|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[6768>>2] = $198;
           ___cxa_guard_release((6776|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[6768>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(12,($__a$2|0),($203|0),(5464|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 44;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $223 = 0;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 44;
           break;
          }
          $221 = ($218|0)==(-1);
          if ($221) {
           HEAP32[$__b>>2] = 0;
           $223 = 0;
          } else {
           $223 = $208;
          }
         } else {
          $223 = $208;
         }
        }
        $222 = ($223|0)==(0|0);
        $224 = HEAP32[$__e>>2]|0;
        $225 = ($224|0)==(0|0);
        do {
         if ($225) {
          label = 90;
         } else {
          $226 = (($224) + 12|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = (($224) + 16|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = ($227|0)==($229|0);
          if (!($230)) {
           if (!($222)) {
            break;
           }
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $231 = HEAP32[$224>>2]|0;
          $232 = (($231) + 36|0);
          $233 = HEAP32[$232>>2]|0;
          __THREW__ = 0;
          $234 = (invoke_ii($233|0,($224|0))|0);
          $235 = __THREW__; __THREW__ = 0;
          $236 = $235&1;
          if ($236) {
           label = 44;
           break L13;
          }
          $237 = ($234|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 90;
           break;
          }
          $238 = ($224|0)==(0|0);
          $tmp$i$i = $222 ^ $238;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $223;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 90) {
         if (!($222)) {
          HEAP32[$agg$result>>2] = $223;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $239 = HEAP32[$__err>>2]|0;
        $240 = $239 | 2;
        HEAP32[$__err>>2] = $240;
        HEAP32[$agg$result>>2] = $223;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 44) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(9,($24|0),(14840|0),(112|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (5424 + ($34)|0);
   $46 = HEAP8[$45]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (5424 + ($34)|0);
 $49 = HEAP8[$48]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf(($__s|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 60|0;
 $__p$i$i$i$i4 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__lv = sp + 56|0;
 $0 = sp + 92|0;
 $1 = sp + 72|0;
 $2 = sp + 76|0;
 $3 = sp + 80|0;
 $4 = sp + 84|0;
 $__names = sp + 32|0;
 $5 = sp + 68|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[6872>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  label = 9;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $20 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$20>>2] = (132);
  $21 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$21>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if (!($23)) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $24 = HEAP32[((6872 + 4|0))>>2]|0;
  $25 = (($24) + -1)|0;
  $26 = (($17) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($17) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $27;
  $31 = $29;
  $32 = (($30) - ($31))|0;
  $33 = $32 >> 2;
  $34 = ($33>>>0)>($25>>>0);
  if ($34) {
   $35 = (($29) + ($25<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    $41 = HEAP32[$3>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
    __ZNKSt3__18ios_base6getlocEv($4,$__iob);
    $42 = HEAP32[$4>>2]|0;
    $43 = HEAP32[7032>>2]|0;
    $44 = ($43|0)==(-1);
    if ($44) {
     label = 15;
    } else {
     HEAP32[$__p$i$i$i$i4>>2] = 7032;
     $45 = (($__p$i$i$i$i4) + 4|0);
     HEAP32[$45>>2] = (132);
     $46 = (($__p$i$i$i$i4) + 8|0);
     HEAP32[$46>>2] = 0;
     __THREW__ = 0;
     invoke_viii(8,(7032|0),($__p$i$i$i$i4|0),(133|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      label = 15;
     }
    }
    if ((label|0) == 15) {
     $49 = HEAP32[((7032 + 4|0))>>2]|0;
     $50 = (($49) + -1)|0;
     $51 = (($42) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($42) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $52;
     $56 = $54;
     $57 = (($55) - ($56))|0;
     $58 = $57 >> 2;
     $59 = ($58>>>0)>($50>>>0);
     if ($59) {
      $60 = (($54) + ($50<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $66 = HEAP32[$4>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($66)|0);
       $67 = HEAP32[$61>>2]|0;
       $68 = (($67) + 24|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       invoke_vii($69|0,($__names|0),($61|0));
       $70 = __THREW__; __THREW__ = 0;
       $71 = $70&1;
       if ($71) {
        $$02 = $__names;
       } else {
        $72 = (($__names) + 12|0);
        $73 = HEAP32[$61>>2]|0;
        $74 = (($73) + 28|0);
        $75 = HEAP32[$74>>2]|0;
        __THREW__ = 0;
        invoke_vii($75|0,($72|0),($61|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $$02 = $72;
        } else {
         $78 = HEAP32[$__e>>2]|0;
         HEAP32[$5>>2] = $78;
         $79 = (($__names) + 24|0);
         __THREW__ = 0;
         ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
         $80 = (invoke_iiiiiiii(2,($__b|0),($$byval_copy2|0),($__names|0),($79|0),($36|0),($__err|0),1)|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $99 = ___cxa_find_matching_catch(-1,-1)|0;
          $100 = tempRet0;
          $101 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($101);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          $$0 = $99;$$01 = $100;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $83 = ($80|0)==($__names|0);
          $84 = $83&1;
          HEAP8[$__v] = $84;
          $85 = HEAP32[$__b>>2]|0;
          HEAP32[$agg$result>>2] = $85;
          $86 = (($__names) + 12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($86);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
          STACKTOP = sp;return;
         }
        }
       }
       $93 = ___cxa_find_matching_catch(-1,-1)|0;
       $94 = tempRet0;
       $95 = ($__names|0)==($$02|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
        ___resumeException($$0|0);
        // unreachable;
       } else {
        $97 = $$02;
       }
       while(1) {
        $96 = (($97) + -12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($96);
        $98 = ($96|0)==($__names|0);
        if ($98) {
         $$0 = $93;$$01 = $94;
         break;
        } else {
         $97 = $96;
        }
       }
       ___resumeException($$0|0);
       // unreachable;
      }
     }
     $63 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(9,($63|0),(14840|0),(112|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if (!($65)) {
      // unreachable;
     }
    }
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $92 = HEAP32[$4>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
    $$0 = $90;$$01 = $91;
    ___resumeException($$0|0);
    // unreachable;
   }
  }
  $38 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($38);
  __THREW__ = 0;
  invoke_viii(9,($38|0),(14840|0),(112|0));
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if (!($40)) {
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch(-1,-1)|0;
 $88 = tempRet0;
 $89 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0;
 var $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0;
 var $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(4);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(-1,-1)|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $3;$__st$067 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$068]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$068) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$067] = 2;
    $33 = (($__n_might_match$065) + -1)|0;
    $34 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$067] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $35 = (($__ky$068) + 12|0);
   $36 = (($__st$067) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $35;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i19 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i19 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   label = 81;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L48: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     $90 = HEAP8[$__st$137$us]|0;
     $91 = ($90<<24>>24)==(1);
     do {
      if ($91) {
       $92 = HEAP8[$__ky1$040$us]|0;
       $93 = $92 & 1;
       $94 = ($93<<24>>24)==(0);
       if ($94) {
        $97 = (($__ky1$040$us) + 4|0);
        $99 = $97;
       } else {
        $95 = (($__ky1$040$us) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $99 = $96;
       }
       $98 = (($99) + ($__indx$0<<2)|0);
       $100 = HEAP32[$98>>2]|0;
       $101 = ($__c$0|0)==($100|0);
       if (!($101)) {
        HEAP8[$__st$137$us] = 0;
        $102 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $102;
        break;
       }
       if ($94) {
        $105 = $92&255;
        $106 = $105 >>> 1;
        $108 = $106;
       } else {
        $103 = (($__ky1$040$us) + 4|0);
        $104 = HEAP32[$103>>2]|0;
        $108 = $104;
       }
       $107 = ($108|0)==($$pre|0);
       if ($107) {
        HEAP8[$__st$137$us] = 2;
        $109 = (($__n_might_match$335$us) + -1)|0;
        $110 = (($__n_does_match$336$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $110;$__n_might_match$4$us = $109;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $111 = (($__ky1$040$us) + 12|0);
     $112 = ($111|0)==($__ke|0);
     if ($112) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L48;
     }
     $113 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $111;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $113;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     $114 = HEAP8[$__st$137]|0;
     $115 = ($114<<24>>24)==(1);
     do {
      if ($115) {
       $116 = HEAP8[$__ky1$040]|0;
       $117 = $116 & 1;
       $118 = ($117<<24>>24)==(0);
       if ($118) {
        $121 = (($__ky1$040) + 4|0);
        $123 = $121;
       } else {
        $119 = (($__ky1$040) + 8|0);
        $120 = HEAP32[$119>>2]|0;
        $123 = $120;
       }
       $122 = (($123) + ($__indx$0<<2)|0);
       $124 = HEAP32[$122>>2]|0;
       $125 = HEAP32[$__ct>>2]|0;
       $126 = (($125) + 28|0);
       $127 = HEAP32[$126>>2]|0;
       __THREW__ = 0;
       $128 = (invoke_iii($127|0,($__ct|0),($124|0))|0);
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       if ($130) {
        label = 5;
        break L19;
       }
       $131 = ($__c$0|0)==($128|0);
       if (!($131)) {
        HEAP8[$__st$137] = 0;
        $143 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $143;
        break;
       }
       $132 = HEAP8[$__ky1$040]|0;
       $133 = $132 & 1;
       $134 = ($133<<24>>24)==(0);
       if ($134) {
        $137 = $132&255;
        $138 = $137 >>> 1;
        $140 = $138;
       } else {
        $135 = (($__ky1$040) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $140 = $136;
       }
       $139 = ($140|0)==($$pre|0);
       if ($139) {
        HEAP8[$__st$137] = 2;
        $141 = (($__n_might_match$335) + -1)|0;
        $142 = (($__n_does_match$336) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $142;$__n_might_match$4 = $141;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $144 = (($__ky1$040) + 12|0);
     $145 = ($144|0)==($__ke|0);
     if ($145) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L48;
     }
     $146 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $144;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $146;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $147 = HEAP32[$__b>>2]|0;
  $148 = (($147) + 12|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 16|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($149|0)==($151|0);
  if ($152) {
   $153 = HEAP32[$147>>2]|0;
   $154 = (($153) + 40|0);
   $155 = HEAP32[$154>>2]|0;
   __THREW__ = 0;
   (invoke_ii($155|0,($147|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    label = 6;
    break;
   }
  } else {
   $158 = (($149) + 4|0);
   HEAP32[$148>>2] = $158;
  }
  $159 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($159>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $160 = HEAP8[$__st$250]|0;
   $161 = ($160<<24>>24)==(2);
   if ($161) {
    $162 = HEAP8[$__ky2$051]|0;
    $163 = $162 & 1;
    $164 = ($163<<24>>24)==(0);
    if ($164) {
     $167 = $162&255;
     $168 = $167 >>> 1;
     $170 = $168;
    } else {
     $165 = (($__ky2$051) + 4|0);
     $166 = HEAP32[$165>>2]|0;
     $170 = $166;
    }
    $169 = ($170|0)==($$pre|0);
    if ($169) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250] = 0;
     $171 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $171;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $172 = (($__ky2$051) + 12|0);
   $173 = (($__st$250) + 1|0);
   $174 = ($172|0)==($__ke|0);
   if ($174) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$051 = $172;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $173;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 81) {
  $175 = ($71|0)==(0|0);
  do {
   if ($175) {
    $219 = 1;
    label = 88;
   } else {
    $176 = (($71) + 12|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($71) + 16|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = ($177|0)==($179|0);
    if ($180) {
     $181 = HEAP32[$71>>2]|0;
     $182 = (($181) + 36|0);
     $183 = HEAP32[$182>>2]|0;
     __THREW__ = 0;
     $184 = (invoke_ii($183|0,($71|0))|0);
     $185 = __THREW__; __THREW__ = 0;
     $186 = $185&1;
     if ($186) {
      break;
     } else {
      $$0$i$i$i$i11 = $184;
     }
    } else {
     $187 = HEAP32[$177>>2]|0;
     $$0$i$i$i$i11 = $187;
    }
    $188 = ($$0$i$i$i$i11|0)==(-1);
    if ($188) {
     HEAP32[$__b>>2] = 0;
     $219 = 1;
     label = 88;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $219 = $phitmp$i$i$i14;
     label = 88;
     break;
    }
   }
  } while(0);
  L114: do {
   if ((label|0) == 88) {
    $189 = ($$pre$i3$i$i19|0)==(0|0);
    do {
     if ($189) {
      label = 94;
     } else {
      $190 = (($$pre$i3$i$i19) + 12|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($$pre$i3$i$i19) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($191|0)==($193|0);
      if ($194) {
       $195 = HEAP32[$$pre$i3$i$i19>>2]|0;
       $196 = (($195) + 36|0);
       $197 = HEAP32[$196>>2]|0;
       __THREW__ = 0;
       $198 = (invoke_ii($197|0,($$pre$i3$i$i19|0))|0);
       $199 = __THREW__; __THREW__ = 0;
       $200 = $199&1;
       if ($200) {
        break L114;
       } else {
        $$0$i$i1$i$i17 = $198;
       }
      } else {
       $201 = HEAP32[$191>>2]|0;
       $$0$i$i1$i$i17 = $201;
      }
      $202 = ($$0$i$i1$i$i17|0)==(-1);
      if ($202) {
       HEAP32[$__e>>2] = 0;
       label = 94;
       break;
      } else {
       if ($219) {
        break;
       } else {
        label = 96;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 94) {
     if ($219) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $203 = HEAP32[$__err>>2]|0;
     $204 = $203 | 2;
     HEAP32[$__err>>2] = $204;
    }
    L130: do {
     if ($23) {
      label = 101;
     } else {
      $205 = HEAP8[$__status$0]|0;
      $206 = ($205<<24>>24)==(2);
      if ($206) {
       $$028 = $__kb;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
       while(1) {
        $210 = (($$03082) + 12|0);
        $211 = ($210|0)==($__ke|0);
        $208 = (($__st$32983) + 1|0);
        if ($211) {
         label = 101;
         break L130;
        }
        $207 = HEAP8[$208]|0;
        $209 = ($207<<24>>24)==(2);
        if ($209) {
         $$028 = $210;
         break;
        } else {
         $$03082 = $210;$__st$32983 = $208;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $212 = HEAP32[$__err>>2]|0;
     $213 = $212 | 4;
     HEAP32[$__err>>2] = $213;
     $$028 = $__ke;
    }
    $214 = ($18|0)==(0|0);
    if ($214) {
     STACKTOP = sp;return ($$028|0);
    }
    __THREW__ = 0;
    invoke_vi(134,($18|0));
    $215 = __THREW__; __THREW__ = 0;
    $216 = $215&1;
    if ($216) {
     $217 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $218 = tempRet0;
     ___clang_call_terminate($217);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$028|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(134,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(6,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(7,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(8,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP16[$__v>>1] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(9,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $159 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$84 = 0;
     } else {
      $159 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($159) {
        $160 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(10,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAP32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($84|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($84) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($84) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$84>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($84|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $84;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 67;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L6;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L6: do {
  if (!($4)) {
   $5 = HEAP8[$__buf]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $10;$$pre$phi36Z2D = $$pre35;$11 = $10;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $8;$11 = $9;
   }
   HEAP32[$__a_end>>2] = $11;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $12 = (($__buf) + 4|0);
   $13 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $11;
   L12: while(1) {
    $14 = ($$pre$i$i$i5|0)==(0|0);
    if ($14) {
     $164 = 1;$84 = 0;
    } else {
     $15 = (($$pre$i$i$i5) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($$pre$i$i$i5) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($16|0)==($18|0);
     if ($19) {
      $20 = HEAP32[$$pre$i$i$i5>>2]|0;
      $21 = (($20) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      __THREW__ = 0;
      $23 = (invoke_ii($22|0,($$pre$i$i$i5|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       label = 38;
       break;
      } else {
       $$0$i$i$i$i3 = $23;
      }
     } else {
      $26 = HEAP32[$16>>2]|0;
      $$0$i$i$i$i3 = $26;
     }
     $27 = ($$0$i$i$i$i3|0)==(-1);
     if ($27) {
      HEAP32[$__b>>2] = 0;
      $164 = 1;$84 = 0;
     } else {
      $164 = 0;$84 = $$pre$i$i$i5;
     }
    }
    $28 = HEAP32[$__e>>2]|0;
    $29 = ($28|0)==(0|0);
    do {
     if ($29) {
      label = 22;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       __THREW__ = 0;
       $38 = (invoke_ii($37|0,($28|0))|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $38;
       }
      } else {
       $41 = HEAP32[$31>>2]|0;
       $$0$i$i1$i$i9 = $41;
      }
      $42 = ($$0$i$i1$i$i9|0)==(-1);
      if ($42) {
       HEAP32[$__e>>2] = 0;
       label = 22;
       break;
      } else {
       if ($164) {
        $165 = $28;
        break;
       } else {
        $$pre$i3$i$i = $28;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($164) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $165 = 0;
     }
    }
    $43 = HEAP32[$__a_end>>2]|0;
    $44 = $43;
    $45 = $__a$0;
    $46 = (($44) - ($45))|0;
    $47 = HEAP8[$__buf]|0;
    $48 = $47 & 1;
    $49 = ($48<<24>>24)==(0);
    if ($49) {
     $51 = $47&255;
     $52 = $51 >>> 1;
     $54 = $52;
    } else {
     $50 = HEAP32[$12>>2]|0;
     $54 = $50;
    }
    $53 = ($46|0)==($54|0);
    if ($53) {
     if ($49) {
      $56 = $47&255;
      $57 = $56 >>> 1;
      $58 = $47&255;
      $59 = $58 >>> 1;
      $61 = $59;$78 = $57;
     } else {
      $55 = HEAP32[$12>>2]|0;
      $61 = $55;$78 = $55;
     }
     $60 = $61 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($60|0),0);
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      label = 38;
      break;
     }
     $64 = HEAP8[$__buf]|0;
     $65 = $64 & 1;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $69 = 10;
     } else {
      $67 = HEAP32[$__buf>>2]|0;
      $68 = $67 & -2;
      $phitmp$i23 = (($68) + -1)|0;
      $69 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($69|0),0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 38;
      break;
     }
     $72 = HEAP8[$__buf]|0;
     $73 = $72 & 1;
     $74 = ($73<<24>>24)==(0);
     if ($74) {
      $77 = $$pre$phi34Z2D;
     } else {
      $75 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $77 = $75;
     }
     $76 = (($77) + ($78)|0);
     HEAP32[$__a_end>>2] = $76;
     $__a$1 = $77;
    } else {
     $__a$1 = $__a$0;
    }
    $83 = (($84) + 12|0);
    $85 = HEAP32[$83>>2]|0;
    $86 = (($84) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($85|0)==($87|0);
    if ($88) {
     $89 = HEAP32[$84>>2]|0;
     $90 = (($89) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     __THREW__ = 0;
     $92 = (invoke_ii($91|0,($84|0))|0);
     $93 = __THREW__; __THREW__ = 0;
     $94 = $93&1;
     if ($94) {
      label = 38;
      break;
     } else {
      $$0$i$i = $92;
     }
    } else {
     $95 = HEAP32[$85>>2]|0;
     $$0$i$i = $95;
    }
    $96 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$13,$__grouping,$__g,$__g_end,$__atoms)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $$pre$i3$i$i = $165;$__a$2 = $__a$1;
     break;
    }
    $98 = HEAP32[$83>>2]|0;
    $99 = HEAP32[$86>>2]|0;
    $100 = ($98|0)==($99|0);
    if ($100) {
     $101 = HEAP32[$84>>2]|0;
     $102 = (($101) + 40|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     (invoke_ii($103|0,($84|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $106 = (($98) + 4|0);
     HEAP32[$83>>2] = $106;
     $$pre$i$i$i5 = $84;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $79 = ___cxa_find_matching_catch(-1,-1)|0;
    $80 = tempRet0;
    $lpad$phi$index = $79;$lpad$phi$index2 = $80;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $107 = HEAP8[$__grouping]|0;
   $108 = $107 & 1;
   $109 = ($108<<24>>24)==(0);
   if ($109) {
    $112 = $107&255;
    $113 = $112 >>> 1;
    $115 = $113;
   } else {
    $110 = (($__grouping) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $115 = $111;
   }
   $114 = ($115|0)==(0);
   if (!($114)) {
    $116 = HEAP32[$__g_end>>2]|0;
    $117 = $116;
    $118 = $__g;
    $119 = (($117) - ($118))|0;
    $120 = ($119|0)<(160);
    if ($120) {
     $121 = HEAP32[$__dc>>2]|0;
     $122 = (($116) + 4|0);
     HEAP32[$__g_end>>2] = $122;
     HEAP32[$116>>2] = $121;
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (invoke_iiiii(11,($__a$2|0),($123|0),($__err|0),($$0$i|0))|0);
   $125 = tempRet0;
   $126 = __THREW__; __THREW__ = 0;
   $127 = $126&1;
   if (!($127)) {
    $128 = $__v;
    $129 = $128;
    HEAP32[$129>>2] = $124;
    $130 = (($128) + 4)|0;
    $131 = $130;
    HEAP32[$131>>2] = $125;
    $132 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$132,$__err);
    $133 = ($84|0)==(0|0);
    if ($133) {
     $163 = 0;$166 = 1;
    } else {
     $134 = (($84) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($84) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$84>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      __THREW__ = 0;
      $142 = (invoke_ii($141|0,($84|0))|0);
      $143 = __THREW__; __THREW__ = 0;
      $144 = $143&1;
      if ($144) {
       break;
      } else {
       $$0$i$i$i$i = $142;
      }
     } else {
      $145 = HEAP32[$135>>2]|0;
      $$0$i$i$i$i = $145;
     }
     $146 = ($$0$i$i$i$i|0)==(-1);
     if ($146) {
      HEAP32[$__b>>2] = 0;
      $163 = 0;$166 = 1;
     } else {
      $163 = $84;$166 = 0;
     }
    }
    $147 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($147) {
      label = 67;
     } else {
      $148 = (($$pre$i3$i$i) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($$pre$i3$i$i) + 16|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($149|0)==($151|0);
      if ($152) {
       $153 = HEAP32[$$pre$i3$i$i>>2]|0;
       $154 = (($153) + 36|0);
       $155 = HEAP32[$154>>2]|0;
       __THREW__ = 0;
       $156 = (invoke_ii($155|0,($$pre$i3$i$i|0))|0);
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        break L6;
       } else {
        $$0$i$i1$i$i = $156;
       }
      } else {
       $159 = HEAP32[$149>>2]|0;
       $$0$i$i1$i$i = $159;
      }
      $160 = ($$0$i$i1$i$i|0)==(-1);
      if ($160) {
       HEAP32[$__e>>2] = 0;
       label = 67;
       break;
      }
      if ($166) {
       HEAP32[$agg$result>>2] = $163;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 67) {
     if (!($166)) {
      HEAP32[$agg$result>>2] = $163;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $161 = HEAP32[$__err>>2]|0;
    $162 = $161 | 2;
    HEAP32[$__err>>2] = $162;
    HEAP32[$agg$result>>2] = $163;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $81 = ___cxa_find_matching_catch(-1,-1)|0;
 $82 = tempRet0;
 $lpad$phi$index = $81;$lpad$phi$index2 = $82;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(1,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF32[$__v>>2] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(2,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(10,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $7;$$pre$phi37Z2D = $$pre36;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre34 = (($__buf) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $159 = 1;$82 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $159 = 1;$82 = 0;
     } else {
      $159 = 0;$82 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($159) {
        $160 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($159) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $160 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = $41;
    $43 = $__a$0;
    $44 = (($42) - ($43))|0;
    $45 = HEAP8[$__buf]|0;
    $46 = $45 & 1;
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     $49 = $45&255;
     $50 = $49 >>> 1;
     $52 = $50;
    } else {
     $48 = HEAP32[$9>>2]|0;
     $52 = $48;
    }
    $51 = ($44|0)==($52|0);
    if ($51) {
     if ($47) {
      $54 = $45&255;
      $55 = $54 >>> 1;
      $56 = $45&255;
      $57 = $56 >>> 1;
      $59 = $57;$76 = $55;
     } else {
      $53 = HEAP32[$9>>2]|0;
      $59 = $53;$76 = $53;
     }
     $58 = $59 << 1;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($58|0),0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 34;
      break;
     }
     $62 = HEAP8[$__buf]|0;
     $63 = $62 & 1;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $67 = 10;
     } else {
      $65 = HEAP32[$__buf>>2]|0;
      $66 = $65 & -2;
      $phitmp$i23 = (($66) + -1)|0;
      $67 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),($67|0),0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 34;
      break;
     }
     $70 = HEAP8[$__buf]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = $$pre$phi35Z2D;
     } else {
      $73 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $75 = $73;
     }
     $74 = (($75) + ($76)|0);
     HEAP32[$__a_end>>2] = $74;
     $__a$1 = $75;
    } else {
     $__a$1 = $__a$0;
    }
    $81 = (($82) + 12|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = (($82) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($83|0)==($85|0);
    if ($86) {
     $87 = HEAP32[$82>>2]|0;
     $88 = (($87) + 36|0);
     $89 = HEAP32[$88>>2]|0;
     __THREW__ = 0;
     $90 = (invoke_ii($89|0,($82|0))|0);
     $91 = __THREW__; __THREW__ = 0;
     $92 = $91&1;
     if ($92) {
      label = 34;
      break;
     } else {
      $$0$i$i = $90;
     }
    } else {
     $93 = HEAP32[$83>>2]|0;
     $$0$i$i = $93;
    }
    $94 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $95 = ($94|0)==(0);
    if (!($95)) {
     $$pre$i3$i$i = $160;$__a$2 = $__a$1;
     break;
    }
    $96 = HEAP32[$81>>2]|0;
    $97 = HEAP32[$84>>2]|0;
    $98 = ($96|0)==($97|0);
    if ($98) {
     $99 = HEAP32[$82>>2]|0;
     $100 = (($99) + 40|0);
     $101 = HEAP32[$100>>2]|0;
     __THREW__ = 0;
     (invoke_ii($101|0,($82|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $104 = (($96) + 4|0);
     HEAP32[$81>>2] = $104;
     $$pre$i$i$i5 = $82;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $77 = ___cxa_find_matching_catch(-1,-1)|0;
    $78 = tempRet0;
    $lpad$phi$index = $77;$lpad$phi$index2 = $78;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $105 = HEAP8[$__grouping]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $110 = $105&255;
    $111 = $110 >>> 1;
    $113 = $111;
   } else {
    $108 = (($__grouping) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $113 = $109;
   }
   $112 = ($113|0)==(0);
   if (!($112)) {
    $114 = HEAP8[$__in_units]|0;
    $115 = ($114<<24>>24)==(0);
    if (!($115)) {
     $116 = HEAP32[$__g_end>>2]|0;
     $117 = $116;
     $118 = $__g;
     $119 = (($117) - ($118))|0;
     $120 = ($119|0)<(160);
     if ($120) {
      $121 = HEAP32[$__dc>>2]|0;
      $122 = (($116) + 4|0);
      HEAP32[$__g_end>>2] = $122;
      HEAP32[$116>>2] = $121;
     }
    }
   }
   $123 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $124 = (+invoke_diii(3,($__a$2|0),($123|0),($__err|0)));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if (!($126)) {
    HEAPF64[$__v>>3] = $124;
    $127 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$127,$__err);
    $128 = ($82|0)==(0|0);
    if ($128) {
     $158 = 0;$161 = 1;
    } else {
     $129 = (($82) + 12|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($82) + 16|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($130|0)==($132|0);
     if ($133) {
      $134 = HEAP32[$82>>2]|0;
      $135 = (($134) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      __THREW__ = 0;
      $137 = (invoke_ii($136|0,($82|0))|0);
      $138 = __THREW__; __THREW__ = 0;
      $139 = $138&1;
      if ($139) {
       break;
      } else {
       $$0$i$i$i$i = $137;
      }
     } else {
      $140 = HEAP32[$130>>2]|0;
      $$0$i$i$i$i = $140;
     }
     $141 = ($$0$i$i$i$i|0)==(-1);
     if ($141) {
      HEAP32[$__b>>2] = 0;
      $158 = 0;$161 = 1;
     } else {
      $158 = $82;$161 = 0;
     }
    }
    $142 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 64;
     } else {
      $143 = (($$pre$i3$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i3$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if ($147) {
       $148 = HEAP32[$$pre$i3$i$i>>2]|0;
       $149 = (($148) + 36|0);
       $150 = HEAP32[$149>>2]|0;
       __THREW__ = 0;
       $151 = (invoke_ii($150|0,($$pre$i3$i$i|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       $153 = $152&1;
       if ($153) {
        break L1;
       } else {
        $$0$i$i1$i$i = $151;
       }
      } else {
       $154 = HEAP32[$144>>2]|0;
       $$0$i$i1$i$i = $154;
      }
      $155 = ($$0$i$i1$i$i|0)==(-1);
      if ($155) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      }
      if ($161) {
       HEAP32[$agg$result>>2] = $158;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if (!($161)) {
      HEAP32[$agg$result>>2] = $158;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $158;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $lpad$phi$index = $79;$lpad$phi$index2 = $80;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__atoms = sp + 200|0;
 $__grouping = sp + 304|0;
 $0 = sp + 32|0;
 $__buf = sp + 20|0;
 $__g = sp + 40|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(53,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  $$0 = $113;$$01 = $114;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[6872>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 4;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $6 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$6>>2] = (132);
  $7 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$7>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $10 = HEAP32[((6872 + 4|0))>>2]|0;
   $11 = (($10) + -1)|0;
   $12 = (($3) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($3) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $13;
   $17 = $15;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($19>>>0)>($11>>>0);
   if ($20) {
    $21 = (($15) + ($11<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $27 = HEAP32[$22>>2]|0;
     $28 = (($27) + 48|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($29|0,($22|0),(5424|0),(((5424 + 26|0))|0),($__atoms|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     $32 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(10,($__buf|0),10,0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     L13: do {
      if ($34) {
       label = 45;
      } else {
       $35 = HEAP8[$__buf]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $40 = (($__buf) + 1|0);
        $$pre42 = (($__buf) + 8|0);
        $$pre$phi41Z2D = $40;$$pre$phi43Z2D = $$pre42;$241 = $40;
       } else {
        $38 = (($__buf) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $$pre40 = (($__buf) + 1|0);
        $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $38;$241 = $39;
       }
       $41 = (($__buf) + 4|0);
       $42 = (($__atoms) + 96|0);
       $43 = (($__atoms) + 100|0);
       $44 = $__g;
       $45 = (($__atoms) + 104|0);
       $46 = $__atoms;
       $47 = (($__grouping) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i10 = $$pre;$153 = $__g;$157 = 0;$78 = $241;$__a$0 = $241;
       L19: while(1) {
        $48 = ($$pre$i$i$i10|0)==(0|0);
        if ($48) {
         $123 = 0;$242 = 1;
        } else {
         $49 = (($$pre$i$i$i10) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($$pre$i$i$i10) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$$pre$i$i$i10>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          __THREW__ = 0;
          $57 = (invoke_ii($56|0,($$pre$i$i$i10|0))|0);
          $58 = __THREW__; __THREW__ = 0;
          $59 = $58&1;
          if ($59) {
           label = 44;
           break;
          } else {
           $$0$i$i$i$i8 = $57;
          }
         } else {
          $60 = HEAP32[$50>>2]|0;
          $$0$i$i$i$i8 = $60;
         }
         $61 = ($$0$i$i$i$i8|0)==(-1);
         if ($61) {
          HEAP32[$__b>>2] = 0;
          $123 = 0;$242 = 1;
         } else {
          $123 = $$pre$i$i$i10;$242 = 0;
         }
        }
        $62 = HEAP32[$__e>>2]|0;
        $63 = ($62|0)==(0|0);
        do {
         if ($63) {
          label = 26;
         } else {
          $64 = (($62) + 12|0);
          $65 = HEAP32[$64>>2]|0;
          $66 = (($62) + 16|0);
          $67 = HEAP32[$66>>2]|0;
          $68 = ($65|0)==($67|0);
          if ($68) {
           $69 = HEAP32[$62>>2]|0;
           $70 = (($69) + 36|0);
           $71 = HEAP32[$70>>2]|0;
           __THREW__ = 0;
           $72 = (invoke_ii($71|0,($62|0))|0);
           $73 = __THREW__; __THREW__ = 0;
           $74 = $73&1;
           if ($74) {
            label = 44;
            break L19;
           } else {
            $$0$i$i1$i$i14 = $72;
           }
          } else {
           $75 = HEAP32[$65>>2]|0;
           $$0$i$i1$i$i14 = $75;
          }
          $76 = ($$0$i$i1$i$i14|0)==(-1);
          if ($76) {
           HEAP32[$__e>>2] = 0;
           label = 26;
           break;
          } else {
           if ($242) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($242) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $77 = $78;
        $79 = $__a$0;
        $80 = (($77) - ($79))|0;
        $81 = HEAP8[$__buf]|0;
        $82 = $81 & 1;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         $85 = $81&255;
         $86 = $85 >>> 1;
         $88 = $86;
        } else {
         $84 = HEAP32[$41>>2]|0;
         $88 = $84;
        }
        $87 = ($80|0)==($88|0);
        if ($87) {
         if ($83) {
          $90 = $81&255;
          $91 = $90 >>> 1;
          $92 = $81&255;
          $93 = $92 >>> 1;
          $112 = $91;$95 = $93;
         } else {
          $89 = HEAP32[$41>>2]|0;
          $112 = $89;$95 = $89;
         }
         $94 = $95 << 1;
         __THREW__ = 0;
         invoke_viii(10,($__buf|0),($94|0),0);
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 44;
          break;
         }
         $98 = HEAP8[$__buf]|0;
         $99 = $98 & 1;
         $100 = ($99<<24>>24)==(0);
         if ($100) {
          $103 = 10;
         } else {
          $101 = HEAP32[$__buf>>2]|0;
          $102 = $101 & -2;
          $phitmp$i26 = (($102) + -1)|0;
          $103 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(10,($__buf|0),($103|0),0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 44;
          break;
         }
         $106 = HEAP8[$__buf]|0;
         $107 = $106 & 1;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $111 = $$pre$phi41Z2D;
         } else {
          $109 = HEAP32[$$pre$phi43Z2D>>2]|0;
          $111 = $109;
         }
         $110 = (($111) + ($112)|0);
         $136 = $110;$__a$1 = $111;
        } else {
         $136 = $78;$__a$1 = $__a$0;
        }
        $122 = (($123) + 12|0);
        $124 = HEAP32[$122>>2]|0;
        $125 = (($123) + 16|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($124|0)==($126|0);
        if ($127) {
         $128 = HEAP32[$123>>2]|0;
         $129 = (($128) + 36|0);
         $130 = HEAP32[$129>>2]|0;
         __THREW__ = 0;
         $131 = (invoke_ii($130|0,($123|0))|0);
         $132 = __THREW__; __THREW__ = 0;
         $133 = $132&1;
         if ($133) {
          label = 44;
          break;
         } else {
          $$0$i$i = $131;
         }
        } else {
         $134 = HEAP32[$124>>2]|0;
         $$0$i$i = $134;
        }
        $135 = ($136|0)==($__a$1|0);
        do {
         if ($135) {
          $137 = HEAP32[$42>>2]|0;
          $138 = ($137|0)==($$0$i$i|0);
          if (!($138)) {
           $139 = HEAP32[$43>>2]|0;
           $140 = ($139|0)==($$0$i$i|0);
           if (!($140)) {
            label = 54;
            break;
           }
          }
          $141 = $138 ? 43 : 45;
          $142 = (($136) + 1|0);
          HEAP8[$136] = $141;
          $$ph = $142;$$ph34 = $153;$$ph35 = 0;
         } else {
          label = 54;
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          label = 0;
          $143 = HEAP8[$__grouping]|0;
          $144 = $143 & 1;
          $145 = ($144<<24>>24)==(0);
          if ($145) {
           $147 = $143&255;
           $148 = $147 >>> 1;
           $150 = $148;
          } else {
           $146 = HEAP32[$47>>2]|0;
           $150 = $146;
          }
          $149 = ($150|0)!=(0);
          $151 = ($$0$i$i|0)==(0);
          $or$cond$i = $149 & $151;
          if ($or$cond$i) {
           $152 = $153;
           $154 = (($152) - ($44))|0;
           $155 = ($154|0)<(160);
           if (!($155)) {
            $$ph = $136;$$ph34 = $153;$$ph35 = $157;
            break;
           }
           $156 = (($153) + 4|0);
           HEAP32[$153>>2] = $157;
           $$ph = $136;$$ph34 = $156;$$ph35 = 0;
           break;
          } else {
           $$01$i$i = $__atoms;
          }
          while(1) {
           $160 = HEAP32[$$01$i$i>>2]|0;
           $161 = ($160|0)==($$0$i$i|0);
           $159 = (($$01$i$i) + 4|0);
           if ($161) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $158 = ($159|0)==($45|0);
           if ($158) {
            $$0$lcssa$i$i = $45;
            break;
           } else {
            $$01$i$i = $159;
           }
          }
          $162 = $$0$lcssa$i$i;
          $163 = (($162) - ($46))|0;
          $164 = $163 >> 2;
          $165 = ($163|0)>(92);
          if ($165) {
           $__a$2 = $__a$1;
           break L19;
          }
          $166 = ($163|0)<(88);
          if ($166) {
           $177 = (5424 + ($164)|0);
           $178 = HEAP8[$177]|0;
           $179 = (($136) + 1|0);
           HEAP8[$136] = $178;
           $180 = (($157) + 1)|0;
           $$ph = $179;$$ph34 = $153;$$ph35 = $180;
           break;
          }
          if ($135) {
           $__a$2 = $136;
           break L19;
          }
          $167 = $136;
          $168 = $__a$1;
          $169 = (($167) - ($168))|0;
          $170 = ($169|0)<(3);
          if (!($170)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $171 = (($136) + -1|0);
          $172 = HEAP8[$171]|0;
          $173 = ($172<<24>>24)==(48);
          if (!($173)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $174 = (5424 + ($164)|0);
          $175 = HEAP8[$174]|0;
          $176 = (($136) + 1|0);
          HEAP8[$136] = $175;
          $$ph = $176;$$ph34 = $153;$$ph35 = 0;
         }
        } while(0);
        $181 = HEAP32[$__b>>2]|0;
        $182 = (($181) + 12|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (($181) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($183|0)==($185|0);
        if ($186) {
         $187 = HEAP32[$181>>2]|0;
         $188 = (($187) + 40|0);
         $189 = HEAP32[$188>>2]|0;
         __THREW__ = 0;
         (invoke_ii($189|0,($181|0))|0);
         $190 = __THREW__; __THREW__ = 0;
         $191 = $190&1;
         if ($191) {
          label = 44;
          break;
         } else {
          $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $192 = (($183) + 4|0);
         HEAP32[$182>>2] = $192;
         $$pre$i$i$i10 = $181;$153 = $$ph34;$157 = $$ph35;$78 = $$ph;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 44) {
        $118 = ___cxa_find_matching_catch(-1,-1)|0;
        $119 = tempRet0;
        $eh$lpad$body$index3Z2D = $119;$eh$lpad$body$indexZ2D = $118;
        break;
       }
       $193 = (($__a$2) + 3|0);
       HEAP8[$193] = 0;
       $194 = HEAP8[6776]|0;
       $195 = ($194<<24>>24)==(0);
       do {
        if ($195) {
         $196 = (___cxa_guard_acquire((6776|0))|0);
         $197 = ($196|0)==(0);
         if (!($197)) {
          __THREW__ = 0;
          $198 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
          $199 = __THREW__; __THREW__ = 0;
          $200 = $199&1;
          if ($200) {
           $201 = ___cxa_find_matching_catch(-1,-1)|0;
           $202 = tempRet0;
           ___cxa_guard_abort((6776|0));
           $eh$lpad$body$index3Z2D = $202;$eh$lpad$body$indexZ2D = $201;
           break L13;
          } else {
           HEAP32[6768>>2] = $198;
           ___cxa_guard_release((6776|0));
           break;
          }
         }
        }
       } while(0);
       $203 = HEAP32[6768>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $204 = (invoke_iiiii(12,($__a$2|0),($203|0),(5464|0),($vararg_buffer|0))|0);
       $205 = __THREW__; __THREW__ = 0;
       $206 = $205&1;
       if ($206) {
        label = 45;
       } else {
        $207 = ($204|0)==(1);
        if (!($207)) {
         HEAP32[$__err>>2] = 4;
        }
        $208 = HEAP32[$__b>>2]|0;
        $209 = ($208|0)==(0|0);
        if ($209) {
         $240 = 0;$243 = 1;
        } else {
         $210 = (($208) + 12|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($208) + 16|0);
         $213 = HEAP32[$212>>2]|0;
         $214 = ($211|0)==($213|0);
         if ($214) {
          $215 = HEAP32[$208>>2]|0;
          $216 = (($215) + 36|0);
          $217 = HEAP32[$216>>2]|0;
          __THREW__ = 0;
          $218 = (invoke_ii($217|0,($208|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          if ($220) {
           label = 45;
           break;
          } else {
           $$0$i$i$i$i = $218;
          }
         } else {
          $221 = HEAP32[$211>>2]|0;
          $$0$i$i$i$i = $221;
         }
         $222 = ($$0$i$i$i$i|0)==(-1);
         if ($222) {
          HEAP32[$__b>>2] = 0;
          $240 = 0;$243 = 1;
         } else {
          $240 = $208;$243 = 0;
         }
        }
        $223 = HEAP32[$__e>>2]|0;
        $224 = ($223|0)==(0|0);
        do {
         if ($224) {
          label = 92;
         } else {
          $225 = (($223) + 12|0);
          $226 = HEAP32[$225>>2]|0;
          $227 = (($223) + 16|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = ($226|0)==($228|0);
          if ($229) {
           $230 = HEAP32[$223>>2]|0;
           $231 = (($230) + 36|0);
           $232 = HEAP32[$231>>2]|0;
           __THREW__ = 0;
           $233 = (invoke_ii($232|0,($223|0))|0);
           $234 = __THREW__; __THREW__ = 0;
           $235 = $234&1;
           if ($235) {
            label = 45;
            break L13;
           } else {
            $$0$i$i1$i$i = $233;
           }
          } else {
           $236 = HEAP32[$226>>2]|0;
           $$0$i$i1$i$i = $236;
          }
          $237 = ($$0$i$i1$i$i|0)==(-1);
          if ($237) {
           HEAP32[$__e>>2] = 0;
           label = 92;
           break;
          }
          if ($243) {
           HEAP32[$agg$result>>2] = $240;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 92) {
         if (!($243)) {
          HEAP32[$agg$result>>2] = $240;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $238 = HEAP32[$__err>>2]|0;
        $239 = $238 | 2;
        HEAP32[$__err>>2] = $239;
        HEAP32[$agg$result>>2] = $240;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     } while(0);
     if ((label|0) == 45) {
      $120 = ___cxa_find_matching_catch(-1,-1)|0;
      $121 = tempRet0;
      $eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   }
   $24 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($24);
   __THREW__ = 0;
   invoke_viii(9,($24|0),(14840|0),(112|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if (!($26)) {
    // unreachable;
   }
  }
 } while(0);
 $115 = ___cxa_find_matching_catch(-1,-1)|0;
 $116 = tempRet0;
 $117 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($117)|0);
 $$0 = $115;$$01 = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (5424 + ($35)|0);
   $47 = HEAP8[$46]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (5424 + ($35)|0);
 $50 = HEAP8[$49]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((6880 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(5424|0),(((5424 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[7024>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 7024;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (132);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(8,(7024|0),($__p$i$i$i$i3|0),(133|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((7024 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__thousands_sep] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(9,($50|0),(14840|0),(112|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(9,($21|0),(14840|0),(112|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((6880 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(5424|0),(((5424 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[7024>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 7024;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (132);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(8,(7024|0),($__p$i$i$i$i3|0),(133|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((7024 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP8[$__decimal_point] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP8[$__thousands_sep] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(9,($50|0),(14840|0),(112|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(9,($21|0),(14840|0),(112|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (5424 + ($47)|0);
 $50 = HEAP8[$49]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp] = $70;
   $71 = HEAP8[$__in_units]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units] = 0;
    $73 = HEAP8[$__grouping]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((6872 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(5424|0),(((5424 + 26|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[7032>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 7032;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (132);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(8,(7032|0),($__p$i$i$i$i3|0),(133|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((7032 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 16|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 20|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       invoke_vii($61|0,($agg$result|0),($48|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        break;
       }
       $64 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(9,($50|0),(14840|0),(112|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(9,($21|0),(14840|0),(112|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $67 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
 ___resumeException($65|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i3 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = HEAP32[((6872 + 4|0))>>2]|0;
   $8 = (($7) + -1)|0;
   $9 = (($0) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $10;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = $15 >> 2;
   $17 = ($16>>>0)>($8>>>0);
   if ($17) {
    $18 = (($12) + ($8<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if (!($20)) {
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + 48|0);
     $26 = HEAP32[$25>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($26|0,($19|0),(5424|0),(((5424 + 32|0))|0),($__atoms|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      break;
     }
     $29 = HEAP32[$__loc>>2]|0;
     $30 = HEAP32[7032>>2]|0;
     $31 = ($30|0)==(-1);
     if (!($31)) {
      HEAP32[$__p$i$i$i$i3>>2] = 7032;
      $32 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$32>>2] = (132);
      $33 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$33>>2] = 0;
      __THREW__ = 0;
      invoke_viii(8,(7032|0),($__p$i$i$i$i3|0),(133|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break;
      }
     }
     $36 = HEAP32[((7032 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$48>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       __THREW__ = 0;
       $56 = (invoke_ii($55|0,($48|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break;
       }
       HEAP32[$__decimal_point>>2] = $56;
       $59 = HEAP32[$48>>2]|0;
       $60 = (($59) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($48|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        break;
       }
       HEAP32[$__thousands_sep>>2] = $62;
       $65 = HEAP32[$48>>2]|0;
       $66 = (($65) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       invoke_vii($67|0,($agg$result|0),($48|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
       STACKTOP = sp;return;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(9,($50|0),(14840|0),(112|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      break;
     }
     // unreachable;
    }
   }
   $21 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($21);
   __THREW__ = 0;
   invoke_viii(9,($21|0),(14840|0),(112|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    // unreachable;
   }
  }
 } while(0);
 $71 = ___cxa_find_matching_catch(-1,-1)|0;
 $72 = tempRet0;
 $73 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($73)|0);
 ___resumeException($71|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (5424 + ($48)|0);
 $51 = HEAP8[$50]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp] = $69;
   $70 = HEAP8[$__in_units]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units] = 0;
    $72 = HEAP8[$__grouping]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[7024>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 7024;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (132);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(7024|0),($__p$i$i$i$i|0),(133|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((7024 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 63]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 63]($__nm,$30);
    }
    $41 = HEAP8[$__nm]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 1|0);
     $$pre7 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $46;$$pre$phi8Z2D = $$pre7;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre5 = (($__nm) + 1|0);
     $$ph = $45;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $44;
    }
    $47 = (($__nm) + 4|0);
    $49 = $41;$59 = $$ph;
    L20: while(1) {
     $48 = $49 & 1;
     $50 = ($48<<24>>24)==(0);
     if ($50) {
      $53 = $49&255;
      $54 = $53 >>> 1;
      $56 = $$pre$phi6Z2D;$57 = $54;
     } else {
      $51 = HEAP32[$$pre$phi8Z2D>>2]|0;
      $52 = HEAP32[$47>>2]|0;
      $56 = $51;$57 = $52;
     }
     $55 = (($56) + ($57)|0);
     $58 = ($59|0)==($55|0);
     if ($58) {
      label = 29;
      break;
     }
     $60 = HEAP8[$59]|0;
     $61 = HEAP32[$__s>>2]|0;
     $62 = ($61|0)==(0|0);
     do {
      if (!($62)) {
       $63 = (($61) + 24|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (($61) + 28|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = ($64|0)==($66|0);
       if (!($67)) {
        $68 = (($64) + 1|0);
        HEAP32[$63>>2] = $68;
        HEAP8[$64] = $60;
        break;
       }
       $69 = HEAP32[$61>>2]|0;
       $70 = (($69) + 52|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $60&255;
       __THREW__ = 0;
       $73 = (invoke_iii($71|0,($61|0),($72|0))|0);
       $74 = __THREW__; __THREW__ = 0;
       $75 = $74&1;
       if ($75) {
        label = 28;
        break L20;
       }
       $76 = ($73|0)==(-1);
       if ($76) {
        HEAP32[$__s>>2] = 0;
       }
      }
     } while(0);
     $77 = (($59) + 1|0);
     $$pre = HEAP8[$__nm]|0;
     $49 = $$pre;$59 = $77;
    }
    if ((label|0) == 28) {
     $81 = ___cxa_find_matching_catch(-1,-1)|0;
     $82 = tempRet0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     $$0 = $81;$$01 = $82;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $83 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $83;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(9,($32|0),(14840|0),(112|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $78 = ___cxa_find_matching_catch(-1,-1)|0;
 $79 = tempRet0;
 $80 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 $$0 = $78;$$01 = $79;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((6776|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $18;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(39,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf(($__s|0),($__n|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$16 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i,133);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7024>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7024;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (132);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i1,133);
 }
 $25 = HEAP32[((7024 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59)|0);
    HEAP32[$__oe>>2] = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 1|0);
    HEAP32[$__oe>>2] = $74;
    HEAP8[$73] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 28|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 1|0);
      HEAP32[$__oe>>2] = $90;
      HEAP8[$89] = $86;
      $91 = HEAP8[$81]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 28|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 1|0);
      HEAP32[$__oe>>2] = $100;
      HEAP8[$99] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i]|0;
      $105 = HEAP8[$106]|0;
      HEAP8[$$012$i$i] = $105;
      HEAP8[$106] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L42: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$014)|0);
       $125 = HEAP8[$124]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$16 = $122 ? $117 : $127;
        $128 = (($$16) + ($__dg$014)|0);
        $129 = HEAP8[$128]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$013|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 1|0);
         HEAP32[$__oe>>2] = $133;
         HEAP8[$132] = $113;
         $134 = HEAP8[$__grouping]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$014>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$014))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
        }
       }
       $144 = HEAP8[$__p$015]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 28|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 1|0);
       HEAP32[$__oe>>2] = $152;
       HEAP8[$151] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$015) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$013 = $153;$__dg$014 = $__dg$1;$__p$015 = $154;
       } else {
        break L42;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158)|0);
    $160 = HEAP32[$__oe>>2]|0;
    $161 = ($159|0)==($160|0);
    if (!($161)) {
     $162 = (($160) + -1|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP8[$$012$i$i10]|0;
       $165 = HEAP8[$166]|0;
       HEAP8[$$012$i$i10] = $165;
       HEAP8[$166] = $164;
       $167 = (($$012$i$i10) + 1|0);
       $168 = (($166) + -1|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $171 = HEAP32[$__oe>>2]|0;
  $storemerge = $171;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $172 = $__np;
  $173 = $__nb;
  $174 = (($172) - ($173))|0;
  $175 = (($__ob) + ($174)|0);
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 31]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP8[$__sp]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $23 = (($__sp) + 1|0);
    $27 = $23;
   } else {
    $21 = (($__sp) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $27 = $22;
   }
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 48|0);
   $26 = HEAP32[$25>>2]|0;
   __THREW__ = 0;
   $28 = (invoke_iiii($26|0,($0|0),($27|0),($__ns$0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $32 = ___cxa_find_matching_catch(-1,-1)|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    ___resumeException($32|0);
    // unreachable;
   }
   $31 = ($28|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $34 = (($2) - ($9))|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 48|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iiii[$38 & 31]($0,$__op,$34)|0);
  $40 = ($39|0)==($34|0);
  if (!($40)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((6776|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $25;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[6768>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(39,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((6776|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $18;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(39,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((6776|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $25;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[6768>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(39,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0;
 var $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 68|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((6776|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $33;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[6776]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i12) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((6776|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[6768>>2] = $48;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[6768>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((6776|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[6768>>2] = $63;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[6768>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $116 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $116 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index3Z2D;
   ___resumeException($$118|0);
   // unreachable;
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   $116 = 0;$79 = $$pre19;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else if ((($81|0) == 16)) {
   $82 = HEAP8[$79]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 1;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(4);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $135 = 0;
    label = 58;
   } else {
    $$pre20 = HEAP32[$__nb>>2]|0;
    $110 = 0;$99 = $$pre20;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(53,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $135 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(40,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $121 = ___cxa_find_matching_catch(-1,-1)|0;
     $122 = tempRet0;
     $123 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
     $$0 = $121;$$01 = $122;$125 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(41,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $135 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      __THREW__ = 0;
      invoke_vi(134,($110|0));
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $113 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $114 = tempRet0;
       ___clang_call_terminate($113);
       // unreachable;
      }
     }
     $115 = ($116|0)==(0|0);
     if ($115) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(134,($116|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $119 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $120 = tempRet0;
      ___clang_call_terminate($119);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$125 = $135;
 }
 $124 = ($125|0)==(0|0);
 if (!($124)) {
  __THREW__ = 0;
  invoke_vi(134,($125|0));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   $128 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $129 = tempRet0;
   ___clang_call_terminate($128);
   // unreachable;
  }
 }
 $130 = ($116|0)==(0|0);
 if ($130) {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(134,($116|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $134 = tempRet0;
  ___clang_call_terminate($133);
  // unreachable;
 } else {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(26,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch(-1,-1)|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(73,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$58 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0;
 var $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i,133);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7024>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7024;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (132);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i1,133);
 }
 $25 = HEAP32[((7024 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 1|0);
   HEAP32[$__oe>>2] = $52;
   HEAP8[$51] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 28|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 1|0);
       HEAP32[$__oe>>2] = $79;
       HEAP8[$78] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 28|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 1|0);
       HEAP32[$__oe>>2] = $89;
       HEAP8[$88] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$043 = $80;
        while(1) {
         $93 = HEAP8[$__ns$043]|0;
         $94 = HEAP8[6776]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((6776|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[6768>>2] = $98;
           ___cxa_guard_release((6776|0));
          }
         }
         $103 = HEAP32[6768>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(16,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$043) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$043;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$043 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$134 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$134]|0;
       $112 = HEAP8[6776]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((6776|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[6768>>2] = $116;
         ___cxa_guard_release((6776|0));
        }
       }
       $121 = HEAP32[6768>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(17,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$134) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$134 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((6776|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 32|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144)|0);
    HEAP32[$__oe>>2] = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i]|0;
       $151 = HEAP8[$152]|0;
       HEAP8[$$012$i$i] = $151;
       HEAP8[$152] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L75: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$026)|0);
       $171 = HEAP8[$170]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$58 = $168 ? $163 : $173;
        $174 = (($$58) + ($__dg$026)|0);
        $175 = HEAP8[$174]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$025|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 1|0);
         HEAP32[$__oe>>2] = $179;
         HEAP8[$178] = $159;
         $180 = HEAP8[$__grouping]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$026>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$026))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
        }
       } else {
        $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
       }
       $190 = HEAP8[$__p$027]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 28|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 1|0);
       HEAP32[$__oe>>2] = $198;
       HEAP8[$197] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$027) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$025 = $199;$__dg$026 = $__dg$1;$__p$027 = $200;
       } else {
        break L75;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204)|0);
    $206 = HEAP32[$__oe>>2]|0;
    $207 = ($205|0)==($206|0);
    if (!($207)) {
     $208 = (($206) + -1|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP8[$$012$i$i13]|0;
       $211 = HEAP8[$212]|0;
       HEAP8[$$012$i$i13] = $211;
       HEAP8[$212] = $210;
       $213 = (($$012$i$i13) + 1|0);
       $214 = (($212) + -1|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        break;
       }
      }
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L95: do {
    if ($216) {
     $__nf$221 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$221]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 69;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 28|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 1|0);
      HEAP32[$__oe>>2] = $235;
      HEAP8[$234] = $231;
      $236 = (($__nf$221) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$221 = $236;
      } else {
       $__nf$3 = $236;
       break L95;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 69) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 1|0);
      HEAP32[$__oe>>2] = $226;
      HEAP8[$225] = $222;
      $227 = (($__nf$221) + 1|0);
      $__nf$3 = $227;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$__oe>>2]|0;
   $239 = HEAP32[$17>>2]|0;
   $240 = (($239) + 32|0);
   $241 = HEAP32[$240>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($241|0,($17|0),($__nf$3|0),($__ne|0),($238|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 60|0;
 $vararg_buffer16 = sp + 16|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep16] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((6776|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $33;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[6776]|0;
   $45 = ($44<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i17) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((6776|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L41;
        } else {
         HEAP32[6768>>2] = $48;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[6768>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((6776|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L41;
        } else {
         HEAP32[6768>>2] = $63;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[6768>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index3Z2D;
   ___resumeException($$113|0);
   // unreachable;
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre14;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 1;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(4);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre15 = HEAP32[$__nb>>2]|0;
    $108 = 0;$97 = $$pre15;$__ob$0 = 0;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(53,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(40,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(41,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$113 = $$0;$$1212 = $$01;
  ___resumeException($$113|0);
  // unreachable;
 }
 _free($110);
 $$113 = $$0;$$1212 = $$01;
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 28|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 32|0;
 $__nar = sp + 40|0;
 $__o = sp + 60|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5680+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5680+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5680+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5680+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5680+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5680+5|0]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 32)) {
   $$0$i = $13;
  } else if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[6880>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (132);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((6880 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 31]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(9,($45|0),(14840|0),(112|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp + 32|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[7032>>2]|0;
 $13 = ($12|0)==(-1);
 if ($13) {
  label = 5;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 7032;
  $14 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$14>>2] = (132);
  $15 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(7032|0),($__p$i$i$i$i|0),(133|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $18 = HEAP32[((7032 + 4|0))>>2]|0;
  $19 = (($18) + -1)|0;
  $20 = (($11) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($11) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $21;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 2;
  $28 = ($27>>>0)>($19>>>0);
  if ($28) {
   $29 = (($23) + ($19<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = HEAP32[$1>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
    $36 = HEAP32[$30>>2]|0;
    if ($__v) {
     $37 = (($36) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     FUNCTION_TABLE_vii[$38 & 63]($__nm,$30);
    } else {
     $39 = (($36) + 28|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vii[$40 & 63]($__nm,$30);
    }
    $41 = HEAP8[$__nm]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $46 = (($__nm) + 4|0);
     $$pre5 = (($__nm) + 8|0);
     $$ph = $46;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $46;
    } else {
     $44 = (($__nm) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $$pre4 = (($__nm) + 4|0);
     $$ph = $45;$$pre$phi6Z2D = $44;$$pre$phiZ2D = $$pre4;
    }
    $48 = $41;$58 = $$ph;
    while(1) {
     $47 = $48 & 1;
     $49 = ($47<<24>>24)==(0);
     if ($49) {
      $52 = $48&255;
      $53 = $52 >>> 1;
      $55 = $$pre$phiZ2D;$56 = $53;
     } else {
      $50 = HEAP32[$$pre$phi6Z2D>>2]|0;
      $51 = HEAP32[$$pre$phiZ2D>>2]|0;
      $55 = $50;$56 = $51;
     }
     $54 = (($55) + ($56<<2)|0);
     $57 = ($58|0)==($54|0);
     if ($57) {
      label = 29;
      break;
     }
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP32[$__s>>2]|0;
     $61 = ($60|0)==(0|0);
     if (!($61)) {
      $62 = (($60) + 24|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 28|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 52|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_iii($69|0,($60|0),($59|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 28;
        break;
       } else {
        $$0$i$i = $70;
       }
      } else {
       $73 = (($63) + 4|0);
       HEAP32[$62>>2] = $73;
       HEAP32[$63>>2] = $59;
       $$0$i$i = $59;
      }
      $74 = ($$0$i$i|0)==(-1);
      if ($74) {
       HEAP32[$__s>>2] = 0;
      }
     }
     $75 = (($58) + 4|0);
     $$pre = HEAP8[$__nm]|0;
     $48 = $$pre;$58 = $75;
    }
    if ((label|0) == 28) {
     $79 = ___cxa_find_matching_catch(-1,-1)|0;
     $80 = tempRet0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     $$0 = $79;$$01 = $80;
     ___resumeException($$0|0);
     // unreachable;
    }
    else if ((label|0) == 29) {
     $81 = HEAP32[$__s>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
     STACKTOP = sp;return;
    }
   }
  }
  $32 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($32);
  __THREW__ = 0;
  invoke_viii(9,($32|0),(14840|0),(112|0));
  $33 = __THREW__; __THREW__ = 0;
  $34 = $33&1;
  if (!($34)) {
   // unreachable;
  }
 }
 $76 = ___cxa_find_matching_catch(-1,-1)|0;
 $77 = tempRet0;
 $78 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($78)|0);
 $$0 = $76;$$01 = $77;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((6776|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $18;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i,133);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7032>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7032;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (132);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i1,133);
 }
 $25 = HEAP32[((7032 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 do {
  if ($50) {
   $52 = HEAP32[$17>>2]|0;
   $53 = (($52) + 48|0);
   $54 = HEAP32[$53>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($54|0,($17|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    label = 18;
   } else {
    $57 = $__ne;
    $58 = $__nb;
    $59 = (($57) - ($58))|0;
    $60 = (($__ob) + ($59<<2)|0);
    HEAP32[$__oe>>2] = $60;
    $175 = $60;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $65 = HEAP8[$__nb]|0;
   if ((($65<<24>>24) == 43) | (($65<<24>>24) == 45)) {
    $66 = HEAP32[$17>>2]|0;
    $67 = (($66) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    __THREW__ = 0;
    $69 = (invoke_iii($68|0,($17|0),($65|0))|0);
    $70 = __THREW__; __THREW__ = 0;
    $71 = $70&1;
    if ($71) {
     label = 18;
     break;
    }
    $72 = (($__nb) + 1|0);
    $73 = HEAP32[$__oe>>2]|0;
    $74 = (($73) + 4|0);
    HEAP32[$__oe>>2] = $74;
    HEAP32[$73>>2] = $69;
    $__nf$0 = $72;
   } else {
    $__nf$0 = $__nb;
   }
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   if ($78) {
    $79 = HEAP8[$__nf$0]|0;
    $80 = ($79<<24>>24)==(48);
    if ($80) {
     $81 = (($__nf$0) + 1|0);
     $82 = HEAP8[$81]|0;
     if ((($82<<24>>24) == 88) | (($82<<24>>24) == 120)) {
      $83 = HEAP32[$17>>2]|0;
      $84 = (($83) + 44|0);
      $85 = HEAP32[$84>>2]|0;
      __THREW__ = 0;
      $86 = (invoke_iii($85|0,($17|0),48)|0);
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 18;
       break;
      }
      $89 = HEAP32[$__oe>>2]|0;
      $90 = (($89) + 4|0);
      HEAP32[$__oe>>2] = $90;
      HEAP32[$89>>2] = $86;
      $91 = HEAP8[$81]|0;
      $92 = HEAP32[$17>>2]|0;
      $93 = (($92) + 44|0);
      $94 = HEAP32[$93>>2]|0;
      __THREW__ = 0;
      $95 = (invoke_iii($94|0,($17|0),($91|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       label = 18;
       break;
      }
      $98 = (($__nf$0) + 2|0);
      $99 = HEAP32[$__oe>>2]|0;
      $100 = (($99) + 4|0);
      HEAP32[$__oe>>2] = $100;
      HEAP32[$99>>2] = $95;
      $__nf$1 = $98;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $101 = ($__nf$1|0)==($__ne|0);
   if (!($101)) {
    $102 = (($__ne) + -1|0);
    $103 = ($102>>>0)>($__nf$1>>>0);
    if ($103) {
     $$012$i$i = $__nf$1;$106 = $102;
     while(1) {
      $104 = HEAP8[$$012$i$i]|0;
      $105 = HEAP8[$106]|0;
      HEAP8[$$012$i$i] = $105;
      HEAP8[$106] = $104;
      $107 = (($$012$i$i) + 1|0);
      $108 = (($106) + -1|0);
      $109 = ($107>>>0)<($108>>>0);
      if ($109) {
       $$012$i$i = $107;$106 = $108;
      } else {
       break;
      }
     }
    }
   }
   $110 = HEAP32[$37>>2]|0;
   $111 = (($110) + 16|0);
   $112 = HEAP32[$111>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_ii($112|0,($37|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 18;
   } else {
    $116 = ($__nf$1>>>0)<($__ne>>>0);
    L44: do {
     if ($116) {
      $117 = (($__grouping) + 1|0);
      $118 = (($__grouping) + 4|0);
      $119 = (($__grouping) + 8|0);
      $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
      while(1) {
       $120 = HEAP8[$__grouping]|0;
       $121 = $120 & 1;
       $122 = ($121<<24>>24)==(0);
       $123 = HEAP32[$119>>2]|0;
       $$ = $122 ? $117 : $123;
       $124 = (($$) + ($__dg$013)|0);
       $125 = HEAP8[$124]|0;
       $126 = ($125<<24>>24)==(0);
       if ($126) {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       } else {
        $127 = HEAP32[$119>>2]|0;
        $$15 = $122 ? $117 : $127;
        $128 = (($$15) + ($__dg$013)|0);
        $129 = HEAP8[$128]|0;
        $130 = $129 << 24 >> 24;
        $131 = ($__dc$012|0)==($130|0);
        if ($131) {
         $132 = HEAP32[$__oe>>2]|0;
         $133 = (($132) + 4|0);
         HEAP32[$__oe>>2] = $133;
         HEAP32[$132>>2] = $113;
         $134 = HEAP8[$__grouping]|0;
         $135 = $134 & 1;
         $136 = ($135<<24>>24)==(0);
         if ($136) {
          $138 = $134&255;
          $139 = $138 >>> 1;
          $141 = $139;
         } else {
          $137 = HEAP32[$118>>2]|0;
          $141 = $137;
         }
         $140 = (($141) + -1)|0;
         $142 = ($__dg$013>>>0)<($140>>>0);
         $143 = $142&1;
         $$__dg$0 = (($143) + ($__dg$013))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
        }
       }
       $144 = HEAP8[$__p$014]|0;
       $145 = HEAP32[$17>>2]|0;
       $146 = (($145) + 44|0);
       $147 = HEAP32[$146>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iii($147|0,($17|0),($144|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        break;
       }
       $151 = HEAP32[$__oe>>2]|0;
       $152 = (($151) + 4|0);
       HEAP32[$__oe>>2] = $152;
       HEAP32[$151>>2] = $148;
       $153 = (($__dc$1) + 1)|0;
       $154 = (($__p$014) + 1|0);
       $155 = ($154>>>0)<($__ne>>>0);
       if ($155) {
        $__dc$012 = $153;$__dg$013 = $__dg$1;$__p$014 = $154;
       } else {
        $161 = $152;
        break L44;
       }
      }
      $61 = ___cxa_find_matching_catch(-1,-1)|0;
      $62 = tempRet0;
      $lpad$phi$index = $61;$lpad$phi$index2 = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $161 = $$pre;
     }
    } while(0);
    $156 = $__nf$1;
    $157 = $__nb;
    $158 = (($156) - ($157))|0;
    $159 = (($__ob) + ($158<<2)|0);
    $160 = ($159|0)==($161|0);
    if ($160) {
     $175 = $161;
    } else {
     $162 = (($161) + -4|0);
     $163 = ($162>>>0)>($159>>>0);
     if ($163) {
      $$012$i$i10 = $159;$166 = $162;
      while(1) {
       $164 = HEAP32[$$012$i$i10>>2]|0;
       $165 = HEAP32[$166>>2]|0;
       HEAP32[$$012$i$i10>>2] = $165;
       HEAP32[$166>>2] = $164;
       $167 = (($$012$i$i10) + 4|0);
       $168 = (($166) + -4|0);
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $$012$i$i10 = $167;$166 = $168;
       } else {
        $175 = $161;
        break;
       }
      }
     } else {
      $175 = $161;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $63 = ___cxa_find_matching_catch(-1,-1)|0;
  $64 = tempRet0;
  $lpad$phi$index = $63;$lpad$phi$index2 = $64;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $170 = ($__np|0)==($__ne|0);
 if ($170) {
  $storemerge = $175;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $171 = $__np;
 $172 = $__nb;
 $173 = (($171) - ($172))|0;
 $174 = (($__ob) + ($173<<2)|0);
 $storemerge = $174;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 31]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch(-1,-1)|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 31]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((6776|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $25;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[6768>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 do {
  if ($15) {
   $16 = (___cxa_guard_acquire((6776|0))|0);
   $17 = ($16|0)==(0);
   if (!($17)) {
    __THREW__ = 0;
    $18 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(-1,-1)|0;
     $22 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($21|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $18;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $23 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $24 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$23,$__fmt,$vararg_buffer)|0);
 $25 = (($__nar) + ($24)|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = $26 & 176;
 do {
  if ((($27|0) == 32)) {
   $$0$i1 = $25;
  } else if ((($27|0) == 16)) {
   $28 = HEAP8[$__nar]|0;
   if ((($28<<24>>24) == 43) | (($28<<24>>24) == 45)) {
    $29 = (($__nar) + 1|0);
    $$0$i1 = $29;
    break;
   }
   $30 = ($24|0)>(1);
   $31 = ($28<<24>>24)==(48);
   $or$cond$i = $30 & $31;
   if ($or$cond$i) {
    $32 = (($__nar) + 1|0);
    $33 = HEAP8[$32]|0;
    if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
     $34 = (($__nar) + 2|0);
     $$0$i1 = $34;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($__nar|0),($$0$i1|0),($25|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $41 = ___cxa_find_matching_catch(-1,-1)|0;
  $42 = tempRet0;
  $43 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  ___resumeException($41|0);
  // unreachable;
 } else {
  $37 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
  $38 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $38;
  $39 = HEAP32[$__op>>2]|0;
  $40 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$39,$40,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0;
 var $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 do {
  if ($22) {
   $23 = (___cxa_guard_acquire((6776|0))|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $28 = ___cxa_find_matching_catch(-1,-1)|0;
     $29 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($28|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $25;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $30 = HEAP32[6768>>2]|0;
 $31 = $vararg_buffer;
 $32 = $31;
 HEAP32[$32>>2] = $0;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $1;
 $35 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$30,$__fmt,$vararg_buffer)|0);
 $36 = (($__nar) + ($35)|0);
 $37 = HEAP32[$9>>2]|0;
 $38 = $37 & 176;
 do {
  if ((($38|0) == 16)) {
   $39 = HEAP8[$__nar]|0;
   if ((($39<<24>>24) == 43) | (($39<<24>>24) == 45)) {
    $40 = (($__nar) + 1|0);
    $$0$i1 = $40;
    break;
   }
   $41 = ($35|0)>(1);
   $42 = ($39<<24>>24)==(48);
   $or$cond$i = $41 & $42;
   if ($or$cond$i) {
    $43 = (($__nar) + 1|0);
    $44 = HEAP8[$43]|0;
    if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
     $45 = (($__nar) + 2|0);
     $$0$i1 = $45;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else if ((($38|0) == 32)) {
   $$0$i1 = $36;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($__nar|0),($$0$i1|0),($36|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  $54 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  ___resumeException($52|0);
  // unreachable;
 } else {
  $48 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
  $49 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $49;
  $50 = HEAP32[$__op>>2]|0;
  $51 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$50,$51,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0;
 var $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 296|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((6776|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $33;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[6776]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i10) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((6776|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[6768>>2] = $48;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[6768>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((6776|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[6768>>2] = $63;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[6768>>2]|0;
     $69 = (($__iob) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer16>>2] = $70;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $71 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 36;
     } else {
      $__nc$1 = $71;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $74 = HEAP32[$__nb>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $112 = $74;$79 = $74;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $112 = $$pre;$79 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index3Z2D;
   ___resumeException($$116|0);
   // unreachable;
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   $112 = 0;$79 = $$pre17;$__nc$2 = $__nc$0;
  }
 } while(0);
 $78 = (($79) + ($__nc$2)|0);
 $80 = HEAP32[$8>>2]|0;
 $81 = $80 & 176;
 do {
  if ((($81|0) == 16)) {
   $82 = HEAP8[$79]|0;
   if ((($82<<24>>24) == 43) | (($82<<24>>24) == 45)) {
    $83 = (($79) + 1|0);
    $$0$i7 = $83;
    break;
   }
   $84 = ($__nc$2|0)>(1);
   $85 = ($82<<24>>24)==(48);
   $or$cond$i = $84 & $85;
   if ($or$cond$i) {
    $86 = (($79) + 1|0);
    $87 = HEAP8[$86]|0;
    if ((($87<<24>>24) == 88) | (($87<<24>>24) == 120)) {
     $88 = (($79) + 2|0);
     $$0$i7 = $88;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($81|0) == 32)) {
   $$0$i7 = $78;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $89 = ($79|0)==($__nar|0);
 if ($89) {
  $110 = 0;$99 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $90 = $__nc$2 << 3;
  $91 = (_malloc($90)|0);
  $92 = ($91|0)==(0|0);
  if ($92) {
   __THREW__ = 0;
   invoke_v(4);
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $119 = 0;
    label = 58;
   } else {
    $$pre18 = HEAP32[$__nb>>2]|0;
    $110 = $91;$99 = $$pre18;$__ob$0 = $91;
    label = 59;
   }
  } else {
   $110 = $91;$99 = $79;$__ob$0 = $91;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(53,($0|0),($__iob|0));
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    $119 = $110;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(43,($99|0),($$0$i7|0),($78|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $100 = __THREW__; __THREW__ = 0;
    $101 = $100&1;
    if ($101) {
     $113 = ___cxa_find_matching_catch(-1,-1)|0;
     $114 = tempRet0;
     $115 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($115)|0);
     $$0 = $113;$$01 = $114;$117 = $110;
     break;
    }
    $102 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
    $103 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $103;
    $104 = HEAP32[$__op>>2]|0;
    $105 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(44,($1|0),($$byval_copy|0),($__ob$0|0),($104|0),($105|0),($__iob|0),($__fl|0));
    $106 = __THREW__; __THREW__ = 0;
    $107 = $106&1;
    if ($107) {
     $119 = $110;
     label = 58;
    } else {
     $108 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $108;
     HEAP32[$agg$result>>2] = $108;
     $109 = ($110|0)==(0|0);
     if (!($109)) {
      _free($110);
     }
     $111 = ($112|0)==(0|0);
     if ($111) {
      STACKTOP = sp;return;
     }
     _free($112);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $95 = ___cxa_find_matching_catch(-1,-1)|0;
  $96 = tempRet0;
  $$0 = $95;$$01 = $96;$117 = $119;
 }
 $116 = ($117|0)==(0|0);
 if (!($116)) {
  _free($117);
 }
 $118 = ($112|0)==(0|0);
 if ($118) {
  $$116 = $$0;$$1215 = $$01;
  ___resumeException($$116|0);
  // unreachable;
 }
 _free($112);
 $$116 = $$0;$$1215 = $$01;
 ___resumeException($$116|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__grouping = sp + 28|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $3 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i,133);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7032>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7032;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (132);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i1,133);
 }
 $25 = HEAP32[((7032 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  __THREW__ = 0;
  $47 = (invoke_iii($46|0,($17|0),($43|0))|0);
  $48 = __THREW__; __THREW__ = 0;
  $49 = $48&1;
  if (!($49)) {
   $50 = (($__nb) + 1|0);
   $51 = HEAP32[$__oe>>2]|0;
   $52 = (($51) + 4|0);
   HEAP32[$__oe>>2] = $52;
   HEAP32[$51>>2] = $47;
   $__nf$0 = $50;
   label = 20;
  }
 } else {
  $__nf$0 = $__nb;
  label = 20;
 }
 L22: do {
  if ((label|0) == 20) {
   $63 = $__ne;
   $64 = $__nf$0;
   $65 = (($63) - ($64))|0;
   $66 = ($65|0)>(1);
   L24: do {
    if ($66) {
     $68 = HEAP8[$__nf$0]|0;
     $69 = ($68<<24>>24)==(48);
     if ($69) {
      $70 = (($__nf$0) + 1|0);
      $71 = HEAP8[$70]|0;
      if ((($71<<24>>24) == 88) | (($71<<24>>24) == 120)) {
       $72 = HEAP32[$17>>2]|0;
       $73 = (($72) + 44|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_iii($74|0,($17|0),48)|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        break L22;
       }
       $78 = HEAP32[$__oe>>2]|0;
       $79 = (($78) + 4|0);
       HEAP32[$__oe>>2] = $79;
       HEAP32[$78>>2] = $75;
       $80 = (($__nf$0) + 2|0);
       $81 = HEAP8[$70]|0;
       $82 = HEAP32[$17>>2]|0;
       $83 = (($82) + 44|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_iii($84|0,($17|0),($81|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        break L22;
       }
       $88 = HEAP32[$__oe>>2]|0;
       $89 = (($88) + 4|0);
       HEAP32[$__oe>>2] = $89;
       HEAP32[$88>>2] = $85;
       $90 = ($80>>>0)<($__ne>>>0);
       if ($90) {
        $__ns$042 = $80;
        while(1) {
         $93 = HEAP8[$__ns$042]|0;
         $94 = HEAP8[6776]|0;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $96 = (___cxa_guard_acquire((6776|0))|0);
          $97 = ($96|0)==(0);
          if (!($97)) {
           __THREW__ = 0;
           $98 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            label = 32;
            break;
           }
           HEAP32[6768>>2] = $98;
           ___cxa_guard_release((6776|0));
          }
         }
         $103 = HEAP32[6768>>2]|0;
         $104 = $93 << 24 >> 24;
         __THREW__ = 0;
         $105 = (invoke_iii(16,($104|0),($103|0))|0);
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if ($107) {
          label = 17;
          break;
         }
         $108 = ($105|0)==(0);
         $92 = (($__ns$042) + 1|0);
         if ($108) {
          $__nf$1 = $80;$__ns$2 = $__ns$042;
          break L24;
         }
         $91 = ($92>>>0)<($__ne>>>0);
         if ($91) {
          $__ns$042 = $92;
         } else {
          $__nf$1 = $80;$__ns$2 = $92;
          break L24;
         }
        }
        if ((label|0) == 17) {
         $59 = ___cxa_find_matching_catch(-1,-1)|0;
         $60 = tempRet0;
         $eh$lpad$body$index7Z2D = $60;$eh$lpad$body$indexZ2D = $59;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
        else if ((label|0) == 32) {
         $101 = ___cxa_find_matching_catch(-1,-1)|0;
         $102 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index7Z2D = $102;$eh$lpad$body$indexZ2D = $101;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         ___resumeException($eh$lpad$body$indexZ2D|0);
         // unreachable;
        }
       } else {
        $__nf$1 = $80;$__ns$2 = $80;
       }
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $67 = ($__nf$0>>>0)<($__ne>>>0);
     if ($67) {
      $__ns$133 = $__nf$0;
      while(1) {
       $111 = HEAP8[$__ns$133]|0;
       $112 = HEAP8[6776]|0;
       $113 = ($112<<24>>24)==(0);
       if ($113) {
        $114 = (___cxa_guard_acquire((6776|0))|0);
        $115 = ($114|0)==(0);
        if (!($115)) {
         __THREW__ = 0;
         $116 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 40;
          break;
         }
         HEAP32[6768>>2] = $116;
         ___cxa_guard_release((6776|0));
        }
       }
       $121 = HEAP32[6768>>2]|0;
       $122 = $111 << 24 >> 24;
       __THREW__ = 0;
       $123 = (invoke_iii(17,($122|0),($121|0))|0);
       $124 = __THREW__; __THREW__ = 0;
       $125 = $124&1;
       if ($125) {
        label = 16;
        break;
       }
       $126 = ($123|0)==(0);
       $110 = (($__ns$133) + 1|0);
       if ($126) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
        break L44;
       }
       $109 = ($110>>>0)<($__ne>>>0);
       if ($109) {
        $__ns$133 = $110;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $110;
        break L44;
       }
      }
      if ((label|0) == 16) {
       $57 = ___cxa_find_matching_catch(-1,-1)|0;
       $58 = tempRet0;
       $eh$lpad$body$index7Z2D = $58;$eh$lpad$body$indexZ2D = $57;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
      else if ((label|0) == 40) {
       $119 = ___cxa_find_matching_catch(-1,-1)|0;
       $120 = tempRet0;
       ___cxa_guard_abort((6776|0));
       $eh$lpad$body$index7Z2D = $120;$eh$lpad$body$indexZ2D = $119;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $127 = HEAP8[$__grouping]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $132 = $127&255;
    $133 = $132 >>> 1;
    $135 = $133;
   } else {
    $130 = (($__grouping) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $135 = $131;
   }
   $134 = ($135|0)==(0);
   if ($134) {
    $136 = HEAP32[$__oe>>2]|0;
    $137 = HEAP32[$17>>2]|0;
    $138 = (($137) + 48|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($139|0,($17|0),($__nf$1|0),($__ns$2|0),($136|0))|0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     break;
    }
    $142 = $__ns$2;
    $143 = $__nf$1;
    $144 = (($142) - ($143))|0;
    $145 = HEAP32[$__oe>>2]|0;
    $146 = (($145) + ($144<<2)|0);
    HEAP32[$__oe>>2] = $146;
    $253 = $146;
   } else {
    $147 = ($__nf$1|0)==($__ns$2|0);
    if (!($147)) {
     $148 = (($__ns$2) + -1|0);
     $149 = ($148>>>0)>($__nf$1>>>0);
     if ($149) {
      $$012$i$i = $__nf$1;$152 = $148;
      while(1) {
       $150 = HEAP8[$$012$i$i]|0;
       $151 = HEAP8[$152]|0;
       HEAP8[$$012$i$i] = $151;
       HEAP8[$152] = $150;
       $153 = (($$012$i$i) + 1|0);
       $154 = (($152) + -1|0);
       $155 = ($153>>>0)<($154>>>0);
       if ($155) {
        $$012$i$i = $153;$152 = $154;
       } else {
        break;
       }
      }
     }
    }
    $156 = HEAP32[$37>>2]|0;
    $157 = (($156) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    __THREW__ = 0;
    $159 = (invoke_ii($158|0,($37|0))|0);
    $160 = __THREW__; __THREW__ = 0;
    $161 = $160&1;
    if ($161) {
     break;
    }
    $162 = ($__nf$1>>>0)<($__ns$2>>>0);
    L73: do {
     if ($162) {
      $163 = (($__grouping) + 1|0);
      $164 = (($__grouping) + 4|0);
      $165 = (($__grouping) + 8|0);
      $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
      while(1) {
       $166 = HEAP8[$__grouping]|0;
       $167 = $166 & 1;
       $168 = ($167<<24>>24)==(0);
       $169 = HEAP32[$165>>2]|0;
       $$ = $168 ? $163 : $169;
       $170 = (($$) + ($__dg$025)|0);
       $171 = HEAP8[$170]|0;
       $172 = ($171<<24>>24)>(0);
       if ($172) {
        $173 = HEAP32[$165>>2]|0;
        $$57 = $168 ? $163 : $173;
        $174 = (($$57) + ($__dg$025)|0);
        $175 = HEAP8[$174]|0;
        $176 = $175 << 24 >> 24;
        $177 = ($__dc$024|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$__oe>>2]|0;
         $179 = (($178) + 4|0);
         HEAP32[$__oe>>2] = $179;
         HEAP32[$178>>2] = $159;
         $180 = HEAP8[$__grouping]|0;
         $181 = $180 & 1;
         $182 = ($181<<24>>24)==(0);
         if ($182) {
          $184 = $180&255;
          $185 = $184 >>> 1;
          $187 = $185;
         } else {
          $183 = HEAP32[$164>>2]|0;
          $187 = $183;
         }
         $186 = (($187) + -1)|0;
         $188 = ($__dg$025>>>0)<($186>>>0);
         $189 = $188&1;
         $$__dg$0 = (($189) + ($__dg$025))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
        }
       } else {
        $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
       }
       $190 = HEAP8[$__p$026]|0;
       $191 = HEAP32[$17>>2]|0;
       $192 = (($191) + 44|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iii($193|0,($17|0),($190|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        break;
       }
       $197 = HEAP32[$__oe>>2]|0;
       $198 = (($197) + 4|0);
       HEAP32[$__oe>>2] = $198;
       HEAP32[$197>>2] = $194;
       $199 = (($__dc$1) + 1)|0;
       $200 = (($__p$026) + 1|0);
       $201 = ($200>>>0)<($__ns$2>>>0);
       if ($201) {
        $__dc$024 = $199;$__dg$025 = $__dg$1;$__p$026 = $200;
       } else {
        $207 = $198;
        break L73;
       }
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $eh$lpad$body$index7Z2D = $56;$eh$lpad$body$indexZ2D = $55;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $207 = $$pre;
     }
    } while(0);
    $202 = $__nf$1;
    $203 = $__nb;
    $204 = (($202) - ($203))|0;
    $205 = (($__ob) + ($204<<2)|0);
    $206 = ($205|0)==($207|0);
    if ($206) {
     $253 = $207;
    } else {
     $208 = (($207) + -4|0);
     $209 = ($208>>>0)>($205>>>0);
     if ($209) {
      $$012$i$i13 = $205;$212 = $208;
      while(1) {
       $210 = HEAP32[$$012$i$i13>>2]|0;
       $211 = HEAP32[$212>>2]|0;
       HEAP32[$$012$i$i13>>2] = $211;
       HEAP32[$212>>2] = $210;
       $213 = (($$012$i$i13) + 4|0);
       $214 = (($212) + -4|0);
       $215 = ($213>>>0)<($214>>>0);
       if ($215) {
        $$012$i$i13 = $213;$212 = $214;
       } else {
        $253 = $207;
        break;
       }
      }
     } else {
      $253 = $207;
     }
    }
   }
   $216 = ($__ns$2>>>0)<($__ne>>>0);
   L96: do {
    if ($216) {
     $__nf$220 = $__ns$2;
     while(1) {
      $217 = HEAP8[$__nf$220]|0;
      $218 = ($217<<24>>24)==(46);
      if ($218) {
       label = 70;
       break;
      }
      $228 = HEAP32[$17>>2]|0;
      $229 = (($228) + 44|0);
      $230 = HEAP32[$229>>2]|0;
      __THREW__ = 0;
      $231 = (invoke_iii($230|0,($17|0),($217|0))|0);
      $232 = __THREW__; __THREW__ = 0;
      $233 = $232&1;
      if ($233) {
       label = 14;
       break;
      }
      $234 = HEAP32[$__oe>>2]|0;
      $235 = (($234) + 4|0);
      HEAP32[$__oe>>2] = $235;
      HEAP32[$234>>2] = $231;
      $236 = (($__nf$220) + 1|0);
      $237 = ($236>>>0)<($__ne>>>0);
      if ($237) {
       $__nf$220 = $236;
      } else {
       $241 = $235;$__nf$3 = $236;
       break L96;
      }
     }
     if ((label|0) == 14) {
      $53 = ___cxa_find_matching_catch(-1,-1)|0;
      $54 = tempRet0;
      $eh$lpad$body$index7Z2D = $54;$eh$lpad$body$indexZ2D = $53;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 70) {
      $219 = HEAP32[$37>>2]|0;
      $220 = (($219) + 12|0);
      $221 = HEAP32[$220>>2]|0;
      __THREW__ = 0;
      $222 = (invoke_ii($221|0,($37|0))|0);
      $223 = __THREW__; __THREW__ = 0;
      $224 = $223&1;
      if ($224) {
       break L22;
      }
      $225 = HEAP32[$__oe>>2]|0;
      $226 = (($225) + 4|0);
      HEAP32[$__oe>>2] = $226;
      HEAP32[$225>>2] = $222;
      $227 = (($__nf$220) + 1|0);
      $241 = $226;$__nf$3 = $227;
      break;
     }
    } else {
     $241 = $253;$__nf$3 = $__ns$2;
    }
   } while(0);
   $238 = HEAP32[$17>>2]|0;
   $239 = (($238) + 48|0);
   $240 = HEAP32[$239>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($240|0,($17|0),($__nf$3|0),($__ne|0),($241|0))|0);
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if (!($243)) {
    $244 = $__nf$3;
    $245 = (($63) - ($244))|0;
    $246 = HEAP32[$__oe>>2]|0;
    $247 = (($246) + ($245<<2)|0);
    HEAP32[$__oe>>2] = $247;
    $248 = ($__np|0)==($__ne|0);
    if ($248) {
     $storemerge = $247;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $249 = $__np;
    $250 = $__nb;
    $251 = (($249) - ($250))|0;
    $252 = (($__ob) + ($251<<2)|0);
    $storemerge = $252;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $61 = ___cxa_find_matching_catch(-1,-1)|0;
 $62 = tempRet0;
 $eh$lpad$body$index7Z2D = $62;$eh$lpad$body$indexZ2D = $61;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$byval_copy = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 288|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep14] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 do {
  if ($30) {
   $31 = (___cxa_guard_acquire((6776|0))|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    __THREW__ = 0;
    $33 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch(-1,-1)|0;
     $37 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($36|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $33;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $38 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $39 = (($__iob) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$vararg_buffer>>2] = $40;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $41 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $41;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $42 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$38,$__fmt,$vararg_buffer9)|0);
  $__nc$0 = $42;
 }
 $43 = ($__nc$0|0)>(29);
 do {
  if ($43) {
   $44 = HEAP8[6776]|0;
   $45 = ($44<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i15) {
     do {
      if ($45) {
       $46 = (___cxa_guard_acquire((6776|0))|0);
       $47 = ($46|0)==(0);
       if (!($47)) {
        __THREW__ = 0;
        $48 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $49 = __THREW__; __THREW__ = 0;
        $50 = $49&1;
        if ($50) {
         $51 = ___cxa_find_matching_catch(-1,-1)|0;
         $52 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $52;$eh$lpad$body$indexZ2D = $51;
         break L40;
        } else {
         HEAP32[6768>>2] = $48;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $53 = HEAP32[6768>>2]|0;
     $54 = (($__iob) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer12>>2] = $55;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $56 = (invoke_iiiii(13,($__nb|0),($53|0),($__fmt|0),($vararg_buffer12|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 36;
     } else {
      $__nc$1 = $56;
      label = 44;
     }
    } else {
     do {
      if ($45) {
       $61 = (___cxa_guard_acquire((6776|0))|0);
       $62 = ($61|0)==(0);
       if (!($62)) {
        __THREW__ = 0;
        $63 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
        $64 = __THREW__; __THREW__ = 0;
        $65 = $64&1;
        if ($65) {
         $66 = ___cxa_find_matching_catch(-1,-1)|0;
         $67 = tempRet0;
         ___cxa_guard_abort((6776|0));
         $eh$lpad$body$index3Z2D = $67;$eh$lpad$body$indexZ2D = $66;
         break L40;
        } else {
         HEAP32[6768>>2] = $63;
         ___cxa_guard_release((6776|0));
         break;
        }
       }
      }
     } while(0);
     $68 = HEAP32[6768>>2]|0;
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer16>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer16+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $69 = (invoke_iiiii(13,($__nb|0),($68|0),($__fmt|0),($vararg_buffer16|0))|0);
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      label = 36;
     } else {
      $__nc$1 = $69;
      label = 44;
     }
    }
   } while(0);
   if ((label|0) == 44) {
    $72 = HEAP32[$__nb>>2]|0;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $110 = $72;$77 = $72;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(4);
    $74 = __THREW__; __THREW__ = 0;
    $75 = $74&1;
    if ($75) {
     label = 36;
    } else {
     $$pre = HEAP32[$__nb>>2]|0;
     $110 = $$pre;$77 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   if ((label|0) == 36) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $eh$lpad$body$index3Z2D = $60;$eh$lpad$body$indexZ2D = $59;
   }
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index3Z2D;
   ___resumeException($$111|0);
   // unreachable;
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   $110 = 0;$77 = $$pre12;$__nc$2 = $__nc$0;
  }
 } while(0);
 $76 = (($77) + ($__nc$2)|0);
 $78 = HEAP32[$8>>2]|0;
 $79 = $78 & 176;
 do {
  if ((($79|0) == 16)) {
   $80 = HEAP8[$77]|0;
   if ((($80<<24>>24) == 43) | (($80<<24>>24) == 45)) {
    $81 = (($77) + 1|0);
    $$0$i7 = $81;
    break;
   }
   $82 = ($__nc$2|0)>(1);
   $83 = ($80<<24>>24)==(48);
   $or$cond$i = $82 & $83;
   if ($or$cond$i) {
    $84 = (($77) + 1|0);
    $85 = HEAP8[$84]|0;
    if ((($85<<24>>24) == 88) | (($85<<24>>24) == 120)) {
     $86 = (($77) + 2|0);
     $$0$i7 = $86;
    } else {
     label = 53;
    }
   } else {
    label = 53;
   }
  } else if ((($79|0) == 32)) {
   $$0$i7 = $76;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $77;
 }
 $87 = ($77|0)==($__nar|0);
 if ($87) {
  $108 = 0;$97 = $__nar;$__ob$0 = $__o;
  label = 59;
 } else {
  $88 = $__nc$2 << 3;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __THREW__ = 0;
   invoke_v(4);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $117 = 0;
    label = 58;
   } else {
    $$pre13 = HEAP32[$__nb>>2]|0;
    $108 = $89;$97 = $$pre13;$__ob$0 = $89;
    label = 59;
   }
  } else {
   $108 = $89;$97 = $77;$__ob$0 = $89;
   label = 59;
  }
 }
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(53,($0|0),($__iob|0));
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   if ($96) {
    $117 = $108;
    label = 58;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(43,($97|0),($$0$i7|0),($76|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     $111 = ___cxa_find_matching_catch(-1,-1)|0;
     $112 = tempRet0;
     $113 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
     $$0 = $111;$$01 = $112;$115 = $108;
     break;
    }
    $100 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
    $101 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $101;
    $102 = HEAP32[$__op>>2]|0;
    $103 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(44,($1|0),($$byval_copy|0),($__ob$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
    $104 = __THREW__; __THREW__ = 0;
    $105 = $104&1;
    if ($105) {
     $117 = $108;
     label = 58;
    } else {
     $106 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $106;
     HEAP32[$agg$result>>2] = $106;
     $107 = ($108|0)==(0|0);
     if (!($107)) {
      _free($108);
     }
     $109 = ($110|0)==(0|0);
     if ($109) {
      STACKTOP = sp;return;
     }
     _free($110);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $93 = ___cxa_find_matching_catch(-1,-1)|0;
  $94 = tempRet0;
  $$0 = $93;$$01 = $94;$115 = $117;
 }
 $114 = ($115|0)==(0|0);
 if (!($114)) {
  _free($115);
 }
 $116 = ($110|0)==(0|0);
 if ($116) {
  $$111 = $$0;$$1210 = $$01;
  ___resumeException($$111|0);
  // unreachable;
 }
 _free($110);
 $$111 = $$0;$$1210 = $$01;
 ___resumeException($$111|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $$byval_copy = sp + 176|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__fmt = sp + 180|0;
 $__nar = sp + 188|0;
 $__o = sp + 28|0;
 $0 = sp + 20|0;
 $1 = sp + 24|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5680+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5680+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5680+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5680+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5680+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5680+5|0]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $9 = ___cxa_find_matching_catch(-1,-1)|0;
     $10 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($9|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $12 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$11,$__fmt,$vararg_buffer)|0);
 $13 = (($__nar) + ($12)|0);
 $14 = (($__iob) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 176;
 do {
  if ((($16|0) == 16)) {
   $17 = HEAP8[$__nar]|0;
   if ((($17<<24>>24) == 43) | (($17<<24>>24) == 45)) {
    $18 = (($__nar) + 1|0);
    $$0$i = $18;
    break;
   }
   $19 = ($12|0)>(1);
   $20 = ($17<<24>>24)==(48);
   $or$cond$i = $19 & $20;
   if ($or$cond$i) {
    $21 = (($__nar) + 1|0);
    $22 = HEAP8[$21]|0;
    if ((($22<<24>>24) == 88) | (($22<<24>>24) == 120)) {
     $23 = (($__nar) + 2|0);
     $$0$i = $23;
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
  } else if ((($16|0) == 32)) {
   $$0$i = $13;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[6872>>2]|0;
 $26 = ($25|0)==(-1);
 if (!($26)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $27 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$27>>2] = (132);
  $28 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$28>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   $54 = ___cxa_find_matching_catch(-1,-1)|0;
   $55 = tempRet0;
   $56 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
   ___resumeException($54|0);
   // unreachable;
  }
 }
 $31 = HEAP32[((6872 + 4|0))>>2]|0;
 $32 = (($31) + -1)|0;
 $33 = (($24) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($24) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $34;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 2;
 $41 = ($40>>>0)>($32>>>0);
 if ($41) {
  $42 = (($36) + ($32<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $48 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($48)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 48|0);
   $51 = HEAP32[$50>>2]|0;
   (FUNCTION_TABLE_iiiii[$51 & 31]($43,$__nar,$13,$__o)|0);
   $52 = (($__o) + ($12<<2)|0);
   $53 = ($$0$i|0)==($13|0);
   if ($53) {
    $__op$0 = $52;
    $61 = HEAP32[$__s>>2]|0;
    HEAP32[$1>>2] = $61;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
    STACKTOP = sp;return;
   }
   $57 = $__nar;
   $58 = $$0$i;
   $59 = (($58) - ($57))|0;
   $60 = (($__o) + ($59<<2)|0);
   $__op$0 = $60;
   $61 = HEAP32[$__s>>2]|0;
   HEAP32[$1>>2] = $61;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$52,$__iob,$__fl);
   STACKTOP = sp;return;
  }
 }
 $45 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($45);
 __THREW__ = 0;
 invoke_viii(9,($45|0),(14840|0),(112|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($56)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $$pre39$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[6880>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (132);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
   ___resumeException($59|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((6880 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 67;
    } else {
     $30 = (($23) + 8|0);
     $$0$ph38 = $__fmtb;$$pre39 = 0;
     L10: while(1) {
      $32 = $$pre39;
      while(1) {
       $31 = ($32|0)==(0);
       if (!($31)) {
        label = 67;
        break L8;
       }
       $33 = HEAP32[$__b>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $46 = 0;
       } else {
        $35 = (($33) + 12|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (($33) + 16|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($36|0)==($38|0);
        if ($39) {
         $40 = HEAP32[$33>>2]|0;
         $41 = (($40) + 36|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
         $44 = ($43|0)==(-1);
         if ($44) {
          HEAP32[$__b>>2] = 0;
          $46 = 0;
         } else {
          $46 = $33;
         }
        } else {
         $46 = $33;
        }
       }
       $45 = ($46|0)==(0|0);
       $47 = HEAP32[$__e>>2]|0;
       $48 = ($47|0)==(0|0);
       do {
        if ($48) {
         label = 20;
        } else {
         $49 = (($47) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($47) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = HEAP32[$47>>2]|0;
          $55 = (($54) + 36|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = (FUNCTION_TABLE_ii[$56 & 127]($47)|0);
          $58 = ($57|0)==(-1);
          if ($58) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          }
         }
         if ($45) {
          $85 = $47;
         } else {
          label = 21;
          break L10;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        label = 0;
        if ($45) {
         label = 21;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $62 = HEAP8[$$0$ph38]|0;
       $63 = HEAP32[$23>>2]|0;
       $64 = (($63) + 36|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (FUNCTION_TABLE_iiii[$65 & 31]($23,$62,0)|0);
       $67 = ($66<<24>>24)==(37);
       if ($67) {
        label = 24;
        break;
       }
       $89 = HEAP8[$$0$ph38]|0;
       $isascii1$i = ($89<<24>>24)>(-1);
       if ($isascii1$i) {
        $90 = $89 << 24 >> 24;
        $91 = HEAP32[$30>>2]|0;
        $92 = (($91) + ($90<<1)|0);
        $93 = HEAP16[$92>>1]|0;
        $94 = $93 & 8192;
        $95 = ($94<<16>>16)==(0);
        if (!($95)) {
         $$0$pn = $$0$ph38;
         label = 35;
         break;
        }
       }
       $154 = (($46) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = (($46) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$46>>2]|0;
        $160 = (($159) + 36|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (FUNCTION_TABLE_ii[$161 & 127]($46)|0);
        $$0$i$i16 = $162;
       } else {
        $163 = HEAP8[$155]|0;
        $164 = $163&255;
        $$0$i$i16 = $164;
       }
       $165 = $$0$i$i16&255;
       $166 = HEAP32[$23>>2]|0;
       $167 = (($166) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (FUNCTION_TABLE_iii[$168 & 31]($23,$165)|0);
       $170 = HEAP8[$$0$ph38]|0;
       $171 = HEAP32[$23>>2]|0;
       $172 = (($171) + 12|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (FUNCTION_TABLE_iii[$173 & 31]($23,$170)|0);
       $175 = ($169<<24>>24)==($174<<24>>24);
       if ($175) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $32 = 4;
      }
      L38: do {
       if ((label|0) == 24) {
        label = 0;
        $68 = (($$0$ph38) + 1|0);
        $69 = ($68|0)==($__fmte|0);
        if ($69) {
         label = 25;
         break L10;
        }
        $70 = HEAP8[$68]|0;
        $71 = HEAP32[$23>>2]|0;
        $72 = (($71) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (FUNCTION_TABLE_iiii[$73 & 31]($23,$70,0)|0);
        if ((($74<<24>>24) == 48) | (($74<<24>>24) == 69)) {
         $75 = (($$0$ph38) + 2|0);
         $76 = ($75|0)==($__fmte|0);
         if ($76) {
          label = 28;
          break L10;
         }
         $77 = HEAP8[$75]|0;
         $78 = HEAP32[$23>>2]|0;
         $79 = (($78) + 36|0);
         $80 = HEAP32[$79>>2]|0;
         $81 = (FUNCTION_TABLE_iiii[$80 & 31]($23,$77,0)|0);
         $$1 = $75;$__cmd$0 = $81;$__opt$0 = $74;
        } else {
         $$1 = $68;$__cmd$0 = $74;$__opt$0 = 0;
        }
        $82 = HEAP32[$this>>2]|0;
        $83 = (($82) + 36|0);
        $84 = HEAP32[$83>>2]|0;
        HEAP32[$2>>2] = $46;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$84 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 1|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 35) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 1|0);
         $96 = ($$2|0)==($__fmte|0);
         if ($96) {
          $$2$lcssa = $__fmte;
          break;
         }
         $97 = HEAP8[$$2]|0;
         $isascii1$i4 = ($97<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $98 = $97 << 24 >> 24;
         $99 = (($91) + ($98<<1)|0);
         $100 = HEAP16[$99>>1]|0;
         $101 = $100 & 8192;
         $102 = ($101<<16>>16)==(0);
         if ($102) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
          label = 35;
         }
        }
        $$pre$i$i$i7 = $46;$$pre$i2$i$i11 = $85;$117 = $85;
        while(1) {
         $103 = ($$pre$i$i$i7|0)==(0|0);
         if ($103) {
          $115 = 0;
         } else {
          $104 = (($$pre$i$i$i7) + 12|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = (($$pre$i$i$i7) + 16|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = ($105|0)==($107|0);
          if ($108) {
           $109 = HEAP32[$$pre$i$i$i7>>2]|0;
           $110 = (($109) + 36|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = (FUNCTION_TABLE_ii[$111 & 127]($$pre$i$i$i7)|0);
           $113 = ($112|0)==(-1);
           if ($113) {
            HEAP32[$__b>>2] = 0;
            $115 = 0;
           } else {
            $115 = $$pre$i$i$i7;
           }
          } else {
           $115 = $$pre$i$i$i7;
          }
         }
         $114 = ($115|0)==(0|0);
         $116 = ($117|0)==(0|0);
         do {
          if ($116) {
           $$pre$i2$i$i1141 = $$pre$i2$i$i11;
           label = 48;
          } else {
           $118 = (($117) + 12|0);
           $119 = HEAP32[$118>>2]|0;
           $120 = (($117) + 16|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = ($119|0)==($121|0);
           if (!($122)) {
            if ($114) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $117;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
           $123 = HEAP32[$117>>2]|0;
           $124 = (($123) + 36|0);
           $125 = HEAP32[$124>>2]|0;
           $126 = (FUNCTION_TABLE_ii[$125 & 127]($117)|0);
           $127 = ($126|0)==(-1);
           if ($127) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i1141 = 0;
            label = 48;
            break;
           } else {
            $128 = ($$pre$i2$i$i11|0)==(0|0);
            $tmp$i$i13 = $114 ^ $128;
            if ($tmp$i$i13) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$211 = $$pre$i2$i$i11;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
          }
         } while(0);
         if ((label|0) == 48) {
          label = 0;
          if ($114) {
           $$0$ph$be = $$2$lcssa;
           break L38;
          } else {
           $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$211 = 0;
          }
         }
         $129 = (($115) + 12|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = (($115) + 16|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = ($130|0)==($132|0);
         if ($133) {
          $134 = HEAP32[$115>>2]|0;
          $135 = (($134) + 36|0);
          $136 = HEAP32[$135>>2]|0;
          $137 = (FUNCTION_TABLE_ii[$136 & 127]($115)|0);
          $$0$i$i = $137;
         } else {
          $138 = HEAP8[$130]|0;
          $139 = $138&255;
          $$0$i$i = $139;
         }
         $140 = $$0$i$i&255;
         $isascii1$i14 = ($140<<24>>24)>(-1);
         if (!($isascii1$i14)) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $sext = $$0$i$i << 24;
         $141 = $sext >> 24;
         $142 = HEAP32[$30>>2]|0;
         $143 = (($142) + ($141<<1)|0);
         $144 = HEAP16[$143>>1]|0;
         $145 = $144 & 8192;
         $146 = ($145<<16>>16)==(0);
         if ($146) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $147 = HEAP32[$129>>2]|0;
         $148 = HEAP32[$131>>2]|0;
         $149 = ($147|0)==($148|0);
         if ($149) {
          $150 = HEAP32[$115>>2]|0;
          $151 = (($150) + 40|0);
          $152 = HEAP32[$151>>2]|0;
          (FUNCTION_TABLE_ii[$152 & 127]($115)|0);
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         } else {
          $153 = (($147) + 1|0);
          HEAP32[$129>>2] = $153;
          $$pre$i$i$i7 = $115;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$117 = $211;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $176 = HEAP32[$154>>2]|0;
        $177 = HEAP32[$156>>2]|0;
        $178 = ($176|0)==($177|0);
        if ($178) {
         $179 = HEAP32[$46>>2]|0;
         $180 = (($179) + 40|0);
         $181 = HEAP32[$180>>2]|0;
         (FUNCTION_TABLE_ii[$181 & 127]($46)|0);
        } else {
         $182 = (($176) + 1|0);
         HEAP32[$154>>2] = $182;
        }
        $183 = (($$0$ph38) + 1|0);
        $$0$ph$be = $183;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 67;
       break L8;
      }
      $$pre39$pre = HEAP32[$__err>>2]|0;
      $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
     else if ((label|0) == 28) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $46;
      break;
     }
    }
   } while(0);
   if ((label|0) == 67) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i20 = $$pre;
   }
   $184 = ($$pre$i$i$i20|0)==(0|0);
   if ($184) {
    $196 = 0;
   } else {
    $185 = (($$pre$i$i$i20) + 12|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($$pre$i$i$i20) + 16|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($186|0)==($188|0);
    if ($189) {
     $190 = HEAP32[$$pre$i$i$i20>>2]|0;
     $191 = (($190) + 36|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (FUNCTION_TABLE_ii[$192 & 127]($$pre$i$i$i20)|0);
     $194 = ($193|0)==(-1);
     if ($194) {
      HEAP32[$__b>>2] = 0;
      $196 = 0;
     } else {
      $196 = $$pre$i$i$i20;
     }
    } else {
     $196 = $$pre$i$i$i20;
    }
   }
   $195 = ($196|0)==(0|0);
   $197 = HEAP32[$__e>>2]|0;
   $198 = ($197|0)==(0|0);
   do {
    if ($198) {
     label = 77;
    } else {
     $199 = (($197) + 12|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($197) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($200|0)==($202|0);
     if ($203) {
      $204 = HEAP32[$197>>2]|0;
      $205 = (($204) + 36|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (FUNCTION_TABLE_ii[$206 & 127]($197)|0);
      $208 = ($207|0)==(-1);
      if ($208) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      }
     }
     if ($195) {
      HEAP32[$agg$result>>2] = $196;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 77) {
    if (!($195)) {
     HEAP32[$agg$result>>2] = $196;
     STACKTOP = sp;return;
    }
   }
   $209 = HEAP32[$__err>>2]|0;
   $210 = $209 | 2;
   HEAP32[$__err>>2] = $210;
   HEAP32[$agg$result>>2] = $196;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(9,($25|0),(14840|0),(112|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($61)|0);
  ___resumeException($59|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5784,((5784 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6880 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6880 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6880 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 284|0;
 $$byval_copy29 = sp + 276|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 220|0;
 $$byval_copy26 = sp + 120|0;
 $$byval_copy25 = sp + 124|0;
 $$byval_copy24 = sp + 116|0;
 $$byval_copy23 = sp + 228|0;
 $$byval_copy22 = sp + 52|0;
 $$byval_copy21 = sp + 28|0;
 $$byval_copy20 = sp + 32|0;
 $$byval_copy19 = sp + 36|0;
 $$byval_copy18 = sp + 40|0;
 $$byval_copy17 = sp + 44|0;
 $$byval_copy16 = sp + 48|0;
 $$byval_copy15 = sp + 224|0;
 $$byval_copy14 = sp + 112|0;
 $$byval_copy13 = sp + 56|0;
 $$byval_copy12 = sp + 60|0;
 $$byval_copy11 = sp + 64|0;
 $$byval_copy10 = sp + 68|0;
 $$byval_copy9 = sp + 72|0;
 $$byval_copy8 = sp + 76|0;
 $$byval_copy7 = sp + 80|0;
 $$byval_copy6 = sp + 84|0;
 $$byval_copy5 = sp + 88|0;
 $$byval_copy4 = sp + 92|0;
 $$byval_copy3 = sp + 96|0;
 $$byval_copy2 = sp + 100|0;
 $$byval_copy1 = sp + 104|0;
 $$byval_copy = sp + 248|0;
 $1 = sp + 256|0;
 $2 = sp + 264|0;
 $3 = sp + 272|0;
 $4 = sp + 280|0;
 $5 = sp + 288|0;
 $6 = sp + 128|0;
 $7 = sp + 132|0;
 $8 = sp + 136|0;
 $9 = sp + 140|0;
 $10 = sp + 144|0;
 $11 = sp + 148|0;
 $12 = sp + 152|0;
 $13 = sp + 156|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 164|0;
 $15 = sp + 168|0;
 $16 = sp + 172|0;
 $17 = sp + 176|0;
 $18 = sp + 180|0;
 $19 = sp + 184|0;
 $20 = sp + 188|0;
 $21 = sp + 192|0;
 $22 = sp + 196|0;
 $23 = sp + 200|0;
 $24 = sp + 204|0;
 $25 = sp + 208|0;
 $26 = sp + 212|0;
 $27 = sp + 216|0;
 $28 = sp + 20|0;
 $29 = sp + 24|0;
 $30 = sp + 236|0;
 $31 = sp + 16|0;
 $32 = sp + 240|0;
 $33 = sp + 232|0;
 $34 = sp + 12|0;
 $35 = sp + 108|0;
 $36 = sp + 244|0;
 $37 = sp + 252|0;
 $38 = sp + 160|0;
 $39 = sp + 260|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[6880>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (132);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((6880 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 127]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 1|0);
      $113 = (($102) + 1|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,5792,((5792 + 8|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,5800,((5800 + 8|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 127]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,5808,((5808 + 11|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,5824,((5824 + 5|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 127]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 127]($179)|0);
     $184 = HEAP8[$183]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,5832,((5832 + 8|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 127]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 1|0);
      $261 = (($250) + 1|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(9,($61|0),(14840|0),(112|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 127]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 127]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 31]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 127]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $71 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 127]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 31]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 127]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i3;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 127]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i9 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 127]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 31]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 127]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 127]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i16;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 127]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0;
 var $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 28|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 24|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[6872>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (132);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $58 = ___cxa_find_matching_catch(-1,-1)|0;
   $59 = tempRet0;
   $60 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
   ___resumeException($58|0);
   // unreachable;
  }
 }
 $11 = HEAP32[((6872 + 4|0))>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($4) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if ($21) {
  $22 = (($16) + ($12<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $28 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
   HEAP32[$__err>>2] = 0;
   $29 = ($__fmtb|0)==($__fmte|0);
   L8: do {
    if ($29) {
     label = 71;
    } else {
     $$0$ph43 = $__fmtb;$$pre44 = 0;
     L10: while(1) {
      $31 = $$pre44;
      while(1) {
       $30 = ($31|0)==(0);
       if (!($30)) {
        label = 71;
        break L8;
       }
       $32 = HEAP32[$__b>>2]|0;
       $33 = ($32|0)==(0|0);
       if ($33) {
        $204 = 1;$84 = 0;
       } else {
        $34 = (($32) + 12|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($32) + 16|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = ($35|0)==($37|0);
        if ($38) {
         $39 = HEAP32[$32>>2]|0;
         $40 = (($39) + 36|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (FUNCTION_TABLE_ii[$41 & 127]($32)|0);
         $$0$i$i$i$i = $42;
        } else {
         $43 = HEAP32[$35>>2]|0;
         $$0$i$i$i$i = $43;
        }
        $44 = ($$0$i$i$i$i|0)==(-1);
        if ($44) {
         HEAP32[$__b>>2] = 0;
         $204 = 1;$84 = 0;
        } else {
         $204 = 0;$84 = $32;
        }
       }
       $45 = HEAP32[$__e>>2]|0;
       $46 = ($45|0)==(0|0);
       do {
        if ($46) {
         label = 23;
        } else {
         $47 = (($45) + 12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($45) + 16|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($48|0)==($50|0);
         if ($51) {
          $52 = HEAP32[$45>>2]|0;
          $53 = (($52) + 36|0);
          $54 = HEAP32[$53>>2]|0;
          $55 = (FUNCTION_TABLE_ii[$54 & 127]($45)|0);
          $$0$i$i1$i$i = $55;
         } else {
          $56 = HEAP32[$48>>2]|0;
          $$0$i$i1$i$i = $56;
         }
         $57 = ($$0$i$i1$i$i|0)==(-1);
         if ($57) {
          HEAP32[$__e>>2] = 0;
          label = 23;
          break;
         } else {
          if ($204) {
           $85 = $45;
           break;
          } else {
           label = 25;
           break L10;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        if ($204) {
         label = 25;
         break L10;
        } else {
         $85 = 0;
        }
       }
       $61 = HEAP32[$$0$ph43>>2]|0;
       $62 = HEAP32[$23>>2]|0;
       $63 = (($62) + 52|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (FUNCTION_TABLE_iiii[$64 & 31]($23,$61,0)|0);
       $66 = ($65<<24>>24)==(37);
       if ($66) {
        label = 28;
        break;
       }
       $89 = HEAP32[$$0$ph43>>2]|0;
       $90 = HEAP32[$23>>2]|0;
       $91 = (($90) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (FUNCTION_TABLE_iiii[$92 & 31]($23,8192,$89)|0);
       if ($93) {
        $$0$pn = $$0$ph43;
        label = 38;
        break;
       }
       $148 = (($84) + 12|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = (($84) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($149|0)==($151|0);
       if ($152) {
        $153 = HEAP32[$84>>2]|0;
        $154 = (($153) + 36|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (FUNCTION_TABLE_ii[$155 & 127]($84)|0);
        $$0$i$i16 = $156;
       } else {
        $157 = HEAP32[$149>>2]|0;
        $$0$i$i16 = $157;
       }
       $158 = HEAP32[$23>>2]|0;
       $159 = (($158) + 28|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (FUNCTION_TABLE_iii[$160 & 31]($23,$$0$i$i16)|0);
       $162 = HEAP32[$$0$ph43>>2]|0;
       $163 = HEAP32[$23>>2]|0;
       $164 = (($163) + 28|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (FUNCTION_TABLE_iii[$165 & 31]($23,$162)|0);
       $167 = ($161|0)==($166|0);
       if ($167) {
        label = 66;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $31 = 4;
      }
      L42: do {
       if ((label|0) == 28) {
        label = 0;
        $67 = (($$0$ph43) + 4|0);
        $68 = ($67|0)==($__fmte|0);
        if ($68) {
         label = 29;
         break L10;
        }
        $69 = HEAP32[$67>>2]|0;
        $70 = HEAP32[$23>>2]|0;
        $71 = (($70) + 52|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (FUNCTION_TABLE_iiii[$72 & 31]($23,$69,0)|0);
        if ((($73<<24>>24) == 48) | (($73<<24>>24) == 69)) {
         $74 = (($$0$ph43) + 8|0);
         $75 = ($74|0)==($__fmte|0);
         if ($75) {
          label = 32;
          break L10;
         }
         $76 = HEAP32[$74>>2]|0;
         $77 = HEAP32[$23>>2]|0;
         $78 = (($77) + 52|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (FUNCTION_TABLE_iiii[$79 & 31]($23,$76,0)|0);
         $$1 = $74;$__cmd$0 = $80;$__opt$0 = $73;
        } else {
         $$1 = $67;$__cmd$0 = $73;$__opt$0 = 0;
        }
        $81 = HEAP32[$this>>2]|0;
        $82 = (($81) + 36|0);
        $83 = HEAP32[$82>>2]|0;
        HEAP32[$2>>2] = $84;
        HEAP32[$3>>2] = $85;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
        ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$83 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $86 = HEAP32[$1>>2]|0;
        HEAP32[$__b>>2] = $86;
        $87 = (($$1) + 4|0);
        $$0$ph$be = $87;
       }
       else if ((label|0) == 38) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 4|0);
         $94 = ($$2|0)==($__fmte|0);
         if ($94) {
          $$2$lcssa = $__fmte;
          break;
         }
         $95 = HEAP32[$$2>>2]|0;
         $96 = HEAP32[$23>>2]|0;
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (FUNCTION_TABLE_iiii[$98 & 31]($23,8192,$95)|0);
         if ($99) {
          $$0$pn = $$2;
          label = 38;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        $$pre$i$i$i6 = $84;$$pre$i3$i$i12 = $85;$113 = $85;
        while(1) {
         $100 = ($$pre$i$i$i6|0)==(0|0);
         if ($100) {
          $125 = 1;$127 = 0;
         } else {
          $101 = (($$pre$i$i$i6) + 12|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($$pre$i$i$i6) + 16|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = ($102|0)==($104|0);
          if ($105) {
           $106 = HEAP32[$$pre$i$i$i6>>2]|0;
           $107 = (($106) + 36|0);
           $108 = HEAP32[$107>>2]|0;
           $109 = (FUNCTION_TABLE_ii[$108 & 127]($$pre$i$i$i6)|0);
           $$0$i$i$i$i4 = $109;
          } else {
           $110 = HEAP32[$102>>2]|0;
           $$0$i$i$i$i4 = $110;
          }
          $111 = ($$0$i$i$i$i4|0)==(-1);
          if ($111) {
           HEAP32[$__b>>2] = 0;
           $125 = 1;$127 = 0;
          } else {
           $125 = 0;$127 = $$pre$i$i$i6;
          }
         }
         $112 = ($113|0)==(0|0);
         do {
          if ($112) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;
           label = 53;
          } else {
           $114 = (($113) + 12|0);
           $115 = HEAP32[$114>>2]|0;
           $116 = (($113) + 16|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = ($115|0)==($117|0);
           if ($118) {
            $119 = HEAP32[$113>>2]|0;
            $120 = (($119) + 36|0);
            $121 = HEAP32[$120>>2]|0;
            $122 = (FUNCTION_TABLE_ii[$121 & 127]($113)|0);
            $$0$i$i1$i$i10 = $122;
           } else {
            $123 = HEAP32[$115>>2]|0;
            $$0$i$i1$i$i10 = $123;
           }
           $124 = ($$0$i$i1$i$i10|0)==(-1);
           if ($124) {
            HEAP32[$__e>>2] = 0;
            $$pre$i3$i$i1246 = 0;
            label = 53;
            break;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
            $tmp$i$i15 = $125 ^ $phitmp$i4$i$i13;
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$205 = $$pre$i3$i$i12;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L42;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          if ($125) {
           $$0$ph$be = $$2$lcssa;
           break L42;
          } else {
           $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$205 = 0;
          }
         }
         $126 = (($127) + 12|0);
         $128 = HEAP32[$126>>2]|0;
         $129 = (($127) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$127>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = (FUNCTION_TABLE_ii[$134 & 127]($127)|0);
          $$0$i$i = $135;
         } else {
          $136 = HEAP32[$128>>2]|0;
          $$0$i$i = $136;
         }
         $137 = HEAP32[$23>>2]|0;
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (FUNCTION_TABLE_iiii[$139 & 31]($23,8192,$$0$i$i)|0);
         if (!($140)) {
          $$0$ph$be = $$2$lcssa;
          break L42;
         }
         $141 = HEAP32[$126>>2]|0;
         $142 = HEAP32[$129>>2]|0;
         $143 = ($141|0)==($142|0);
         if ($143) {
          $144 = HEAP32[$127>>2]|0;
          $145 = (($144) + 40|0);
          $146 = HEAP32[$145>>2]|0;
          (FUNCTION_TABLE_ii[$146 & 127]($127)|0);
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         } else {
          $147 = (($141) + 4|0);
          HEAP32[$126>>2] = $147;
          $$pre$i$i$i6 = $127;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$113 = $205;
          continue;
         }
        }
       }
       else if ((label|0) == 66) {
        label = 0;
        $168 = HEAP32[$148>>2]|0;
        $169 = HEAP32[$150>>2]|0;
        $170 = ($168|0)==($169|0);
        if ($170) {
         $171 = HEAP32[$84>>2]|0;
         $172 = (($171) + 40|0);
         $173 = HEAP32[$172>>2]|0;
         (FUNCTION_TABLE_ii[$173 & 127]($84)|0);
        } else {
         $174 = (($168) + 4|0);
         HEAP32[$148>>2] = $174;
        }
        $175 = (($$0$ph43) + 4|0);
        $$0$ph$be = $175;
       }
      } while(0);
      $88 = ($$0$ph$be|0)==($__fmte|0);
      if ($88) {
       label = 71;
       break L8;
      }
      $$pre44$pre = HEAP32[$__err>>2]|0;
      $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
     }
     if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 29) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
     else if ((label|0) == 32) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $84;
      break;
     }
    }
   } while(0);
   if ((label|0) == 71) {
    $$pre = HEAP32[$__b>>2]|0;
    $$pre$i$i$i21 = $$pre;
   }
   $176 = ($$pre$i$i$i21|0)==(0|0);
   if ($176) {
    $203 = 0;$206 = 1;
   } else {
    $177 = (($$pre$i$i$i21) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($$pre$i$i$i21) + 16|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($178|0)==($180|0);
    if ($181) {
     $182 = HEAP32[$$pre$i$i$i21>>2]|0;
     $183 = (($182) + 36|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (FUNCTION_TABLE_ii[$184 & 127]($$pre$i$i$i21)|0);
     $$0$i$i$i$i19 = $185;
    } else {
     $186 = HEAP32[$178>>2]|0;
     $$0$i$i$i$i19 = $186;
    }
    $187 = ($$0$i$i$i$i19|0)==(-1);
    if ($187) {
     HEAP32[$__b>>2] = 0;
     $203 = 0;$206 = 1;
    } else {
     $203 = $$pre$i$i$i21;$206 = 0;
    }
   }
   $188 = HEAP32[$__e>>2]|0;
   $189 = ($188|0)==(0|0);
   do {
    if ($189) {
     label = 84;
    } else {
     $190 = (($188) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($188) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191|0)==($193|0);
     if ($194) {
      $195 = HEAP32[$188>>2]|0;
      $196 = (($195) + 36|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (FUNCTION_TABLE_ii[$197 & 127]($188)|0);
      $$0$i$i1$i$i25 = $198;
     } else {
      $199 = HEAP32[$191>>2]|0;
      $$0$i$i1$i$i25 = $199;
     }
     $200 = ($$0$i$i1$i$i25|0)==(-1);
     if ($200) {
      HEAP32[$__e>>2] = 0;
      label = 84;
      break;
     }
     if ($206) {
      HEAP32[$agg$result>>2] = $203;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 84) {
    if (!($206)) {
     HEAP32[$agg$result>>2] = $203;
     STACKTOP = sp;return;
    }
   }
   $201 = HEAP32[$__err>>2]|0;
   $202 = $201 | 2;
   HEAP32[$__err>>2] = $202;
   HEAP32[$agg$result>>2] = $203;
   STACKTOP = sp;return;
  }
 }
 $25 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($25);
 __THREW__ = 0;
 invoke_viii(9,($25|0),(14840|0),(112|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $58 = ___cxa_find_matching_catch(-1,-1)|0;
  $59 = tempRet0;
  $60 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
  ___resumeException($58|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5936,((5936 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
   ___resumeException($42|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6872 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_ii[$30 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $32 = (($31) + 168|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $33 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$31,$32,$21,$__err,0)|0);
   $34 = $33;
   $35 = $31;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(168);
   if (!($37)) {
    $41 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $41;
    STACKTOP = sp;return;
   }
   $38 = (($__tm) + 24|0);
   $39 = (($36|0) / 12)&-1;
   $40 = (($39|0) % 7)&-1;
   HEAP32[$38>>2] = $40;
   $41 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $42 = ___cxa_find_matching_catch(-1,-1)|0;
  $43 = tempRet0;
  $44 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  ___resumeException($42|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $43 = ___cxa_find_matching_catch(-1,-1)|0;
   $44 = tempRet0;
   $45 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
   ___resumeException($43|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6872 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = HEAP32[$__e>>2]|0;
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_ii[$31 & 127]($28)|0);
   HEAP32[$0>>2] = $27;
   $33 = (($32) + 288|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $34 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$32,$33,$21,$__err,0)|0);
   $35 = $34;
   $36 = $32;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)<(288);
   if (!($38)) {
    $42 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $42;
    STACKTOP = sp;return;
   }
   $39 = (($__tm) + 16|0);
   $40 = (($37|0) / 12)&-1;
   $41 = (($40|0) % 12)&-1;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $43 = ___cxa_find_matching_catch(-1,-1)|0;
  $44 = tempRet0;
  $45 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($45)|0);
  ___resumeException($43|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $5 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$5>>2] = (132);
  $6 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$6>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $39 = ___cxa_find_matching_catch(-1,-1)|0;
   $40 = tempRet0;
   $41 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
   ___resumeException($39|0);
   // unreachable;
  }
 }
 $9 = HEAP32[((6872 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if ($19) {
  $20 = (($14) + ($10<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $26 = HEAP32[$1>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($26)|0);
   $27 = (($__tm) + 20|0);
   $28 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $28;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$21,4)|0);
   $30 = HEAP32[$__err>>2]|0;
   $31 = $30 & 4;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $38 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $38;
    STACKTOP = sp;return;
   }
   $33 = ($29|0)<(69);
   if ($33) {
    $34 = (($29) + 2000)|0;
    $__t$0$i = $34;
   } else {
    $$off$i = (($29) + -69)|0;
    $35 = ($$off$i>>>0)<(31);
    $36 = (($29) + 1900)|0;
    $$$i = $35 ? $36 : $29;
    $__t$0$i = $$$i;
   }
   $37 = (($__t$0$i) + -1900)|0;
   HEAP32[$27>>2] = $37;
   $38 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $38;
   STACKTOP = sp;return;
  }
 }
 $23 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($23);
 __THREW__ = 0;
 invoke_viii(9,($23|0),(14840|0),(112|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $39 = ___cxa_find_matching_catch(-1,-1)|0;
  $40 = tempRet0;
  $41 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
  ___resumeException($39|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy30 = sp + 284|0;
 $$byval_copy29 = sp + 276|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 220|0;
 $$byval_copy26 = sp + 120|0;
 $$byval_copy25 = sp + 124|0;
 $$byval_copy24 = sp + 116|0;
 $$byval_copy23 = sp + 228|0;
 $$byval_copy22 = sp + 52|0;
 $$byval_copy21 = sp + 28|0;
 $$byval_copy20 = sp + 32|0;
 $$byval_copy19 = sp + 36|0;
 $$byval_copy18 = sp + 40|0;
 $$byval_copy17 = sp + 44|0;
 $$byval_copy16 = sp + 48|0;
 $$byval_copy15 = sp + 224|0;
 $$byval_copy14 = sp + 112|0;
 $$byval_copy13 = sp + 56|0;
 $$byval_copy12 = sp + 60|0;
 $$byval_copy11 = sp + 64|0;
 $$byval_copy10 = sp + 68|0;
 $$byval_copy9 = sp + 72|0;
 $$byval_copy8 = sp + 76|0;
 $$byval_copy7 = sp + 80|0;
 $$byval_copy6 = sp + 84|0;
 $$byval_copy5 = sp + 88|0;
 $$byval_copy4 = sp + 92|0;
 $$byval_copy3 = sp + 96|0;
 $$byval_copy2 = sp + 100|0;
 $$byval_copy1 = sp + 104|0;
 $$byval_copy = sp + 248|0;
 $1 = sp + 256|0;
 $2 = sp + 264|0;
 $3 = sp + 272|0;
 $4 = sp + 280|0;
 $5 = sp + 288|0;
 $6 = sp + 128|0;
 $7 = sp + 132|0;
 $8 = sp + 136|0;
 $9 = sp + 140|0;
 $10 = sp + 144|0;
 $11 = sp + 148|0;
 $12 = sp + 152|0;
 $13 = sp + 156|0;
 $__p$i$i$i$i = sp;
 $14 = sp + 164|0;
 $15 = sp + 168|0;
 $16 = sp + 172|0;
 $17 = sp + 176|0;
 $18 = sp + 180|0;
 $19 = sp + 184|0;
 $20 = sp + 188|0;
 $21 = sp + 192|0;
 $22 = sp + 196|0;
 $23 = sp + 200|0;
 $24 = sp + 204|0;
 $25 = sp + 208|0;
 $26 = sp + 212|0;
 $27 = sp + 216|0;
 $28 = sp + 20|0;
 $29 = sp + 24|0;
 $30 = sp + 236|0;
 $31 = sp + 16|0;
 $32 = sp + 240|0;
 $33 = sp + 232|0;
 $34 = sp + 12|0;
 $35 = sp + 108|0;
 $36 = sp + 244|0;
 $37 = sp + 252|0;
 $38 = sp + 160|0;
 $39 = sp + 260|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = HEAP32[$14>>2]|0;
 $41 = HEAP32[6872>>2]|0;
 $42 = ($41|0)==(-1);
 if (!($42)) {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $43 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$43>>2] = (132);
  $44 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$44>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $45 = __THREW__; __THREW__ = 0;
  $46 = $45&1;
  if ($46) {
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 }
 $47 = HEAP32[((6872 + 4|0))>>2]|0;
 $48 = (($47) + -1)|0;
 $49 = (($40) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($40) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $50;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = $55 >> 2;
 $57 = ($56>>>0)>($48>>>0);
 if ($57) {
  $58 = (($52) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $64 = HEAP32[$14>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
   $65 = $__fmt << 24 >> 24;
   L8: do {
    switch ($65|0) {
    case 70:  {
     $132 = HEAP32[$__b>>2]|0;
     HEAP32[$22>>2] = $132;
     $133 = HEAP32[$__e>>2]|0;
     HEAP32[$23>>2] = $133;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$22+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$23+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,6000,((6000 + 32|0)));
     $134 = HEAP32[$21>>2]|0;
     HEAP32[$__b>>2] = $134;
     break;
    }
    case 65: case 97:  {
     $69 = HEAP32[$__e>>2]|0;
     $70 = (($this) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$71>>2]|0;
     $73 = (FUNCTION_TABLE_ii[$72 & 127]($70)|0);
     HEAP32[$13>>2] = $69;
     $74 = (($73) + 168|0);
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$13+0>>2]|0;
     $75 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$73,$74,$59,$__err,0)|0);
     $76 = $75;
     $77 = $73;
     $78 = (($76) - ($77))|0;
     $79 = ($78|0)<(168);
     if ($79) {
      $80 = (($__tm) + 24|0);
      $81 = (($78|0) / 12)&-1;
      $82 = (($81|0) % 7)&-1;
      HEAP32[$80>>2] = $82;
     }
     break;
    }
    case 99:  {
     $98 = (($this) + 8|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_ii[$101 & 127]($98)|0);
     $103 = HEAP32[$__b>>2]|0;
     HEAP32[$16>>2] = $103;
     $104 = HEAP32[$__e>>2]|0;
     HEAP32[$17>>2] = $104;
     $105 = HEAP8[$102]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     if ($107) {
      $112 = (($102) + 4|0);
      $113 = (($102) + 4|0);
      $114 = $105&255;
      $115 = $114 >>> 1;
      $117 = $113;$118 = $115;$119 = $112;
     } else {
      $108 = (($102) + 8|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($102) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $117 = $109;$118 = $111;$119 = $109;
     }
     $116 = (($117) + ($118<<2)|0);
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$16+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$17+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$119,$116);
     $120 = HEAP32[$15>>2]|0;
     HEAP32[$__b>>2] = $120;
     break;
    }
    case 104: case 66: case 98:  {
     $83 = HEAP32[$__e>>2]|0;
     $84 = (($this) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_ii[$87 & 127]($84)|0);
     HEAP32[$12>>2] = $83;
     $89 = (($88) + 288|0);
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$12+0>>2]|0;
     $90 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$88,$89,$59,$__err,0)|0);
     $91 = $90;
     $92 = $88;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(288);
     if ($94) {
      $95 = (($__tm) + 16|0);
      $96 = (($93|0) / 12)&-1;
      $97 = (($96|0) % 12)&-1;
      HEAP32[$95>>2] = $97;
     }
     break;
    }
    case 73:  {
     $143 = (($__tm) + 8|0);
     $144 = HEAP32[$__e>>2]|0;
     HEAP32[$9>>2] = $144;
     ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$9+0>>2]|0;
     $145 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$59,2)|0);
     $146 = HEAP32[$__err>>2]|0;
     $147 = $146 & 4;
     $148 = ($147|0)==(0);
     if ($148) {
      $$off$i12 = (($145) + -1)|0;
      $149 = ($$off$i12>>>0)<(12);
      if ($149) {
       HEAP32[$143>>2] = $145;
       break L8;
      }
     }
     $150 = $146 | 4;
     HEAP32[$__err>>2] = $150;
     break;
    }
    case 68:  {
     $129 = HEAP32[$__b>>2]|0;
     HEAP32[$19>>2] = $129;
     $130 = HEAP32[$__e>>2]|0;
     HEAP32[$20>>2] = $130;
     ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$19+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$20+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,5968,((5968 + 32|0)));
     $131 = HEAP32[$18>>2]|0;
     HEAP32[$__b>>2] = $131;
     break;
    }
    case 119:  {
     $233 = HEAP32[$__e>>2]|0;
     HEAP32[$3>>2] = $233;
     ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$3+0>>2]|0;
     $234 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$59,1)|0);
     $235 = HEAP32[$__err>>2]|0;
     $236 = $235 & 4;
     $237 = ($236|0)==(0);
     $238 = ($234|0)<(7);
     $or$cond$i29 = $237 & $238;
     if ($or$cond$i29) {
      $239 = (($__tm) + 24|0);
      HEAP32[$239>>2] = $234;
      break L8;
     } else {
      $240 = $235 | 4;
      HEAP32[$__err>>2] = $240;
      break L8;
     }
     break;
    }
    case 88:  {
     $246 = (($this) + 8|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (($247) + 24|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (FUNCTION_TABLE_ii[$249 & 127]($246)|0);
     $251 = HEAP32[$__b>>2]|0;
     HEAP32[$37>>2] = $251;
     $252 = HEAP32[$__e>>2]|0;
     HEAP32[$38>>2] = $252;
     $253 = HEAP8[$250]|0;
     $254 = $253 & 1;
     $255 = ($254<<24>>24)==(0);
     if ($255) {
      $260 = (($250) + 4|0);
      $261 = (($250) + 4|0);
      $262 = $253&255;
      $263 = $262 >>> 1;
      $265 = $261;$266 = $263;$267 = $260;
     } else {
      $256 = (($250) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($250) + 4|0);
      $259 = HEAP32[$258>>2]|0;
      $265 = $257;$266 = $259;$267 = $257;
     }
     $264 = (($265) + ($266<<2)|0);
     ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$37+0>>2]|0;
     ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$38+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$267,$264);
     $268 = HEAP32[$36>>2]|0;
     HEAP32[$__b>>2] = $268;
     break;
    }
    case 116: case 110:  {
     $176 = HEAP32[$__e>>2]|0;
     HEAP32[$24>>2] = $176;
     ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$24+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$59);
     break;
    }
    case 101: case 100:  {
     $121 = (($__tm) + 12|0);
     $122 = HEAP32[$__e>>2]|0;
     HEAP32[$11>>2] = $122;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$11+0>>2]|0;
     $123 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$59,2)|0);
     $124 = HEAP32[$__err>>2]|0;
     $125 = $124 & 4;
     $126 = ($125|0)==(0);
     if ($126) {
      $$off$i = (($123) + -1)|0;
      $127 = ($$off$i>>>0)<(31);
      if ($127) {
       HEAP32[$121>>2] = $123;
       break L8;
      }
     }
     $128 = $124 | 4;
     HEAP32[$__err>>2] = $128;
     break;
    }
    case 77:  {
     $168 = HEAP32[$__e>>2]|0;
     HEAP32[$6>>2] = $168;
     ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$6+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$59,2)|0);
     $170 = HEAP32[$__err>>2]|0;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     $173 = ($169|0)<(60);
     $or$cond$i21 = $172 & $173;
     if ($or$cond$i21) {
      $174 = (($__tm) + 4|0);
      HEAP32[$174>>2] = $169;
      break L8;
     } else {
      $175 = $170 | 4;
      HEAP32[$__err>>2] = $175;
      break L8;
     }
     break;
    }
    case 72:  {
     $135 = HEAP32[$__e>>2]|0;
     HEAP32[$10>>2] = $135;
     ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$10+0>>2]|0;
     $136 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$59,2)|0);
     $137 = HEAP32[$__err>>2]|0;
     $138 = $137 & 4;
     $139 = ($138|0)==(0);
     $140 = ($136|0)<(24);
     $or$cond$i = $139 & $140;
     if ($or$cond$i) {
      $141 = (($__tm) + 8|0);
      HEAP32[$141>>2] = $136;
      break L8;
     } else {
      $142 = $137 | 4;
      HEAP32[$__err>>2] = $142;
      break L8;
     }
     break;
    }
    case 112:  {
     $177 = (($__tm) + 8|0);
     $178 = HEAP32[$__e>>2]|0;
     $179 = (($this) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (FUNCTION_TABLE_ii[$182 & 127]($179)|0);
     $184 = HEAP8[$183]|0;
     $185 = $184 & 1;
     $186 = ($185<<24>>24)==(0);
     if ($186) {
      $189 = $184&255;
      $190 = $189 >>> 1;
      $202 = $190;
     } else {
      $187 = (($183) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $202 = $188;
     }
     $191 = (($183) + 12|0);
     $192 = HEAP8[$191]|0;
     $193 = $192 & 1;
     $194 = ($193<<24>>24)==(0);
     if ($194) {
      $197 = $192&255;
      $198 = $197 >>> 1;
      $200 = $198;
     } else {
      $195 = (($183) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $200 = $196;
     }
     $199 = (0 - ($200))|0;
     $201 = ($202|0)==($199|0);
     if ($201) {
      $203 = HEAP32[$__err>>2]|0;
      $204 = $203 | 4;
      HEAP32[$__err>>2] = $204;
      break L8;
     }
     HEAP32[$5>>2] = $178;
     $205 = (($183) + 24|0);
     ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$5+0>>2]|0;
     $206 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$183,$205,$59,$__err,0)|0);
     $207 = $206;
     $208 = $183;
     $209 = (($207) - ($208))|0;
     $210 = ($206|0)==($183|0);
     if ($210) {
      $211 = HEAP32[$177>>2]|0;
      $212 = ($211|0)==(12);
      if ($212) {
       HEAP32[$177>>2] = 0;
       break L8;
      }
     }
     $213 = ($209|0)==(12);
     if ($213) {
      $214 = HEAP32[$177>>2]|0;
      $215 = ($214|0)<(12);
      if ($215) {
       $216 = (($214) + 12)|0;
       HEAP32[$177>>2] = $216;
      }
     }
     break;
    }
    case 106:  {
     $151 = HEAP32[$__e>>2]|0;
     HEAP32[$8>>2] = $151;
     ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$8+0>>2]|0;
     $152 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$59,3)|0);
     $153 = HEAP32[$__err>>2]|0;
     $154 = $153 & 4;
     $155 = ($154|0)==(0);
     $156 = ($152|0)<(366);
     $or$cond$i15 = $155 & $156;
     if ($or$cond$i15) {
      $157 = (($__tm) + 28|0);
      HEAP32[$157>>2] = $152;
      break L8;
     } else {
      $158 = $153 | 4;
      HEAP32[$__err>>2] = $158;
      break L8;
     }
     break;
    }
    case 83:  {
     $223 = HEAP32[$__e>>2]|0;
     HEAP32[$4>>2] = $223;
     ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$4+0>>2]|0;
     $224 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$59,2)|0);
     $225 = HEAP32[$__err>>2]|0;
     $226 = $225 & 4;
     $227 = ($226|0)==(0);
     $228 = ($224|0)<(61);
     $or$cond$i26 = $227 & $228;
     if ($or$cond$i26) {
      HEAP32[$__tm>>2] = $224;
      break L8;
     } else {
      $229 = $225 | 4;
      HEAP32[$__err>>2] = $229;
      break L8;
     }
     break;
    }
    case 109:  {
     $159 = HEAP32[$__e>>2]|0;
     HEAP32[$7>>2] = $159;
     ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$7+0>>2]|0;
     $160 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$59,2)|0);
     $161 = HEAP32[$__err>>2]|0;
     $162 = $161 & 4;
     $163 = ($162|0)==(0);
     $164 = ($160|0)<(13);
     $or$cond$i18 = $163 & $164;
     if ($or$cond$i18) {
      $165 = (($__tm) + 16|0);
      $166 = (($160) + -1)|0;
      HEAP32[$165>>2] = $166;
      break L8;
     } else {
      $167 = $161 | 4;
      HEAP32[$__err>>2] = $167;
      break L8;
     }
     break;
    }
    case 84:  {
     $230 = HEAP32[$__b>>2]|0;
     HEAP32[$32>>2] = $230;
     $231 = HEAP32[$__e>>2]|0;
     HEAP32[$33>>2] = $231;
     ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$32+0>>2]|0;
     ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$33+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,6104,((6104 + 32|0)));
     $232 = HEAP32[$31>>2]|0;
     HEAP32[$__b>>2] = $232;
     break;
    }
    case 120:  {
     $241 = HEAP32[$this>>2]|0;
     $242 = (($241) + 20|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = HEAP32[$__b>>2]|0;
     HEAP32[$34>>2] = $244;
     $245 = HEAP32[$__e>>2]|0;
     HEAP32[$35>>2] = $245;
     ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$34+0>>2]|0;
     ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$35+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$243 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     STACKTOP = sp;return;
     break;
    }
    case 121:  {
     $269 = (($__tm) + 20|0);
     $270 = HEAP32[$__e>>2]|0;
     HEAP32[$2>>2] = $270;
     ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$2+0>>2]|0;
     $271 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$59,4)|0);
     $272 = HEAP32[$__err>>2]|0;
     $273 = $272 & 4;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = ($271|0)<(69);
      if ($275) {
       $276 = (($271) + 2000)|0;
       $__t$0$i = $276;
      } else {
       $$off$i35 = (($271) + -69)|0;
       $277 = ($$off$i35>>>0)<(31);
       $278 = (($271) + 1900)|0;
       $$$i = $277 ? $278 : $271;
       $__t$0$i = $$$i;
      }
      $279 = (($__t$0$i) + -1900)|0;
      HEAP32[$269>>2] = $279;
     }
     break;
    }
    case 89:  {
     $280 = HEAP32[$__e>>2]|0;
     HEAP32[$1>>2] = $280;
     ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$1+0>>2]|0;
     $281 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$59,4)|0);
     $282 = HEAP32[$__err>>2]|0;
     $283 = $282 & 4;
     $284 = ($283|0)==(0);
     if ($284) {
      $285 = (($__tm) + 20|0);
      $286 = (($281) + -1900)|0;
      HEAP32[$285>>2] = $286;
     }
     break;
    }
    case 37:  {
     $287 = HEAP32[$__e>>2]|0;
     HEAP32[$39>>2] = $287;
     ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$59);
     break;
    }
    case 82:  {
     $220 = HEAP32[$__b>>2]|0;
     HEAP32[$29>>2] = $220;
     $221 = HEAP32[$__e>>2]|0;
     HEAP32[$30>>2] = $221;
     ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$29+0>>2]|0;
     ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$30+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,6080,((6080 + 20|0)));
     $222 = HEAP32[$28>>2]|0;
     HEAP32[$__b>>2] = $222;
     break;
    }
    case 114:  {
     $217 = HEAP32[$__b>>2]|0;
     HEAP32[$26>>2] = $217;
     $218 = HEAP32[$__e>>2]|0;
     HEAP32[$27>>2] = $218;
     ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$26+0>>2]|0;
     ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$27+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,6032,((6032 + 44|0)));
     $219 = HEAP32[$25>>2]|0;
     HEAP32[$__b>>2] = $219;
     break;
    }
    default: {
     $288 = HEAP32[$__err>>2]|0;
     $289 = $288 | 4;
     HEAP32[$__err>>2] = $289;
    }
    }
   } while(0);
   $290 = HEAP32[$__b>>2]|0;
   HEAP32[$agg$result>>2] = $290;
   STACKTOP = sp;return;
  }
 }
 $61 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($61);
 __THREW__ = 0;
 invoke_viii(9,($61|0),(14840|0),(112|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$14>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 127]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 31]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 127]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 127]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 127]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 31]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 127]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($74)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 127]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 31]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 31]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 127]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 127]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 127]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6776|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(135,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6776|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(135,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp + 100|0;
 $__nar = sp;
 HEAP8[$fmt$i] = 37;
 $2 = (($fmt$i) + 1|0);
 HEAP8[$2] = $__fmt;
 $3 = (($fmt$i) + 2|0);
 HEAP8[$3] = $__mod;
 $4 = (($fmt$i) + 3|0);
 HEAP8[$4] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2] = $__mod;
  HEAP8[$3] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($7|0))|0);
 $9 = (($__nar) + ($8)|0);
 $10 = HEAP32[$__s>>2]|0;
 $11 = ($8|0)==(0);
 if ($11) {
  $30 = $10;
  HEAP32[$agg$result>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$14 = $10;$27 = $10;
 }
 while(1) {
  $12 = HEAP8[$$01$i$i]|0;
  $13 = ($14|0)==(0|0);
  do {
   if ($13) {
    $31 = $27;$32 = 0;
   } else {
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $21 = HEAP32[$14>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $12&255;
     $25 = (FUNCTION_TABLE_iii[$23 & 31]($14,$24)|0);
     $26 = ($25|0)==(-1);
     $$$i = $26 ? 0 : $27;
     $$7$i = $26 ? 0 : $14;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $20 = (($16) + 1|0);
     HEAP32[$15>>2] = $20;
     HEAP8[$16] = $12;
     $31 = $27;$32 = $14;
     break;
    }
   }
  } while(0);
  $28 = (($$01$i$i) + 1|0);
  $29 = ($28|0)==($9|0);
  if ($29) {
   $30 = $31;
   break;
  } else {
   $$01$i$i = $28;$14 = $32;$27 = $31;
  }
 }
 HEAP32[$agg$result>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6776|0));
    $eh$lpad$body$i$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(135,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6776|0));
    $eh$lpad$body$i$i$indexZ2D = $9;
    ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(135,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 31]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $9;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$9 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $fmt$i = sp + 112|0;
 $__nar = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 HEAP8[$fmt$i] = 37;
 $0 = (($fmt$i) + 1|0);
 HEAP8[$0] = $__fmt;
 $1 = (($fmt$i) + 2|0);
 HEAP8[$1] = $__mod;
 $2 = (($fmt$i) + 3|0);
 HEAP8[$2] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0] = $__mod;
  HEAP8[$1] = $__fmt;
 }
 $4 = HEAP32[$this>>2]|0;
 (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($4|0))|0);
 $5 = $mb;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $9 = HEAP32[$__we>>2]|0;
 $10 = $9;
 $11 = $__wb;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 $14 = HEAP32[$this>>2]|0;
 $15 = (_uselocale(($14|0))|0);
 __THREW__ = 0;
 $16 = (invoke_iiiii(14,($__wb|0),($__nb|0),($13|0),($mb|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $24 = ___cxa_find_matching_catch(-1,-1)|0;
  $25 = tempRet0;
  $26 = ($15|0)==(0|0);
  if ($26) {
   ___resumeException($24|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($15|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $30 = tempRet0;
   ___clang_call_terminate($29);
   // unreachable;
  } else {
   ___resumeException($24|0);
   // unreachable;
  }
 }
 $19 = ($15|0)==(0|0);
 if (!($19)) {
  __THREW__ = 0;
  (invoke_ii(73,($15|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $23 = tempRet0;
   ___clang_call_terminate($22);
   // unreachable;
  }
 }
 $31 = ($16|0)==(-1);
 if ($31) {
  __ZNSt3__121__throw_runtime_errorEPKc(7760);
  // unreachable;
 } else {
  $32 = (($__wb) + ($16<<2)|0);
  HEAP32[$__we>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$117 = 0, $$118 = 0, $$1215 = 0, $$1216 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$012 = 0, $__wb = 0;
 var $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 156|0;
 $__wb = sp + 24|0;
 $__wn = sp + 20|0;
 $__loc = sp + 36|0;
 $__neg = sp + 256|0;
 $0 = sp + 32|0;
 $__atoms = sp + 144|0;
 $__nbuf = sp + 44|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 136;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(53,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $51 = ___cxa_find_matching_catch(-1,-1)|0;
   $52 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$117 = $51;$$1215 = $52;$131 = 136;$132 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[6880>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 6880;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (132);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((6880 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L12: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 32|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(6496|0),(((6496 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L6;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(98);
         if ($45) {
          $46 = (($44) + 2)|0;
          $47 = (_malloc($46)|0);
          $48 = ($47|0)==(0|0);
          if ($48) {
           __THREW__ = 0;
           invoke_v(4);
           $49 = __THREW__; __THREW__ = 0;
           $50 = $49&1;
           if ($50) {
            $137 = 0;
            label = 16;
           } else {
            $88 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $88 = $47;$__nc$0 = $47;
           label = 19;
          }
         } else {
          $88 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $59 = HEAP8[$__neg]|0;
           $60 = ($59<<24>>24)==(0);
           if ($60) {
            $__nc$1 = $__nc$0;
           } else {
            $61 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $61;
           }
           $62 = ($41>>>0)<($40>>>0);
           if ($62) {
            $63 = (($__atoms) + 10|0);
            $64 = $__atoms;
            $__nc$211 = $__nc$1;$__w$012 = $41;
            while(1) {
             $65 = HEAP8[$__w$012]|0;
             $$01$i = $__atoms;
             while(1) {
              $68 = HEAP8[$$01$i]|0;
              $69 = ($68<<24>>24)==($65<<24>>24);
              $67 = (($$01$i) + 1|0);
              if ($69) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $66 = ($67|0)==($63|0);
              if ($66) {
               $$0$lcssa$i = $63;
               break;
              } else {
               $$01$i = $67;
              }
             }
             $70 = $$0$lcssa$i;
             $71 = (($70) - ($64))|0;
             $72 = (6496 + ($71)|0);
             $73 = HEAP8[$72]|0;
             HEAP8[$__nc$211] = $73;
             $74 = (($__w$012) + 1|0);
             $75 = (($__nc$211) + 1|0);
             $76 = HEAP32[$__wn>>2]|0;
             $77 = ($74>>>0)<($76>>>0);
             if ($77) {
              $__nc$211 = $75;$__w$012 = $74;
             } else {
              $__nc$2$lcssa = $75;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $78 = (_sscanf(($__nbuf|0),(6512|0),($vararg_buffer|0))|0);
           $79 = ($78|0)==(1);
           if ($79) {
            $87 = ($88|0)==(0|0);
            if ($87) {
             break L12;
            }
            _free($88);
            break L12;
           }
           $80 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(54,($80|0),(6520|0));
           $81 = __THREW__; __THREW__ = 0;
           $82 = $81&1;
           if ($82) {
            $85 = ___cxa_find_matching_catch(-1,-1)|0;
            $86 = tempRet0;
            ___cxa_free_exception(($80|0));
            $58 = $88;$eh$lpad$body$index2Z2D = $86;$eh$lpad$body$indexZ2D = $85;
            break;
           }
           __THREW__ = 0;
           invoke_viii(9,($80|0),(3888|0),(22|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $137 = $88;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $55 = ___cxa_find_matching_catch(-1,-1)|0;
          $56 = tempRet0;
          $58 = $137;$eh$lpad$body$index2Z2D = $56;$eh$lpad$body$indexZ2D = $55;
         }
         $57 = ($58|0)==(0|0);
         if ($57) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($58);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $89 = HEAP32[$__b>>2]|0;
       $90 = ($89|0)==(0|0);
       if ($90) {
        $104 = 0;
       } else {
        $91 = (($89) + 12|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (($89) + 16|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ($92|0)==($94|0);
        if ($95) {
         $96 = HEAP32[$89>>2]|0;
         $97 = (($96) + 36|0);
         $98 = HEAP32[$97>>2]|0;
         __THREW__ = 0;
         $99 = (invoke_ii($98|0,($89|0))|0);
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          label = 15;
          break;
         }
         $102 = ($99|0)==(-1);
         if ($102) {
          HEAP32[$__b>>2] = 0;
          $104 = 0;
         } else {
          $104 = $89;
         }
        } else {
         $104 = $89;
        }
       }
       $103 = ($104|0)==(0|0);
       $105 = HEAP32[$__e>>2]|0;
       $106 = ($105|0)==(0|0);
       do {
        if ($106) {
         label = 45;
        } else {
         $107 = (($105) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($105) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if (!($111)) {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
         $112 = HEAP32[$105>>2]|0;
         $113 = (($112) + 36|0);
         $114 = HEAP32[$113>>2]|0;
         __THREW__ = 0;
         $115 = (invoke_ii($114|0,($105|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 15;
          break L6;
         }
         $118 = ($115|0)==(-1);
         if ($118) {
          HEAP32[$__e>>2] = 0;
          label = 45;
          break;
         } else {
          if ($103) {
           break;
          } else {
           label = 47;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 45) {
        if ($103) {
         label = 47;
        }
       }
       if ((label|0) == 47) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
       }
       HEAP32[$agg$result>>2] = $104;
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       $122 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $123 = ($122|0)==(0|0);
       if ($123) {
        STACKTOP = sp;return;
       }
       $124 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($124|0,($122|0));
       $125 = __THREW__; __THREW__ = 0;
       $126 = $125&1;
       if ($126) {
        $127 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $128 = tempRet0;
        ___clang_call_terminate($127);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(9,($26|0),(14840|0),(112|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $53 = ___cxa_find_matching_catch(-1,-1)|0;
    $54 = tempRet0;
    $$0 = $53;$$01 = $54;
   }
   $129 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $130 = ($$pre|0)==(0|0);
   if ($130) {
    $$118 = $$0;$$1216 = $$01;
    ___resumeException($$118|0);
    // unreachable;
   } else {
    $$pre20 = HEAP32[$1>>2]|0;
    $$117 = $$0;$$1215 = $$01;$131 = $$pre20;$132 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($131|0,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if ($134) {
  $135 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $136 = tempRet0;
  ___clang_call_terminate($135);
  // unreachable;
 } else {
  $$118 = $$117;$$1216 = $$1215;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$ph$ph = 0, $$ph$ph235$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0, $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0;
 var $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0, $$pre575 = 0, $$pre577 = 0;
 var $$sum = 0, $$sum454 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0;
 var $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free206 = 0, $free206$ph$ph = 0, $free206$ph$ph234$ph$ph$ph$ph = 0, $free208 = 0, $isascii1$i = 0, $isascii1$i136 = 0;
 var $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $sext = 0, $sext230 = 0, $sext231 = 0, $sext232 = 0, $switch = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__gbuf = sp;
 $__pat = sp + 428|0;
 $__dp = sp + 472|0;
 $__ts = sp + 473|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__psn = sp + 416|0;
 $__nsn = sp + 436|0;
 $__spaces = sp + 400|0;
 $__fd = sp + 432|0;
 $__et = sp + 412|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(1,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $67 = ___cxa_find_matching_catch(-1,-1)|0;
   $68 = tempRet0;
   $70 = $__gbuf;$free206 = 136;$lpad$phi$index = $67;$lpad$phi$index7 = $68;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__ct) + 8|0);
   $5 = (($__nsn) + 1|0);
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 1|0);
   $9 = (($__psn) + 4|0);
   $10 = (($__psn) + 8|0);
   $11 = $__flags & 512;
   $12 = ($11|0)!=(0);
   $13 = (($__sym) + 1|0);
   $14 = (($__sym) + 8|0);
   $15 = (($__sym) + 4|0);
   $16 = (($__spaces) + 1|0);
   $17 = (($__spaces) + 8|0);
   $18 = (($__spaces) + 4|0);
   $19 = (($__pat) + 3|0);
   $20 = (($__wb) + 4|0);
   $21 = (($__grp) + 4|0);
   $932 = $2;$933 = $__gbuf;$934 = $__gbuf;$935 = $__we;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 136;
   L3: while(1) {
    $22 = HEAP32[$__b>>2]|0;
    $23 = ($22|0)==(0|0);
    do {
     if ($23) {
      $37 = 0;
     } else {
      $24 = (($22) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($22) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       $32 = (invoke_ii($31|0,($22|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       }
       $35 = ($32|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $37 = 0;
        break;
       } else {
        $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
        $37 = $$pre$i$i$i19;
        break;
       }
      } else {
       $37 = $22;
      }
     }
    } while(0);
    $36 = ($37|0)==(0|0);
    $38 = HEAP32[$__e>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 15;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
      $45 = HEAP32[$38>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($38|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($36) {
        $936 = $38;
        break;
       } else {
        $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($36) {
      $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 301;
      break;
     } else {
      $936 = 0;
     }
    }
    $52 = (($__pat) + ($__p$0353)|0);
    $53 = HEAP8[$52]|0;
    $54 = $53 << 24 >> 24;
    L25: do {
     switch ($54|0) {
     case 0:  {
      label = 40;
      break;
     }
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i29 = $84;
       }
      } else {
       $87 = HEAP8[$77]|0;
       $88 = $87&255;
       $$0$i$i29 = $88;
      }
      $89 = $$0$i$i29&255;
      $isascii1$i = ($89<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 39;
       break L3;
      }
      $sext232 = $$0$i$i29 << 24;
      $90 = $sext232 >> 24;
      $91 = HEAP32[$4>>2]|0;
      $92 = (($91) + ($90<<1)|0);
      $93 = HEAP16[$92>>1]|0;
      $94 = $93 & 8192;
      $95 = ($94<<16>>16)==(0);
      if ($95) {
       label = 39;
       break L3;
      }
      $96 = HEAP32[$__b>>2]|0;
      $97 = (($96) + 12|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 16|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($98|0)==($100|0);
      if ($101) {
       $102 = HEAP32[$96>>2]|0;
       $103 = (($102) + 40|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       $105 = (invoke_ii($104|0,($96|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i32 = $105;
       }
      } else {
       $108 = (($98) + 1|0);
       HEAP32[$97>>2] = $108;
       $109 = HEAP8[$98]|0;
       $110 = $109&255;
       $$0$i$i32 = $110;
      }
      $111 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(55,($__spaces|0),($111|0));
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      } else {
       label = 40;
      }
      break;
     }
     case 3:  {
      $187 = HEAP8[$__psn]|0;
      $188 = $187 & 1;
      $189 = ($188<<24>>24)==(0);
      if ($189) {
       $191 = $187&255;
       $192 = $191 >>> 1;
       $202 = $192;
      } else {
       $190 = HEAP32[$9>>2]|0;
       $202 = $190;
      }
      $193 = HEAP8[$__nsn]|0;
      $194 = $193 & 1;
      $195 = ($194<<24>>24)==(0);
      if ($195) {
       $197 = $193&255;
       $198 = $197 >>> 1;
       $200 = $198;
      } else {
       $196 = HEAP32[$6>>2]|0;
       $200 = $196;
      }
      $199 = (0 - ($200))|0;
      $201 = ($202|0)==($199|0);
      if ($201) {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      } else {
       if ($189) {
        $204 = $187&255;
        $205 = $204 >>> 1;
        $207 = $205;
       } else {
        $203 = HEAP32[$9>>2]|0;
        $207 = $203;
       }
       $206 = ($207|0)==(0);
       if (!($206)) {
        if ($195) {
         $209 = $193&255;
         $210 = $209 >>> 1;
         $212 = $210;
        } else {
         $208 = HEAP32[$6>>2]|0;
         $212 = $208;
        }
        $211 = ($212|0)==(0);
        if (!($211)) {
         $294 = HEAP32[$__b>>2]|0;
         $295 = (($294) + 12|0);
         $296 = HEAP32[$295>>2]|0;
         $297 = (($294) + 16|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = ($296|0)==($298|0);
         if ($299) {
          $300 = HEAP32[$294>>2]|0;
          $301 = (($300) + 36|0);
          $302 = HEAP32[$301>>2]|0;
          __THREW__ = 0;
          $303 = (invoke_ii($302|0,($294|0))|0);
          $304 = __THREW__; __THREW__ = 0;
          $305 = $304&1;
          if ($305) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          }
          $$pre452 = HEAP8[$__psn]|0;
          $$pre574 = HEAP32[$__b>>2]|0;
          $$phi$trans$insert = (($$pre574) + 12|0);
          $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
          $$phi$trans$insert576 = (($$pre574) + 16|0);
          $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
          $$0$i$i96 = $303;$310 = $$pre452;$316 = $$pre574;$318 = $$pre575;$319 = $$pre577;
         } else {
          $306 = HEAP8[$296]|0;
          $307 = $306&255;
          $$0$i$i96 = $307;$310 = $187;$316 = $294;$318 = $296;$319 = $298;
         }
         $308 = $$0$i$i96&255;
         $309 = $310 & 1;
         $311 = ($309<<24>>24)==(0);
         $312 = HEAP32[$10>>2]|0;
         $$463 = $311 ? $8 : $312;
         $313 = HEAP8[$$463]|0;
         $314 = ($308<<24>>24)==($313<<24>>24);
         $315 = (($316) + 12|0);
         $317 = ($318|0)==($319|0);
         if ($314) {
          if ($317) {
           $320 = HEAP32[$316>>2]|0;
           $321 = (($320) + 40|0);
           $322 = HEAP32[$321>>2]|0;
           __THREW__ = 0;
           (invoke_ii($322|0,($316|0))|0);
           $323 = __THREW__; __THREW__ = 0;
           $324 = $323&1;
           if ($324) {
            $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
            label = 23;
            break L3;
           }
          } else {
           $325 = (($318) + 1|0);
           HEAP32[$315>>2] = $325;
          }
          $326 = HEAP8[$__psn]|0;
          $327 = $326 & 1;
          $328 = ($327<<24>>24)==(0);
          if ($328) {
           $330 = $326&255;
           $331 = $330 >>> 1;
           $333 = $331;
          } else {
           $329 = HEAP32[$9>>2]|0;
           $333 = $329;
          }
          $332 = ($333>>>0)>(1);
          $__psn$__trailing_sign$05 = $332 ? $__psn : $__trailing_sign$0355;
          $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
          break L25;
         }
         if ($317) {
          $334 = HEAP32[$316>>2]|0;
          $335 = (($334) + 36|0);
          $336 = HEAP32[$335>>2]|0;
          __THREW__ = 0;
          $337 = (invoke_ii($336|0,($316|0))|0);
          $338 = __THREW__; __THREW__ = 0;
          $339 = $338&1;
          if ($339) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          } else {
           $$0$i$i114 = $337;
          }
         } else {
          $340 = HEAP8[$318]|0;
          $341 = $340&255;
          $$0$i$i114 = $341;
         }
         $342 = $$0$i$i114&255;
         $343 = HEAP8[$__nsn]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         $346 = HEAP32[$7>>2]|0;
         $$464 = $345 ? $5 : $346;
         $347 = HEAP8[$$464]|0;
         $348 = ($342<<24>>24)==($347<<24>>24);
         if (!($348)) {
          label = 131;
          break L3;
         }
         $349 = HEAP32[$__b>>2]|0;
         $350 = (($349) + 12|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = (($349) + 16|0);
         $353 = HEAP32[$352>>2]|0;
         $354 = ($351|0)==($353|0);
         if ($354) {
          $355 = HEAP32[$349>>2]|0;
          $356 = (($355) + 40|0);
          $357 = HEAP32[$356>>2]|0;
          __THREW__ = 0;
          (invoke_ii($357|0,($349|0))|0);
          $358 = __THREW__; __THREW__ = 0;
          $359 = $358&1;
          if ($359) {
           $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          }
         } else {
          $360 = (($351) + 1|0);
          HEAP32[$350>>2] = $360;
         }
         HEAP8[$__neg] = 1;
         $361 = HEAP8[$__nsn]|0;
         $362 = $361 & 1;
         $363 = ($362<<24>>24)==(0);
         if ($363) {
          $365 = $361&255;
          $366 = $365 >>> 1;
          $368 = $366;
         } else {
          $364 = HEAP32[$6>>2]|0;
          $368 = $364;
         }
         $367 = ($368>>>0)>(1);
         $__nsn$__trailing_sign$06 = $367 ? $__nsn : $__trailing_sign$0355;
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
         break L25;
        }
       }
       if ($189) {
        $214 = $187&255;
        $215 = $214 >>> 1;
        $217 = $215;
       } else {
        $213 = HEAP32[$9>>2]|0;
        $217 = $213;
       }
       $216 = ($217|0)==(0);
       $218 = HEAP32[$__b>>2]|0;
       $219 = (($218) + 12|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (($218) + 16|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($220|0)==($222|0);
       if ($216) {
        if ($223) {
         $259 = HEAP32[$218>>2]|0;
         $260 = (($259) + 36|0);
         $261 = HEAP32[$260>>2]|0;
         __THREW__ = 0;
         $262 = (invoke_ii($261|0,($218|0))|0);
         $263 = __THREW__; __THREW__ = 0;
         $264 = $263&1;
         if ($264) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
         $$pre450 = HEAP8[$__nsn]|0;
         $$0$i$i84 = $262;$269 = $$pre450;
        } else {
         $265 = HEAP8[$220]|0;
         $266 = $265&255;
         $$0$i$i84 = $266;$269 = $193;
        }
        $267 = $$0$i$i84&255;
        $268 = $269 & 1;
        $270 = ($268<<24>>24)==(0);
        $271 = HEAP32[$7>>2]|0;
        $$462 = $270 ? $5 : $271;
        $272 = HEAP8[$$462]|0;
        $273 = ($267<<24>>24)==($272<<24>>24);
        if (!($273)) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L25;
        }
        $274 = HEAP32[$__b>>2]|0;
        $275 = (($274) + 12|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = (($274) + 16|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = ($276|0)==($278|0);
        if ($279) {
         $280 = HEAP32[$274>>2]|0;
         $281 = (($280) + 40|0);
         $282 = HEAP32[$281>>2]|0;
         __THREW__ = 0;
         (invoke_ii($282|0,($274|0))|0);
         $283 = __THREW__; __THREW__ = 0;
         $284 = $283&1;
         if ($284) {
          $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
        } else {
         $285 = (($276) + 1|0);
         HEAP32[$275>>2] = $285;
        }
        HEAP8[$__neg] = 1;
        $286 = HEAP8[$__nsn]|0;
        $287 = $286 & 1;
        $288 = ($287<<24>>24)==(0);
        if ($288) {
         $290 = $286&255;
         $291 = $290 >>> 1;
         $293 = $291;
        } else {
         $289 = HEAP32[$6>>2]|0;
         $293 = $289;
        }
        $292 = ($293>>>0)>(1);
        $__nsn$__trailing_sign$0 = $292 ? $__nsn : $__trailing_sign$0355;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
        break L25;
       }
       if ($223) {
        $224 = HEAP32[$218>>2]|0;
        $225 = (($224) + 36|0);
        $226 = HEAP32[$225>>2]|0;
        __THREW__ = 0;
        $227 = (invoke_ii($226|0,($218|0))|0);
        $228 = __THREW__; __THREW__ = 0;
        $229 = $228&1;
        if ($229) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
        $$pre451 = HEAP8[$__psn]|0;
        $$0$i$i67 = $227;$234 = $$pre451;
       } else {
        $230 = HEAP8[$220]|0;
        $231 = $230&255;
        $$0$i$i67 = $231;$234 = $187;
       }
       $232 = $$0$i$i67&255;
       $233 = $234 & 1;
       $235 = ($233<<24>>24)==(0);
       $236 = HEAP32[$10>>2]|0;
       $$ = $235 ? $8 : $236;
       $237 = HEAP8[$$]|0;
       $238 = ($232<<24>>24)==($237<<24>>24);
       if (!($238)) {
        HEAP8[$__neg] = 1;
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L25;
       }
       $239 = HEAP32[$__b>>2]|0;
       $240 = (($239) + 12|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = (($239) + 16|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = ($241|0)==($243|0);
       if ($244) {
        $245 = HEAP32[$239>>2]|0;
        $246 = (($245) + 40|0);
        $247 = HEAP32[$246>>2]|0;
        __THREW__ = 0;
        (invoke_ii($247|0,($239|0))|0);
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        if ($249) {
         $$ph$ph235$ph$ph$ph$ph = $934;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
       } else {
        $250 = (($241) + 1|0);
        HEAP32[$240>>2] = $250;
       }
       $251 = HEAP8[$__psn]|0;
       $252 = $251 & 1;
       $253 = ($252<<24>>24)==(0);
       if ($253) {
        $255 = $251&255;
        $256 = $255 >>> 1;
        $258 = $256;
       } else {
        $254 = HEAP32[$9>>2]|0;
        $258 = $254;
       }
       $257 = ($258>>>0)>(1);
       $__psn$__trailing_sign$0 = $257 ? $__psn : $__trailing_sign$0355;
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
      }
      break;
     }
     case 2:  {
      $371 = ($__trailing_sign$0355|0)!=(0|0);
      $372 = ($__p$0353>>>0)<(2);
      $or$cond = $371 | $372;
      if (!($or$cond)) {
       $373 = ($__p$0353|0)==(2);
       if ($373) {
        $374 = HEAP8[$19]|0;
        $375 = ($374<<24>>24)!=(0);
        $376 = $375;
       } else {
        $376 = 0;
       }
       $brmerge = $12 | $376;
       if (!($brmerge)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = 0;$free203 = $free202349;
        break L25;
       }
      }
      $377 = HEAP8[$__sym]|0;
      $378 = $377 & 1;
      $379 = ($378<<24>>24)==(0);
      $380 = HEAP32[$14>>2]|0;
      $$465 = $379 ? $13 : $380;
      $381 = ($__p$0353|0)==(0);
      L133: do {
       if ($381) {
        $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
       } else {
        $382 = (($__p$0353) + -1)|0;
        $383 = (($__pat) + ($382)|0);
        $384 = HEAP8[$383]|0;
        $switch = ($384&255)<(2);
        if ($switch) {
         $385 = $377&255;
         $386 = $385 >>> 1;
         $387 = HEAP32[$15>>2]|0;
         $$467 = $379 ? $386 : $387;
         $388 = (($$465) + ($$467)|0);
         $390 = $$465;
         while(1) {
          $389 = ($390|0)==($388|0);
          if ($389) {
           $$lcssa535 = $388;
           break;
          }
          $391 = HEAP8[$390]|0;
          $isascii1$i136 = ($391<<24>>24)>(-1);
          if (!($isascii1$i136)) {
           $$lcssa535 = $390;
           break;
          }
          $392 = $391 << 24 >> 24;
          $393 = HEAP32[$4>>2]|0;
          $394 = (($393) + ($392<<1)|0);
          $395 = HEAP16[$394>>1]|0;
          $396 = $395 & 8192;
          $397 = ($396<<16>>16)==(0);
          $398 = (($390) + 1|0);
          if ($397) {
           $$lcssa535 = $390;
           break;
          } else {
           $390 = $398;
          }
         }
         $399 = $$lcssa535;
         $400 = $$465;
         $401 = (($399) - ($400))|0;
         $402 = HEAP8[$__spaces]|0;
         $403 = $402 & 1;
         $404 = ($403<<24>>24)==(0);
         if ($404) {
          $406 = $402&255;
          $407 = $406 >>> 1;
          $409 = $407;
         } else {
          $405 = HEAP32[$18>>2]|0;
          $409 = $405;
         }
         $408 = ($401>>>0)>($409>>>0);
         if ($408) {
          $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
         } else {
          if ($404) {
           $413 = $402&255;
           $414 = $413 >>> 1;
           $$sum454 = (($414) - ($401))|0;
           $415 = ((($__spaces) + ($$sum454)|0) + 1|0);
           $417 = $16;$418 = $414;$420 = $415;
          } else {
           $410 = HEAP32[$17>>2]|0;
           $411 = HEAP32[$18>>2]|0;
           $$sum = (($411) - ($401))|0;
           $412 = (($410) + ($$sum)|0);
           $417 = $410;$418 = $411;$420 = $412;
          }
          $416 = (($417) + ($418)|0);
          $419 = ($420|0)==($416|0);
          if ($419) {
           $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
          } else {
           $422 = $420;$424 = $$465;
           while(1) {
            $421 = HEAP8[$422]|0;
            $423 = HEAP8[$424]|0;
            $425 = ($421<<24>>24)==($423<<24>>24);
            if (!($425)) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
             break L133;
            }
            $426 = (($422) + 1|0);
            $427 = (($424) + 1|0);
            $428 = ($426|0)==($416|0);
            if ($428) {
             $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$lcssa535;$458 = $936;
             break;
            } else {
             $422 = $426;$424 = $427;
            }
           }
          }
         }
        } else {
         $$pre$i2$i$i180 = $936;$430 = $377;$440 = $$465;$458 = $936;
        }
       }
      } while(0);
      L153: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $13;$438 = $435;
       } else {
        $432 = HEAP32[$14>>2]|0;
        $433 = HEAP32[$15>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $456 = 0;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 21;
           break L3;
          }
          $454 = ($451|0)==(-1);
          if ($454) {
           HEAP32[$__b>>2] = 0;
           $456 = 0;
           break;
          } else {
           $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
           $456 = $$pre$i$i$i176;
           break;
          }
         } else {
          $456 = $441;
         }
        }
       } while(0);
       $455 = ($456|0)==(0|0);
       $457 = ($458|0)==(0|0);
       do {
        if ($457) {
         $$pre$i2$i$i180428 = $$pre$i2$i$i180;
         label = 168;
        } else {
         $459 = (($458) + 12|0);
         $460 = HEAP32[$459>>2]|0;
         $461 = (($458) + 16|0);
         $462 = HEAP32[$461>>2]|0;
         $463 = ($460|0)==($462|0);
         if (!($463)) {
          if ($455) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $458;
           break;
          } else {
           break L153;
          }
         }
         $464 = HEAP32[$458>>2]|0;
         $465 = (($464) + 36|0);
         $466 = HEAP32[$465>>2]|0;
         __THREW__ = 0;
         $467 = (invoke_ii($466|0,($458|0))|0);
         $468 = __THREW__; __THREW__ = 0;
         $469 = $468&1;
         if ($469) {
          label = 21;
          break L3;
         }
         $470 = ($467|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i180428 = 0;
          label = 168;
          break;
         } else {
          $471 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $455 ^ $471;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$943 = $$pre$i2$i$i180;
           break;
          } else {
           break L153;
          }
         }
        }
       } while(0);
       if ((label|0) == 168) {
        label = 0;
        if ($455) {
         break;
        } else {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$943 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 21;
         break L3;
        } else {
         $$0$i$i172 = $481;
        }
       } else {
        $484 = HEAP8[$474]|0;
        $485 = $484&255;
        $$0$i$i172 = $485;
       }
       $486 = $$0$i$i172&255;
       $487 = HEAP8[$440]|0;
       $488 = ($486<<24>>24)==($487<<24>>24);
       if (!($488)) {
        break;
       }
       $489 = HEAP32[$__b>>2]|0;
       $490 = (($489) + 12|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 16|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ($491|0)==($493|0);
       if ($494) {
        $495 = HEAP32[$489>>2]|0;
        $496 = (($495) + 40|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        (invoke_ii($497|0,($489|0))|0);
        $498 = __THREW__; __THREW__ = 0;
        $499 = $498&1;
        if ($499) {
         label = 21;
         break L3;
        }
       } else {
        $500 = (($491) + 1|0);
        HEAP32[$490>>2] = $500;
       }
       $501 = (($440) + 1|0);
       $$pre = HEAP8[$__sym]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180427;$430 = $$pre;$440 = $501;$458 = $943;
      }
      if ($12) {
       $502 = HEAP8[$__sym]|0;
       $503 = $502 & 1;
       $504 = ($503<<24>>24)==(0);
       if ($504) {
        $507 = $502&255;
        $508 = $507 >>> 1;
        $510 = $13;$511 = $508;
       } else {
        $505 = HEAP32[$14>>2]|0;
        $506 = HEAP32[$15>>2]|0;
        $510 = $505;$511 = $506;
       }
       $509 = (($510) + ($511)|0);
       $512 = ($440|0)==($509|0);
       if ($512) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       } else {
        label = 183;
        break L3;
       }
      } else {
       $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      }
      break;
     }
     case 4:  {
      $568 = $935;$607 = $933;$608 = $932;$612 = $934;$__ng$0 = 0;$free201 = $free202349;
      L195: while(1) {
       $515 = HEAP32[$__b>>2]|0;
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $530 = 0;
        } else {
         $517 = (($515) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = (($515) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = (($522) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L3;
          }
          $528 = ($525|0)==(-1);
          if ($528) {
           HEAP32[$__b>>2] = 0;
           $530 = 0;
           break;
          } else {
           $$pre$i$i$i156 = HEAP32[$__b>>2]|0;
           $530 = $$pre$i$i$i156;
           break;
          }
         } else {
          $530 = $515;
         }
        }
       } while(0);
       $529 = ($530|0)==(0|0);
       $531 = HEAP32[$__e>>2]|0;
       $532 = ($531|0)==(0|0);
       do {
        if ($532) {
         label = 196;
        } else {
         $533 = (($531) + 12|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = (($531) + 16|0);
         $536 = HEAP32[$535>>2]|0;
         $537 = ($534|0)==($536|0);
         if (!($537)) {
          if ($529) {
           break;
          } else {
           break L195;
          }
         }
         $538 = HEAP32[$531>>2]|0;
         $539 = (($538) + 36|0);
         $540 = HEAP32[$539>>2]|0;
         __THREW__ = 0;
         $541 = (invoke_ii($540|0,($531|0))|0);
         $542 = __THREW__; __THREW__ = 0;
         $543 = $542&1;
         if ($543) {
          $$ph$ph = $612;$free206$ph$ph = $free201;
          label = 19;
          break L3;
         }
         $544 = ($541|0)==(-1);
         if ($544) {
          HEAP32[$__e>>2] = 0;
          label = 196;
          break;
         } else {
          if ($529) {
           break;
          } else {
           break L195;
          }
         }
        }
       } while(0);
       if ((label|0) == 196) {
        label = 0;
        if ($529) {
         break;
        }
       }
       $545 = HEAP32[$__b>>2]|0;
       $546 = (($545) + 12|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = (($545) + 16|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = ($547|0)==($549|0);
       if ($550) {
        $551 = HEAP32[$545>>2]|0;
        $552 = (($551) + 36|0);
        $553 = HEAP32[$552>>2]|0;
        __THREW__ = 0;
        $554 = (invoke_ii($553|0,($545|0))|0);
        $555 = __THREW__; __THREW__ = 0;
        $556 = $555&1;
        if ($556) {
         $$ph$ph = $612;$free206$ph$ph = $free201;
         label = 19;
         break L3;
        } else {
         $$0$i$i151 = $554;
        }
       } else {
        $557 = HEAP8[$547]|0;
        $558 = $557&255;
        $$0$i$i151 = $558;
       }
       $559 = $$0$i$i151&255;
       $isascii1$i149 = ($559<<24>>24)>(-1);
       if ($isascii1$i149) {
        $sext230 = $$0$i$i151 << 24;
        $560 = $sext230 >> 24;
        $561 = HEAP32[$4>>2]|0;
        $562 = (($561) + ($560<<1)|0);
        $563 = HEAP16[$562>>1]|0;
        $564 = $563 & 2048;
        $565 = ($564<<16>>16)==(0);
        if ($565) {
         label = 214;
        } else {
         $566 = HEAP32[$__wn>>2]|0;
         $567 = ($566|0)==($568|0);
         if ($567) {
          $569 = HEAP32[$20>>2]|0;
          $570 = ($569|0)!=(136|0);
          $571 = HEAP32[$__wb>>2]|0;
          $572 = $568;
          $573 = $571;
          $574 = (($572) - ($573))|0;
          $575 = ($574>>>0)<(2147483647);
          $576 = $574 << 1;
          $$$i140 = $575 ? $576 : -1;
          $577 = $570 ? $571 : 0;
          $578 = (_realloc($577,$$$i140)|0);
          $579 = ($578|0)==(0|0);
          if ($579) {
           __THREW__ = 0;
           invoke_v(4);
           $580 = __THREW__; __THREW__ = 0;
           $581 = $580&1;
           if ($581) {
            $$ph$ph = $612;$free206$ph$ph = $free201;
            label = 19;
            break L3;
           }
          }
          if ($570) {
           HEAP32[$__wb>>2] = $578;
           $589 = $578;
          } else {
           $$pr$i142 = HEAP32[$__wb>>2]|0;
           HEAP32[$__wb>>2] = $578;
           $582 = ($$pr$i142|0)==(0|0);
           if ($582) {
            $589 = $578;
           } else {
            $583 = HEAP32[$20>>2]|0;
            __THREW__ = 0;
            invoke_vi($583|0,($$pr$i142|0));
            $584 = __THREW__; __THREW__ = 0;
            $585 = $584&1;
            if ($585) {
             label = 211;
             break L3;
            }
            $$pre$i143 = HEAP32[$__wb>>2]|0;
            $589 = $$pre$i143;
           }
          }
          HEAP32[$20>>2] = 134;
          $588 = (($589) + ($574)|0);
          HEAP32[$__wn>>2] = $588;
          $590 = HEAP32[$__wb>>2]|0;
          $591 = (($590) + ($$$i140)|0);
          $593 = $588;$944 = $591;
         } else {
          $593 = $566;$944 = $568;
         }
         $592 = (($593) + 1|0);
         HEAP32[$__wn>>2] = $592;
         HEAP8[$593] = $559;
         $594 = (($__ng$0) + 1)|0;
         $945 = $944;$946 = $612;$947 = $607;$948 = $608;$__ng$1 = $594;$free = $free201;
        }
       } else {
        label = 214;
       }
       if ((label|0) == 214) {
        label = 0;
        $595 = HEAP8[$__grp]|0;
        $596 = $595 & 1;
        $597 = ($596<<24>>24)==(0);
        if ($597) {
         $599 = $595&255;
         $600 = $599 >>> 1;
         $602 = $600;
        } else {
         $598 = HEAP32[$21>>2]|0;
         $602 = $598;
        }
        $601 = ($602|0)==(0);
        $603 = ($__ng$0|0)==(0);
        $or$cond7 = $601 | $603;
        if ($or$cond7) {
         break;
        }
        $604 = HEAP8[$__ts]|0;
        $605 = ($559<<24>>24)==($604<<24>>24);
        if (!($605)) {
         break;
        }
        $606 = ($607|0)==($608|0);
        if ($606) {
         $609 = ($free201|0)==(136|0);
         $610 = $607;
         $611 = $612;
         $613 = (($610) - ($611))|0;
         $614 = ($613>>>0)<(2147483647);
         $615 = $613 << 1;
         $$$i128 = $614 ? $615 : -1;
         $616 = $613 >> 2;
         if ($609) {
          $617 = 0;
         } else {
          $617 = $612;
         }
         $618 = (_realloc($617,$$$i128)|0);
         $619 = ($618|0)==(0|0);
         if ($619) {
          __THREW__ = 0;
          invoke_v(4);
          $620 = __THREW__; __THREW__ = 0;
          $621 = $620&1;
          if ($621) {
           $$ph$ph = $612;$free206$ph$ph = $free201;
           label = 19;
           break L3;
          }
         }
         $622 = $$$i128 >>> 2;
         $623 = (($618) + ($616<<2)|0);
         $624 = (($618) + ($622<<2)|0);
         $626 = $623;$949 = $618;$950 = $624;$free200 = 134;
        } else {
         $626 = $607;$949 = $612;$950 = $608;$free200 = $free201;
        }
        $625 = (($626) + 4|0);
        HEAP32[$626>>2] = $__ng$0;
        $945 = $568;$946 = $949;$947 = $625;$948 = $950;$__ng$1 = 0;$free = $free200;
       }
       $627 = HEAP32[$__b>>2]|0;
       $628 = (($627) + 12|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = (($627) + 16|0);
       $631 = HEAP32[$630>>2]|0;
       $632 = ($629|0)==($631|0);
       if ($632) {
        $633 = HEAP32[$627>>2]|0;
        $634 = (($633) + 40|0);
        $635 = HEAP32[$634>>2]|0;
        __THREW__ = 0;
        (invoke_ii($635|0,($627|0))|0);
        $636 = __THREW__; __THREW__ = 0;
        $637 = $636&1;
        if ($637) {
         $$ph$ph = $946;$free206$ph$ph = $free;
         label = 19;
         break L3;
        } else {
         $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
         continue;
        }
       } else {
        $638 = (($629) + 1|0);
        HEAP32[$628>>2] = $638;
        $568 = $945;$607 = $947;$608 = $948;$612 = $946;$__ng$0 = $__ng$1;$free201 = $free;
        continue;
       }
      }
      $639 = ($612|0)==($607|0);
      $640 = ($__ng$0|0)==(0);
      $or$cond8 = $639 | $640;
      if ($or$cond8) {
       $941 = $612;$951 = $607;$952 = $608;$free204 = $free201;
      } else {
       $641 = ($607|0)==($608|0);
       if ($641) {
        $642 = ($free201|0)==(136|0);
        $643 = $607;
        $644 = $612;
        $645 = (($643) - ($644))|0;
        $646 = ($645>>>0)<(2147483647);
        $647 = $645 << 1;
        $$$i118 = $646 ? $647 : -1;
        $648 = $645 >> 2;
        if ($642) {
         $649 = 0;
        } else {
         $649 = $612;
        }
        $650 = (_realloc($649,$$$i118)|0);
        $651 = ($650|0)==(0|0);
        if ($651) {
         __THREW__ = 0;
         invoke_v(4);
         $652 = __THREW__; __THREW__ = 0;
         $653 = $652&1;
         if ($653) {
          $$ph$ph235$ph$ph$ph$ph = $612;$free206$ph$ph234$ph$ph$ph$ph = $free201;
          label = 23;
          break L3;
         }
        }
        $654 = $$$i118 >>> 2;
        $655 = (($650) + ($648<<2)|0);
        $656 = (($650) + ($654<<2)|0);
        $658 = $655;$953 = $650;$954 = $656;$free205 = 134;
       } else {
        $658 = $607;$953 = $612;$954 = $608;$free205 = $free201;
       }
       $657 = (($658) + 4|0);
       HEAP32[$658>>2] = $__ng$0;
       $941 = $953;$951 = $657;$952 = $954;$free204 = $free205;
      }
      $659 = HEAP32[$__fd>>2]|0;
      $660 = ($659|0)>(0);
      if ($660) {
       $661 = HEAP32[$__b>>2]|0;
       $662 = ($661|0)==(0|0);
       do {
        if ($662) {
         $676 = 0;
        } else {
         $663 = (($661) + 12|0);
         $664 = HEAP32[$663>>2]|0;
         $665 = (($661) + 16|0);
         $666 = HEAP32[$665>>2]|0;
         $667 = ($664|0)==($666|0);
         if ($667) {
          $668 = HEAP32[$661>>2]|0;
          $669 = (($668) + 36|0);
          $670 = HEAP32[$669>>2]|0;
          __THREW__ = 0;
          $671 = (invoke_ii($670|0,($661|0))|0);
          $672 = __THREW__; __THREW__ = 0;
          $673 = $672&1;
          if ($673) {
           $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
           label = 23;
           break L3;
          }
          $674 = ($671|0)==(-1);
          if ($674) {
           HEAP32[$__b>>2] = 0;
           $676 = 0;
           break;
          } else {
           $$pre$i$i$i101 = HEAP32[$__b>>2]|0;
           $676 = $$pre$i$i$i101;
           break;
          }
         } else {
          $676 = $661;
         }
        }
       } while(0);
       $675 = ($676|0)==(0|0);
       $677 = HEAP32[$__e>>2]|0;
       $678 = ($677|0)==(0|0);
       do {
        if ($678) {
         label = 250;
        } else {
         $679 = (($677) + 12|0);
         $680 = HEAP32[$679>>2]|0;
         $681 = (($677) + 16|0);
         $682 = HEAP32[$681>>2]|0;
         $683 = ($680|0)==($682|0);
         if (!($683)) {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
         $684 = HEAP32[$677>>2]|0;
         $685 = (($684) + 36|0);
         $686 = HEAP32[$685>>2]|0;
         __THREW__ = 0;
         $687 = (invoke_ii($686|0,($677|0))|0);
         $688 = __THREW__; __THREW__ = 0;
         $689 = $688&1;
         if ($689) {
          $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
          label = 23;
          break L3;
         }
         $690 = ($687|0)==(-1);
         if ($690) {
          HEAP32[$__e>>2] = 0;
          label = 250;
          break;
         } else {
          if ($675) {
           $956 = $677;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 250) {
        label = 0;
        if ($675) {
         label = 256;
         break L3;
        } else {
         $956 = 0;
        }
       }
       $691 = HEAP32[$__b>>2]|0;
       $692 = (($691) + 12|0);
       $693 = HEAP32[$692>>2]|0;
       $694 = (($691) + 16|0);
       $695 = HEAP32[$694>>2]|0;
       $696 = ($693|0)==($695|0);
       if ($696) {
        $697 = HEAP32[$691>>2]|0;
        $698 = (($697) + 36|0);
        $699 = HEAP32[$698>>2]|0;
        __THREW__ = 0;
        $700 = (invoke_ii($699|0,($691|0))|0);
        $701 = __THREW__; __THREW__ = 0;
        $702 = $701&1;
        if ($702) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$0$i$i93 = $700;
        }
       } else {
        $703 = HEAP8[$693]|0;
        $704 = $703&255;
        $$0$i$i93 = $704;
       }
       $705 = $$0$i$i93&255;
       $706 = HEAP8[$__dp]|0;
       $707 = ($705<<24>>24)==($706<<24>>24);
       if (!($707)) {
        label = 256;
        break L3;
       }
       $710 = HEAP32[$__b>>2]|0;
       $711 = (($710) + 12|0);
       $712 = HEAP32[$711>>2]|0;
       $713 = (($710) + 16|0);
       $714 = HEAP32[$713>>2]|0;
       $715 = ($712|0)==($714|0);
       if ($715) {
        $716 = HEAP32[$710>>2]|0;
        $717 = (($716) + 40|0);
        $718 = HEAP32[$717>>2]|0;
        __THREW__ = 0;
        (invoke_ii($718|0,($710|0))|0);
        $719 = __THREW__; __THREW__ = 0;
        $720 = $719&1;
        if ($720) {
         $$ph$ph235$ph$ph$ph$ph = $941;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
        }
       } else {
        $721 = (($712) + 1|0);
        HEAP32[$711>>2] = $721;
        $$pre$i2$i$i75 = $956;$739 = $956;$778 = $568;$820 = $659;
       }
       while(1) {
        $722 = HEAP32[$__b>>2]|0;
        $723 = ($722|0)==(0|0);
        do {
         if ($723) {
          $737 = 0;
         } else {
          $724 = (($722) + 12|0);
          $725 = HEAP32[$724>>2]|0;
          $726 = (($722) + 16|0);
          $727 = HEAP32[$726>>2]|0;
          $728 = ($725|0)==($727|0);
          if ($728) {
           $729 = HEAP32[$722>>2]|0;
           $730 = (($729) + 36|0);
           $731 = HEAP32[$730>>2]|0;
           __THREW__ = 0;
           $732 = (invoke_ii($731|0,($722|0))|0);
           $733 = __THREW__; __THREW__ = 0;
           $734 = $733&1;
           if ($734) {
            label = 20;
            break L3;
           }
           $735 = ($732|0)==(-1);
           if ($735) {
            HEAP32[$__b>>2] = 0;
            $737 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $737 = $$pre$i$i$i71;
            break;
           }
          } else {
           $737 = $722;
          }
         }
        } while(0);
        $736 = ($737|0)==(0|0);
        $738 = ($739|0)==(0|0);
        do {
         if ($738) {
          $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
          label = 272;
         } else {
          $740 = (($739) + 12|0);
          $741 = HEAP32[$740>>2]|0;
          $742 = (($739) + 16|0);
          $743 = HEAP32[$742>>2]|0;
          $744 = ($741|0)==($743|0);
          if (!($744)) {
           if ($736) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $739;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
          $745 = HEAP32[$739>>2]|0;
          $746 = (($745) + 36|0);
          $747 = HEAP32[$746>>2]|0;
          __THREW__ = 0;
          $748 = (invoke_ii($747|0,($739|0))|0);
          $749 = __THREW__; __THREW__ = 0;
          $750 = $749&1;
          if ($750) {
           label = 20;
           break L3;
          }
          $751 = ($748|0)==(-1);
          if ($751) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i75431$ph = 0;
           label = 272;
           break;
          } else {
           $752 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $736 ^ $752;
           if ($tmp$i$i77) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$957 = $$pre$i2$i$i75;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($736) {
          label = 279;
          break L3;
         } else {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$957 = 0;
         }
        }
        $753 = HEAP32[$__b>>2]|0;
        $754 = (($753) + 12|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = (($753) + 16|0);
        $757 = HEAP32[$756>>2]|0;
        $758 = ($755|0)==($757|0);
        if ($758) {
         $759 = HEAP32[$753>>2]|0;
         $760 = (($759) + 36|0);
         $761 = HEAP32[$760>>2]|0;
         __THREW__ = 0;
         $762 = (invoke_ii($761|0,($753|0))|0);
         $763 = __THREW__; __THREW__ = 0;
         $764 = $763&1;
         if ($764) {
          label = 20;
          break L3;
         } else {
          $$0$i$i64 = $762;
         }
        } else {
         $765 = HEAP8[$755]|0;
         $766 = $765&255;
         $$0$i$i64 = $766;
        }
        $767 = $$0$i$i64&255;
        $isascii1$i62 = ($767<<24>>24)>(-1);
        if (!($isascii1$i62)) {
         label = 279;
         break L3;
        }
        $sext = $$0$i$i64 << 24;
        $768 = $sext >> 24;
        $769 = HEAP32[$4>>2]|0;
        $770 = (($769) + ($768<<1)|0);
        $771 = HEAP16[$770>>1]|0;
        $772 = $771 & 2048;
        $773 = ($772<<16>>16)==(0);
        if ($773) {
         label = 279;
         break L3;
        }
        $776 = HEAP32[$__wn>>2]|0;
        $777 = ($776|0)==($778|0);
        if ($777) {
         $779 = HEAP32[$20>>2]|0;
         $780 = ($779|0)!=(136|0);
         $781 = HEAP32[$__wb>>2]|0;
         $782 = $778;
         $783 = $781;
         $784 = (($782) - ($783))|0;
         $785 = ($784>>>0)<(2147483647);
         $786 = $784 << 1;
         $$$i = $785 ? $786 : -1;
         $787 = $780 ? $781 : 0;
         $788 = (_realloc($787,$$$i)|0);
         $789 = ($788|0)==(0|0);
         if ($789) {
          __THREW__ = 0;
          invoke_v(4);
          $790 = __THREW__; __THREW__ = 0;
          $791 = $790&1;
          if ($791) {
           label = 20;
           break L3;
          }
         }
         if ($780) {
          HEAP32[$__wb>>2] = $788;
          $799 = $788;
         } else {
          $$pr$i = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $788;
          $792 = ($$pr$i|0)==(0|0);
          if ($792) {
           $799 = $788;
          } else {
           $793 = HEAP32[$20>>2]|0;
           __THREW__ = 0;
           invoke_vi($793|0,($$pr$i|0));
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 288;
            break L3;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $799 = $$pre$i;
          }
         }
         HEAP32[$20>>2] = 134;
         $798 = (($799) + ($784)|0);
         HEAP32[$__wn>>2] = $798;
         $800 = HEAP32[$__wb>>2]|0;
         $801 = (($800) + ($$$i)|0);
         $958 = $798;$959 = $801;
        } else {
         $958 = $776;$959 = $778;
        }
        $802 = HEAP32[$__b>>2]|0;
        $803 = (($802) + 12|0);
        $804 = HEAP32[$803>>2]|0;
        $805 = (($802) + 16|0);
        $806 = HEAP32[$805>>2]|0;
        $807 = ($804|0)==($806|0);
        if ($807) {
         $808 = HEAP32[$802>>2]|0;
         $809 = (($808) + 36|0);
         $810 = HEAP32[$809>>2]|0;
         __THREW__ = 0;
         $811 = (invoke_ii($810|0,($802|0))|0);
         $812 = __THREW__; __THREW__ = 0;
         $813 = $812&1;
         if ($813) {
          label = 20;
          break L3;
         }
         $$pre453 = HEAP32[$__wn>>2]|0;
         $$0$i$i53 = $811;$818 = $$pre453;
        } else {
         $814 = HEAP8[$804]|0;
         $815 = $814&255;
         $$0$i$i53 = $815;$818 = $958;
        }
        $816 = $$0$i$i53&255;
        $817 = (($818) + 1|0);
        HEAP32[$__wn>>2] = $817;
        HEAP8[$818] = $816;
        $819 = (($820) + -1)|0;
        HEAP32[$__fd>>2] = $819;
        $821 = HEAP32[$__b>>2]|0;
        $822 = (($821) + 12|0);
        $823 = HEAP32[$822>>2]|0;
        $824 = (($821) + 16|0);
        $825 = HEAP32[$824>>2]|0;
        $826 = ($823|0)==($825|0);
        if ($826) {
         $827 = HEAP32[$821>>2]|0;
         $828 = (($827) + 40|0);
         $829 = HEAP32[$828>>2]|0;
         __THREW__ = 0;
         (invoke_ii($829|0,($821|0))|0);
         $830 = __THREW__; __THREW__ = 0;
         $831 = $830&1;
         if ($831) {
          label = 20;
          break L3;
         }
        } else {
         $833 = (($823) + 1|0);
         HEAP32[$822>>2] = $833;
        }
        $832 = ($819|0)>(0);
        if ($832) {
         $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$739 = $957;$778 = $959;$820 = $819;
        } else {
         $955 = $959;
         break;
        }
       }
      } else {
       $955 = $568;
      }
      $834 = HEAP32[$__wn>>2]|0;
      $835 = HEAP32[$__wb>>2]|0;
      $836 = ($834|0)==($835|0);
      if ($836) {
       label = 299;
       break L3;
      } else {
       $937 = $955;$938 = $941;$939 = $951;$940 = $952;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
      }
      break;
     }
     default: {
      $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     }
     }
    } while(0);
    L350: do {
     if ((label|0) == 40) {
      label = 0;
      $116 = ($__p$0353|0)==(3);
      if ($116) {
       $$lcssa293 = $934;$$lcssa309 = $933;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      } else {
       $$pre$i2$i$i39 = $936;$134 = $936;
      }
      while(1) {
       $117 = HEAP32[$__b>>2]|0;
       $118 = ($117|0)==(0|0);
       do {
        if ($118) {
         $132 = 0;
        } else {
         $119 = (($117) + 12|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = (($117) + 16|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($120|0)==($122|0);
         if ($123) {
          $124 = HEAP32[$117>>2]|0;
          $125 = (($124) + 36|0);
          $126 = HEAP32[$125>>2]|0;
          __THREW__ = 0;
          $127 = (invoke_ii($126|0,($117|0))|0);
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          if ($129) {
           label = 22;
           break L3;
          }
          $130 = ($127|0)==(-1);
          if ($130) {
           HEAP32[$__b>>2] = 0;
           $132 = 0;
           break;
          } else {
           $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
           $132 = $$pre$i$i$i35;
           break;
          }
         } else {
          $132 = $117;
         }
        }
       } while(0);
       $131 = ($132|0)==(0|0);
       $133 = ($134|0)==(0|0);
       do {
        if ($133) {
         $$pre$i2$i$i39424 = $$pre$i2$i$i39;
         label = 53;
        } else {
         $135 = (($134) + 12|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($134) + 16|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = ($136|0)==($138|0);
         if (!($139)) {
          if ($131) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $134;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
         $140 = HEAP32[$134>>2]|0;
         $141 = (($140) + 36|0);
         $142 = HEAP32[$141>>2]|0;
         __THREW__ = 0;
         $143 = (invoke_ii($142|0,($134|0))|0);
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          label = 22;
          break L3;
         }
         $146 = ($143|0)==(-1);
         if ($146) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i39424 = 0;
          label = 53;
          break;
         } else {
          $147 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $131 ^ $147;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$942 = $$pre$i2$i$i39;
           break;
          } else {
           $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
        }
       } while(0);
       if ((label|0) == 53) {
        label = 0;
        if ($131) {
         $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L350;
        } else {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$942 = 0;
        }
       }
       $148 = HEAP32[$__b>>2]|0;
       $149 = (($148) + 12|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($148) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($150|0)==($152|0);
       if ($153) {
        $154 = HEAP32[$148>>2]|0;
        $155 = (($154) + 36|0);
        $156 = HEAP32[$155>>2]|0;
        __THREW__ = 0;
        $157 = (invoke_ii($156|0,($148|0))|0);
        $158 = __THREW__; __THREW__ = 0;
        $159 = $158&1;
        if ($159) {
         label = 22;
         break L3;
        } else {
         $$0$i$i45 = $157;
        }
       } else {
        $160 = HEAP8[$150]|0;
        $161 = $160&255;
        $$0$i$i45 = $161;
       }
       $162 = $$0$i$i45&255;
       $isascii1$i48 = ($162<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $sext231 = $$0$i$i45 << 24;
       $163 = $sext231 >> 24;
       $164 = HEAP32[$4>>2]|0;
       $165 = (($164) + ($163<<1)|0);
       $166 = HEAP16[$165>>1]|0;
       $167 = $166 & 8192;
       $168 = ($167<<16>>16)==(0);
       if ($168) {
        $937 = $935;$938 = $934;$939 = $933;$940 = $932;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $169 = HEAP32[$__b>>2]|0;
       $170 = (($169) + 12|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = (($169) + 16|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($171|0)==($173|0);
       if ($174) {
        $175 = HEAP32[$169>>2]|0;
        $176 = (($175) + 40|0);
        $177 = HEAP32[$176>>2]|0;
        __THREW__ = 0;
        $178 = (invoke_ii($177|0,($169|0))|0);
        $179 = __THREW__; __THREW__ = 0;
        $180 = $179&1;
        if ($180) {
         label = 22;
         break L3;
        } else {
         $$0$i$i50 = $178;
        }
       } else {
        $181 = (($171) + 1|0);
        HEAP32[$170>>2] = $181;
        $182 = HEAP8[$171]|0;
        $183 = $182&255;
        $$0$i$i50 = $183;
       }
       $184 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(55,($__spaces|0),($184|0));
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       if ($186) {
        label = 22;
        break L3;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39426;$134 = $942;
       }
      }
     }
    } while(0);
    $839 = (($__p$0353) + 1)|0;
    $840 = ($839>>>0)<(4);
    if ($840) {
     $932 = $940;$933 = $939;$934 = $938;$935 = $937;$__p$0353 = $839;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
    } else {
     $$lcssa293 = $938;$$lcssa309 = $939;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
     label = 301;
     break;
    }
   }
   L385: do {
    if ((label|0) == 19) {
     $57 = ___cxa_find_matching_catch(-1,-1)|0;
     $58 = tempRet0;
     $70 = $$ph$ph;$free206 = $free206$ph$ph;$lpad$phi$index = $57;$lpad$phi$index7 = $58;
     break L1;
    }
    else if ((label|0) == 20) {
     $59 = ___cxa_find_matching_catch(-1,-1)|0;
     $60 = tempRet0;
     $70 = $941;$free206 = $free204;$lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $70 = $934;$free206 = $free202349;$lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
    }
    else if ((label|0) == 23) {
     $65 = ___cxa_find_matching_catch(-1,-1)|0;
     $66 = tempRet0;
     $70 = $$ph$ph235$ph$ph$ph$ph;$free206 = $free206$ph$ph234$ph$ph$ph$ph;$lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
    }
    else if ((label|0) == 39) {
     $114 = HEAP32[$__err>>2]|0;
     $115 = $114 | 4;
     HEAP32[$__err>>2] = $115;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 131) {
     $369 = HEAP32[$__err>>2]|0;
     $370 = $369 | 4;
     HEAP32[$__err>>2] = $370;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 183) {
     $513 = HEAP32[$__err>>2]|0;
     $514 = $513 | 4;
     HEAP32[$__err>>2] = $514;
     $$0 = 0;$927 = $934;$free208 = $free202349;
    }
    else if ((label|0) == 211) {
     $586 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $587 = tempRet0;
     ___clang_call_terminate($586);
     // unreachable;
    }
    else if ((label|0) == 256) {
     $708 = HEAP32[$__err>>2]|0;
     $709 = $708 | 4;
     HEAP32[$__err>>2] = $709;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 279) {
     $774 = HEAP32[$__err>>2]|0;
     $775 = $774 | 4;
     HEAP32[$__err>>2] = $775;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 288) {
     $796 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $797 = tempRet0;
     ___clang_call_terminate($796);
     // unreachable;
    }
    else if ((label|0) == 299) {
     $837 = HEAP32[$__err>>2]|0;
     $838 = $837 | 4;
     HEAP32[$__err>>2] = $838;
     $$0 = 0;$927 = $941;$free208 = $free204;
    }
    else if ((label|0) == 301) {
     $841 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L400: do {
      if (!($841)) {
       $842 = (($__trailing_sign$0$lcssa) + 1|0);
       $843 = (($__trailing_sign$0$lcssa) + 8|0);
       $844 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L402: while(1) {
        $845 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $846 = $845 & 1;
        $847 = ($846<<24>>24)==(0);
        if ($847) {
         $849 = $845&255;
         $850 = $849 >>> 1;
         $852 = $850;
        } else {
         $848 = HEAP32[$844>>2]|0;
         $852 = $848;
        }
        $851 = ($__i$0>>>0)<($852>>>0);
        if (!($851)) {
         break L400;
        }
        $853 = HEAP32[$__b>>2]|0;
        $854 = ($853|0)==(0|0);
        do {
         if ($854) {
          $868 = 0;
         } else {
          $855 = (($853) + 12|0);
          $856 = HEAP32[$855>>2]|0;
          $857 = (($853) + 16|0);
          $858 = HEAP32[$857>>2]|0;
          $859 = ($856|0)==($858|0);
          if ($859) {
           $860 = HEAP32[$853>>2]|0;
           $861 = (($860) + 36|0);
           $862 = HEAP32[$861>>2]|0;
           __THREW__ = 0;
           $863 = (invoke_ii($862|0,($853|0))|0);
           $864 = __THREW__; __THREW__ = 0;
           $865 = $864&1;
           if ($865) {
            label = 18;
            break L402;
           }
           $866 = ($863|0)==(-1);
           if ($866) {
            HEAP32[$__b>>2] = 0;
            $868 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $868 = $$pre$i$i$i;
            break;
           }
          } else {
           $868 = $853;
          }
         }
        } while(0);
        $867 = ($868|0)==(0|0);
        $869 = HEAP32[$__e>>2]|0;
        $870 = ($869|0)==(0|0);
        do {
         if ($870) {
          label = 319;
         } else {
          $871 = (($869) + 12|0);
          $872 = HEAP32[$871>>2]|0;
          $873 = (($869) + 16|0);
          $874 = HEAP32[$873>>2]|0;
          $875 = ($872|0)==($874|0);
          if (!($875)) {
           if ($867) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
          $876 = HEAP32[$869>>2]|0;
          $877 = (($876) + 36|0);
          $878 = HEAP32[$877>>2]|0;
          __THREW__ = 0;
          $879 = (invoke_ii($878|0,($869|0))|0);
          $880 = __THREW__; __THREW__ = 0;
          $881 = $880&1;
          if ($881) {
           label = 18;
           break L402;
          }
          $882 = ($879|0)==(-1);
          if ($882) {
           HEAP32[$__e>>2] = 0;
           label = 319;
           break;
          } else {
           if ($867) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
         }
        } while(0);
        if ((label|0) == 319) {
         label = 0;
         if ($867) {
          label = 327;
          break;
         }
        }
        $883 = HEAP32[$__b>>2]|0;
        $884 = (($883) + 12|0);
        $885 = HEAP32[$884>>2]|0;
        $886 = (($883) + 16|0);
        $887 = HEAP32[$886>>2]|0;
        $888 = ($885|0)==($887|0);
        if ($888) {
         $889 = HEAP32[$883>>2]|0;
         $890 = (($889) + 36|0);
         $891 = HEAP32[$890>>2]|0;
         __THREW__ = 0;
         $892 = (invoke_ii($891|0,($883|0))|0);
         $893 = __THREW__; __THREW__ = 0;
         $894 = $893&1;
         if ($894) {
          label = 18;
          break;
         } else {
          $$0$i$i = $892;
         }
        } else {
         $895 = HEAP8[$885]|0;
         $896 = $895&255;
         $$0$i$i = $896;
        }
        $897 = $$0$i$i&255;
        $898 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $899 = $898 & 1;
        $900 = ($899<<24>>24)==(0);
        if ($900) {
         $903 = $842;
        } else {
         $901 = HEAP32[$843>>2]|0;
         $903 = $901;
        }
        $902 = (($903) + ($__i$0)|0);
        $904 = HEAP8[$902]|0;
        $905 = ($897<<24>>24)==($904<<24>>24);
        if (!($905)) {
         label = 327;
         break;
        }
        $908 = (($__i$0) + 1)|0;
        $909 = HEAP32[$__b>>2]|0;
        $910 = (($909) + 12|0);
        $911 = HEAP32[$910>>2]|0;
        $912 = (($909) + 16|0);
        $913 = HEAP32[$912>>2]|0;
        $914 = ($911|0)==($913|0);
        if ($914) {
         $915 = HEAP32[$909>>2]|0;
         $916 = (($915) + 40|0);
         $917 = HEAP32[$916>>2]|0;
         __THREW__ = 0;
         (invoke_ii($917|0,($909|0))|0);
         $918 = __THREW__; __THREW__ = 0;
         $919 = $918&1;
         if ($919) {
          label = 18;
          break;
         } else {
          $__i$0 = $908;
          continue;
         }
        } else {
         $920 = (($911) + 1|0);
         HEAP32[$910>>2] = $920;
         $__i$0 = $908;
         continue;
        }
       }
       if ((label|0) == 18) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $70 = $$lcssa293;$free206 = $free202$lcssa;$lpad$phi$index = $55;$lpad$phi$index7 = $56;
        break L1;
       }
       else if ((label|0) == 327) {
        $906 = HEAP32[$__err>>2]|0;
        $907 = $906 | 4;
        HEAP32[$__err>>2] = $907;
        $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
        break L385;
       }
      }
     } while(0);
     $921 = ($$lcssa293|0)==($$lcssa309|0);
     if ($921) {
      $$0 = 1;$927 = $$lcssa309;$free208 = $free202$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
      $922 = HEAP32[$__et>>2]|0;
      $923 = ($922|0)==(0);
      if ($923) {
       $$0 = 1;$927 = $$lcssa293;$free208 = $free202$lcssa;
      } else {
       $924 = HEAP32[$__err>>2]|0;
       $925 = $924 | 4;
       HEAP32[$__err>>2] = $925;
       $$0 = 0;$927 = $$lcssa293;$free208 = $free202$lcssa;
      }
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $926 = ($927|0)==(0|0);
   if ($926) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free208|0,($927|0));
   $928 = __THREW__; __THREW__ = 0;
   $929 = $928&1;
   if ($929) {
    $930 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $931 = tempRet0;
    ___clang_call_terminate($930);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $69 = ($70|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free206|0,($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(54,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(3888|0),(22|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0117 = 0, $$0118 = 0, $$019 = 0, $$020 = 0, $$byval_copy = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 12|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 36|0;
 $__wb = sp + 16|0;
 $__wn = sp + 32|0;
 $__loc = sp + 28|0;
 $__neg = sp + 136|0;
 $0 = sp + 24|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 136;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(53,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0117 = $53;$$019 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[6880>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 6880;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (132);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L6: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((6880 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 1|0);
        HEAP8[$41] = 0;
        HEAP8[$__v] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP8[$39] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 28|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(55,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 28|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -1|0);
       $63 = ($60>>>0)<($62>>>0);
       L23: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP8[$__w$09]|0;
          $67 = ($66<<24>>24)==($57<<24>>24);
          $65 = (($__w$09) + 1|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L23;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(27,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      if ($71) {
       $85 = 0;
      } else {
       $72 = (($70) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (($70) + 16|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ($73|0)==($75|0);
       if ($76) {
        $77 = HEAP32[$70>>2]|0;
        $78 = (($77) + 36|0);
        $79 = HEAP32[$78>>2]|0;
        __THREW__ = 0;
        $80 = (invoke_ii($79|0,($70|0))|0);
        $81 = __THREW__; __THREW__ = 0;
        $82 = $81&1;
        if ($82) {
         break;
        }
        $83 = ($80|0)==(-1);
        if ($83) {
         HEAP32[$__b>>2] = 0;
         $85 = 0;
        } else {
         $85 = $70;
        }
       } else {
        $85 = $70;
       }
      }
      $84 = ($85|0)==(0|0);
      $86 = ($29|0)==(0|0);
      do {
       if ($86) {
        label = 33;
       } else {
        $87 = (($29) + 12|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($29) + 16|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = ($88|0)==($90|0);
        if (!($91)) {
         if ($84) {
          break;
         } else {
          label = 35;
          break;
         }
        }
        $92 = HEAP32[$29>>2]|0;
        $93 = (($92) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        __THREW__ = 0;
        $95 = (invoke_ii($94|0,($29|0))|0);
        $96 = __THREW__; __THREW__ = 0;
        $97 = $96&1;
        if ($97) {
         break L6;
        }
        $98 = ($95|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 33;
         break;
        } else {
         $99 = ($29|0)==(0|0);
         $tmp$i$i = $84 ^ $99;
         if ($tmp$i$i) {
          break;
         } else {
          label = 35;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 33) {
       if ($84) {
        label = 35;
       }
      }
      if ((label|0) == 35) {
       $100 = HEAP32[$__err>>2]|0;
       $101 = $100 | 2;
       HEAP32[$__err>>2] = $101;
      }
      HEAP32[$agg$result>>2] = $85;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(9,($26|0),(14840|0),(112|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0118 = $111;$$020 = $110;
   ___resumeException($$020|0);
   // unreachable;
  } else {
   $$0117 = $111;$$019 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0118 = $$0117;$$020 = $$019;
  ___resumeException($$020|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01]|0;
  HEAP8[$__p$02] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 80|0;
 $6 = sp + 84|0;
 $7 = sp + 96|0;
 $8 = sp + 108|0;
 $9 = sp + 120|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[6320>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 6320;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (132);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6320,$__p$i$i$i$i,133);
  }
  $15 = HEAP32[((6320 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 1|0);
   HEAP8[$43] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP8[$41] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($2,$27);
  $51 = HEAP8[$__psn]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 1|0);
   HEAP8[$57] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP8[$55] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 127]($27)|0);
  HEAP8[$__dp] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 127]($27)|0);
  HEAP8[$__ts] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 63]($3,$27);
  $73 = HEAP8[$__grp]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 63]($4,$27);
  $87 = HEAP8[$__sym]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 1|0);
   HEAP8[$93] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP8[$91] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[6256>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6256;
   $105 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$105>>2] = (132);
   $106 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6256,$__p$i$i$i$i8,133);
  }
  $107 = HEAP32[((6256 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(14840|0),(112|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(14840|0),(112|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 63]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$125&255;HEAP8[$__pat+1|0]=($125>>8)&255;HEAP8[$__pat+2|0]=($125>>16)&255;HEAP8[$__pat+3|0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 63]($6,$119);
  $129 = HEAP8[$__nsn]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 1|0);
   HEAP8[$135] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP8[$133] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 63]($7,$119);
  $143 = HEAP8[$__psn]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 1|0);
   HEAP8[$149] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP8[$147] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 127]($119)|0);
  HEAP8[$__dp] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($119)|0);
  HEAP8[$__ts] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 63]($8,$119);
  $165 = HEAP8[$__grp]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 63]($9,$119);
  $179 = HEAP8[$__sym]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 1|0);
   HEAP8[$185] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP8[$183] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 127]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$116 = 0, $$117 = 0, $$1214 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $$byval_copy = sp + 480|0;
 $vararg_buffer = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 32|0;
 $__wb = sp + 472|0;
 $__wn = sp + 20|0;
 $__loc = sp + 28|0;
 $__neg = sp + 584|0;
 $0 = sp + 24|0;
 $__atoms = sp + 432|0;
 $__nbuf = sp + 484|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 136;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(53,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $52 = ___cxa_find_matching_catch(-1,-1)|0;
   $53 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$116 = $52;$$1214 = $53;$134 = 136;$135 = $__wbuf;
  } else {
   $5 = HEAP32[$__loc>>2]|0;
   $6 = HEAP32[6872>>2]|0;
   $7 = ($6|0)==(-1);
   if ($7) {
    label = 4;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 6872;
    $8 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$8>>2] = (132);
    $9 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$9>>2] = 0;
    __THREW__ = 0;
    invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $12 = HEAP32[((6872 + 4|0))>>2]|0;
     $13 = (($12) + -1)|0;
     $14 = (($5) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($5) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15;
     $19 = $17;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = ($21>>>0)>($13>>>0);
     if ($22) {
      $23 = (($17) + ($13<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       HEAP8[$__neg] = 0;
       $29 = HEAP32[$__e>>2]|0;
       HEAP32[$0>>2] = $29;
       $30 = (($__iob) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       $32 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        label = 15;
        break;
       }
       L12: do {
        if ($32) {
         $35 = HEAP32[$24>>2]|0;
         $36 = (($35) + 48|0);
         $37 = HEAP32[$36>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($37|0,($24|0),(6576|0),(((6576 + 10|0))|0),($__atoms|0))|0);
         $38 = __THREW__; __THREW__ = 0;
         $39 = $38&1;
         if ($39) {
          label = 15;
          break L6;
         }
         $40 = HEAP32[$__wn>>2]|0;
         $41 = HEAP32[$__wb>>2]|0;
         $42 = $40;
         $43 = $41;
         $44 = (($42) - ($43))|0;
         $45 = ($44|0)>(392);
         if ($45) {
          $46 = $44 >> 2;
          $47 = (($46) + 2)|0;
          $48 = (_malloc($47)|0);
          $49 = ($48|0)==(0|0);
          if ($49) {
           __THREW__ = 0;
           invoke_v(4);
           $50 = __THREW__; __THREW__ = 0;
           $51 = $50&1;
           if ($51) {
            $140 = 0;
            label = 16;
           } else {
            $90 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $90 = $48;$__nc$0 = $48;
           label = 19;
          }
         } else {
          $90 = 0;$__nc$0 = $__nbuf;
          label = 19;
         }
         do {
          if ((label|0) == 19) {
           $60 = HEAP8[$__neg]|0;
           $61 = ($60<<24>>24)==(0);
           if ($61) {
            $__nc$1 = $__nc$0;
           } else {
            $62 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $62;
           }
           $63 = ($41>>>0)<($40>>>0);
           if ($63) {
            $64 = (($__atoms) + 40|0);
            $65 = $__atoms;
            $__nc$210 = $__nc$1;$__w$011 = $41;
            while(1) {
             $66 = HEAP32[$__w$011>>2]|0;
             $$01$i = $__atoms;
             while(1) {
              $69 = HEAP32[$$01$i>>2]|0;
              $70 = ($69|0)==($66|0);
              $68 = (($$01$i) + 4|0);
              if ($70) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $67 = ($68|0)==($64|0);
              if ($67) {
               $$0$lcssa$i = $64;
               break;
              } else {
               $$01$i = $68;
              }
             }
             $71 = $$0$lcssa$i;
             $72 = (($71) - ($65))|0;
             $73 = $72 >> 2;
             $74 = (6576 + ($73)|0);
             $75 = HEAP8[$74]|0;
             HEAP8[$__nc$210] = $75;
             $76 = (($__w$011) + 4|0);
             $77 = (($__nc$210) + 1|0);
             $78 = HEAP32[$__wn>>2]|0;
             $79 = ($76>>>0)<($78>>>0);
             if ($79) {
              $__nc$210 = $77;$__w$011 = $76;
             } else {
              $__nc$2$lcssa = $77;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           HEAP32[$vararg_buffer>>2] = $__v;
           $80 = (_sscanf(($__nbuf|0),(6512|0),($vararg_buffer|0))|0);
           $81 = ($80|0)==(1);
           if ($81) {
            $89 = ($90|0)==(0|0);
            if ($89) {
             break L12;
            }
            _free($90);
            break L12;
           }
           $82 = (___cxa_allocate_exception(8)|0);
           __THREW__ = 0;
           invoke_vii(54,($82|0),(6520|0));
           $83 = __THREW__; __THREW__ = 0;
           $84 = $83&1;
           if ($84) {
            $87 = ___cxa_find_matching_catch(-1,-1)|0;
            $88 = tempRet0;
            ___cxa_free_exception(($82|0));
            $59 = $90;$eh$lpad$body$index2Z2D = $88;$eh$lpad$body$indexZ2D = $87;
            break;
           }
           __THREW__ = 0;
           invoke_viii(9,($82|0),(3888|0),(22|0));
           $85 = __THREW__; __THREW__ = 0;
           $86 = $85&1;
           if ($86) {
            $140 = $90;
            label = 16;
           } else {
            // unreachable;
           }
          }
         } while(0);
         if ((label|0) == 16) {
          $56 = ___cxa_find_matching_catch(-1,-1)|0;
          $57 = tempRet0;
          $59 = $140;$eh$lpad$body$index2Z2D = $57;$eh$lpad$body$indexZ2D = $56;
         }
         $58 = ($59|0)==(0|0);
         if ($58) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($59);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $91 = HEAP32[$__b>>2]|0;
       $92 = ($91|0)==(0|0);
       do {
        if ($92) {
         $141 = 1;
        } else {
         $93 = (($91) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($91) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$91>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          __THREW__ = 0;
          $101 = (invoke_ii($100|0,($91|0))|0);
          $102 = __THREW__; __THREW__ = 0;
          $103 = $102&1;
          if ($103) {
           label = 15;
           break L6;
          } else {
           $$0$i$i$i$i = $101;
          }
         } else {
          $104 = HEAP32[$94>>2]|0;
          $$0$i$i$i$i = $104;
         }
         $105 = ($$0$i$i$i$i|0)==(-1);
         if ($105) {
          HEAP32[$__b>>2] = 0;
          $141 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
          $141 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       $106 = HEAP32[$__e>>2]|0;
       $107 = ($106|0)==(0|0);
       do {
        if ($107) {
         label = 47;
        } else {
         $108 = (($106) + 12|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = (($106) + 16|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ($109|0)==($111|0);
         if ($112) {
          $113 = HEAP32[$106>>2]|0;
          $114 = (($113) + 36|0);
          $115 = HEAP32[$114>>2]|0;
          __THREW__ = 0;
          $116 = (invoke_ii($115|0,($106|0))|0);
          $117 = __THREW__; __THREW__ = 0;
          $118 = $117&1;
          if ($118) {
           label = 15;
           break L6;
          } else {
           $$0$i$i1$i$i = $116;
          }
         } else {
          $119 = HEAP32[$109>>2]|0;
          $$0$i$i1$i$i = $119;
         }
         $120 = ($$0$i$i1$i$i|0)==(-1);
         if ($120) {
          HEAP32[$__e>>2] = 0;
          label = 47;
          break;
         } else {
          if ($141) {
           break;
          } else {
           label = 49;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 47) {
        if ($141) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        $121 = HEAP32[$__err>>2]|0;
        $122 = $121 | 2;
        HEAP32[$__err>>2] = $122;
       }
       $123 = HEAP32[$__b>>2]|0;
       HEAP32[$agg$result>>2] = $123;
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       $125 = HEAP32[$__wb>>2]|0;
       HEAP32[$__wb>>2] = 0;
       $126 = ($125|0)==(0|0);
       if ($126) {
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$1>>2]|0;
       __THREW__ = 0;
       invoke_vi($127|0,($125|0));
       $128 = __THREW__; __THREW__ = 0;
       $129 = $128&1;
       if ($129) {
        $130 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $131 = tempRet0;
        ___clang_call_terminate($130);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     }
     $26 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($26);
     __THREW__ = 0;
     invoke_viii(9,($26|0),(14840|0),(112|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 15;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 15) {
    $54 = ___cxa_find_matching_catch(-1,-1)|0;
    $55 = tempRet0;
    $$0 = $54;$$01 = $55;
   }
   $132 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($132)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $133 = ($$pre|0)==(0|0);
   if ($133) {
    $$117 = $$0;$$1215 = $$01;
    ___resumeException($$117|0);
    // unreachable;
   } else {
    $$pre19 = HEAP32[$1>>2]|0;
    $$116 = $$0;$$1214 = $$01;$134 = $$pre19;$135 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($134|0,($135|0));
 $136 = __THREW__; __THREW__ = 0;
 $137 = $136&1;
 if ($137) {
  $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $139 = tempRet0;
  ___clang_call_terminate($138);
  // unreachable;
 } else {
  $$117 = $$116;$$1215 = $$1214;
  ___resumeException($$117|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$482 = 0;
 var $$483 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$ph$ph = 0, $$ph$ph251$ph$ph$ph$ph$ph = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0;
 var $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0377 = 0;
 var $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0;
 var $free232 = 0, $free232$ph$ph = 0, $free232$ph$ph250$ph$ph$ph$ph$ph = 0, $free234 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond247 = 0, $or$cond248 = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0;
 var $phitmp$i4$i$i98 = 0, $switch = 0, $tmp$i$i100 = 0, $tmp$i$i203 = 0, $tmp$i$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $__gbuf = sp + 72|0;
 $__pat = sp + 24|0;
 $__dp = sp;
 $__ts = sp + 52|0;
 $__grp = sp + 56|0;
 $__sym = sp + 472|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 40|0;
 $__spaces = sp + 28|0;
 $__fd = sp + 8|0;
 $__et = sp + 4|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(2,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   $67 = $__gbuf;$free232 = 136;$lpad$phi$index = $64;$lpad$phi$index8 = $65;
  } else {
   $2 = (($__gbuf) + 400|0);
   $3 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $3;
   $4 = (($__nsn) + 4|0);
   $5 = (($__nsn) + 8|0);
   $6 = (($__psn) + 4|0);
   $7 = (($__psn) + 8|0);
   $8 = $__flags & 512;
   $9 = ($8|0)!=(0);
   $10 = (($__sym) + 4|0);
   $11 = (($__sym) + 8|0);
   $12 = (($__spaces) + 4|0);
   $13 = (($__spaces) + 8|0);
   $14 = (($__pat) + 3|0);
   $15 = (($__wb) + 4|0);
   $16 = (($__grp) + 4|0);
   $922 = $2;$923 = $__gbuf;$924 = $__gbuf;$925 = $__we;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 136;
   L4: while(1) {
    $17 = HEAP32[$__b>>2]|0;
    $18 = ($17|0)==(0|0);
    do {
     if ($18) {
      $926 = 1;
     } else {
      $19 = (($17) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($17) + 16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $24 = HEAP32[$17>>2]|0;
       $25 = (($24) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       __THREW__ = 0;
       $27 = (invoke_ii($26|0,($17|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i$i$i18 = $27;
       }
      } else {
       $30 = HEAP32[$20>>2]|0;
       $$0$i$i$i$i18 = $30;
      }
      $31 = ($$0$i$i$i$i18|0)==(-1);
      if ($31) {
       HEAP32[$__b>>2] = 0;
       $926 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $926 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $32 = HEAP32[$__e>>2]|0;
    $33 = ($32|0)==(0|0);
    do {
     if ($33) {
      label = 16;
     } else {
      $34 = (($32) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($32) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35|0)==($37|0);
      if ($38) {
       $39 = HEAP32[$32>>2]|0;
       $40 = (($39) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = (invoke_ii($41|0,($32|0))|0);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i1$i$i24 = $42;
       }
      } else {
       $45 = HEAP32[$35>>2]|0;
       $$0$i$i1$i$i24 = $45;
      }
      $46 = ($$0$i$i1$i$i24|0)==(-1);
      if ($46) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($926) {
        $927 = $32;
        break;
       } else {
        $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
        label = 322;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($926) {
      $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 322;
      break;
     } else {
      $927 = 0;
     }
    }
    $47 = (($__pat) + ($__p$0377)|0);
    $48 = HEAP8[$47]|0;
    $49 = $48 << 24 >> 24;
    L28: do {
     switch ($49|0) {
     case 1:  {
      $cond = ($__p$0377|0)==(3);
      if ($cond) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L4;
      }
      $72 = HEAP32[$__b>>2]|0;
      $73 = (($72) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($72) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$72>>2]|0;
       $79 = (($78) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       $81 = (invoke_ii($80|0,($72|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i33 = $81;
       }
      } else {
       $84 = HEAP32[$74>>2]|0;
       $$0$i$i33 = $84;
      }
      $85 = HEAP32[$__ct>>2]|0;
      $86 = (($85) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      __THREW__ = 0;
      $88 = (invoke_iiii($87|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L4;
      }
      if (!($88)) {
       label = 41;
       break L4;
      }
      $91 = HEAP32[$__b>>2]|0;
      $92 = (($91) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 16|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93|0)==($95|0);
      if ($96) {
       $97 = HEAP32[$91>>2]|0;
       $98 = (($97) + 40|0);
       $99 = HEAP32[$98>>2]|0;
       __THREW__ = 0;
       $100 = (invoke_ii($99|0,($91|0))|0);
       $101 = __THREW__; __THREW__ = 0;
       $102 = $101&1;
       if ($102) {
        $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L4;
       } else {
        $$0$i$i37 = $100;
       }
      } else {
       $103 = (($93) + 4|0);
       HEAP32[$92>>2] = $103;
       $104 = HEAP32[$93>>2]|0;
       $$0$i$i37 = $104;
      }
      __THREW__ = 0;
      invoke_vii(57,($__spaces|0),($$0$i$i37|0));
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L4;
      } else {
       label = 42;
      }
      break;
     }
     case 3:  {
      $176 = HEAP8[$__psn]|0;
      $177 = $176 & 1;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       $180 = $176&255;
       $181 = $180 >>> 1;
       $191 = $181;
      } else {
       $179 = HEAP32[$6>>2]|0;
       $191 = $179;
      }
      $182 = HEAP8[$__nsn]|0;
      $183 = $182 & 1;
      $184 = ($183<<24>>24)==(0);
      if ($184) {
       $186 = $182&255;
       $187 = $186 >>> 1;
       $189 = $187;
      } else {
       $185 = HEAP32[$4>>2]|0;
       $189 = $185;
      }
      $188 = (0 - ($189))|0;
      $190 = ($191|0)==($188|0);
      if ($190) {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      } else {
       if ($178) {
        $193 = $176&255;
        $194 = $193 >>> 1;
        $196 = $194;
       } else {
        $192 = HEAP32[$6>>2]|0;
        $196 = $192;
       }
       $195 = ($196|0)==(0);
       if (!($195)) {
        if ($184) {
         $198 = $182&255;
         $199 = $198 >>> 1;
         $201 = $199;
        } else {
         $197 = HEAP32[$4>>2]|0;
         $201 = $197;
        }
        $200 = ($201|0)==(0);
        if (!($200)) {
         $279 = HEAP32[$__b>>2]|0;
         $280 = (($279) + 12|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = (($279) + 16|0);
         $283 = HEAP32[$282>>2]|0;
         $284 = ($281|0)==($283|0);
         if ($284) {
          $285 = HEAP32[$279>>2]|0;
          $286 = (($285) + 36|0);
          $287 = HEAP32[$286>>2]|0;
          __THREW__ = 0;
          $288 = (invoke_ii($287|0,($279|0))|0);
          $289 = __THREW__; __THREW__ = 0;
          $290 = $289&1;
          if ($290) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          }
          $$pre467 = HEAP8[$__psn]|0;
          $$0$i$i104 = $288;$293 = $$pre467;
         } else {
          $291 = HEAP32[$281>>2]|0;
          $$0$i$i104 = $291;$293 = $176;
         }
         $292 = $293 & 1;
         $294 = ($292<<24>>24)==(0);
         $295 = HEAP32[$7>>2]|0;
         $$478 = $294 ? $6 : $295;
         $296 = HEAP32[$$478>>2]|0;
         $297 = ($$0$i$i104|0)==($296|0);
         $298 = HEAP32[$__b>>2]|0;
         $299 = (($298) + 12|0);
         $300 = HEAP32[$299>>2]|0;
         $301 = (($298) + 16|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = ($300|0)==($302|0);
         if ($297) {
          if ($303) {
           $304 = HEAP32[$298>>2]|0;
           $305 = (($304) + 40|0);
           $306 = HEAP32[$305>>2]|0;
           __THREW__ = 0;
           (invoke_ii($306|0,($298|0))|0);
           $307 = __THREW__; __THREW__ = 0;
           $308 = $307&1;
           if ($308) {
            $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
            label = 25;
            break L4;
           }
          } else {
           $309 = (($300) + 4|0);
           HEAP32[$299>>2] = $309;
          }
          $310 = HEAP8[$__psn]|0;
          $311 = $310 & 1;
          $312 = ($311<<24>>24)==(0);
          if ($312) {
           $314 = $310&255;
           $315 = $314 >>> 1;
           $317 = $315;
          } else {
           $313 = HEAP32[$6>>2]|0;
           $317 = $313;
          }
          $316 = ($317>>>0)>(1);
          $__psn$__trailing_sign$05 = $316 ? $__psn : $__trailing_sign$0379;
          $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
          break L28;
         }
         if ($303) {
          $318 = HEAP32[$298>>2]|0;
          $319 = (($318) + 36|0);
          $320 = HEAP32[$319>>2]|0;
          __THREW__ = 0;
          $321 = (invoke_ii($320|0,($298|0))|0);
          $322 = __THREW__; __THREW__ = 0;
          $323 = $322&1;
          if ($323) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          } else {
           $$0$i$i113 = $321;
          }
         } else {
          $324 = HEAP32[$300>>2]|0;
          $$0$i$i113 = $324;
         }
         $325 = HEAP8[$__nsn]|0;
         $326 = $325 & 1;
         $327 = ($326<<24>>24)==(0);
         $328 = HEAP32[$5>>2]|0;
         $$479 = $327 ? $4 : $328;
         $329 = HEAP32[$$479>>2]|0;
         $330 = ($$0$i$i113|0)==($329|0);
         if (!($330)) {
          label = 134;
          break L4;
         }
         $331 = HEAP32[$__b>>2]|0;
         $332 = (($331) + 12|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = (($331) + 16|0);
         $335 = HEAP32[$334>>2]|0;
         $336 = ($333|0)==($335|0);
         if ($336) {
          $337 = HEAP32[$331>>2]|0;
          $338 = (($337) + 40|0);
          $339 = HEAP32[$338>>2]|0;
          __THREW__ = 0;
          (invoke_ii($339|0,($331|0))|0);
          $340 = __THREW__; __THREW__ = 0;
          $341 = $340&1;
          if ($341) {
           $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L4;
          }
         } else {
          $342 = (($333) + 4|0);
          HEAP32[$332>>2] = $342;
         }
         HEAP8[$__neg] = 1;
         $343 = HEAP8[$__nsn]|0;
         $344 = $343 & 1;
         $345 = ($344<<24>>24)==(0);
         if ($345) {
          $347 = $343&255;
          $348 = $347 >>> 1;
          $350 = $348;
         } else {
          $346 = HEAP32[$4>>2]|0;
          $350 = $346;
         }
         $349 = ($350>>>0)>(1);
         $__nsn$__trailing_sign$06 = $349 ? $__nsn : $__trailing_sign$0379;
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
         break L28;
        }
       }
       if ($178) {
        $203 = $176&255;
        $204 = $203 >>> 1;
        $206 = $204;
       } else {
        $202 = HEAP32[$6>>2]|0;
        $206 = $202;
       }
       $205 = ($206|0)==(0);
       $207 = HEAP32[$__b>>2]|0;
       $208 = (($207) + 12|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 16|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($209|0)==($211|0);
       if ($205) {
        if ($212) {
         $246 = HEAP32[$207>>2]|0;
         $247 = (($246) + 36|0);
         $248 = HEAP32[$247>>2]|0;
         __THREW__ = 0;
         $249 = (invoke_ii($248|0,($207|0))|0);
         $250 = __THREW__; __THREW__ = 0;
         $251 = $250&1;
         if ($251) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L4;
         }
         $$pre465 = HEAP8[$__nsn]|0;
         $$0$i$i79 = $249;$254 = $$pre465;
        } else {
         $252 = HEAP32[$209>>2]|0;
         $$0$i$i79 = $252;$254 = $182;
        }
        $253 = $254 & 1;
        $255 = ($253<<24>>24)==(0);
        $256 = HEAP32[$5>>2]|0;
        $$477 = $255 ? $4 : $256;
        $257 = HEAP32[$$477>>2]|0;
        $258 = ($$0$i$i79|0)==($257|0);
        if (!($258)) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L28;
        }
        $259 = HEAP32[$__b>>2]|0;
        $260 = (($259) + 12|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = (($259) + 16|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($261|0)==($263|0);
        if ($264) {
         $265 = HEAP32[$259>>2]|0;
         $266 = (($265) + 40|0);
         $267 = HEAP32[$266>>2]|0;
         __THREW__ = 0;
         (invoke_ii($267|0,($259|0))|0);
         $268 = __THREW__; __THREW__ = 0;
         $269 = $268&1;
         if ($269) {
          $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L4;
         }
        } else {
         $270 = (($261) + 4|0);
         HEAP32[$260>>2] = $270;
        }
        HEAP8[$__neg] = 1;
        $271 = HEAP8[$__nsn]|0;
        $272 = $271 & 1;
        $273 = ($272<<24>>24)==(0);
        if ($273) {
         $275 = $271&255;
         $276 = $275 >>> 1;
         $278 = $276;
        } else {
         $274 = HEAP32[$4>>2]|0;
         $278 = $274;
        }
        $277 = ($278>>>0)>(1);
        $__nsn$__trailing_sign$0 = $277 ? $__nsn : $__trailing_sign$0379;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
        break L28;
       }
       if ($212) {
        $213 = HEAP32[$207>>2]|0;
        $214 = (($213) + 36|0);
        $215 = HEAP32[$214>>2]|0;
        __THREW__ = 0;
        $216 = (invoke_ii($215|0,($207|0))|0);
        $217 = __THREW__; __THREW__ = 0;
        $218 = $217&1;
        if ($218) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L4;
        }
        $$pre466 = HEAP8[$__psn]|0;
        $$0$i$i71 = $216;$221 = $$pre466;
       } else {
        $219 = HEAP32[$209>>2]|0;
        $$0$i$i71 = $219;$221 = $176;
       }
       $220 = $221 & 1;
       $222 = ($220<<24>>24)==(0);
       $223 = HEAP32[$7>>2]|0;
       $$ = $222 ? $6 : $223;
       $224 = HEAP32[$$>>2]|0;
       $225 = ($$0$i$i71|0)==($224|0);
       if (!($225)) {
        HEAP8[$__neg] = 1;
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L28;
       }
       $226 = HEAP32[$__b>>2]|0;
       $227 = (($226) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 16|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($228|0)==($230|0);
       if ($231) {
        $232 = HEAP32[$226>>2]|0;
        $233 = (($232) + 40|0);
        $234 = HEAP32[$233>>2]|0;
        __THREW__ = 0;
        (invoke_ii($234|0,($226|0))|0);
        $235 = __THREW__; __THREW__ = 0;
        $236 = $235&1;
        if ($236) {
         $$ph$ph251$ph$ph$ph$ph$ph = $924;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L4;
        }
       } else {
        $237 = (($228) + 4|0);
        HEAP32[$227>>2] = $237;
       }
       $238 = HEAP8[$__psn]|0;
       $239 = $238 & 1;
       $240 = ($239<<24>>24)==(0);
       if ($240) {
        $242 = $238&255;
        $243 = $242 >>> 1;
        $245 = $243;
       } else {
        $241 = HEAP32[$6>>2]|0;
        $245 = $241;
       }
       $244 = ($245>>>0)>(1);
       $__psn$__trailing_sign$0 = $244 ? $__psn : $__trailing_sign$0379;
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
      }
      break;
     }
     case 0:  {
      label = 42;
      break;
     }
     case 2:  {
      $353 = ($__trailing_sign$0379|0)!=(0|0);
      $354 = ($__p$0377>>>0)<(2);
      $or$cond = $353 | $354;
      if (!($or$cond)) {
       $355 = ($__p$0377|0)==(2);
       if ($355) {
        $356 = HEAP8[$14]|0;
        $357 = ($356<<24>>24)!=(0);
        $358 = $357;
       } else {
        $358 = 0;
       }
       $brmerge = $9 | $358;
       if (!($brmerge)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = 0;$free229 = $free228372;
        break L28;
       }
      }
      $359 = HEAP8[$__sym]|0;
      $360 = $359 & 1;
      $361 = ($360<<24>>24)==(0);
      $362 = HEAP32[$11>>2]|0;
      $$480 = $361 ? $10 : $362;
      $363 = ($__p$0377|0)==(0);
      L136: do {
       if ($363) {
        $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
       } else {
        $364 = (($__p$0377) + -1)|0;
        $365 = (($__pat) + ($364)|0);
        $366 = HEAP8[$365]|0;
        $switch = ($366&255)<(2);
        if ($switch) {
         $368 = $359;$378 = $$480;
         while(1) {
          $367 = $368 & 1;
          $369 = ($367<<24>>24)==(0);
          if ($369) {
           $372 = $368&255;
           $373 = $372 >>> 1;
           $375 = $10;$376 = $373;
          } else {
           $370 = HEAP32[$11>>2]|0;
           $371 = HEAP32[$10>>2]|0;
           $375 = $370;$376 = $371;
          }
          $374 = (($375) + ($376<<2)|0);
          $377 = ($378|0)==($374|0);
          if ($377) {
           $388 = $368;
           break;
          }
          $379 = HEAP32[$378>>2]|0;
          $380 = HEAP32[$__ct>>2]|0;
          $381 = (($380) + 12|0);
          $382 = HEAP32[$381>>2]|0;
          __THREW__ = 0;
          $383 = (invoke_iiii($382|0,($__ct|0),8192,($379|0))|0);
          $384 = __THREW__; __THREW__ = 0;
          $385 = $384&1;
          if ($385) {
           label = 22;
           break L4;
          }
          if (!($383)) {
           label = 148;
           break;
          }
          $386 = (($378) + 4|0);
          $$pre468 = HEAP8[$__sym]|0;
          $368 = $$pre468;$378 = $386;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre469 = HEAP8[$__sym]|0;
          $388 = $$pre469;
         }
         $387 = $388 & 1;
         $389 = ($387<<24>>24)==(0);
         $390 = HEAP32[$11>>2]|0;
         $$481 = $389 ? $10 : $390;
         $391 = $378;
         $392 = $$481;
         $393 = (($391) - ($392))|0;
         $394 = $393 >> 2;
         $395 = HEAP8[$__spaces]|0;
         $396 = $395 & 1;
         $397 = ($396<<24>>24)==(0);
         if ($397) {
          $399 = $395&255;
          $400 = $399 >>> 1;
          $402 = $400;
         } else {
          $398 = HEAP32[$12>>2]|0;
          $402 = $398;
         }
         $401 = ($394>>>0)>($402>>>0);
         L154: do {
          if (!($401)) {
           if ($397) {
            $406 = $395&255;
            $407 = $406 >>> 1;
            $$sum471 = (($407) - ($394))|0;
            $408 = (($12) + ($$sum471<<2)|0);
            $409 = $395&255;
            $410 = $409 >>> 1;
            $412 = $12;$413 = $410;$416 = $408;
           } else {
            $403 = HEAP32[$13>>2]|0;
            $404 = HEAP32[$12>>2]|0;
            $$sum = (($404) - ($394))|0;
            $405 = (($403) + ($$sum<<2)|0);
            $412 = $403;$413 = $404;$416 = $405;
           }
           $411 = (($412) + ($413<<2)|0);
           $414 = HEAP32[$11>>2]|0;
           $$482 = $389 ? $10 : $414;
           $415 = ($416|0)==($411|0);
           if ($415) {
            $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
            break L136;
           } else {
            $418 = $416;$420 = $$482;
           }
           while(1) {
            $417 = HEAP32[$418>>2]|0;
            $419 = HEAP32[$420>>2]|0;
            $421 = ($417|0)==($419|0);
            if (!($421)) {
             break L154;
            }
            $422 = (($418) + 4|0);
            $423 = ($422|0)==($411|0);
            if ($423) {
             $$pre$i3$i$i200 = $927;$427 = $388;$437 = $378;$454 = $927;
             break L136;
            }
            $424 = (($420) + 4|0);
            $418 = $422;$420 = $424;
           }
          }
         } while(0);
         $425 = HEAP32[$11>>2]|0;
         $$483 = $389 ? $10 : $425;
         $$pre$i3$i$i200 = $927;$427 = $388;$437 = $$483;$454 = $927;
        } else {
         $$pre$i3$i$i200 = $927;$427 = $359;$437 = $$480;$454 = $927;
        }
       }
      } while(0);
      L165: while(1) {
       $426 = $427 & 1;
       $428 = ($426<<24>>24)==(0);
       if ($428) {
        $431 = $427&255;
        $432 = $431 >>> 1;
        $434 = $10;$435 = $432;
       } else {
        $429 = HEAP32[$11>>2]|0;
        $430 = HEAP32[$10>>2]|0;
        $434 = $429;$435 = $430;
       }
       $433 = (($434) + ($435<<2)|0);
       $436 = ($437|0)==($433|0);
       if ($436) {
        break;
       }
       $438 = HEAP32[$__b>>2]|0;
       $439 = ($438|0)==(0|0);
       do {
        if ($439) {
         $468 = 1;
        } else {
         $440 = (($438) + 12|0);
         $441 = HEAP32[$440>>2]|0;
         $442 = (($438) + 16|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = ($441|0)==($443|0);
         if ($444) {
          $445 = HEAP32[$438>>2]|0;
          $446 = (($445) + 36|0);
          $447 = HEAP32[$446>>2]|0;
          __THREW__ = 0;
          $448 = (invoke_ii($447|0,($438|0))|0);
          $449 = __THREW__; __THREW__ = 0;
          $450 = $449&1;
          if ($450) {
           label = 23;
           break L4;
          } else {
           $$0$i$i$i$i192 = $448;
          }
         } else {
          $451 = HEAP32[$441>>2]|0;
          $$0$i$i$i$i192 = $451;
         }
         $452 = ($$0$i$i$i$i192|0)==(-1);
         if ($452) {
          HEAP32[$__b>>2] = 0;
          $468 = 1;
          break;
         } else {
          $$pre$i$i$i194 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
          $468 = $phitmp$i$i$i195;
          break;
         }
        }
       } while(0);
       $453 = ($454|0)==(0|0);
       do {
        if ($453) {
         $$pre$i3$i$i200456 = $$pre$i3$i$i200;
         label = 178;
        } else {
         $455 = (($454) + 12|0);
         $456 = HEAP32[$455>>2]|0;
         $457 = (($454) + 16|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = ($456|0)==($458|0);
         if ($459) {
          $460 = HEAP32[$454>>2]|0;
          $461 = (($460) + 36|0);
          $462 = HEAP32[$461>>2]|0;
          __THREW__ = 0;
          $463 = (invoke_ii($462|0,($454|0))|0);
          $464 = __THREW__; __THREW__ = 0;
          $465 = $464&1;
          if ($465) {
           label = 23;
           break L4;
          } else {
           $$0$i$i1$i$i198 = $463;
          }
         } else {
          $466 = HEAP32[$456>>2]|0;
          $$0$i$i1$i$i198 = $466;
         }
         $467 = ($$0$i$i1$i$i198|0)==(-1);
         if ($467) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i200456 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
          $tmp$i$i203 = $468 ^ $phitmp$i4$i$i201;
          if ($tmp$i$i203) {
           $$pre$i3$i$i200455 = $$pre$i3$i$i200;$934 = $$pre$i3$i$i200;
           break;
          } else {
           break L165;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($468) {
         break;
        } else {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$934 = 0;
        }
       }
       $469 = HEAP32[$__b>>2]|0;
       $470 = (($469) + 12|0);
       $471 = HEAP32[$470>>2]|0;
       $472 = (($469) + 16|0);
       $473 = HEAP32[$472>>2]|0;
       $474 = ($471|0)==($473|0);
       if ($474) {
        $475 = HEAP32[$469>>2]|0;
        $476 = (($475) + 36|0);
        $477 = HEAP32[$476>>2]|0;
        __THREW__ = 0;
        $478 = (invoke_ii($477|0,($469|0))|0);
        $479 = __THREW__; __THREW__ = 0;
        $480 = $479&1;
        if ($480) {
         label = 23;
         break L4;
        } else {
         $$0$i$i207 = $478;
        }
       } else {
        $481 = HEAP32[$471>>2]|0;
        $$0$i$i207 = $481;
       }
       $482 = HEAP32[$437>>2]|0;
       $483 = ($$0$i$i207|0)==($482|0);
       if (!($483)) {
        break;
       }
       $484 = HEAP32[$__b>>2]|0;
       $485 = (($484) + 12|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (($484) + 16|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = ($486|0)==($488|0);
       if ($489) {
        $490 = HEAP32[$484>>2]|0;
        $491 = (($490) + 40|0);
        $492 = HEAP32[$491>>2]|0;
        __THREW__ = 0;
        (invoke_ii($492|0,($484|0))|0);
        $493 = __THREW__; __THREW__ = 0;
        $494 = $493&1;
        if ($494) {
         label = 23;
         break L4;
        }
       } else {
        $495 = (($486) + 4|0);
        HEAP32[$485>>2] = $495;
       }
       $496 = (($437) + 4|0);
       $$pre = HEAP8[$__sym]|0;
       $$pre$i3$i$i200 = $$pre$i3$i$i200455;$427 = $$pre;$437 = $496;$454 = $934;
      }
      if ($9) {
       $497 = HEAP8[$__sym]|0;
       $498 = $497 & 1;
       $499 = ($498<<24>>24)==(0);
       if ($499) {
        $502 = $497&255;
        $503 = $502 >>> 1;
        $505 = $10;$506 = $503;
       } else {
        $500 = HEAP32[$11>>2]|0;
        $501 = HEAP32[$10>>2]|0;
        $505 = $500;$506 = $501;
       }
       $504 = (($505) + ($506<<2)|0);
       $507 = ($437|0)==($504|0);
       if ($507) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       } else {
        label = 193;
        break L4;
       }
      } else {
       $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      }
      break;
     }
     case 4:  {
      $561 = $925;$602 = $923;$603 = $922;$607 = $924;$__ng$0 = 0;$free227 = $free228372;
      L209: while(1) {
       $510 = HEAP32[$__b>>2]|0;
       $511 = ($510|0)==(0|0);
       do {
        if ($511) {
         $935 = 1;
        } else {
         $512 = (($510) + 12|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = (($510) + 16|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($513|0)==($515|0);
         if ($516) {
          $517 = HEAP32[$510>>2]|0;
          $518 = (($517) + 36|0);
          $519 = HEAP32[$518>>2]|0;
          __THREW__ = 0;
          $520 = (invoke_ii($519|0,($510|0))|0);
          $521 = __THREW__; __THREW__ = 0;
          $522 = $521&1;
          if ($522) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          } else {
           $$0$i$i$i$i177 = $520;
          }
         } else {
          $523 = HEAP32[$513>>2]|0;
          $$0$i$i$i$i177 = $523;
         }
         $524 = ($$0$i$i$i$i177|0)==(-1);
         if ($524) {
          HEAP32[$__b>>2] = 0;
          $935 = 1;
          break;
         } else {
          $$pre$i$i$i179 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
          $935 = $phitmp$i$i$i180;
          break;
         }
        }
       } while(0);
       $525 = HEAP32[$__e>>2]|0;
       $526 = ($525|0)==(0|0);
       do {
        if ($526) {
         label = 207;
        } else {
         $527 = (($525) + 12|0);
         $528 = HEAP32[$527>>2]|0;
         $529 = (($525) + 16|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = ($528|0)==($530|0);
         if ($531) {
          $532 = HEAP32[$525>>2]|0;
          $533 = (($532) + 36|0);
          $534 = HEAP32[$533>>2]|0;
          __THREW__ = 0;
          $535 = (invoke_ii($534|0,($525|0))|0);
          $536 = __THREW__; __THREW__ = 0;
          $537 = $536&1;
          if ($537) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          } else {
           $$0$i$i1$i$i183 = $535;
          }
         } else {
          $538 = HEAP32[$528>>2]|0;
          $$0$i$i1$i$i183 = $538;
         }
         $539 = ($$0$i$i1$i$i183|0)==(-1);
         if ($539) {
          HEAP32[$__e>>2] = 0;
          label = 207;
          break;
         } else {
          if ($935) {
           break;
          } else {
           break L209;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($935) {
         break;
        }
       }
       $540 = HEAP32[$__b>>2]|0;
       $541 = (($540) + 12|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = (($540) + 16|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = ($542|0)==($544|0);
       if ($545) {
        $546 = HEAP32[$540>>2]|0;
        $547 = (($546) + 36|0);
        $548 = HEAP32[$547>>2]|0;
        __THREW__ = 0;
        $549 = (invoke_ii($548|0,($540|0))|0);
        $550 = __THREW__; __THREW__ = 0;
        $551 = $550&1;
        if ($551) {
         $$ph$ph = $607;$free232$ph$ph = $free227;
         label = 20;
         break L4;
        } else {
         $$0$i$i173 = $549;
        }
       } else {
        $552 = HEAP32[$542>>2]|0;
        $$0$i$i173 = $552;
       }
       $553 = HEAP32[$__ct>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       __THREW__ = 0;
       $556 = (invoke_iiii($555|0,($__ct|0),2048,($$0$i$i173|0))|0);
       $557 = __THREW__; __THREW__ = 0;
       $558 = $557&1;
       if ($558) {
        $$ph$ph = $607;$free232$ph$ph = $free227;
        label = 20;
        break L4;
       }
       if ($556) {
        $559 = HEAP32[$__wn>>2]|0;
        $560 = ($559|0)==($561|0);
        if ($560) {
         $562 = HEAP32[$15>>2]|0;
         $563 = ($562|0)!=(136|0);
         $564 = HEAP32[$__wb>>2]|0;
         $565 = $561;
         $566 = $564;
         $567 = (($565) - ($566))|0;
         $568 = ($567>>>0)<(2147483647);
         $569 = $567 << 1;
         $$$i159 = $568 ? $569 : -1;
         $570 = $567 >> 2;
         if ($563) {
          $571 = $564;
         } else {
          $571 = 0;
         }
         $572 = (_realloc($571,$$$i159)|0);
         $573 = ($572|0)==(0|0);
         if ($573) {
          __THREW__ = 0;
          invoke_v(4);
          $574 = __THREW__; __THREW__ = 0;
          $575 = $574&1;
          if ($575) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          }
         }
         if ($563) {
          HEAP32[$__wb>>2] = $572;
          $584 = $572;
         } else {
          $$pr$i162 = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $572;
          $576 = ($$pr$i162|0)==(0|0);
          if ($576) {
           $584 = $572;
          } else {
           $577 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($577|0,($$pr$i162|0));
           $578 = __THREW__; __THREW__ = 0;
           $579 = $578&1;
           if ($579) {
            label = 224;
            break L4;
           }
           $$pre$i163 = HEAP32[$__wb>>2]|0;
           $584 = $$pre$i163;
          }
         }
         HEAP32[$15>>2] = 134;
         $582 = $$$i159 >>> 2;
         $583 = (($584) + ($570<<2)|0);
         HEAP32[$__wn>>2] = $583;
         $585 = HEAP32[$__wb>>2]|0;
         $586 = (($585) + ($582<<2)|0);
         $588 = $583;$936 = $586;
        } else {
         $588 = $559;$936 = $561;
        }
        $587 = (($588) + 4|0);
        HEAP32[$__wn>>2] = $587;
        HEAP32[$588>>2] = $$0$i$i173;
        $589 = (($__ng$0) + 1)|0;
        $937 = $936;$938 = $607;$939 = $602;$940 = $603;$__ng$1 = $589;$free = $free227;
       } else {
        $590 = HEAP8[$__grp]|0;
        $591 = $590 & 1;
        $592 = ($591<<24>>24)==(0);
        if ($592) {
         $594 = $590&255;
         $595 = $594 >>> 1;
         $597 = $595;
        } else {
         $593 = HEAP32[$16>>2]|0;
         $597 = $593;
        }
        $596 = ($597|0)==(0);
        $598 = ($__ng$0|0)==(0);
        $or$cond7 = $596 | $598;
        if ($or$cond7) {
         break;
        }
        $599 = HEAP32[$__ts>>2]|0;
        $600 = ($$0$i$i173|0)==($599|0);
        if (!($600)) {
         break;
        }
        $601 = ($602|0)==($603|0);
        if ($601) {
         $604 = ($free227|0)!=(136|0);
         $605 = $602;
         $606 = $607;
         $608 = (($605) - ($606))|0;
         $609 = ($608>>>0)<(2147483647);
         $610 = $608 << 1;
         $$$i149 = $609 ? $610 : -1;
         $611 = $608 >> 2;
         if ($604) {
          $612 = $607;
         } else {
          $612 = 0;
         }
         $613 = (_realloc($612,$$$i149)|0);
         $614 = ($613|0)==(0|0);
         if ($614) {
          __THREW__ = 0;
          invoke_v(4);
          $615 = __THREW__; __THREW__ = 0;
          $616 = $615&1;
          if ($616) {
           $$ph$ph = $607;$free232$ph$ph = $free227;
           label = 20;
           break L4;
          }
         }
         $617 = ($607|0)==(0|0);
         $or$cond247 = $604 | $617;
         if (!($or$cond247)) {
         }
         $618 = $$$i149 >>> 2;
         $619 = (($613) + ($611<<2)|0);
         $620 = (($613) + ($618<<2)|0);
         $622 = $619;$941 = $613;$942 = $620;$free226 = 134;
        } else {
         $622 = $602;$941 = $607;$942 = $603;$free226 = $free227;
        }
        $621 = (($622) + 4|0);
        HEAP32[$622>>2] = $__ng$0;
        $937 = $561;$938 = $941;$939 = $621;$940 = $942;$__ng$1 = 0;$free = $free226;
       }
       $623 = HEAP32[$__b>>2]|0;
       $624 = (($623) + 12|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = (($623) + 16|0);
       $627 = HEAP32[$626>>2]|0;
       $628 = ($625|0)==($627|0);
       if ($628) {
        $629 = HEAP32[$623>>2]|0;
        $630 = (($629) + 40|0);
        $631 = HEAP32[$630>>2]|0;
        __THREW__ = 0;
        (invoke_ii($631|0,($623|0))|0);
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         $$ph$ph = $938;$free232$ph$ph = $free;
         label = 20;
         break L4;
        } else {
         $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
         continue;
        }
       } else {
        $634 = (($625) + 4|0);
        HEAP32[$624>>2] = $634;
        $561 = $937;$602 = $939;$603 = $940;$607 = $938;$__ng$0 = $__ng$1;$free227 = $free;
        continue;
       }
      }
      $635 = ($607|0)==($602|0);
      $636 = ($__ng$0|0)==(0);
      $or$cond8 = $635 | $636;
      if ($or$cond8) {
       $932 = $607;$943 = $602;$944 = $603;$free230 = $free227;
      } else {
       $637 = ($602|0)==($603|0);
       if ($637) {
        $638 = ($free227|0)!=(136|0);
        $639 = $602;
        $640 = $607;
        $641 = (($639) - ($640))|0;
        $642 = ($641>>>0)<(2147483647);
        $643 = $641 << 1;
        $$$i138 = $642 ? $643 : -1;
        $644 = $641 >> 2;
        if ($638) {
         $645 = $607;
        } else {
         $645 = 0;
        }
        $646 = (_realloc($645,$$$i138)|0);
        $647 = ($646|0)==(0|0);
        if ($647) {
         __THREW__ = 0;
         invoke_v(4);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          $$ph$ph251$ph$ph$ph$ph$ph = $607;$free232$ph$ph250$ph$ph$ph$ph$ph = $free227;
          label = 25;
          break L4;
         }
        }
        $650 = ($607|0)==(0|0);
        $or$cond248 = $638 | $650;
        if (!($or$cond248)) {
        }
        $651 = $$$i138 >>> 2;
        $652 = (($646) + ($644<<2)|0);
        $653 = (($646) + ($651<<2)|0);
        $655 = $652;$945 = $646;$946 = $653;$free231 = 134;
       } else {
        $655 = $602;$945 = $607;$946 = $603;$free231 = $free227;
       }
       $654 = (($655) + 4|0);
       HEAP32[$655>>2] = $__ng$0;
       $932 = $945;$943 = $654;$944 = $946;$free230 = $free231;
      }
      $656 = HEAP32[$__fd>>2]|0;
      $657 = ($656|0)>(0);
      if ($657) {
       $658 = HEAP32[$__b>>2]|0;
       $659 = ($658|0)==(0|0);
       do {
        if ($659) {
         $948 = 1;
        } else {
         $660 = (($658) + 12|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = (($658) + 16|0);
         $663 = HEAP32[$662>>2]|0;
         $664 = ($661|0)==($663|0);
         if ($664) {
          $665 = HEAP32[$658>>2]|0;
          $666 = (($665) + 36|0);
          $667 = HEAP32[$666>>2]|0;
          __THREW__ = 0;
          $668 = (invoke_ii($667|0,($658|0))|0);
          $669 = __THREW__; __THREW__ = 0;
          $670 = $669&1;
          if ($670) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i123 = $668;
          }
         } else {
          $671 = HEAP32[$661>>2]|0;
          $$0$i$i$i$i123 = $671;
         }
         $672 = ($$0$i$i$i$i123|0)==(-1);
         if ($672) {
          HEAP32[$__b>>2] = 0;
          $948 = 1;
          break;
         } else {
          $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
          $948 = $phitmp$i$i$i126;
          break;
         }
        }
       } while(0);
       $673 = HEAP32[$__e>>2]|0;
       $674 = ($673|0)==(0|0);
       do {
        if ($674) {
         label = 268;
        } else {
         $675 = (($673) + 12|0);
         $676 = HEAP32[$675>>2]|0;
         $677 = (($673) + 16|0);
         $678 = HEAP32[$677>>2]|0;
         $679 = ($676|0)==($678|0);
         if ($679) {
          $680 = HEAP32[$673>>2]|0;
          $681 = (($680) + 36|0);
          $682 = HEAP32[$681>>2]|0;
          __THREW__ = 0;
          $683 = (invoke_ii($682|0,($673|0))|0);
          $684 = __THREW__; __THREW__ = 0;
          $685 = $684&1;
          if ($685) {
           $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i129 = $683;
          }
         } else {
          $686 = HEAP32[$676>>2]|0;
          $$0$i$i1$i$i129 = $686;
         }
         $687 = ($$0$i$i1$i$i129|0)==(-1);
         if ($687) {
          HEAP32[$__e>>2] = 0;
          label = 268;
          break;
         } else {
          if ($948) {
           $949 = $673;
           break;
          } else {
           label = 274;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 268) {
        label = 0;
        if ($948) {
         label = 274;
         break L4;
        } else {
         $949 = 0;
        }
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 36|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        $697 = (invoke_ii($696|0,($688|0))|0);
        $698 = __THREW__; __THREW__ = 0;
        $699 = $698&1;
        if ($699) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L4;
        } else {
         $$0$i$i117 = $697;
        }
       } else {
        $700 = HEAP32[$690>>2]|0;
        $$0$i$i117 = $700;
       }
       $701 = HEAP32[$__dp>>2]|0;
       $702 = ($$0$i$i117|0)==($701|0);
       if (!($702)) {
        label = 274;
        break L4;
       }
       $705 = HEAP32[$__b>>2]|0;
       $706 = (($705) + 12|0);
       $707 = HEAP32[$706>>2]|0;
       $708 = (($705) + 16|0);
       $709 = HEAP32[$708>>2]|0;
       $710 = ($707|0)==($709|0);
       if ($710) {
        $711 = HEAP32[$705>>2]|0;
        $712 = (($711) + 40|0);
        $713 = HEAP32[$712>>2]|0;
        __THREW__ = 0;
        (invoke_ii($713|0,($705|0))|0);
        $714 = __THREW__; __THREW__ = 0;
        $715 = $714&1;
        if ($715) {
         $$ph$ph251$ph$ph$ph$ph$ph = $932;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L4;
        } else {
         $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
        }
       } else {
        $716 = (($707) + 4|0);
        HEAP32[$706>>2] = $716;
        $$pre$i3$i$i97 = $949;$733 = $949;$771 = $561;$813 = $656;
       }
       while(1) {
        $717 = HEAP32[$__b>>2]|0;
        $718 = ($717|0)==(0|0);
        do {
         if ($718) {
          $747 = 1;
         } else {
          $719 = (($717) + 12|0);
          $720 = HEAP32[$719>>2]|0;
          $721 = (($717) + 16|0);
          $722 = HEAP32[$721>>2]|0;
          $723 = ($720|0)==($722|0);
          if ($723) {
           $724 = HEAP32[$717>>2]|0;
           $725 = (($724) + 36|0);
           $726 = HEAP32[$725>>2]|0;
           __THREW__ = 0;
           $727 = (invoke_ii($726|0,($717|0))|0);
           $728 = __THREW__; __THREW__ = 0;
           $729 = $728&1;
           if ($729) {
            label = 21;
            break L4;
           } else {
            $$0$i$i$i$i89 = $727;
           }
          } else {
           $730 = HEAP32[$720>>2]|0;
           $$0$i$i$i$i89 = $730;
          }
          $731 = ($$0$i$i$i$i89|0)==(-1);
          if ($731) {
           HEAP32[$__b>>2] = 0;
           $747 = 1;
           break;
          } else {
           $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
           $747 = $phitmp$i$i$i92;
           break;
          }
         }
        } while(0);
        $732 = ($733|0)==(0|0);
        do {
         if ($732) {
          $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
          label = 291;
         } else {
          $734 = (($733) + 12|0);
          $735 = HEAP32[$734>>2]|0;
          $736 = (($733) + 16|0);
          $737 = HEAP32[$736>>2]|0;
          $738 = ($735|0)==($737|0);
          if ($738) {
           $739 = HEAP32[$733>>2]|0;
           $740 = (($739) + 36|0);
           $741 = HEAP32[$740>>2]|0;
           __THREW__ = 0;
           $742 = (invoke_ii($741|0,($733|0))|0);
           $743 = __THREW__; __THREW__ = 0;
           $744 = $743&1;
           if ($744) {
            label = 21;
            break L4;
           } else {
            $$0$i$i1$i$i95 = $742;
           }
          } else {
           $745 = HEAP32[$735>>2]|0;
           $$0$i$i1$i$i95 = $745;
          }
          $746 = ($$0$i$i1$i$i95|0)==(-1);
          if ($746) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i97459$ph = 0;
           label = 291;
           break;
          } else {
           $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
           $tmp$i$i100 = $747 ^ $phitmp$i4$i$i98;
           if ($tmp$i$i100) {
            $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$950 = $$pre$i3$i$i97;
            break;
           } else {
            label = 298;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 291) {
         label = 0;
         if ($747) {
          label = 298;
          break L4;
         } else {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$950 = 0;
         }
        }
        $748 = HEAP32[$__b>>2]|0;
        $749 = (($748) + 12|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = (($748) + 16|0);
        $752 = HEAP32[$751>>2]|0;
        $753 = ($750|0)==($752|0);
        if ($753) {
         $754 = HEAP32[$748>>2]|0;
         $755 = (($754) + 36|0);
         $756 = HEAP32[$755>>2]|0;
         __THREW__ = 0;
         $757 = (invoke_ii($756|0,($748|0))|0);
         $758 = __THREW__; __THREW__ = 0;
         $759 = $758&1;
         if ($759) {
          label = 21;
          break L4;
         } else {
          $$0$i$i83 = $757;
         }
        } else {
         $760 = HEAP32[$750>>2]|0;
         $$0$i$i83 = $760;
        }
        $761 = HEAP32[$__ct>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        __THREW__ = 0;
        $764 = (invoke_iiii($763|0,($__ct|0),2048,($$0$i$i83|0))|0);
        $765 = __THREW__; __THREW__ = 0;
        $766 = $765&1;
        if ($766) {
         label = 21;
         break L4;
        }
        if (!($764)) {
         label = 298;
         break L4;
        }
        $769 = HEAP32[$__wn>>2]|0;
        $770 = ($769|0)==($771|0);
        if ($770) {
         $772 = HEAP32[$15>>2]|0;
         $773 = ($772|0)!=(136|0);
         $774 = HEAP32[$__wb>>2]|0;
         $775 = $771;
         $776 = $774;
         $777 = (($775) - ($776))|0;
         $778 = ($777>>>0)<(2147483647);
         $779 = $777 << 1;
         $$$i = $778 ? $779 : -1;
         $780 = $777 >> 2;
         if ($773) {
          $781 = $774;
         } else {
          $781 = 0;
         }
         $782 = (_realloc($781,$$$i)|0);
         $783 = ($782|0)==(0|0);
         if ($783) {
          __THREW__ = 0;
          invoke_v(4);
          $784 = __THREW__; __THREW__ = 0;
          $785 = $784&1;
          if ($785) {
           label = 21;
           break L4;
          }
         }
         if ($773) {
          HEAP32[$__wb>>2] = $782;
          $794 = $782;
         } else {
          $$pr$i = HEAP32[$__wb>>2]|0;
          HEAP32[$__wb>>2] = $782;
          $786 = ($$pr$i|0)==(0|0);
          if ($786) {
           $794 = $782;
          } else {
           $787 = HEAP32[$15>>2]|0;
           __THREW__ = 0;
           invoke_vi($787|0,($$pr$i|0));
           $788 = __THREW__; __THREW__ = 0;
           $789 = $788&1;
           if ($789) {
            label = 309;
            break L4;
           }
           $$pre$i = HEAP32[$__wb>>2]|0;
           $794 = $$pre$i;
          }
         }
         HEAP32[$15>>2] = 134;
         $792 = $$$i >>> 2;
         $793 = (($794) + ($780<<2)|0);
         HEAP32[$__wn>>2] = $793;
         $795 = HEAP32[$__wb>>2]|0;
         $796 = (($795) + ($792<<2)|0);
         $951 = $793;$952 = $796;
        } else {
         $951 = $769;$952 = $771;
        }
        $797 = HEAP32[$__b>>2]|0;
        $798 = (($797) + 12|0);
        $799 = HEAP32[$798>>2]|0;
        $800 = (($797) + 16|0);
        $801 = HEAP32[$800>>2]|0;
        $802 = ($799|0)==($801|0);
        if ($802) {
         $803 = HEAP32[$797>>2]|0;
         $804 = (($803) + 36|0);
         $805 = HEAP32[$804>>2]|0;
         __THREW__ = 0;
         $806 = (invoke_ii($805|0,($797|0))|0);
         $807 = __THREW__; __THREW__ = 0;
         $808 = $807&1;
         if ($808) {
          label = 21;
          break L4;
         }
         $$pre470 = HEAP32[$__wn>>2]|0;
         $$0$i$i64 = $806;$811 = $$pre470;
        } else {
         $809 = HEAP32[$799>>2]|0;
         $$0$i$i64 = $809;$811 = $951;
        }
        $810 = (($811) + 4|0);
        HEAP32[$__wn>>2] = $810;
        HEAP32[$811>>2] = $$0$i$i64;
        $812 = (($813) + -1)|0;
        HEAP32[$__fd>>2] = $812;
        $814 = HEAP32[$__b>>2]|0;
        $815 = (($814) + 12|0);
        $816 = HEAP32[$815>>2]|0;
        $817 = (($814) + 16|0);
        $818 = HEAP32[$817>>2]|0;
        $819 = ($816|0)==($818|0);
        if ($819) {
         $820 = HEAP32[$814>>2]|0;
         $821 = (($820) + 40|0);
         $822 = HEAP32[$821>>2]|0;
         __THREW__ = 0;
         (invoke_ii($822|0,($814|0))|0);
         $823 = __THREW__; __THREW__ = 0;
         $824 = $823&1;
         if ($824) {
          label = 21;
          break L4;
         }
        } else {
         $826 = (($816) + 4|0);
         HEAP32[$815>>2] = $826;
        }
        $825 = ($812|0)>(0);
        if ($825) {
         $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$733 = $950;$771 = $952;$813 = $812;
        } else {
         $947 = $952;
         break;
        }
       }
      } else {
       $947 = $561;
      }
      $827 = HEAP32[$__wn>>2]|0;
      $828 = HEAP32[$__wb>>2]|0;
      $829 = ($827|0)==($828|0);
      if ($829) {
       label = 320;
       break L4;
      } else {
       $928 = $947;$929 = $932;$930 = $943;$931 = $944;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
      }
      break;
     }
     default: {
      $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     }
     }
    } while(0);
    L381: do {
     if ((label|0) == 42) {
      label = 0;
      $109 = ($__p$0377|0)==(3);
      if ($109) {
       $$lcssa313 = $924;$$lcssa330 = $923;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L4;
      } else {
       $$pre$i3$i$i47 = $927;$126 = $927;
      }
      while(1) {
       $110 = HEAP32[$__b>>2]|0;
       $111 = ($110|0)==(0|0);
       do {
        if ($111) {
         $140 = 1;
        } else {
         $112 = (($110) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = (($110) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($113|0)==($115|0);
         if ($116) {
          $117 = HEAP32[$110>>2]|0;
          $118 = (($117) + 36|0);
          $119 = HEAP32[$118>>2]|0;
          __THREW__ = 0;
          $120 = (invoke_ii($119|0,($110|0))|0);
          $121 = __THREW__; __THREW__ = 0;
          $122 = $121&1;
          if ($122) {
           label = 24;
           break L4;
          } else {
           $$0$i$i$i$i39 = $120;
          }
         } else {
          $123 = HEAP32[$113>>2]|0;
          $$0$i$i$i$i39 = $123;
         }
         $124 = ($$0$i$i$i$i39|0)==(-1);
         if ($124) {
          HEAP32[$__b>>2] = 0;
          $140 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $140 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $125 = ($126|0)==(0|0);
       do {
        if ($125) {
         $$pre$i3$i$i47452 = $$pre$i3$i$i47;
         label = 56;
        } else {
         $127 = (($126) + 12|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = (($126) + 16|0);
         $130 = HEAP32[$129>>2]|0;
         $131 = ($128|0)==($130|0);
         if ($131) {
          $132 = HEAP32[$126>>2]|0;
          $133 = (($132) + 36|0);
          $134 = HEAP32[$133>>2]|0;
          __THREW__ = 0;
          $135 = (invoke_ii($134|0,($126|0))|0);
          $136 = __THREW__; __THREW__ = 0;
          $137 = $136&1;
          if ($137) {
           label = 24;
           break L4;
          } else {
           $$0$i$i1$i$i45 = $135;
          }
         } else {
          $138 = HEAP32[$128>>2]|0;
          $$0$i$i1$i$i45 = $138;
         }
         $139 = ($$0$i$i1$i$i45|0)==(-1);
         if ($139) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i47452 = 0;
          label = 56;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
          $tmp$i$i50 = $140 ^ $phitmp$i4$i$i48;
          if ($tmp$i$i50) {
           $$pre$i3$i$i47454 = $$pre$i3$i$i47;$933 = $$pre$i3$i$i47;
           break;
          } else {
           $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
           break L381;
          }
         }
        }
       } while(0);
       if ((label|0) == 56) {
        label = 0;
        if ($140) {
         $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L381;
        } else {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$933 = 0;
        }
       }
       $141 = HEAP32[$__b>>2]|0;
       $142 = (($141) + 12|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (($141) + 16|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($143|0)==($145|0);
       if ($146) {
        $147 = HEAP32[$141>>2]|0;
        $148 = (($147) + 36|0);
        $149 = HEAP32[$148>>2]|0;
        __THREW__ = 0;
        $150 = (invoke_ii($149|0,($141|0))|0);
        $151 = __THREW__; __THREW__ = 0;
        $152 = $151&1;
        if ($152) {
         label = 24;
         break L4;
        } else {
         $$0$i$i54 = $150;
        }
       } else {
        $153 = HEAP32[$143>>2]|0;
        $$0$i$i54 = $153;
       }
       $154 = HEAP32[$__ct>>2]|0;
       $155 = (($154) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       __THREW__ = 0;
       $157 = (invoke_iiii($156|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $158 = __THREW__; __THREW__ = 0;
       $159 = $158&1;
       if ($159) {
        label = 24;
        break L4;
       }
       if (!($157)) {
        $928 = $925;$929 = $924;$930 = $923;$931 = $922;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L381;
       }
       $160 = HEAP32[$__b>>2]|0;
       $161 = (($160) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($160) + 16|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($162|0)==($164|0);
       if ($165) {
        $166 = HEAP32[$160>>2]|0;
        $167 = (($166) + 40|0);
        $168 = HEAP32[$167>>2]|0;
        __THREW__ = 0;
        $169 = (invoke_ii($168|0,($160|0))|0);
        $170 = __THREW__; __THREW__ = 0;
        $171 = $170&1;
        if ($171) {
         label = 24;
         break L4;
        } else {
         $$0$i$i59 = $169;
        }
       } else {
        $172 = (($162) + 4|0);
        HEAP32[$161>>2] = $172;
        $173 = HEAP32[$162>>2]|0;
        $$0$i$i59 = $173;
       }
       __THREW__ = 0;
       invoke_vii(57,($__spaces|0),($$0$i$i59|0));
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 24;
        break L4;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47454;$126 = $933;
       }
      }
     }
    } while(0);
    $832 = (($__p$0377) + 1)|0;
    $833 = ($832>>>0)<(4);
    if ($833) {
     $922 = $931;$923 = $930;$924 = $929;$925 = $928;$__p$0377 = $832;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
    } else {
     $$lcssa313 = $929;$$lcssa330 = $930;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
     label = 322;
     break;
    }
   }
   L418: do {
    if ((label|0) == 20) {
     $52 = ___cxa_find_matching_catch(-1,-1)|0;
     $53 = tempRet0;
     $67 = $$ph$ph;$free232 = $free232$ph$ph;$lpad$phi$index = $52;$lpad$phi$index8 = $53;
     break L1;
    }
    else if ((label|0) == 21) {
     $54 = ___cxa_find_matching_catch(-1,-1)|0;
     $55 = tempRet0;
     $67 = $932;$free232 = $free230;$lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
    }
    else if ((label|0) == 22) {
     $56 = ___cxa_find_matching_catch(-1,-1)|0;
     $57 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
    }
    else if ((label|0) == 23) {
     $58 = ___cxa_find_matching_catch(-1,-1)|0;
     $59 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
    }
    else if ((label|0) == 24) {
     $60 = ___cxa_find_matching_catch(-1,-1)|0;
     $61 = tempRet0;
     $67 = $924;$free232 = $free228372;$lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
    }
    else if ((label|0) == 25) {
     $62 = ___cxa_find_matching_catch(-1,-1)|0;
     $63 = tempRet0;
     $67 = $$ph$ph251$ph$ph$ph$ph$ph;$free232 = $free232$ph$ph250$ph$ph$ph$ph$ph;$lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
    }
    else if ((label|0) == 41) {
     $107 = HEAP32[$__err>>2]|0;
     $108 = $107 | 4;
     HEAP32[$__err>>2] = $108;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 134) {
     $351 = HEAP32[$__err>>2]|0;
     $352 = $351 | 4;
     HEAP32[$__err>>2] = $352;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 193) {
     $508 = HEAP32[$__err>>2]|0;
     $509 = $508 | 4;
     HEAP32[$__err>>2] = $509;
     $$0 = 0;$917 = $924;$free234 = $free228372;
    }
    else if ((label|0) == 224) {
     $580 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $581 = tempRet0;
     ___clang_call_terminate($580);
     // unreachable;
    }
    else if ((label|0) == 274) {
     $703 = HEAP32[$__err>>2]|0;
     $704 = $703 | 4;
     HEAP32[$__err>>2] = $704;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 298) {
     $767 = HEAP32[$__err>>2]|0;
     $768 = $767 | 4;
     HEAP32[$__err>>2] = $768;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 309) {
     $790 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $791 = tempRet0;
     ___clang_call_terminate($790);
     // unreachable;
    }
    else if ((label|0) == 320) {
     $830 = HEAP32[$__err>>2]|0;
     $831 = $830 | 4;
     HEAP32[$__err>>2] = $831;
     $$0 = 0;$917 = $932;$free234 = $free230;
    }
    else if ((label|0) == 322) {
     $834 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L425: do {
      if (!($834)) {
       $835 = (($__trailing_sign$0$lcssa) + 4|0);
       $836 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L427: while(1) {
        $837 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $838 = $837 & 1;
        $839 = ($838<<24>>24)==(0);
        if ($839) {
         $841 = $837&255;
         $842 = $841 >>> 1;
         $844 = $842;
        } else {
         $840 = HEAP32[$835>>2]|0;
         $844 = $840;
        }
        $843 = ($__i$0>>>0)<($844>>>0);
        if (!($843)) {
         break L425;
        }
        $845 = HEAP32[$__b>>2]|0;
        $846 = ($845|0)==(0|0);
        do {
         if ($846) {
          $953 = 1;
         } else {
          $847 = (($845) + 12|0);
          $848 = HEAP32[$847>>2]|0;
          $849 = (($845) + 16|0);
          $850 = HEAP32[$849>>2]|0;
          $851 = ($848|0)==($850|0);
          if ($851) {
           $852 = HEAP32[$845>>2]|0;
           $853 = (($852) + 36|0);
           $854 = HEAP32[$853>>2]|0;
           __THREW__ = 0;
           $855 = (invoke_ii($854|0,($845|0))|0);
           $856 = __THREW__; __THREW__ = 0;
           $857 = $856&1;
           if ($857) {
            label = 19;
            break L427;
           } else {
            $$0$i$i$i$i = $855;
           }
          } else {
           $858 = HEAP32[$848>>2]|0;
           $$0$i$i$i$i = $858;
          }
          $859 = ($$0$i$i$i$i|0)==(-1);
          if ($859) {
           HEAP32[$__b>>2] = 0;
           $953 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $953 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $860 = HEAP32[$__e>>2]|0;
        $861 = ($860|0)==(0|0);
        do {
         if ($861) {
          label = 341;
         } else {
          $862 = (($860) + 12|0);
          $863 = HEAP32[$862>>2]|0;
          $864 = (($860) + 16|0);
          $865 = HEAP32[$864>>2]|0;
          $866 = ($863|0)==($865|0);
          if ($866) {
           $867 = HEAP32[$860>>2]|0;
           $868 = (($867) + 36|0);
           $869 = HEAP32[$868>>2]|0;
           __THREW__ = 0;
           $870 = (invoke_ii($869|0,($860|0))|0);
           $871 = __THREW__; __THREW__ = 0;
           $872 = $871&1;
           if ($872) {
            label = 19;
            break L427;
           } else {
            $$0$i$i1$i$i = $870;
           }
          } else {
           $873 = HEAP32[$863>>2]|0;
           $$0$i$i1$i$i = $873;
          }
          $874 = ($$0$i$i1$i$i|0)==(-1);
          if ($874) {
           HEAP32[$__e>>2] = 0;
           label = 341;
           break;
          } else {
           if ($953) {
            break;
           } else {
            label = 349;
            break L427;
           }
          }
         }
        } while(0);
        if ((label|0) == 341) {
         label = 0;
         if ($953) {
          label = 349;
          break;
         }
        }
        $875 = HEAP32[$__b>>2]|0;
        $876 = (($875) + 12|0);
        $877 = HEAP32[$876>>2]|0;
        $878 = (($875) + 16|0);
        $879 = HEAP32[$878>>2]|0;
        $880 = ($877|0)==($879|0);
        if ($880) {
         $881 = HEAP32[$875>>2]|0;
         $882 = (($881) + 36|0);
         $883 = HEAP32[$882>>2]|0;
         __THREW__ = 0;
         $884 = (invoke_ii($883|0,($875|0))|0);
         $885 = __THREW__; __THREW__ = 0;
         $886 = $885&1;
         if ($886) {
          label = 19;
          break;
         } else {
          $$0$i$i = $884;
         }
        } else {
         $887 = HEAP32[$877>>2]|0;
         $$0$i$i = $887;
        }
        $888 = HEAP8[$__trailing_sign$0$lcssa]|0;
        $889 = $888 & 1;
        $890 = ($889<<24>>24)==(0);
        if ($890) {
         $893 = $835;
        } else {
         $891 = HEAP32[$836>>2]|0;
         $893 = $891;
        }
        $892 = (($893) + ($__i$0<<2)|0);
        $894 = HEAP32[$892>>2]|0;
        $895 = ($$0$i$i|0)==($894|0);
        if (!($895)) {
         label = 349;
         break;
        }
        $898 = (($__i$0) + 1)|0;
        $899 = HEAP32[$__b>>2]|0;
        $900 = (($899) + 12|0);
        $901 = HEAP32[$900>>2]|0;
        $902 = (($899) + 16|0);
        $903 = HEAP32[$902>>2]|0;
        $904 = ($901|0)==($903|0);
        if ($904) {
         $905 = HEAP32[$899>>2]|0;
         $906 = (($905) + 40|0);
         $907 = HEAP32[$906>>2]|0;
         __THREW__ = 0;
         (invoke_ii($907|0,($899|0))|0);
         $908 = __THREW__; __THREW__ = 0;
         $909 = $908&1;
         if ($909) {
          label = 19;
          break;
         } else {
          $__i$0 = $898;
          continue;
         }
        } else {
         $910 = (($901) + 4|0);
         HEAP32[$900>>2] = $910;
         $__i$0 = $898;
         continue;
        }
       }
       if ((label|0) == 19) {
        $50 = ___cxa_find_matching_catch(-1,-1)|0;
        $51 = tempRet0;
        $67 = $$lcssa313;$free232 = $free228$lcssa;$lpad$phi$index = $50;$lpad$phi$index8 = $51;
        break L1;
       }
       else if ((label|0) == 349) {
        $896 = HEAP32[$__err>>2]|0;
        $897 = $896 | 4;
        HEAP32[$__err>>2] = $897;
        $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
        break L418;
       }
      }
     } while(0);
     $911 = ($$lcssa313|0)==($$lcssa330|0);
     if ($911) {
      $$0 = 1;$917 = $$lcssa330;$free234 = $free228$lcssa;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
      $912 = HEAP32[$__et>>2]|0;
      $913 = ($912|0)==(0);
      if ($913) {
       $$0 = 1;$917 = $$lcssa313;$free234 = $free228$lcssa;
      } else {
       $914 = HEAP32[$__err>>2]|0;
       $915 = $914 | 4;
       HEAP32[$__err>>2] = $915;
       $$0 = 0;$917 = $$lcssa313;$free234 = $free228$lcssa;
      }
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $916 = ($917|0)==(0|0);
   if ($916) {
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   invoke_vi($free234|0,($917|0));
   $918 = __THREW__; __THREW__ = 0;
   $919 = $918&1;
   if ($919) {
    $920 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $921 = tempRet0;
    ___clang_call_terminate($920);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $66 = ($67|0)==(0|0);
 if ($66) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi($free232|0,($67|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0116 = 0, $$0117 = 0, $$018 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i = sp;
 $__wbuf = sp + 32|0;
 $__wb = sp + 24|0;
 $__wn = sp + 436|0;
 $__loc = sp + 12|0;
 $__neg = sp + 440|0;
 $0 = sp + 432|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 136;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(53,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $52 = ___cxa_find_matching_catch(-1,-1)|0;
  $53 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0116 = $53;$$018 = $52;$115 = $__wbuf;
 } else {
  $5 = HEAP32[$__loc>>2]|0;
  $6 = HEAP32[6872>>2]|0;
  $7 = ($6|0)==(-1);
  if ($7) {
   label = 4;
  } else {
   HEAP32[$__p$i$i$i$i>>2] = 6872;
   $8 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$8>>2] = (132);
   $9 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$9>>2] = 0;
   __THREW__ = 0;
   invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    label = 4;
   }
  }
  L6: do {
   if ((label|0) == 4) {
    $12 = HEAP32[((6872 + 4|0))>>2]|0;
    $13 = (($12) + -1)|0;
    $14 = (($5) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($5) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $15;
    $19 = $17;
    $20 = (($18) - ($19))|0;
    $21 = $20 >> 2;
    $22 = ($21>>>0)>($13>>>0);
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      HEAP8[$__neg] = 0;
      $29 = HEAP32[$__e>>2]|0;
      HEAP32[$0>>2] = $29;
      $30 = (($__iob) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      $32 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($31|0),($__err|0),($__neg|0),($24|0),($__wb|0),($__wn|0),($2|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      if ($32) {
       $35 = HEAP8[$__v]|0;
       $36 = $35 & 1;
       $37 = ($36<<24>>24)==(0);
       if ($37) {
        $41 = (($__v) + 4|0);
        HEAP32[$41>>2] = 0;
        HEAP8[$__v] = 0;
       } else {
        $38 = (($__v) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP32[$39>>2] = 0;
        $40 = (($__v) + 4|0);
        HEAP32[$40>>2] = 0;
       }
       $42 = HEAP8[$__neg]|0;
       $43 = ($42<<24>>24)==(0);
       if (!($43)) {
        $44 = HEAP32[$24>>2]|0;
        $45 = (($44) + 44|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_iii($46|0,($24|0),45)|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        __THREW__ = 0;
        invoke_vii(57,($__v|0),($47|0));
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         break;
        }
       }
       $54 = HEAP32[$24>>2]|0;
       $55 = (($54) + 44|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_iii($56|0,($24|0),48)|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        break;
       }
       $60 = HEAP32[$__wb>>2]|0;
       $61 = HEAP32[$__wn>>2]|0;
       $62 = (($61) + -4|0);
       $63 = ($60>>>0)<($62>>>0);
       L23: do {
        if ($63) {
         $__w$09 = $60;
         while(1) {
          $66 = HEAP32[$__w$09>>2]|0;
          $67 = ($66|0)==($57|0);
          $65 = (($__w$09) + 4|0);
          if (!($67)) {
           $__w$0$lcssa = $__w$09;
           break L23;
          }
          $64 = ($65>>>0)<($62>>>0);
          if ($64) {
           $__w$09 = $65;
          } else {
           $__w$0$lcssa = $65;
           break;
          }
         }
        } else {
         $__w$0$lcssa = $60;
        }
       } while(0);
       __THREW__ = 0;
       (invoke_iiii(28,($__v|0),($__w$0$lcssa|0),($61|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
      }
      $70 = HEAP32[$__b>>2]|0;
      $71 = ($70|0)==(0|0);
      do {
       if ($71) {
        $120 = 1;
       } else {
        $72 = (($70) + 12|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (($70) + 16|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = ($73|0)==($75|0);
        if ($76) {
         $77 = HEAP32[$70>>2]|0;
         $78 = (($77) + 36|0);
         $79 = HEAP32[$78>>2]|0;
         __THREW__ = 0;
         $80 = (invoke_ii($79|0,($70|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          break L6;
         } else {
          $$0$i$i$i$i = $80;
         }
        } else {
         $83 = HEAP32[$73>>2]|0;
         $$0$i$i$i$i = $83;
        }
        $84 = ($$0$i$i$i$i|0)==(-1);
        if ($84) {
         HEAP32[$__b>>2] = 0;
         $120 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $120 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $85 = ($29|0)==(0|0);
      do {
       if ($85) {
        label = 35;
       } else {
        $86 = (($29) + 12|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = (($29) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ($87|0)==($89|0);
        if ($90) {
         $91 = HEAP32[$29>>2]|0;
         $92 = (($91) + 36|0);
         $93 = HEAP32[$92>>2]|0;
         __THREW__ = 0;
         $94 = (invoke_ii($93|0,($29|0))|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if ($96) {
          break L6;
         } else {
          $$0$i$i1$i$i = $94;
         }
        } else {
         $97 = HEAP32[$87>>2]|0;
         $$0$i$i1$i$i = $97;
        }
        $98 = ($$0$i$i1$i$i|0)==(-1);
        if ($98) {
         HEAP32[$__e>>2] = 0;
         label = 35;
         break;
        } else {
         if ($120) {
          break;
         } else {
          label = 37;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 35) {
       if ($120) {
        label = 37;
       }
      }
      if ((label|0) == 37) {
       $99 = HEAP32[$__err>>2]|0;
       $100 = $99 | 2;
       HEAP32[$__err>>2] = $100;
      }
      $101 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $101;
      $102 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($102)|0);
      $103 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       STACKTOP = sp;return;
      }
      $105 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($105|0,($103|0));
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $108 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $109 = tempRet0;
       ___clang_call_terminate($108);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
    $26 = (___cxa_allocate_exception(4)|0);
    __ZNSt8bad_castC2Ev($26);
    __THREW__ = 0;
    invoke_viii(9,($26|0),(14840|0),(112|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     // unreachable;
    }
   }
  } while(0);
  $110 = ___cxa_find_matching_catch(-1,-1)|0;
  $111 = tempRet0;
  $112 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($112)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $113 = ($$pre|0)==(0|0);
  if ($113) {
   $$0117 = $111;$$019 = $110;
   ___resumeException($$019|0);
   // unreachable;
  } else {
   $$0116 = $111;$$018 = $110;$115 = $$pre;
  }
 }
 $114 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($114|0,($115|0));
 $116 = __THREW__; __THREW__ = 0;
 $117 = $116&1;
 if ($117) {
  $118 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $119 = tempRet0;
  ___clang_call_terminate($118);
  // unreachable;
 } else {
  $$0117 = $$0116;$$019 = $$018;
  ___resumeException($$019|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($17) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($17) + ($13))|0;
 $39 = HEAP8[$this]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i6 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 28|0;
 $1 = sp + 68|0;
 $2 = sp + 56|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 80|0;
 $6 = sp + 84|0;
 $7 = sp + 96|0;
 $8 = sp + 108|0;
 $9 = sp + 120|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[6448>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i>>2] = 6448;
   $13 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$13>>2] = (132);
   $14 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6448,$__p$i$i$i$i,133);
  }
  $15 = HEAP32[((6448 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 4|0);
   HEAP32[$43>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$41>>2] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__nsn|0),0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   $46 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $47 = tempRet0;
   ___clang_call_terminate($46);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $48 = HEAP32[$27>>2]|0;
  $49 = (($48) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vii[$50 & 63]($2,$27);
  $51 = HEAP8[$__psn]|0;
  $52 = $51 & 1;
  $53 = ($52<<24>>24)==(0);
  if ($53) {
   $57 = (($__psn) + 4|0);
   HEAP32[$57>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $54 = (($__psn) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   HEAP32[$55>>2] = 0;
   $56 = (($__psn) + 4|0);
   HEAP32[$56>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__psn|0),0);
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $61 = tempRet0;
   ___clang_call_terminate($60);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (FUNCTION_TABLE_ii[$64 & 127]($27)|0);
  HEAP32[$__dp>>2] = $65;
  $66 = HEAP32[$27>>2]|0;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_ii[$68 & 127]($27)|0);
  HEAP32[$__ts>>2] = $69;
  $70 = HEAP32[$27>>2]|0;
  $71 = (($70) + 20|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 63]($3,$27);
  $73 = HEAP8[$__grp]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__grp) + 1|0);
   HEAP8[$79] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $76 = (($__grp) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77] = 0;
   $78 = (($__grp) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $84 = HEAP32[$27>>2]|0;
  $85 = (($84) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 63]($4,$27);
  $87 = HEAP8[$__sym]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = (($__sym) + 4|0);
   HEAP32[$93>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $90 = (($__sym) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$91>>2] = 0;
   $92 = (($__sym) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__sym|0),0);
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $98 = HEAP32[$27>>2]|0;
  $99 = (($98) + 36|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($27)|0);
  $storemerge = $101;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $102 = HEAP32[$__loc>>2]|0;
  $103 = HEAP32[6384>>2]|0;
  $104 = ($103|0)==(-1);
  if (!($104)) {
   HEAP32[$__p$i$i$i$i6>>2] = 6384;
   $105 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$105>>2] = (132);
   $106 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$106>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6384,$__p$i$i$i$i6,133);
  }
  $107 = HEAP32[((6384 + 4|0))>>2]|0;
  $108 = (($107) + -1)|0;
  $109 = (($102) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($102) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $110;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = $115 >> 2;
  $117 = ($116>>>0)>($108>>>0);
  if (!($117)) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(14840|0),(112|0));
   // unreachable;
  }
  $118 = (($112) + ($108<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)==(0|0);
  if ($120) {
   $121 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($121);
   ___cxa_throw(($121|0),(14840|0),(112|0));
   // unreachable;
  }
  $122 = HEAP32[$119>>2]|0;
  $123 = (($122) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  FUNCTION_TABLE_vii[$124 & 63]($5,$119);
  $125 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$125&255;HEAP8[$__pat+1|0]=($125>>8)&255;HEAP8[$__pat+2|0]=($125>>16)&255;HEAP8[$__pat+3|0]=$125>>24;
  $126 = HEAP32[$119>>2]|0;
  $127 = (($126) + 32|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 63]($6,$119);
  $129 = HEAP8[$__nsn]|0;
  $130 = $129 & 1;
  $131 = ($130<<24>>24)==(0);
  if ($131) {
   $135 = (($__nsn) + 4|0);
   HEAP32[$135>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $132 = (($__nsn) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[$133>>2] = 0;
   $134 = (($__nsn) + 4|0);
   HEAP32[$134>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__nsn|0),0);
  $136 = __THREW__; __THREW__ = 0;
  $137 = $136&1;
  if ($137) {
   $138 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $139 = tempRet0;
   ___clang_call_terminate($138);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $140 = HEAP32[$119>>2]|0;
  $141 = (($140) + 28|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 63]($7,$119);
  $143 = HEAP8[$__psn]|0;
  $144 = $143 & 1;
  $145 = ($144<<24>>24)==(0);
  if ($145) {
   $149 = (($__psn) + 4|0);
   HEAP32[$149>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $146 = (($__psn) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   HEAP32[$147>>2] = 0;
   $148 = (($__psn) + 4|0);
   HEAP32[$148>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__psn|0),0);
  $150 = __THREW__; __THREW__ = 0;
  $151 = $150&1;
  if ($151) {
   $152 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $153 = tempRet0;
   ___clang_call_terminate($152);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $154 = HEAP32[$119>>2]|0;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 127]($119)|0);
  HEAP32[$__dp>>2] = $157;
  $158 = HEAP32[$119>>2]|0;
  $159 = (($158) + 16|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($119)|0);
  HEAP32[$__ts>>2] = $161;
  $162 = HEAP32[$119>>2]|0;
  $163 = (($162) + 20|0);
  $164 = HEAP32[$163>>2]|0;
  FUNCTION_TABLE_vii[$164 & 63]($8,$119);
  $165 = HEAP8[$__grp]|0;
  $166 = $165 & 1;
  $167 = ($166<<24>>24)==(0);
  if ($167) {
   $171 = (($__grp) + 1|0);
   HEAP8[$171] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $168 = (($__grp) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   HEAP8[$169] = 0;
   $170 = (($__grp) + 4|0);
   HEAP32[$170>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $172 = __THREW__; __THREW__ = 0;
  $173 = $172&1;
  if ($173) {
   $174 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $175 = tempRet0;
   ___clang_call_terminate($174);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $176 = HEAP32[$119>>2]|0;
  $177 = (($176) + 24|0);
  $178 = HEAP32[$177>>2]|0;
  FUNCTION_TABLE_vii[$178 & 63]($9,$119);
  $179 = HEAP8[$__sym]|0;
  $180 = $179 & 1;
  $181 = ($180<<24>>24)==(0);
  if ($181) {
   $185 = (($__sym) + 4|0);
   HEAP32[$185>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $182 = (($__sym) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   HEAP32[$183>>2] = 0;
   $184 = (($__sym) + 4|0);
   HEAP32[$184>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__sym|0),0);
  $186 = __THREW__; __THREW__ = 0;
  $187 = $186&1;
  if ($187) {
   $188 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $189 = tempRet0;
   ___clang_call_terminate($188);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $190 = HEAP32[$119>>2]|0;
  $191 = (($190) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 127]($119)|0);
  $storemerge = $193;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $$byval_copy = sp + 96|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 100|0;
 $__bb = sp + 56|0;
 $__digits = sp + 200|0;
 $__loc = sp + 64|0;
 $__pat = sp + 68|0;
 $__dp = sp + 300|0;
 $__ts = sp + 404|0;
 $__grp = sp + 80|0;
 $__sym = sp + 32|0;
 $__sn = sp + 44|0;
 $__fd = sp + 76|0;
 $__mbuf = sp + 304|0;
 $__mi = sp + 72|0;
 $__me = sp + 92|0;
 $0 = sp + 60|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(6632|0),($vararg_buffer|0))|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[6776]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((6776|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((6776|0));
       $146 = 0;$147 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[6768>>2] = $7;
       ___cxa_guard_release((6776|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[6768>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(13,($__bb|0),($12|0),(6632|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $148 = 0;$149 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(4);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $148 = 0;$149 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $150 = $$pre;
    } else {
     $150 = $16;
    }
    $22 = (_malloc($13)|0);
    $23 = ($22|0)==(0|0);
    if ($23) {
     __THREW__ = 0;
     invoke_v(4);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      $148 = $150;$149 = 0;
      label = 11;
     } else {
      $138 = 0;$140 = $150;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $138 = $22;$140 = $150;$__db$0 = $22;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $138 = 0;$140 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(53,($__loc|0),($__iob|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $148 = $140;$149 = $138;
   label = 11;
  } else {
   $28 = HEAP32[$__loc>>2]|0;
   $29 = HEAP32[6880>>2]|0;
   $30 = ($29|0)==(-1);
   if ($30) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 6880;
    $31 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$31>>2] = (132);
    $32 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$32>>2] = 0;
    __THREW__ = 0;
    invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $35 = HEAP32[((6880 + 4|0))>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = (($28) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($28) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $38;
     $42 = $40;
     $43 = (($41) - ($42))|0;
     $44 = $43 >> 2;
     $45 = ($44>>>0)>($36>>>0);
     if ($45) {
      $46 = (($40) + ($36<<2)|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if (!($48)) {
       $52 = HEAP32[$__bb>>2]|0;
       $53 = (($52) + ($__n$0)|0);
       $54 = HEAP32[$47>>2]|0;
       $55 = (($54) + 32|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($56|0,($47|0),($52|0),($53|0),($__db$0|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        label = 45;
        break;
       }
       $59 = ($__n$0|0)==(0);
       if ($59) {
        $63 = 0;
       } else {
        $60 = HEAP32[$__bb>>2]|0;
        $61 = HEAP8[$60]|0;
        $62 = ($61<<24>>24)==(45);
        $63 = $62;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(3,($__intl|0),($63|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       do {
        if ($65) {
         $117 = ___cxa_find_matching_catch(-1,-1)|0;
         $118 = tempRet0;
         $$0 = $117;$$01 = $118;
        } else {
         $66 = HEAP32[$__fd>>2]|0;
         $67 = ($__n$0|0)>($66|0);
         if ($67) {
          $68 = (($__n$0) - ($66))|0;
          $69 = $68 << 1;
          $70 = HEAP8[$__sn]|0;
          $71 = $70 & 1;
          $72 = ($71<<24>>24)==(0);
          if ($72) {
           $75 = $70&255;
           $76 = $75 >>> 1;
           $86 = $76;
          } else {
           $73 = (($__sn) + 4|0);
           $74 = HEAP32[$73>>2]|0;
           $86 = $74;
          }
          $77 = HEAP8[$__sym]|0;
          $78 = $77 & 1;
          $79 = ($78<<24>>24)==(0);
          if ($79) {
           $82 = $77&255;
           $83 = $82 >>> 1;
           $88 = $83;
          } else {
           $80 = (($__sym) + 4|0);
           $81 = HEAP32[$80>>2]|0;
           $88 = $81;
          }
          $84 = $69 | 1;
          $85 = (($86) + ($84))|0;
          $87 = (($85) + ($88))|0;
          $$pn = $87;
         } else {
          $89 = HEAP8[$__sn]|0;
          $90 = $89 & 1;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           $94 = $89&255;
           $95 = $94 >>> 1;
           $104 = $95;
          } else {
           $92 = (($__sn) + 4|0);
           $93 = HEAP32[$92>>2]|0;
           $104 = $93;
          }
          $96 = HEAP8[$__sym]|0;
          $97 = $96 & 1;
          $98 = ($97<<24>>24)==(0);
          if ($98) {
           $101 = $96&255;
           $102 = $101 >>> 1;
           $106 = $102;
          } else {
           $99 = (($__sym) + 4|0);
           $100 = HEAP32[$99>>2]|0;
           $106 = $100;
          }
          $103 = (($104) + 2)|0;
          $105 = (($103) + ($106))|0;
          $$pn = $105;
         }
         $107 = (($$pn) + ($66))|0;
         $108 = ($107>>>0)>(100);
         if ($108) {
          $109 = (_malloc($107)|0);
          $110 = ($109|0)==(0|0);
          if ($110) {
           __THREW__ = 0;
           invoke_v(4);
           $111 = __THREW__; __THREW__ = 0;
           $112 = $111&1;
           if ($112) {
            $113 = ___cxa_find_matching_catch(-1,-1)|0;
            $114 = tempRet0;
            $$0 = $113;$$01 = $114;
            break;
           } else {
            $122 = 0;$__mb$0 = 0;
           }
          } else {
           $122 = $109;$__mb$0 = $109;
          }
         } else {
          $122 = 0;$__mb$0 = $__mbuf;
         }
         $123 = (($__iob) + 4|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = (($__db$0) + ($__n$0)|0);
         $126 = HEAP8[$__dp]|0;
         $127 = HEAP8[$__ts]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($124|0),($__db$0|0),($125|0),($47|0),($63|0),($__pat|0),($126|0),($127|0),($__grp|0),($__sym|0),($__sn|0),($66|0));
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if (!($129)) {
          $130 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $130;
          $131 = HEAP32[$__mi>>2]|0;
          $132 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(41,($agg$result|0),($$byval_copy|0),($__mb$0|0),($131|0),($132|0),($__iob|0),($__fl|0));
          $133 = __THREW__; __THREW__ = 0;
          $134 = $133&1;
          if (!($134)) {
           $135 = ($122|0)==(0|0);
           if (!($135)) {
            _free($122);
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $136 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($136)|0);
           $137 = ($138|0)==(0|0);
           if (!($137)) {
            _free($138);
           }
           $139 = ($140|0)==(0|0);
           if ($139) {
            STACKTOP = sp;return;
           }
           _free($140);
           STACKTOP = sp;return;
          }
         }
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $121 = ($122|0)==(0|0);
         if ($121) {
          $$0 = $119;$$01 = $120;
         } else {
          _free($122);
          $$0 = $119;$$01 = $120;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $49 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($49);
     __THREW__ = 0;
     invoke_viii(9,($49|0),(14840|0),(112|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $115 = ___cxa_find_matching_catch(-1,-1)|0;
    $116 = tempRet0;
    $$1 = $115;$$12 = $116;
   }
   $141 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($141)|0);
   $$2 = $$1;$$23 = $$12;$143 = $138;$145 = $140;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $146 = $148;$147 = $149;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$143 = $147;$145 = $146;
 }
 $142 = ($143|0)==(0|0);
 if (!($142)) {
  _free($143);
 }
 $144 = ($145|0)==(0|0);
 if ($144) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($145);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i10 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 56|0;
 $1 = sp + 72|0;
 $2 = sp + 28|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 60|0;
 $6 = sp + 84|0;
 $7 = sp + 88|0;
 $8 = sp + 100|0;
 $9 = sp + 104|0;
 $10 = sp + 116|0;
 $11 = sp + 128|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[6320>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 6320;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (132);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6320,$__p$i$i$i$i,133);
  }
  $17 = HEAP32[((6320 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 63]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 63]($1,$29);
    $39 = HEAP8[$__sn]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 1|0);
     HEAP8[$45] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP8[$43] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(56,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 63]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat]=$52&255;HEAP8[$__pat+1|0]=($52>>8)&255;HEAP8[$__pat+2|0]=($52>>16)&255;HEAP8[$__pat+3|0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 63]($3,$29);
    $56 = HEAP8[$__sn]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 1|0);
     HEAP8[$62] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP8[$60] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(56,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 127]($29)|0);
  HEAP8[$__dp] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 127]($29)|0);
  HEAP8[$__ts] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 63]($4,$29);
  $78 = HEAP8[$__grp]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 63]($5,$29);
  $92 = HEAP8[$__sym]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 1|0);
   HEAP8[$98] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP8[$96] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 127]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[6256>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i10>>2] = 6256;
   $109 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$109>>2] = (132);
   $110 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6256,$__p$i$i$i$i10,133);
  }
  $111 = HEAP32[((6256 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(14840|0),(112|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(14840|0),(112|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 63]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat]=$129&255;HEAP8[$__pat+1|0]=($129>>8)&255;HEAP8[$__pat+2|0]=($129>>16)&255;HEAP8[$__pat+3|0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 63]($7,$123);
    $133 = HEAP8[$__sn]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 1|0);
     HEAP8[$139] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP8[$137] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(56,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 63]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat]=$146&255;HEAP8[$__pat+1|0]=($146>>8)&255;HEAP8[$__pat+2|0]=($146>>16)&255;HEAP8[$__pat+3|0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 63]($9,$123);
    $150 = HEAP8[$__sn]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 1|0);
     HEAP8[$156] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP8[$154] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(56,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 127]($123)|0);
  HEAP8[$__dp] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($123)|0);
  HEAP8[$__ts] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 63]($10,$123);
  $172 = HEAP8[$__grp]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 63]($11,$123);
  $186 = HEAP8[$__sym]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 1|0);
   HEAP8[$192] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP8[$190] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 127]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0;
 var $__f$033 = 0, $__f$139 = 0, $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$050) + 1|0);
   $$$0 = $__neg ? $62 : $$050;
   $63 = ($$$0>>>0)<($__de>>>0);
   L5: do {
    if ($63) {
     $__d$029 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$029]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L5;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$029) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$029;
       break L5;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$029 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($74)|0);
     $scevgep59 = $scevgep;
     $75 = ($scevgep59>>>0)<($13>>>0);
     $umax = $75 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $79 = $61;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $76 = (($__d$132) + -1|0);
      $77 = HEAP8[$76]|0;
      $78 = (($79) + 1|0);
      HEAP32[$__me>>2] = $78;
      HEAP8[$79] = $77;
      $80 = (($__f$033) + -1)|0;
      $81 = ($76>>>0)>($$$0>>>0);
      $82 = ($80|0)>(0);
      $or$cond = $81 & $82;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $79 = $$pre;$__d$132 = $76;$__f$033 = $80;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($82) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $90 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 28|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 31]($__ct,48)|0);
     $90 = $86;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $87 = ($__f$0$lcssa71|0)>(0);
    $88 = HEAP32[$__me>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__me>>2] = $89;
    if ($87) {
     $91 = $88;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$91] = $90;
      $92 = (($__f$139) + -1)|0;
      $93 = ($92|0)>(0);
      $94 = HEAP32[$__me>>2]|0;
      $95 = (($94) + 1|0);
      HEAP32[$__me>>2] = $95;
      if ($93) {
       $91 = $94;$__f$139 = $92;
      } else {
       $$lcssa38 = $94;
       break;
      }
     }
    } else {
     $$lcssa38 = $88;
    }
    HEAP8[$$lcssa38] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $96 = ($__d$2|0)==($$$0|0);
   if ($96) {
    $97 = HEAP32[$__ct>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (FUNCTION_TABLE_iii[$99 & 31]($__ct,48)|0);
    $101 = HEAP32[$__me>>2]|0;
    $102 = (($101) + 1|0);
    HEAP32[$__me>>2] = $102;
    HEAP8[$101] = $100;
   } else {
    $103 = HEAP8[$__grp]|0;
    $104 = $103 & 1;
    $105 = ($104<<24>>24)==(0);
    if ($105) {
     $107 = $103&255;
     $108 = $107 >>> 1;
     $110 = $108;
    } else {
     $106 = HEAP32[$11>>2]|0;
     $110 = $106;
    }
    $109 = ($110|0)==(0);
    if ($109) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($105) {
      $113 = $9;
     } else {
      $111 = HEAP32[$10>>2]|0;
      $113 = $111;
     }
     $112 = HEAP8[$113]|0;
     $114 = $112 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $114;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $115 = ($__ng$044|0)==($__gl$046|0);
     if ($115) {
      $116 = HEAP32[$__me>>2]|0;
      $117 = (($116) + 1|0);
      HEAP32[$__me>>2] = $117;
      HEAP8[$116] = $__ts;
      $118 = (($__ig$045) + 1)|0;
      $119 = HEAP8[$__grp]|0;
      $120 = $119 & 1;
      $121 = ($120<<24>>24)==(0);
      if ($121) {
       $123 = $119&255;
       $124 = $123 >>> 1;
       $126 = $124;
      } else {
       $122 = HEAP32[$11>>2]|0;
       $126 = $122;
      }
      $125 = ($118>>>0)<($126>>>0);
      if ($125) {
       if ($121) {
        $129 = $9;
       } else {
        $127 = HEAP32[$10>>2]|0;
        $129 = $127;
       }
       $128 = (($129) + ($118)|0);
       $130 = HEAP8[$128]|0;
       $131 = ($130<<24>>24)==(127);
       if ($131) {
        $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
       } else {
        if ($121) {
         $134 = $9;
        } else {
         $132 = HEAP32[$10>>2]|0;
         $134 = $132;
        }
        $133 = (($134) + ($118)|0);
        $135 = HEAP8[$133]|0;
        $136 = $135 << 24 >> 24;
        $__gl$1 = $136;$__ig$1 = $118;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $118;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $137 = (($__d$343) + -1|0);
     $138 = HEAP8[$137]|0;
     $139 = HEAP32[$__me>>2]|0;
     $140 = (($139) + 1|0);
     HEAP32[$__me>>2] = $140;
     HEAP8[$139] = $138;
     $141 = (($__ng$1) + 1)|0;
     $142 = ($137|0)==($$$0|0);
     if ($142) {
      break;
     } else {
      $__d$343 = $137;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $141;
     }
    }
   }
   $143 = HEAP32[$__me>>2]|0;
   $144 = ($61|0)==($143|0);
   if ($144) {
    $$2 = $$$0;
   } else {
    $145 = (($143) + -1|0);
    $146 = ($145>>>0)>($61>>>0);
    if ($146) {
     $$012$i$i = $61;$149 = $145;
     while(1) {
      $147 = HEAP8[$$012$i$i]|0;
      $148 = HEAP8[$149]|0;
      HEAP8[$$012$i$i] = $148;
      HEAP8[$149] = $147;
      $150 = (($$012$i$i) + 1|0);
      $151 = (($149) + -1|0);
      $152 = ($150>>>0)<($151>>>0);
      if ($152) {
       $$012$i$i = $150;$149 = $151;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 31]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23] = $22;
   $$2 = $$050;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57]|0;
      HEAP8[$$01$i$i15] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i15) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i17 = $59;
       break;
      } else {
       $$01$i$i15 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36] = $34;
    $$2 = $$050;
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $153 = (($__p$049) + 1)|0;
  $exitcond = ($153|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $153;
  }
 }
 $154 = HEAP8[$__sn]|0;
 $155 = $154 & 1;
 $156 = ($155<<24>>24)==(0);
 if ($156) {
  $158 = $154&255;
  $159 = $158 >>> 1;
  $161 = $159;
 } else {
  $157 = HEAP32[$2>>2]|0;
  $161 = $157;
 }
 $160 = ($161>>>0)>(1);
 if ($160) {
  if ($156) {
   $164 = $154&255;
   $165 = $164 >>> 1;
   $$pn = $0;$168 = $0;$169 = $165;
  } else {
   $162 = HEAP32[$1>>2]|0;
   $163 = HEAP32[$2>>2]|0;
   $$pn = $162;$168 = $162;$169 = $163;
  }
  $166 = (($$pn) + 1|0);
  $167 = (($168) + ($169)|0);
  $170 = HEAP32[$__me>>2]|0;
  $171 = ($166|0)==($167|0);
  if ($171) {
   $$0$lcssa$i$i = $170;
  } else {
   $$01$i$i = $170;$173 = $166;
   while(1) {
    $172 = HEAP8[$173]|0;
    HEAP8[$$01$i$i] = $172;
    $174 = (($173) + 1|0);
    $175 = (($$01$i$i) + 1|0);
    $176 = ($174|0)==($167|0);
    if ($176) {
     $$0$lcssa$i$i = $175;
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $177 = $__flags & 176;
 if ((($177|0) == 32)) {
  $178 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $178;
  STACKTOP = sp;return;
 } else if ((($177|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $$byval_copy = sp + 44|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 36|0;
 $__pat = sp + 40|0;
 $__dp = sp + 76|0;
 $__ts = sp + 77|0;
 $__grp = sp + 20|0;
 $__sym = sp + 64|0;
 $__sn = sp + 48|0;
 $__fd = sp + 16|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 12|0;
 $__me = sp + 60|0;
 $0 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[6880>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6880;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (132);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6880|0),($__p$i$i$i$i|0),(133|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((6880 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 1|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP8[$38]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 28|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37<<24>>24)==($42<<24>>24);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(3,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $113 = ___cxa_find_matching_catch(-1,-1)|0;
       $114 = tempRet0;
       $$0 = $113;$$01 = $114;
      } else {
       $49 = HEAP8[$__digits]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = (_malloc($103)|0);
         $106 = ($105|0)==(0|0);
         if ($106) {
          __THREW__ = 0;
          invoke_v(4);
          $107 = __THREW__; __THREW__ = 0;
          $108 = $107&1;
          if ($108) {
           $109 = ___cxa_find_matching_catch(-1,-1)|0;
           $110 = tempRet0;
           $$0 = $109;$$01 = $110;
           break L20;
          } else {
           $$pre = HEAP8[$__digits]|0;
           $118 = 0;$122 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $118 = $105;$122 = $49;$__mb$0 = $105;
         }
        } else {
         $118 = 0;$122 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $119 = (($__iob) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $122 & 1;
       $123 = ($121<<24>>24)==(0);
       if ($123) {
        $128 = (($__digits) + 1|0);
        $129 = $122&255;
        $130 = $129 >>> 1;
        $132 = $128;$133 = $130;
       } else {
        $124 = (($__digits) + 8|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($__digits) + 4|0);
        $127 = HEAP32[$126>>2]|0;
        $132 = $125;$133 = $127;
       }
       $131 = (($132) + ($133)|0);
       $134 = HEAP8[$__dp]|0;
       $135 = HEAP8[$__ts]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($120|0),($132|0),($131|0),($20|0),($46|0),($__pat|0),($134|0),($135|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = $136&1;
       if (!($137)) {
        $138 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $138;
        $139 = HEAP32[$__mi>>2]|0;
        $140 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(41,($agg$result|0),($$byval_copy|0),($__mb$0|0),($139|0),($140|0),($__iob|0),($__fl|0));
        $141 = __THREW__; __THREW__ = 0;
        $142 = $141&1;
        if (!($142)) {
         $143 = ($118|0)==(0|0);
         if ($143) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $144 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
          STACKTOP = sp;return;
         }
         _free($118);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $144 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($144)|0);
         STACKTOP = sp;return;
        }
       }
       $115 = ___cxa_find_matching_catch(-1,-1)|0;
       $116 = tempRet0;
       $117 = ($118|0)==(0|0);
       if ($117) {
        $$0 = $115;$$01 = $116;
       } else {
        _free($118);
        $$0 = $115;$$01 = $116;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $145 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(9,($22|0),(14840|0),(112|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $111 = ___cxa_find_matching_catch(-1,-1)|0;
 $112 = tempRet0;
 $$1 = $111;$$12 = $112;
 $145 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $$byval_copy = sp + 444|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__p$i$i$i$i = sp;
 $__buf = sp + 912|0;
 $__bb = sp + 32|0;
 $__digits = sp + 40|0;
 $__loc = sp + 452|0;
 $__pat = sp + 904|0;
 $__dp = sp + 908|0;
 $__ts = sp + 460|0;
 $__grp = sp + 464|0;
 $__sym = sp + 476|0;
 $__sn = sp + 488|0;
 $__fd = sp + 500|0;
 $__mbuf = sp + 504|0;
 $__mi = sp + 456|0;
 $__me = sp + 448|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(6632|0),($vararg_buffer|0))|0);
 $2 = ($1>>>0)>(99);
 L1: do {
  if ($2) {
   $3 = HEAP8[6776]|0;
   $4 = ($3<<24>>24)==(0);
   do {
    if ($4) {
     $5 = (___cxa_guard_acquire((6776|0))|0);
     $6 = ($5|0)==(0);
     if (!($6)) {
      __THREW__ = 0;
      $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       $10 = ___cxa_find_matching_catch(-1,-1)|0;
       $11 = tempRet0;
       ___cxa_guard_abort((6776|0));
       $148 = 0;$149 = 0;$eh$lpad$body$index2Z2D = $11;$eh$lpad$body$indexZ2D = $10;
       label = 12;
       break L1;
      } else {
       HEAP32[6768>>2] = $7;
       ___cxa_guard_release((6776|0));
       break;
      }
     }
    }
   } while(0);
   $12 = HEAP32[6768>>2]|0;
   __THREW__ = 0;
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer6>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer6+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $13 = (invoke_iiiii(13,($__bb|0),($12|0),(6632|0),($vararg_buffer6|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $150 = 0;$151 = 0;
    label = 11;
   } else {
    $16 = HEAP32[$__bb>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     __THREW__ = 0;
     invoke_v(4);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $150 = 0;$151 = 0;
      label = 11;
      break;
     }
     $$pre = HEAP32[$__bb>>2]|0;
     $152 = $$pre;
    } else {
     $152 = $16;
    }
    $22 = $13 << 2;
    $23 = (_malloc($22)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     __THREW__ = 0;
     invoke_v(4);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $150 = $152;$151 = 0;
      label = 11;
     } else {
      $140 = 0;$142 = $152;$__db$0 = 0;$__n$0 = $13;
      label = 15;
     }
    } else {
     $140 = $23;$142 = $152;$__db$0 = $23;$__n$0 = $13;
     label = 15;
    }
   }
  } else {
   $140 = 0;$142 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  __THREW__ = 0;
  invoke_vii(53,($__loc|0),($__iob|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   $150 = $142;$151 = $140;
   label = 11;
  } else {
   $29 = HEAP32[$__loc>>2]|0;
   $30 = HEAP32[6872>>2]|0;
   $31 = ($30|0)==(-1);
   if ($31) {
    label = 18;
   } else {
    HEAP32[$__p$i$i$i$i>>2] = 6872;
    $32 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$32>>2] = (132);
    $33 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$33>>2] = 0;
    __THREW__ = 0;
    invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     label = 45;
    } else {
     label = 18;
    }
   }
   do {
    if ((label|0) == 18) {
     $36 = HEAP32[((6872 + 4|0))>>2]|0;
     $37 = (($36) + -1)|0;
     $38 = (($29) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($29) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $39;
     $43 = $41;
     $44 = (($42) - ($43))|0;
     $45 = $44 >> 2;
     $46 = ($45>>>0)>($37>>>0);
     if ($46) {
      $47 = (($41) + ($37<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $53 = HEAP32[$__bb>>2]|0;
       $54 = (($53) + ($__n$0)|0);
       $55 = HEAP32[$48>>2]|0;
       $56 = (($55) + 48|0);
       $57 = HEAP32[$56>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($57|0,($48|0),($53|0),($54|0),($__db$0|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 45;
        break;
       }
       $60 = ($__n$0|0)==(0);
       if ($60) {
        $64 = 0;
       } else {
        $61 = HEAP32[$__bb>>2]|0;
        $62 = HEAP8[$61]|0;
        $63 = ($62<<24>>24)==(45);
        $64 = $63;
       }
       HEAP32[$__pat>>2] = 0;
       ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
       ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
       ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(4,($__intl|0),($64|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $65 = __THREW__; __THREW__ = 0;
       $66 = $65&1;
       do {
        if ($66) {
         $119 = ___cxa_find_matching_catch(-1,-1)|0;
         $120 = tempRet0;
         $$0 = $119;$$01 = $120;
        } else {
         $67 = HEAP32[$__fd>>2]|0;
         $68 = ($__n$0|0)>($67|0);
         if ($68) {
          $69 = (($__n$0) - ($67))|0;
          $70 = $69 << 1;
          $71 = HEAP8[$__sn]|0;
          $72 = $71 & 1;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $76 = $71&255;
           $77 = $76 >>> 1;
           $87 = $77;
          } else {
           $74 = (($__sn) + 4|0);
           $75 = HEAP32[$74>>2]|0;
           $87 = $75;
          }
          $78 = HEAP8[$__sym]|0;
          $79 = $78 & 1;
          $80 = ($79<<24>>24)==(0);
          if ($80) {
           $83 = $78&255;
           $84 = $83 >>> 1;
           $89 = $84;
          } else {
           $81 = (($__sym) + 4|0);
           $82 = HEAP32[$81>>2]|0;
           $89 = $82;
          }
          $85 = $70 | 1;
          $86 = (($87) + ($85))|0;
          $88 = (($86) + ($89))|0;
          $$pn = $88;
         } else {
          $90 = HEAP8[$__sn]|0;
          $91 = $90 & 1;
          $92 = ($91<<24>>24)==(0);
          if ($92) {
           $95 = $90&255;
           $96 = $95 >>> 1;
           $105 = $96;
          } else {
           $93 = (($__sn) + 4|0);
           $94 = HEAP32[$93>>2]|0;
           $105 = $94;
          }
          $97 = HEAP8[$__sym]|0;
          $98 = $97 & 1;
          $99 = ($98<<24>>24)==(0);
          if ($99) {
           $102 = $97&255;
           $103 = $102 >>> 1;
           $107 = $103;
          } else {
           $100 = (($__sym) + 4|0);
           $101 = HEAP32[$100>>2]|0;
           $107 = $101;
          }
          $104 = (($105) + 2)|0;
          $106 = (($104) + ($107))|0;
          $$pn = $106;
         }
         $108 = (($$pn) + ($67))|0;
         $109 = ($108>>>0)>(100);
         if ($109) {
          $110 = $108 << 2;
          $111 = (_malloc($110)|0);
          $112 = ($111|0)==(0|0);
          if ($112) {
           __THREW__ = 0;
           invoke_v(4);
           $113 = __THREW__; __THREW__ = 0;
           $114 = $113&1;
           if ($114) {
            $115 = ___cxa_find_matching_catch(-1,-1)|0;
            $116 = tempRet0;
            $$0 = $115;$$01 = $116;
            break;
           } else {
            $124 = 0;$__mb$0 = 0;
           }
          } else {
           $124 = $111;$__mb$0 = $111;
          }
         } else {
          $124 = 0;$__mb$0 = $__mbuf;
         }
         $125 = (($__iob) + 4|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = (($__db$0) + ($__n$0<<2)|0);
         $128 = HEAP32[$__dp>>2]|0;
         $129 = HEAP32[$__ts>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($126|0),($__db$0|0),($127|0),($48|0),($64|0),($__pat|0),($128|0),($129|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if (!($131)) {
          $132 = HEAP32[$__s>>2]|0;
          HEAP32[$0>>2] = $132;
          $133 = HEAP32[$__mi>>2]|0;
          $134 = HEAP32[$__me>>2]|0;
          __THREW__ = 0;
          ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
          invoke_viiiiiii(44,($agg$result|0),($$byval_copy|0),($__mb$0|0),($133|0),($134|0),($__iob|0),($__fl|0));
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if (!($136)) {
           $137 = ($124|0)==(0|0);
           if (!($137)) {
            _free($124);
           }
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $138 = HEAP32[$__loc>>2]|0;
           (__ZNSt3__114__shared_count16__release_sharedEv($138)|0);
           $139 = ($140|0)==(0|0);
           if (!($139)) {
            _free($140);
           }
           $141 = ($142|0)==(0|0);
           if ($141) {
            STACKTOP = sp;return;
           }
           _free($142);
           STACKTOP = sp;return;
          }
         }
         $121 = ___cxa_find_matching_catch(-1,-1)|0;
         $122 = tempRet0;
         $123 = ($124|0)==(0|0);
         if ($123) {
          $$0 = $121;$$01 = $122;
         } else {
          _free($124);
          $$0 = $121;$$01 = $122;
         }
        }
       } while(0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break;
      }
     }
     $50 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($50);
     __THREW__ = 0;
     invoke_viii(9,($50|0),(14840|0),(112|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      label = 45;
     } else {
      // unreachable;
     }
    }
   } while(0);
   if ((label|0) == 45) {
    $117 = ___cxa_find_matching_catch(-1,-1)|0;
    $118 = tempRet0;
    $$1 = $117;$$12 = $118;
   }
   $143 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($143)|0);
   $$2 = $$1;$$23 = $$12;$145 = $140;$147 = $142;
  }
 }
 if ((label|0) == 11) {
  $20 = ___cxa_find_matching_catch(-1,-1)|0;
  $21 = tempRet0;
  $148 = $150;$149 = $151;$eh$lpad$body$index2Z2D = $21;$eh$lpad$body$indexZ2D = $20;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$145 = $149;$147 = $148;
 }
 $144 = ($145|0)==(0|0);
 if (!($144)) {
  _free($145);
 }
 $146 = ($147|0)==(0|0);
 if ($146) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($147);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $__p$i$i$i$i8 = sp + 16|0;
 $__p$i$i$i$i = sp;
 $0 = sp + 56|0;
 $1 = sp + 72|0;
 $2 = sp + 28|0;
 $3 = sp + 32|0;
 $4 = sp + 44|0;
 $5 = sp + 60|0;
 $6 = sp + 84|0;
 $7 = sp + 88|0;
 $8 = sp + 100|0;
 $9 = sp + 104|0;
 $10 = sp + 116|0;
 $11 = sp + 128|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[6448>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i>>2] = 6448;
   $15 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$15>>2] = (132);
   $16 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6448,$__p$i$i$i$i,133);
  }
  $17 = HEAP32[((6448 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  do {
   if ($__neg) {
    $33 = (($32) + 44|0);
    $34 = HEAP32[$33>>2]|0;
    FUNCTION_TABLE_vii[$34 & 63]($0,$29);
    $35 = HEAP32[$0>>2]|0;
    HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
    $36 = HEAP32[$29>>2]|0;
    $37 = (($36) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    FUNCTION_TABLE_vii[$38 & 63]($1,$29);
    $39 = HEAP8[$__sn]|0;
    $40 = $39 & 1;
    $41 = ($40<<24>>24)==(0);
    if ($41) {
     $45 = (($__sn) + 4|0);
     HEAP32[$45>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $42 = (($__sn) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = 0;
     $44 = (($__sn) + 4|0);
     HEAP32[$44>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(58,($__sn|0),0);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $49 = tempRet0;
     ___clang_call_terminate($48);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $50 = (($32) + 40|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vii[$51 & 63]($2,$29);
    $52 = HEAP32[$2>>2]|0;
    HEAP8[$__pat]=$52&255;HEAP8[$__pat+1|0]=($52>>8)&255;HEAP8[$__pat+2|0]=($52>>16)&255;HEAP8[$__pat+3|0]=$52>>24;
    $53 = HEAP32[$29>>2]|0;
    $54 = (($53) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    FUNCTION_TABLE_vii[$55 & 63]($3,$29);
    $56 = HEAP8[$__sn]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $62 = (($__sn) + 4|0);
     HEAP32[$62>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $59 = (($__sn) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     HEAP32[$60>>2] = 0;
     $61 = (($__sn) + 4|0);
     HEAP32[$61>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(58,($__sn|0),0);
    $63 = __THREW__; __THREW__ = 0;
    $64 = $63&1;
    if ($64) {
     $65 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $66 = tempRet0;
     ___clang_call_terminate($65);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 12|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 127]($29)|0);
  HEAP32[$__dp>>2] = $70;
  $71 = HEAP32[$29>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 127]($29)|0);
  HEAP32[$__ts>>2] = $74;
  $75 = HEAP32[$29>>2]|0;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  FUNCTION_TABLE_vii[$77 & 63]($4,$29);
  $78 = HEAP8[$__grp]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $84 = (($__grp) + 1|0);
   HEAP8[$84] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $81 = (($__grp) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   HEAP8[$82] = 0;
   $83 = (($__grp) + 4|0);
   HEAP32[$83>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $85 = __THREW__; __THREW__ = 0;
  $86 = $85&1;
  if ($86) {
   $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $88 = tempRet0;
   ___clang_call_terminate($87);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $89 = HEAP32[$29>>2]|0;
  $90 = (($89) + 24|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 63]($5,$29);
  $92 = HEAP8[$__sym]|0;
  $93 = $92 & 1;
  $94 = ($93<<24>>24)==(0);
  if ($94) {
   $98 = (($__sym) + 4|0);
   HEAP32[$98>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $95 = (($__sym) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$96>>2] = 0;
   $97 = (($__sym) + 4|0);
   HEAP32[$97>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__sym|0),0);
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $102 = tempRet0;
   ___clang_call_terminate($101);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $103 = HEAP32[$29>>2]|0;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 127]($29)|0);
  $storemerge = $106;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $107 = HEAP32[6384>>2]|0;
  $108 = ($107|0)==(-1);
  if (!($108)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6384;
   $109 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$109>>2] = (132);
   $110 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$110>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6384,$__p$i$i$i$i8,133);
  }
  $111 = HEAP32[((6384 + 4|0))>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (($12) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($12) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $114;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = $119 >> 2;
  $121 = ($120>>>0)>($112>>>0);
  if (!($121)) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(14840|0),(112|0));
   // unreachable;
  }
  $122 = (($116) + ($112<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0|0);
  if ($124) {
   $125 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($125);
   ___cxa_throw(($125|0),(14840|0),(112|0));
   // unreachable;
  }
  $126 = HEAP32[$123>>2]|0;
  do {
   if ($__neg) {
    $127 = (($126) + 44|0);
    $128 = HEAP32[$127>>2]|0;
    FUNCTION_TABLE_vii[$128 & 63]($6,$123);
    $129 = HEAP32[$6>>2]|0;
    HEAP8[$__pat]=$129&255;HEAP8[$__pat+1|0]=($129>>8)&255;HEAP8[$__pat+2|0]=($129>>16)&255;HEAP8[$__pat+3|0]=$129>>24;
    $130 = HEAP32[$123>>2]|0;
    $131 = (($130) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    FUNCTION_TABLE_vii[$132 & 63]($7,$123);
    $133 = HEAP8[$__sn]|0;
    $134 = $133 & 1;
    $135 = ($134<<24>>24)==(0);
    if ($135) {
     $139 = (($__sn) + 4|0);
     HEAP32[$139>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $136 = (($__sn) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP32[$137>>2] = 0;
     $138 = (($__sn) + 4|0);
     HEAP32[$138>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(58,($__sn|0),0);
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $143 = tempRet0;
     ___clang_call_terminate($142);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $144 = (($126) + 40|0);
    $145 = HEAP32[$144>>2]|0;
    FUNCTION_TABLE_vii[$145 & 63]($8,$123);
    $146 = HEAP32[$8>>2]|0;
    HEAP8[$__pat]=$146&255;HEAP8[$__pat+1|0]=($146>>8)&255;HEAP8[$__pat+2|0]=($146>>16)&255;HEAP8[$__pat+3|0]=$146>>24;
    $147 = HEAP32[$123>>2]|0;
    $148 = (($147) + 28|0);
    $149 = HEAP32[$148>>2]|0;
    FUNCTION_TABLE_vii[$149 & 63]($9,$123);
    $150 = HEAP8[$__sn]|0;
    $151 = $150 & 1;
    $152 = ($151<<24>>24)==(0);
    if ($152) {
     $156 = (($__sn) + 4|0);
     HEAP32[$156>>2] = 0;
     HEAP8[$__sn] = 0;
    } else {
     $153 = (($__sn) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     HEAP32[$154>>2] = 0;
     $155 = (($__sn) + 4|0);
     HEAP32[$155>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(58,($__sn|0),0);
    $157 = __THREW__; __THREW__ = 0;
    $158 = $157&1;
    if ($158) {
     $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $160 = tempRet0;
     ___clang_call_terminate($159);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $161 = HEAP32[$123>>2]|0;
  $162 = (($161) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (FUNCTION_TABLE_ii[$163 & 127]($123)|0);
  HEAP32[$__dp>>2] = $164;
  $165 = HEAP32[$123>>2]|0;
  $166 = (($165) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($123)|0);
  HEAP32[$__ts>>2] = $168;
  $169 = HEAP32[$123>>2]|0;
  $170 = (($169) + 20|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 63]($10,$123);
  $172 = HEAP8[$__grp]|0;
  $173 = $172 & 1;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $178 = (($__grp) + 1|0);
   HEAP8[$178] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $175 = (($__grp) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP8[$176] = 0;
   $177 = (($__grp) + 4|0);
   HEAP32[$177>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(56,($__grp|0),0);
  $179 = __THREW__; __THREW__ = 0;
  $180 = $179&1;
  if ($180) {
   $181 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $182 = tempRet0;
   ___clang_call_terminate($181);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $183 = HEAP32[$123>>2]|0;
  $184 = (($183) + 24|0);
  $185 = HEAP32[$184>>2]|0;
  FUNCTION_TABLE_vii[$185 & 63]($11,$123);
  $186 = HEAP8[$__sym]|0;
  $187 = $186 & 1;
  $188 = ($187<<24>>24)==(0);
  if ($188) {
   $192 = (($__sym) + 4|0);
   HEAP32[$192>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $189 = (($__sym) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   HEAP32[$190>>2] = 0;
   $191 = (($__sym) + 4|0);
   HEAP32[$191>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(58,($__sym|0),0);
  $193 = __THREW__; __THREW__ = 0;
  $194 = $193&1;
  if ($194) {
   $195 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $196 = tempRet0;
   ___clang_call_terminate($195);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $197 = HEAP32[$123>>2]|0;
  $198 = (($197) + 36|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 127]($123)|0);
  $storemerge = $200;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $87$phi = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0;
 var $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0;
 var $scevgep70 = 0, $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$059) + 4|0);
   $$$0 = $__neg ? $61 : $$059;
   $62 = ($$$0>>>0)<($__de>>>0);
   L5: do {
    if ($62) {
     $__d$034 = $$$0;
     while(1) {
      $65 = HEAP32[$__d$034>>2]|0;
      $66 = HEAP32[$__ct>>2]|0;
      $67 = (($66) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_iiii[$68 & 31]($__ct,2048,$65)|0);
      $64 = (($__d$034) + 4|0);
      if (!($69)) {
       $__d$0$lcssa = $__d$034;
       break L5;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$034 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $70 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($70) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $71 = (($__d$137) + -4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($74) + 4|0);
      HEAP32[$74>>2] = $72;
      $75 = (($__f$038) + -1)|0;
      $76 = ($71>>>0)>($$$0>>>0);
      $77 = ($75|0)>(0);
      $or$cond = $76 & $77;
      if ($or$cond) {
       $74 = $73;$__d$137 = $71;$__f$038 = $75;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $73;
     if ($77) {
      $__d$1$lcssa79 = $71;$__f$0$lcssa77 = $75;
      label = 34;
     } else {
      $78 = HEAP32[$__me>>2]|0;
      $79 = (($78) + 4|0);
      HEAP32[$__me>>2] = $79;
      $$lcssa44 = $78;$__d$1$lcssa7880 = $71;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $80 = HEAP32[$__ct>>2]|0;
     $81 = (($80) + 44|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_iii[$82 & 31]($__ct,48)|0);
     $84 = ($__f$0$lcssa77|0)>(0);
     $85 = HEAP32[$__me>>2]|0;
     $86 = (($85) + 4|0);
     HEAP32[$__me>>2] = $86;
     if ($84) {
      $87 = $85;$91 = $86;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$87>>2] = $83;
       $88 = (($__f$145) + -1)|0;
       $89 = ($88|0)>(0);
       $90 = (($91) + 4|0);
       if ($89) {
        $87$phi = $91;$91 = $90;$__f$145 = $88;$87 = $87$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($85) + ($$sum75<<2)|0);
      $scevgep70 = (($85) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $85;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $92 = ($__d$2|0)==($$$0|0);
   if ($92) {
    $93 = HEAP32[$__ct>>2]|0;
    $94 = (($93) + 44|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_iii[$95 & 31]($__ct,48)|0);
    $97 = HEAP32[$__me>>2]|0;
    $98 = (($97) + 4|0);
    HEAP32[$__me>>2] = $98;
    HEAP32[$97>>2] = $96;
    $140 = $98;
   } else {
    $99 = HEAP8[$__grp]|0;
    $100 = $99 & 1;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     $103 = $99&255;
     $104 = $103 >>> 1;
     $106 = $104;
    } else {
     $102 = HEAP32[$9>>2]|0;
     $106 = $102;
    }
    $105 = ($106|0)==(0);
    if ($105) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($101) {
      $109 = $7;
     } else {
      $107 = HEAP32[$8>>2]|0;
      $109 = $107;
     }
     $108 = HEAP8[$109]|0;
     $110 = $108 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $110;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $111 = ($__ng$054|0)==($__gl$056|0);
     $112 = HEAP32[$__me>>2]|0;
     if ($111) {
      $113 = (($112) + 4|0);
      HEAP32[$__me>>2] = $113;
      HEAP32[$112>>2] = $__ts;
      $114 = (($__ig$055) + 1)|0;
      $115 = HEAP8[$__grp]|0;
      $116 = $115 & 1;
      $117 = ($116<<24>>24)==(0);
      if ($117) {
       $119 = $115&255;
       $120 = $119 >>> 1;
       $122 = $120;
      } else {
       $118 = HEAP32[$9>>2]|0;
       $122 = $118;
      }
      $121 = ($114>>>0)<($122>>>0);
      if ($121) {
       if ($117) {
        $125 = $7;
       } else {
        $123 = HEAP32[$8>>2]|0;
        $125 = $123;
       }
       $124 = (($125) + ($114)|0);
       $126 = HEAP8[$124]|0;
       $127 = ($126<<24>>24)==(127);
       if ($127) {
        $136 = $113;$__gl$1 = -1;$__ig$1 = $114;$__ng$1 = 0;
       } else {
        if ($117) {
         $130 = $7;
        } else {
         $128 = HEAP32[$8>>2]|0;
         $130 = $128;
        }
        $129 = (($130) + ($114)|0);
        $131 = HEAP8[$129]|0;
        $132 = $131 << 24 >> 24;
        $136 = $113;$__gl$1 = $132;$__ig$1 = $114;$__ng$1 = 0;
       }
      } else {
       $136 = $113;$__gl$1 = $__gl$056;$__ig$1 = $114;$__ng$1 = 0;
      }
     } else {
      $136 = $112;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $133 = (($__d$353) + -4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($136) + 4|0);
     HEAP32[$__me>>2] = $135;
     HEAP32[$136>>2] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      $140 = $135;
      break;
     } else {
      $__d$353 = $133;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $137;
     }
    }
   }
   $139 = ($60|0)==($140|0);
   if ($139) {
    $$2 = $$$0;
   } else {
    $141 = (($140) + -4|0);
    $142 = ($141>>>0)>($60>>>0);
    if ($142) {
     $$012$i$i = $60;$145 = $141;
     while(1) {
      $143 = HEAP32[$$012$i$i>>2]|0;
      $144 = HEAP32[$145>>2]|0;
      HEAP32[$$012$i$i>>2] = $144;
      HEAP32[$145>>2] = $143;
      $146 = (($$012$i$i) + 4|0);
      $147 = (($145) + -4|0);
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $$012$i$i = $146;$145 = $147;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 31]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $52 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($52)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $53 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$55 = $51;
     while(1) {
      $54 = HEAP32[$55>>2]|0;
      HEAP32[$$01$i$i19>>2] = $54;
      $56 = (($55) + 4|0);
      $57 = ($56|0)==($46|0);
      if ($57) {
       break;
      }
      $58 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $58;$55 = $56;
     }
     $59 = (($53) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($59<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $149 = (($__p$058) + 1)|0;
  $exitcond = ($149|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $149;
  }
 }
 $150 = HEAP8[$__sn]|0;
 $151 = $150 & 1;
 $152 = ($151<<24>>24)==(0);
 if ($152) {
  $154 = $150&255;
  $155 = $154 >>> 1;
  $157 = $155;
 } else {
  $153 = HEAP32[$0>>2]|0;
  $157 = $153;
 }
 $156 = ($157>>>0)>(1);
 if ($156) {
  if ($152) {
   $160 = $150&255;
   $161 = $160 >>> 1;
   $$pn = $0;$164 = $0;$165 = $161;
  } else {
   $158 = HEAP32[$1>>2]|0;
   $159 = HEAP32[$0>>2]|0;
   $$pn = $158;$164 = $158;$165 = $159;
  }
  $162 = (($$pn) + 4|0);
  $163 = (($164) + ($165<<2)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($162|0)==($163|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$promoted4$i$i = $162;
   $$sum = (($165) + -1)|0;
   $scevgep$i$i = (($164) + ($$sum<<2)|0);
   $168 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($168)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $169 = $uglygep5$i$i >>> 2;
   $$01$i$i = $166;$171 = $162;
   while(1) {
    $170 = HEAP32[$171>>2]|0;
    HEAP32[$$01$i$i>>2] = $170;
    $172 = (($171) + 4|0);
    $173 = (($$01$i$i) + 4|0);
    $174 = ($172|0)==($163|0);
    if ($174) {
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
   $175 = (($169) + 1)|0;
   $scevgep6$i$i = (($166) + ($175<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $176 = $__flags & 176;
 if ((($176|0) == 32)) {
  $177 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $177;
  STACKTOP = sp;return;
 } else if ((($176|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $$byval_copy = sp + 36|0;
 $__p$i$i$i$i = sp;
 $__loc = sp + 44|0;
 $__pat = sp + 12|0;
 $__dp = sp + 32|0;
 $__ts = sp + 16|0;
 $__grp = sp + 20|0;
 $__sym = sp + 472|0;
 $__sn = sp + 48|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 64|0;
 $__mi = sp + 464|0;
 $__me = sp + 468|0;
 $0 = sp + 40|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[6872>>2]|0;
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 3;
 } else {
  HEAP32[$__p$i$i$i$i>>2] = 6872;
  $4 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$4>>2] = (132);
  $5 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$5>>2] = 0;
  __THREW__ = 0;
  invoke_viii(8,(6872|0),($__p$i$i$i$i|0),(133|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $8 = HEAP32[((6872 + 4|0))>>2]|0;
   $9 = (($8) + -1)|0;
   $10 = (($1) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $11;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = $16 >> 2;
   $18 = ($17>>>0)>($9>>>0);
   if ($18) {
    $19 = (($13) + ($9<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $25 = HEAP8[$__digits]|0;
     $26 = $25 & 1;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $30 = $25&255;
      $31 = $30 >>> 1;
      $33 = $31;
     } else {
      $28 = (($__digits) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $33 = $29;
     }
     $32 = ($33|0)==(0);
     if ($32) {
      $46 = 0;
     } else {
      if ($27) {
       $36 = (($__digits) + 4|0);
       $38 = $36;
      } else {
       $34 = (($__digits) + 8|0);
       $35 = HEAP32[$34>>2]|0;
       $38 = $35;
      }
      $37 = HEAP32[$38>>2]|0;
      $39 = HEAP32[$20>>2]|0;
      $40 = (($39) + 44|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_iii($41|0,($20|0),45)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break;
      }
      $45 = ($37|0)==($42|0);
      $46 = $45;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(4,($__intl|0),($46|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     L20: do {
      if ($48) {
       $114 = ___cxa_find_matching_catch(-1,-1)|0;
       $115 = tempRet0;
       $$0 = $114;$$01 = $115;
      } else {
       $49 = HEAP8[$__digits]|0;
       $50 = $49 & 1;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $54 = $49&255;
        $55 = $54 >>> 1;
        $58 = $55;
       } else {
        $52 = (($__digits) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $58 = $53;
       }
       $56 = HEAP32[$__fd>>2]|0;
       $57 = ($58|0)>($56|0);
       if ($57) {
        if ($51) {
         $61 = $49&255;
         $62 = $61 >>> 1;
         $64 = $62;
        } else {
         $59 = (($__digits) + 4|0);
         $60 = HEAP32[$59>>2]|0;
         $64 = $60;
        }
        $63 = (($64) - ($56))|0;
        $65 = $63 << 1;
        $66 = HEAP8[$__sn]|0;
        $67 = $66 & 1;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         $71 = $66&255;
         $72 = $71 >>> 1;
         $82 = $72;
        } else {
         $69 = (($__sn) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $82 = $70;
        }
        $73 = HEAP8[$__sym]|0;
        $74 = $73 & 1;
        $75 = ($74<<24>>24)==(0);
        if ($75) {
         $78 = $73&255;
         $79 = $78 >>> 1;
         $84 = $79;
        } else {
         $76 = (($__sym) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $84 = $77;
        }
        $80 = $65 | 1;
        $81 = (($82) + ($80))|0;
        $83 = (($81) + ($84))|0;
        $$pn = $83;
       } else {
        $85 = HEAP8[$__sn]|0;
        $86 = $85 & 1;
        $87 = ($86<<24>>24)==(0);
        if ($87) {
         $90 = $85&255;
         $91 = $90 >>> 1;
         $100 = $91;
        } else {
         $88 = (($__sn) + 4|0);
         $89 = HEAP32[$88>>2]|0;
         $100 = $89;
        }
        $92 = HEAP8[$__sym]|0;
        $93 = $92 & 1;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = $92&255;
         $98 = $97 >>> 1;
         $102 = $98;
        } else {
         $95 = (($__sym) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $102 = $96;
        }
        $99 = (($100) + 2)|0;
        $101 = (($99) + ($102))|0;
        $$pn = $101;
       }
       $103 = (($$pn) + ($56))|0;
       $104 = ($103>>>0)>(100);
       do {
        if ($104) {
         $105 = $103 << 2;
         $106 = (_malloc($105)|0);
         $107 = ($106|0)==(0|0);
         if ($107) {
          __THREW__ = 0;
          invoke_v(4);
          $108 = __THREW__; __THREW__ = 0;
          $109 = $108&1;
          if ($109) {
           $110 = ___cxa_find_matching_catch(-1,-1)|0;
           $111 = tempRet0;
           $$0 = $110;$$01 = $111;
           break L20;
          } else {
           $$pre = HEAP8[$__digits]|0;
           $119 = 0;$123 = $$pre;$__mb$0 = 0;
           break;
          }
         } else {
          $119 = $106;$123 = $49;$__mb$0 = $106;
         }
        } else {
         $119 = 0;$123 = $49;$__mb$0 = $__mbuf;
        }
       } while(0);
       $120 = (($__iob) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $123 & 1;
       $124 = ($122<<24>>24)==(0);
       if ($124) {
        $129 = (($__digits) + 4|0);
        $130 = $123&255;
        $131 = $130 >>> 1;
        $133 = $129;$134 = $131;
       } else {
        $125 = (($__digits) + 8|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (($__digits) + 4|0);
        $128 = HEAP32[$127>>2]|0;
        $133 = $126;$134 = $128;
       }
       $132 = (($133) + ($134<<2)|0);
       $135 = HEAP32[$__dp>>2]|0;
       $136 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($121|0),($133|0),($132|0),($20|0),($46|0),($__pat|0),($135|0),($136|0),($__grp|0),($__sym|0),($__sn|0),($56|0));
       $137 = __THREW__; __THREW__ = 0;
       $138 = $137&1;
       if (!($138)) {
        $139 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $139;
        $140 = HEAP32[$__mi>>2]|0;
        $141 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(44,($agg$result|0),($$byval_copy|0),($__mb$0|0),($140|0),($141|0),($__iob|0),($__fl|0));
        $142 = __THREW__; __THREW__ = 0;
        $143 = $142&1;
        if (!($143)) {
         $144 = ($119|0)==(0|0);
         if ($144) {
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $145 = HEAP32[$__loc>>2]|0;
          (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
          STACKTOP = sp;return;
         }
         _free($119);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $145 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
         STACKTOP = sp;return;
        }
       }
       $116 = ___cxa_find_matching_catch(-1,-1)|0;
       $117 = tempRet0;
       $118 = ($119|0)==(0|0);
       if ($118) {
        $$0 = $116;$$01 = $117;
       } else {
        _free($119);
        $$0 = $116;$$01 = $117;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $146 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   }
   $22 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($22);
   __THREW__ = 0;
   invoke_viii(9,($22|0),(14840|0),(112|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    // unreachable;
   }
  }
 } while(0);
 $112 = ___cxa_find_matching_catch(-1,-1)|0;
 $113 = tempRet0;
 $$1 = $112;$$12 = $113;
 $146 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($146)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7]|0;
    __THREW__ = 0;
    invoke_vii(55,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(15,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch(-1,-1)|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i]|0;
    __THREW__ = 0;
    invoke_vii(55,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch(-1,-1)|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((8528 + 8|0));
 $3 = HEAP8[$__dflt]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $22;$25 = ((8528 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$04$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$04$i16|0);
    $or$cond2$i17 = $30 | $32;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$03$i20]|0;
      __THREW__ = 0;
      invoke_vii(55,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$03$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$03$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(130,(7760|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch(-1,-1)|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch(-1,-1)|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(15,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((8632 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$04$i = $56;$78 = ((8632 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$04$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$04$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$04$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$04$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$04$i|0);
  $or$cond2$i = $88 | $90;
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$03$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(57,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$03$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$03$i = $98;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(130,(7760|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch(-1,-1)|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch(-1,-1)|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch(-1,-1)|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6960 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = (___cxa_guard_acquire((6776|0))|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    __THREW__ = 0;
    $6 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if (!($8)) {
     HEAP32[6768>>2] = $6;
     ___cxa_guard_release((6776|0));
     break;
    }
    $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $10 = tempRet0;
    ___cxa_guard_abort((6776|0));
    __ZSt9terminatev();
    // unreachable;
   }
  }
 } while(0);
 $11 = HEAP32[6768>>2]|0;
 $12 = ($1|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(135,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $17 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(51,($0|0),(6760|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1)|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((3800 + 8|0));
  ___cxa_throw(($0|0),(3848|0),(20|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i$i = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0;
 var $__p$i$i$i12 = 0, $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0;
 var $__p$i$i$i84 = 0, $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113 = sp + 160|0;
 $__p$i$i$i109 = sp + 144|0;
 $__p$i$i$i102 = sp + 128|0;
 $__p$i$i$i96 = sp + 400|0;
 $__p$i$i$i92 = sp + 368|0;
 $__p$i$i$i88 = sp + 32|0;
 $__p$i$i$i84 = sp + 48|0;
 $__p$i$i$i80 = sp + 256|0;
 $__p$i$i$i76 = sp + 64|0;
 $__p$i$i$i72 = sp + 80|0;
 $__p$i$i$i68 = sp + 320|0;
 $__p$i$i$i64 = sp + 352|0;
 $__p$i$i$i60 = sp + 384|0;
 $__p$i$i$i56 = sp + 416|0;
 $__p$i$i$i52 = sp + 432|0;
 $__p$i$i$i48 = sp + 240|0;
 $__p$i$i$i44 = sp + 176|0;
 $__p$i$i$i40 = sp + 192|0;
 $__p$i$i$i36 = sp + 208|0;
 $__p$i$i$i32 = sp + 224|0;
 $__p$i$i$i28 = sp + 16|0;
 $__p$i$i$i24 = sp + 272|0;
 $__p$i$i$i20 = sp + 304|0;
 $__p$i$i$i16 = sp + 96|0;
 $__p$i$i$i12 = sp + 288|0;
 $__p$i$i$i8 = sp;
 $__p$i$i$i4 = sp + 112|0;
 $__p$i$i$i = sp + 336|0;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6792 + 8|0));
 $2 = (($this) + 8|0);
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 136|0);
 $6 = (($this) + 24|0);
 HEAP8[$5] = 1;
 HEAP32[$3>>2] = $6;
 HEAP32[$2>>2] = $6;
 HEAP32[$4>>2] = $5;
 $$0$i$i = 28;$8 = $6;
 while(1) {
  $7 = ($8|0)==(0|0);
  if ($7) {
   $10 = 0;
  } else {
   HEAP32[$8>>2] = 0;
   $$pre1$i$i = HEAP32[$3>>2]|0;
   $10 = $$pre1$i$i;
  }
  $9 = (($10) + 4|0);
  HEAP32[$3>>2] = $9;
  $11 = (($$0$i$i) + -1)|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i$i = $11;$8 = $9;
  }
 }
 $13 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(11,($13|0),(6784|0),1);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $338 = ___cxa_find_matching_catch(-1,-1)|0;
  $339 = tempRet0;
  $$0 = $339;$$01 = $338;
 } else {
  $16 = HEAP32[$2>>2]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = ($17|0)==($16|0);
  if (!($18)) {
   $__new_last2$i$i$i = $16;
   $scevgep$i$i$i = (($17) + -4|0);
   $19 = (0 - ($__new_last2$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep$i$i$i) + ($19)|0);
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $20 = $uglygep3$i$i$i >>> 2;
   $21 = $20 ^ -1;
   $scevgep4$i$i$i = (($17) + ($21<<2)|0);
   HEAP32[$3>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((11688 + 4|0))>>2] = 0;
  HEAP32[11688>>2] = ((5272 + 8|0));
  $22 = HEAP32[5304>>2]|0;
  $23 = ($22|0)==(-1);
  if ($23) {
   label = 10;
  } else {
   HEAP32[$__p$i$i$i4>>2] = 5304;
   $24 = (($__p$i$i$i4) + 4|0);
   HEAP32[$24>>2] = (132);
   $25 = (($__p$i$i$i4) + 8|0);
   HEAP32[$25>>2] = 0;
   __THREW__ = 0;
   invoke_viii(8,(5304|0),($__p$i$i$i4|0),(133|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    label = 111;
   } else {
    label = 10;
   }
  }
  L14: do {
   if ((label|0) == 10) {
    $28 = HEAP32[((5304 + 4|0))>>2]|0;
    $29 = (($28) + -1)|0;
    __THREW__ = 0;
    invoke_viii(12,($this|0),(11688|0),($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 111;
    } else {
     HEAP32[((11680 + 4|0))>>2] = 0;
     HEAP32[11680>>2] = ((5312 + 8|0));
     $32 = HEAP32[5344>>2]|0;
     $33 = ($32|0)==(-1);
     if (!($33)) {
      HEAP32[$__p$i$i$i8>>2] = 5344;
      $34 = (($__p$i$i$i8) + 4|0);
      HEAP32[$34>>2] = (132);
      $35 = (($__p$i$i$i8) + 8|0);
      HEAP32[$35>>2] = 0;
      __THREW__ = 0;
      invoke_viii(8,(5344|0),($__p$i$i$i8|0),(133|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 111;
       break;
      }
     }
     $38 = HEAP32[((5344 + 4|0))>>2]|0;
     $39 = (($38) + -1)|0;
     __THREW__ = 0;
     invoke_viii(12,($this|0),(11680|0),($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      label = 111;
     } else {
      HEAP32[((11664 + 4|0))>>2] = 0;
      HEAP32[11664>>2] = ((6888 + 8|0));
      HEAP32[((11664 + 8|0))>>2] = 0;
      HEAP8[((11664 + 12|0))] = 0;
      __THREW__ = 0;
      $42 = (invoke_i(1)|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       $46 = tempRet0;
       ___clang_call_terminate($45);
       // unreachable;
      }
      $47 = HEAP32[$42>>2]|0;
      HEAP32[((11664 + 8|0))>>2] = $47;
      $48 = HEAP32[6880>>2]|0;
      $49 = ($48|0)==(-1);
      if (!($49)) {
       HEAP32[$__p$i$i$i12>>2] = 6880;
       $50 = (($__p$i$i$i12) + 4|0);
       HEAP32[$50>>2] = (132);
       $51 = (($__p$i$i$i12) + 8|0);
       HEAP32[$51>>2] = 0;
       __THREW__ = 0;
       invoke_viii(8,(6880|0),($__p$i$i$i12|0),(133|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 111;
        break;
       }
      }
      $54 = HEAP32[((6880 + 4|0))>>2]|0;
      $55 = (($54) + -1)|0;
      __THREW__ = 0;
      invoke_viii(12,($this|0),(11664|0),($55|0));
      $56 = __THREW__; __THREW__ = 0;
      $57 = $56&1;
      if ($57) {
       label = 111;
      } else {
       HEAP32[((11656 + 4|0))>>2] = 0;
       HEAP32[11656>>2] = ((7848 + 8|0));
       $58 = HEAP32[6872>>2]|0;
       $59 = ($58|0)==(-1);
       if (!($59)) {
        HEAP32[$__p$i$i$i16>>2] = 6872;
        $60 = (($__p$i$i$i16) + 4|0);
        HEAP32[$60>>2] = (132);
        $61 = (($__p$i$i$i16) + 8|0);
        HEAP32[$61>>2] = 0;
        __THREW__ = 0;
        invoke_viii(8,(6872|0),($__p$i$i$i16|0),(133|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         label = 111;
         break;
        }
       }
       $64 = HEAP32[((6872 + 4|0))>>2]|0;
       $65 = (($64) + -1)|0;
       __THREW__ = 0;
       invoke_viii(12,($this|0),(11656|0),($65|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        label = 111;
       } else {
        HEAP32[((11648 + 4|0))>>2] = 0;
        HEAP32[11648>>2] = ((8064 + 8|0));
        $68 = HEAP32[6944>>2]|0;
        $69 = ($68|0)==(-1);
        if (!($69)) {
         HEAP32[$__p$i$i$i20>>2] = 6944;
         $70 = (($__p$i$i$i20) + 4|0);
         HEAP32[$70>>2] = (132);
         $71 = (($__p$i$i$i20) + 8|0);
         HEAP32[$71>>2] = 0;
         __THREW__ = 0;
         invoke_viii(8,(6944|0),($__p$i$i$i20|0),(133|0));
         $72 = __THREW__; __THREW__ = 0;
         $73 = $72&1;
         if ($73) {
          label = 111;
          break;
         }
        }
        $74 = HEAP32[((6944 + 4|0))>>2]|0;
        $75 = (($74) + -1)|0;
        __THREW__ = 0;
        invoke_viii(12,($this|0),(11648|0),($75|0));
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         label = 111;
        } else {
         HEAP32[((11632 + 4|0))>>2] = 0;
         HEAP32[11632>>2] = ((6960 + 8|0));
         $78 = HEAP8[6776]|0;
         $79 = ($78<<24>>24)==(0);
         do {
          if ($79) {
           $80 = (___cxa_guard_acquire((6776|0))|0);
           $81 = ($80|0)==(0);
           if (!($81)) {
            __THREW__ = 0;
            $82 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
            $83 = __THREW__; __THREW__ = 0;
            $84 = $83&1;
            if ($84) {
             $85 = ___cxa_find_matching_catch(-1,-1)|0;
             $86 = tempRet0;
             ___cxa_guard_abort((6776|0));
             $eh$lpad$body$index4Z2D = $86;$eh$lpad$body$indexZ2D = $85;
             break L14;
            } else {
             HEAP32[6768>>2] = $82;
             ___cxa_guard_release((6776|0));
             break;
            }
           }
          }
         } while(0);
         $87 = HEAP32[6768>>2]|0;
         HEAP32[((11632 + 8|0))>>2] = $87;
         $88 = HEAP32[6952>>2]|0;
         $89 = ($88|0)==(-1);
         if (!($89)) {
          HEAP32[$__p$i$i$i24>>2] = 6952;
          $90 = (($__p$i$i$i24) + 4|0);
          HEAP32[$90>>2] = (132);
          $91 = (($__p$i$i$i24) + 8|0);
          HEAP32[$91>>2] = 0;
          __THREW__ = 0;
          invoke_viii(8,(6952|0),($__p$i$i$i24|0),(133|0));
          $92 = __THREW__; __THREW__ = 0;
          $93 = $92&1;
          if ($93) {
           label = 111;
           break;
          }
         }
         $94 = HEAP32[((6952 + 4|0))>>2]|0;
         $95 = (($94) + -1)|0;
         __THREW__ = 0;
         invoke_viii(12,($this|0),(11632|0),($95|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          label = 111;
         } else {
          HEAP32[((11624 + 4|0))>>2] = 0;
          HEAP32[11624>>2] = ((8288 + 8|0));
          $98 = HEAP32[7008>>2]|0;
          $99 = ($98|0)==(-1);
          if (!($99)) {
           HEAP32[$__p$i$i$i28>>2] = 7008;
           $100 = (($__p$i$i$i28) + 4|0);
           HEAP32[$100>>2] = (132);
           $101 = (($__p$i$i$i28) + 8|0);
           HEAP32[$101>>2] = 0;
           __THREW__ = 0;
           invoke_viii(8,(7008|0),($__p$i$i$i28|0),(133|0));
           $102 = __THREW__; __THREW__ = 0;
           $103 = $102&1;
           if ($103) {
            label = 111;
            break;
           }
          }
          $104 = HEAP32[((7008 + 4|0))>>2]|0;
          $105 = (($104) + -1)|0;
          __THREW__ = 0;
          invoke_viii(12,($this|0),(11624|0),($105|0));
          $106 = __THREW__; __THREW__ = 0;
          $107 = $106&1;
          if ($107) {
           label = 111;
          } else {
           HEAP32[((11616 + 4|0))>>2] = 0;
           HEAP32[11616>>2] = ((8408 + 8|0));
           $108 = HEAP32[7016>>2]|0;
           $109 = ($108|0)==(-1);
           if (!($109)) {
            HEAP32[$__p$i$i$i32>>2] = 7016;
            $110 = (($__p$i$i$i32) + 4|0);
            HEAP32[$110>>2] = (132);
            $111 = (($__p$i$i$i32) + 8|0);
            HEAP32[$111>>2] = 0;
            __THREW__ = 0;
            invoke_viii(8,(7016|0),($__p$i$i$i32|0),(133|0));
            $112 = __THREW__; __THREW__ = 0;
            $113 = $112&1;
            if ($113) {
             label = 111;
             break;
            }
           }
           $114 = HEAP32[((7016 + 4|0))>>2]|0;
           $115 = (($114) + -1)|0;
           __THREW__ = 0;
           invoke_viii(12,($this|0),(11616|0),($115|0));
           $116 = __THREW__; __THREW__ = 0;
           $117 = $116&1;
           if ($117) {
            label = 111;
           } else {
            HEAP32[((11592 + 4|0))>>2] = 0;
            HEAP32[11592>>2] = ((7040 + 8|0));
            HEAP8[((11592 + 8|0))] = 46;
            HEAP8[((11592 + 9|0))] = 44;
            ;HEAP32[((11592 + 12|0))+0>>2]=0|0;HEAP32[((11592 + 12|0))+4>>2]=0|0;HEAP32[((11592 + 12|0))+8>>2]=0|0;
            $118 = HEAP32[7024>>2]|0;
            $119 = ($118|0)==(-1);
            if (!($119)) {
             HEAP32[$__p$i$i$i36>>2] = 7024;
             $120 = (($__p$i$i$i36) + 4|0);
             HEAP32[$120>>2] = (132);
             $121 = (($__p$i$i$i36) + 8|0);
             HEAP32[$121>>2] = 0;
             __THREW__ = 0;
             invoke_viii(8,(7024|0),($__p$i$i$i36|0),(133|0));
             $122 = __THREW__; __THREW__ = 0;
             $123 = $122&1;
             if ($123) {
              label = 111;
              break;
             }
            }
            $124 = HEAP32[((7024 + 4|0))>>2]|0;
            $125 = (($124) + -1)|0;
            __THREW__ = 0;
            invoke_viii(12,($this|0),(11592|0),($125|0));
            $126 = __THREW__; __THREW__ = 0;
            $127 = $126&1;
            if ($127) {
             label = 111;
            } else {
             HEAP32[((11560 + 4|0))>>2] = 0;
             HEAP32[11560>>2] = ((7080 + 8|0));
             HEAP32[((11560 + 8|0))>>2] = 46;
             HEAP32[((11560 + 12|0))>>2] = 44;
             ;HEAP32[((11560 + 16|0))+0>>2]=0|0;HEAP32[((11560 + 16|0))+4>>2]=0|0;HEAP32[((11560 + 16|0))+8>>2]=0|0;
             $128 = HEAP32[7032>>2]|0;
             $129 = ($128|0)==(-1);
             if (!($129)) {
              HEAP32[$__p$i$i$i40>>2] = 7032;
              $130 = (($__p$i$i$i40) + 4|0);
              HEAP32[$130>>2] = (132);
              $131 = (($__p$i$i$i40) + 8|0);
              HEAP32[$131>>2] = 0;
              __THREW__ = 0;
              invoke_viii(8,(7032|0),($__p$i$i$i40|0),(133|0));
              $132 = __THREW__; __THREW__ = 0;
              $133 = $132&1;
              if ($133) {
               label = 111;
               break;
              }
             }
             $134 = HEAP32[((7032 + 4|0))>>2]|0;
             $135 = (($134) + -1)|0;
             __THREW__ = 0;
             invoke_viii(12,($this|0),(11560|0),($135|0));
             $136 = __THREW__; __THREW__ = 0;
             $137 = $136&1;
             if ($137) {
              label = 111;
             } else {
              HEAP32[((11552 + 4|0))>>2] = 0;
              HEAP32[11552>>2] = ((5352 + 8|0));
              $138 = HEAP32[5416>>2]|0;
              $139 = ($138|0)==(-1);
              if (!($139)) {
               HEAP32[$__p$i$i$i44>>2] = 5416;
               $140 = (($__p$i$i$i44) + 4|0);
               HEAP32[$140>>2] = (132);
               $141 = (($__p$i$i$i44) + 8|0);
               HEAP32[$141>>2] = 0;
               __THREW__ = 0;
               invoke_viii(8,(5416|0),($__p$i$i$i44|0),(133|0));
               $142 = __THREW__; __THREW__ = 0;
               $143 = $142&1;
               if ($143) {
                label = 111;
                break;
               }
              }
              $144 = HEAP32[((5416 + 4|0))>>2]|0;
              $145 = (($144) + -1)|0;
              __THREW__ = 0;
              invoke_viii(12,($this|0),(11552|0),($145|0));
              $146 = __THREW__; __THREW__ = 0;
              $147 = $146&1;
              if ($147) {
               label = 111;
              } else {
               HEAP32[((11544 + 4|0))>>2] = 0;
               HEAP32[11544>>2] = ((5472 + 8|0));
               $148 = HEAP32[5536>>2]|0;
               $149 = ($148|0)==(-1);
               if (!($149)) {
                HEAP32[$__p$i$i$i48>>2] = 5536;
                $150 = (($__p$i$i$i48) + 4|0);
                HEAP32[$150>>2] = (132);
                $151 = (($__p$i$i$i48) + 8|0);
                HEAP32[$151>>2] = 0;
                __THREW__ = 0;
                invoke_viii(8,(5536|0),($__p$i$i$i48|0),(133|0));
                $152 = __THREW__; __THREW__ = 0;
                $153 = $152&1;
                if ($153) {
                 label = 111;
                 break;
                }
               }
               $154 = HEAP32[((5536 + 4|0))>>2]|0;
               $155 = (($154) + -1)|0;
               __THREW__ = 0;
               invoke_viii(12,($this|0),(11544|0),($155|0));
               $156 = __THREW__; __THREW__ = 0;
               $157 = $156&1;
               if ($157) {
                label = 111;
               } else {
                HEAP32[((11536 + 4|0))>>2] = 0;
                HEAP32[11536>>2] = ((5544 + 8|0));
                $158 = HEAP32[5600>>2]|0;
                $159 = ($158|0)==(-1);
                if (!($159)) {
                 HEAP32[$__p$i$i$i52>>2] = 5600;
                 $160 = (($__p$i$i$i52) + 4|0);
                 HEAP32[$160>>2] = (132);
                 $161 = (($__p$i$i$i52) + 8|0);
                 HEAP32[$161>>2] = 0;
                 __THREW__ = 0;
                 invoke_viii(8,(5600|0),($__p$i$i$i52|0),(133|0));
                 $162 = __THREW__; __THREW__ = 0;
                 $163 = $162&1;
                 if ($163) {
                  label = 111;
                  break;
                 }
                }
                $164 = HEAP32[((5600 + 4|0))>>2]|0;
                $165 = (($164) + -1)|0;
                __THREW__ = 0;
                invoke_viii(12,($this|0),(11536|0),($165|0));
                $166 = __THREW__; __THREW__ = 0;
                $167 = $166&1;
                if ($167) {
                 label = 111;
                } else {
                 HEAP32[((11528 + 4|0))>>2] = 0;
                 HEAP32[11528>>2] = ((5608 + 8|0));
                 $168 = HEAP32[5664>>2]|0;
                 $169 = ($168|0)==(-1);
                 if (!($169)) {
                  HEAP32[$__p$i$i$i56>>2] = 5664;
                  $170 = (($__p$i$i$i56) + 4|0);
                  HEAP32[$170>>2] = (132);
                  $171 = (($__p$i$i$i56) + 8|0);
                  HEAP32[$171>>2] = 0;
                  __THREW__ = 0;
                  invoke_viii(8,(5664|0),($__p$i$i$i56|0),(133|0));
                  $172 = __THREW__; __THREW__ = 0;
                  $173 = $172&1;
                  if ($173) {
                   label = 111;
                   break;
                  }
                 }
                 $174 = HEAP32[((5664 + 4|0))>>2]|0;
                 $175 = (($174) + -1)|0;
                 __THREW__ = 0;
                 invoke_viii(12,($this|0),(11528|0),($175|0));
                 $176 = __THREW__; __THREW__ = 0;
                 $177 = $176&1;
                 if ($177) {
                  label = 111;
                 } else {
                  HEAP32[((11520 + 4|0))>>2] = 0;
                  HEAP32[11520>>2] = ((6200 + 8|0));
                  $178 = HEAP32[6256>>2]|0;
                  $179 = ($178|0)==(-1);
                  if (!($179)) {
                   HEAP32[$__p$i$i$i60>>2] = 6256;
                   $180 = (($__p$i$i$i60) + 4|0);
                   HEAP32[$180>>2] = (132);
                   $181 = (($__p$i$i$i60) + 8|0);
                   HEAP32[$181>>2] = 0;
                   __THREW__ = 0;
                   invoke_viii(8,(6256|0),($__p$i$i$i60|0),(133|0));
                   $182 = __THREW__; __THREW__ = 0;
                   $183 = $182&1;
                   if ($183) {
                    label = 111;
                    break;
                   }
                  }
                  $184 = HEAP32[((6256 + 4|0))>>2]|0;
                  $185 = (($184) + -1)|0;
                  __THREW__ = 0;
                  invoke_viii(12,($this|0),(11520|0),($185|0));
                  $186 = __THREW__; __THREW__ = 0;
                  $187 = $186&1;
                  if ($187) {
                   label = 111;
                  } else {
                   HEAP32[((11512 + 4|0))>>2] = 0;
                   HEAP32[11512>>2] = ((6264 + 8|0));
                   $188 = HEAP32[6320>>2]|0;
                   $189 = ($188|0)==(-1);
                   if (!($189)) {
                    HEAP32[$__p$i$i$i64>>2] = 6320;
                    $190 = (($__p$i$i$i64) + 4|0);
                    HEAP32[$190>>2] = (132);
                    $191 = (($__p$i$i$i64) + 8|0);
                    HEAP32[$191>>2] = 0;
                    __THREW__ = 0;
                    invoke_viii(8,(6320|0),($__p$i$i$i64|0),(133|0));
                    $192 = __THREW__; __THREW__ = 0;
                    $193 = $192&1;
                    if ($193) {
                     label = 111;
                     break;
                    }
                   }
                   $194 = HEAP32[((6320 + 4|0))>>2]|0;
                   $195 = (($194) + -1)|0;
                   __THREW__ = 0;
                   invoke_viii(12,($this|0),(11512|0),($195|0));
                   $196 = __THREW__; __THREW__ = 0;
                   $197 = $196&1;
                   if ($197) {
                    label = 111;
                   } else {
                    HEAP32[((11504 + 4|0))>>2] = 0;
                    HEAP32[11504>>2] = ((6328 + 8|0));
                    $198 = HEAP32[6384>>2]|0;
                    $199 = ($198|0)==(-1);
                    if (!($199)) {
                     HEAP32[$__p$i$i$i68>>2] = 6384;
                     $200 = (($__p$i$i$i68) + 4|0);
                     HEAP32[$200>>2] = (132);
                     $201 = (($__p$i$i$i68) + 8|0);
                     HEAP32[$201>>2] = 0;
                     __THREW__ = 0;
                     invoke_viii(8,(6384|0),($__p$i$i$i68|0),(133|0));
                     $202 = __THREW__; __THREW__ = 0;
                     $203 = $202&1;
                     if ($203) {
                      label = 111;
                      break;
                     }
                    }
                    $204 = HEAP32[((6384 + 4|0))>>2]|0;
                    $205 = (($204) + -1)|0;
                    __THREW__ = 0;
                    invoke_viii(12,($this|0),(11504|0),($205|0));
                    $206 = __THREW__; __THREW__ = 0;
                    $207 = $206&1;
                    if ($207) {
                     label = 111;
                    } else {
                     HEAP32[((11496 + 4|0))>>2] = 0;
                     HEAP32[11496>>2] = ((6392 + 8|0));
                     $208 = HEAP32[6448>>2]|0;
                     $209 = ($208|0)==(-1);
                     if (!($209)) {
                      HEAP32[$__p$i$i$i72>>2] = 6448;
                      $210 = (($__p$i$i$i72) + 4|0);
                      HEAP32[$210>>2] = (132);
                      $211 = (($__p$i$i$i72) + 8|0);
                      HEAP32[$211>>2] = 0;
                      __THREW__ = 0;
                      invoke_viii(8,(6448|0),($__p$i$i$i72|0),(133|0));
                      $212 = __THREW__; __THREW__ = 0;
                      $213 = $212&1;
                      if ($213) {
                       label = 111;
                       break;
                      }
                     }
                     $214 = HEAP32[((6448 + 4|0))>>2]|0;
                     $215 = (($214) + -1)|0;
                     __THREW__ = 0;
                     invoke_viii(12,($this|0),(11496|0),($215|0));
                     $216 = __THREW__; __THREW__ = 0;
                     $217 = $216&1;
                     if ($217) {
                      label = 111;
                     } else {
                      HEAP32[((11488 + 4|0))>>2] = 0;
                      HEAP32[11488>>2] = ((6456 + 8|0));
                      $218 = HEAP32[6488>>2]|0;
                      $219 = ($218|0)==(-1);
                      if (!($219)) {
                       HEAP32[$__p$i$i$i76>>2] = 6488;
                       $220 = (($__p$i$i$i76) + 4|0);
                       HEAP32[$220>>2] = (132);
                       $221 = (($__p$i$i$i76) + 8|0);
                       HEAP32[$221>>2] = 0;
                       __THREW__ = 0;
                       invoke_viii(8,(6488|0),($__p$i$i$i76|0),(133|0));
                       $222 = __THREW__; __THREW__ = 0;
                       $223 = $222&1;
                       if ($223) {
                        label = 111;
                        break;
                       }
                      }
                      $224 = HEAP32[((6488 + 4|0))>>2]|0;
                      $225 = (($224) + -1)|0;
                      __THREW__ = 0;
                      invoke_viii(12,($this|0),(11488|0),($225|0));
                      $226 = __THREW__; __THREW__ = 0;
                      $227 = $226&1;
                      if ($227) {
                       label = 111;
                      } else {
                       HEAP32[((11480 + 4|0))>>2] = 0;
                       HEAP32[11480>>2] = ((6536 + 8|0));
                       $228 = HEAP32[6568>>2]|0;
                       $229 = ($228|0)==(-1);
                       if (!($229)) {
                        HEAP32[$__p$i$i$i80>>2] = 6568;
                        $230 = (($__p$i$i$i80) + 4|0);
                        HEAP32[$230>>2] = (132);
                        $231 = (($__p$i$i$i80) + 8|0);
                        HEAP32[$231>>2] = 0;
                        __THREW__ = 0;
                        invoke_viii(8,(6568|0),($__p$i$i$i80|0),(133|0));
                        $232 = __THREW__; __THREW__ = 0;
                        $233 = $232&1;
                        if ($233) {
                         label = 111;
                         break;
                        }
                       }
                       $234 = HEAP32[((6568 + 4|0))>>2]|0;
                       $235 = (($234) + -1)|0;
                       __THREW__ = 0;
                       invoke_viii(12,($this|0),(11480|0),($235|0));
                       $236 = __THREW__; __THREW__ = 0;
                       $237 = $236&1;
                       if ($237) {
                        label = 111;
                       } else {
                        HEAP32[((11472 + 4|0))>>2] = 0;
                        HEAP32[11472>>2] = ((6592 + 8|0));
                        $238 = HEAP32[6624>>2]|0;
                        $239 = ($238|0)==(-1);
                        if (!($239)) {
                         HEAP32[$__p$i$i$i84>>2] = 6624;
                         $240 = (($__p$i$i$i84) + 4|0);
                         HEAP32[$240>>2] = (132);
                         $241 = (($__p$i$i$i84) + 8|0);
                         HEAP32[$241>>2] = 0;
                         __THREW__ = 0;
                         invoke_viii(8,(6624|0),($__p$i$i$i84|0),(133|0));
                         $242 = __THREW__; __THREW__ = 0;
                         $243 = $242&1;
                         if ($243) {
                          label = 111;
                          break;
                         }
                        }
                        $244 = HEAP32[((6624 + 4|0))>>2]|0;
                        $245 = (($244) + -1)|0;
                        __THREW__ = 0;
                        invoke_viii(12,($this|0),(11472|0),($245|0));
                        $246 = __THREW__; __THREW__ = 0;
                        $247 = $246&1;
                        if ($247) {
                         label = 111;
                        } else {
                         HEAP32[((11464 + 4|0))>>2] = 0;
                         HEAP32[11464>>2] = ((6640 + 8|0));
                         $248 = HEAP32[6672>>2]|0;
                         $249 = ($248|0)==(-1);
                         if (!($249)) {
                          HEAP32[$__p$i$i$i88>>2] = 6672;
                          $250 = (($__p$i$i$i88) + 4|0);
                          HEAP32[$250>>2] = (132);
                          $251 = (($__p$i$i$i88) + 8|0);
                          HEAP32[$251>>2] = 0;
                          __THREW__ = 0;
                          invoke_viii(8,(6672|0),($__p$i$i$i88|0),(133|0));
                          $252 = __THREW__; __THREW__ = 0;
                          $253 = $252&1;
                          if ($253) {
                           label = 111;
                           break;
                          }
                         }
                         $254 = HEAP32[((6672 + 4|0))>>2]|0;
                         $255 = (($254) + -1)|0;
                         __THREW__ = 0;
                         invoke_viii(12,($this|0),(11464|0),($255|0));
                         $256 = __THREW__; __THREW__ = 0;
                         $257 = $256&1;
                         if ($257) {
                          label = 111;
                         } else {
                          HEAP32[((11448 + 4|0))>>2] = 0;
                          HEAP32[11448>>2] = ((5688 + 8|0));
                          HEAP32[((11448 + 8|0))>>2] = ((5688 + 56|0));
                          $258 = HEAP32[5776>>2]|0;
                          $259 = ($258|0)==(-1);
                          if (!($259)) {
                           HEAP32[$__p$i$i$i92>>2] = 5776;
                           $260 = (($__p$i$i$i92) + 4|0);
                           HEAP32[$260>>2] = (132);
                           $261 = (($__p$i$i$i92) + 8|0);
                           HEAP32[$261>>2] = 0;
                           __THREW__ = 0;
                           invoke_viii(8,(5776|0),($__p$i$i$i92|0),(133|0));
                           $262 = __THREW__; __THREW__ = 0;
                           $263 = $262&1;
                           if ($263) {
                            label = 111;
                            break;
                           }
                          }
                          $264 = HEAP32[((5776 + 4|0))>>2]|0;
                          $265 = (($264) + -1)|0;
                          __THREW__ = 0;
                          invoke_viii(12,($this|0),(11448|0),($265|0));
                          $266 = __THREW__; __THREW__ = 0;
                          $267 = $266&1;
                          if ($267) {
                           label = 111;
                          } else {
                           HEAP32[((11432 + 4|0))>>2] = 0;
                           HEAP32[11432>>2] = ((5840 + 8|0));
                           HEAP32[((11432 + 8|0))>>2] = ((5840 + 56|0));
                           $268 = HEAP32[5928>>2]|0;
                           $269 = ($268|0)==(-1);
                           if (!($269)) {
                            HEAP32[$__p$i$i$i96>>2] = 5928;
                            $270 = (($__p$i$i$i96) + 4|0);
                            HEAP32[$270>>2] = (132);
                            $271 = (($__p$i$i$i96) + 8|0);
                            HEAP32[$271>>2] = 0;
                            __THREW__ = 0;
                            invoke_viii(8,(5928|0),($__p$i$i$i96|0),(133|0));
                            $272 = __THREW__; __THREW__ = 0;
                            $273 = $272&1;
                            if ($273) {
                             label = 111;
                             break;
                            }
                           }
                           $274 = HEAP32[((5928 + 4|0))>>2]|0;
                           $275 = (($274) + -1)|0;
                           __THREW__ = 0;
                           invoke_viii(12,($this|0),(11432|0),($275|0));
                           $276 = __THREW__; __THREW__ = 0;
                           $277 = $276&1;
                           if ($277) {
                            label = 111;
                           } else {
                            HEAP32[((11416 + 4|0))>>2] = 0;
                            HEAP32[11416>>2] = ((7784 + 8|0));
                            $278 = HEAP8[6776]|0;
                            $279 = ($278<<24>>24)==(0);
                            do {
                             if ($279) {
                              $280 = (___cxa_guard_acquire((6776|0))|0);
                              $281 = ($280|0)==(0);
                              if (!($281)) {
                               __THREW__ = 0;
                               $282 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
                               $283 = __THREW__; __THREW__ = 0;
                               $284 = $283&1;
                               if ($284) {
                                $285 = ___cxa_find_matching_catch(-1,-1)|0;
                                $286 = tempRet0;
                                ___cxa_guard_abort((6776|0));
                                $eh$lpad$body$index4Z2D = $286;$eh$lpad$body$indexZ2D = $285;
                                break L14;
                               } else {
                                HEAP32[6768>>2] = $282;
                                ___cxa_guard_release((6776|0));
                                break;
                               }
                              }
                             }
                            } while(0);
                            $287 = HEAP32[6768>>2]|0;
                            HEAP32[((11416 + 8|0))>>2] = $287;
                            HEAP32[11416>>2] = ((6136 + 8|0));
                            $288 = HEAP32[6160>>2]|0;
                            $289 = ($288|0)==(-1);
                            if (!($289)) {
                             HEAP32[$__p$i$i$i102>>2] = 6160;
                             $290 = (($__p$i$i$i102) + 4|0);
                             HEAP32[$290>>2] = (132);
                             $291 = (($__p$i$i$i102) + 8|0);
                             HEAP32[$291>>2] = 0;
                             __THREW__ = 0;
                             invoke_viii(8,(6160|0),($__p$i$i$i102|0),(133|0));
                             $292 = __THREW__; __THREW__ = 0;
                             $293 = $292&1;
                             if ($293) {
                              label = 111;
                              break;
                             }
                            }
                            $294 = HEAP32[((6160 + 4|0))>>2]|0;
                            $295 = (($294) + -1)|0;
                            __THREW__ = 0;
                            invoke_viii(12,($this|0),(11416|0),($295|0));
                            $296 = __THREW__; __THREW__ = 0;
                            $297 = $296&1;
                            if ($297) {
                             label = 111;
                            } else {
                             HEAP32[((11400 + 4|0))>>2] = 0;
                             HEAP32[11400>>2] = ((7784 + 8|0));
                             $298 = HEAP8[6776]|0;
                             $299 = ($298<<24>>24)==(0);
                             do {
                              if ($299) {
                               $300 = (___cxa_guard_acquire((6776|0))|0);
                               $301 = ($300|0)==(0);
                               if (!($301)) {
                                __THREW__ = 0;
                                $302 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
                                $303 = __THREW__; __THREW__ = 0;
                                $304 = $303&1;
                                if ($304) {
                                 $305 = ___cxa_find_matching_catch(-1,-1)|0;
                                 $306 = tempRet0;
                                 ___cxa_guard_abort((6776|0));
                                 $eh$lpad$body$index4Z2D = $306;$eh$lpad$body$indexZ2D = $305;
                                 break L14;
                                } else {
                                 HEAP32[6768>>2] = $302;
                                 ___cxa_guard_release((6776|0));
                                 break;
                                }
                               }
                              }
                             } while(0);
                             $307 = HEAP32[6768>>2]|0;
                             HEAP32[((11400 + 8|0))>>2] = $307;
                             HEAP32[11400>>2] = ((6168 + 8|0));
                             $308 = HEAP32[6192>>2]|0;
                             $309 = ($308|0)==(-1);
                             if (!($309)) {
                              HEAP32[$__p$i$i$i109>>2] = 6192;
                              $310 = (($__p$i$i$i109) + 4|0);
                              HEAP32[$310>>2] = (132);
                              $311 = (($__p$i$i$i109) + 8|0);
                              HEAP32[$311>>2] = 0;
                              __THREW__ = 0;
                              invoke_viii(8,(6192|0),($__p$i$i$i109|0),(133|0));
                              $312 = __THREW__; __THREW__ = 0;
                              $313 = $312&1;
                              if ($313) {
                               label = 111;
                               break;
                              }
                             }
                             $314 = HEAP32[((6192 + 4|0))>>2]|0;
                             $315 = (($314) + -1)|0;
                             __THREW__ = 0;
                             invoke_viii(12,($this|0),(11400|0),($315|0));
                             $316 = __THREW__; __THREW__ = 0;
                             $317 = $316&1;
                             if ($317) {
                              label = 111;
                             } else {
                              HEAP32[((11392 + 4|0))>>2] = 0;
                              HEAP32[11392>>2] = ((6680 + 8|0));
                              $318 = HEAP32[6712>>2]|0;
                              $319 = ($318|0)==(-1);
                              if (!($319)) {
                               HEAP32[$__p$i$i$i113>>2] = 6712;
                               $320 = (($__p$i$i$i113) + 4|0);
                               HEAP32[$320>>2] = (132);
                               $321 = (($__p$i$i$i113) + 8|0);
                               HEAP32[$321>>2] = 0;
                               __THREW__ = 0;
                               invoke_viii(8,(6712|0),($__p$i$i$i113|0),(133|0));
                               $322 = __THREW__; __THREW__ = 0;
                               $323 = $322&1;
                               if ($323) {
                                label = 111;
                                break;
                               }
                              }
                              $324 = HEAP32[((6712 + 4|0))>>2]|0;
                              $325 = (($324) + -1)|0;
                              __THREW__ = 0;
                              invoke_viii(12,($this|0),(11392|0),($325|0));
                              $326 = __THREW__; __THREW__ = 0;
                              $327 = $326&1;
                              if ($327) {
                               label = 111;
                              } else {
                               HEAP32[((11384 + 4|0))>>2] = 0;
                               HEAP32[11384>>2] = ((6720 + 8|0));
                               $328 = HEAP32[6752>>2]|0;
                               $329 = ($328|0)==(-1);
                               if (!($329)) {
                                HEAP32[$__p$i$i$i>>2] = 6752;
                                $330 = (($__p$i$i$i) + 4|0);
                                HEAP32[$330>>2] = (132);
                                $331 = (($__p$i$i$i) + 8|0);
                                HEAP32[$331>>2] = 0;
                                __THREW__ = 0;
                                invoke_viii(8,(6752|0),($__p$i$i$i|0),(133|0));
                                $332 = __THREW__; __THREW__ = 0;
                                $333 = $332&1;
                                if ($333) {
                                 label = 111;
                                 break;
                                }
                               }
                               $334 = HEAP32[((6752 + 4|0))>>2]|0;
                               $335 = (($334) + -1)|0;
                               __THREW__ = 0;
                               invoke_viii(12,($this|0),(11384|0),($335|0));
                               $336 = __THREW__; __THREW__ = 0;
                               $337 = $336&1;
                               if ($337) {
                                label = 111;
                               } else {
                                STACKTOP = sp;return;
                               }
                              }
                             }
                            }
                           }
                          }
                         }
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 111) {
   $340 = ___cxa_find_matching_catch(-1,-1)|0;
   $341 = tempRet0;
   $eh$lpad$body$index4Z2D = $341;$eh$lpad$body$indexZ2D = $340;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($13);
  $$0 = $eh$lpad$body$index4Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 $342 = HEAP32[$2>>2]|0;
 $343 = ($342|0)==(0|0);
 if ($343) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $344 = HEAP32[$3>>2]|0;
 $345 = ($344|0)==($342|0);
 if (!($345)) {
  $__new_last2$i$i$i$i$i = $342;
  $scevgep$i$i$i$i$i = (($344) + -4|0);
  $346 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($346)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $347 = $uglygep3$i$i$i$i$i >>> 2;
  $348 = $347 ^ -1;
  $scevgep4$i$i$i$i$i = (($344) + ($348<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i$i$i;
 }
 $349 = ($6|0)==($342|0);
 if ($349) {
  HEAP8[$5] = 0;
  ___resumeException($$01|0);
  // unreachable;
 } else {
  __ZdlPv($342);
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $24 = $3;
  } else {
   $9 = (($id) + 1)|0;
   $10 = ($7>>>0)<($9>>>0);
   if (!($10)) {
    $14 = ($7>>>0)>($9>>>0);
    if (!($14)) {
     $24 = $3;
     break;
    }
    $15 = (($3) + ($9<<2)|0);
    $16 = ($2|0)==($15|0);
    if ($16) {
     $24 = $3;
     break;
    }
    $__new_last2$i$i$i = $15;
    $scevgep$i$i$i = (($2) + -4|0);
    $17 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $18 = $uglygep3$i$i$i >>> 2;
    $19 = $18 ^ -1;
    $scevgep4$i$i$i = (($2) + ($19<<2)|0);
    HEAP32[$1>>2] = $scevgep4$i$i$i;
    $24 = $3;
    break;
   }
   $11 = (($9) - ($7))|0;
   __THREW__ = 0;
   invoke_vii(59,($0|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $$pre2 = HEAP32[$0>>2]|0;
    $24 = $$pre2;
    break;
   }
   $20 = ___cxa_find_matching_catch(-1,-1)|0;
   $21 = tempRet0;
   $22 = ($f|0)==(0|0);
   if ($22) {
    ___resumeException($20|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($20|0);
   // unreachable;
  }
 } while(0);
 $23 = (($24) + ($id<<2)|0);
 $25 = HEAP32[$23>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $28 = $24;
  $27 = (($28) + ($id<<2)|0);
  HEAP32[$27>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 $$pre = HEAP32[$0>>2]|0;
 $28 = $$pre;
 $27 = (($28) + ($id<<2)|0);
 HEAP32[$27>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6792 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $28 = $1;$6 = $3;$i$02 = 0;
  while(1) {
   $5 = (($6) + ($i$02<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $28;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$0>>2]|0;
    $$pre4 = HEAP32[$2>>2]|0;
    $11 = $$pre;$13 = $$pre4;
   }
   $9 = (($i$02) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $28 = $11;$6 = $13;$i$02 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==($18|0);
 if (!($21)) {
  $__new_last2$i$i$i$i$i = $18;
  $scevgep$i$i$i$i$i = (($20) + -4|0);
  $22 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($22)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $23 = $uglygep3$i$i$i$i$i >>> 2;
  $24 = $23 ^ -1;
  $scevgep4$i$i$i$i$i = (($20) + ($24<<2)|0);
  HEAP32[$0>>2] = $scevgep4$i$i$i$i$i;
 }
 $25 = (($this) + 24|0);
 $26 = ($25|0)==($18|0);
 if ($26) {
  $27 = (($this) + 136|0);
  HEAP8[$27] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($18);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6856]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((6856|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[6832]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((6832|0))|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(60,(11224|0),1);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $13 = ___cxa_find_matching_catch(-1,-1)|0;
     $14 = tempRet0;
     ___cxa_guard_abort((6832|0));
     ___cxa_guard_abort((6856|0));
     ___resumeException($13|0);
     // unreachable;
    } else {
     HEAP32[6816>>2] = 11224;
     HEAP32[6824>>2] = 6816;
     ___cxa_guard_release((6832|0));
     break;
    }
   }
  }
 } while(0);
 $10 = HEAP32[6824>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 HEAP32[6840>>2] = $11;
 __ZNSt3__114__shared_count12__add_sharedEv($11);
 HEAP32[6848>>2] = 6840;
 ___cxa_guard_release((6856|0));
 $12 = HEAP32[6848>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(2)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$x>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i>>2] = $x;
  $3 = (($__p$i$i) + 4|0);
  HEAP32[$3>>2] = (132);
  $4 = (($__p$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i,133);
 }
 $5 = (($x) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6864>>2]|0;HEAP32[6864>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(1)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $1 = HEAP32[$$013>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(1)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9;
  } else {
   $10 = 0;
  }
  HEAP16[$$04>>1] = $10;
  $11 = (($$013) + 4|0);
  $12 = (($$04) + 2|0);
  $13 = ($11|0)==($high|0);
  if ($13) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $11;$$04 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(1)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $12 = (($$02) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(1)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $9 = HEAP32[$4>>2]|0;
    $10 = (($9) + ($3<<1)|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = $11 & $m;
    $13 = ($12<<16>>16)==(0);
    $2 = (($$02) + 4|0);
    if ($13) {
     $$0$lcssa = $$02;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$02 = $2;
    }
   }
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(3)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(3)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(4)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $2 = (invoke_i(4)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = (($7) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $1;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(3)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(3)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $0 = (invoke_i(4)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $4 = tempRet0;
  ___clang_call_terminate($3);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $2 = (invoke_i(4)|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    label = 4;
    break;
   }
   $7 = $1 << 24 >> 24;
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $1;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $5 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012]|0;
   HEAP8[$$03] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(13,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(73,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(29,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(73,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L24: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L24;
         }
         $100 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre99;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L29: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L29;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L45: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(29,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(73,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L45;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L45;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch(-1,-1)|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(73,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch(-1,-1)|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(14,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(73,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre113;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(16,($70|0),($$pre113|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(73,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L22: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L22;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch(-1,-1)|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L30: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(16,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(73,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == -1)) {
         label = 27;
         break;
        } else if ((($47|0) == -2)) {
         label = 28;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L30;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch(-1,-1)|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(73,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch(-1,-1)|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(73,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(29,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(73,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(73,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(30,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(73,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(73,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(73,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(73,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(31,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(73,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(73,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(73,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(73,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51]|0;
       if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48]|0;
       if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77]|0;
      if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7040 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7040 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,7120,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(7128)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,7128,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,7152,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(7160)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,7160,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7192]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[7184>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((7192|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[7184>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[14392]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14392|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((14224|0),0,168)|0;
   (_atexit((137|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14392|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(18,(14224|0),(14400|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(18,(((14224 + 12|0))|0),(14408|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(18,(((14224 + 24|0))|0),(14416|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(18,(((14224 + 36|0))|0),(14424|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(18,(((14224 + 48|0))|0),(14440|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(18,(((14224 + 60|0))|0),(14456|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(18,(((14224 + 72|0))|0),(14464|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(18,(((14224 + 84|0))|0),(14480|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(18,(((14224 + 96|0))|0),(14488|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(18,(((14224 + 108|0))|0),(14496|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(18,(((14224 + 120|0))|0),(14504|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(18,(((14224 + 132|0))|0),(14512|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(18,(((14224 + 144|0))|0),(14520|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(18,(((14224 + 156|0))|0),(14528|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[7184>>2] = 14224;
               ___cxa_guard_release((7192|0));
               $36 = HEAP32[7184>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((7192|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7208]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[7200>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((7208|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[7200>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[13856]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13856|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13688|0),0,168)|0;
   (_atexit((138|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13856|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(19,(13688|0),(13864|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(19,(((13688 + 12|0))|0),(13896|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(19,(((13688 + 24|0))|0),(13928|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(19,(((13688 + 36|0))|0),(13960|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(19,(((13688 + 48|0))|0),(14000|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(19,(((13688 + 60|0))|0),(14040|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(19,(((13688 + 72|0))|0),(14072|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(19,(((13688 + 84|0))|0),(14112|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(19,(((13688 + 96|0))|0),(14128|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(19,(((13688 + 108|0))|0),(14144|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(19,(((13688 + 120|0))|0),(14160|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(19,(((13688 + 132|0))|0),(14176|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(19,(((13688 + 144|0))|0),(14192|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(19,(((13688 + 156|0))|0),(14208|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[7200>>2] = 13688;
               ___cxa_guard_release((7208|0));
               $36 = HEAP32[7200>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch(-1,-1)|0;
 $38 = tempRet0;
 ___cxa_guard_abort((7208|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7224]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[7216>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((7224|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[7216>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[13464]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13464|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13176|0),0,288)|0;
   (_atexit((139|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13464|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(18,(13176|0),(13472|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(18,(((13176 + 12|0))|0),(13480|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(18,(((13176 + 24|0))|0),(13496|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(18,(((13176 + 36|0))|0),(13504|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(18,(((13176 + 48|0))|0),(13512|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(18,(((13176 + 60|0))|0),(13520|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(18,(((13176 + 72|0))|0),(13528|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(18,(((13176 + 84|0))|0),(13536|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(18,(((13176 + 96|0))|0),(13544|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(18,(((13176 + 108|0))|0),(13560|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(18,(((13176 + 120|0))|0),(13568|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(18,(((13176 + 132|0))|0),(13584|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(18,(((13176 + 144|0))|0),(13600|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(18,(((13176 + 156|0))|0),(13608|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(18,(((13176 + 168|0))|0),(13616|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(18,(((13176 + 180|0))|0),(13624|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(18,(((13176 + 192|0))|0),(13512|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  __THREW__ = 0;
                  (invoke_iii(18,(((13176 + 204|0))|0),(13632|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if (!($43)) {
                   __THREW__ = 0;
                   (invoke_iii(18,(((13176 + 216|0))|0),(13640|0))|0);
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if (!($45)) {
                    __THREW__ = 0;
                    (invoke_iii(18,(((13176 + 228|0))|0),(13648|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if (!($47)) {
                     __THREW__ = 0;
                     (invoke_iii(18,(((13176 + 240|0))|0),(13656|0))|0);
                     $48 = __THREW__; __THREW__ = 0;
                     $49 = $48&1;
                     if (!($49)) {
                      __THREW__ = 0;
                      (invoke_iii(18,(((13176 + 252|0))|0),(13664|0))|0);
                      $50 = __THREW__; __THREW__ = 0;
                      $51 = $50&1;
                      if (!($51)) {
                       __THREW__ = 0;
                       (invoke_iii(18,(((13176 + 264|0))|0),(13672|0))|0);
                       $52 = __THREW__; __THREW__ = 0;
                       $53 = $52&1;
                       if (!($53)) {
                        __THREW__ = 0;
                        (invoke_iii(18,(((13176 + 276|0))|0),(13680|0))|0);
                        $54 = __THREW__; __THREW__ = 0;
                        $55 = $54&1;
                        if (!($55)) {
                         HEAP32[7216>>2] = 13176;
                         ___cxa_guard_release((7224|0));
                         $56 = HEAP32[7216>>2]|0;
                         STACKTOP = sp;return ($56|0);
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((7224|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7240]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[7232>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((7240|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[7232>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[12624]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12624|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12336|0),0,288)|0;
   (_atexit((140|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12624|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(19,(12336|0),(12632|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(19,(((12336 + 12|0))|0),(12664|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(19,(((12336 + 24|0))|0),(12704|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(19,(((12336 + 36|0))|0),(12728|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(19,(((12336 + 48|0))|0),(13048|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(19,(((12336 + 60|0))|0),(12752|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(19,(((12336 + 72|0))|0),(12776|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(19,(((12336 + 84|0))|0),(12800|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(19,(((12336 + 96|0))|0),(12832|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(19,(((12336 + 108|0))|0),(12872|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(19,(((12336 + 120|0))|0),(12904|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(19,(((12336 + 132|0))|0),(12944|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(19,(((12336 + 144|0))|0),(12984|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(19,(((12336 + 156|0))|0),(13000|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               __THREW__ = 0;
               (invoke_iii(19,(((12336 + 168|0))|0),(13016|0))|0);
               $36 = __THREW__; __THREW__ = 0;
               $37 = $36&1;
               if (!($37)) {
                __THREW__ = 0;
                (invoke_iii(19,(((12336 + 180|0))|0),(13032|0))|0);
                $38 = __THREW__; __THREW__ = 0;
                $39 = $38&1;
                if (!($39)) {
                 __THREW__ = 0;
                 (invoke_iii(19,(((12336 + 192|0))|0),(13048|0))|0);
                 $40 = __THREW__; __THREW__ = 0;
                 $41 = $40&1;
                 if (!($41)) {
                  __THREW__ = 0;
                  (invoke_iii(19,(((12336 + 204|0))|0),(13064|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if (!($43)) {
                   __THREW__ = 0;
                   (invoke_iii(19,(((12336 + 216|0))|0),(13080|0))|0);
                   $44 = __THREW__; __THREW__ = 0;
                   $45 = $44&1;
                   if (!($45)) {
                    __THREW__ = 0;
                    (invoke_iii(19,(((12336 + 228|0))|0),(13096|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if (!($47)) {
                     __THREW__ = 0;
                     (invoke_iii(19,(((12336 + 240|0))|0),(13112|0))|0);
                     $48 = __THREW__; __THREW__ = 0;
                     $49 = $48&1;
                     if (!($49)) {
                      __THREW__ = 0;
                      (invoke_iii(19,(((12336 + 252|0))|0),(13128|0))|0);
                      $50 = __THREW__; __THREW__ = 0;
                      $51 = $50&1;
                      if (!($51)) {
                       __THREW__ = 0;
                       (invoke_iii(19,(((12336 + 264|0))|0),(13144|0))|0);
                       $52 = __THREW__; __THREW__ = 0;
                       $53 = $52&1;
                       if (!($53)) {
                        __THREW__ = 0;
                        (invoke_iii(19,(((12336 + 276|0))|0),(13160|0))|0);
                        $54 = __THREW__; __THREW__ = 0;
                        $55 = $54&1;
                        if (!($55)) {
                         HEAP32[7232>>2] = 12336;
                         ___cxa_guard_release((7240|0));
                         $56 = HEAP32[7232>>2]|0;
                         STACKTOP = sp;return ($56|0);
                        }
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $57 = ___cxa_find_matching_catch(-1,-1)|0;
 $58 = tempRet0;
 ___cxa_guard_abort((7240|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7256]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[7248>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((7256|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[7248>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[12312]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12312|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12024|0),0,288)|0;
   (_atexit((141|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12312|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(18,(12024|0),(12320|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((7256|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(18,(((12024 + 12|0))|0),(12328|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((7256|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[7248>>2] = 12024;
 ___cxa_guard_release((7256|0));
 $12 = HEAP32[7248>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7272]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[7264>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((7272|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[7264>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[11984]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11984|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11696|0),0,288)|0;
   (_atexit((142|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11984|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(19,(11696|0),(11992|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((7272|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(19,(((11696 + 12|0))|0),(12008|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  ___cxa_guard_abort((7272|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[7264>>2] = 11696;
 ___cxa_guard_release((7272|0));
 $12 = HEAP32[7264>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7296]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7280|0);
 }
 $2 = (___cxa_guard_acquire((7296|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7280|0);
 }
 __THREW__ = 0;
 invoke_viii(11,(7280|0),(7304|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7296|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((128|0),(7280|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7296|0));
 STACKTOP = sp;return (7280|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7336]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7320|0);
 }
 $2 = (___cxa_guard_acquire((7336|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7320|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(7344|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(13,(7320|0),(7344|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((143|0),(7320|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7336|0));
   STACKTOP = sp;return (7320|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((7336|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7400]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7384|0);
 }
 $2 = (___cxa_guard_acquire((7400|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7384|0);
 }
 __THREW__ = 0;
 invoke_viii(11,(7384|0),(7408|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7400|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((128|0),(7384|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7400|0));
 STACKTOP = sp;return (7384|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7440]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7424|0);
 }
 $2 = (___cxa_guard_acquire((7440|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7424|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(7448|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(13,(7424|0),(7448|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((143|0),(7424|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7440|0));
   STACKTOP = sp;return (7424|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((7440|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7504]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7488|0);
 }
 $2 = (___cxa_guard_acquire((7504|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7488|0);
 }
 __THREW__ = 0;
 invoke_viii(11,(7488|0),(7512|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7504|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((128|0),(7488|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7504|0));
 STACKTOP = sp;return (7488|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7552]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7536|0);
 }
 $2 = (___cxa_guard_acquire((7552|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7536|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(7560|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(13,(7536|0),(7560|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((143|0),(7536|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7552|0));
   STACKTOP = sp;return (7536|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((7552|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7664]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7648|0);
 }
 $2 = (___cxa_guard_acquire((7664|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7648|0);
 }
 __THREW__ = 0;
 invoke_viii(11,(7648|0),(7672|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_guard_abort((7664|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (_atexit((128|0),(7648|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7664|0));
 STACKTOP = sp;return (7648|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7704]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7688|0);
 }
 $2 = (___cxa_guard_acquire((7704|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7688|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(74,(7712|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(13,(7688|0),(7712|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (_atexit((143|0),(7688|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7704|0));
   STACKTOP = sp;return (7688|0);
  }
 }
 $9 = ___cxa_find_matching_catch(-1,-1)|0;
 $10 = tempRet0;
 ___cxa_guard_abort((7704|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $7;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[6768>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $7;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[6768>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if (!($18)) {
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $13;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $7;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[6768>>2]|0;
 $13 = (+_strtold_l($__a,$__p2,$12));
 $14 = HEAP32[$1>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[$1>>2] = $2;
 }
 $16 = HEAP32[$__p2>>2]|0;
 $17 = ($16|0)==($__a_end|0);
 if (!($17)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $18 = ($14|0)==(34);
 if ($18) {
  HEAP32[$__err>>2] = 4;
 }
 $19 = $13;
 $$0 = $19;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6776|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $9;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[6768>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $22 = 0;$23 = 0;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 $21 = ($17|0)==(34);
 if (!($21)) {
  $22 = $16;$23 = $15;
  tempRet0 = $22;
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[$__err>>2] = 4;
 $22 = -1;$23 = -1;
 tempRet0 = $22;
 STACKTOP = sp;return ($23|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6776|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $9;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[6768>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6776|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $9;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[6768>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(4294967295);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire((6776|0))|0);
   $8 = ($7|0)==(0);
   if (!($8)) {
    __THREW__ = 0;
    $9 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if ($11) {
     $12 = ___cxa_find_matching_catch(-1,-1)|0;
     $13 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($12|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $9;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $14 = HEAP32[6768>>2]|0;
 $15 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($14|0))|0);
 $16 = tempRet0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[$3>>2] = $4;
 }
 $19 = HEAP32[$__p2>>2]|0;
 $20 = ($19|0)==($__a_end|0);
 if (!($20)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($17|0)==(34);
 $22 = ($16>>>0)>(0);
 $23 = ($16|0)==(0);
 $24 = ($15>>>0)>(65535);
 $25 = $23 & $24;
 $26 = $22 | $25;
 $or$cond = $21 | $26;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $15&65535;
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $7;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[6768>>2]|0;
 $13 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($12|0))|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $27 = 0;$28 = 0;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 $19 = ($15|0)==(34);
 if ($19) {
  HEAP32[$__err>>2] = 4;
  $20 = ($14|0)>(0);
  $21 = ($14|0)==(0);
  $22 = ($13>>>0)>(0);
  $23 = $21 & $22;
  $24 = $20 | $23;
  $25 = $24 ? -1 : 0;
  $26 = $24 ? 2147483647 : -2147483648;
  tempRet0 = $26;
  STACKTOP = sp;return ($25|0);
 } else {
  $27 = $14;$28 = $13;
  tempRet0 = $27;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    __THREW__ = 0;
    $7 = (invoke_iiii(25,2147483647,(6784|0),(0|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     $10 = ___cxa_find_matching_catch(-1,-1)|0;
     $11 = tempRet0;
     ___cxa_guard_abort((6776|0));
     ___resumeException($10|0);
     // unreachable;
    } else {
     HEAP32[6768>>2] = $7;
     ___cxa_guard_release((6776|0));
     break;
    }
   }
  }
 } while(0);
 $12 = HEAP32[6768>>2]|0;
 $13 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($12|0))|0);
 $14 = tempRet0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$1>>2] = $2;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($15|0)==(34);
 do {
  if ($19) {
   HEAP32[$__err>>2] = 4;
   $30 = ($14|0)>(0);
   $31 = ($14|0)==(0);
   $32 = ($13>>>0)>(0);
   $33 = $31 & $32;
   $34 = $30 | $33;
   if ($34) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $20 = ($14|0)<(-1);
   $21 = ($14|0)==(-1);
   $22 = ($13>>>0)<(2147483648);
   $23 = $21 & $22;
   $24 = $20 | $23;
   if ($24) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $25 = ($14|0)>(0);
   $26 = ($14|0)==(0);
   $27 = ($13>>>0)>(2147483647);
   $28 = $26 & $27;
   $29 = $25 | $28;
   if ($29) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$__vp>>2]|0;
 $$idx1 = (($__vp) + 4|0);
 $$idx1$val$field = HEAPU8[$$idx1]|(HEAPU8[$$idx1+1|0]<<8)|(HEAPU8[$$idx1+2|0]<<16)|(HEAPU8[$$idx1+3|0]<<24);
 $$idx1$val$index1 = (($$idx1) + 4|0);
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1]|(HEAPU8[$$idx1$val$index1+1|0]<<8)|(HEAPU8[$$idx1$val$index1+2|0]<<16)|(HEAPU8[$$idx1$val$index1+3|0]<<24);
 $0 = $$idx1$val$field2 >> 1;
 $1 = (($$idx$val) + ($0)|0);
 $2 = $$idx1$val$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$idx1$val$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$idx1$val$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  $$0$i = $__n;$10 = $3;
  while(1) {
   $9 = ($10|0)==(0|0);
   if ($9) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$2>>2]|0;
    $12 = $$pre1$i;
   }
   $11 = (($12) + 4|0);
   HEAP32[$2>>2] = $11;
   $13 = (($$0$i) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    break;
   } else {
    $$0$i = $13;$10 = $11;
   }
  }
  STACKTOP = sp;return;
 }
 $15 = (($this) + 16|0);
 $16 = HEAP32[$this>>2]|0;
 $17 = $16;
 $18 = (($5) - ($17))|0;
 $19 = $18 >> 2;
 $20 = (($19) + ($__n))|0;
 $21 = ($20>>>0)>(1073741823);
 if ($21) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $22 = (($4) - ($17))|0;
 $23 = $22 >> 2;
 $24 = ($23>>>0)<(536870911);
 if ($24) {
  $25 = $22 >> 1;
  $26 = ($25>>>0)<($20>>>0);
  $27 = $26 ? $20 : $25;
  $28 = ($27|0)==(0);
  if ($28) {
   $$0$i57 = 0;$36 = 0;
  } else {
   $29 = (($this) + 128|0);
   $30 = HEAP8[$29]|0;
   $31 = ($30<<24>>24)==(0);
   $32 = ($27>>>0)<(29);
   $or$cond$i$i$i$i = $31 & $32;
   if ($or$cond$i$i$i$i) {
    HEAP8[$29] = 1;
    $$0$i57 = $27;$36 = $15;
   } else {
    $$0$i569 = $27;
    label = 11;
   }
  }
 } else {
  $$0$i569 = 1073741823;
  label = 11;
 }
 if ((label|0) == 11) {
  $33 = $$0$i569 << 2;
  $34 = (__Znwj($33)|0);
  $$0$i57 = $$0$i569;$36 = $34;
 }
 $35 = (($36) + ($19<<2)|0);
 $$0$i2 = $__n;$38 = $35;
 while(1) {
  $37 = ($38|0)==(0|0);
  if ($37) {
   $40 = 0;
  } else {
   HEAP32[$38>>2] = 0;
   $40 = $38;
  }
  $39 = (($40) + 4|0);
  $41 = (($$0$i2) + -1)|0;
  $42 = ($41|0)==(0);
  if ($42) {
   break;
  } else {
   $$0$i2 = $41;$38 = $39;
  }
 }
 $43 = (($36) + ($$0$i57<<2)|0);
 $44 = HEAP32[$this>>2]|0;
 $45 = HEAP32[$2>>2]|0;
 $46 = $45;
 $47 = $44;
 $48 = (($46) - ($47))|0;
 $49 = $48 >> 2;
 $$sum = (($19) - ($49))|0;
 $50 = (($36) + ($$sum<<2)|0);
 _memcpy(($50|0),($44|0),($48|0))|0;
 HEAP32[$this>>2] = $50;
 HEAP32[$2>>2] = $39;
 HEAP32[$0>>2] = $43;
 $51 = ($44|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return;
 }
 $52 = ($15|0)==($44|0);
 if ($52) {
  $53 = (($this) + 128|0);
  HEAP8[$53] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($44);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11696);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12024);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12336);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13176);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13688);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14224);
 STACKTOP = sp;return;
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 14744;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 14752 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (14536 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(3);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 30;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(3);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 31;
         break;
        }
       }
       if ((label|0) == 30) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$89]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (14536 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (14536 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $109 = HEAP8[$s$8]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 37;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 40;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 43;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 46;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 46;
 }
 else if ((label|0) == 37) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 46;
 }
 else if ((label|0) == 40) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 46;
 }
 else if ((label|0) == 43) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 46;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 46) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $143 = HEAP8[$s$1044]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$442|0)==(0|0);
   if (!($145)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$840))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$441 = $$442;$s$1043 = $s$1044;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$441|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (14536 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$038 = 0;$6 = $3;$ws2$09 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$14 = (($$pn) + ($$038))|0;
   $9 = (($ws2$09) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$6 = $10;$ws2$09 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre41 = HEAP32[$ws>>2]|0;
   $$0226 = $s;$$2525 = $n;$13 = $$pre41;
   while(1) {
    $12 = HEAP32[$13>>2]|0;
    $14 = ($12|0)==(0);
    if ($14) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $16 = ($12>>>0)>(127);
    if ($16) {
     $17 = (_wcrtomb($$0226,$12,0)|0);
     $18 = ($17|0)==(-1);
     if ($18) {
      $$0 = -1;
      break;
     }
     $19 = (($$0226) + ($17)|0);
     $20 = (($$2525) - ($17))|0;
     $$1 = $19;$$36 = $20;$25 = $13;
    } else {
     $21 = $12&255;
     $22 = (($$0226) + 1|0);
     HEAP8[$$0226] = $21;
     $23 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     $$1 = $22;$$36 = $23;$25 = $$pre42;
    }
    $24 = (($25) + 4|0);
    HEAP32[$ws>>2] = $24;
    $26 = ($$36>>>0)>(3);
    if ($26) {
     $$0226 = $$1;$$2525 = $$36;$13 = $24;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 $15 = ($$25$lcssa|0)==(0);
 L26: do {
  if ($15) {
   $$414 = 0;
  } else {
   $$pre = HEAP32[$ws>>2]|0;
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$28 = $$pre;
   while(1) {
    $27 = HEAP32[$28>>2]|0;
    $29 = ($27|0)==(0);
    if ($29) {
     label = 24;
     break;
    }
    $30 = ($27>>>0)>(127);
    if ($30) {
     $31 = (_wcrtomb($buf,$27,0)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      $$0 = -1;
      label = 26;
      break;
     }
     $33 = ($31>>>0)>($$418>>>0);
     if ($33) {
      label = 20;
      break;
     }
     $35 = HEAP32[$28>>2]|0;
     (_wcrtomb($$219,$35,0)|0);
     $36 = (($$219) + ($31)|0);
     $37 = (($$418) - ($31))|0;
     $$3 = $36;$$5 = $37;$42 = $28;
    } else {
     $38 = $27&255;
     $39 = (($$219) + 1|0);
     HEAP8[$$219] = $38;
     $40 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     $$3 = $39;$$5 = $40;$42 = $$pre40;
    }
    $41 = (($42) + 4|0);
    HEAP32[$ws>>2] = $41;
    $43 = ($$5|0)==(0);
    if ($43) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$28 = $41;
    }
   }
   if ((label|0) == 20) {
    $34 = (($n) - ($$418))|0;
    $$0 = $34;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 24) {
    HEAP8[$$219] = 0;
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$ws>>2] = 0;
 $44 = (($n) - ($$414))|0;
 $$0 = $44;
 STACKTOP = sp;return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14760 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (14784|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,14896,14952,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 15]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 15]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 15]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 15]($48,$info,$52,$55);
  $56 = HEAP8[$39]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38|0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 15]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 3]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28] = 0;
       HEAP8[$29] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 15]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 3]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 3]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 3]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 3]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 3]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 15]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32] = 0;
  HEAP8[$34] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 15]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32] = 0;
     HEAP8[$34] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 15]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32] = $33;
  HEAP8[$34] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 15]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[15200>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((15200 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((15200 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[15200>>2] = $22;
     } else {
      $23 = HEAP32[((15200 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((15200 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((15200 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((15200 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[15200>>2] = $74;
      } else {
       $75 = HEAP32[((15200 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((15200 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((15200 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((15200 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[15200>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[15200>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((15200 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((15200 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((15200 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((15200 + 8|0))>>2] = $81;
     HEAP32[((15200 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((15200 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((15200 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((15200 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((15200 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((15200 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((15200 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((15200 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((15200 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((15200 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((15200 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((15200 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((15200 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((15200 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[15200>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[15200>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((15200 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((15200 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((15200 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((15200 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((15200 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((15200 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((15200 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((15200 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((15200 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((15200 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((15200 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((15200 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((15200 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((15200 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((15200 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((15200 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((15200 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((15200 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[15200>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          if ($431) {
           $432 = $428 | $429;
           HEAP32[15200>>2] = $432;
           $$sum14$pre$i = (($426) + 2)|0;
           $$pre$i25 = ((15200 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
          } else {
           $$sum17$i = (($426) + 2)|0;
           $433 = ((15200 + ($$sum17$i<<2)|0) + 40|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = HEAP32[((15200 + 16|0))>>2]|0;
           $436 = ($434>>>0)<($435>>>0);
           if ($436) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((15200 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((15200 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((15200 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((15200 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((15200 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((15200 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((15200 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((15200 + 20|0))>>2] = $516;
   HEAP32[((15200 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((15200 + 8|0))>>2] = 0;
   HEAP32[((15200 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((15200 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((15200 + 12|0))>>2] = $530;
  $531 = HEAP32[((15200 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((15200 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[15672>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((15672 + 8|0))>>2] = $540;
    HEAP32[((15672 + 4|0))>>2] = $540;
    HEAP32[((15672 + 12|0))>>2] = -1;
    HEAP32[((15672 + 16|0))>>2] = -1;
    HEAP32[((15672 + 20|0))>>2] = 0;
    HEAP32[((15200 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[15672>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((15672 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((15200 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((15200 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((15200 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((15200 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((15200 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((15200 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((15672 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((15200 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((15200 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((15672 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((15200 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((15200 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((15200 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((15200 + 432|0))>>2] = $633;
  $634 = HEAP32[((15200 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((15200 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((15200 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((15200 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((15200 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((15200 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15200 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15200 + 460|0))>>2] = 0;
    $641 = HEAP32[15672>>2]|0;
    HEAP32[((15200 + 36|0))>>2] = $641;
    HEAP32[((15200 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((15200 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((15200 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((15200 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((15200 + 24|0))>>2] = $654;
    HEAP32[((15200 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((15672 + 16|0))>>2]|0;
    HEAP32[((15200 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((15200 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((15200 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((15200 + 24|0))>>2] = $684;
       HEAP32[((15200 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((15672 + 16|0))>>2]|0;
       HEAP32[((15200 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((15200 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((15200 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((15200 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((15200 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((15200 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((15200 + 12|0))>>2] = $732;
        HEAP32[((15200 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((15200 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((15200 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((15200 + 8|0))>>2] = $738;
         HEAP32[((15200 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((15200 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           if (!($755)) {
            $756 = HEAP32[((15200 + 16|0))>>2]|0;
            $757 = ($750>>>0)<($756>>>0);
            if ($757) {
             _abort();
             // unreachable;
            }
            $758 = (($750) + 12|0);
            $759 = HEAP32[$758>>2]|0;
            $760 = ($759|0)==($721|0);
            if (!($760)) {
             _abort();
             // unreachable;
            }
           }
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[15200>>2]|0;
            $765 = $764 & $763;
            HEAP32[15200>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           if ($766) {
            $$pre57$i$i = (($752) + 8|0);
            $$pre$phi58$i$iZ2D = $$pre57$i$i;
           } else {
            $767 = HEAP32[((15200 + 16|0))>>2]|0;
            $768 = ($752>>>0)<($767>>>0);
            if ($768) {
             _abort();
             // unreachable;
            }
            $769 = (($752) + 8|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = ($770|0)==($721|0);
            if ($771) {
             $$pre$phi58$i$iZ2D = $769;
            } else {
             _abort();
             // unreachable;
            }
           }
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((15200 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((15200 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if (!($802)) {
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($720))|0;
            $803 = (($tbase$247$i) + ($$sum113$i)|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = ((15200 + ($804<<2)|0) + 304|0);
            $806 = HEAP32[$805>>2]|0;
            $807 = ($721|0)==($806|0);
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if ($cond$i$i) {
              $808 = 1 << $804;
              $809 = $808 ^ -1;
              $810 = HEAP32[((15200 + 4|0))>>2]|0;
              $811 = $810 & $809;
              HEAP32[((15200 + 4|0))>>2] = $811;
              break;
             }
            } else {
             $812 = HEAP32[((15200 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break;
             }
            }
            $819 = HEAP32[((15200 + 16|0))>>2]|0;
            $820 = ($R$1$i$i>>>0)<($819>>>0);
            if ($820) {
             _abort();
             // unreachable;
            }
            $821 = (($R$1$i$i) + 24|0);
            HEAP32[$821>>2] = $774;
            $$sum3132$i$i = $720 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $822 = (($tbase$247$i) + ($$sum114$i)|0);
            $823 = HEAP32[$822>>2]|0;
            $824 = ($823|0)==(0|0);
            do {
             if (!($824)) {
              $825 = HEAP32[((15200 + 16|0))>>2]|0;
              $826 = ($823>>>0)<($825>>>0);
              if ($826) {
               _abort();
               // unreachable;
              } else {
               $827 = (($R$1$i$i) + 16|0);
               HEAP32[$827>>2] = $823;
               $828 = (($823) + 24|0);
               HEAP32[$828>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $829 = (($tbase$247$i) + ($$sum115$i)|0);
            $830 = HEAP32[$829>>2]|0;
            $831 = ($830|0)==(0|0);
            if (!($831)) {
             $832 = HEAP32[((15200 + 16|0))>>2]|0;
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              _abort();
              // unreachable;
             } else {
              $834 = (($R$1$i$i) + 20|0);
              HEAP32[$834>>2] = $830;
              $835 = (($830) + 24|0);
              HEAP32[$835>>2] = $R$1$i$i;
              break;
             }
            }
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((15200 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[15200>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         if ($851) {
          $852 = $848 | $849;
          HEAP32[15200>>2] = $852;
          $$sum26$pre$i$i = (($846) + 2)|0;
          $$pre$i25$i = ((15200 + ($$sum26$pre$i$i<<2)|0) + 40|0);
          $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
         } else {
          $$sum29$i$i = (($846) + 2)|0;
          $853 = ((15200 + ($$sum29$i$i<<2)|0) + 40|0);
          $854 = HEAP32[$853>>2]|0;
          $855 = HEAP32[((15200 + 16|0))>>2]|0;
          $856 = ($854>>>0)<($855>>>0);
          if ($856) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
          }
         }
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        if ($861) {
         $I7$0$i$i = 0;
        } else {
         $862 = ($qsize$0$i$i>>>0)>(16777215);
         if ($862) {
          $I7$0$i$i = 31;
         } else {
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        }
        $885 = ((15200 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((15200 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((15200 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((15200 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((15200 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((15200 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((15200 + 24|0))>>2] = $958;
    HEAP32[((15200 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((15672 + 16|0))>>2]|0;
    HEAP32[((15200 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((15200 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((15200 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((15200 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((15200 + 448|0))+12>>2]|0;
    HEAP32[((15200 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15200 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15200 + 460|0))>>2] = 0;
    HEAP32[((15200 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((15200 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[15200>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      if ($990) {
       $991 = $987 | $988;
       HEAP32[15200>>2] = $991;
       $$sum10$pre$i$i = (($985) + 2)|0;
       $$pre$i$i = ((15200 + ($$sum10$pre$i$i<<2)|0) + 40|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
      } else {
       $$sum11$i$i = (($985) + 2)|0;
       $992 = ((15200 + ($$sum11$i$i<<2)|0) + 40|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = HEAP32[((15200 + 16|0))>>2]|0;
       $995 = ($993>>>0)<($994>>>0);
       if ($995) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((15200 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((15200 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((15200 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((15200 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((15200 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((15200 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((15200 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((15200 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((15200 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((15200 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((15200 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((15200 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((15200 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[15200>>2]|0;
     $36 = $35 & $34;
     HEAP32[15200>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((15200 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((15200 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((15200 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((15200 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((15200 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((15200 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((15200 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((15200 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((15200 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((15200 + 12|0))>>2] = $122;
   HEAP32[((15200 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((15200 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15200 + 20|0))>>2] = 0;
   HEAP32[((15200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((15200 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((15200 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((15200 + 8|0))>>2] = $130;
   HEAP32[((15200 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((15200 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((15200 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[15200>>2]|0;
     $154 = $153 & $152;
     HEAP32[15200>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((15200 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((15200 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((15200 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((15200 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((15200 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((15200 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((15200 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((15200 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((15200 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((15200 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((15200 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((15200 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((15200 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[15200>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[15200>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((15200 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((15200 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((15200 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((15200 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((15200 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((15200 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((15200 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((15200 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((15200 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((15200 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((15200 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((15200 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((15200 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((15672 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((15200 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((15200 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((15200 + 24|0))>>2] = $38;
  HEAP32[((15200 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((15200 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((15200 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((15200 + 8|0))>>2] = $storemerge21;
  HEAP32[((15200 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((15200 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[15200>>2]|0;
    $90 = $89 & $88;
    HEAP32[15200>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((15200 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((15200 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((15200 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((15200 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((15200 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((15200 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((15200 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((15200 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((15200 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((15200 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((15200 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[15200>>2]|0;
     $32 = $31 & $30;
     HEAP32[15200>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((15200 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((15200 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((15200 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((15200 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((15200 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((15200 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((15200 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((15200 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((15200 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((15200 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((15200 + 12|0))>>2] = $117;
   HEAP32[((15200 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((15200 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15200 + 20|0))>>2] = 0;
   HEAP32[((15200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((15200 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((15200 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((15200 + 8|0))>>2] = $125;
   HEAP32[((15200 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((15200 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[15200>>2]|0;
     $148 = $147 & $146;
     HEAP32[15200>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((15200 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((15200 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((15200 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((15200 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((15200 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((15200 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((15200 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((15200 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((15200 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((15200 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[15200>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[15200>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((15200 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((15200 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((15200 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((15200 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((15200 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((15200 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((15200 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((15200 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 10;
   break;
  }
  $3 = HEAP32[15696>>2]|0;HEAP32[15696>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 9;
   break;
  }
  $5 = $3;
  __THREW__ = 0;
  invoke_v($5|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ___cxa_find_matching_catch(-1,-1,15760|0)|0;
   $9 = tempRet0;
   $lpad$phi$index = $8;$lpad$phi$index2 = $9;
  }
  else if ((label|0) == 9) {
   $13 = (___cxa_allocate_exception(4)|0);
   HEAP32[$13>>2] = ((15704 + 8|0));
   __THREW__ = 0;
   invoke_viii(9,($13|0),(15760|0),(120|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $10 = ___cxa_find_matching_catch(-1,-1,15760|0)|0;
    $11 = tempRet0;
    $lpad$phi$index = $10;$lpad$phi$index2 = $11;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return ($1|0);
  }
 } while(0);
 $12 = ($lpad$phi$index2|0)<(0);
 if ($12) {
  ___cxa_call_unexpected(($lpad$phi$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_ii(72,($size|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = ___cxa_find_matching_catch(-1,-1,15760|0)|0;
 $4 = tempRet0;
 $5 = ($4|0)<(0);
 if ($5) {
  ___cxa_call_unexpected(($3|0));
  // unreachable;
 } else {
  ___resumeException($3|0);
  // unreachable;
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (15728|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 HEAP32[$0>>2] = ((15704 + 8|0));
 ___cxa_throw(($0|0),(15760|0),(120|0));
 // unreachable;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace(($9|0))|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (15776 + ($i$068)|0);
  $25 = HEAP8[$24]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (15792 + ($i$263)|0);
      $55 = HEAP8[$54]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L102: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L102;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L115: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L115;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L115;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      if ($302) {
       $303 = (84 - ($$02$i))|0;
       $304 = (+_scalbn(1.0,$303));
       $305 = (+($sign$0|0));
       $306 = (+_copysign((+$304),(+$305)));
       $307 = ($$02$i|0)<(32);
       $308 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $308;
       if ($or$cond4$i) {
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } else {
       $$pre$i = (+($sign$0|0));
       $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
      }
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L204: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L204;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L218: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L218;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (15808 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (15808 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (15808 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L316: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L316;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L347: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (15800 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L347;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysign((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmod((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    if ($658) {
     $frac$2$i = $frac$0$i;
    } else {
     $659 = (($x$i) + ($657<<2)|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = ($660>>>0)<(500000000);
     do {
      if ($661) {
       $662 = ($660|0)==(0);
       if ($662) {
        $663 = (($a$3$i) + 3)|0;
        $664 = $663 & 127;
        $665 = ($664|0)==($z$7$1$i|0);
        if ($665) {
         $frac$1$i = $frac$0$i;
         break;
        }
       }
       $666 = $667 * 0.25;
       $668 = $666 + $frac$0$i;
       $frac$1$i = $668;
      } else {
       $669 = ($660>>>0)>(500000000);
       if ($669) {
        $670 = $667 * 0.75;
        $671 = $670 + $frac$0$i;
        $frac$1$i = $671;
        break;
       }
       $672 = (($a$3$i) + 3)|0;
       $673 = $672 & 127;
       $674 = ($673|0)==($z$7$1$i|0);
       if ($674) {
        $675 = $667 * 0.5;
        $676 = $675 + $frac$0$i;
        $frac$1$i = $676;
        break;
       } else {
        $677 = $667 * 0.75;
        $678 = $677 + $frac$0$i;
        $frac$1$i = $678;
        break;
       }
      }
     } while(0);
     $679 = (53 - ($$09$i))|0;
     $680 = ($679|0)>(1);
     if ($680) {
      $681 = (+_fmod((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
      } else {
       $683 = $frac$1$i + 1.0;
       $frac$2$i = $683;
      }
     } else {
      $frac$2$i = $frac$1$i;
     }
    }
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04]|0;
    $2 = HEAP8[$r$05]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function runPostSets() {
 HEAP32[948] = __ZTISt9exception;HEAP32[974] = __ZTISt9exception;HEAP32[3712] = __ZTISt9exception;HEAP32[3942] = __ZTISt9exception;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_viiidddd(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
    FUNCTION_TABLE_viiidddd[index&3](a1|0,a2|0,a3|0,+a4,+a5,+a6,+a7);
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiidd(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5;
    FUNCTION_TABLE_viiidd[index&3](a1|0,a2|0,a3|0,+a4,+a5);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&3](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&7]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&7]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b5(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_viiidddd(5); }
  function b6(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(6);return 0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function _vasprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _vasprintf(p0|0,p1|0,p2|0)|0; }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(8); }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(9); }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
  function b12(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_viiidd(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(16); }
  function b17(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0; }
  function _isxdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isxdigit_l(p0|0,p1|0)|0; }
  function _isdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isdigit_l(p0|0,p1|0)|0; }
  function b18(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(18);return 0; }
  function b19(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(19);return +0; }
  function b20() { ; nullFunc_i(20);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b21(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(21);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b22(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(22); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b23() { ; nullFunc_v(23); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function b24(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(24);return 0; }
  function b25(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0];
  var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_vi = [b2,__ZN4JSUID1Ev,__ZN4JSUID0Ev,__ZN4JSUI8closeBoxEv,__ZN2UID1Ev,__ZN2UID0Ev,__ZN19ReverbDesigner_wrapD1Ev,__ZN19ReverbDesigner_wrapD0Ev,__ZN14ReverbDesignerD1Ev,__ZN14ReverbDesignerD0Ev,__ZN3dspD1Ev,__ZN3dspD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
  ,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev
  ,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN19ReverbDesigner_wrapC1Ev,__ZN4JSUIC1Ev,__ZN2UID2Ev,__ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev,__ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev,__ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,_free,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,__ZN4JSUI10openTabBoxEPKc,__ZN4JSUI17openHorizontalBoxEPKc,__ZN4JSUI15openVerticalBoxEPKc,__ZN14ReverbDesigner18buildUserInterfaceEP2UI,__ZN14ReverbDesigner4initEi,__ZN14ReverbDesigner12instanceInitEi,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv
  ,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,__ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_,__ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_,__ZNSt3__18ios_base4initEPv,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt11logic_errorC2EPKc,__ZNSt3__18ios_base5clearEj,__ZNKSt3__18ios_base6getlocEv,__ZNSt13runtime_errorC2EPKc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj
  ,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj,__ZNSt3__16locale5__impC2Ej,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,__ZN14ReverbDesigner12getNumInputsEv,__ZN14ReverbDesigner13getNumOutputsEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
  ,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv
  ,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,__Znaj,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,__Znwj,_uselocale__wrapper,_wcslen,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viiidddd = [b5,__ZN4JSUI17addVerticalSliderEPKcPfffff,__ZN4JSUI19addHorizontalSliderEPKcPfffff,__ZN4JSUI11addNumEntryEPKcPfffff];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b6,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b6];
  var FUNCTION_TABLE_iiii = [b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_memcmp,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,_newlocale__wrapper,_vasprintf__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_
  ,_wcrtomb,_mbtowc,_mbrlen];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b8,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b8];
  var FUNCTION_TABLE_viiiiid = [b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiii = [b10,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b10];
  var FUNCTION_TABLE_viiiiii = [b11,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
  var FUNCTION_TABLE_viiidd = [b12,__ZN4JSUI21addHorizontalBargraphEPKcPfff,__ZN4JSUI19addVerticalBargraphEPKcPfff,b12];
  var FUNCTION_TABLE_viiiiiii = [b13,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiid = [b14,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b14];
  var FUNCTION_TABLE_viiiiiiiii = [b15,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b15];
  var FUNCTION_TABLE_viiiiiiiiii = [b16,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b16,b16,b16];
  var FUNCTION_TABLE_iii = [b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZNKSt3__16locale9use_facetERNS0_2idE,_isxdigit_l__wrapper,_isdigit_l__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17];
  var FUNCTION_TABLE_iiiiii = [b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,_wcsnrtombs,_mbsnrtowcs,b18];
  var FUNCTION_TABLE_diii = [b19,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj];
  var FUNCTION_TABLE_i = [b20,___ctype_b_loc__wrapper,__ZNSt3__16locale8__globalEv,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b20,b20,b20];
  var FUNCTION_TABLE_iiiii = [b21,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,_mbsrtowcs,_catgets__wrapper,_mbrtowc,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21];
  var FUNCTION_TABLE_viii = [b22,__ZN4JSUI9addButtonEPKcPf,__ZN4JSUI14addCheckButtonEPKcPf,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,__ZNSt3__111__call_onceERVmPvPFvS2_E,___cxa_throw__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b22,b22];
  var FUNCTION_TABLE_v = [b23,___cxa_pure_virtual__wrapper,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,__ZSt17__throw_bad_allocv,b23,b23,b23];
  var FUNCTION_TABLE_iiiiiiiii = [b24,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b24,b24,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_viiii = [b25,__ZN4JSUI7declareEPfPKcS2_,__ZN2UI7declareEPfPKcS2_,__ZN14ReverbDesigner7computeEiPPfS1_,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_,b25,b25,b25,b25];

  return { _REVERBDESIGNER_getNumInputs: _REVERBDESIGNER_getNumInputs, _i64Subtract: _i64Subtract, _free: _free, _memset: _memset, _realloc: _realloc, _i64Add: _i64Add, _REVERBDESIGNER_getNumParams: _REVERBDESIGNER_getNumParams, _REVERBDESIGNER_destructor: _REVERBDESIGNER_destructor, _REVERBDESIGNER_getNextParam: _REVERBDESIGNER_getNextParam, _REVERBDESIGNER_compute: _REVERBDESIGNER_compute, _malloc: _malloc, _REVERBDESIGNER_constructor: _REVERBDESIGNER_constructor, _memcpy: _memcpy, _strlen: _strlen, _memmove: _memmove, _strcpy: _strcpy, _REVERBDESIGNER_getNumOutputs: _REVERBDESIGNER_getNumOutputs, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viiidddd: dynCall_viiidddd, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiidd: dynCall_viiidd, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viiidddd": nullFunc_viiidddd, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiidd": nullFunc_viiidd, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viiidddd": invoke_viiidddd, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiidd": invoke_viiidd, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_tanf": _tanf, "_fileno": _fileno, "_fread": _fread, "_write": _write, "__isLeapYear": __isLeapYear, "_expf": _expf, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_send": _send, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_llvm_pow_f32": _llvm_pow_f32, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_sprintf": _sprintf, "_vasprintf": _vasprintf, "_logf": _logf, "_vsnprintf": _vsnprintf, "_strtoull_l": _strtoull_l, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_allocate_exception": ___cxa_allocate_exception, "_strtoll": _strtoll, "_pwrite": _pwrite, "_uselocale": _uselocale, "_snprintf": _snprintf, "___errno_location": ___errno_location, "___cxa_end_catch": ___cxa_end_catch, "_strtoull": _strtoull, "_strftime": _strftime, "_isxdigit": _isxdigit, "_floorf": _floorf, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_copysign": _copysign, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_abort": _abort, "_isspace": _isspace, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_cond_wait": _pthread_cond_wait, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_sscanf": _sscanf, "_catgets": _catgets, "_asprintf": _asprintf, "_strtoll_l": _strtoll_l, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "__scanString": __scanString, "_fgetc": _fgetc, "___cxa_throw": ___cxa_throw, "_isdigit": _isdigit, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _REVERBDESIGNER_getNumInputs = Module["_REVERBDESIGNER_getNumInputs"] = asm["_REVERBDESIGNER_getNumInputs"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _REVERBDESIGNER_getNumParams = Module["_REVERBDESIGNER_getNumParams"] = asm["_REVERBDESIGNER_getNumParams"];
var _REVERBDESIGNER_destructor = Module["_REVERBDESIGNER_destructor"] = asm["_REVERBDESIGNER_destructor"];
var _REVERBDESIGNER_getNextParam = Module["_REVERBDESIGNER_getNextParam"] = asm["_REVERBDESIGNER_getNextParam"];
var _REVERBDESIGNER_compute = Module["_REVERBDESIGNER_compute"] = asm["_REVERBDESIGNER_compute"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _REVERBDESIGNER_constructor = Module["_REVERBDESIGNER_constructor"] = asm["_REVERBDESIGNER_constructor"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _REVERBDESIGNER_getNumOutputs = Module["_REVERBDESIGNER_getNumOutputs"] = asm["_REVERBDESIGNER_getNumOutputs"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiidddd = Module["dynCall_viiidddd"] = asm["dynCall_viiidddd"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiidd = Module["dynCall_viiidd"] = asm["dynCall_viiidd"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




  // This should be made to only make a new context if one does not exist

  if (!faust.context)
  {
    faust.context = new AudioContext();
  }

  var REVERBDESIGNER_constructor = Module.cwrap('REVERBDESIGNER_constructor', 'number', 'number');
  var REVERBDESIGNER_destructor = Module.cwrap('REVERBDESIGNER_destructor', null, ['number']);
  var REVERBDESIGNER_compute = Module.cwrap('REVERBDESIGNER_compute', ['number'], ['number', 'number', 'number', 'number']);
  var REVERBDESIGNER_getNumInputs = Module.cwrap('REVERBDESIGNER_getNumInputs', 'number', 'number');
  var REVERBDESIGNER_getNumOutputs = Module.cwrap('REVERBDESIGNER_getNumOutputs', 'number', 'number');
  var REVERBDESIGNER_getNumParams = Module.cwrap('REVERBDESIGNER_getNumParams', 'number', 'number');
  var REVERBDESIGNER_getNextParam = Module.cwrap('REVERBDESIGNER_getNextParam', 'number', ['number', 'number']);

  faust.reverbDesigner = function () {
    var that = {};
    
    that.model = {
      playing: false
    };

    that.ptr = REVERBDESIGNER_constructor(faust.context.sampleRate);

    // Bind to C++ Member Functions

    that.getNumInputs = function () {
      return REVERBDESIGNER_getNumInputs(that.ptr);
    };

    that.getNumOutputs = function () {
      return REVERBDESIGNER_getNumOutputs(that.ptr);
    };

    that.compute = function (e) {
      var reverbDesignerOutChans = HEAP32.subarray(that.outs >> 2, (that.outs + that.numOut * that.ptrsize) >> 2);
      var reverbDesignerInChans = HEAP32.subarray(that.ins >> 2, (that.ins + that.ins * that.ptrsize) >> 2);
      var i, j;
      for (i = 0; i < that.numIn; i++)
      {
        var input = e.inputBuffer.getChannelData(i);
        var reverbDesignerInput = HEAPF32.subarray(reverbDesignerInChans[i] >> 2, (reverbDesignerInChans[i] + that.vectorsize * that.ptrsize) >> 2);

        for (j = 0; j < input.length; j++) {
          reverbDesignerInput[j] = input[j];
        }
      }

      REVERBDESIGNER_compute(that.ptr, that.vectorsize, that.ins, that.outs);

      for (i = 0; i < that.numOut; i++)
      {
        var output = e.outputBuffer.getChannelData(i);
        var reverbDesignerOutput = HEAPF32.subarray(reverbDesignerOutChans[i] >> 2, (reverbDesignerOutChans[i] + that.vectorsize * that.ptrsize) >> 2);

        for (j = 0; j < output.length; j++) {
          output[j] = reverbDesignerOutput[j];
        }
      }
      return that;
    };

    that.destroy = function () {
      REVERBDESIGNER_destructor(that.ptr);
      return that;
    };

    // Connect to another node
    that.connect = function (node) {
      if (node.scriptProcessor)
      {
        that.scriptProcessor.connect(node.scriptProcessor);
      }
      else {
        that.scriptProcessor.connect(node);
      }
      return that;
    };

    // Bind to Web Audio

    that.play = function () {
      that.scriptProcessor.connect(faust.context.destination);
      that.model.playing = true;
      return that;
    };

    that.pause = function () {
      that.scriptProcessor.disconnect(faust.context.destination);
      that.model.playing = false;
      return that;
    };

    that.toggle = function() {
      if (that.model.playing) {
        that.pause()
      }
      else {
        that.play();
      }
      return that;
    }

    that.setupModel = function () {
      var i;
      var numParams = REVERBDESIGNER_getNumParams(that.ptr);
      for (i = 0; i < numParams; i++) {
        //TODO keyptr is allocated on stack, but is it properly freed?
        var keyPtr = allocate(intArrayFromString(''), 'i8', ALLOC_STACK);
        var valPtr = REVERBDESIGNER_getNextParam(that.ptr, keyPtr);
        var key = Pointer_stringify(keyPtr);
        that.model[key] = {
          value: HEAPF32[valPtr >> 2],
          pointer: valPtr
        };
      }
      return that;
    };

    that.update = function (key, val) {
      that.model[key].value = val;
      HEAPF32[that.model[key].pointer >> 2] = val;
      return that;
    };

    that.init = function () {
      var i;
      that.ptrsize = 4; //assuming pointer in emscripten are 32bits
      that.vectorsize = 2048;
      that.samplesize = 4;

      // Get input / output counts
      that.numIn = that.getNumInputs();
      that.numOut = that.getNumOutputs();

      // Setup web audio context
      that.scriptProcessor = faust.context.createScriptProcessor(that.vectorsize, that.numIn, that.numOut);
      that.scriptProcessor.onaudioprocess = that.compute;

      // TODO the below calls to malloc are not yet being freed, potential memory leak
      // allocate memory for input / output arrays
      that.ins = Module._malloc(that.ptrsize * that.numIn);

      // assign to our array of pointer elements an array of 32bit floats, one for each channel. currently we assume pointers are 32bits
      for (i = 0; i < that.numIn; i++) { 
        // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
        HEAP32[(that.ins >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize); 
      }

      //ptrsize, change to eight or use Runtime.QUANTUM? or what?
      that.outs = Module._malloc(that.ptrsize * that.numOut); 

      // assign to our array of pointer elements an array of 64bit floats, one for each channel. currently we assume pointers are 32bits
      for (i = 0; i < that.numOut; i++) { 
        // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
        HEAP32[(that.outs >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize);
      }
      that.setupModel();
      return that;
    };

    that.init();

    return that;
  };
}());
