/*
faust2webaduio

Primarily written by Myles Borins
During the Spring 2013 offering of Music 420b with Julius Smith
A bit during the Summer of 2013 with the help of Joshua Kit Clayton
And finally a sprint during the late fall of 2013 to get everything working
A Special thanks to Yann Orlarey and StÃ©phane Letz

faust2webaudio is distributed under the terms the MIT or GPL2 Licenses.
Choose the license that best suits your project. The text of the MIT and GPL
licenses are at the root directory.

*/

/*global webkitAudioContext, Module, HEAPF32, HEAP32, Pointer_stringify, ALLOC_STACK, intArrayFromString, allocate*/

var faust = faust || {};

// Shim AudioConext on webkit
window.AudioContext = window.AudioContext || window.webkitAudioContext || undefined;

(function () {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 14968;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 15008;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(15835);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });


/* memory initializer */ allocate([0,0,0,0,96,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,52,74,83,85,73,0,0,0,50,85,73,0,0,0,0,0,128,58,0,0,80,0,0,0,168,58,0,0,72,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,40,1,0,0,6,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,49,57,82,101,118,101,114,98,68,101,115,105,103,110,101,114,95,119,114,97,112,0,0,0,49,52,82,101,118,101,114,98,68,101,115,105,103,110,101,114,0,0,0,0,0,0,0,0,51,100,115,112,0,0,0,0,128,58,0,0,8,1,0,0,168,58,0,0,240,0,0,0,16,1,0,0,0,0,0,0,168,58,0,0,216,0,0,0,24,1,0,0,0,0,0,0,114,101,118,101,114,98,68,101,115,105,103,110,101,114,0,0,116,111,111,108,116,105,112,0,83,101,101,32,70,97,117,115,116,39,115,32,101,102,102,101,99,116,46,108,105,98,32,102,111,114,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,97,110,100,32,114,101,102,101,114,101,110,99,101,115,0,70,69,69,68,66,65,67,75,32,68,69,76,65,89,32,78,69,84,87,79,82,75,32,40,70,68,78,41,32,82,69,86,69,82,66,69,82,65,84,79,82,44,32,79,82,68,69,82,32,49,54,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,97,110,100,32,67,114,111,115,115,111,118,101,114,32,70,114,101,113,117,101,110,99,105,101,115,0,0,0,0,0,0,48,0,0,0,0,0,0,0,69,97,99,104,32,100,101,108,97,121,45,108,105,110,101,32,115,105,103,110,97,108,32,105,115,32,115,112,108,105,116,32,105,110,116,111,32,102,114,101,113,117,101,110,99,121,45,98,97,110,100,115,32,102,111,114,32,115,101,112,97,114,97,116,101,32,100,101,99,97,121,45,116,105,109,101,32,99,111,110,116,114,111,108,32,105,110,32,101,97,99,104,32,98,97,110,100,0,0,0,0,0,0,0,117,110,105,116,0,0,0,0,72,122,0,0,0,0,0,0,66,97,110,100,32,48,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,66,97,110,100,32,49,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,50,0,0,0,0,0,0,0,66,97,110,100,32,50,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,51,0,0,0,0,0,0,0,66,97,110,100,32,51,32,117,112,112,101,114,32,101,100,103,101,32,105,110,32,72,122,0,66,97,110,100,32,68,101,99,97,121,32,84,105,109,101,115,32,40,84,54,48,41,0,0,84,54,48,32,105,115,32,116,104,101,32,54,48,100,66,32,100,101,99,97,121,45,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,46,32,70,111,114,32,99,111,110,99,101,114,116,32,104,97,108,108,115,44,32,97,110,32,111,118,101,114,97,108,108,32,114,101,118,101,114,98,101,114,97,116,105,111,110,32,116,105,109,101,32,40,84,54,48,41,32,110,101,97,114,32,49,46,57,32,115,101,99,111,110,100,115,32,105,115,32,116,121,112,105,99,97,108,32,91,66,101,114,97,110,101,107,32,50,48,48,52,93,46,32,72,101,114,101,32,119,101,32,109,97,121,32,115,101,116,32,84,54,48,32,105,110,100,101,112,101,110,100,101,110,116,108,121,32,105,110,32,101,97,99,104,32,102,114,101,113,117,101,110,99,121,32,98,97,110,100,46,32,32,73,110,32,114,101,97,108,32,114,111,111,109,115,44,32,104,105,103,104,101,114,32,102,114,101,113,117,101,110,99,121,32,98,97,110,100,115,32,103,101,110,101,114,97,108,108,121,32,100,101,99,97,121,32,102,97,115,116,101,114,32,100,117,101,32,116,111,32,97,98,115,111,114,112,116,105,111,110,32,97,110,100,32,115,99,97,116,116,101,114,105,110,103,46,0,0,0,0,0,115,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,82,111,111,109,32,68,105,109,101,110,115,105,111,110,115,0,84,104,105,115,32,108,101,110,103,116,104,32,40,105,110,32,109,101,116,101,114,115,41,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,115,104,111,114,116,101,115,116,32,100,101,108,97,121,45,108,105,110,101,32,117,115,101,100,32,105,110,32,116,104,101,32,70,68,78,32,114,101,118,101,114,98,101,114,97,116,111,114,46,32,32,32,32,32,9,32,32,32,32,32,32,84,104,105,110,107,32,111,102,32,105,116,32,97,115,32,116,104,101,32,115,104,111,114,116,101,115,116,32,119,97,108,108,45,116,111,45,119,97,108,108,32,115,101,112,97,114,97,116,105,111,110,32,105,110,32,116,104,101,32,114,111,111,109,46,0,0,0,0,109,0,0,0,0,0,0,0,109,105,110,32,97,99,111,117,115,116,105,99,32,114,97,121,32,108,101,110,103,116,104,0,84,104,105,115,32,108,101,110,103,116,104,32,40,105,110,32,109,101,116,101,114,115,41,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,108,111,110,103,101,115,116,32,100,101,108,97,121,45,108,105,110,101,32,117,115,101,100,32,105,110,32,116,104,101,32,70,68,78,32,114,101,118,101,114,98,101,114,97,116,111,114,46,32,32,32,32,32,9,32,32,32,32,32,32,84,104,105,110,107,32,111,102,32,105,116,32,97,115,32,116,104,101,32,108,97,114,103,101,115,116,32,119,97,108,108,45,116,111,45,119,97,108,108,32,115,101,112,97,114,97,116,105,111,110,32,105,110,32,116,104,101,32,114,111,111,109,46,0,0,0,0,0,0,109,97,120,32,97,99,111,117,115,116,105,99,32,114,97,121,32,108,101,110,103,116,104,0,73,110,112,117,116,32,67,111,110,116,114,111,108,115,0,0,73,110,112,117,116,32,67,111,110,102,105,103,0,0,0,0,87,104,101,110,32,116,104,105,115,32,105,115,32,99,104,101,99,107,101,100,44,32,116,104,101,32,115,116,101,114,101,111,32,101,120,116,101,114,110,97,108,32,97,117,100,105,111,32,105,110,112,117,116,115,32,97,114,101,32,100,105,115,97,98,108,101,100,32,40,103,111,111,100,32,102,111,114,32,104,101,97,114,105,110,103,32,116,104,101,32,105,109,112,117,108,115,101,32,114,101,115,112,111,110,115,101,32,111,114,32,112,105,110,107,45,110,111,105,115,101,32,114,101,115,112,111,110,115,101,32,97,108,111,110,101,41,0,0,0,0,0,0,0,0,77,117,116,101,32,69,120,116,32,73,110,112,117,116,115,0,80,105,110,107,32,78,111,105,115,101,32,40,111,114,32,49,47,102,32,110,111,105,115,101,41,32,105,115,32,67,111,110,115,116,97,110,116,45,81,32,78,111,105,115,101,32,40,117,115,101,102,117,108,32,102,111,114,32,97,100,106,117,115,116,105,110,103,32,116,104,101,32,69,81,32,115,101,99,116,105,111,110,115,41,0,0,0,0,80,105,110,107,32,78,111,105,115,101,0,0,0,0,0,0,73,109,112,117,108,115,101,32,83,101,108,101,99,116,105,111,110,0,0,0,0,0,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,76,69,70,84,32,99,104,97,110,110,101,108,0,0,76,101,102,116,0,0,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,76,69,70,84,32,97,110,100,32,82,73,71,72,84,32,99,104,97,110,110,101,108,115,0,0,0,0,0,0,0,67,101,110,116,101,114,0,0,83,101,110,100,32,105,109,112,117,108,115,101,32,105,110,116,111,32,82,73,71,72,84,32,99,104,97,110,110,101,108,0,82,105,103,104,116,0,0,0,82,101,118,101,114,98,32,83,116,97,116,101,0,0,0,0,72,111,108,100,32,100,111,119,110,32,39,81,117,101,110,99,104,39,32,116,111,32,99,108,101,97,114,32,116,104,101,32,114,101,118,101,114,98,101,114,97,116,111,114,0,0,0,0,81,117,101,110,99,104,0,0,79,117,116,112,117,116,32,115,99,97,108,101,32,102,97,99,116,111,114,0,0,0,0,0,100,66,0,0,0,0,0,0,79,117,116,112,117,116,32,76,101,118,101,108,32,40,100,66,41,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,8,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,16,1,0,0,10,0,0,0,11,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([232,12,0,0,12,0,0,0,13,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,168,58,0,0,200,12,0,0,24,19,0,0,0,0,0,0,0,0,0,0,80,13,0,0,14,0,0,0,15,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,168,58,0,0,56,13,0,0,24,19,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,232,13,0,0,16,0,0,0,17,0,0,0,9,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,10,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,13,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,168,58,0,0,200,13,0,0,216,18,0,0,0,0,0,0,0,0,0,0,80,14,0,0,18,0,0,0,19,0,0,0,10,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,14,0,0,0,11,0,0,0,6,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,168,58,0,0,56,14,0,0,216,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,128,58,0,0,96,14,0,0,0,0,0,0,200,14,0,0,20,0,0,0,21,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,48,15,0,0,22,0,0,0,23,0,0,0,18,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,168,58,0,0,184,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,0,0,20,0,0,0,24,0,0,0,17,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,168,58,0,0,240,14,0,0,200,14,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,168,58,0,0,24,15,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,120,15,0,0,25,0,0,0,26,0,0,0,18,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,168,58,0,0,96,15,0,0,48,15,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,128,58,0,0,136,15,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,168,58,0,0,176,15,0,0,168,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,216,18,0,0,27,0,0,0,28,0,0,0,11,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,14,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,13,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,24,19,0,0,29,0,0,0,30,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,80,19,0,0,31,0,0,0,32,0,0,0,248,255,255,255,248,255,255,255,80,19,0,0,33,0,0,0,34,0,0,0,8,0,0,0,0,0,0,0,152,19,0,0,35,0,0,0,36,0,0,0,248,255,255,255,248,255,255,255,152,19,0,0,37,0,0,0,38,0,0,0,4,0,0,0,0,0,0,0,224,19,0,0,39,0,0,0,40,0,0,0,252,255,255,255,252,255,255,255,224,19,0,0,41,0,0,0,42,0,0,0,4,0,0,0,0,0,0,0,40,20,0,0,43,0,0,0,44,0,0,0,252,255,255,255,252,255,255,255,40,20,0,0,45,0,0,0,46,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,17,0,0,47,0,0,0,48,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,24,18,0,0,49,0,0,0,50,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,168,58,0,0,208,17,0,0,120,15,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,128,58,0,0,0,18,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,168,58,0,0,32,18,0,0,24,18,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,168,58,0,0,96,18,0,0,24,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,128,58,0,0,160,18,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,128,58,0,0,224,18,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,8,59,0,0,32,19,0,0,0,0,0,0,1,0,0,0,80,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,8,59,0,0,104,19,0,0,0,0,0,0,1,0,0,0,144,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,8,59,0,0,176,19,0,0,0,0,0,0,1,0,0,0,80,18,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,8,59,0,0,248,19,0,0,0,0,0,0,1,0,0,0,144,18,0,0,3,244,255,255,0,0,0,0,136,20,0,0,51,0,0,0,52,0,0,0,19,0,0,0,3,0,0,0,9,0,0,0,10,0,0,0,4,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,168,58,0,0,104,20,0,0,200,15,0,0,0,0,0,0,0,0,0,0,176,34,0,0,53,0,0,0,54,0,0,0,55,0,0,0,1,0,0,0,6,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,34,0,0,56,0,0,0,57,0,0,0,55,0,0,0,2,0,0,0,7,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,39,0,0,58,0,0,0,59,0,0,0,55,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,32,40,0,0,60,0,0,0,61,0,0,0,55,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,40,0,0,62,0,0,0,63,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,41,0,0,64,0,0,0,65,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,160,36,0,0,66,0,0,0,67,0,0,0,55,0,0,0,20,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,160,36,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,64,37,0,0,68,0,0,0,69,0,0,0,55,0,0,0,28,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,64,37,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,208,37,0,0,70,0,0,0,71,0,0,0,55,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,38,0,0,72,0,0,0,73,0,0,0,55,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,35,0,0,74,0,0,0,75,0,0,0,55,0,0,0,36,0,0,0,37,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,38,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,35,0,0,76,0,0,0,77,0,0,0,55,0,0,0,39,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,41,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,35,0,0,78,0,0,0,79,0,0,0,55,0,0,0,42,0,0,0,43,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,44,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,35,0,0,80,0,0,0,81,0,0,0,55,0,0,0,45,0,0,0,46,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,47,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,42,0,0,82,0,0,0,83,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,152,42,0,0,84,0,0,0,85,0,0,0,55,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,40,43,0,0,86,0,0,0,87,0,0,0,55,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,184,43,0,0,88,0,0,0,89,0,0,0,55,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,38,0,0,90,0,0,0,91,0,0,0,55,0,0,0,13,0,0,0,11,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,38,0,0,92,0,0,0,93,0,0,0,55,0,0,0,14,0,0,0,12,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,136,34,0,0,94,0,0,0,95,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,31,0,0,96,0,0,0,97,0,0,0,55,0,0,0,9,0,0,0,15,0,0,0,10,0,0,0,16,0,0,0,11,0,0,0,1,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,32,0,0,98,0,0,0,99,0,0,0,55,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,48,0,0,0,49,0,0,0,5,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,100,0,0,0,101,0,0,0,55,0,0,0,51,0,0,0,52,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,0,0,0,0,96,34,0,0,102,0,0,0,103,0,0,0,55,0,0,0,53,0,0,0,54,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,152,30,0,0,104,0,0,0,105,0,0,0,55,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,168,58,0,0,128,30,0,0,128,14,0,0,0,0,0,0,0,0,0,0,40,31,0,0,104,0,0,0,106,0,0,0,55,0,0,0,18,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,13,0,0,0,20,0,0,0,14,0,0,0,5,0,0,0,21,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,128,58,0,0,8,31,0,0,8,59,0,0,240,30,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,31,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,8,59,0,0,72,31,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,31,0,0,2,0,0,0,0,0,0,0,248,31,0,0,104,0,0,0,107,0,0,0,55,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,55,0,0,0,56,0,0,0,8,0,0,0,57,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,128,58,0,0,216,31,0,0,8,59,0,0,176,31,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,8,59,0,0,24,32,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,184,32,0,0,104,0,0,0,108,0,0,0,55,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,58,0,0,0,59,0,0,0,10,0,0,0,60,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,8,59,0,0,144,32,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,48,33,0,0,104,0,0,0,109,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,8,59,0,0,8,33,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,240,31,0,0,2,0,0,0,0,0,0,0,168,33,0,0,104,0,0,0,110,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,168,58,0,0,128,33,0,0,48,33,0,0,0,0,0,0,0,0,0,0,16,34,0,0,104,0,0,0,111,0,0,0,55,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,61,0,0,0,62,0,0,0,12,0,0,0,63,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,168,58,0,0,232,33,0,0,48,33,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,168,58,0,0,32,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,168,58,0,0,72,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,168,58,0,0,112,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,168,58,0,0,152,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,168,58,0,0,192,34,0,0,152,30,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,128,58,0,0,8,35,0,0,8,59,0,0,232,34,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,8,59,0,0,72,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,8,59,0,0,136,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,8,59,0,0,200,35,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,35,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,128,58,0,0,80,36,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,128,58,0,0,112,36,0,0,8,59,0,0,8,36,0,0,0,0,0,0,3,0,0,0,152,30,0,0,2,0,0,0,104,36,0,0,2,0,0,0,152,36,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,128,58,0,0,16,37,0,0,8,59,0,0,200,36,0,0,0,0,0,0,3,0,0,0,152,30,0,0,2,0,0,0,104,36,0,0,2,0,0,0,56,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,128,58,0,0,176,37,0,0,8,59,0,0,104,37,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,8,59,0,0,240,37,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,37,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,128,58,0,0,112,38,0,0,8,59,0,0,88,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,136,38,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,8,59,0,0,176,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,136,38,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,128,58,0,0,72,39,0,0,8,59,0,0,48,39,0,0,0,0,0,0,1,0,0,0,104,39,0,0,0,0,0,0,8,59,0,0,232,38,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,112,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,8,59,0,0,240,39,0,0,0,0,0,0,1,0,0,0,104,39,0,0,0,0,0,0,8,59,0,0,168,39,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,8,40,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,128,58,0,0,160,40,0,0,8,59,0,0,136,40,0,0,0,0,0,0,1,0,0,0,192,40,0,0,0,0,0,0,8,59,0,0,64,40,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,200,40,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,8,59,0,0,72,41,0,0,0,0,0,0,1,0,0,0,192,40,0,0,0,0,0,0,8,59,0,0,0,41,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,96,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,128,58,0,0,224,41,0,0,8,59,0,0,152,41,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,0,42,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,128,58,0,0,112,42,0,0,8,59,0,0,40,42,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,144,42,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,128,58,0,0,0,43,0,0,8,59,0,0,184,42,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,32,43,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,128,58,0,0,144,43,0,0,8,59,0,0,72,43,0,0,0,0,0,0,2,0,0,0,152,30,0,0,2,0,0,0,176,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+3204);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,57,0,0,112,0,0,0,113,0,0,0,64,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,128,58,0,0,208,57,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,168,58,0,0,232,57,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,168,58,0,0,8,58,0,0,224,57,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,168,58,0,0,64,58,0,0,48,58,0,0,0,0,0,0,0,0,0,0,104,58,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,13,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,240,58,0,0,114,0,0,0,118,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,14,0,0,0,2,0,0,0,9,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,168,58,0,0,200,58,0,0,104,58,0,0,0,0,0,0,0,0,0,0,80,59,0,0,114,0,0,0,119,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,15,0,0,0,3,0,0,0,10,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,168,58,0,0,40,59,0,0,104,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,61,0,0,120,0,0,0,121,0,0,0,65,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,168,58,0,0,128,61,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13464);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _floorf=Math_floor;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _pthread_mutex_lock() {}

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

   
  Module["_i64Add"] = _i64Add;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  var _llvm_pow_f32=Math_pow;


  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }


  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _fmod(x, y) {
      return x % y;
    }

  var _tanf=Math_tan;

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  var _expf=Math_exp;

  function _uselocale(locale) {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }



  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

   
  Module["_memset"] = _memset;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  var _logf=Math_log;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  
  function _exp2(x) {
      return Math.pow(2, x);
    }var _exp2f=_exp2;

  var _fabs=Math_abs;

  var _getc=_fgetc;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  function _free() {
  }
  Module["_free"] = _free;function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  function __ZNSt9exceptionD2Ev() {}


  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

   
  Module["_strcpy"] = _strcpy;

  var _copysignl=_copysign;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidddd(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiidddd"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiidd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiidd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiidddd=env.invoke_viiidddd;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiidd=env.invoke_viiidd;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var __addDays=env.__addDays;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exp2=env._exp2;
  var _sysconf=env._sysconf;
  var _tanf=env._tanf;
  var _fileno=env._fileno;
  var _fread=env._fread;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _expf=env._expf;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __exit=env.__exit;
  var _catclose=env._catclose;
  var _send=env._send;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _strerror_r=env._strerror_r;
  var ___setErrNo=env.___setErrNo;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var _freelocale=env._freelocale;
  var _sprintf=env._sprintf;
  var _vasprintf=env._vasprintf;
  var _logf=env._logf;
  var _vsnprintf=env._vsnprintf;
  var _strtoull_l=env._strtoull_l;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _strtoll=env._strtoll;
  var _pwrite=env._pwrite;
  var _uselocale=env._uselocale;
  var _snprintf=env._snprintf;
  var __scanString=env.__scanString;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _isxdigit=env._isxdigit;
  var _floorf=env._floorf;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _isspace=env._isspace;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _ungetc=env._ungetc;
  var _fflush=env._fflush;
  var _strftime_l=env._strftime_l;
  var _sscanf=env._sscanf;
  var _catgets=env._catgets;
  var _asprintf=env._asprintf;
  var _strtoll_l=env._strtoll_l;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var ___cxa_throw=env.___cxa_throw;
  var _isdigit=env._isdigit;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function _REVERBDESIGNER_constructor($samplingFreq) {
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(528728)|0);
 _memset(($0|0),0,528728)|0;
 __ZN19ReverbDesigner_wrapC1Ev($0);
 $1 = (__Znwj(20)|0);
 __ZN4JSUIC1Ev($1);
 $2 = (($0) + 528724|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$5 & 63]($0,$samplingFreq);
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$8 & 63]($0,$9);
 $10 = HEAP32[$2>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 16|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return ($0|0);
}
function __ZN19ReverbDesigner_wrapC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN19ReverbDesigner_wrapC2Ev($this);
 STACKTOP = sp;return;
}
function __ZN4JSUIC1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUIC2Ev($this);
 STACKTOP = sp;return;
}
function _REVERBDESIGNER_getNumParams($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 528724|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _REVERBDESIGNER_getNextParam($n,$key) {
 $n = $n|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 528724|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 16|0);
 $7 = HEAP8[$6]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $12 = (($6) + 1|0);
  $13 = $12;
 } else {
  $10 = (($3) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 (_strcpy(($key|0),($13|0))|0);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($16)|0);
 HEAP32[$15>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 8|0);
 $20 = (($18) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==($19|0);
 if (!($22)) {
  STACKTOP = sp;return ($5|0);
 }
 $23 = (($18) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($18) + 16|0);
 HEAP32[$25>>2] = $24;
 STACKTOP = sp;return ($5|0);
}
function _REVERBDESIGNER_compute($n,$count,$inputs,$outputs) {
 $n = $n|0;
 $count = $count|0;
 $inputs = $inputs|0;
 $outputs = $outputs|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 15]($n,$count,$inputs,$outputs);
 STACKTOP = sp;return 1;
}
function _REVERBDESIGNER_getNumInputs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($n)|0);
 STACKTOP = sp;return ($3|0);
}
function _REVERBDESIGNER_getNumOutputs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$n>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($n)|0);
 STACKTOP = sp;return ($3|0);
}
function _REVERBDESIGNER_destructor($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$n>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($n);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__x) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$01 = $__x;
  while(1) {
   $5 = (($$01) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==($$01|0);
   if ($8) {
    $$0 = $6;
    break;
   } else {
    $$01 = $6;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0$i = $1;
  while(1) {
   $3 = HEAP32[$$0$i>>2]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = $$0$i;
    break;
   } else {
    $$0$i = $3;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZN4JSUIC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 __ZN2UIC2Ev($this);
 HEAP32[$this>>2] = ((8 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_($1,$0);
 STACKTOP = sp;return;
}
function __ZN2UIC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((112 + 8|0));
 STACKTOP = sp;return;
}
function __ZN4JSUID1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUID2Ev($this);
 STACKTOP = sp;return;
}
function __ZN4JSUID0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUID1Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN4JSUI10openTabBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI17openHorizontalBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI15openVerticalBoxEPKc($this,$label) {
 $this = $this|0;
 $label = $label|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI8closeBoxEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI9addButtonEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUI9insertMapEPKcPf($this,$label,$zone);
 STACKTOP = sp;return;
}
function __ZN4JSUI14addCheckButtonEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUI9insertMapEPKcPf($this,$label,$zone);
 STACKTOP = sp;return;
}
function __ZN4JSUI17addVerticalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUI9insertMapEPKcPf($this,$label,$zone);
 STACKTOP = sp;return;
}
function __ZN4JSUI19addHorizontalSliderEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUI9insertMapEPKcPf($this,$label,$zone);
 STACKTOP = sp;return;
}
function __ZN4JSUI11addNumEntryEPKcPfffff($this,$label,$zone,$init,$fmin,$fmax,$step) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $init = +$init;
 $fmin = +$fmin;
 $fmax = +$fmax;
 $step = +$step;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4JSUI9insertMapEPKcPf($this,$label,$zone);
 STACKTOP = sp;return;
}
function __ZN4JSUI21addHorizontalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $fmin = +$fmin;
 $fmax = +$fmax;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI19addVerticalBargraphEPKcPfff($this,$label,$zone,$fmin,$fmax) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 $fmin = +$fmin;
 $fmax = +$fmax;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI7declareEPfPKcS2_($this,$zone,$key,$val) {
 $this = $this|0;
 $zone = $zone|0;
 $key = $key|0;
 $val = $val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN4JSUI9insertMapEPKcPf($this,$label,$zone) {
 $this = $this|0;
 $label = $label|0;
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = (_strlen(($label|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($4,$label,$5);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($3,$4);
 $6 = (($3) + 12|0);
 HEAP32[$6>>2] = $zone;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($2,$3);
 $7 = (($2) + 12|0);
 $8 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $8;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_($1,$2);
 $9 = (($this) + 4|0);
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_($0,$9,$1);
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($1);
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($2);
 __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($3);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE15__insert_uniqueERKS9_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__parent = 0, $__r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__parent = sp + 12|0;
 $0 = sp;
 $1 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this,$__parent,$__v)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $7 = 0;$__r$0 = $2;
  HEAP32[$agg$result>>2] = $__r$0;
  $6 = (($agg$result) + 4|0);
  HEAP8[$6] = $7;
  STACKTOP = sp;return;
 }
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($0,$this,$__v);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $5 = HEAP32[$__parent>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($this,$5,$1,$4);
 $7 = 1;$__r$0 = $4;
 HEAP32[$agg$result>>2] = $__r$0;
 $6 = (($agg$result) + 4|0);
 HEAP8[$6] = $7;
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS9_($this,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$0);
 $1 = (($this) + 12|0);
 $2 = (($0) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE12__find_equalIS9_EERPNS_16__tree_node_baseIPvEESL_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $$$$i$i$i$i = 0, $$$$i$i$i$i5 = 0, $$$i$i$i$i = 0, $$$i$i$i$i4 = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__nd$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $82 = (($this) + 4|0);
  HEAP32[$__parent>>2] = $82;
  $$0 = $82;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP8[$__v]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = $3&255;
 $7 = $6 >>> 1;
 $8 = $3 & 1;
 $9 = ($8<<24>>24)==(0);
 $10 = (($__v) + 1|0);
 $11 = (($__v) + 1|0);
 $12 = (($__v) + 8|0);
 $13 = (($__v) + 4|0);
 $14 = (($__v) + 8|0);
 $15 = (($__v) + 4|0);
 $__nd$0$in = $1;
 while(1) {
  $16 = (($__nd$0$in) + 16|0);
  if ($5) {
   $34 = $7;
  } else {
   $17 = HEAP32[$15>>2]|0;
   $34 = $17;
  }
  $18 = HEAP8[$16]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $23 = $18&255;
   $24 = $23 >>> 1;
   $33 = $24;
  } else {
   $21 = (($__nd$0$in) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $33 = $22;
  }
  if ($9) {
   $36 = $10;
  } else {
   $25 = HEAP32[$14>>2]|0;
   $36 = $25;
  }
  $26 = HEAP8[$16]|0;
  $27 = $26 & 1;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   $31 = (($16) + 1|0);
   $37 = $31;
  } else {
   $29 = (($__nd$0$in) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $37 = $30;
  }
  $32 = ($33>>>0)<($34>>>0);
  $35 = $32 ? $33 : $34;
  $38 = (_memcmp($36,$37,$35)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ($34>>>0)<($33>>>0);
   $$$i$i$i$i4 = $32&1;
   $$$$i$i$i$i5 = $40 ? -1 : $$$i$i$i$i4;
   $42 = $$$$i$i$i$i5;
  } else {
   $42 = $38;
  }
  $41 = ($42|0)<(0);
  if ($41) {
   $43 = HEAP32[$__nd$0$in>>2]|0;
   $44 = ($43|0)==(0|0);
   if ($44) {
    label = 17;
    break;
   } else {
    $__nd$0$in = $43;
    continue;
   }
  }
  $45 = HEAP8[$16]|0;
  $46 = $45 & 1;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $50 = $45&255;
   $51 = $50 >>> 1;
   $70 = $51;
  } else {
   $48 = (($__nd$0$in) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $70 = $49;
  }
  $52 = HEAP8[$__v]|0;
  $53 = $52 & 1;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   $56 = $52&255;
   $57 = $56 >>> 1;
   $69 = $57;
  } else {
   $55 = HEAP32[$13>>2]|0;
   $69 = $55;
  }
  $58 = HEAP8[$16]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = (($16) + 1|0);
   $72 = $63;
  } else {
   $61 = (($__nd$0$in) + 24|0);
   $62 = HEAP32[$61>>2]|0;
   $72 = $62;
  }
  $64 = HEAP8[$__v]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $73 = $11;
  } else {
   $67 = HEAP32[$12>>2]|0;
   $73 = $67;
  }
  $68 = ($69>>>0)<($70>>>0);
  $71 = $68 ? $69 : $70;
  $74 = (_memcmp($72,$73,$71)|0);
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = ($70>>>0)<($69>>>0);
   $$$i$i$i$i = $68&1;
   $$$$i$i$i$i = $76 ? -1 : $$$i$i$i$i;
   $78 = $$$$i$i$i$i;
  } else {
   $78 = $74;
  }
  $77 = ($78|0)<(0);
  if (!($77)) {
   label = 34;
   break;
  }
  $79 = (($__nd$0$in) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)==(0|0);
  if ($81) {
   label = 33;
   break;
  } else {
   $__nd$0$in = $80;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__nd$0$in;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 33) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  HEAP32[$__parent>>2] = $__nd$0$in;
  $$0 = $__parent;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__construct_nodeERKS9_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(32)|0);
 $1 = (($0) + 16|0);
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_($1,$__v);
 $2 = (($this) + 4|0);
 $3 = $2;
 HEAP32[$agg$result>>2] = $0;
 $4 = (($agg$result) + 4|0);
 $5 = $4;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSJ_SJ_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__new_node>>2] = 0;
 $0 = (($__new_node) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($__new_node) + 8|0);
 HEAP32[$1>>2] = $__parent;
 HEAP32[$__child>>2] = $__new_node;
 $2 = HEAP32[$this>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  HEAP32[$this>>2] = $3;
 }
 $5 = (($this) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$__child>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($6,$7);
 $8 = (($this) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $$0$be = 0, $$04 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__x|0)==($__root|0);
 $1 = (($__x) + 12|0);
 $2 = $0&1;
 HEAP8[$1] = $2;
 $3 = ($__x|0)==($__root|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $$04 = $__x;
 }
 while(1) {
  $4 = (($$04) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   label = 17;
   break;
  }
  $9 = (($5) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($5|0);
  if ($12) {
   $13 = (($10) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 7;
    break;
   }
   $16 = (($14) + 12|0);
   $17 = HEAP8[$16]|0;
   $18 = ($17<<24>>24)==(0);
   if (!($18)) {
    label = 7;
    break;
   }
   HEAP8[$6] = 1;
   $19 = HEAP32[$9>>2]|0;
   $20 = ($19|0)==($__root|0);
   $21 = (($19) + 12|0);
   $22 = $20&1;
   HEAP8[$21] = $22;
   HEAP8[$16] = 1;
   $$0$be = $19;
  } else {
   $32 = ($11|0)==(0|0);
   if ($32) {
    label = 14;
    break;
   }
   $33 = (($11) + 12|0);
   $34 = HEAP8[$33]|0;
   $35 = ($34<<24>>24)==(0);
   if (!($35)) {
    label = 14;
    break;
   }
   HEAP8[$6] = 1;
   $36 = HEAP32[$9>>2]|0;
   $37 = ($36|0)==($__root|0);
   $38 = (($36) + 12|0);
   $39 = $37&1;
   HEAP8[$38] = $39;
   HEAP8[$33] = 1;
   $$0$be = $36;
  }
  $40 = ($$0$be|0)==($__root|0);
  if ($40) {
   label = 17;
   break;
  } else {
   $$04 = $$0$be;
  }
 }
 if ((label|0) == 7) {
  $23 = HEAP32[$4>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==($$04|0);
  if ($25) {
   $$1 = $$04;
  } else {
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($23);
   $$1 = $23;
  }
  $26 = (($$1) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  HEAP8[$28] = 1;
  $29 = (($27) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  HEAP8[$31] = 0;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($30);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  $41 = HEAP32[$4>>2]|0;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==($$04|0);
  if ($43) {
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($41);
   $$2 = $41;
  } else {
   $$2 = $$04;
  }
  $44 = (($$2) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 12|0);
  HEAP8[$46] = 1;
  $47 = (($45) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 12|0);
  HEAP8[$49] = 0;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($48);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__x) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = $__x;
 }
 $5 = (($__x) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($__x|0);
 if ($10) {
  HEAP32[$8>>2] = $1;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $1;
  STACKTOP = sp;return;
 } else {
  $11 = (($8) + 4|0);
  HEAP32[$11>>2] = $1;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $1;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__x>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$__x>>2] = $2;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = $__x;
 }
 $5 = (($__x) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($__x|0);
 if ($10) {
  HEAP32[$8>>2] = $0;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $0;
  STACKTOP = sp;return;
 } else {
  $11 = (($8) + 4|0);
  HEAP32[$11>>2] = $0;
  HEAP32[$1>>2] = $__x;
  HEAP32[$5>>2] = $0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($this,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEC1ERKS9_($this,$0);
 STACKTOP = sp;return;
}
function __ZN4JSUID2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfNS_4lessIS6_EENS4_INS_4pairIKS6_S7_EEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__nd|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $1 = HEAP32[$__nd>>2]|0;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$1);
  $2 = (($__nd) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($this,$3);
  $4 = (($__nd) + 16|0);
  __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfED1Ev($4);
  __ZdlPv($__nd);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC1ERKSD_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($this,0);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPfEENS_19__map_value_compareIS7_S9_NS_4lessIS7_EELb1EEENS5_IS9_EEEC2ERKSD_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 4|0);
 HEAP32[$this>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN2UID1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN2UID0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN2UI7declareEPfPKcS2_($this,$0,$1,$2) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN14ReverbDesignerC2Ev($this);
 HEAP32[$this>>2] = ((176 + 8|0));
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN3dspC2Ev($this);
 HEAP32[$this>>2] = ((2064 + 8|0));
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN19ReverbDesigner_wrapD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner12getNumInputsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZN14ReverbDesigner13getNumOutputsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZN14ReverbDesigner18buildUserInterfaceEP2UI($this,$interface) {
 $this = $this|0;
 $interface = $interface|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$interface>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 63]($interface,312);
 $3 = HEAP32[$interface>>2]|0;
 $4 = (($3) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viiii[$5 & 15]($interface,0,328,336);
 $6 = HEAP32[$interface>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vii[$8 & 63]($interface,392);
 $9 = HEAP32[$interface>>2]|0;
 $10 = (($9) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_viiii[$11 & 15]($interface,0,448,456);
 $12 = HEAP32[$interface>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_vii[$14 & 63]($interface,464);
 $15 = HEAP32[$interface>>2]|0;
 $16 = (($15) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($this) + 156|0);
 FUNCTION_TABLE_viiii[$17 & 15]($interface,$18,496,456);
 $19 = HEAP32[$interface>>2]|0;
 $20 = (($19) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viiii[$21 & 15]($interface,$18,328,504);
 $22 = HEAP32[$interface>>2]|0;
 $23 = (($22) + 52|0);
 $24 = HEAP32[$23>>2]|0;
 FUNCTION_TABLE_viiii[$24 & 15]($interface,$18,608,616);
 $25 = HEAP32[$interface>>2]|0;
 $26 = (($25) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 FUNCTION_TABLE_viiidddd[$27 & 3]($interface,624,$18,500.0,100.0,1.0E+4,1.0);
 $28 = HEAP32[$interface>>2]|0;
 $29 = (($28) + 52|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($this) + 140|0);
 FUNCTION_TABLE_viiii[$30 & 15]($interface,$31,448,456);
 $32 = HEAP32[$interface>>2]|0;
 $33 = (($32) + 52|0);
 $34 = HEAP32[$33>>2]|0;
 FUNCTION_TABLE_viiii[$34 & 15]($interface,$31,328,504);
 $35 = HEAP32[$interface>>2]|0;
 $36 = (($35) + 52|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_viiii[$37 & 15]($interface,$31,608,616);
 $38 = HEAP32[$interface>>2]|0;
 $39 = (($38) + 36|0);
 $40 = HEAP32[$39>>2]|0;
 FUNCTION_TABLE_viiidddd[$40 & 3]($interface,648,$31,1000.0,100.0,1.0E+4,1.0);
 $41 = HEAP32[$interface>>2]|0;
 $42 = (($41) + 52|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($this) + 124|0);
 FUNCTION_TABLE_viiii[$43 & 15]($interface,$44,672,456);
 $45 = HEAP32[$interface>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_viiii[$47 & 15]($interface,$44,328,504);
 $48 = HEAP32[$interface>>2]|0;
 $49 = (($48) + 52|0);
 $50 = HEAP32[$49>>2]|0;
 FUNCTION_TABLE_viiii[$50 & 15]($interface,$44,608,616);
 $51 = HEAP32[$interface>>2]|0;
 $52 = (($51) + 36|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_viiidddd[$53 & 3]($interface,680,$44,2000.0,100.0,1.0E+4,1.0);
 $54 = HEAP32[$interface>>2]|0;
 $55 = (($54) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($this) + 100|0);
 FUNCTION_TABLE_viiii[$56 & 15]($interface,$57,704,456);
 $58 = HEAP32[$interface>>2]|0;
 $59 = (($58) + 52|0);
 $60 = HEAP32[$59>>2]|0;
 FUNCTION_TABLE_viiii[$60 & 15]($interface,$57,328,504);
 $61 = HEAP32[$interface>>2]|0;
 $62 = (($61) + 52|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_viiii[$63 & 15]($interface,$57,608,616);
 $64 = HEAP32[$interface>>2]|0;
 $65 = (($64) + 36|0);
 $66 = HEAP32[$65>>2]|0;
 FUNCTION_TABLE_viiidddd[$66 & 3]($interface,712,$57,4000.0,100.0,1.0E+4,1.0);
 $67 = HEAP32[$interface>>2]|0;
 $68 = (($67) + 20|0);
 $69 = HEAP32[$68>>2]|0;
 FUNCTION_TABLE_vi[$69 & 255]($interface);
 $70 = HEAP32[$interface>>2]|0;
 $71 = (($70) + 52|0);
 $72 = HEAP32[$71>>2]|0;
 FUNCTION_TABLE_viiii[$72 & 15]($interface,0,672,456);
 $73 = HEAP32[$interface>>2]|0;
 $74 = (($73) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 FUNCTION_TABLE_vii[$75 & 63]($interface,736);
 $76 = HEAP32[$interface>>2]|0;
 $77 = (($76) + 52|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($this) + 364|0);
 FUNCTION_TABLE_viiii[$78 & 15]($interface,$79,496,456);
 $80 = HEAP32[$interface>>2]|0;
 $81 = (($80) + 52|0);
 $82 = HEAP32[$81>>2]|0;
 FUNCTION_TABLE_viiii[$82 & 15]($interface,$79,328,760);
 $83 = HEAP32[$interface>>2]|0;
 $84 = (($83) + 52|0);
 $85 = HEAP32[$84>>2]|0;
 FUNCTION_TABLE_viiii[$85 & 15]($interface,$79,608,1056);
 $86 = HEAP32[$interface>>2]|0;
 $87 = (($86) + 32|0);
 $88 = HEAP32[$87>>2]|0;
 FUNCTION_TABLE_viiidddd[$88 & 3]($interface,496,$79,8.3999996185302734375,0.100000001490116119385,10.0,0.100000001490116119385);
 $89 = HEAP32[$interface>>2]|0;
 $90 = (($89) + 52|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($this) + 312|0);
 FUNCTION_TABLE_viiii[$91 & 15]($interface,$92,448,456);
 $93 = HEAP32[$interface>>2]|0;
 $94 = (($93) + 52|0);
 $95 = HEAP32[$94>>2]|0;
 FUNCTION_TABLE_viiii[$95 & 15]($interface,$92,328,760);
 $96 = HEAP32[$interface>>2]|0;
 $97 = (($96) + 52|0);
 $98 = HEAP32[$97>>2]|0;
 FUNCTION_TABLE_viiii[$98 & 15]($interface,$92,608,1056);
 $99 = HEAP32[$interface>>2]|0;
 $100 = (($99) + 32|0);
 $101 = HEAP32[$100>>2]|0;
 FUNCTION_TABLE_viiidddd[$101 & 3]($interface,448,$92,6.5,0.100000001490116119385,10.0,0.100000001490116119385);
 $102 = HEAP32[$interface>>2]|0;
 $103 = (($102) + 52|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($this) + 248|0);
 FUNCTION_TABLE_viiii[$104 & 15]($interface,$105,672,456);
 $106 = HEAP32[$interface>>2]|0;
 $107 = (($106) + 52|0);
 $108 = HEAP32[$107>>2]|0;
 FUNCTION_TABLE_viiii[$108 & 15]($interface,$105,328,760);
 $109 = HEAP32[$interface>>2]|0;
 $110 = (($109) + 52|0);
 $111 = HEAP32[$110>>2]|0;
 FUNCTION_TABLE_viiii[$111 & 15]($interface,$105,608,1056);
 $112 = HEAP32[$interface>>2]|0;
 $113 = (($112) + 32|0);
 $114 = HEAP32[$113>>2]|0;
 FUNCTION_TABLE_viiidddd[$114 & 3]($interface,672,$105,5.0,0.100000001490116119385,10.0,0.100000001490116119385);
 $115 = HEAP32[$interface>>2]|0;
 $116 = (($115) + 52|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($this) + 172|0);
 FUNCTION_TABLE_viiii[$117 & 15]($interface,$118,704,456);
 $119 = HEAP32[$interface>>2]|0;
 $120 = (($119) + 52|0);
 $121 = HEAP32[$120>>2]|0;
 FUNCTION_TABLE_viiii[$121 & 15]($interface,$118,328,760);
 $122 = HEAP32[$interface>>2]|0;
 $123 = (($122) + 52|0);
 $124 = HEAP32[$123>>2]|0;
 FUNCTION_TABLE_viiii[$124 & 15]($interface,$118,608,1056);
 $125 = HEAP32[$interface>>2]|0;
 $126 = (($125) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 FUNCTION_TABLE_viiidddd[$127 & 3]($interface,704,$118,3.79999995231628417969,0.100000001490116119385,10.0,0.100000001490116119385);
 $128 = HEAP32[$interface>>2]|0;
 $129 = (($128) + 52|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($this) + 92|0);
 FUNCTION_TABLE_viiii[$130 & 15]($interface,$131,1064,456);
 $132 = HEAP32[$interface>>2]|0;
 $133 = (($132) + 52|0);
 $134 = HEAP32[$133>>2]|0;
 FUNCTION_TABLE_viiii[$134 & 15]($interface,$131,328,760);
 $135 = HEAP32[$interface>>2]|0;
 $136 = (($135) + 52|0);
 $137 = HEAP32[$136>>2]|0;
 FUNCTION_TABLE_viiii[$137 & 15]($interface,$131,608,1056);
 $138 = HEAP32[$interface>>2]|0;
 $139 = (($138) + 32|0);
 $140 = HEAP32[$139>>2]|0;
 FUNCTION_TABLE_viiidddd[$140 & 3]($interface,1064,$131,2.70000004768371582031,0.100000001490116119385,10.0,0.100000001490116119385);
 $141 = HEAP32[$interface>>2]|0;
 $142 = (($141) + 20|0);
 $143 = HEAP32[$142>>2]|0;
 FUNCTION_TABLE_vi[$143 & 255]($interface);
 $144 = HEAP32[$interface>>2]|0;
 $145 = (($144) + 52|0);
 $146 = HEAP32[$145>>2]|0;
 FUNCTION_TABLE_viiii[$146 & 15]($interface,0,704,456);
 $147 = HEAP32[$interface>>2]|0;
 $148 = (($147) + 16|0);
 $149 = HEAP32[$148>>2]|0;
 FUNCTION_TABLE_vii[$149 & 63]($interface,1072);
 $150 = HEAP32[$interface>>2]|0;
 $151 = (($150) + 52|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($this) + 84|0);
 FUNCTION_TABLE_viiii[$152 & 15]($interface,$153,448,456);
 $154 = HEAP32[$interface>>2]|0;
 $155 = (($154) + 52|0);
 $156 = HEAP32[$155>>2]|0;
 FUNCTION_TABLE_viiii[$156 & 15]($interface,$153,328,1088);
 $157 = HEAP32[$interface>>2]|0;
 $158 = (($157) + 52|0);
 $159 = HEAP32[$158>>2]|0;
 FUNCTION_TABLE_viiii[$159 & 15]($interface,$153,608,1256);
 $160 = HEAP32[$interface>>2]|0;
 $161 = (($160) + 36|0);
 $162 = HEAP32[$161>>2]|0;
 FUNCTION_TABLE_viiidddd[$162 & 3]($interface,1264,$153,46.0,0.100000001490116119385,63.0,0.100000001490116119385);
 $163 = HEAP32[$interface>>2]|0;
 $164 = (($163) + 52|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = (($this) + 88|0);
 FUNCTION_TABLE_viiii[$165 & 15]($interface,$166,672,456);
 $167 = HEAP32[$interface>>2]|0;
 $168 = (($167) + 52|0);
 $169 = HEAP32[$168>>2]|0;
 FUNCTION_TABLE_viiii[$169 & 15]($interface,$166,328,1288);
 $170 = HEAP32[$interface>>2]|0;
 $171 = (($170) + 52|0);
 $172 = HEAP32[$171>>2]|0;
 FUNCTION_TABLE_viiii[$172 & 15]($interface,$166,608,1256);
 $173 = HEAP32[$interface>>2]|0;
 $174 = (($173) + 36|0);
 $175 = HEAP32[$174>>2]|0;
 FUNCTION_TABLE_viiidddd[$175 & 3]($interface,1456,$166,63.0,0.100000001490116119385,63.0,0.100000001490116119385);
 $176 = HEAP32[$interface>>2]|0;
 $177 = (($176) + 20|0);
 $178 = HEAP32[$177>>2]|0;
 FUNCTION_TABLE_vi[$178 & 255]($interface);
 $179 = HEAP32[$interface>>2]|0;
 $180 = (($179) + 52|0);
 $181 = HEAP32[$180>>2]|0;
 FUNCTION_TABLE_viiii[$181 & 15]($interface,0,1064,456);
 $182 = HEAP32[$interface>>2]|0;
 $183 = (($182) + 12|0);
 $184 = HEAP32[$183>>2]|0;
 FUNCTION_TABLE_vii[$184 & 63]($interface,1480);
 $185 = HEAP32[$interface>>2]|0;
 $186 = (($185) + 52|0);
 $187 = HEAP32[$186>>2]|0;
 FUNCTION_TABLE_viiii[$187 & 15]($interface,0,448,456);
 $188 = HEAP32[$interface>>2]|0;
 $189 = (($188) + 16|0);
 $190 = HEAP32[$189>>2]|0;
 FUNCTION_TABLE_vii[$190 & 63]($interface,1496);
 $191 = HEAP32[$interface>>2]|0;
 $192 = (($191) + 52|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($this) + 52|0);
 FUNCTION_TABLE_viiii[$193 & 15]($interface,$194,448,456);
 $195 = HEAP32[$interface>>2]|0;
 $196 = (($195) + 52|0);
 $197 = HEAP32[$196>>2]|0;
 FUNCTION_TABLE_viiii[$197 & 15]($interface,$194,328,1512);
 $198 = HEAP32[$interface>>2]|0;
 $199 = (($198) + 28|0);
 $200 = HEAP32[$199>>2]|0;
 FUNCTION_TABLE_viii[$200 & 7]($interface,1656,$194);
 $201 = HEAP32[$interface>>2]|0;
 $202 = (($201) + 52|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = (($this) + 12|0);
 FUNCTION_TABLE_viiii[$203 & 15]($interface,$204,672,456);
 $205 = HEAP32[$interface>>2]|0;
 $206 = (($205) + 52|0);
 $207 = HEAP32[$206>>2]|0;
 FUNCTION_TABLE_viiii[$207 & 15]($interface,$204,328,1672);
 $208 = HEAP32[$interface>>2]|0;
 $209 = (($208) + 28|0);
 $210 = HEAP32[$209>>2]|0;
 FUNCTION_TABLE_viii[$210 & 7]($interface,1760,$204);
 $211 = HEAP32[$interface>>2]|0;
 $212 = (($211) + 20|0);
 $213 = HEAP32[$212>>2]|0;
 FUNCTION_TABLE_vi[$213 & 255]($interface);
 $214 = HEAP32[$interface>>2]|0;
 $215 = (($214) + 52|0);
 $216 = HEAP32[$215>>2]|0;
 FUNCTION_TABLE_viiii[$216 & 15]($interface,0,672,456);
 $217 = HEAP32[$interface>>2]|0;
 $218 = (($217) + 12|0);
 $219 = HEAP32[$218>>2]|0;
 FUNCTION_TABLE_vii[$219 & 63]($interface,1776);
 $220 = HEAP32[$interface>>2]|0;
 $221 = (($220) + 52|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = (($this) + 56|0);
 FUNCTION_TABLE_viiii[$222 & 15]($interface,$223,448,456);
 $224 = HEAP32[$interface>>2]|0;
 $225 = (($224) + 52|0);
 $226 = HEAP32[$225>>2]|0;
 FUNCTION_TABLE_viiii[$226 & 15]($interface,$223,328,1800);
 $227 = HEAP32[$interface>>2]|0;
 $228 = (($227) + 24|0);
 $229 = HEAP32[$228>>2]|0;
 FUNCTION_TABLE_viii[$229 & 7]($interface,1832,$223);
 $230 = HEAP32[$interface>>2]|0;
 $231 = (($230) + 52|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = (($this) + 40|0);
 FUNCTION_TABLE_viiii[$232 & 15]($interface,$233,672,456);
 $234 = HEAP32[$interface>>2]|0;
 $235 = (($234) + 52|0);
 $236 = HEAP32[$235>>2]|0;
 FUNCTION_TABLE_viiii[$236 & 15]($interface,$233,328,1840);
 $237 = HEAP32[$interface>>2]|0;
 $238 = (($237) + 24|0);
 $239 = HEAP32[$238>>2]|0;
 FUNCTION_TABLE_viii[$239 & 7]($interface,1888,$233);
 $240 = HEAP32[$interface>>2]|0;
 $241 = (($240) + 52|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = (($this) + 37012|0);
 FUNCTION_TABLE_viiii[$242 & 15]($interface,$243,704,456);
 $244 = HEAP32[$interface>>2]|0;
 $245 = (($244) + 52|0);
 $246 = HEAP32[$245>>2]|0;
 FUNCTION_TABLE_viiii[$246 & 15]($interface,$243,328,1896);
 $247 = HEAP32[$interface>>2]|0;
 $248 = (($247) + 24|0);
 $249 = HEAP32[$248>>2]|0;
 FUNCTION_TABLE_viii[$249 & 7]($interface,1928,$243);
 $250 = HEAP32[$interface>>2]|0;
 $251 = (($250) + 20|0);
 $252 = HEAP32[$251>>2]|0;
 FUNCTION_TABLE_vi[$252 & 255]($interface);
 $253 = HEAP32[$interface>>2]|0;
 $254 = (($253) + 52|0);
 $255 = HEAP32[$254>>2]|0;
 FUNCTION_TABLE_viiii[$255 & 15]($interface,0,704,456);
 $256 = HEAP32[$interface>>2]|0;
 $257 = (($256) + 16|0);
 $258 = HEAP32[$257>>2]|0;
 FUNCTION_TABLE_vii[$258 & 63]($interface,1936);
 $259 = HEAP32[$interface>>2]|0;
 $260 = (($259) + 52|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = (($this) + 68|0);
 FUNCTION_TABLE_viiii[$261 & 15]($interface,$262,448,456);
 $263 = HEAP32[$interface>>2]|0;
 $264 = (($263) + 52|0);
 $265 = HEAP32[$264>>2]|0;
 FUNCTION_TABLE_viiii[$265 & 15]($interface,$262,328,1952);
 $266 = HEAP32[$interface>>2]|0;
 $267 = (($266) + 24|0);
 $268 = HEAP32[$267>>2]|0;
 FUNCTION_TABLE_viii[$268 & 7]($interface,2000,$262);
 $269 = HEAP32[$interface>>2]|0;
 $270 = (($269) + 20|0);
 $271 = HEAP32[$270>>2]|0;
 FUNCTION_TABLE_vi[$271 & 255]($interface);
 $272 = HEAP32[$interface>>2]|0;
 $273 = (($272) + 20|0);
 $274 = HEAP32[$273>>2]|0;
 FUNCTION_TABLE_vi[$274 & 255]($interface);
 $275 = HEAP32[$interface>>2]|0;
 $276 = (($275) + 20|0);
 $277 = HEAP32[$276>>2]|0;
 FUNCTION_TABLE_vi[$277 & 255]($interface);
 $278 = HEAP32[$interface>>2]|0;
 $279 = (($278) + 52|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = (($this) + 8|0);
 FUNCTION_TABLE_viiii[$280 & 15]($interface,$281,704,456);
 $282 = HEAP32[$interface>>2]|0;
 $283 = (($282) + 52|0);
 $284 = HEAP32[$283>>2]|0;
 FUNCTION_TABLE_viiii[$284 & 15]($interface,$281,328,2008);
 $285 = HEAP32[$interface>>2]|0;
 $286 = (($285) + 52|0);
 $287 = HEAP32[$286>>2]|0;
 FUNCTION_TABLE_viiii[$287 & 15]($interface,$281,608,2032);
 $288 = HEAP32[$interface>>2]|0;
 $289 = (($288) + 36|0);
 $290 = HEAP32[$289>>2]|0;
 FUNCTION_TABLE_viiidddd[$290 & 3]($interface,2040,$281,-40.0,-70.0,20.0,0.100000001490116119385);
 $291 = HEAP32[$interface>>2]|0;
 $292 = (($291) + 20|0);
 $293 = HEAP32[$292>>2]|0;
 FUNCTION_TABLE_vi[$293 & 255]($interface);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner4initEi($this,$samplingFreq) {
 $this = $this|0;
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 63]($this,$samplingFreq);
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner7computeEiPPfS1_($this,$count,$input,$output) {
 $this = $this|0;
 $count = $count|0;
 $input = $input|0;
 $output = $output|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0.0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0.0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0.0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0.0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0.0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0.0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0.0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0.0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0.0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0.0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0.0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0.0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0.0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0.0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0.0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0.0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0.0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0.0, $130 = 0.0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0.0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0.0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0.0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0.0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0.0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0.0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0.0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0.0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0.0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0.0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0.0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0.0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0.0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0.0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0.0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0.0, $150 = 0.0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0.0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0.0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0.0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0.0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0.0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0.0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0.0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0.0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0.0, $160 = 0.0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0.0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0.0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0.0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0.0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0.0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0.0, $1665 = 0.0, $1666 = 0.0, $1667 = 0.0, $1668 = 0.0, $1669 = 0.0, $167 = 0.0, $1670 = 0.0, $1671 = 0.0, $1672 = 0.0, $1673 = 0.0, $1674 = 0.0, $1675 = 0.0, $1676 = 0.0, $1677 = 0.0, $1678 = 0.0, $1679 = 0.0, $168 = 0.0, $1680 = 0.0, $1681 = 0.0;
 var $1682 = 0.0, $1683 = 0.0, $1684 = 0.0, $1685 = 0.0, $1686 = 0.0, $1687 = 0.0, $1688 = 0, $1689 = 0, $169 = 0.0, $1690 = 0, $1691 = 0.0, $1692 = 0.0, $1693 = 0.0, $1694 = 0.0, $1695 = 0, $1696 = 0, $1697 = 0.0, $1698 = 0.0, $1699 = 0.0, $17 = 0.0;
 var $170 = 0.0, $1700 = 0.0, $1701 = 0.0, $1702 = 0.0, $1703 = 0.0, $1704 = 0.0, $1705 = 0.0, $1706 = 0.0, $1707 = 0.0, $1708 = 0.0, $1709 = 0.0, $171 = 0.0, $1710 = 0.0, $1711 = 0.0, $1712 = 0.0, $1713 = 0.0, $1714 = 0.0, $1715 = 0.0, $1716 = 0.0, $1717 = 0.0;
 var $1718 = 0.0, $1719 = 0.0, $172 = 0.0, $1720 = 0.0, $1721 = 0.0, $1722 = 0.0, $1723 = 0.0, $1724 = 0.0, $1725 = 0.0, $1726 = 0.0, $1727 = 0.0, $1728 = 0.0, $1729 = 0.0, $173 = 0.0, $1730 = 0.0, $1731 = 0.0, $1732 = 0.0, $1733 = 0.0, $1734 = 0.0, $1735 = 0.0;
 var $1736 = 0.0, $1737 = 0.0, $1738 = 0.0, $1739 = 0.0, $174 = 0.0, $1740 = 0.0, $1741 = 0.0, $1742 = 0.0, $1743 = 0.0, $1744 = 0.0, $1745 = 0.0, $1746 = 0.0, $1747 = 0.0, $1748 = 0.0, $1749 = 0.0, $175 = 0.0, $1750 = 0.0, $1751 = 0.0, $1752 = 0.0, $1753 = 0.0;
 var $1754 = 0.0, $1755 = 0.0, $1756 = 0.0, $1757 = 0.0, $1758 = 0.0, $1759 = 0.0, $176 = 0.0, $1760 = 0.0, $1761 = 0.0, $1762 = 0.0, $1763 = 0.0, $1764 = 0.0, $1765 = 0.0, $1766 = 0.0, $1767 = 0.0, $1768 = 0.0, $1769 = 0.0, $177 = 0.0, $1770 = 0.0, $1771 = 0.0;
 var $1772 = 0.0, $1773 = 0.0, $1774 = 0.0, $1775 = 0.0, $1776 = 0.0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0.0, $1780 = 0.0, $1781 = 0.0, $1782 = 0.0, $1783 = 0.0, $1784 = 0.0, $1785 = 0.0, $1786 = 0.0, $1787 = 0.0, $1788 = 0.0, $1789 = 0.0, $179 = 0.0;
 var $1790 = 0.0, $1791 = 0.0, $1792 = 0.0, $1793 = 0.0, $1794 = 0.0, $1795 = 0.0, $1796 = 0.0, $1797 = 0.0, $1798 = 0.0, $1799 = 0.0, $18 = 0.0, $180 = 0.0, $1800 = 0.0, $1801 = 0.0, $1802 = 0.0, $1803 = 0.0, $1804 = 0.0, $1805 = 0.0, $1806 = 0.0, $1807 = 0.0;
 var $1808 = 0.0, $1809 = 0.0, $181 = 0.0, $1810 = 0.0, $1811 = 0.0, $1812 = 0.0, $1813 = 0.0, $1814 = 0.0, $1815 = 0.0, $1816 = 0.0, $1817 = 0.0, $1818 = 0.0, $1819 = 0.0, $182 = 0.0, $1820 = 0.0, $1821 = 0.0, $1822 = 0.0, $1823 = 0.0, $1824 = 0.0, $1825 = 0.0;
 var $1826 = 0.0, $1827 = 0.0, $1828 = 0.0, $1829 = 0.0, $183 = 0.0, $1830 = 0.0, $1831 = 0.0, $1832 = 0.0, $1833 = 0.0, $1834 = 0.0, $1835 = 0.0, $1836 = 0.0, $1837 = 0.0, $1838 = 0.0, $1839 = 0.0, $184 = 0.0, $1840 = 0.0, $1841 = 0.0, $1842 = 0.0, $1843 = 0.0;
 var $1844 = 0.0, $1845 = 0.0, $1846 = 0.0, $1847 = 0.0, $1848 = 0.0, $1849 = 0.0, $185 = 0.0, $1850 = 0.0, $1851 = 0.0, $1852 = 0.0, $1853 = 0.0, $1854 = 0.0, $1855 = 0.0, $1856 = 0.0, $1857 = 0.0, $1858 = 0.0, $1859 = 0.0, $186 = 0.0, $1860 = 0.0, $1861 = 0.0;
 var $1862 = 0.0, $1863 = 0.0, $1864 = 0.0, $1865 = 0.0, $1866 = 0.0, $1867 = 0.0, $1868 = 0.0, $1869 = 0.0, $187 = 0.0, $1870 = 0.0, $1871 = 0.0, $1872 = 0.0, $1873 = 0.0, $1874 = 0.0, $1875 = 0.0, $1876 = 0.0, $1877 = 0.0, $1878 = 0.0, $1879 = 0.0, $188 = 0.0;
 var $1880 = 0.0, $1881 = 0.0, $1882 = 0.0, $1883 = 0.0, $1884 = 0.0, $1885 = 0.0, $1886 = 0.0, $1887 = 0.0, $1888 = 0.0, $1889 = 0.0, $189 = 0.0, $1890 = 0.0, $1891 = 0.0, $1892 = 0.0, $1893 = 0.0, $1894 = 0.0, $1895 = 0.0, $1896 = 0.0, $1897 = 0.0, $1898 = 0.0;
 var $1899 = 0.0, $19 = 0, $190 = 0.0, $1900 = 0.0, $1901 = 0.0, $1902 = 0.0, $1903 = 0.0, $1904 = 0.0, $1905 = 0.0, $1906 = 0.0, $1907 = 0.0, $1908 = 0.0, $1909 = 0.0, $191 = 0.0, $1910 = 0.0, $1911 = 0.0, $1912 = 0.0, $1913 = 0.0, $1914 = 0.0, $1915 = 0.0;
 var $1916 = 0.0, $1917 = 0.0, $1918 = 0.0, $1919 = 0.0, $192 = 0.0, $1920 = 0.0, $1921 = 0.0, $1922 = 0.0, $1923 = 0.0, $1924 = 0.0, $1925 = 0.0, $1926 = 0.0, $1927 = 0.0, $1928 = 0.0, $1929 = 0.0, $193 = 0.0, $1930 = 0.0, $1931 = 0.0, $1932 = 0.0, $1933 = 0.0;
 var $1934 = 0.0, $1935 = 0.0, $1936 = 0.0, $1937 = 0.0, $1938 = 0.0, $1939 = 0.0, $194 = 0.0, $1940 = 0.0, $1941 = 0.0, $1942 = 0.0, $1943 = 0.0, $1944 = 0.0, $1945 = 0.0, $1946 = 0.0, $1947 = 0.0, $1948 = 0.0, $1949 = 0.0, $195 = 0.0, $1950 = 0.0, $1951 = 0.0;
 var $1952 = 0.0, $1953 = 0.0, $1954 = 0.0, $1955 = 0.0, $1956 = 0.0, $1957 = 0.0, $1958 = 0.0, $1959 = 0.0, $196 = 0.0, $1960 = 0.0, $1961 = 0.0, $1962 = 0.0, $1963 = 0.0, $1964 = 0.0, $1965 = 0.0, $1966 = 0.0, $1967 = 0.0, $1968 = 0.0, $1969 = 0.0, $197 = 0.0;
 var $1970 = 0.0, $1971 = 0.0, $1972 = 0.0, $1973 = 0.0, $1974 = 0.0, $1975 = 0.0, $1976 = 0.0, $1977 = 0.0, $1978 = 0.0, $1979 = 0.0, $198 = 0.0, $1980 = 0.0, $1981 = 0.0, $1982 = 0.0, $1983 = 0.0, $1984 = 0.0, $1985 = 0.0, $1986 = 0.0, $1987 = 0.0, $1988 = 0.0;
 var $1989 = 0.0, $199 = 0.0, $1990 = 0.0, $1991 = 0.0, $1992 = 0.0, $1993 = 0.0, $1994 = 0.0, $1995 = 0.0, $1996 = 0.0, $1997 = 0.0, $1998 = 0.0, $1999 = 0.0, $2 = 0.0, $20 = 0.0, $200 = 0.0, $2000 = 0.0, $2001 = 0.0, $2002 = 0.0, $2003 = 0.0, $2004 = 0.0;
 var $2005 = 0.0, $2006 = 0.0, $2007 = 0.0, $2008 = 0.0, $2009 = 0.0, $201 = 0.0, $2010 = 0.0, $2011 = 0.0, $2012 = 0.0, $2013 = 0.0, $2014 = 0.0, $2015 = 0.0, $2016 = 0.0, $2017 = 0.0, $2018 = 0.0, $2019 = 0.0, $202 = 0.0, $2020 = 0.0, $2021 = 0.0, $2022 = 0.0;
 var $2023 = 0.0, $2024 = 0.0, $2025 = 0.0, $2026 = 0.0, $2027 = 0.0, $2028 = 0.0, $2029 = 0.0, $203 = 0.0, $2030 = 0.0, $2031 = 0.0, $2032 = 0.0, $2033 = 0.0, $2034 = 0.0, $2035 = 0.0, $2036 = 0.0, $2037 = 0.0, $2038 = 0.0, $2039 = 0.0, $204 = 0.0, $2040 = 0.0;
 var $2041 = 0.0, $2042 = 0.0, $2043 = 0.0, $2044 = 0.0, $2045 = 0.0, $2046 = 0.0, $2047 = 0.0, $2048 = 0.0, $2049 = 0.0, $205 = 0.0, $2050 = 0.0, $2051 = 0.0, $2052 = 0.0, $2053 = 0.0, $2054 = 0.0, $2055 = 0.0, $2056 = 0.0, $2057 = 0.0, $2058 = 0.0, $2059 = 0.0;
 var $206 = 0.0, $2060 = 0.0, $2061 = 0.0, $2062 = 0.0, $2063 = 0.0, $2064 = 0.0, $2065 = 0.0, $2066 = 0.0, $2067 = 0.0, $2068 = 0.0, $2069 = 0.0, $207 = 0.0, $2070 = 0.0, $2071 = 0.0, $2072 = 0.0, $2073 = 0.0, $2074 = 0.0, $2075 = 0.0, $2076 = 0.0, $2077 = 0.0;
 var $2078 = 0.0, $2079 = 0.0, $208 = 0.0, $2080 = 0.0, $2081 = 0.0, $2082 = 0.0, $2083 = 0.0, $2084 = 0.0, $2085 = 0.0, $2086 = 0.0, $2087 = 0.0, $2088 = 0.0, $2089 = 0.0, $209 = 0.0, $2090 = 0.0, $2091 = 0.0, $2092 = 0.0, $2093 = 0.0, $2094 = 0.0, $2095 = 0.0;
 var $2096 = 0.0, $2097 = 0.0, $2098 = 0.0, $2099 = 0.0, $21 = 0, $210 = 0.0, $2100 = 0.0, $2101 = 0.0, $2102 = 0.0, $2103 = 0.0, $2104 = 0.0, $2105 = 0.0, $2106 = 0.0, $2107 = 0.0, $2108 = 0.0, $2109 = 0.0, $211 = 0.0, $2110 = 0.0, $2111 = 0.0, $2112 = 0.0;
 var $2113 = 0.0, $2114 = 0.0, $2115 = 0.0, $2116 = 0.0, $2117 = 0.0, $2118 = 0.0, $2119 = 0.0, $212 = 0.0, $2120 = 0.0, $2121 = 0.0, $2122 = 0.0, $2123 = 0.0, $2124 = 0.0, $2125 = 0.0, $2126 = 0.0, $2127 = 0.0, $2128 = 0.0, $2129 = 0.0, $213 = 0.0, $2130 = 0.0;
 var $2131 = 0.0, $2132 = 0.0, $2133 = 0.0, $2134 = 0.0, $2135 = 0.0, $2136 = 0.0, $2137 = 0.0, $2138 = 0.0, $2139 = 0.0, $214 = 0.0, $2140 = 0.0, $2141 = 0.0, $2142 = 0.0, $2143 = 0.0, $2144 = 0.0, $2145 = 0.0, $2146 = 0.0, $2147 = 0.0, $2148 = 0.0, $2149 = 0.0;
 var $215 = 0.0, $2150 = 0.0, $2151 = 0.0, $2152 = 0.0, $2153 = 0.0, $2154 = 0.0, $2155 = 0.0, $2156 = 0.0, $2157 = 0.0, $2158 = 0.0, $2159 = 0.0, $216 = 0.0, $2160 = 0.0, $2161 = 0.0, $2162 = 0.0, $2163 = 0.0, $2164 = 0.0, $2165 = 0.0, $2166 = 0.0, $2167 = 0.0;
 var $2168 = 0.0, $2169 = 0.0, $217 = 0.0, $2170 = 0.0, $2171 = 0.0, $2172 = 0.0, $2173 = 0.0, $2174 = 0.0, $2175 = 0.0, $2176 = 0.0, $2177 = 0.0, $2178 = 0.0, $2179 = 0.0, $218 = 0.0, $2180 = 0.0, $2181 = 0.0, $2182 = 0.0, $2183 = 0.0, $2184 = 0.0, $2185 = 0.0;
 var $2186 = 0.0, $2187 = 0.0, $2188 = 0.0, $2189 = 0.0, $219 = 0.0, $2190 = 0.0, $2191 = 0.0, $2192 = 0.0, $2193 = 0.0, $2194 = 0.0, $2195 = 0.0, $2196 = 0.0, $2197 = 0.0, $2198 = 0.0, $2199 = 0.0, $22 = 0.0, $220 = 0.0, $2200 = 0.0, $2201 = 0.0, $2202 = 0.0;
 var $2203 = 0.0, $2204 = 0.0, $2205 = 0.0, $2206 = 0.0, $2207 = 0.0, $2208 = 0.0, $2209 = 0.0, $221 = 0.0, $2210 = 0.0, $2211 = 0.0, $2212 = 0.0, $2213 = 0.0, $2214 = 0.0, $2215 = 0.0, $2216 = 0.0, $2217 = 0.0, $2218 = 0.0, $2219 = 0.0, $222 = 0.0, $2220 = 0.0;
 var $2221 = 0.0, $2222 = 0.0, $2223 = 0.0, $2224 = 0.0, $2225 = 0.0, $2226 = 0.0, $2227 = 0.0, $2228 = 0.0, $2229 = 0.0, $223 = 0.0, $2230 = 0.0, $2231 = 0.0, $2232 = 0.0, $2233 = 0.0, $2234 = 0.0, $2235 = 0.0, $2236 = 0.0, $2237 = 0.0, $2238 = 0.0, $2239 = 0.0;
 var $224 = 0.0, $2240 = 0.0, $2241 = 0.0, $2242 = 0.0, $2243 = 0.0, $2244 = 0.0, $2245 = 0.0, $2246 = 0.0, $2247 = 0.0, $2248 = 0.0, $2249 = 0.0, $225 = 0.0, $2250 = 0.0, $2251 = 0.0, $2252 = 0.0, $2253 = 0.0, $2254 = 0.0, $2255 = 0.0, $2256 = 0.0, $2257 = 0.0;
 var $2258 = 0.0, $2259 = 0.0, $226 = 0.0, $2260 = 0.0, $2261 = 0.0, $2262 = 0.0, $2263 = 0.0, $2264 = 0.0, $2265 = 0.0, $2266 = 0.0, $2267 = 0.0, $2268 = 0.0, $2269 = 0.0, $227 = 0.0, $2270 = 0.0, $2271 = 0.0, $2272 = 0.0, $2273 = 0.0, $2274 = 0.0, $2275 = 0.0;
 var $2276 = 0.0, $2277 = 0.0, $2278 = 0.0, $2279 = 0.0, $228 = 0.0, $2280 = 0.0, $2281 = 0.0, $2282 = 0.0, $2283 = 0.0, $2284 = 0.0, $2285 = 0.0, $2286 = 0.0, $2287 = 0.0, $2288 = 0.0, $2289 = 0.0, $229 = 0.0, $2290 = 0.0, $2291 = 0.0, $2292 = 0.0, $2293 = 0.0;
 var $2294 = 0.0, $2295 = 0.0, $2296 = 0.0, $2297 = 0.0, $2298 = 0.0, $2299 = 0.0, $23 = 0.0, $230 = 0.0, $2300 = 0.0, $2301 = 0.0, $2302 = 0.0, $2303 = 0.0, $2304 = 0.0, $2305 = 0.0, $2306 = 0.0, $2307 = 0.0, $2308 = 0.0, $2309 = 0.0, $231 = 0.0, $2310 = 0.0;
 var $2311 = 0.0, $2312 = 0.0, $2313 = 0.0, $2314 = 0.0, $2315 = 0.0, $2316 = 0.0, $2317 = 0.0, $2318 = 0.0, $2319 = 0.0, $232 = 0.0, $2320 = 0.0, $2321 = 0.0, $2322 = 0.0, $2323 = 0.0, $2324 = 0.0, $2325 = 0.0, $2326 = 0.0, $2327 = 0.0, $2328 = 0.0, $2329 = 0.0;
 var $233 = 0.0, $2330 = 0.0, $2331 = 0.0, $2332 = 0.0, $2333 = 0.0, $2334 = 0.0, $2335 = 0.0, $2336 = 0.0, $2337 = 0.0, $2338 = 0.0, $2339 = 0.0, $234 = 0.0, $2340 = 0.0, $2341 = 0.0, $2342 = 0.0, $2343 = 0.0, $2344 = 0.0, $2345 = 0.0, $2346 = 0.0, $2347 = 0.0;
 var $2348 = 0.0, $2349 = 0.0, $235 = 0.0, $2350 = 0.0, $2351 = 0.0, $2352 = 0.0, $2353 = 0.0, $2354 = 0.0, $2355 = 0.0, $2356 = 0.0, $2357 = 0.0, $2358 = 0.0, $2359 = 0.0, $236 = 0.0, $2360 = 0.0, $2361 = 0.0, $2362 = 0.0, $2363 = 0.0, $2364 = 0.0, $2365 = 0.0;
 var $2366 = 0.0, $2367 = 0.0, $2368 = 0.0, $2369 = 0.0, $237 = 0.0, $2370 = 0.0, $2371 = 0.0, $2372 = 0.0, $2373 = 0.0, $2374 = 0.0, $2375 = 0.0, $2376 = 0.0, $2377 = 0.0, $2378 = 0.0, $2379 = 0.0, $238 = 0.0, $2380 = 0.0, $2381 = 0.0, $2382 = 0.0, $2383 = 0.0;
 var $2384 = 0.0, $2385 = 0.0, $2386 = 0.0, $2387 = 0.0, $2388 = 0.0, $2389 = 0.0, $239 = 0.0, $2390 = 0.0, $2391 = 0.0, $2392 = 0.0, $2393 = 0.0, $2394 = 0.0, $2395 = 0.0, $2396 = 0.0, $2397 = 0.0, $2398 = 0.0, $2399 = 0.0, $24 = 0, $240 = 0.0, $2400 = 0.0;
 var $2401 = 0.0, $2402 = 0.0, $2403 = 0.0, $2404 = 0.0, $2405 = 0.0, $2406 = 0.0, $2407 = 0.0, $2408 = 0.0, $2409 = 0.0, $241 = 0.0, $2410 = 0.0, $2411 = 0.0, $2412 = 0.0, $2413 = 0.0, $2414 = 0.0, $2415 = 0.0, $2416 = 0.0, $2417 = 0.0, $2418 = 0.0, $2419 = 0.0;
 var $242 = 0.0, $2420 = 0.0, $2421 = 0.0, $2422 = 0.0, $2423 = 0.0, $2424 = 0.0, $2425 = 0.0, $2426 = 0.0, $2427 = 0.0, $2428 = 0.0, $2429 = 0.0, $243 = 0.0, $2430 = 0.0, $2431 = 0.0, $2432 = 0.0, $2433 = 0.0, $2434 = 0.0, $2435 = 0.0, $2436 = 0.0, $2437 = 0.0;
 var $2438 = 0.0, $2439 = 0.0, $244 = 0.0, $2440 = 0.0, $2441 = 0.0, $2442 = 0.0, $2443 = 0.0, $2444 = 0.0, $2445 = 0.0, $2446 = 0.0, $2447 = 0.0, $2448 = 0.0, $2449 = 0.0, $245 = 0.0, $2450 = 0.0, $2451 = 0.0, $2452 = 0.0, $2453 = 0.0, $2454 = 0.0, $2455 = 0.0;
 var $2456 = 0.0, $2457 = 0.0, $2458 = 0.0, $2459 = 0.0, $246 = 0.0, $2460 = 0.0, $2461 = 0.0, $2462 = 0.0, $2463 = 0.0, $2464 = 0.0, $2465 = 0.0, $2466 = 0.0, $2467 = 0.0, $2468 = 0.0, $2469 = 0.0, $247 = 0.0, $2470 = 0.0, $2471 = 0.0, $2472 = 0.0, $2473 = 0.0;
 var $2474 = 0.0, $2475 = 0.0, $2476 = 0.0, $2477 = 0.0, $2478 = 0.0, $2479 = 0.0, $248 = 0.0, $2480 = 0.0, $2481 = 0.0, $2482 = 0.0, $2483 = 0.0, $2484 = 0.0, $2485 = 0.0, $2486 = 0.0, $2487 = 0.0, $2488 = 0.0, $2489 = 0.0, $249 = 0.0, $2490 = 0.0, $2491 = 0.0;
 var $2492 = 0.0, $2493 = 0.0, $2494 = 0.0, $2495 = 0.0, $2496 = 0.0, $2497 = 0.0, $2498 = 0.0, $2499 = 0.0, $25 = 0.0, $250 = 0.0, $2500 = 0.0, $2501 = 0.0, $2502 = 0.0, $2503 = 0.0, $2504 = 0.0, $2505 = 0.0, $2506 = 0.0, $2507 = 0.0, $2508 = 0.0, $2509 = 0.0;
 var $251 = 0.0, $2510 = 0.0, $2511 = 0.0, $2512 = 0.0, $2513 = 0.0, $2514 = 0.0, $2515 = 0.0, $2516 = 0.0, $2517 = 0.0, $2518 = 0.0, $2519 = 0.0, $252 = 0.0, $2520 = 0.0, $2521 = 0.0, $2522 = 0.0, $2523 = 0.0, $2524 = 0.0, $2525 = 0.0, $2526 = 0.0, $2527 = 0.0;
 var $2528 = 0.0, $2529 = 0.0, $253 = 0.0, $2530 = 0.0, $2531 = 0.0, $2532 = 0.0, $2533 = 0.0, $2534 = 0.0, $2535 = 0.0, $2536 = 0.0, $2537 = 0.0, $2538 = 0.0, $2539 = 0.0, $254 = 0.0, $2540 = 0.0, $2541 = 0.0, $2542 = 0.0, $2543 = 0.0, $2544 = 0.0, $2545 = 0.0;
 var $2546 = 0.0, $2547 = 0.0, $2548 = 0.0, $2549 = 0.0, $255 = 0.0, $2550 = 0.0, $2551 = 0.0, $2552 = 0.0, $2553 = 0.0, $2554 = 0.0, $2555 = 0.0, $2556 = 0.0, $2557 = 0.0, $2558 = 0.0, $2559 = 0.0, $256 = 0.0, $2560 = 0.0, $2561 = 0.0, $2562 = 0.0, $2563 = 0.0;
 var $2564 = 0.0, $2565 = 0.0, $2566 = 0.0, $2567 = 0.0, $2568 = 0.0, $2569 = 0.0, $257 = 0.0, $2570 = 0.0, $2571 = 0.0, $2572 = 0.0, $2573 = 0.0, $2574 = 0.0, $2575 = 0.0, $2576 = 0.0, $2577 = 0.0, $2578 = 0.0, $2579 = 0.0, $258 = 0.0, $2580 = 0.0, $2581 = 0.0;
 var $2582 = 0.0, $2583 = 0.0, $2584 = 0.0, $2585 = 0.0, $2586 = 0.0, $2587 = 0.0, $2588 = 0.0, $2589 = 0.0, $259 = 0.0, $2590 = 0.0, $2591 = 0.0, $2592 = 0.0, $2593 = 0.0, $2594 = 0.0, $2595 = 0.0, $2596 = 0.0, $2597 = 0.0, $2598 = 0.0, $2599 = 0.0, $26 = 0.0;
 var $260 = 0.0, $2600 = 0.0, $2601 = 0.0, $2602 = 0.0, $2603 = 0.0, $2604 = 0.0, $2605 = 0.0, $2606 = 0.0, $2607 = 0.0, $2608 = 0.0, $2609 = 0.0, $261 = 0.0, $2610 = 0.0, $2611 = 0.0, $2612 = 0.0, $2613 = 0.0, $2614 = 0.0, $2615 = 0.0, $2616 = 0.0, $2617 = 0.0;
 var $2618 = 0.0, $2619 = 0.0, $262 = 0.0, $2620 = 0.0, $2621 = 0.0, $2622 = 0.0, $2623 = 0.0, $2624 = 0.0, $2625 = 0.0, $2626 = 0.0, $2627 = 0.0, $2628 = 0.0, $2629 = 0.0, $263 = 0.0, $2630 = 0.0, $2631 = 0.0, $2632 = 0.0, $2633 = 0.0, $2634 = 0.0, $2635 = 0.0;
 var $2636 = 0.0, $2637 = 0.0, $2638 = 0.0, $2639 = 0.0, $264 = 0.0, $2640 = 0.0, $2641 = 0.0, $2642 = 0.0, $2643 = 0.0, $2644 = 0.0, $2645 = 0.0, $2646 = 0.0, $2647 = 0.0, $2648 = 0.0, $2649 = 0.0, $265 = 0.0, $2650 = 0.0, $2651 = 0.0, $2652 = 0.0, $2653 = 0.0;
 var $2654 = 0.0, $2655 = 0.0, $2656 = 0.0, $2657 = 0.0, $2658 = 0.0, $2659 = 0.0, $266 = 0.0, $2660 = 0.0, $2661 = 0.0, $2662 = 0.0, $2663 = 0.0, $2664 = 0.0, $2665 = 0.0, $2666 = 0.0, $2667 = 0.0, $2668 = 0.0, $2669 = 0.0, $267 = 0.0, $2670 = 0.0, $2671 = 0.0;
 var $2672 = 0.0, $2673 = 0.0, $2674 = 0.0, $2675 = 0.0, $2676 = 0.0, $2677 = 0.0, $2678 = 0.0, $2679 = 0.0, $268 = 0.0, $2680 = 0.0, $2681 = 0.0, $2682 = 0.0, $2683 = 0.0, $2684 = 0.0, $2685 = 0.0, $2686 = 0.0, $2687 = 0.0, $2688 = 0.0, $2689 = 0.0, $269 = 0.0;
 var $2690 = 0.0, $2691 = 0.0, $2692 = 0.0, $2693 = 0.0, $2694 = 0.0, $2695 = 0.0, $2696 = 0.0, $2697 = 0.0, $2698 = 0.0, $2699 = 0.0, $27 = 0.0, $270 = 0.0, $2700 = 0.0, $2701 = 0.0, $2702 = 0.0, $2703 = 0.0, $2704 = 0.0, $2705 = 0.0, $2706 = 0.0, $2707 = 0.0;
 var $2708 = 0.0, $2709 = 0.0, $271 = 0.0, $2710 = 0.0, $2711 = 0.0, $2712 = 0.0, $2713 = 0.0, $2714 = 0.0, $2715 = 0.0, $2716 = 0.0, $2717 = 0.0, $2718 = 0.0, $2719 = 0.0, $272 = 0.0, $2720 = 0.0, $2721 = 0.0, $2722 = 0.0, $2723 = 0.0, $2724 = 0.0, $2725 = 0.0;
 var $2726 = 0.0, $2727 = 0.0, $2728 = 0.0, $2729 = 0.0, $273 = 0.0, $2730 = 0.0, $2731 = 0.0, $2732 = 0.0, $2733 = 0.0, $2734 = 0.0, $2735 = 0.0, $2736 = 0.0, $2737 = 0.0, $2738 = 0.0, $2739 = 0.0, $274 = 0.0, $2740 = 0.0, $2741 = 0.0, $2742 = 0.0, $2743 = 0.0;
 var $2744 = 0.0, $2745 = 0.0, $2746 = 0.0, $2747 = 0.0, $2748 = 0.0, $2749 = 0.0, $275 = 0.0, $2750 = 0.0, $2751 = 0.0, $2752 = 0.0, $2753 = 0.0, $2754 = 0.0, $2755 = 0.0, $2756 = 0.0, $2757 = 0.0, $2758 = 0.0, $2759 = 0.0, $276 = 0.0, $2760 = 0.0, $2761 = 0.0;
 var $2762 = 0.0, $2763 = 0.0, $2764 = 0.0, $2765 = 0.0, $2766 = 0.0, $2767 = 0.0, $2768 = 0.0, $2769 = 0.0, $277 = 0.0, $2770 = 0.0, $2771 = 0.0, $2772 = 0.0, $2773 = 0.0, $2774 = 0.0, $2775 = 0.0, $2776 = 0.0, $2777 = 0.0, $2778 = 0.0, $2779 = 0.0, $278 = 0.0;
 var $2780 = 0.0, $2781 = 0.0, $2782 = 0.0, $2783 = 0.0, $2784 = 0.0, $2785 = 0.0, $2786 = 0.0, $2787 = 0.0, $2788 = 0.0, $2789 = 0.0, $279 = 0.0, $2790 = 0.0, $2791 = 0.0, $2792 = 0.0, $2793 = 0.0, $2794 = 0.0, $2795 = 0.0, $2796 = 0.0, $2797 = 0.0, $2798 = 0.0;
 var $2799 = 0.0, $28 = 0.0, $280 = 0.0, $2800 = 0.0, $2801 = 0.0, $2802 = 0.0, $2803 = 0.0, $2804 = 0.0, $2805 = 0.0, $2806 = 0.0, $2807 = 0.0, $2808 = 0.0, $2809 = 0.0, $281 = 0.0, $2810 = 0.0, $2811 = 0.0, $2812 = 0.0, $2813 = 0.0, $2814 = 0.0, $2815 = 0.0;
 var $2816 = 0.0, $2817 = 0.0, $2818 = 0.0, $2819 = 0.0, $282 = 0.0, $2820 = 0.0, $2821 = 0.0, $2822 = 0.0, $2823 = 0.0, $2824 = 0.0, $2825 = 0.0, $2826 = 0.0, $2827 = 0.0, $2828 = 0.0, $2829 = 0.0, $283 = 0.0, $2830 = 0.0, $2831 = 0.0, $2832 = 0.0, $2833 = 0.0;
 var $2834 = 0.0, $2835 = 0.0, $2836 = 0.0, $2837 = 0.0, $2838 = 0.0, $2839 = 0.0, $284 = 0.0, $2840 = 0.0, $2841 = 0.0, $2842 = 0.0, $2843 = 0.0, $2844 = 0.0, $2845 = 0.0, $2846 = 0.0, $2847 = 0.0, $2848 = 0.0, $2849 = 0.0, $285 = 0.0, $2850 = 0.0, $2851 = 0.0;
 var $2852 = 0.0, $2853 = 0.0, $2854 = 0.0, $2855 = 0.0, $2856 = 0.0, $2857 = 0.0, $2858 = 0.0, $2859 = 0.0, $286 = 0.0, $2860 = 0.0, $2861 = 0.0, $2862 = 0.0, $2863 = 0.0, $2864 = 0.0, $2865 = 0.0, $2866 = 0.0, $2867 = 0.0, $2868 = 0.0, $2869 = 0.0, $287 = 0.0;
 var $2870 = 0.0, $2871 = 0.0, $2872 = 0.0, $2873 = 0.0, $2874 = 0.0, $2875 = 0.0, $2876 = 0.0, $2877 = 0.0, $2878 = 0.0, $2879 = 0.0, $288 = 0.0, $2880 = 0.0, $2881 = 0.0, $2882 = 0.0, $2883 = 0.0, $2884 = 0.0, $2885 = 0.0, $2886 = 0.0, $2887 = 0.0, $2888 = 0.0;
 var $2889 = 0.0, $289 = 0.0, $2890 = 0.0, $2891 = 0.0, $2892 = 0.0, $2893 = 0.0, $2894 = 0.0, $2895 = 0.0, $2896 = 0.0, $2897 = 0.0, $2898 = 0.0, $2899 = 0.0, $29 = 0.0, $290 = 0.0, $2900 = 0.0, $2901 = 0.0, $2902 = 0.0, $2903 = 0.0, $2904 = 0.0, $2905 = 0.0;
 var $2906 = 0.0, $2907 = 0.0, $2908 = 0.0, $2909 = 0.0, $291 = 0.0, $2910 = 0.0, $2911 = 0.0, $2912 = 0.0, $2913 = 0.0, $2914 = 0.0, $2915 = 0.0, $2916 = 0.0, $2917 = 0.0, $2918 = 0.0, $2919 = 0.0, $292 = 0.0, $2920 = 0.0, $2921 = 0.0, $2922 = 0.0, $2923 = 0.0;
 var $2924 = 0.0, $2925 = 0.0, $2926 = 0.0, $2927 = 0.0, $2928 = 0.0, $2929 = 0.0, $293 = 0.0, $2930 = 0.0, $2931 = 0.0, $2932 = 0.0, $2933 = 0.0, $2934 = 0.0, $2935 = 0.0, $2936 = 0.0, $2937 = 0.0, $2938 = 0.0, $2939 = 0.0, $294 = 0.0, $2940 = 0.0, $2941 = 0.0;
 var $2942 = 0.0, $2943 = 0.0, $2944 = 0.0, $2945 = 0.0, $2946 = 0.0, $2947 = 0.0, $2948 = 0.0, $2949 = 0.0, $295 = 0.0, $2950 = 0.0, $2951 = 0.0, $2952 = 0.0, $2953 = 0.0, $2954 = 0.0, $2955 = 0.0, $2956 = 0.0, $2957 = 0.0, $2958 = 0.0, $2959 = 0.0, $296 = 0.0;
 var $2960 = 0.0, $2961 = 0.0, $2962 = 0.0, $2963 = 0.0, $2964 = 0.0, $2965 = 0.0, $2966 = 0.0, $2967 = 0.0, $2968 = 0.0, $2969 = 0.0, $297 = 0.0, $2970 = 0.0, $2971 = 0.0, $2972 = 0.0, $2973 = 0.0, $2974 = 0.0, $2975 = 0.0, $2976 = 0.0, $2977 = 0.0, $2978 = 0.0;
 var $2979 = 0.0, $298 = 0.0, $2980 = 0.0, $2981 = 0.0, $2982 = 0.0, $2983 = 0.0, $2984 = 0.0, $2985 = 0.0, $2986 = 0.0, $2987 = 0.0, $2988 = 0.0, $2989 = 0.0, $299 = 0.0, $2990 = 0.0, $2991 = 0.0, $2992 = 0.0, $2993 = 0.0, $2994 = 0.0, $2995 = 0.0, $2996 = 0.0;
 var $2997 = 0.0, $2998 = 0.0, $2999 = 0.0, $3 = 0.0, $30 = 0.0, $300 = 0.0, $3000 = 0.0, $3001 = 0.0, $3002 = 0.0, $3003 = 0.0, $3004 = 0.0, $3005 = 0.0, $3006 = 0.0, $3007 = 0.0, $3008 = 0.0, $3009 = 0.0, $301 = 0.0, $3010 = 0.0, $3011 = 0.0, $3012 = 0.0;
 var $3013 = 0.0, $3014 = 0.0, $3015 = 0.0, $3016 = 0.0, $3017 = 0.0, $3018 = 0.0, $3019 = 0.0, $302 = 0.0, $3020 = 0.0, $3021 = 0.0, $3022 = 0.0, $3023 = 0.0, $3024 = 0.0, $3025 = 0.0, $3026 = 0.0, $3027 = 0.0, $3028 = 0.0, $3029 = 0.0, $303 = 0.0, $3030 = 0.0;
 var $3031 = 0.0, $3032 = 0.0, $3033 = 0.0, $3034 = 0.0, $3035 = 0.0, $3036 = 0.0, $3037 = 0.0, $3038 = 0.0, $3039 = 0.0, $304 = 0.0, $3040 = 0.0, $3041 = 0.0, $3042 = 0.0, $3043 = 0.0, $3044 = 0.0, $3045 = 0.0, $3046 = 0.0, $3047 = 0.0, $3048 = 0.0, $3049 = 0.0;
 var $305 = 0.0, $3050 = 0.0, $3051 = 0.0, $3052 = 0.0, $3053 = 0.0, $3054 = 0.0, $3055 = 0.0, $3056 = 0.0, $3057 = 0.0, $3058 = 0.0, $3059 = 0.0, $306 = 0.0, $3060 = 0.0, $3061 = 0.0, $3062 = 0.0, $3063 = 0.0, $3064 = 0.0, $3065 = 0.0, $3066 = 0.0, $3067 = 0.0;
 var $3068 = 0.0, $3069 = 0.0, $307 = 0.0, $3070 = 0.0, $3071 = 0.0, $3072 = 0.0, $3073 = 0.0, $3074 = 0.0, $3075 = 0.0, $3076 = 0.0, $3077 = 0.0, $3078 = 0.0, $3079 = 0.0, $308 = 0.0, $3080 = 0.0, $3081 = 0.0, $3082 = 0.0, $3083 = 0.0, $3084 = 0.0, $3085 = 0.0;
 var $3086 = 0.0, $3087 = 0.0, $3088 = 0.0, $3089 = 0.0, $309 = 0.0, $3090 = 0.0, $3091 = 0.0, $3092 = 0.0, $3093 = 0.0, $3094 = 0.0, $3095 = 0.0, $3096 = 0.0, $3097 = 0.0, $3098 = 0.0, $3099 = 0.0, $31 = 0.0, $310 = 0.0, $3100 = 0.0, $3101 = 0.0, $3102 = 0.0;
 var $3103 = 0.0, $3104 = 0.0, $3105 = 0.0, $3106 = 0.0, $3107 = 0.0, $3108 = 0.0, $3109 = 0.0, $311 = 0.0, $3110 = 0.0, $3111 = 0.0, $3112 = 0.0, $3113 = 0.0, $3114 = 0.0, $3115 = 0.0, $3116 = 0.0, $3117 = 0.0, $3118 = 0.0, $3119 = 0.0, $312 = 0.0, $3120 = 0.0;
 var $3121 = 0.0, $3122 = 0.0, $3123 = 0.0, $3124 = 0.0, $3125 = 0.0, $3126 = 0.0, $3127 = 0.0, $3128 = 0.0, $3129 = 0.0, $313 = 0.0, $3130 = 0.0, $3131 = 0.0, $3132 = 0.0, $3133 = 0.0, $3134 = 0.0, $3135 = 0.0, $3136 = 0.0, $3137 = 0.0, $3138 = 0.0, $3139 = 0.0;
 var $314 = 0.0, $3140 = 0.0, $3141 = 0.0, $3142 = 0.0, $3143 = 0.0, $3144 = 0.0, $3145 = 0.0, $3146 = 0.0, $3147 = 0.0, $3148 = 0.0, $3149 = 0.0, $315 = 0.0, $3150 = 0.0, $3151 = 0.0, $3152 = 0.0, $3153 = 0.0, $3154 = 0.0, $3155 = 0.0, $3156 = 0.0, $3157 = 0.0;
 var $3158 = 0.0, $3159 = 0.0, $316 = 0.0, $3160 = 0.0, $3161 = 0.0, $3162 = 0.0, $3163 = 0.0, $3164 = 0.0, $3165 = 0.0, $3166 = 0.0, $3167 = 0.0, $3168 = 0.0, $3169 = 0.0, $317 = 0.0, $3170 = 0.0, $3171 = 0.0, $3172 = 0.0, $3173 = 0.0, $3174 = 0.0, $3175 = 0.0;
 var $3176 = 0.0, $3177 = 0.0, $3178 = 0.0, $3179 = 0.0, $318 = 0.0, $3180 = 0.0, $3181 = 0.0, $3182 = 0.0, $3183 = 0.0, $3184 = 0.0, $3185 = 0.0, $3186 = 0.0, $3187 = 0.0, $3188 = 0.0, $3189 = 0.0, $319 = 0.0, $3190 = 0.0, $3191 = 0.0, $3192 = 0.0, $3193 = 0.0;
 var $3194 = 0.0, $3195 = 0.0, $3196 = 0.0, $3197 = 0.0, $3198 = 0.0, $3199 = 0.0, $32 = 0.0, $320 = 0.0, $3200 = 0.0, $3201 = 0.0, $3202 = 0.0, $3203 = 0.0, $3204 = 0.0, $3205 = 0.0, $3206 = 0.0, $3207 = 0.0, $3208 = 0.0, $3209 = 0.0, $321 = 0.0, $3210 = 0.0;
 var $3211 = 0.0, $3212 = 0.0, $3213 = 0.0, $3214 = 0.0, $3215 = 0.0, $3216 = 0.0, $3217 = 0.0, $3218 = 0.0, $3219 = 0.0, $322 = 0.0, $3220 = 0.0, $3221 = 0.0, $3222 = 0.0, $3223 = 0.0, $3224 = 0.0, $3225 = 0.0, $3226 = 0.0, $3227 = 0.0, $3228 = 0.0, $3229 = 0.0;
 var $323 = 0.0, $3230 = 0.0, $3231 = 0.0, $3232 = 0.0, $3233 = 0.0, $3234 = 0.0, $3235 = 0.0, $3236 = 0.0, $3237 = 0.0, $3238 = 0.0, $3239 = 0.0, $324 = 0.0, $3240 = 0.0, $3241 = 0.0, $3242 = 0.0, $3243 = 0.0, $3244 = 0.0, $3245 = 0.0, $3246 = 0.0, $3247 = 0.0;
 var $3248 = 0.0, $3249 = 0.0, $325 = 0.0, $3250 = 0.0, $3251 = 0.0, $3252 = 0.0, $3253 = 0.0, $3254 = 0.0, $3255 = 0.0, $3256 = 0.0, $3257 = 0.0, $3258 = 0.0, $3259 = 0.0, $326 = 0.0, $3260 = 0.0, $3261 = 0.0, $3262 = 0.0, $3263 = 0.0, $3264 = 0.0, $3265 = 0.0;
 var $3266 = 0.0, $3267 = 0.0, $3268 = 0.0, $3269 = 0.0, $327 = 0.0, $3270 = 0.0, $3271 = 0.0, $3272 = 0.0, $3273 = 0.0, $3274 = 0.0, $3275 = 0.0, $3276 = 0.0, $3277 = 0.0, $3278 = 0.0, $3279 = 0.0, $328 = 0.0, $3280 = 0.0, $3281 = 0.0, $3282 = 0.0, $3283 = 0.0;
 var $3284 = 0.0, $3285 = 0.0, $3286 = 0.0, $3287 = 0.0, $3288 = 0.0, $3289 = 0.0, $329 = 0.0, $3290 = 0.0, $3291 = 0.0, $3292 = 0.0, $3293 = 0.0, $3294 = 0.0, $3295 = 0.0, $3296 = 0.0, $3297 = 0.0, $3298 = 0.0, $3299 = 0.0, $33 = 0, $330 = 0.0, $3300 = 0.0;
 var $3301 = 0.0, $3302 = 0.0, $3303 = 0.0, $3304 = 0.0, $3305 = 0.0, $3306 = 0.0, $3307 = 0.0, $3308 = 0.0, $3309 = 0.0, $331 = 0.0, $3310 = 0.0, $3311 = 0.0, $3312 = 0.0, $3313 = 0.0, $3314 = 0.0, $3315 = 0.0, $3316 = 0.0, $3317 = 0.0, $3318 = 0.0, $3319 = 0.0;
 var $332 = 0.0, $3320 = 0.0, $3321 = 0.0, $3322 = 0.0, $3323 = 0.0, $3324 = 0.0, $3325 = 0.0, $3326 = 0.0, $3327 = 0.0, $3328 = 0.0, $3329 = 0.0, $333 = 0.0, $3330 = 0.0, $3331 = 0.0, $3332 = 0.0, $3333 = 0.0, $3334 = 0.0, $3335 = 0.0, $3336 = 0.0, $3337 = 0.0;
 var $3338 = 0.0, $3339 = 0.0, $334 = 0.0, $3340 = 0.0, $3341 = 0.0, $3342 = 0.0, $3343 = 0.0, $3344 = 0.0, $3345 = 0.0, $3346 = 0.0, $3347 = 0.0, $3348 = 0.0, $3349 = 0.0, $335 = 0.0, $3350 = 0.0, $3351 = 0.0, $3352 = 0.0, $3353 = 0.0, $3354 = 0.0, $3355 = 0.0;
 var $3356 = 0.0, $3357 = 0.0, $3358 = 0.0, $3359 = 0.0, $336 = 0.0, $3360 = 0.0, $3361 = 0.0, $3362 = 0.0, $3363 = 0.0, $3364 = 0.0, $3365 = 0.0, $3366 = 0.0, $3367 = 0.0, $3368 = 0.0, $3369 = 0.0, $337 = 0.0, $3370 = 0.0, $3371 = 0.0, $3372 = 0.0, $3373 = 0.0;
 var $3374 = 0.0, $3375 = 0.0, $3376 = 0.0, $3377 = 0.0, $3378 = 0.0, $3379 = 0.0, $338 = 0.0, $3380 = 0.0, $3381 = 0.0, $3382 = 0.0, $3383 = 0.0, $3384 = 0.0, $3385 = 0.0, $3386 = 0.0, $3387 = 0.0, $3388 = 0.0, $3389 = 0.0, $339 = 0.0, $3390 = 0.0, $3391 = 0.0;
 var $3392 = 0.0, $3393 = 0.0, $3394 = 0.0, $3395 = 0.0, $3396 = 0.0, $3397 = 0.0, $3398 = 0.0, $3399 = 0.0, $34 = 0.0, $340 = 0.0, $3400 = 0.0, $3401 = 0.0, $3402 = 0.0, $3403 = 0.0, $3404 = 0.0, $3405 = 0.0, $3406 = 0.0, $3407 = 0.0, $3408 = 0.0, $3409 = 0.0;
 var $341 = 0.0, $3410 = 0.0, $3411 = 0.0, $3412 = 0.0, $3413 = 0.0, $3414 = 0.0, $3415 = 0.0, $3416 = 0.0, $3417 = 0.0, $3418 = 0.0, $3419 = 0.0, $342 = 0.0, $3420 = 0.0, $3421 = 0.0, $3422 = 0.0, $3423 = 0.0, $3424 = 0.0, $3425 = 0.0, $3426 = 0.0, $3427 = 0.0;
 var $3428 = 0.0, $3429 = 0.0, $343 = 0.0, $3430 = 0.0, $3431 = 0.0, $3432 = 0.0, $3433 = 0.0, $3434 = 0.0, $3435 = 0.0, $3436 = 0.0, $3437 = 0.0, $3438 = 0.0, $3439 = 0.0, $344 = 0.0, $3440 = 0.0, $3441 = 0.0, $3442 = 0.0, $3443 = 0.0, $3444 = 0.0, $3445 = 0.0;
 var $3446 = 0.0, $3447 = 0.0, $3448 = 0.0, $3449 = 0.0, $345 = 0.0, $3450 = 0.0, $3451 = 0.0, $3452 = 0.0, $3453 = 0.0, $3454 = 0.0, $3455 = 0.0, $3456 = 0.0, $3457 = 0.0, $3458 = 0.0, $3459 = 0.0, $346 = 0.0, $3460 = 0.0, $3461 = 0.0, $3462 = 0.0, $3463 = 0.0;
 var $3464 = 0.0, $3465 = 0.0, $3466 = 0.0, $3467 = 0.0, $3468 = 0.0, $3469 = 0.0, $347 = 0.0, $3470 = 0.0, $3471 = 0.0, $3472 = 0.0, $3473 = 0.0, $3474 = 0.0, $3475 = 0.0, $3476 = 0.0, $3477 = 0.0, $3478 = 0.0, $3479 = 0.0, $348 = 0.0, $3480 = 0.0, $3481 = 0.0;
 var $3482 = 0.0, $3483 = 0.0, $3484 = 0.0, $3485 = 0.0, $3486 = 0.0, $3487 = 0.0, $3488 = 0.0, $3489 = 0.0, $349 = 0.0, $3490 = 0.0, $3491 = 0.0, $3492 = 0.0, $3493 = 0.0, $3494 = 0.0, $3495 = 0.0, $3496 = 0.0, $3497 = 0.0, $3498 = 0.0, $3499 = 0.0, $35 = 0;
 var $350 = 0.0, $3500 = 0.0, $3501 = 0.0, $3502 = 0.0, $3503 = 0.0, $3504 = 0.0, $3505 = 0.0, $3506 = 0.0, $3507 = 0.0, $3508 = 0.0, $3509 = 0.0, $351 = 0.0, $3510 = 0.0, $3511 = 0.0, $3512 = 0.0, $3513 = 0.0, $3514 = 0.0, $3515 = 0.0, $3516 = 0.0, $3517 = 0.0;
 var $3518 = 0.0, $3519 = 0.0, $352 = 0.0, $3520 = 0.0, $3521 = 0.0, $3522 = 0.0, $3523 = 0.0, $3524 = 0.0, $3525 = 0.0, $3526 = 0.0, $3527 = 0.0, $3528 = 0.0, $3529 = 0.0, $353 = 0.0, $3530 = 0.0, $3531 = 0.0, $3532 = 0.0, $3533 = 0.0, $3534 = 0.0, $3535 = 0.0;
 var $3536 = 0.0, $3537 = 0.0, $3538 = 0.0, $3539 = 0.0, $354 = 0.0, $3540 = 0.0, $3541 = 0.0, $3542 = 0.0, $3543 = 0.0, $3544 = 0.0, $3545 = 0.0, $3546 = 0.0, $3547 = 0.0, $3548 = 0.0, $3549 = 0.0, $355 = 0.0, $3550 = 0.0, $3551 = 0.0, $3552 = 0.0, $3553 = 0.0;
 var $3554 = 0.0, $3555 = 0.0, $3556 = 0.0, $3557 = 0.0, $3558 = 0.0, $3559 = 0.0, $356 = 0.0, $3560 = 0.0, $3561 = 0.0, $3562 = 0.0, $3563 = 0.0, $3564 = 0.0, $3565 = 0.0, $3566 = 0.0, $3567 = 0.0, $3568 = 0.0, $3569 = 0.0, $357 = 0.0, $3570 = 0.0, $3571 = 0.0;
 var $3572 = 0.0, $3573 = 0.0, $3574 = 0.0, $3575 = 0.0, $3576 = 0.0, $3577 = 0.0, $3578 = 0.0, $3579 = 0.0, $358 = 0.0, $3580 = 0.0, $3581 = 0.0, $3582 = 0.0, $3583 = 0.0, $3584 = 0.0, $3585 = 0.0, $3586 = 0.0, $3587 = 0.0, $3588 = 0.0, $3589 = 0.0, $359 = 0.0;
 var $3590 = 0.0, $3591 = 0.0, $3592 = 0.0, $3593 = 0.0, $3594 = 0.0, $3595 = 0.0, $3596 = 0.0, $3597 = 0.0, $3598 = 0.0, $3599 = 0.0, $36 = 0.0, $360 = 0.0, $3600 = 0.0, $3601 = 0.0, $3602 = 0.0, $3603 = 0.0, $3604 = 0.0, $3605 = 0.0, $3606 = 0.0, $3607 = 0.0;
 var $3608 = 0.0, $3609 = 0.0, $361 = 0.0, $3610 = 0.0, $3611 = 0.0, $3612 = 0.0, $3613 = 0.0, $3614 = 0.0, $3615 = 0.0, $3616 = 0.0, $3617 = 0.0, $3618 = 0.0, $3619 = 0.0, $362 = 0.0, $3620 = 0.0, $3621 = 0.0, $3622 = 0.0, $3623 = 0.0, $3624 = 0.0, $3625 = 0.0;
 var $3626 = 0.0, $3627 = 0.0, $3628 = 0.0, $3629 = 0.0, $363 = 0.0, $3630 = 0.0, $3631 = 0.0, $3632 = 0.0, $3633 = 0.0, $3634 = 0.0, $3635 = 0.0, $3636 = 0.0, $3637 = 0.0, $3638 = 0.0, $3639 = 0.0, $364 = 0.0, $3640 = 0.0, $3641 = 0.0, $3642 = 0.0, $3643 = 0.0;
 var $3644 = 0.0, $3645 = 0.0, $3646 = 0.0, $3647 = 0.0, $3648 = 0.0, $3649 = 0.0, $365 = 0.0, $3650 = 0.0, $3651 = 0.0, $3652 = 0.0, $3653 = 0.0, $3654 = 0.0, $3655 = 0.0, $3656 = 0.0, $3657 = 0.0, $3658 = 0.0, $3659 = 0.0, $366 = 0.0, $3660 = 0.0, $3661 = 0.0;
 var $3662 = 0.0, $3663 = 0.0, $3664 = 0.0, $3665 = 0.0, $3666 = 0.0, $3667 = 0.0, $3668 = 0.0, $3669 = 0.0, $367 = 0.0, $3670 = 0.0, $3671 = 0.0, $3672 = 0.0, $3673 = 0.0, $3674 = 0.0, $3675 = 0.0, $3676 = 0.0, $3677 = 0.0, $3678 = 0.0, $3679 = 0.0, $368 = 0.0;
 var $3680 = 0.0, $3681 = 0.0, $3682 = 0.0, $3683 = 0.0, $3684 = 0.0, $3685 = 0.0, $3686 = 0.0, $3687 = 0.0, $3688 = 0.0, $3689 = 0.0, $369 = 0.0, $3690 = 0.0, $3691 = 0.0, $3692 = 0.0, $3693 = 0.0, $3694 = 0.0, $3695 = 0.0, $3696 = 0.0, $3697 = 0.0, $3698 = 0.0;
 var $3699 = 0.0, $37 = 0.0, $370 = 0.0, $3700 = 0.0, $3701 = 0.0, $3702 = 0.0, $3703 = 0.0, $3704 = 0.0, $3705 = 0.0, $3706 = 0.0, $3707 = 0.0, $3708 = 0.0, $3709 = 0.0, $371 = 0.0, $3710 = 0.0, $3711 = 0.0, $3712 = 0.0, $3713 = 0.0, $3714 = 0.0, $3715 = 0.0;
 var $3716 = 0.0, $3717 = 0.0, $3718 = 0.0, $3719 = 0.0, $372 = 0.0, $3720 = 0.0, $3721 = 0.0, $3722 = 0.0, $3723 = 0.0, $3724 = 0.0, $3725 = 0.0, $3726 = 0.0, $3727 = 0.0, $3728 = 0.0, $3729 = 0.0, $373 = 0.0, $3730 = 0.0, $3731 = 0.0, $3732 = 0.0, $3733 = 0.0;
 var $3734 = 0.0, $3735 = 0.0, $3736 = 0.0, $3737 = 0.0, $3738 = 0.0, $3739 = 0.0, $374 = 0.0, $3740 = 0.0, $3741 = 0.0, $3742 = 0.0, $3743 = 0.0, $3744 = 0.0, $3745 = 0.0, $3746 = 0.0, $3747 = 0.0, $3748 = 0.0, $3749 = 0.0, $375 = 0.0, $3750 = 0.0, $3751 = 0.0;
 var $3752 = 0.0, $3753 = 0.0, $3754 = 0.0, $3755 = 0.0, $3756 = 0.0, $3757 = 0.0, $3758 = 0.0, $3759 = 0.0, $376 = 0.0, $3760 = 0.0, $3761 = 0.0, $3762 = 0.0, $3763 = 0.0, $3764 = 0.0, $3765 = 0.0, $3766 = 0.0, $3767 = 0.0, $3768 = 0.0, $3769 = 0.0, $377 = 0.0;
 var $3770 = 0.0, $3771 = 0.0, $3772 = 0.0, $3773 = 0.0, $3774 = 0.0, $3775 = 0.0, $3776 = 0.0, $3777 = 0.0, $3778 = 0.0, $3779 = 0.0, $378 = 0.0, $3780 = 0.0, $3781 = 0.0, $3782 = 0.0, $3783 = 0.0, $3784 = 0.0, $3785 = 0.0, $3786 = 0.0, $3787 = 0.0, $3788 = 0.0;
 var $3789 = 0.0, $379 = 0.0, $3790 = 0.0, $3791 = 0.0, $3792 = 0.0, $3793 = 0.0, $3794 = 0.0, $3795 = 0.0, $3796 = 0.0, $3797 = 0.0, $3798 = 0.0, $3799 = 0.0, $38 = 0.0, $380 = 0.0, $3800 = 0.0, $3801 = 0.0, $3802 = 0.0, $3803 = 0.0, $3804 = 0.0, $3805 = 0.0;
 var $3806 = 0.0, $3807 = 0.0, $3808 = 0.0, $3809 = 0.0, $381 = 0.0, $3810 = 0.0, $3811 = 0.0, $3812 = 0.0, $3813 = 0.0, $3814 = 0.0, $3815 = 0.0, $3816 = 0.0, $3817 = 0.0, $3818 = 0.0, $3819 = 0.0, $382 = 0.0, $3820 = 0.0, $3821 = 0.0, $3822 = 0.0, $3823 = 0.0;
 var $3824 = 0.0, $3825 = 0.0, $3826 = 0.0, $3827 = 0.0, $3828 = 0.0, $3829 = 0.0, $383 = 0.0, $3830 = 0.0, $3831 = 0.0, $3832 = 0.0, $3833 = 0.0, $3834 = 0.0, $3835 = 0.0, $3836 = 0.0, $3837 = 0.0, $3838 = 0.0, $3839 = 0.0, $384 = 0.0, $3840 = 0.0, $3841 = 0.0;
 var $3842 = 0.0, $3843 = 0.0, $3844 = 0.0, $3845 = 0.0, $3846 = 0.0, $3847 = 0.0, $3848 = 0.0, $3849 = 0.0, $385 = 0.0, $3850 = 0.0, $3851 = 0.0, $3852 = 0.0, $3853 = 0.0, $3854 = 0.0, $3855 = 0.0, $3856 = 0.0, $3857 = 0.0, $3858 = 0.0, $3859 = 0.0, $386 = 0.0;
 var $3860 = 0.0, $3861 = 0.0, $3862 = 0.0, $3863 = 0.0, $3864 = 0.0, $3865 = 0.0, $3866 = 0.0, $3867 = 0.0, $3868 = 0.0, $3869 = 0.0, $387 = 0.0, $3870 = 0.0, $3871 = 0.0, $3872 = 0.0, $3873 = 0.0, $3874 = 0.0, $3875 = 0.0, $3876 = 0.0, $3877 = 0.0, $3878 = 0.0;
 var $3879 = 0.0, $388 = 0.0, $3880 = 0.0, $3881 = 0.0, $3882 = 0.0, $3883 = 0.0, $3884 = 0.0, $3885 = 0.0, $3886 = 0.0, $3887 = 0.0, $3888 = 0.0, $3889 = 0.0, $389 = 0.0, $3890 = 0.0, $3891 = 0.0, $3892 = 0.0, $3893 = 0.0, $3894 = 0.0, $3895 = 0.0, $3896 = 0.0;
 var $3897 = 0.0, $3898 = 0.0, $3899 = 0.0, $39 = 0.0, $390 = 0.0, $3900 = 0.0, $3901 = 0.0, $3902 = 0.0, $3903 = 0.0, $3904 = 0.0, $3905 = 0.0, $3906 = 0.0, $3907 = 0.0, $3908 = 0.0, $3909 = 0.0, $391 = 0.0, $3910 = 0.0, $3911 = 0.0, $3912 = 0.0, $3913 = 0.0;
 var $3914 = 0.0, $3915 = 0.0, $3916 = 0.0, $3917 = 0.0, $3918 = 0.0, $3919 = 0.0, $392 = 0.0, $3920 = 0.0, $3921 = 0.0, $3922 = 0.0, $3923 = 0.0, $3924 = 0.0, $3925 = 0.0, $3926 = 0.0, $3927 = 0.0, $3928 = 0.0, $3929 = 0.0, $393 = 0.0, $3930 = 0.0, $3931 = 0.0;
 var $3932 = 0.0, $3933 = 0.0, $3934 = 0.0, $3935 = 0.0, $3936 = 0.0, $3937 = 0.0, $3938 = 0.0, $3939 = 0.0, $394 = 0.0, $3940 = 0.0, $3941 = 0.0, $3942 = 0.0, $3943 = 0.0, $3944 = 0.0, $3945 = 0.0, $3946 = 0.0, $3947 = 0.0, $3948 = 0.0, $3949 = 0.0, $395 = 0.0;
 var $3950 = 0.0, $3951 = 0.0, $3952 = 0.0, $3953 = 0.0, $3954 = 0.0, $3955 = 0.0, $3956 = 0.0, $3957 = 0.0, $3958 = 0.0, $3959 = 0.0, $396 = 0.0, $3960 = 0.0, $3961 = 0.0, $3962 = 0.0, $3963 = 0.0, $3964 = 0.0, $3965 = 0.0, $3966 = 0.0, $3967 = 0.0, $3968 = 0.0;
 var $3969 = 0.0, $397 = 0.0, $3970 = 0.0, $3971 = 0.0, $3972 = 0.0, $3973 = 0.0, $3974 = 0.0, $3975 = 0.0, $3976 = 0.0, $3977 = 0.0, $3978 = 0.0, $3979 = 0.0, $398 = 0.0, $3980 = 0.0, $3981 = 0.0, $3982 = 0.0, $3983 = 0.0, $3984 = 0.0, $3985 = 0.0, $3986 = 0.0;
 var $3987 = 0.0, $3988 = 0.0, $3989 = 0.0, $399 = 0.0, $3990 = 0.0, $3991 = 0.0, $3992 = 0.0, $3993 = 0.0, $3994 = 0.0, $3995 = 0.0, $3996 = 0.0, $3997 = 0.0, $3998 = 0.0, $3999 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $4000 = 0.0, $4001 = 0.0, $4002 = 0.0;
 var $4003 = 0.0, $4004 = 0.0, $4005 = 0.0, $4006 = 0.0, $4007 = 0.0, $4008 = 0.0, $4009 = 0.0, $401 = 0.0, $4010 = 0.0, $4011 = 0.0, $4012 = 0.0, $4013 = 0.0, $4014 = 0.0, $4015 = 0.0, $4016 = 0.0, $4017 = 0.0, $4018 = 0.0, $4019 = 0.0, $402 = 0.0, $4020 = 0.0;
 var $4021 = 0.0, $4022 = 0.0, $4023 = 0.0, $4024 = 0.0, $4025 = 0.0, $4026 = 0.0, $4027 = 0.0, $4028 = 0.0, $4029 = 0.0, $403 = 0.0, $4030 = 0.0, $4031 = 0.0, $4032 = 0.0, $4033 = 0.0, $4034 = 0.0, $4035 = 0.0, $4036 = 0.0, $4037 = 0.0, $4038 = 0.0, $4039 = 0.0;
 var $404 = 0.0, $4040 = 0.0, $4041 = 0.0, $4042 = 0.0, $4043 = 0.0, $4044 = 0.0, $4045 = 0.0, $4046 = 0.0, $4047 = 0.0, $4048 = 0.0, $4049 = 0.0, $405 = 0.0, $4050 = 0.0, $4051 = 0.0, $4052 = 0.0, $4053 = 0.0, $4054 = 0.0, $4055 = 0.0, $4056 = 0.0, $4057 = 0.0;
 var $4058 = 0.0, $4059 = 0.0, $406 = 0.0, $4060 = 0.0, $4061 = 0.0, $4062 = 0.0, $4063 = 0.0, $4064 = 0.0, $4065 = 0.0, $4066 = 0.0, $4067 = 0.0, $4068 = 0.0, $4069 = 0.0, $407 = 0.0, $4070 = 0.0, $4071 = 0.0, $4072 = 0.0, $4073 = 0.0, $4074 = 0.0, $4075 = 0.0;
 var $4076 = 0.0, $4077 = 0.0, $4078 = 0.0, $4079 = 0.0, $408 = 0.0, $4080 = 0.0, $4081 = 0.0, $4082 = 0.0, $4083 = 0.0, $4084 = 0.0, $4085 = 0.0, $4086 = 0.0, $4087 = 0.0, $4088 = 0.0, $4089 = 0.0, $409 = 0.0, $4090 = 0.0, $4091 = 0.0, $4092 = 0.0, $4093 = 0.0;
 var $4094 = 0.0, $4095 = 0.0, $4096 = 0.0, $4097 = 0.0, $4098 = 0.0, $4099 = 0.0, $41 = 0.0, $410 = 0.0, $4100 = 0.0, $4101 = 0.0, $4102 = 0.0, $4103 = 0.0, $4104 = 0.0, $4105 = 0.0, $4106 = 0.0, $4107 = 0.0, $4108 = 0.0, $4109 = 0.0, $411 = 0.0, $4110 = 0.0;
 var $4111 = 0.0, $4112 = 0.0, $4113 = 0.0, $4114 = 0.0, $4115 = 0.0, $4116 = 0.0, $4117 = 0.0, $4118 = 0.0, $4119 = 0.0, $412 = 0.0, $4120 = 0.0, $4121 = 0.0, $4122 = 0.0, $4123 = 0.0, $4124 = 0.0, $4125 = 0.0, $4126 = 0.0, $4127 = 0.0, $4128 = 0.0, $4129 = 0.0;
 var $413 = 0.0, $4130 = 0.0, $4131 = 0.0, $4132 = 0.0, $4133 = 0.0, $4134 = 0.0, $4135 = 0.0, $4136 = 0.0, $4137 = 0.0, $4138 = 0.0, $4139 = 0.0, $414 = 0.0, $4140 = 0.0, $4141 = 0.0, $4142 = 0.0, $4143 = 0.0, $4144 = 0.0, $4145 = 0.0, $4146 = 0.0, $4147 = 0.0;
 var $4148 = 0.0, $4149 = 0.0, $415 = 0.0, $4150 = 0.0, $4151 = 0.0, $4152 = 0.0, $4153 = 0.0, $4154 = 0.0, $4155 = 0.0, $4156 = 0.0, $4157 = 0.0, $4158 = 0.0, $4159 = 0.0, $416 = 0.0, $4160 = 0.0, $4161 = 0.0, $4162 = 0.0, $4163 = 0.0, $4164 = 0.0, $4165 = 0.0;
 var $4166 = 0.0, $4167 = 0.0, $4168 = 0.0, $4169 = 0.0, $417 = 0.0, $4170 = 0.0, $4171 = 0.0, $4172 = 0.0, $4173 = 0.0, $4174 = 0.0, $4175 = 0.0, $4176 = 0.0, $4177 = 0.0, $4178 = 0.0, $4179 = 0.0, $418 = 0.0, $4180 = 0.0, $4181 = 0.0, $4182 = 0.0, $4183 = 0.0;
 var $4184 = 0.0, $4185 = 0.0, $4186 = 0.0, $4187 = 0.0, $4188 = 0.0, $4189 = 0.0, $419 = 0.0, $4190 = 0.0, $4191 = 0.0, $4192 = 0.0, $4193 = 0.0, $4194 = 0.0, $4195 = 0.0, $4196 = 0.0, $4197 = 0.0, $4198 = 0.0, $4199 = 0.0, $42 = 0, $420 = 0.0, $4200 = 0.0;
 var $4201 = 0.0, $4202 = 0.0, $4203 = 0.0, $4204 = 0.0, $4205 = 0.0, $4206 = 0.0, $4207 = 0.0, $4208 = 0.0, $4209 = 0.0, $421 = 0.0, $4210 = 0.0, $4211 = 0.0, $4212 = 0.0, $4213 = 0.0, $4214 = 0.0, $4215 = 0.0, $4216 = 0.0, $4217 = 0.0, $4218 = 0.0, $4219 = 0.0;
 var $422 = 0.0, $4220 = 0.0, $4221 = 0.0, $4222 = 0.0, $4223 = 0.0, $4224 = 0.0, $4225 = 0.0, $4226 = 0.0, $4227 = 0.0, $4228 = 0.0, $4229 = 0.0, $423 = 0.0, $4230 = 0.0, $4231 = 0.0, $4232 = 0.0, $4233 = 0.0, $4234 = 0.0, $4235 = 0.0, $4236 = 0.0, $4237 = 0.0;
 var $4238 = 0.0, $4239 = 0.0, $424 = 0.0, $4240 = 0.0, $4241 = 0.0, $4242 = 0.0, $4243 = 0.0, $4244 = 0.0, $4245 = 0.0, $4246 = 0.0, $4247 = 0.0, $4248 = 0.0, $4249 = 0.0, $425 = 0.0, $4250 = 0.0, $4251 = 0.0, $4252 = 0.0, $4253 = 0.0, $4254 = 0.0, $4255 = 0.0;
 var $4256 = 0.0, $4257 = 0.0, $4258 = 0.0, $4259 = 0.0, $426 = 0.0, $4260 = 0.0, $4261 = 0.0, $4262 = 0.0, $4263 = 0.0, $4264 = 0.0, $4265 = 0.0, $4266 = 0.0, $4267 = 0.0, $4268 = 0.0, $4269 = 0.0, $427 = 0.0, $4270 = 0.0, $4271 = 0.0, $4272 = 0.0, $4273 = 0.0;
 var $4274 = 0.0, $4275 = 0.0, $4276 = 0.0, $4277 = 0.0, $4278 = 0.0, $4279 = 0.0, $428 = 0.0, $4280 = 0.0, $4281 = 0.0, $4282 = 0.0, $4283 = 0.0, $4284 = 0.0, $4285 = 0.0, $4286 = 0.0, $4287 = 0.0, $4288 = 0.0, $4289 = 0.0, $429 = 0.0, $4290 = 0.0, $4291 = 0.0;
 var $4292 = 0.0, $4293 = 0.0, $4294 = 0.0, $4295 = 0.0, $4296 = 0.0, $4297 = 0.0, $4298 = 0.0, $4299 = 0.0, $43 = 0.0, $430 = 0.0, $4300 = 0.0, $4301 = 0.0, $4302 = 0.0, $4303 = 0.0, $4304 = 0.0, $4305 = 0.0, $4306 = 0.0, $4307 = 0.0, $4308 = 0.0, $4309 = 0.0;
 var $431 = 0.0, $4310 = 0.0, $4311 = 0.0, $4312 = 0.0, $4313 = 0.0, $4314 = 0.0, $4315 = 0.0, $4316 = 0.0, $4317 = 0.0, $4318 = 0.0, $4319 = 0.0, $432 = 0.0, $4320 = 0.0, $4321 = 0.0, $4322 = 0.0, $4323 = 0.0, $4324 = 0.0, $4325 = 0.0, $4326 = 0.0, $4327 = 0.0;
 var $4328 = 0.0, $4329 = 0.0, $433 = 0.0, $4330 = 0.0, $4331 = 0.0, $4332 = 0.0, $4333 = 0.0, $4334 = 0.0, $4335 = 0.0, $4336 = 0.0, $4337 = 0.0, $4338 = 0.0, $4339 = 0.0, $434 = 0.0, $4340 = 0.0, $4341 = 0.0, $4342 = 0.0, $4343 = 0.0, $4344 = 0.0, $4345 = 0.0;
 var $4346 = 0.0, $4347 = 0.0, $4348 = 0.0, $4349 = 0.0, $435 = 0.0, $4350 = 0.0, $4351 = 0.0, $4352 = 0.0, $4353 = 0.0, $4354 = 0.0, $4355 = 0.0, $4356 = 0.0, $4357 = 0.0, $4358 = 0.0, $4359 = 0.0, $436 = 0.0, $4360 = 0.0, $4361 = 0.0, $4362 = 0.0, $4363 = 0.0;
 var $4364 = 0.0, $4365 = 0.0, $4366 = 0.0, $4367 = 0.0, $4368 = 0.0, $4369 = 0.0, $437 = 0.0, $4370 = 0.0, $4371 = 0.0, $4372 = 0.0, $4373 = 0.0, $4374 = 0.0, $4375 = 0.0, $4376 = 0.0, $4377 = 0.0, $4378 = 0.0, $4379 = 0.0, $438 = 0.0, $4380 = 0.0, $4381 = 0.0;
 var $4382 = 0.0, $4383 = 0.0, $4384 = 0.0, $4385 = 0.0, $4386 = 0.0, $4387 = 0.0, $4388 = 0.0, $4389 = 0.0, $439 = 0.0, $4390 = 0.0, $4391 = 0.0, $4392 = 0.0, $4393 = 0.0, $4394 = 0.0, $4395 = 0.0, $4396 = 0.0, $4397 = 0.0, $4398 = 0.0, $4399 = 0.0, $44 = 0.0;
 var $440 = 0.0, $4400 = 0.0, $4401 = 0.0, $4402 = 0.0, $4403 = 0.0, $4404 = 0.0, $4405 = 0.0, $4406 = 0.0, $4407 = 0.0, $4408 = 0.0, $4409 = 0.0, $441 = 0.0, $4410 = 0.0, $4411 = 0.0, $4412 = 0.0, $4413 = 0.0, $4414 = 0.0, $4415 = 0.0, $4416 = 0.0, $4417 = 0.0;
 var $4418 = 0.0, $4419 = 0.0, $442 = 0.0, $4420 = 0.0, $4421 = 0.0, $4422 = 0.0, $4423 = 0.0, $4424 = 0.0, $4425 = 0.0, $4426 = 0.0, $4427 = 0.0, $4428 = 0.0, $4429 = 0.0, $443 = 0.0, $4430 = 0.0, $4431 = 0.0, $4432 = 0.0, $4433 = 0.0, $4434 = 0.0, $4435 = 0.0;
 var $4436 = 0.0, $4437 = 0.0, $4438 = 0.0, $4439 = 0.0, $444 = 0.0, $4440 = 0.0, $4441 = 0.0, $4442 = 0.0, $4443 = 0.0, $4444 = 0.0, $4445 = 0.0, $4446 = 0.0, $4447 = 0.0, $4448 = 0.0, $4449 = 0.0, $445 = 0.0, $4450 = 0.0, $4451 = 0.0, $4452 = 0.0, $4453 = 0.0;
 var $4454 = 0.0, $4455 = 0.0, $4456 = 0.0, $4457 = 0.0, $4458 = 0.0, $4459 = 0.0, $446 = 0.0, $4460 = 0.0, $4461 = 0.0, $4462 = 0.0, $4463 = 0.0, $4464 = 0.0, $4465 = 0.0, $4466 = 0.0, $4467 = 0.0, $4468 = 0.0, $4469 = 0.0, $447 = 0.0, $4470 = 0.0, $4471 = 0.0;
 var $4472 = 0.0, $4473 = 0.0, $4474 = 0.0, $4475 = 0.0, $4476 = 0.0, $4477 = 0.0, $4478 = 0.0, $4479 = 0.0, $448 = 0.0, $4480 = 0.0, $4481 = 0.0, $4482 = 0.0, $4483 = 0.0, $4484 = 0.0, $4485 = 0.0, $4486 = 0.0, $4487 = 0.0, $4488 = 0.0, $4489 = 0.0, $449 = 0.0;
 var $4490 = 0.0, $4491 = 0.0, $4492 = 0.0, $4493 = 0.0, $4494 = 0.0, $4495 = 0.0, $4496 = 0.0, $4497 = 0.0, $4498 = 0.0, $4499 = 0.0, $45 = 0.0, $450 = 0.0, $4500 = 0.0, $4501 = 0.0, $4502 = 0.0, $4503 = 0.0, $4504 = 0.0, $4505 = 0.0, $4506 = 0.0, $4507 = 0.0;
 var $4508 = 0.0, $4509 = 0.0, $451 = 0.0, $4510 = 0.0, $4511 = 0.0, $4512 = 0.0, $4513 = 0.0, $4514 = 0.0, $4515 = 0.0, $4516 = 0.0, $4517 = 0.0, $4518 = 0.0, $4519 = 0.0, $452 = 0.0, $4520 = 0.0, $4521 = 0.0, $4522 = 0.0, $4523 = 0.0, $4524 = 0.0, $4525 = 0.0;
 var $4526 = 0.0, $4527 = 0.0, $4528 = 0.0, $4529 = 0.0, $453 = 0.0, $4530 = 0.0, $4531 = 0.0, $4532 = 0.0, $4533 = 0.0, $4534 = 0.0, $4535 = 0.0, $4536 = 0.0, $4537 = 0.0, $4538 = 0.0, $4539 = 0.0, $454 = 0.0, $4540 = 0.0, $4541 = 0.0, $4542 = 0.0, $4543 = 0.0;
 var $4544 = 0.0, $4545 = 0.0, $4546 = 0.0, $4547 = 0.0, $4548 = 0.0, $4549 = 0.0, $455 = 0.0, $4550 = 0.0, $4551 = 0.0, $4552 = 0.0, $4553 = 0.0, $4554 = 0.0, $4555 = 0.0, $4556 = 0.0, $4557 = 0.0, $4558 = 0.0, $4559 = 0.0, $456 = 0.0, $4560 = 0.0, $4561 = 0.0;
 var $4562 = 0.0, $4563 = 0.0, $4564 = 0.0, $4565 = 0.0, $4566 = 0.0, $4567 = 0.0, $4568 = 0.0, $4569 = 0.0, $457 = 0.0, $4570 = 0.0, $4571 = 0.0, $4572 = 0.0, $4573 = 0.0, $4574 = 0.0, $4575 = 0.0, $4576 = 0.0, $4577 = 0.0, $4578 = 0.0, $4579 = 0.0, $458 = 0.0;
 var $4580 = 0.0, $4581 = 0.0, $4582 = 0.0, $4583 = 0.0, $4584 = 0.0, $4585 = 0.0, $4586 = 0.0, $4587 = 0.0, $4588 = 0.0, $4589 = 0.0, $459 = 0.0, $4590 = 0.0, $4591 = 0.0, $4592 = 0.0, $4593 = 0.0, $4594 = 0.0, $4595 = 0.0, $4596 = 0.0, $4597 = 0.0, $4598 = 0.0;
 var $4599 = 0.0, $46 = 0.0, $460 = 0.0, $4600 = 0.0, $4601 = 0.0, $4602 = 0.0, $4603 = 0.0, $4604 = 0.0, $4605 = 0.0, $4606 = 0.0, $4607 = 0.0, $4608 = 0.0, $4609 = 0.0, $461 = 0.0, $4610 = 0.0, $4611 = 0.0, $4612 = 0.0, $4613 = 0.0, $4614 = 0.0, $4615 = 0.0;
 var $4616 = 0.0, $4617 = 0.0, $4618 = 0.0, $4619 = 0.0, $462 = 0.0, $4620 = 0.0, $4621 = 0.0, $4622 = 0.0, $4623 = 0.0, $4624 = 0.0, $4625 = 0.0, $4626 = 0.0, $4627 = 0.0, $4628 = 0.0, $4629 = 0.0, $463 = 0.0, $4630 = 0.0, $4631 = 0.0, $4632 = 0.0, $4633 = 0.0;
 var $4634 = 0.0, $4635 = 0.0, $4636 = 0.0, $4637 = 0.0, $4638 = 0.0, $4639 = 0.0, $464 = 0.0, $4640 = 0.0, $4641 = 0.0, $4642 = 0.0, $4643 = 0.0, $4644 = 0.0, $4645 = 0.0, $4646 = 0.0, $4647 = 0.0, $4648 = 0.0, $4649 = 0.0, $465 = 0.0, $4650 = 0.0, $4651 = 0.0;
 var $4652 = 0.0, $4653 = 0.0, $4654 = 0.0, $4655 = 0.0, $4656 = 0.0, $4657 = 0.0, $4658 = 0.0, $4659 = 0.0, $466 = 0.0, $4660 = 0.0, $4661 = 0.0, $4662 = 0.0, $4663 = 0.0, $4664 = 0.0, $4665 = 0.0, $4666 = 0.0, $4667 = 0.0, $4668 = 0.0, $4669 = 0.0, $467 = 0.0;
 var $4670 = 0.0, $4671 = 0.0, $4672 = 0.0, $4673 = 0.0, $4674 = 0.0, $4675 = 0.0, $4676 = 0.0, $4677 = 0.0, $4678 = 0.0, $4679 = 0.0, $468 = 0.0, $4680 = 0.0, $4681 = 0.0, $4682 = 0.0, $4683 = 0.0, $4684 = 0.0, $4685 = 0.0, $4686 = 0.0, $4687 = 0.0, $4688 = 0.0;
 var $4689 = 0.0, $469 = 0.0, $4690 = 0.0, $4691 = 0.0, $4692 = 0.0, $4693 = 0.0, $4694 = 0.0, $4695 = 0.0, $4696 = 0.0, $4697 = 0.0, $4698 = 0.0, $4699 = 0.0, $47 = 0.0, $470 = 0.0, $4700 = 0.0, $4701 = 0.0, $4702 = 0.0, $4703 = 0.0, $4704 = 0.0, $4705 = 0.0;
 var $4706 = 0.0, $4707 = 0.0, $4708 = 0.0, $4709 = 0.0, $471 = 0.0, $4710 = 0.0, $4711 = 0.0, $4712 = 0.0, $4713 = 0.0, $4714 = 0.0, $4715 = 0.0, $4716 = 0.0, $4717 = 0.0, $4718 = 0.0, $4719 = 0.0, $472 = 0.0, $4720 = 0.0, $4721 = 0.0, $4722 = 0.0, $4723 = 0.0;
 var $4724 = 0.0, $4725 = 0.0, $4726 = 0.0, $4727 = 0.0, $4728 = 0.0, $4729 = 0.0, $473 = 0.0, $4730 = 0.0, $4731 = 0.0, $4732 = 0.0, $4733 = 0.0, $4734 = 0.0, $4735 = 0.0, $4736 = 0.0, $4737 = 0.0, $4738 = 0.0, $4739 = 0.0, $474 = 0.0, $4740 = 0.0, $4741 = 0.0;
 var $4742 = 0.0, $4743 = 0.0, $4744 = 0.0, $4745 = 0.0, $4746 = 0.0, $4747 = 0.0, $4748 = 0.0, $4749 = 0.0, $475 = 0.0, $4750 = 0.0, $4751 = 0.0, $4752 = 0.0, $4753 = 0.0, $4754 = 0.0, $4755 = 0.0, $4756 = 0.0, $4757 = 0.0, $4758 = 0.0, $4759 = 0.0, $476 = 0.0;
 var $4760 = 0.0, $4761 = 0.0, $4762 = 0.0, $4763 = 0.0, $4764 = 0.0, $4765 = 0.0, $4766 = 0.0, $4767 = 0.0, $4768 = 0.0, $4769 = 0.0, $477 = 0.0, $4770 = 0.0, $4771 = 0.0, $4772 = 0.0, $4773 = 0.0, $4774 = 0.0, $4775 = 0.0, $4776 = 0.0, $4777 = 0.0, $4778 = 0.0;
 var $4779 = 0.0, $478 = 0.0, $4780 = 0.0, $4781 = 0.0, $4782 = 0.0, $4783 = 0.0, $4784 = 0.0, $4785 = 0.0, $4786 = 0.0, $4787 = 0.0, $4788 = 0.0, $4789 = 0.0, $479 = 0.0, $4790 = 0.0, $4791 = 0.0, $4792 = 0.0, $4793 = 0.0, $4794 = 0.0, $4795 = 0.0, $4796 = 0.0;
 var $4797 = 0.0, $4798 = 0.0, $4799 = 0.0, $48 = 0.0, $480 = 0.0, $4800 = 0.0, $4801 = 0.0, $4802 = 0.0, $4803 = 0.0, $4804 = 0.0, $4805 = 0.0, $4806 = 0.0, $4807 = 0.0, $4808 = 0.0, $4809 = 0.0, $481 = 0.0, $4810 = 0.0, $4811 = 0.0, $4812 = 0.0, $4813 = 0.0;
 var $4814 = 0.0, $4815 = 0.0, $4816 = 0.0, $4817 = 0.0, $4818 = 0.0, $4819 = 0.0, $482 = 0.0, $4820 = 0.0, $4821 = 0.0, $4822 = 0.0, $4823 = 0.0, $4824 = 0.0, $4825 = 0.0, $4826 = 0.0, $4827 = 0.0, $4828 = 0.0, $4829 = 0.0, $483 = 0.0, $4830 = 0.0, $4831 = 0.0;
 var $4832 = 0.0, $4833 = 0.0, $4834 = 0.0, $4835 = 0.0, $4836 = 0.0, $4837 = 0.0, $4838 = 0.0, $4839 = 0.0, $484 = 0.0, $4840 = 0.0, $4841 = 0.0, $4842 = 0.0, $4843 = 0.0, $4844 = 0.0, $4845 = 0.0, $4846 = 0.0, $4847 = 0.0, $4848 = 0.0, $4849 = 0.0, $485 = 0.0;
 var $4850 = 0.0, $4851 = 0.0, $4852 = 0.0, $4853 = 0.0, $4854 = 0.0, $4855 = 0.0, $4856 = 0.0, $4857 = 0.0, $4858 = 0.0, $4859 = 0.0, $486 = 0.0, $4860 = 0.0, $4861 = 0.0, $4862 = 0.0, $4863 = 0.0, $4864 = 0.0, $4865 = 0.0, $4866 = 0.0, $4867 = 0.0, $4868 = 0.0;
 var $4869 = 0.0, $487 = 0.0, $4870 = 0.0, $4871 = 0.0, $4872 = 0.0, $4873 = 0.0, $4874 = 0.0, $4875 = 0.0, $4876 = 0.0, $4877 = 0.0, $4878 = 0.0, $4879 = 0.0, $488 = 0.0, $4880 = 0.0, $4881 = 0.0, $4882 = 0.0, $4883 = 0.0, $4884 = 0.0, $4885 = 0.0, $4886 = 0.0;
 var $4887 = 0.0, $4888 = 0.0, $4889 = 0.0, $489 = 0.0, $4890 = 0.0, $4891 = 0.0, $4892 = 0.0, $4893 = 0.0, $4894 = 0.0, $4895 = 0.0, $4896 = 0.0, $4897 = 0.0, $4898 = 0.0, $4899 = 0.0, $49 = 0.0, $490 = 0.0, $4900 = 0.0, $4901 = 0.0, $4902 = 0.0, $4903 = 0.0;
 var $4904 = 0.0, $4905 = 0.0, $4906 = 0.0, $4907 = 0.0, $4908 = 0.0, $4909 = 0.0, $491 = 0.0, $4910 = 0.0, $4911 = 0.0, $4912 = 0.0, $4913 = 0.0, $4914 = 0.0, $4915 = 0.0, $4916 = 0.0, $4917 = 0.0, $4918 = 0.0, $4919 = 0.0, $492 = 0.0, $4920 = 0.0, $4921 = 0.0;
 var $4922 = 0.0, $4923 = 0.0, $4924 = 0.0, $4925 = 0.0, $4926 = 0.0, $4927 = 0.0, $4928 = 0.0, $4929 = 0.0, $493 = 0.0, $4930 = 0.0, $4931 = 0.0, $4932 = 0.0, $4933 = 0.0, $4934 = 0.0, $4935 = 0.0, $4936 = 0.0, $4937 = 0.0, $4938 = 0.0, $4939 = 0.0, $494 = 0.0;
 var $4940 = 0.0, $4941 = 0.0, $4942 = 0.0, $4943 = 0.0, $4944 = 0.0, $4945 = 0.0, $4946 = 0.0, $4947 = 0.0, $4948 = 0.0, $4949 = 0.0, $495 = 0.0, $4950 = 0.0, $4951 = 0.0, $4952 = 0.0, $4953 = 0.0, $4954 = 0.0, $4955 = 0.0, $4956 = 0.0, $4957 = 0.0, $4958 = 0.0;
 var $4959 = 0.0, $496 = 0.0, $4960 = 0.0, $4961 = 0.0, $4962 = 0.0, $4963 = 0.0, $4964 = 0.0, $4965 = 0.0, $4966 = 0.0, $4967 = 0.0, $4968 = 0.0, $4969 = 0.0, $497 = 0.0, $4970 = 0.0, $4971 = 0.0, $4972 = 0.0, $4973 = 0.0, $4974 = 0.0, $4975 = 0.0, $4976 = 0.0;
 var $4977 = 0.0, $4978 = 0.0, $4979 = 0.0, $498 = 0.0, $4980 = 0.0, $4981 = 0.0, $4982 = 0.0, $4983 = 0.0, $4984 = 0.0, $4985 = 0.0, $4986 = 0.0, $4987 = 0.0, $4988 = 0.0, $4989 = 0.0, $499 = 0.0, $4990 = 0.0, $4991 = 0.0, $4992 = 0.0, $4993 = 0.0, $4994 = 0.0;
 var $4995 = 0.0, $4996 = 0.0, $4997 = 0.0, $4998 = 0.0, $4999 = 0.0, $5 = 0.0, $50 = 0.0, $500 = 0.0, $5000 = 0.0, $5001 = 0.0, $5002 = 0.0, $5003 = 0.0, $5004 = 0.0, $5005 = 0.0, $5006 = 0.0, $5007 = 0.0, $5008 = 0.0, $5009 = 0.0, $501 = 0.0, $5010 = 0.0;
 var $5011 = 0.0, $5012 = 0.0, $5013 = 0.0, $5014 = 0.0, $5015 = 0.0, $5016 = 0.0, $5017 = 0.0, $5018 = 0.0, $5019 = 0.0, $502 = 0.0, $5020 = 0.0, $5021 = 0.0, $5022 = 0.0, $5023 = 0.0, $5024 = 0.0, $5025 = 0.0, $5026 = 0.0, $5027 = 0.0, $5028 = 0.0, $5029 = 0.0;
 var $503 = 0.0, $5030 = 0.0, $5031 = 0.0, $5032 = 0.0, $5033 = 0.0, $5034 = 0.0, $5035 = 0.0, $5036 = 0.0, $5037 = 0.0, $5038 = 0.0, $5039 = 0.0, $504 = 0.0, $5040 = 0.0, $5041 = 0.0, $5042 = 0.0, $5043 = 0.0, $5044 = 0.0, $5045 = 0.0, $5046 = 0.0, $5047 = 0.0;
 var $5048 = 0.0, $5049 = 0.0, $505 = 0.0, $5050 = 0.0, $5051 = 0.0, $5052 = 0.0, $5053 = 0.0, $5054 = 0.0, $5055 = 0.0, $5056 = 0.0, $5057 = 0.0, $5058 = 0.0, $5059 = 0.0, $506 = 0.0, $5060 = 0.0, $5061 = 0.0, $5062 = 0.0, $5063 = 0.0, $5064 = 0.0, $5065 = 0.0;
 var $5066 = 0.0, $5067 = 0.0, $5068 = 0.0, $5069 = 0.0, $507 = 0.0, $5070 = 0.0, $5071 = 0.0, $5072 = 0.0, $5073 = 0.0, $5074 = 0.0, $5075 = 0.0, $5076 = 0.0, $5077 = 0.0, $5078 = 0.0, $5079 = 0.0, $508 = 0.0, $5080 = 0.0, $5081 = 0.0, $5082 = 0.0, $5083 = 0.0;
 var $5084 = 0.0, $5085 = 0.0, $5086 = 0.0, $5087 = 0.0, $5088 = 0.0, $5089 = 0.0, $509 = 0.0, $5090 = 0.0, $5091 = 0.0, $5092 = 0.0, $5093 = 0.0, $5094 = 0.0, $5095 = 0.0, $5096 = 0.0, $5097 = 0.0, $5098 = 0.0, $5099 = 0.0, $51 = 0.0, $510 = 0.0, $5100 = 0.0;
 var $5101 = 0.0, $5102 = 0.0, $5103 = 0.0, $5104 = 0.0, $5105 = 0.0, $5106 = 0.0, $5107 = 0.0, $5108 = 0.0, $5109 = 0.0, $511 = 0.0, $5110 = 0.0, $5111 = 0.0, $5112 = 0.0, $5113 = 0.0, $5114 = 0.0, $5115 = 0.0, $5116 = 0.0, $5117 = 0.0, $5118 = 0.0, $5119 = 0.0;
 var $512 = 0.0, $5120 = 0.0, $5121 = 0.0, $5122 = 0.0, $5123 = 0.0, $5124 = 0.0, $5125 = 0.0, $5126 = 0.0, $5127 = 0.0, $5128 = 0.0, $5129 = 0.0, $513 = 0.0, $5130 = 0.0, $5131 = 0.0, $5132 = 0.0, $5133 = 0.0, $5134 = 0.0, $5135 = 0.0, $5136 = 0.0, $5137 = 0.0;
 var $5138 = 0.0, $5139 = 0.0, $514 = 0.0, $5140 = 0.0, $5141 = 0.0, $5142 = 0.0, $5143 = 0.0, $5144 = 0.0, $5145 = 0.0, $5146 = 0.0, $5147 = 0.0, $5148 = 0.0, $5149 = 0.0, $515 = 0.0, $5150 = 0.0, $5151 = 0.0, $5152 = 0.0, $5153 = 0.0, $5154 = 0.0, $5155 = 0.0;
 var $5156 = 0.0, $5157 = 0.0, $5158 = 0.0, $5159 = 0.0, $516 = 0.0, $5160 = 0.0, $5161 = 0.0, $5162 = 0.0, $5163 = 0.0, $5164 = 0.0, $5165 = 0.0, $5166 = 0.0, $5167 = 0.0, $5168 = 0.0, $5169 = 0.0, $517 = 0.0, $5170 = 0.0, $5171 = 0.0, $5172 = 0.0, $5173 = 0.0;
 var $5174 = 0.0, $5175 = 0.0, $5176 = 0.0, $5177 = 0.0, $5178 = 0.0, $5179 = 0.0, $518 = 0.0, $5180 = 0.0, $5181 = 0.0, $5182 = 0.0, $5183 = 0.0, $5184 = 0.0, $5185 = 0.0, $5186 = 0.0, $5187 = 0.0, $5188 = 0.0, $5189 = 0.0, $519 = 0.0, $5190 = 0.0, $5191 = 0.0;
 var $5192 = 0.0, $5193 = 0.0, $5194 = 0.0, $5195 = 0.0, $5196 = 0.0, $5197 = 0.0, $5198 = 0.0, $5199 = 0.0, $52 = 0.0, $520 = 0.0, $5200 = 0.0, $5201 = 0.0, $5202 = 0.0, $5203 = 0.0, $5204 = 0.0, $5205 = 0.0, $5206 = 0.0, $5207 = 0.0, $5208 = 0.0, $5209 = 0.0;
 var $521 = 0.0, $5210 = 0.0, $5211 = 0.0, $5212 = 0.0, $5213 = 0.0, $5214 = 0.0, $5215 = 0.0, $5216 = 0.0, $5217 = 0.0, $5218 = 0.0, $5219 = 0.0, $522 = 0.0, $5220 = 0.0, $5221 = 0.0, $5222 = 0.0, $5223 = 0.0, $5224 = 0.0, $5225 = 0.0, $5226 = 0.0, $5227 = 0.0;
 var $5228 = 0.0, $5229 = 0.0, $523 = 0.0, $5230 = 0.0, $5231 = 0.0, $5232 = 0.0, $5233 = 0.0, $5234 = 0.0, $5235 = 0.0, $5236 = 0.0, $5237 = 0.0, $5238 = 0.0, $5239 = 0.0, $524 = 0.0, $5240 = 0.0, $5241 = 0.0, $5242 = 0.0, $5243 = 0.0, $5244 = 0.0, $5245 = 0.0;
 var $5246 = 0.0, $5247 = 0.0, $5248 = 0.0, $5249 = 0.0, $525 = 0.0, $5250 = 0.0, $5251 = 0.0, $5252 = 0.0, $5253 = 0.0, $5254 = 0.0, $5255 = 0.0, $5256 = 0.0, $5257 = 0.0, $5258 = 0.0, $5259 = 0.0, $526 = 0.0, $5260 = 0.0, $5261 = 0.0, $5262 = 0.0, $5263 = 0.0;
 var $5264 = 0.0, $5265 = 0.0, $5266 = 0.0, $5267 = 0.0, $5268 = 0.0, $5269 = 0.0, $527 = 0.0, $5270 = 0.0, $5271 = 0.0, $5272 = 0.0, $5273 = 0.0, $5274 = 0.0, $5275 = 0.0, $5276 = 0.0, $5277 = 0.0, $5278 = 0.0, $5279 = 0.0, $528 = 0.0, $5280 = 0.0, $5281 = 0.0;
 var $5282 = 0.0, $5283 = 0.0, $5284 = 0.0, $5285 = 0.0, $5286 = 0.0, $5287 = 0.0, $5288 = 0.0, $5289 = 0.0, $529 = 0.0, $5290 = 0.0, $5291 = 0.0, $5292 = 0.0, $5293 = 0.0, $5294 = 0.0, $5295 = 0.0, $5296 = 0.0, $5297 = 0.0, $5298 = 0.0, $5299 = 0.0, $53 = 0.0;
 var $530 = 0.0, $5300 = 0.0, $5301 = 0.0, $5302 = 0.0, $5303 = 0.0, $5304 = 0.0, $5305 = 0.0, $5306 = 0.0, $5307 = 0.0, $5308 = 0.0, $5309 = 0.0, $531 = 0.0, $5310 = 0.0, $5311 = 0.0, $5312 = 0.0, $5313 = 0.0, $5314 = 0.0, $5315 = 0.0, $5316 = 0.0, $5317 = 0.0;
 var $5318 = 0.0, $5319 = 0.0, $532 = 0.0, $5320 = 0.0, $5321 = 0.0, $5322 = 0.0, $5323 = 0.0, $5324 = 0.0, $5325 = 0.0, $5326 = 0.0, $5327 = 0.0, $5328 = 0.0, $5329 = 0.0, $533 = 0.0, $5330 = 0.0, $5331 = 0.0, $5332 = 0.0, $5333 = 0.0, $5334 = 0.0, $5335 = 0.0;
 var $5336 = 0.0, $5337 = 0.0, $5338 = 0.0, $5339 = 0.0, $534 = 0.0, $5340 = 0.0, $5341 = 0.0, $5342 = 0.0, $5343 = 0.0, $5344 = 0.0, $5345 = 0.0, $5346 = 0.0, $5347 = 0.0, $5348 = 0.0, $5349 = 0.0, $535 = 0, $5350 = 0.0, $5351 = 0.0, $5352 = 0.0, $5353 = 0.0;
 var $5354 = 0.0, $5355 = 0.0, $5356 = 0.0, $5357 = 0.0, $5358 = 0.0, $5359 = 0.0, $536 = 0, $5360 = 0.0, $5361 = 0.0, $5362 = 0.0, $5363 = 0.0, $5364 = 0.0, $5365 = 0.0, $5366 = 0.0, $5367 = 0.0, $5368 = 0.0, $5369 = 0.0, $537 = 0.0, $5370 = 0.0, $5371 = 0.0;
 var $5372 = 0.0, $5373 = 0.0, $5374 = 0.0, $5375 = 0.0, $5376 = 0.0, $5377 = 0.0, $5378 = 0.0, $5379 = 0.0, $538 = 0.0, $5380 = 0.0, $5381 = 0.0, $5382 = 0.0, $5383 = 0.0, $5384 = 0.0, $5385 = 0.0, $5386 = 0.0, $5387 = 0.0, $5388 = 0.0, $5389 = 0.0, $539 = 0;
 var $5390 = 0.0, $5391 = 0.0, $5392 = 0.0, $5393 = 0.0, $5394 = 0.0, $5395 = 0.0, $5396 = 0.0, $5397 = 0.0, $5398 = 0.0, $5399 = 0.0, $54 = 0.0, $540 = 0.0, $5400 = 0.0, $5401 = 0.0, $5402 = 0.0, $5403 = 0.0, $5404 = 0.0, $5405 = 0.0, $5406 = 0.0, $5407 = 0.0;
 var $5408 = 0.0, $5409 = 0.0, $541 = 0, $5410 = 0.0, $5411 = 0.0, $5412 = 0.0, $5413 = 0.0, $5414 = 0.0, $5415 = 0.0, $5416 = 0.0, $5417 = 0.0, $5418 = 0.0, $5419 = 0.0, $542 = 0.0, $5420 = 0.0, $5421 = 0.0, $5422 = 0.0, $5423 = 0.0, $5424 = 0.0, $5425 = 0.0;
 var $5426 = 0.0, $5427 = 0.0, $5428 = 0.0, $5429 = 0.0, $543 = 0, $5430 = 0.0, $5431 = 0.0, $5432 = 0.0, $5433 = 0.0, $5434 = 0.0, $5435 = 0.0, $5436 = 0.0, $5437 = 0.0, $5438 = 0.0, $5439 = 0.0, $544 = 0.0, $5440 = 0.0, $5441 = 0.0, $5442 = 0.0, $5443 = 0.0;
 var $5444 = 0.0, $5445 = 0.0, $5446 = 0.0, $5447 = 0.0, $5448 = 0.0, $5449 = 0.0, $545 = 0, $5450 = 0.0, $5451 = 0.0, $5452 = 0.0, $5453 = 0.0, $5454 = 0.0, $5455 = 0.0, $5456 = 0.0, $5457 = 0.0, $5458 = 0.0, $5459 = 0.0, $546 = 0.0, $5460 = 0.0, $5461 = 0.0;
 var $5462 = 0.0, $5463 = 0.0, $5464 = 0.0, $5465 = 0.0, $5466 = 0.0, $5467 = 0.0, $5468 = 0.0, $5469 = 0.0, $547 = 0, $5470 = 0.0, $5471 = 0.0, $5472 = 0.0, $5473 = 0.0, $5474 = 0.0, $5475 = 0.0, $5476 = 0.0, $5477 = 0.0, $5478 = 0.0, $5479 = 0.0, $548 = 0.0;
 var $5480 = 0.0, $5481 = 0.0, $5482 = 0.0, $5483 = 0.0, $5484 = 0.0, $5485 = 0.0, $5486 = 0.0, $5487 = 0.0, $5488 = 0.0, $5489 = 0.0, $549 = 0, $5490 = 0.0, $5491 = 0.0, $5492 = 0.0, $5493 = 0.0, $5494 = 0.0, $5495 = 0.0, $5496 = 0.0, $5497 = 0.0, $5498 = 0.0;
 var $5499 = 0.0, $55 = 0.0, $550 = 0.0, $5500 = 0.0, $5501 = 0.0, $5502 = 0.0, $5503 = 0.0, $5504 = 0.0, $5505 = 0.0, $5506 = 0.0, $5507 = 0.0, $5508 = 0.0, $5509 = 0.0, $551 = 0, $5510 = 0.0, $5511 = 0.0, $5512 = 0.0, $5513 = 0.0, $5514 = 0.0, $5515 = 0.0;
 var $5516 = 0.0, $5517 = 0.0, $5518 = 0.0, $5519 = 0.0, $552 = 0.0, $5520 = 0.0, $5521 = 0.0, $5522 = 0.0, $5523 = 0.0, $5524 = 0.0, $5525 = 0.0, $5526 = 0.0, $5527 = 0.0, $5528 = 0.0, $5529 = 0.0, $553 = 0, $5530 = 0.0, $5531 = 0.0, $5532 = 0.0, $5533 = 0.0;
 var $5534 = 0.0, $5535 = 0.0, $5536 = 0.0, $5537 = 0.0, $5538 = 0.0, $5539 = 0.0, $554 = 0.0, $5540 = 0.0, $5541 = 0.0, $5542 = 0.0, $5543 = 0.0, $5544 = 0.0, $5545 = 0.0, $5546 = 0.0, $5547 = 0.0, $5548 = 0.0, $5549 = 0.0, $555 = 0, $5550 = 0.0, $5551 = 0.0;
 var $5552 = 0.0, $5553 = 0.0, $5554 = 0.0, $5555 = 0.0, $5556 = 0.0, $5557 = 0.0, $5558 = 0.0, $5559 = 0.0, $556 = 0.0, $5560 = 0.0, $5561 = 0.0, $5562 = 0.0, $5563 = 0.0, $5564 = 0.0, $5565 = 0.0, $5566 = 0.0, $5567 = 0.0, $5568 = 0.0, $5569 = 0.0, $557 = 0;
 var $5570 = 0.0, $5571 = 0.0, $5572 = 0.0, $5573 = 0.0, $5574 = 0.0, $5575 = 0.0, $5576 = 0.0, $5577 = 0.0, $5578 = 0.0, $5579 = 0.0, $558 = 0.0, $5580 = 0.0, $5581 = 0.0, $5582 = 0.0, $5583 = 0.0, $5584 = 0.0, $5585 = 0.0, $5586 = 0.0, $5587 = 0.0, $5588 = 0.0;
 var $5589 = 0.0, $559 = 0, $5590 = 0.0, $5591 = 0.0, $5592 = 0.0, $5593 = 0.0, $5594 = 0.0, $5595 = 0.0, $5596 = 0.0, $5597 = 0.0, $5598 = 0.0, $5599 = 0.0, $56 = 0.0, $560 = 0.0, $5600 = 0.0, $5601 = 0.0, $5602 = 0.0, $5603 = 0.0, $5604 = 0.0, $5605 = 0.0;
 var $5606 = 0.0, $5607 = 0.0, $5608 = 0.0, $5609 = 0.0, $561 = 0, $5610 = 0.0, $5611 = 0.0, $5612 = 0.0, $5613 = 0.0, $5614 = 0.0, $5615 = 0.0, $5616 = 0.0, $5617 = 0.0, $5618 = 0.0, $5619 = 0.0, $562 = 0.0, $5620 = 0.0, $5621 = 0.0, $5622 = 0.0, $5623 = 0.0;
 var $5624 = 0.0, $5625 = 0.0, $5626 = 0.0, $5627 = 0.0, $5628 = 0.0, $5629 = 0.0, $563 = 0, $5630 = 0.0, $5631 = 0.0, $5632 = 0.0, $5633 = 0.0, $5634 = 0.0, $5635 = 0.0, $5636 = 0.0, $5637 = 0.0, $5638 = 0.0, $5639 = 0.0, $564 = 0.0, $5640 = 0.0, $5641 = 0.0;
 var $5642 = 0.0, $5643 = 0.0, $5644 = 0.0, $5645 = 0.0, $5646 = 0.0, $5647 = 0.0, $5648 = 0.0, $5649 = 0.0, $565 = 0, $5650 = 0.0, $5651 = 0.0, $5652 = 0.0, $5653 = 0.0, $5654 = 0.0, $5655 = 0.0, $5656 = 0.0, $5657 = 0.0, $5658 = 0.0, $5659 = 0.0, $566 = 0.0;
 var $5660 = 0.0, $5661 = 0.0, $5662 = 0.0, $5663 = 0.0, $5664 = 0.0, $5665 = 0.0, $5666 = 0.0, $5667 = 0.0, $5668 = 0.0, $5669 = 0.0, $567 = 0, $5670 = 0.0, $5671 = 0.0, $5672 = 0.0, $5673 = 0.0, $5674 = 0.0, $5675 = 0.0, $5676 = 0.0, $5677 = 0.0, $5678 = 0.0;
 var $5679 = 0.0, $568 = 0, $5680 = 0.0, $5681 = 0.0, $5682 = 0.0, $5683 = 0.0, $5684 = 0.0, $5685 = 0.0, $5686 = 0.0, $5687 = 0.0, $5688 = 0.0, $5689 = 0.0, $569 = 0, $5690 = 0.0, $5691 = 0.0, $5692 = 0.0, $5693 = 0.0, $5694 = 0.0, $5695 = 0.0, $5696 = 0.0;
 var $5697 = 0.0, $5698 = 0.0, $5699 = 0.0, $57 = 0.0, $570 = 0, $5700 = 0.0, $5701 = 0.0, $5702 = 0.0, $5703 = 0.0, $5704 = 0.0, $5705 = 0.0, $5706 = 0.0, $5707 = 0.0, $5708 = 0.0, $5709 = 0.0, $571 = 0, $5710 = 0.0, $5711 = 0.0, $5712 = 0.0, $5713 = 0.0;
 var $5714 = 0.0, $5715 = 0.0, $5716 = 0.0, $5717 = 0.0, $5718 = 0.0, $5719 = 0.0, $572 = 0, $5720 = 0.0, $5721 = 0.0, $5722 = 0.0, $5723 = 0.0, $5724 = 0.0, $5725 = 0.0, $5726 = 0.0, $5727 = 0.0, $5728 = 0.0, $5729 = 0.0, $573 = 0, $5730 = 0.0, $5731 = 0.0;
 var $5732 = 0.0, $5733 = 0.0, $5734 = 0.0, $5735 = 0.0, $5736 = 0.0, $5737 = 0.0, $5738 = 0.0, $5739 = 0.0, $574 = 0, $5740 = 0.0, $5741 = 0.0, $5742 = 0.0, $5743 = 0.0, $5744 = 0.0, $5745 = 0.0, $5746 = 0.0, $5747 = 0.0, $5748 = 0.0, $5749 = 0.0, $575 = 0;
 var $5750 = 0.0, $5751 = 0.0, $5752 = 0.0, $5753 = 0.0, $5754 = 0.0, $5755 = 0.0, $5756 = 0.0, $5757 = 0.0, $5758 = 0.0, $5759 = 0.0, $576 = 0, $5760 = 0.0, $5761 = 0.0, $5762 = 0.0, $5763 = 0.0, $5764 = 0.0, $5765 = 0.0, $5766 = 0.0, $5767 = 0.0, $5768 = 0.0;
 var $5769 = 0.0, $577 = 0, $5770 = 0.0, $5771 = 0.0, $5772 = 0.0, $5773 = 0.0, $5774 = 0.0, $5775 = 0.0, $5776 = 0.0, $5777 = 0.0, $5778 = 0.0, $5779 = 0.0, $578 = 0, $5780 = 0.0, $5781 = 0.0, $5782 = 0.0, $5783 = 0.0, $5784 = 0.0, $5785 = 0.0, $5786 = 0.0;
 var $5787 = 0.0, $5788 = 0.0, $5789 = 0.0, $579 = 0, $5790 = 0.0, $5791 = 0.0, $5792 = 0.0, $5793 = 0.0, $5794 = 0.0, $5795 = 0.0, $5796 = 0.0, $5797 = 0.0, $5798 = 0.0, $5799 = 0.0, $58 = 0.0, $580 = 0, $5800 = 0.0, $5801 = 0.0, $5802 = 0.0, $5803 = 0.0;
 var $5804 = 0.0, $5805 = 0.0, $5806 = 0.0, $5807 = 0.0, $5808 = 0.0, $5809 = 0.0, $581 = 0, $5810 = 0.0, $5811 = 0.0, $5812 = 0.0, $5813 = 0.0, $5814 = 0.0, $5815 = 0.0, $5816 = 0.0, $5817 = 0.0, $5818 = 0.0, $5819 = 0.0, $582 = 0, $5820 = 0.0, $5821 = 0.0;
 var $5822 = 0.0, $5823 = 0.0, $5824 = 0.0, $5825 = 0.0, $5826 = 0.0, $5827 = 0.0, $5828 = 0.0, $5829 = 0.0, $583 = 0, $5830 = 0.0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0, $5836 = 0, $5837 = 0, $5838 = 0.0, $5839 = 0.0, $584 = 0;
 var $5840 = 0.0, $5841 = 0, $5842 = 0, $5843 = 0, $5844 = 0.0, $5845 = 0.0, $5846 = 0.0, $5847 = 0.0, $5848 = 0.0, $5849 = 0.0, $585 = 0, $5850 = 0.0, $5851 = 0.0, $5852 = 0.0, $5853 = 0.0, $5854 = 0.0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0;
 var $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0, $5862 = 0.0, $5863 = 0.0, $5864 = 0.0, $5865 = 0.0, $5866 = 0.0, $5867 = 0.0, $5868 = 0.0, $5869 = 0.0, $587 = 0, $5870 = 0.0, $5871 = 0.0, $5872 = 0.0, $5873 = 0.0, $5874 = 0.0, $5875 = 0, $5876 = 0;
 var $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0, $5880 = 0, $5881 = 0, $5882 = 0.0, $5883 = 0.0, $5884 = 0.0, $5885 = 0.0, $5886 = 0.0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0.0;
 var $5895 = 0.0, $5896 = 0.0, $5897 = 0.0, $5898 = 0.0, $5899 = 0.0, $59 = 0.0, $590 = 0, $5900 = 0.0, $5901 = 0.0, $5902 = 0.0, $5903 = 0.0, $5904 = 0.0, $5905 = 0.0, $5906 = 0.0, $5907 = 0.0, $5908 = 0.0, $5909 = 0.0, $591 = 0, $5910 = 0.0, $5911 = 0.0;
 var $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0, $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0.0, $592 = 0, $5920 = 0.0, $5921 = 0.0, $5922 = 0.0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0;
 var $5930 = 0.0, $5931 = 0.0, $5932 = 0.0, $5933 = 0.0, $5934 = 0.0, $5935 = 0.0, $5936 = 0, $5937 = 0, $5938 = 0, $5939 = 0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0.0, $5944 = 0.0, $5945 = 0.0, $5946 = 0.0, $5947 = 0, $5948 = 0;
 var $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0, $5952 = 0, $5953 = 0, $5954 = 0.0, $5955 = 0.0, $5956 = 0.0, $5957 = 0.0, $5958 = 0.0, $5959 = 0.0, $596 = 0, $5960 = 0.0, $5961 = 0.0, $5962 = 0.0, $5963 = 0.0, $5964 = 0.0, $5965 = 0.0, $5966 = 0.0;
 var $5967 = 0.0, $5968 = 0.0, $5969 = 0.0, $597 = 0, $5970 = 0.0, $5971 = 0.0, $5972 = 0.0, $5973 = 0.0, $5974 = 0.0, $5975 = 0.0, $5976 = 0.0, $5977 = 0.0, $5978 = 0.0, $5979 = 0.0, $598 = 0, $5980 = 0.0, $5981 = 0.0, $5982 = 0.0, $5983 = 0.0, $5984 = 0.0;
 var $5985 = 0.0, $5986 = 0.0, $5987 = 0.0, $5988 = 0, $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0, $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0.0, $5996 = 0.0, $5997 = 0.0, $5998 = 0.0, $5999 = 0, $6 = 0.0, $60 = 0.0, $600 = 0, $6000 = 0;
 var $6001 = 0, $6002 = 0, $6003 = 0, $6004 = 0, $6005 = 0, $6006 = 0.0, $6007 = 0.0, $6008 = 0.0, $6009 = 0.0, $601 = 0, $6010 = 0.0, $6011 = 0.0, $6012 = 0, $6013 = 0, $6014 = 0, $6015 = 0, $6016 = 0, $6017 = 0, $6018 = 0, $6019 = 0.0;
 var $602 = 0, $6020 = 0.0, $6021 = 0.0, $6022 = 0.0, $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0, $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0.0, $6031 = 0.0, $6032 = 0.0, $6033 = 0.0, $6034 = 0.0, $6035 = 0.0, $6036 = 0.0, $6037 = 0.0;
 var $6038 = 0.0, $6039 = 0.0, $604 = 0, $6040 = 0, $6041 = 0, $6042 = 0, $6043 = 0, $6044 = 0, $6045 = 0, $6046 = 0, $6047 = 0.0, $6048 = 0.0, $6049 = 0.0, $605 = 0, $6050 = 0.0, $6051 = 0, $6052 = 0, $6053 = 0, $6054 = 0, $6055 = 0;
 var $6056 = 0, $6057 = 0, $6058 = 0.0, $6059 = 0.0, $606 = 0, $6060 = 0.0, $6061 = 0.0, $6062 = 0.0, $6063 = 0.0, $6064 = 0, $6065 = 0, $6066 = 0, $6067 = 0, $6068 = 0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0.0, $6072 = 0.0, $6073 = 0.0;
 var $6074 = 0.0, $6075 = 0, $6076 = 0, $6077 = 0, $6078 = 0, $6079 = 0, $608 = 0, $6080 = 0, $6081 = 0, $6082 = 0.0, $6083 = 0.0, $6084 = 0.0, $6085 = 0.0, $6086 = 0.0, $6087 = 0.0, $6088 = 0.0, $6089 = 0.0, $609 = 0, $6090 = 0.0, $6091 = 0.0;
 var $6092 = 0.0, $6093 = 0.0, $6094 = 0.0, $6095 = 0.0, $6096 = 0.0, $6097 = 0.0, $6098 = 0.0, $6099 = 0, $61 = 0.0, $610 = 0, $6100 = 0.0, $6101 = 0.0, $6102 = 0.0, $6103 = 0.0, $6104 = 0.0, $6105 = 0.0, $6106 = 0.0, $6107 = 0.0, $6108 = 0.0, $6109 = 0.0;
 var $611 = 0, $6110 = 0.0, $6111 = 0.0, $6112 = 0.0, $6113 = 0.0, $6114 = 0.0, $6115 = 0.0, $6116 = 0, $6117 = 0.0, $6118 = 0.0, $6119 = 0.0, $612 = 0, $6120 = 0.0, $6121 = 0.0, $6122 = 0.0, $6123 = 0.0, $6124 = 0.0, $6125 = 0.0, $6126 = 0.0, $6127 = 0.0;
 var $6128 = 0.0, $6129 = 0.0, $613 = 0, $6130 = 0.0, $6131 = 0.0, $6132 = 0.0, $6133 = 0.0, $6134 = 0.0, $6135 = 0.0, $6136 = 0.0, $6137 = 0.0, $6138 = 0.0, $6139 = 0.0, $614 = 0, $6140 = 0.0, $6141 = 0.0, $6142 = 0.0, $6143 = 0.0, $6144 = 0.0, $6145 = 0.0;
 var $6146 = 0.0, $6147 = 0.0, $6148 = 0.0, $6149 = 0.0, $615 = 0, $6150 = 0, $6151 = 0, $6152 = 0.0, $6153 = 0.0, $6154 = 0.0, $6155 = 0.0, $6156 = 0.0, $6157 = 0.0, $6158 = 0.0, $6159 = 0.0, $616 = 0, $6160 = 0.0, $6161 = 0.0, $6162 = 0.0, $6163 = 0.0;
 var $6164 = 0.0, $6165 = 0.0, $6166 = 0.0, $6167 = 0.0, $6168 = 0.0, $6169 = 0.0, $617 = 0, $6170 = 0.0, $6171 = 0.0, $6172 = 0.0, $6173 = 0.0, $6174 = 0.0, $6175 = 0.0, $6176 = 0.0, $6177 = 0.0, $6178 = 0.0, $6179 = 0.0, $618 = 0, $6180 = 0.0, $6181 = 0.0;
 var $6182 = 0.0, $6183 = 0.0, $6184 = 0.0, $6185 = 0.0, $6186 = 0.0, $6187 = 0.0, $6188 = 0.0, $6189 = 0.0, $619 = 0, $6190 = 0.0, $6191 = 0.0, $6192 = 0.0, $6193 = 0.0, $6194 = 0.0, $6195 = 0.0, $6196 = 0.0, $6197 = 0.0, $6198 = 0.0, $6199 = 0.0, $62 = 0.0;
 var $620 = 0, $6200 = 0.0, $6201 = 0.0, $6202 = 0.0, $6203 = 0.0, $6204 = 0.0, $6205 = 0.0, $6206 = 0.0, $6207 = 0.0, $6208 = 0.0, $6209 = 0.0, $621 = 0, $6210 = 0.0, $6211 = 0.0, $6212 = 0.0, $6213 = 0.0, $6214 = 0.0, $6215 = 0.0, $6216 = 0.0, $6217 = 0.0;
 var $6218 = 0.0, $6219 = 0.0, $622 = 0, $6220 = 0.0, $6221 = 0.0, $6222 = 0.0, $6223 = 0.0, $6224 = 0.0, $6225 = 0.0, $6226 = 0.0, $6227 = 0.0, $6228 = 0.0, $6229 = 0.0, $623 = 0, $6230 = 0.0, $6231 = 0.0, $6232 = 0.0, $6233 = 0.0, $6234 = 0.0, $6235 = 0.0;
 var $6236 = 0.0, $6237 = 0.0, $6238 = 0.0, $6239 = 0.0, $624 = 0, $6240 = 0.0, $6241 = 0.0, $6242 = 0.0, $6243 = 0.0, $6244 = 0.0, $6245 = 0.0, $6246 = 0.0, $6247 = 0.0, $6248 = 0.0, $6249 = 0.0, $625 = 0, $6250 = 0.0, $6251 = 0.0, $6252 = 0.0, $6253 = 0.0;
 var $6254 = 0.0, $6255 = 0.0, $6256 = 0.0, $6257 = 0.0, $6258 = 0.0, $6259 = 0.0, $626 = 0, $6260 = 0.0, $6261 = 0.0, $6262 = 0.0, $6263 = 0.0, $6264 = 0.0, $6265 = 0.0, $6266 = 0.0, $6267 = 0.0, $6268 = 0.0, $6269 = 0.0, $627 = 0, $6270 = 0.0, $6271 = 0.0;
 var $6272 = 0.0, $6273 = 0.0, $6274 = 0.0, $6275 = 0.0, $6276 = 0.0, $6277 = 0.0, $6278 = 0.0, $6279 = 0.0, $628 = 0, $6280 = 0.0, $6281 = 0.0, $6282 = 0.0, $6283 = 0.0, $6284 = 0.0, $6285 = 0.0, $6286 = 0.0, $6287 = 0.0, $6288 = 0.0, $6289 = 0.0, $629 = 0;
 var $6290 = 0.0, $6291 = 0.0, $6292 = 0.0, $6293 = 0.0, $6294 = 0.0, $6295 = 0.0, $6296 = 0.0, $6297 = 0.0, $6298 = 0.0, $6299 = 0.0, $63 = 0.0, $630 = 0, $6300 = 0.0, $6301 = 0.0, $6302 = 0.0, $6303 = 0.0, $6304 = 0.0, $6305 = 0.0, $6306 = 0.0, $6307 = 0.0;
 var $6308 = 0.0, $6309 = 0.0, $631 = 0, $6310 = 0.0, $6311 = 0.0, $6312 = 0.0, $6313 = 0.0, $6314 = 0.0, $6315 = 0.0, $6316 = 0.0, $6317 = 0.0, $6318 = 0.0, $6319 = 0.0, $632 = 0, $6320 = 0.0, $6321 = 0.0, $6322 = 0.0, $6323 = 0.0, $6324 = 0.0, $6325 = 0.0;
 var $6326 = 0.0, $6327 = 0.0, $6328 = 0.0, $6329 = 0.0, $633 = 0, $6330 = 0.0, $6331 = 0.0, $6332 = 0.0, $6333 = 0.0, $6334 = 0.0, $6335 = 0.0, $6336 = 0.0, $6337 = 0.0, $6338 = 0.0, $6339 = 0.0, $634 = 0, $6340 = 0.0, $6341 = 0.0, $6342 = 0.0, $6343 = 0.0;
 var $6344 = 0.0, $6345 = 0.0, $6346 = 0.0, $6347 = 0.0, $6348 = 0.0, $6349 = 0.0, $635 = 0, $6350 = 0.0, $6351 = 0.0, $6352 = 0.0, $6353 = 0.0, $6354 = 0.0, $6355 = 0.0, $6356 = 0.0, $6357 = 0.0, $6358 = 0.0, $6359 = 0.0, $636 = 0, $6360 = 0.0, $6361 = 0.0;
 var $6362 = 0.0, $6363 = 0.0, $6364 = 0.0, $6365 = 0.0, $6366 = 0.0, $6367 = 0.0, $6368 = 0.0, $6369 = 0.0, $637 = 0, $6370 = 0.0, $6371 = 0.0, $6372 = 0.0, $6373 = 0.0, $6374 = 0.0, $6375 = 0.0, $6376 = 0.0, $6377 = 0.0, $6378 = 0.0, $6379 = 0.0, $638 = 0;
 var $6380 = 0.0, $6381 = 0.0, $6382 = 0.0, $6383 = 0.0, $6384 = 0.0, $6385 = 0.0, $6386 = 0.0, $6387 = 0.0, $6388 = 0.0, $6389 = 0.0, $639 = 0, $6390 = 0.0, $6391 = 0.0, $6392 = 0.0, $6393 = 0.0, $6394 = 0.0, $6395 = 0.0, $6396 = 0.0, $6397 = 0.0, $6398 = 0.0;
 var $6399 = 0.0, $64 = 0.0, $640 = 0, $6400 = 0.0, $6401 = 0.0, $6402 = 0.0, $6403 = 0.0, $6404 = 0.0, $6405 = 0.0, $6406 = 0.0, $6407 = 0.0, $6408 = 0.0, $6409 = 0.0, $641 = 0, $6410 = 0.0, $6411 = 0.0, $6412 = 0.0, $6413 = 0.0, $6414 = 0.0, $6415 = 0.0;
 var $6416 = 0.0, $6417 = 0.0, $6418 = 0.0, $6419 = 0.0, $642 = 0, $6420 = 0.0, $6421 = 0.0, $6422 = 0.0, $6423 = 0.0, $6424 = 0.0, $6425 = 0.0, $6426 = 0.0, $6427 = 0.0, $6428 = 0.0, $6429 = 0.0, $643 = 0, $6430 = 0.0, $6431 = 0.0, $6432 = 0.0, $6433 = 0.0;
 var $6434 = 0.0, $6435 = 0.0, $6436 = 0.0, $6437 = 0.0, $6438 = 0.0, $6439 = 0.0, $644 = 0, $6440 = 0.0, $6441 = 0.0, $6442 = 0.0, $6443 = 0.0, $6444 = 0.0, $6445 = 0.0, $6446 = 0.0, $6447 = 0.0, $6448 = 0.0, $6449 = 0.0, $645 = 0, $6450 = 0.0, $6451 = 0.0;
 var $6452 = 0.0, $6453 = 0.0, $6454 = 0.0, $6455 = 0.0, $6456 = 0.0, $6457 = 0.0, $6458 = 0.0, $6459 = 0.0, $646 = 0, $6460 = 0.0, $6461 = 0.0, $6462 = 0.0, $6463 = 0.0, $6464 = 0.0, $6465 = 0.0, $6466 = 0.0, $6467 = 0.0, $6468 = 0.0, $6469 = 0.0, $647 = 0;
 var $6470 = 0.0, $6471 = 0.0, $6472 = 0.0, $6473 = 0.0, $6474 = 0.0, $6475 = 0.0, $6476 = 0.0, $6477 = 0.0, $6478 = 0.0, $6479 = 0.0, $648 = 0, $6480 = 0.0, $6481 = 0.0, $6482 = 0.0, $6483 = 0.0, $6484 = 0.0, $6485 = 0.0, $6486 = 0.0, $6487 = 0.0, $6488 = 0.0;
 var $6489 = 0.0, $649 = 0, $6490 = 0.0, $6491 = 0.0, $6492 = 0.0, $6493 = 0.0, $6494 = 0.0, $6495 = 0.0, $6496 = 0.0, $6497 = 0.0, $6498 = 0.0, $6499 = 0.0, $65 = 0, $650 = 0, $6500 = 0.0, $6501 = 0.0, $6502 = 0.0, $6503 = 0.0, $6504 = 0.0, $6505 = 0.0;
 var $6506 = 0.0, $6507 = 0.0, $6508 = 0.0, $6509 = 0.0, $651 = 0, $6510 = 0.0, $6511 = 0.0, $6512 = 0.0, $6513 = 0.0, $6514 = 0.0, $6515 = 0.0, $6516 = 0.0, $6517 = 0.0, $6518 = 0.0, $6519 = 0.0, $652 = 0, $6520 = 0.0, $6521 = 0.0, $6522 = 0.0, $6523 = 0.0;
 var $6524 = 0.0, $6525 = 0.0, $6526 = 0.0, $6527 = 0.0, $6528 = 0.0, $6529 = 0.0, $653 = 0, $6530 = 0.0, $6531 = 0.0, $6532 = 0.0, $6533 = 0.0, $6534 = 0.0, $6535 = 0.0, $6536 = 0.0, $6537 = 0.0, $6538 = 0.0, $6539 = 0.0, $654 = 0, $6540 = 0.0, $6541 = 0.0;
 var $6542 = 0.0, $6543 = 0.0, $6544 = 0.0, $6545 = 0.0, $6546 = 0.0, $6547 = 0.0, $6548 = 0.0, $6549 = 0.0, $655 = 0, $6550 = 0.0, $6551 = 0.0, $6552 = 0.0, $6553 = 0.0, $6554 = 0.0, $6555 = 0.0, $6556 = 0.0, $6557 = 0.0, $6558 = 0.0, $6559 = 0.0, $656 = 0;
 var $6560 = 0.0, $6561 = 0.0, $6562 = 0.0, $6563 = 0.0, $6564 = 0.0, $6565 = 0.0, $6566 = 0.0, $6567 = 0.0, $6568 = 0.0, $6569 = 0.0, $657 = 0, $6570 = 0.0, $6571 = 0.0, $6572 = 0.0, $6573 = 0.0, $6574 = 0.0, $6575 = 0.0, $6576 = 0.0, $6577 = 0.0, $6578 = 0.0;
 var $6579 = 0.0, $658 = 0, $6580 = 0.0, $6581 = 0.0, $6582 = 0.0, $6583 = 0.0, $6584 = 0.0, $6585 = 0.0, $6586 = 0.0, $6587 = 0.0, $6588 = 0.0, $6589 = 0.0, $659 = 0, $6590 = 0.0, $6591 = 0.0, $6592 = 0.0, $6593 = 0.0, $6594 = 0.0, $6595 = 0.0, $6596 = 0.0;
 var $6597 = 0.0, $6598 = 0.0, $6599 = 0.0, $66 = 0.0, $660 = 0, $6600 = 0.0, $6601 = 0.0, $6602 = 0.0, $6603 = 0.0, $6604 = 0.0, $6605 = 0.0, $6606 = 0.0, $6607 = 0.0, $6608 = 0.0, $6609 = 0.0, $661 = 0, $6610 = 0.0, $6611 = 0.0, $6612 = 0.0, $6613 = 0.0;
 var $6614 = 0.0, $6615 = 0.0, $6616 = 0.0, $6617 = 0.0, $6618 = 0.0, $6619 = 0.0, $662 = 0, $6620 = 0.0, $6621 = 0.0, $6622 = 0.0, $6623 = 0.0, $6624 = 0.0, $6625 = 0.0, $6626 = 0.0, $6627 = 0.0, $6628 = 0.0, $6629 = 0.0, $663 = 0, $6630 = 0.0, $6631 = 0.0;
 var $6632 = 0.0, $6633 = 0.0, $6634 = 0.0, $6635 = 0.0, $6636 = 0.0, $6637 = 0.0, $6638 = 0.0, $6639 = 0.0, $664 = 0, $6640 = 0.0, $6641 = 0.0, $6642 = 0.0, $6643 = 0.0, $6644 = 0.0, $6645 = 0.0, $6646 = 0.0, $6647 = 0.0, $6648 = 0.0, $6649 = 0.0, $665 = 0;
 var $6650 = 0.0, $6651 = 0.0, $6652 = 0.0, $6653 = 0.0, $6654 = 0.0, $6655 = 0.0, $6656 = 0.0, $6657 = 0.0, $6658 = 0.0, $6659 = 0.0, $666 = 0, $6660 = 0.0, $6661 = 0.0, $6662 = 0.0, $6663 = 0.0, $6664 = 0.0, $6665 = 0.0, $6666 = 0.0, $6667 = 0.0, $6668 = 0.0;
 var $6669 = 0.0, $667 = 0, $6670 = 0.0, $6671 = 0.0, $6672 = 0.0, $6673 = 0.0, $6674 = 0.0, $6675 = 0.0, $6676 = 0.0, $6677 = 0.0, $6678 = 0.0, $6679 = 0.0, $668 = 0, $6680 = 0.0, $6681 = 0.0, $6682 = 0.0, $6683 = 0.0, $6684 = 0.0, $6685 = 0.0, $6686 = 0.0;
 var $6687 = 0.0, $6688 = 0.0, $6689 = 0.0, $669 = 0, $6690 = 0.0, $6691 = 0.0, $6692 = 0.0, $6693 = 0.0, $6694 = 0.0, $6695 = 0.0, $6696 = 0.0, $6697 = 0.0, $6698 = 0.0, $6699 = 0.0, $67 = 0.0, $670 = 0, $6700 = 0.0, $6701 = 0.0, $6702 = 0.0, $6703 = 0.0;
 var $6704 = 0.0, $6705 = 0.0, $6706 = 0.0, $6707 = 0.0, $6708 = 0.0, $6709 = 0.0, $671 = 0, $6710 = 0.0, $6711 = 0.0, $6712 = 0.0, $6713 = 0.0, $6714 = 0.0, $6715 = 0.0, $6716 = 0.0, $6717 = 0.0, $6718 = 0.0, $6719 = 0.0, $672 = 0, $6720 = 0.0, $6721 = 0.0;
 var $6722 = 0.0, $6723 = 0.0, $6724 = 0.0, $6725 = 0.0, $6726 = 0.0, $6727 = 0.0, $6728 = 0.0, $6729 = 0.0, $673 = 0, $6730 = 0.0, $6731 = 0.0, $6732 = 0.0, $6733 = 0.0, $6734 = 0.0, $6735 = 0.0, $6736 = 0.0, $6737 = 0.0, $6738 = 0.0, $6739 = 0.0, $674 = 0;
 var $6740 = 0.0, $6741 = 0.0, $6742 = 0.0, $6743 = 0.0, $6744 = 0.0, $6745 = 0.0, $6746 = 0.0, $6747 = 0.0, $6748 = 0.0, $6749 = 0.0, $675 = 0, $6750 = 0.0, $6751 = 0.0, $6752 = 0.0, $6753 = 0.0, $6754 = 0.0, $6755 = 0.0, $6756 = 0.0, $6757 = 0.0, $6758 = 0.0;
 var $6759 = 0.0, $676 = 0, $6760 = 0.0, $6761 = 0.0, $6762 = 0.0, $6763 = 0.0, $6764 = 0.0, $6765 = 0.0, $6766 = 0.0, $6767 = 0.0, $6768 = 0.0, $6769 = 0.0, $677 = 0, $6770 = 0.0, $6771 = 0.0, $6772 = 0.0, $6773 = 0.0, $6774 = 0.0, $6775 = 0.0, $6776 = 0.0;
 var $6777 = 0.0, $6778 = 0.0, $6779 = 0, $678 = 0, $6780 = 0, $6781 = 0.0, $6782 = 0, $6783 = 0, $6784 = 0.0, $6785 = 0, $6786 = 0, $6787 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0.0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0.0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0.0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0.0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0.0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0.0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0.0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0.0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0.0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0.0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0.0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0.0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exp2f = 0.0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = +HEAPF32[$0>>2];
 $2 = $1 * 0.0500000007450580596924;
 $3 = (+Math_pow(10.0,(+$2)));
 $4 = (($this) + 12|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * 0.100000001490116119385;
 $7 = (($this) + 40|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($this) + 52|0);
 $10 = +HEAPF32[$9>>2];
 $11 = 1.0 - $10;
 $12 = (($this) + 56|0);
 $13 = +HEAPF32[$12>>2];
 $14 = (($this) + 68|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 * 0.5;
 $17 = 1.0 - $16;
 $18 = $17 * 0.25;
 $19 = (($this) + 84|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (($this) + 88|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22 / $20;
 $24 = (($this) + 80|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $20 * $25;
 $27 = (+Math_log((+$26)));
 $28 = $27 * 1.44269502162933349609;
 $29 = $28 + 0.5;
 $30 = (+Math_floor((+$29)));
 $exp2f = (+_exp2((+$30)));
 $31 = $exp2f * 6.90775537490844726563;
 $32 = 0.0 - $31;
 $33 = (($this) + 92|0);
 $34 = +HEAPF32[$33>>2];
 $35 = (($this) + 76|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $32 / $34;
 $38 = $36 * $37;
 $39 = (+Math_exp((+$38)));
 $40 = (($this) + 96|0);
 $41 = +HEAPF32[$40>>2];
 $42 = (($this) + 100|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $41 * $43;
 $45 = (+Math_tan((+$44)));
 $46 = 1.0 / $45;
 $47 = $46 + 1.0;
 $48 = $47 / $45;
 $49 = $48 + 1.0;
 $50 = 1.0 / $49;
 $51 = (+__Z10faustpowerILi2EEff($45));
 $52 = 1.0 / $51;
 $53 = 1.0 - $46;
 $54 = $53 / $47;
 $55 = 0.0 - $54;
 $56 = 1.0 / $47;
 $57 = 0.0 - $46;
 $58 = $46 + -1.0;
 $59 = $58 / $45;
 $60 = $59 + 1.0;
 $61 = 1.0 - $52;
 $62 = $61 * 2.0;
 $63 = 0.0 - $52;
 $64 = $63 * 2.0;
 $65 = (($this) + 124|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $41 * $66;
 $68 = (+Math_tan((+$67)));
 $69 = 1.0 / $68;
 $70 = $69 + 1.0;
 $71 = $70 / $68;
 $72 = $71 + 1.0;
 $73 = 1.0 / $72;
 $74 = (+__Z10faustpowerILi2EEff($68));
 $75 = 1.0 / $74;
 $76 = 1.0 - $75;
 $77 = $76 * 2.0;
 $78 = $69 + -1.0;
 $79 = $78 / $68;
 $80 = $79 + 1.0;
 $81 = (($this) + 140|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $41 * $82;
 $84 = (+Math_tan((+$83)));
 $85 = 1.0 / $84;
 $86 = $85 + 1.0;
 $87 = $86 / $84;
 $88 = $87 + 1.0;
 $89 = 1.0 / $88;
 $90 = $85 + -1.0;
 $91 = $90 / $84;
 $92 = $91 + 1.0;
 $93 = (+__Z10faustpowerILi2EEff($84));
 $94 = 1.0 / $93;
 $95 = 1.0 - $94;
 $96 = $95 * 2.0;
 $97 = (($this) + 156|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $41 * $98;
 $100 = (+Math_tan((+$99)));
 $101 = 1.0 / $100;
 $102 = $101 + 1.0;
 $103 = $102 / $100;
 $104 = $103 + 1.0;
 $105 = 1.0 / $104;
 $106 = (+__Z10faustpowerILi2EEff($100));
 $107 = 1.0 / $106;
 $108 = 1.0 - $107;
 $109 = $108 * 2.0;
 $110 = $101 + -1.0;
 $111 = $110 / $100;
 $112 = $111 + 1.0;
 $113 = (($this) + 172|0);
 $114 = +HEAPF32[$113>>2];
 $115 = $32 / $114;
 $116 = $36 * $115;
 $117 = (+Math_exp((+$116)));
 $118 = 1.0 - $69;
 $119 = $118 / $70;
 $120 = 0.0 - $119;
 $121 = 1.0 / $70;
 $122 = 0.0 - $69;
 $123 = $49 * $68;
 $124 = 1.0 / $123;
 $125 = 0.0 - $75;
 $126 = $125 * 2.0;
 $127 = (($this) + 248|0);
 $128 = +HEAPF32[$127>>2];
 $129 = $32 / $128;
 $130 = $36 * $129;
 $131 = (+Math_exp((+$130)));
 $132 = 1.0 - $85;
 $133 = $132 / $86;
 $134 = 0.0 - $133;
 $135 = 1.0 / $86;
 $136 = 0.0 - $85;
 $137 = $72 * $84;
 $138 = 1.0 / $137;
 $139 = 0.0 - $94;
 $140 = $139 * 2.0;
 $141 = (($this) + 312|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $32 / $142;
 $144 = $36 * $143;
 $145 = (+Math_exp((+$144)));
 $146 = 1.0 - $101;
 $147 = $146 / $102;
 $148 = 0.0 - $147;
 $149 = 1.0 / $102;
 $150 = 0.0 - $101;
 $151 = $88 * $100;
 $152 = 1.0 / $151;
 $153 = 0.0 - $107;
 $154 = $153 * 2.0;
 $155 = (($this) + 364|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $32 / $156;
 $158 = $36 * $157;
 $159 = (+Math_exp((+$158)));
 $160 = (+Math_pow((+$23),0.533333361148834228516));
 $161 = $20 * $160;
 $162 = $25 * $161;
 $163 = (+Math_log((+$162)));
 $164 = $163 * 0.318928986787796020508;
 $165 = $164 + 0.5;
 $166 = (+Math_floor((+$165)));
 $167 = (+Math_pow(23.0,(+$166)));
 $168 = $167 * 6.90775537490844726563;
 $169 = 0.0 - $168;
 $170 = $169 / $34;
 $171 = $36 * $170;
 $172 = (+Math_exp((+$171)));
 $173 = $169 / $114;
 $174 = $36 * $173;
 $175 = (+Math_exp((+$174)));
 $176 = $169 / $128;
 $177 = $36 * $176;
 $178 = (+Math_exp((+$177)));
 $179 = $169 / $142;
 $180 = $36 * $179;
 $181 = (+Math_exp((+$180)));
 $182 = $169 / $156;
 $183 = $36 * $182;
 $184 = (+Math_exp((+$183)));
 $185 = (+Math_pow((+$23),0.266666680574417114258));
 $186 = $20 * $185;
 $187 = $25 * $186;
 $188 = (+Math_log((+$187)));
 $189 = $188 * 0.417032390832901000977;
 $190 = $189 + 0.5;
 $191 = (+Math_floor((+$190)));
 $192 = (+Math_pow(11.0,(+$191)));
 $193 = $192 * 6.90775537490844726563;
 $194 = 0.0 - $193;
 $195 = $194 / $34;
 $196 = $36 * $195;
 $197 = (+Math_exp((+$196)));
 $198 = $194 / $114;
 $199 = $36 * $198;
 $200 = (+Math_exp((+$199)));
 $201 = $194 / $128;
 $202 = $36 * $201;
 $203 = (+Math_exp((+$202)));
 $204 = $194 / $142;
 $205 = $36 * $204;
 $206 = (+Math_exp((+$205)));
 $207 = $194 / $156;
 $208 = $36 * $207;
 $209 = (+Math_exp((+$208)));
 $210 = (+Math_pow((+$23),0.800000011920928955078));
 $211 = $20 * $210;
 $212 = $25 * $211;
 $213 = (+Math_log((+$212)));
 $214 = $213 * 0.269282519817352294922;
 $215 = $214 + 0.5;
 $216 = (+Math_floor((+$215)));
 $217 = (+Math_pow(41.0,(+$216)));
 $218 = $217 * 6.90775537490844726563;
 $219 = 0.0 - $218;
 $220 = $219 / $34;
 $221 = $36 * $220;
 $222 = (+Math_exp((+$221)));
 $223 = $219 / $114;
 $224 = $36 * $223;
 $225 = (+Math_exp((+$224)));
 $226 = $219 / $128;
 $227 = $36 * $226;
 $228 = (+Math_exp((+$227)));
 $229 = $219 / $142;
 $230 = $36 * $229;
 $231 = (+Math_exp((+$230)));
 $232 = $219 / $156;
 $233 = $36 * $232;
 $234 = (+Math_exp((+$233)));
 $235 = (+Math_pow((+$23),0.133333340287208557129));
 $236 = $20 * $235;
 $237 = $25 * $236;
 $238 = (+Math_log((+$237)));
 $239 = $238 * 0.621334910392761230469;
 $240 = $239 + 0.5;
 $241 = (+Math_floor((+$240)));
 $242 = (+Math_pow(5.0,(+$241)));
 $243 = $242 * 6.90775537490844726563;
 $244 = 0.0 - $243;
 $245 = $244 / $34;
 $246 = $36 * $245;
 $247 = (+Math_exp((+$246)));
 $248 = $244 / $114;
 $249 = $36 * $248;
 $250 = (+Math_exp((+$249)));
 $251 = $244 / $128;
 $252 = $36 * $251;
 $253 = (+Math_exp((+$252)));
 $254 = $244 / $142;
 $255 = $36 * $254;
 $256 = (+Math_exp((+$255)));
 $257 = $244 / $156;
 $258 = $36 * $257;
 $259 = (+Math_exp((+$258)));
 $260 = (+Math_pow((+$23),0.666666686534881591796));
 $261 = $20 * $260;
 $262 = $25 * $261;
 $263 = (+Math_log((+$262)));
 $264 = $263 * 0.291206687688827514648;
 $265 = $264 + 0.5;
 $266 = (+Math_floor((+$265)));
 $267 = (+Math_pow(31.0,(+$266)));
 $268 = $267 * 6.90775537490844726563;
 $269 = 0.0 - $268;
 $270 = $269 / $34;
 $271 = $36 * $270;
 $272 = (+Math_exp((+$271)));
 $273 = $269 / $114;
 $274 = $36 * $273;
 $275 = (+Math_exp((+$274)));
 $276 = $269 / $128;
 $277 = $36 * $276;
 $278 = (+Math_exp((+$277)));
 $279 = $269 / $142;
 $280 = $36 * $279;
 $281 = (+Math_exp((+$280)));
 $282 = $269 / $156;
 $283 = $36 * $282;
 $284 = (+Math_exp((+$283)));
 $285 = (+Math_pow((+$23),0.400000005960464477539));
 $286 = $20 * $285;
 $287 = $25 * $286;
 $288 = (+Math_log((+$287)));
 $289 = $288 * 0.352956116199493408203;
 $290 = $289 + 0.5;
 $291 = (+Math_floor((+$290)));
 $292 = (+Math_pow(17.0,(+$291)));
 $293 = $292 * 6.90775537490844726563;
 $294 = 0.0 - $293;
 $295 = $294 / $34;
 $296 = $36 * $295;
 $297 = (+Math_exp((+$296)));
 $298 = $294 / $114;
 $299 = $36 * $298;
 $300 = (+Math_exp((+$299)));
 $301 = $294 / $128;
 $302 = $36 * $301;
 $303 = (+Math_exp((+$302)));
 $304 = $294 / $142;
 $305 = $36 * $304;
 $306 = (+Math_exp((+$305)));
 $307 = $294 / $156;
 $308 = $36 * $307;
 $309 = (+Math_exp((+$308)));
 $310 = (+Math_pow((+$23),0.933333337306976318359));
 $311 = $20 * $310;
 $312 = $25 * $311;
 $313 = (+Math_log((+$312)));
 $314 = $313 * 0.259730309247970581055;
 $315 = $314 + 0.5;
 $316 = (+Math_floor((+$315)));
 $317 = (+Math_pow(47.0,(+$316)));
 $318 = $317 * 6.90775537490844726563;
 $319 = 0.0 - $318;
 $320 = $319 / $34;
 $321 = $36 * $320;
 $322 = (+Math_exp((+$321)));
 $323 = $319 / $114;
 $324 = $36 * $323;
 $325 = (+Math_exp((+$324)));
 $326 = $319 / $128;
 $327 = $36 * $326;
 $328 = (+Math_exp((+$327)));
 $329 = $319 / $142;
 $330 = $36 * $329;
 $331 = (+Math_exp((+$330)));
 $332 = $319 / $156;
 $333 = $36 * $332;
 $334 = (+Math_exp((+$333)));
 $335 = (+Math_pow((+$23),0.0666666701436042785645));
 $336 = $20 * $335;
 $337 = $25 * $336;
 $338 = (+Math_log((+$337)));
 $339 = $338 * 0.91023921966552734375;
 $340 = $339 + 0.5;
 $341 = (+Math_floor((+$340)));
 $342 = (+Math_pow(3.0,(+$341)));
 $343 = $342 * 6.90775537490844726563;
 $344 = 0.0 - $343;
 $345 = $344 / $34;
 $346 = $36 * $345;
 $347 = (+Math_exp((+$346)));
 $348 = $344 / $114;
 $349 = $36 * $348;
 $350 = (+Math_exp((+$349)));
 $351 = $344 / $128;
 $352 = $36 * $351;
 $353 = (+Math_exp((+$352)));
 $354 = $344 / $142;
 $355 = $36 * $354;
 $356 = (+Math_exp((+$355)));
 $357 = $344 / $156;
 $358 = $36 * $357;
 $359 = (+Math_exp((+$358)));
 $360 = (+Math_pow((+$23),0.600000023841857910156));
 $361 = $20 * $360;
 $362 = $25 * $361;
 $363 = (+Math_log((+$362)));
 $364 = $363 * 0.296974211931228637695;
 $365 = $364 + 0.5;
 $366 = (+Math_floor((+$365)));
 $367 = (+Math_pow(29.0,(+$366)));
 $368 = $367 * 6.90775537490844726563;
 $369 = 0.0 - $368;
 $370 = $369 / $34;
 $371 = $36 * $370;
 $372 = (+Math_exp((+$371)));
 $373 = $369 / $114;
 $374 = $36 * $373;
 $375 = (+Math_exp((+$374)));
 $376 = $369 / $128;
 $377 = $36 * $376;
 $378 = (+Math_exp((+$377)));
 $379 = $369 / $142;
 $380 = $36 * $379;
 $381 = (+Math_exp((+$380)));
 $382 = $369 / $156;
 $383 = $36 * $382;
 $384 = (+Math_exp((+$383)));
 $385 = (+Math_pow((+$23),0.333333343267440795898));
 $386 = $20 * $385;
 $387 = $25 * $386;
 $388 = (+Math_log((+$387)));
 $389 = $388 * 0.389871239662170410156;
 $390 = $389 + 0.5;
 $391 = (+Math_floor((+$390)));
 $392 = (+Math_pow(13.0,(+$391)));
 $393 = $392 * 6.90775537490844726563;
 $394 = 0.0 - $393;
 $395 = $394 / $34;
 $396 = $36 * $395;
 $397 = (+Math_exp((+$396)));
 $398 = $394 / $114;
 $399 = $36 * $398;
 $400 = (+Math_exp((+$399)));
 $401 = $394 / $128;
 $402 = $36 * $401;
 $403 = (+Math_exp((+$402)));
 $404 = $394 / $142;
 $405 = $36 * $404;
 $406 = (+Math_exp((+$405)));
 $407 = $394 / $156;
 $408 = $36 * $407;
 $409 = (+Math_exp((+$408)));
 $410 = (+Math_pow((+$23),0.866666674613952636718));
 $411 = $20 * $410;
 $412 = $25 * $411;
 $413 = (+Math_log((+$412)));
 $414 = $413 * 0.265872597694396972656;
 $415 = $414 + 0.5;
 $416 = (+Math_floor((+$415)));
 $417 = (+Math_pow(43.0,(+$416)));
 $418 = $417 * 6.90775537490844726563;
 $419 = 0.0 - $418;
 $420 = $419 / $34;
 $421 = $36 * $420;
 $422 = (+Math_exp((+$421)));
 $423 = $419 / $114;
 $424 = $36 * $423;
 $425 = (+Math_exp((+$424)));
 $426 = $419 / $128;
 $427 = $36 * $426;
 $428 = (+Math_exp((+$427)));
 $429 = $419 / $142;
 $430 = $36 * $429;
 $431 = (+Math_exp((+$430)));
 $432 = $419 / $156;
 $433 = $36 * $432;
 $434 = (+Math_exp((+$433)));
 $435 = (+Math_pow((+$23),0.20000000298023223877));
 $436 = $20 * $435;
 $437 = $25 * $436;
 $438 = (+Math_log((+$437)));
 $439 = $438 * 0.513898313045501708984;
 $440 = $439 + 0.5;
 $441 = (+Math_floor((+$440)));
 $442 = (+Math_pow(7.0,(+$441)));
 $443 = $442 * 6.90775537490844726563;
 $444 = 0.0 - $443;
 $445 = $444 / $34;
 $446 = $36 * $445;
 $447 = (+Math_exp((+$446)));
 $448 = $444 / $114;
 $449 = $36 * $448;
 $450 = (+Math_exp((+$449)));
 $451 = $444 / $128;
 $452 = $36 * $451;
 $453 = (+Math_exp((+$452)));
 $454 = $444 / $142;
 $455 = $36 * $454;
 $456 = (+Math_exp((+$455)));
 $457 = $444 / $156;
 $458 = $36 * $457;
 $459 = (+Math_exp((+$458)));
 $460 = (+Math_pow((+$23),0.733333349227905273438));
 $461 = $20 * $460;
 $462 = $25 * $461;
 $463 = (+Math_log((+$462)));
 $464 = $463 * 0.276937901973724365234;
 $465 = $464 + 0.5;
 $466 = (+Math_floor((+$465)));
 $467 = (+Math_pow(37.0,(+$466)));
 $468 = $467 * 6.90775537490844726563;
 $469 = 0.0 - $468;
 $470 = $469 / $34;
 $471 = $36 * $470;
 $472 = (+Math_exp((+$471)));
 $473 = $469 / $114;
 $474 = $36 * $473;
 $475 = (+Math_exp((+$474)));
 $476 = $469 / $128;
 $477 = $36 * $476;
 $478 = (+Math_exp((+$477)));
 $479 = $469 / $142;
 $480 = $36 * $479;
 $481 = (+Math_exp((+$480)));
 $482 = $469 / $156;
 $483 = $36 * $482;
 $484 = (+Math_exp((+$483)));
 $485 = (+Math_pow((+$23),0.46666666865348815918));
 $486 = $20 * $485;
 $487 = $25 * $486;
 $488 = (+Math_log((+$487)));
 $489 = $488 * 0.339623272418975830078;
 $490 = $489 + 0.5;
 $491 = (+Math_floor((+$490)));
 $492 = (+Math_pow(19.0,(+$491)));
 $493 = $492 * 6.90775537490844726563;
 $494 = 0.0 - $493;
 $495 = $494 / $34;
 $496 = $36 * $495;
 $497 = (+Math_exp((+$496)));
 $498 = $494 / $114;
 $499 = $36 * $498;
 $500 = (+Math_exp((+$499)));
 $501 = $494 / $128;
 $502 = $36 * $501;
 $503 = (+Math_exp((+$502)));
 $504 = $494 / $142;
 $505 = $36 * $504;
 $506 = (+Math_exp((+$505)));
 $507 = $494 / $156;
 $508 = $36 * $507;
 $509 = (+Math_exp((+$508)));
 $510 = $20 * $23;
 $511 = $25 * $510;
 $512 = (+Math_log((+$511)));
 $513 = $512 * 0.25187066197395324707;
 $514 = $513 + 0.5;
 $515 = (+Math_floor((+$514)));
 $516 = (+Math_pow(53.0,(+$515)));
 $517 = $516 * 6.90775537490844726563;
 $518 = 0.0 - $517;
 $519 = $518 / $34;
 $520 = $36 * $519;
 $521 = (+Math_exp((+$520)));
 $522 = $518 / $114;
 $523 = $36 * $522;
 $524 = (+Math_exp((+$523)));
 $525 = $518 / $128;
 $526 = $36 * $525;
 $527 = (+Math_exp((+$526)));
 $528 = $518 / $142;
 $529 = $36 * $528;
 $530 = (+Math_exp((+$529)));
 $531 = $518 / $156;
 $532 = $36 * $531;
 $533 = (+Math_exp((+$532)));
 $534 = $exp2f + -1.0;
 $535 = (~~(($534)));
 $536 = (($this) + 37012|0);
 $537 = +HEAPF32[$536>>2];
 $538 = $342 + -1.0;
 $539 = (~~(($538)));
 $540 = $242 + -1.0;
 $541 = (~~(($540)));
 $542 = $442 + -1.0;
 $543 = (~~(($542)));
 $544 = $192 + -1.0;
 $545 = (~~(($544)));
 $546 = $392 + -1.0;
 $547 = (~~(($546)));
 $548 = $292 + -1.0;
 $549 = (~~(($548)));
 $550 = $492 + -1.0;
 $551 = (~~(($550)));
 $552 = $167 + -1.0;
 $553 = (~~(($552)));
 $554 = $367 + -1.0;
 $555 = (~~(($554)));
 $556 = $267 + -1.0;
 $557 = (~~(($556)));
 $558 = $467 + -1.0;
 $559 = (~~(($558)));
 $560 = $217 + -1.0;
 $561 = (~~(($560)));
 $562 = $417 + -1.0;
 $563 = (~~(($562)));
 $564 = $317 + -1.0;
 $565 = (~~(($564)));
 $566 = $516 + -1.0;
 $567 = (~~(($566)));
 $568 = HEAP32[$input>>2]|0;
 $569 = (($input) + 4|0);
 $570 = HEAP32[$569>>2]|0;
 $571 = HEAP32[$output>>2]|0;
 $572 = (($output) + 4|0);
 $573 = HEAP32[$572>>2]|0;
 $574 = ($count|0)>(0);
 if (!($574)) {
  STACKTOP = sp;return;
 }
 $575 = (($this) + 20|0);
 $576 = (($this) + 16|0);
 $577 = (($this) + 36|0);
 $578 = (($this) + 28|0);
 $579 = (($this) + 32|0);
 $580 = (($this) + 24|0);
 $581 = (($this) + 44|0);
 $582 = (($this) + 48|0);
 $583 = (($this) + 60|0);
 $584 = (($this) + 64|0);
 $585 = (($this) + 108|0);
 $586 = (($this) + 37004|0);
 $587 = (($this) + 37008|0);
 $588 = (($this) + 104|0);
 $589 = (($this) + 120|0);
 $590 = (($this) + 116|0);
 $591 = (($this) + 112|0);
 $592 = (($this) + 132|0);
 $593 = (($this) + 136|0);
 $594 = (($this) + 128|0);
 $595 = (($this) + 148|0);
 $596 = (($this) + 152|0);
 $597 = (($this) + 144|0);
 $598 = (($this) + 164|0);
 $599 = (($this) + 168|0);
 $600 = (($this) + 160|0);
 $601 = (($this) + 180|0);
 $602 = (($this) + 176|0);
 $603 = (($this) + 192|0);
 $604 = (($this) + 188|0);
 $605 = (($this) + 184|0);
 $606 = (($this) + 196|0);
 $607 = (($this) + 208|0);
 $608 = (($this) + 200|0);
 $609 = (($this) + 204|0);
 $610 = (($this) + 220|0);
 $611 = (($this) + 216|0);
 $612 = (($this) + 212|0);
 $613 = (($this) + 228|0);
 $614 = (($this) + 232|0);
 $615 = (($this) + 224|0);
 $616 = (($this) + 240|0);
 $617 = (($this) + 244|0);
 $618 = (($this) + 236|0);
 $619 = (($this) + 256|0);
 $620 = (($this) + 252|0);
 $621 = (($this) + 268|0);
 $622 = (($this) + 264|0);
 $623 = (($this) + 260|0);
 $624 = (($this) + 272|0);
 $625 = (($this) + 284|0);
 $626 = (($this) + 276|0);
 $627 = (($this) + 280|0);
 $628 = (($this) + 296|0);
 $629 = (($this) + 292|0);
 $630 = (($this) + 288|0);
 $631 = (($this) + 304|0);
 $632 = (($this) + 308|0);
 $633 = (($this) + 300|0);
 $634 = (($this) + 320|0);
 $635 = (($this) + 316|0);
 $636 = (($this) + 332|0);
 $637 = (($this) + 328|0);
 $638 = (($this) + 324|0);
 $639 = (($this) + 336|0);
 $640 = (($this) + 348|0);
 $641 = (($this) + 340|0);
 $642 = (($this) + 344|0);
 $643 = (($this) + 360|0);
 $644 = (($this) + 356|0);
 $645 = (($this) + 352|0);
 $646 = (($this) + 372|0);
 $647 = (($this) + 368|0);
 $648 = (($this) + 384|0);
 $649 = (($this) + 380|0);
 $650 = (($this) + 376|0);
 $651 = (($this) + 392|0);
 $652 = (($this) + 299256|0);
 $653 = (($this) + 299260|0);
 $654 = (($this) + 388|0);
 $655 = (($this) + 404|0);
 $656 = (($this) + 400|0);
 $657 = (($this) + 396|0);
 $658 = (($this) + 412|0);
 $659 = (($this) + 416|0);
 $660 = (($this) + 408|0);
 $661 = (($this) + 424|0);
 $662 = (($this) + 428|0);
 $663 = (($this) + 420|0);
 $664 = (($this) + 436|0);
 $665 = (($this) + 440|0);
 $666 = (($this) + 432|0);
 $667 = (($this) + 448|0);
 $668 = (($this) + 444|0);
 $669 = (($this) + 460|0);
 $670 = (($this) + 456|0);
 $671 = (($this) + 452|0);
 $672 = (($this) + 464|0);
 $673 = (($this) + 476|0);
 $674 = (($this) + 468|0);
 $675 = (($this) + 472|0);
 $676 = (($this) + 488|0);
 $677 = (($this) + 484|0);
 $678 = (($this) + 480|0);
 $679 = (($this) + 496|0);
 $680 = (($this) + 500|0);
 $681 = (($this) + 492|0);
 $682 = (($this) + 508|0);
 $683 = (($this) + 512|0);
 $684 = (($this) + 504|0);
 $685 = (($this) + 520|0);
 $686 = (($this) + 516|0);
 $687 = (($this) + 532|0);
 $688 = (($this) + 528|0);
 $689 = (($this) + 524|0);
 $690 = (($this) + 536|0);
 $691 = (($this) + 548|0);
 $692 = (($this) + 540|0);
 $693 = (($this) + 544|0);
 $694 = (($this) + 560|0);
 $695 = (($this) + 556|0);
 $696 = (($this) + 552|0);
 $697 = (($this) + 568|0);
 $698 = (($this) + 572|0);
 $699 = (($this) + 564|0);
 $700 = (($this) + 580|0);
 $701 = (($this) + 576|0);
 $702 = (($this) + 592|0);
 $703 = (($this) + 588|0);
 $704 = (($this) + 584|0);
 $705 = (($this) + 596|0);
 $706 = (($this) + 608|0);
 $707 = (($this) + 600|0);
 $708 = (($this) + 604|0);
 $709 = (($this) + 620|0);
 $710 = (($this) + 616|0);
 $711 = (($this) + 612|0);
 $712 = (($this) + 628|0);
 $713 = (($this) + 624|0);
 $714 = (($this) + 640|0);
 $715 = (($this) + 636|0);
 $716 = (($this) + 632|0);
 $717 = (($this) + 648|0);
 $718 = (($this) + 168136|0);
 $719 = (($this) + 168140|0);
 $720 = (($this) + 644|0);
 $721 = (($this) + 660|0);
 $722 = (($this) + 656|0);
 $723 = (($this) + 652|0);
 $724 = (($this) + 668|0);
 $725 = (($this) + 672|0);
 $726 = (($this) + 664|0);
 $727 = (($this) + 680|0);
 $728 = (($this) + 684|0);
 $729 = (($this) + 676|0);
 $730 = (($this) + 692|0);
 $731 = (($this) + 696|0);
 $732 = (($this) + 688|0);
 $733 = (($this) + 704|0);
 $734 = (($this) + 700|0);
 $735 = (($this) + 716|0);
 $736 = (($this) + 712|0);
 $737 = (($this) + 708|0);
 $738 = (($this) + 720|0);
 $739 = (($this) + 732|0);
 $740 = (($this) + 724|0);
 $741 = (($this) + 728|0);
 $742 = (($this) + 744|0);
 $743 = (($this) + 740|0);
 $744 = (($this) + 736|0);
 $745 = (($this) + 752|0);
 $746 = (($this) + 756|0);
 $747 = (($this) + 748|0);
 $748 = (($this) + 764|0);
 $749 = (($this) + 768|0);
 $750 = (($this) + 760|0);
 $751 = (($this) + 776|0);
 $752 = (($this) + 772|0);
 $753 = (($this) + 788|0);
 $754 = (($this) + 784|0);
 $755 = (($this) + 780|0);
 $756 = (($this) + 792|0);
 $757 = (($this) + 804|0);
 $758 = (($this) + 796|0);
 $759 = (($this) + 800|0);
 $760 = (($this) + 816|0);
 $761 = (($this) + 812|0);
 $762 = (($this) + 808|0);
 $763 = (($this) + 824|0);
 $764 = (($this) + 828|0);
 $765 = (($this) + 820|0);
 $766 = (($this) + 836|0);
 $767 = (($this) + 832|0);
 $768 = (($this) + 848|0);
 $769 = (($this) + 844|0);
 $770 = (($this) + 840|0);
 $771 = (($this) + 852|0);
 $772 = (($this) + 864|0);
 $773 = (($this) + 856|0);
 $774 = (($this) + 860|0);
 $775 = (($this) + 876|0);
 $776 = (($this) + 872|0);
 $777 = (($this) + 868|0);
 $778 = (($this) + 884|0);
 $779 = (($this) + 880|0);
 $780 = (($this) + 896|0);
 $781 = (($this) + 892|0);
 $782 = (($this) + 888|0);
 $783 = (($this) + 904|0);
 $784 = (($this) + 430376|0);
 $785 = (($this) + 430380|0);
 $786 = (($this) + 900|0);
 $787 = (($this) + 916|0);
 $788 = (($this) + 912|0);
 $789 = (($this) + 908|0);
 $790 = (($this) + 924|0);
 $791 = (($this) + 928|0);
 $792 = (($this) + 920|0);
 $793 = (($this) + 936|0);
 $794 = (($this) + 940|0);
 $795 = (($this) + 932|0);
 $796 = (($this) + 948|0);
 $797 = (($this) + 952|0);
 $798 = (($this) + 944|0);
 $799 = (($this) + 960|0);
 $800 = (($this) + 956|0);
 $801 = (($this) + 972|0);
 $802 = (($this) + 968|0);
 $803 = (($this) + 964|0);
 $804 = (($this) + 976|0);
 $805 = (($this) + 988|0);
 $806 = (($this) + 980|0);
 $807 = (($this) + 984|0);
 $808 = (($this) + 1000|0);
 $809 = (($this) + 996|0);
 $810 = (($this) + 992|0);
 $811 = (($this) + 1008|0);
 $812 = (($this) + 1012|0);
 $813 = (($this) + 1004|0);
 $814 = (($this) + 1020|0);
 $815 = (($this) + 1024|0);
 $816 = (($this) + 1016|0);
 $817 = (($this) + 1032|0);
 $818 = (($this) + 1028|0);
 $819 = (($this) + 1044|0);
 $820 = (($this) + 1040|0);
 $821 = (($this) + 1036|0);
 $822 = (($this) + 1048|0);
 $823 = (($this) + 1060|0);
 $824 = (($this) + 1052|0);
 $825 = (($this) + 1056|0);
 $826 = (($this) + 1072|0);
 $827 = (($this) + 1068|0);
 $828 = (($this) + 1064|0);
 $829 = (($this) + 1080|0);
 $830 = (($this) + 1084|0);
 $831 = (($this) + 1076|0);
 $832 = (($this) + 1092|0);
 $833 = (($this) + 1088|0);
 $834 = (($this) + 1104|0);
 $835 = (($this) + 1100|0);
 $836 = (($this) + 1096|0);
 $837 = (($this) + 1108|0);
 $838 = (($this) + 1120|0);
 $839 = (($this) + 1112|0);
 $840 = (($this) + 1116|0);
 $841 = (($this) + 1132|0);
 $842 = (($this) + 1128|0);
 $843 = (($this) + 1124|0);
 $844 = (($this) + 1140|0);
 $845 = (($this) + 1136|0);
 $846 = (($this) + 1152|0);
 $847 = (($this) + 1148|0);
 $848 = (($this) + 1144|0);
 $849 = (($this) + 1160|0);
 $850 = (($this) + 102576|0);
 $851 = (($this) + 102580|0);
 $852 = (($this) + 1156|0);
 $853 = (($this) + 1172|0);
 $854 = (($this) + 1168|0);
 $855 = (($this) + 1164|0);
 $856 = (($this) + 1180|0);
 $857 = (($this) + 1184|0);
 $858 = (($this) + 1176|0);
 $859 = (($this) + 1192|0);
 $860 = (($this) + 1196|0);
 $861 = (($this) + 1188|0);
 $862 = (($this) + 1204|0);
 $863 = (($this) + 1208|0);
 $864 = (($this) + 1200|0);
 $865 = (($this) + 1216|0);
 $866 = (($this) + 1212|0);
 $867 = (($this) + 1228|0);
 $868 = (($this) + 1224|0);
 $869 = (($this) + 1220|0);
 $870 = (($this) + 1232|0);
 $871 = (($this) + 1244|0);
 $872 = (($this) + 1236|0);
 $873 = (($this) + 1240|0);
 $874 = (($this) + 1256|0);
 $875 = (($this) + 1252|0);
 $876 = (($this) + 1248|0);
 $877 = (($this) + 1264|0);
 $878 = (($this) + 1268|0);
 $879 = (($this) + 1260|0);
 $880 = (($this) + 1276|0);
 $881 = (($this) + 1280|0);
 $882 = (($this) + 1272|0);
 $883 = (($this) + 1288|0);
 $884 = (($this) + 1284|0);
 $885 = (($this) + 1300|0);
 $886 = (($this) + 1296|0);
 $887 = (($this) + 1292|0);
 $888 = (($this) + 1304|0);
 $889 = (($this) + 1316|0);
 $890 = (($this) + 1308|0);
 $891 = (($this) + 1312|0);
 $892 = (($this) + 1328|0);
 $893 = (($this) + 1324|0);
 $894 = (($this) + 1320|0);
 $895 = (($this) + 1336|0);
 $896 = (($this) + 1340|0);
 $897 = (($this) + 1332|0);
 $898 = (($this) + 1348|0);
 $899 = (($this) + 1344|0);
 $900 = (($this) + 1360|0);
 $901 = (($this) + 1356|0);
 $902 = (($this) + 1352|0);
 $903 = (($this) + 1364|0);
 $904 = (($this) + 1376|0);
 $905 = (($this) + 1368|0);
 $906 = (($this) + 1372|0);
 $907 = (($this) + 1388|0);
 $908 = (($this) + 1384|0);
 $909 = (($this) + 1380|0);
 $910 = (($this) + 1396|0);
 $911 = (($this) + 1392|0);
 $912 = (($this) + 1408|0);
 $913 = (($this) + 1404|0);
 $914 = (($this) + 1400|0);
 $915 = (($this) + 1416|0);
 $916 = (($this) + 364816|0);
 $917 = (($this) + 364820|0);
 $918 = (($this) + 1412|0);
 $919 = (($this) + 1428|0);
 $920 = (($this) + 1424|0);
 $921 = (($this) + 1420|0);
 $922 = (($this) + 1436|0);
 $923 = (($this) + 1440|0);
 $924 = (($this) + 1432|0);
 $925 = (($this) + 1448|0);
 $926 = (($this) + 1452|0);
 $927 = (($this) + 1444|0);
 $928 = (($this) + 1460|0);
 $929 = (($this) + 1464|0);
 $930 = (($this) + 1456|0);
 $931 = (($this) + 1472|0);
 $932 = (($this) + 1468|0);
 $933 = (($this) + 1484|0);
 $934 = (($this) + 1480|0);
 $935 = (($this) + 1476|0);
 $936 = (($this) + 1488|0);
 $937 = (($this) + 1500|0);
 $938 = (($this) + 1492|0);
 $939 = (($this) + 1496|0);
 $940 = (($this) + 1512|0);
 $941 = (($this) + 1508|0);
 $942 = (($this) + 1504|0);
 $943 = (($this) + 1520|0);
 $944 = (($this) + 1524|0);
 $945 = (($this) + 1516|0);
 $946 = (($this) + 1532|0);
 $947 = (($this) + 1536|0);
 $948 = (($this) + 1528|0);
 $949 = (($this) + 1544|0);
 $950 = (($this) + 1540|0);
 $951 = (($this) + 1556|0);
 $952 = (($this) + 1552|0);
 $953 = (($this) + 1548|0);
 $954 = (($this) + 1560|0);
 $955 = (($this) + 1572|0);
 $956 = (($this) + 1564|0);
 $957 = (($this) + 1568|0);
 $958 = (($this) + 1584|0);
 $959 = (($this) + 1580|0);
 $960 = (($this) + 1576|0);
 $961 = (($this) + 1592|0);
 $962 = (($this) + 1596|0);
 $963 = (($this) + 1588|0);
 $964 = (($this) + 1604|0);
 $965 = (($this) + 1600|0);
 $966 = (($this) + 1616|0);
 $967 = (($this) + 1612|0);
 $968 = (($this) + 1608|0);
 $969 = (($this) + 1620|0);
 $970 = (($this) + 1632|0);
 $971 = (($this) + 1624|0);
 $972 = (($this) + 1628|0);
 $973 = (($this) + 1644|0);
 $974 = (($this) + 1640|0);
 $975 = (($this) + 1636|0);
 $976 = (($this) + 1652|0);
 $977 = (($this) + 1648|0);
 $978 = (($this) + 1664|0);
 $979 = (($this) + 1660|0);
 $980 = (($this) + 1656|0);
 $981 = (($this) + 1672|0);
 $982 = (($this) + 233696|0);
 $983 = (($this) + 233700|0);
 $984 = (($this) + 1668|0);
 $985 = (($this) + 1684|0);
 $986 = (($this) + 1680|0);
 $987 = (($this) + 1676|0);
 $988 = (($this) + 1692|0);
 $989 = (($this) + 1696|0);
 $990 = (($this) + 1688|0);
 $991 = (($this) + 1704|0);
 $992 = (($this) + 1708|0);
 $993 = (($this) + 1700|0);
 $994 = (($this) + 1716|0);
 $995 = (($this) + 1720|0);
 $996 = (($this) + 1712|0);
 $997 = (($this) + 1728|0);
 $998 = (($this) + 1724|0);
 $999 = (($this) + 1740|0);
 $1000 = (($this) + 1736|0);
 $1001 = (($this) + 1732|0);
 $1002 = (($this) + 1744|0);
 $1003 = (($this) + 1756|0);
 $1004 = (($this) + 1748|0);
 $1005 = (($this) + 1752|0);
 $1006 = (($this) + 1768|0);
 $1007 = (($this) + 1764|0);
 $1008 = (($this) + 1760|0);
 $1009 = (($this) + 1776|0);
 $1010 = (($this) + 1780|0);
 $1011 = (($this) + 1772|0);
 $1012 = (($this) + 1788|0);
 $1013 = (($this) + 1792|0);
 $1014 = (($this) + 1784|0);
 $1015 = (($this) + 1800|0);
 $1016 = (($this) + 1796|0);
 $1017 = (($this) + 1812|0);
 $1018 = (($this) + 1808|0);
 $1019 = (($this) + 1804|0);
 $1020 = (($this) + 1816|0);
 $1021 = (($this) + 1828|0);
 $1022 = (($this) + 1820|0);
 $1023 = (($this) + 1824|0);
 $1024 = (($this) + 1840|0);
 $1025 = (($this) + 1836|0);
 $1026 = (($this) + 1832|0);
 $1027 = (($this) + 1848|0);
 $1028 = (($this) + 1852|0);
 $1029 = (($this) + 1844|0);
 $1030 = (($this) + 1860|0);
 $1031 = (($this) + 1856|0);
 $1032 = (($this) + 1872|0);
 $1033 = (($this) + 1868|0);
 $1034 = (($this) + 1864|0);
 $1035 = (($this) + 1876|0);
 $1036 = (($this) + 1888|0);
 $1037 = (($this) + 1880|0);
 $1038 = (($this) + 1884|0);
 $1039 = (($this) + 1900|0);
 $1040 = (($this) + 1896|0);
 $1041 = (($this) + 1892|0);
 $1042 = (($this) + 1908|0);
 $1043 = (($this) + 1904|0);
 $1044 = (($this) + 1920|0);
 $1045 = (($this) + 1916|0);
 $1046 = (($this) + 1912|0);
 $1047 = (($this) + 1928|0);
 $1048 = (($this) + 495936|0);
 $1049 = (($this) + 495940|0);
 $1050 = (($this) + 1924|0);
 $1051 = (($this) + 1940|0);
 $1052 = (($this) + 1936|0);
 $1053 = (($this) + 1932|0);
 $1054 = (($this) + 1948|0);
 $1055 = (($this) + 1952|0);
 $1056 = (($this) + 1944|0);
 $1057 = (($this) + 1960|0);
 $1058 = (($this) + 1964|0);
 $1059 = (($this) + 1956|0);
 $1060 = (($this) + 1972|0);
 $1061 = (($this) + 1976|0);
 $1062 = (($this) + 1968|0);
 $1063 = (($this) + 1984|0);
 $1064 = (($this) + 1980|0);
 $1065 = (($this) + 1996|0);
 $1066 = (($this) + 1992|0);
 $1067 = (($this) + 1988|0);
 $1068 = (($this) + 2000|0);
 $1069 = (($this) + 2012|0);
 $1070 = (($this) + 2004|0);
 $1071 = (($this) + 2008|0);
 $1072 = (($this) + 2024|0);
 $1073 = (($this) + 2020|0);
 $1074 = (($this) + 2016|0);
 $1075 = (($this) + 2032|0);
 $1076 = (($this) + 2036|0);
 $1077 = (($this) + 2028|0);
 $1078 = (($this) + 2044|0);
 $1079 = (($this) + 2048|0);
 $1080 = (($this) + 2040|0);
 $1081 = (($this) + 2056|0);
 $1082 = (($this) + 2052|0);
 $1083 = (($this) + 2068|0);
 $1084 = (($this) + 2064|0);
 $1085 = (($this) + 2060|0);
 $1086 = (($this) + 2072|0);
 $1087 = (($this) + 2084|0);
 $1088 = (($this) + 2076|0);
 $1089 = (($this) + 2080|0);
 $1090 = (($this) + 2096|0);
 $1091 = (($this) + 2092|0);
 $1092 = (($this) + 2088|0);
 $1093 = (($this) + 2104|0);
 $1094 = (($this) + 2108|0);
 $1095 = (($this) + 2100|0);
 $1096 = (($this) + 2116|0);
 $1097 = (($this) + 2112|0);
 $1098 = (($this) + 2128|0);
 $1099 = (($this) + 2124|0);
 $1100 = (($this) + 2120|0);
 $1101 = (($this) + 2132|0);
 $1102 = (($this) + 2144|0);
 $1103 = (($this) + 2136|0);
 $1104 = (($this) + 2140|0);
 $1105 = (($this) + 2156|0);
 $1106 = (($this) + 2152|0);
 $1107 = (($this) + 2148|0);
 $1108 = (($this) + 2164|0);
 $1109 = (($this) + 2160|0);
 $1110 = (($this) + 2176|0);
 $1111 = (($this) + 2172|0);
 $1112 = (($this) + 2168|0);
 $1113 = (($this) + 2184|0);
 $1114 = (($this) + 69796|0);
 $1115 = (($this) + 69800|0);
 $1116 = (($this) + 2180|0);
 $1117 = (($this) + 2196|0);
 $1118 = (($this) + 2192|0);
 $1119 = (($this) + 2188|0);
 $1120 = (($this) + 2204|0);
 $1121 = (($this) + 2208|0);
 $1122 = (($this) + 2200|0);
 $1123 = (($this) + 2216|0);
 $1124 = (($this) + 2220|0);
 $1125 = (($this) + 2212|0);
 $1126 = (($this) + 2228|0);
 $1127 = (($this) + 2232|0);
 $1128 = (($this) + 2224|0);
 $1129 = (($this) + 2240|0);
 $1130 = (($this) + 2236|0);
 $1131 = (($this) + 2252|0);
 $1132 = (($this) + 2248|0);
 $1133 = (($this) + 2244|0);
 $1134 = (($this) + 2256|0);
 $1135 = (($this) + 2268|0);
 $1136 = (($this) + 2260|0);
 $1137 = (($this) + 2264|0);
 $1138 = (($this) + 2280|0);
 $1139 = (($this) + 2276|0);
 $1140 = (($this) + 2272|0);
 $1141 = (($this) + 2288|0);
 $1142 = (($this) + 2292|0);
 $1143 = (($this) + 2284|0);
 $1144 = (($this) + 2300|0);
 $1145 = (($this) + 2304|0);
 $1146 = (($this) + 2296|0);
 $1147 = (($this) + 2312|0);
 $1148 = (($this) + 2308|0);
 $1149 = (($this) + 2324|0);
 $1150 = (($this) + 2320|0);
 $1151 = (($this) + 2316|0);
 $1152 = (($this) + 2328|0);
 $1153 = (($this) + 2340|0);
 $1154 = (($this) + 2332|0);
 $1155 = (($this) + 2336|0);
 $1156 = (($this) + 2352|0);
 $1157 = (($this) + 2348|0);
 $1158 = (($this) + 2344|0);
 $1159 = (($this) + 2360|0);
 $1160 = (($this) + 2364|0);
 $1161 = (($this) + 2356|0);
 $1162 = (($this) + 2372|0);
 $1163 = (($this) + 2368|0);
 $1164 = (($this) + 2384|0);
 $1165 = (($this) + 2380|0);
 $1166 = (($this) + 2376|0);
 $1167 = (($this) + 2388|0);
 $1168 = (($this) + 2400|0);
 $1169 = (($this) + 2392|0);
 $1170 = (($this) + 2396|0);
 $1171 = (($this) + 2412|0);
 $1172 = (($this) + 2408|0);
 $1173 = (($this) + 2404|0);
 $1174 = (($this) + 2420|0);
 $1175 = (($this) + 2416|0);
 $1176 = (($this) + 2432|0);
 $1177 = (($this) + 2428|0);
 $1178 = (($this) + 2424|0);
 $1179 = (($this) + 2440|0);
 $1180 = (($this) + 332036|0);
 $1181 = (($this) + 332040|0);
 $1182 = (($this) + 2436|0);
 $1183 = (($this) + 2452|0);
 $1184 = (($this) + 2448|0);
 $1185 = (($this) + 2444|0);
 $1186 = (($this) + 2460|0);
 $1187 = (($this) + 2464|0);
 $1188 = (($this) + 2456|0);
 $1189 = (($this) + 2472|0);
 $1190 = (($this) + 2476|0);
 $1191 = (($this) + 2468|0);
 $1192 = (($this) + 2484|0);
 $1193 = (($this) + 2488|0);
 $1194 = (($this) + 2480|0);
 $1195 = (($this) + 2496|0);
 $1196 = (($this) + 2492|0);
 $1197 = (($this) + 2508|0);
 $1198 = (($this) + 2504|0);
 $1199 = (($this) + 2500|0);
 $1200 = (($this) + 2512|0);
 $1201 = (($this) + 2524|0);
 $1202 = (($this) + 2516|0);
 $1203 = (($this) + 2520|0);
 $1204 = (($this) + 2536|0);
 $1205 = (($this) + 2532|0);
 $1206 = (($this) + 2528|0);
 $1207 = (($this) + 2544|0);
 $1208 = (($this) + 2548|0);
 $1209 = (($this) + 2540|0);
 $1210 = (($this) + 2556|0);
 $1211 = (($this) + 2560|0);
 $1212 = (($this) + 2552|0);
 $1213 = (($this) + 2568|0);
 $1214 = (($this) + 2564|0);
 $1215 = (($this) + 2580|0);
 $1216 = (($this) + 2576|0);
 $1217 = (($this) + 2572|0);
 $1218 = (($this) + 2584|0);
 $1219 = (($this) + 2596|0);
 $1220 = (($this) + 2588|0);
 $1221 = (($this) + 2592|0);
 $1222 = (($this) + 2608|0);
 $1223 = (($this) + 2604|0);
 $1224 = (($this) + 2600|0);
 $1225 = (($this) + 2616|0);
 $1226 = (($this) + 2620|0);
 $1227 = (($this) + 2612|0);
 $1228 = (($this) + 2628|0);
 $1229 = (($this) + 2624|0);
 $1230 = (($this) + 2640|0);
 $1231 = (($this) + 2636|0);
 $1232 = (($this) + 2632|0);
 $1233 = (($this) + 2644|0);
 $1234 = (($this) + 2656|0);
 $1235 = (($this) + 2648|0);
 $1236 = (($this) + 2652|0);
 $1237 = (($this) + 2668|0);
 $1238 = (($this) + 2664|0);
 $1239 = (($this) + 2660|0);
 $1240 = (($this) + 2676|0);
 $1241 = (($this) + 2672|0);
 $1242 = (($this) + 2688|0);
 $1243 = (($this) + 2684|0);
 $1244 = (($this) + 2680|0);
 $1245 = (($this) + 2696|0);
 $1246 = (($this) + 200916|0);
 $1247 = (($this) + 200920|0);
 $1248 = (($this) + 2692|0);
 $1249 = (($this) + 2708|0);
 $1250 = (($this) + 2704|0);
 $1251 = (($this) + 2700|0);
 $1252 = (($this) + 2716|0);
 $1253 = (($this) + 2720|0);
 $1254 = (($this) + 2712|0);
 $1255 = (($this) + 2728|0);
 $1256 = (($this) + 2732|0);
 $1257 = (($this) + 2724|0);
 $1258 = (($this) + 2740|0);
 $1259 = (($this) + 2744|0);
 $1260 = (($this) + 2736|0);
 $1261 = (($this) + 2752|0);
 $1262 = (($this) + 2748|0);
 $1263 = (($this) + 2764|0);
 $1264 = (($this) + 2760|0);
 $1265 = (($this) + 2756|0);
 $1266 = (($this) + 2768|0);
 $1267 = (($this) + 2780|0);
 $1268 = (($this) + 2772|0);
 $1269 = (($this) + 2776|0);
 $1270 = (($this) + 2792|0);
 $1271 = (($this) + 2788|0);
 $1272 = (($this) + 2784|0);
 $1273 = (($this) + 2800|0);
 $1274 = (($this) + 2804|0);
 $1275 = (($this) + 2796|0);
 $1276 = (($this) + 2812|0);
 $1277 = (($this) + 2816|0);
 $1278 = (($this) + 2808|0);
 $1279 = (($this) + 2824|0);
 $1280 = (($this) + 2820|0);
 $1281 = (($this) + 2836|0);
 $1282 = (($this) + 2832|0);
 $1283 = (($this) + 2828|0);
 $1284 = (($this) + 2840|0);
 $1285 = (($this) + 2852|0);
 $1286 = (($this) + 2844|0);
 $1287 = (($this) + 2848|0);
 $1288 = (($this) + 2864|0);
 $1289 = (($this) + 2860|0);
 $1290 = (($this) + 2856|0);
 $1291 = (($this) + 2872|0);
 $1292 = (($this) + 2876|0);
 $1293 = (($this) + 2868|0);
 $1294 = (($this) + 2884|0);
 $1295 = (($this) + 2880|0);
 $1296 = (($this) + 2896|0);
 $1297 = (($this) + 2892|0);
 $1298 = (($this) + 2888|0);
 $1299 = (($this) + 2900|0);
 $1300 = (($this) + 2912|0);
 $1301 = (($this) + 2904|0);
 $1302 = (($this) + 2908|0);
 $1303 = (($this) + 2924|0);
 $1304 = (($this) + 2920|0);
 $1305 = (($this) + 2916|0);
 $1306 = (($this) + 2932|0);
 $1307 = (($this) + 2928|0);
 $1308 = (($this) + 2944|0);
 $1309 = (($this) + 2940|0);
 $1310 = (($this) + 2936|0);
 $1311 = (($this) + 2952|0);
 $1312 = (($this) + 463156|0);
 $1313 = (($this) + 463160|0);
 $1314 = (($this) + 2948|0);
 $1315 = (($this) + 2964|0);
 $1316 = (($this) + 2960|0);
 $1317 = (($this) + 2956|0);
 $1318 = (($this) + 2972|0);
 $1319 = (($this) + 2976|0);
 $1320 = (($this) + 2968|0);
 $1321 = (($this) + 2984|0);
 $1322 = (($this) + 2988|0);
 $1323 = (($this) + 2980|0);
 $1324 = (($this) + 2996|0);
 $1325 = (($this) + 3000|0);
 $1326 = (($this) + 2992|0);
 $1327 = (($this) + 3008|0);
 $1328 = (($this) + 3004|0);
 $1329 = (($this) + 3020|0);
 $1330 = (($this) + 3016|0);
 $1331 = (($this) + 3012|0);
 $1332 = (($this) + 3024|0);
 $1333 = (($this) + 3036|0);
 $1334 = (($this) + 3028|0);
 $1335 = (($this) + 3032|0);
 $1336 = (($this) + 3048|0);
 $1337 = (($this) + 3044|0);
 $1338 = (($this) + 3040|0);
 $1339 = (($this) + 3056|0);
 $1340 = (($this) + 3060|0);
 $1341 = (($this) + 3052|0);
 $1342 = (($this) + 3068|0);
 $1343 = (($this) + 3072|0);
 $1344 = (($this) + 3064|0);
 $1345 = (($this) + 3080|0);
 $1346 = (($this) + 3076|0);
 $1347 = (($this) + 3092|0);
 $1348 = (($this) + 3088|0);
 $1349 = (($this) + 3084|0);
 $1350 = (($this) + 3096|0);
 $1351 = (($this) + 3108|0);
 $1352 = (($this) + 3100|0);
 $1353 = (($this) + 3104|0);
 $1354 = (($this) + 3120|0);
 $1355 = (($this) + 3116|0);
 $1356 = (($this) + 3112|0);
 $1357 = (($this) + 3128|0);
 $1358 = (($this) + 3132|0);
 $1359 = (($this) + 3124|0);
 $1360 = (($this) + 3140|0);
 $1361 = (($this) + 3136|0);
 $1362 = (($this) + 3152|0);
 $1363 = (($this) + 3148|0);
 $1364 = (($this) + 3144|0);
 $1365 = (($this) + 3156|0);
 $1366 = (($this) + 3168|0);
 $1367 = (($this) + 3160|0);
 $1368 = (($this) + 3164|0);
 $1369 = (($this) + 3180|0);
 $1370 = (($this) + 3176|0);
 $1371 = (($this) + 3172|0);
 $1372 = (($this) + 3188|0);
 $1373 = (($this) + 3184|0);
 $1374 = (($this) + 3200|0);
 $1375 = (($this) + 3196|0);
 $1376 = (($this) + 3192|0);
 $1377 = (($this) + 3208|0);
 $1378 = (($this) + 135356|0);
 $1379 = (($this) + 135360|0);
 $1380 = (($this) + 3204|0);
 $1381 = (($this) + 3220|0);
 $1382 = (($this) + 3216|0);
 $1383 = (($this) + 3212|0);
 $1384 = (($this) + 3228|0);
 $1385 = (($this) + 3232|0);
 $1386 = (($this) + 3224|0);
 $1387 = (($this) + 3240|0);
 $1388 = (($this) + 3244|0);
 $1389 = (($this) + 3236|0);
 $1390 = (($this) + 3252|0);
 $1391 = (($this) + 3256|0);
 $1392 = (($this) + 3248|0);
 $1393 = (($this) + 3264|0);
 $1394 = (($this) + 3260|0);
 $1395 = (($this) + 3276|0);
 $1396 = (($this) + 3272|0);
 $1397 = (($this) + 3268|0);
 $1398 = (($this) + 3280|0);
 $1399 = (($this) + 3292|0);
 $1400 = (($this) + 3284|0);
 $1401 = (($this) + 3288|0);
 $1402 = (($this) + 3304|0);
 $1403 = (($this) + 3300|0);
 $1404 = (($this) + 3296|0);
 $1405 = (($this) + 3312|0);
 $1406 = (($this) + 3316|0);
 $1407 = (($this) + 3308|0);
 $1408 = (($this) + 3324|0);
 $1409 = (($this) + 3328|0);
 $1410 = (($this) + 3320|0);
 $1411 = (($this) + 3336|0);
 $1412 = (($this) + 3332|0);
 $1413 = (($this) + 3348|0);
 $1414 = (($this) + 3344|0);
 $1415 = (($this) + 3340|0);
 $1416 = (($this) + 3352|0);
 $1417 = (($this) + 3364|0);
 $1418 = (($this) + 3356|0);
 $1419 = (($this) + 3360|0);
 $1420 = (($this) + 3376|0);
 $1421 = (($this) + 3372|0);
 $1422 = (($this) + 3368|0);
 $1423 = (($this) + 3384|0);
 $1424 = (($this) + 3388|0);
 $1425 = (($this) + 3380|0);
 $1426 = (($this) + 3396|0);
 $1427 = (($this) + 3392|0);
 $1428 = (($this) + 3408|0);
 $1429 = (($this) + 3404|0);
 $1430 = (($this) + 3400|0);
 $1431 = (($this) + 3412|0);
 $1432 = (($this) + 3424|0);
 $1433 = (($this) + 3416|0);
 $1434 = (($this) + 3420|0);
 $1435 = (($this) + 3436|0);
 $1436 = (($this) + 3432|0);
 $1437 = (($this) + 3428|0);
 $1438 = (($this) + 3444|0);
 $1439 = (($this) + 3440|0);
 $1440 = (($this) + 3456|0);
 $1441 = (($this) + 3452|0);
 $1442 = (($this) + 3448|0);
 $1443 = (($this) + 3464|0);
 $1444 = (($this) + 397596|0);
 $1445 = (($this) + 397600|0);
 $1446 = (($this) + 3460|0);
 $1447 = (($this) + 3476|0);
 $1448 = (($this) + 3472|0);
 $1449 = (($this) + 3468|0);
 $1450 = (($this) + 3484|0);
 $1451 = (($this) + 3488|0);
 $1452 = (($this) + 3480|0);
 $1453 = (($this) + 3496|0);
 $1454 = (($this) + 3500|0);
 $1455 = (($this) + 3492|0);
 $1456 = (($this) + 3508|0);
 $1457 = (($this) + 3512|0);
 $1458 = (($this) + 3504|0);
 $1459 = (($this) + 3520|0);
 $1460 = (($this) + 3516|0);
 $1461 = (($this) + 3532|0);
 $1462 = (($this) + 3528|0);
 $1463 = (($this) + 3524|0);
 $1464 = (($this) + 3536|0);
 $1465 = (($this) + 3548|0);
 $1466 = (($this) + 3540|0);
 $1467 = (($this) + 3544|0);
 $1468 = (($this) + 3560|0);
 $1469 = (($this) + 3556|0);
 $1470 = (($this) + 3552|0);
 $1471 = (($this) + 3568|0);
 $1472 = (($this) + 3572|0);
 $1473 = (($this) + 3564|0);
 $1474 = (($this) + 3580|0);
 $1475 = (($this) + 3584|0);
 $1476 = (($this) + 3576|0);
 $1477 = (($this) + 3592|0);
 $1478 = (($this) + 3588|0);
 $1479 = (($this) + 3604|0);
 $1480 = (($this) + 3600|0);
 $1481 = (($this) + 3596|0);
 $1482 = (($this) + 3608|0);
 $1483 = (($this) + 3620|0);
 $1484 = (($this) + 3612|0);
 $1485 = (($this) + 3616|0);
 $1486 = (($this) + 3632|0);
 $1487 = (($this) + 3628|0);
 $1488 = (($this) + 3624|0);
 $1489 = (($this) + 3640|0);
 $1490 = (($this) + 3644|0);
 $1491 = (($this) + 3636|0);
 $1492 = (($this) + 3652|0);
 $1493 = (($this) + 3648|0);
 $1494 = (($this) + 3664|0);
 $1495 = (($this) + 3660|0);
 $1496 = (($this) + 3656|0);
 $1497 = (($this) + 3668|0);
 $1498 = (($this) + 3680|0);
 $1499 = (($this) + 3672|0);
 $1500 = (($this) + 3676|0);
 $1501 = (($this) + 3692|0);
 $1502 = (($this) + 3688|0);
 $1503 = (($this) + 3684|0);
 $1504 = (($this) + 3700|0);
 $1505 = (($this) + 3696|0);
 $1506 = (($this) + 3712|0);
 $1507 = (($this) + 3708|0);
 $1508 = (($this) + 3704|0);
 $1509 = (($this) + 3720|0);
 $1510 = (($this) + 266476|0);
 $1511 = (($this) + 266480|0);
 $1512 = (($this) + 3716|0);
 $1513 = (($this) + 3732|0);
 $1514 = (($this) + 3728|0);
 $1515 = (($this) + 3724|0);
 $1516 = (($this) + 3740|0);
 $1517 = (($this) + 3744|0);
 $1518 = (($this) + 3736|0);
 $1519 = (($this) + 3752|0);
 $1520 = (($this) + 3756|0);
 $1521 = (($this) + 3748|0);
 $1522 = (($this) + 3764|0);
 $1523 = (($this) + 3768|0);
 $1524 = (($this) + 3760|0);
 $1525 = (($this) + 3776|0);
 $1526 = (($this) + 3772|0);
 $1527 = (($this) + 3788|0);
 $1528 = (($this) + 3784|0);
 $1529 = (($this) + 3780|0);
 $1530 = (($this) + 3792|0);
 $1531 = (($this) + 3804|0);
 $1532 = (($this) + 3796|0);
 $1533 = (($this) + 3800|0);
 $1534 = (($this) + 3816|0);
 $1535 = (($this) + 3812|0);
 $1536 = (($this) + 3808|0);
 $1537 = (($this) + 3824|0);
 $1538 = (($this) + 3828|0);
 $1539 = (($this) + 3820|0);
 $1540 = (($this) + 3836|0);
 $1541 = (($this) + 3840|0);
 $1542 = (($this) + 3832|0);
 $1543 = (($this) + 3848|0);
 $1544 = (($this) + 3844|0);
 $1545 = (($this) + 3860|0);
 $1546 = (($this) + 3856|0);
 $1547 = (($this) + 3852|0);
 $1548 = (($this) + 3864|0);
 $1549 = (($this) + 3876|0);
 $1550 = (($this) + 3868|0);
 $1551 = (($this) + 3872|0);
 $1552 = (($this) + 3888|0);
 $1553 = (($this) + 3884|0);
 $1554 = (($this) + 3880|0);
 $1555 = (($this) + 3896|0);
 $1556 = (($this) + 3900|0);
 $1557 = (($this) + 3892|0);
 $1558 = (($this) + 3908|0);
 $1559 = (($this) + 3904|0);
 $1560 = (($this) + 3920|0);
 $1561 = (($this) + 3916|0);
 $1562 = (($this) + 3912|0);
 $1563 = (($this) + 3924|0);
 $1564 = (($this) + 3936|0);
 $1565 = (($this) + 3928|0);
 $1566 = (($this) + 3932|0);
 $1567 = (($this) + 3948|0);
 $1568 = (($this) + 3944|0);
 $1569 = (($this) + 3940|0);
 $1570 = (($this) + 3956|0);
 $1571 = (($this) + 3952|0);
 $1572 = (($this) + 3968|0);
 $1573 = (($this) + 3964|0);
 $1574 = (($this) + 3960|0);
 $1575 = (($this) + 3976|0);
 $1576 = (($this) + 528716|0);
 $1577 = (($this) + 528720|0);
 $1578 = (($this) + 3972|0);
 $1579 = (($this) + 3988|0);
 $1580 = (($this) + 3984|0);
 $1581 = (($this) + 3980|0);
 $1582 = (($this) + 3996|0);
 $1583 = (($this) + 4000|0);
 $1584 = (($this) + 3992|0);
 $1585 = (($this) + 4008|0);
 $1586 = (($this) + 4012|0);
 $1587 = (($this) + 4004|0);
 $1588 = (($this) + 4020|0);
 $1589 = (($this) + 4024|0);
 $1590 = (($this) + 4016|0);
 $1591 = (($this) + 4032|0);
 $1592 = (($this) + 4028|0);
 $1593 = (($this) + 4044|0);
 $1594 = (($this) + 4040|0);
 $1595 = (($this) + 4036|0);
 $1596 = (($this) + 4048|0);
 $1597 = (($this) + 4060|0);
 $1598 = (($this) + 4052|0);
 $1599 = (($this) + 4056|0);
 $1600 = (($this) + 4072|0);
 $1601 = (($this) + 4068|0);
 $1602 = (($this) + 4064|0);
 $1603 = (($this) + 4080|0);
 $1604 = (($this) + 4084|0);
 $1605 = (($this) + 4076|0);
 $1606 = (($this) + 4092|0);
 $1607 = (($this) + 4096|0);
 $1608 = (($this) + 4088|0);
 $1609 = (($this) + 4104|0);
 $1610 = (($this) + 4100|0);
 $1611 = (($this) + 4116|0);
 $1612 = (($this) + 4112|0);
 $1613 = (($this) + 4108|0);
 $1614 = (($this) + 4120|0);
 $1615 = (($this) + 4132|0);
 $1616 = (($this) + 4124|0);
 $1617 = (($this) + 4128|0);
 $1618 = (($this) + 4144|0);
 $1619 = (($this) + 4140|0);
 $1620 = (($this) + 4136|0);
 $1621 = (($this) + 4152|0);
 $1622 = (($this) + 4156|0);
 $1623 = (($this) + 4148|0);
 $1624 = (($this) + 4164|0);
 $1625 = (($this) + 4160|0);
 $1626 = (($this) + 4176|0);
 $1627 = (($this) + 4172|0);
 $1628 = (($this) + 4168|0);
 $1629 = (($this) + 4180|0);
 $1630 = (($this) + 4192|0);
 $1631 = (($this) + 4184|0);
 $1632 = (($this) + 4188|0);
 $1633 = (($this) + 4204|0);
 $1634 = (($this) + 4200|0);
 $1635 = (($this) + 4196|0);
 $1636 = (($this) + 4212|0);
 $1637 = (($this) + 4208|0);
 $1638 = (($this) + 4224|0);
 $1639 = (($this) + 4220|0);
 $1640 = (($this) + 4216|0);
 $1641 = (($this) + 4228|0);
 $1642 = (($this) + 37000|0);
 $1643 = (($this) + 37016|0);
 $1644 = (($this) + 37020|0);
 $1645 = (($this) + 69792|0);
 $1646 = (($this) + 102572|0);
 $1647 = (($this) + 135352|0);
 $1648 = (($this) + 168132|0);
 $1649 = (($this) + 200912|0);
 $1650 = (($this) + 233692|0);
 $1651 = (($this) + 266472|0);
 $1652 = (($this) + 299252|0);
 $1653 = (($this) + 332032|0);
 $1654 = (($this) + 364812|0);
 $1655 = (($this) + 397592|0);
 $1656 = (($this) + 430372|0);
 $1657 = (($this) + 463152|0);
 $1658 = (($this) + 495932|0);
 $1659 = (($this) + 528712|0);
 $1660 = (($this) + 32|0);
 $i$02 = 0;
 while(1) {
  $1661 = HEAP32[$575>>2]|0;
  $1662 = Math_imul($1661, 1103515245)|0;
  $1663 = (($1662) + 12345)|0;
  HEAP32[$576>>2] = $1663;
  $1664 = +HEAPF32[$577>>2];
  $1665 = $1664 * 0.522189378738403320313;
  $1666 = (+($1663|0));
  $1667 = $1666 * 4.65661287307739257813E-10;
  $1668 = +HEAPF32[$578>>2];
  $1669 = $1668 * 2.49495601654052734375;
  $1670 = $1669 + $1667;
  $1671 = $1665 + $1670;
  $1672 = +HEAPF32[$579>>2];
  $1673 = $1672 * 2.01726579666137695313;
  $1674 = $1671 - $1673;
  HEAPF32[$580>>2] = $1674;
  $1675 = $1674 * 0.049922034144401550293;
  $1676 = +HEAPF32[$579>>2];
  $1677 = $1676 * 0.0506126992404460906982;
  $1678 = $1677 + $1675;
  $1679 = +HEAPF32[$578>>2];
  $1680 = $1679 * 0.0959935337305068969727;
  $1681 = +HEAPF32[$577>>2];
  $1682 = $1681 * 0.00440878607332706451416;
  $1683 = $1680 + $1682;
  $1684 = $1678 - $1683;
  $1685 = $6 * $1684;
  HEAPF32[$581>>2] = $8;
  $1686 = +HEAPF32[$582>>2];
  $1687 = $8 - $1686;
  $1688 = $1687 > 0.0;
  $1689 = $1688&1;
  $1690 = (($568) + ($i$02<<2)|0);
  $1691 = +HEAPF32[$1690>>2];
  $1692 = $11 * $1691;
  HEAPF32[$583>>2] = $13;
  $1693 = +HEAPF32[$584>>2];
  $1694 = $13 - $1693;
  $1695 = $1694 > 0.0;
  $1696 = $1695&1;
  $1697 = +HEAPF32[$585>>2];
  $1698 = $55 * $1697;
  $1699 = +HEAPF32[$586>>2];
  $1700 = $46 * $1699;
  $1701 = +HEAPF32[$587>>2];
  $1702 = $57 * $1701;
  $1703 = $1700 + $1702;
  $1704 = $56 * $1703;
  $1705 = $1698 + $1704;
  HEAPF32[$588>>2] = $1705;
  $1706 = +HEAPF32[$589>>2];
  $1707 = $60 * $1706;
  $1708 = +HEAPF32[$590>>2];
  $1709 = $62 * $1708;
  $1710 = $1707 + $1709;
  $1711 = $50 * $1710;
  $1712 = $1705 - $1711;
  HEAPF32[$591>>2] = $1712;
  $1713 = +HEAPF32[$592>>2];
  $1714 = $77 * $1713;
  $1715 = $52 * $1712;
  $1716 = +HEAPF32[$590>>2];
  $1717 = $64 * $1716;
  $1718 = $1717 + $1715;
  $1719 = +HEAPF32[$589>>2];
  $1720 = $52 * $1719;
  $1721 = $1720 + $1718;
  $1722 = $50 * $1721;
  $1723 = +HEAPF32[$593>>2];
  $1724 = $80 * $1723;
  $1725 = $1714 + $1724;
  $1726 = $73 * $1725;
  $1727 = $1722 - $1726;
  HEAPF32[$594>>2] = $1727;
  $1728 = +HEAPF32[$595>>2];
  $1729 = $96 * $1728;
  $1730 = +HEAPF32[$593>>2];
  $1731 = $80 * $1727;
  $1732 = $1714 + $1731;
  $1733 = $73 * $1732;
  $1734 = $1730 + $1733;
  $1735 = +HEAPF32[$596>>2];
  $1736 = $92 * $1735;
  $1737 = $1729 + $1736;
  $1738 = $89 * $1737;
  $1739 = $1734 - $1738;
  HEAPF32[$597>>2] = $1739;
  $1740 = +HEAPF32[$598>>2];
  $1741 = $109 * $1740;
  $1742 = +HEAPF32[$596>>2];
  $1743 = $92 * $1739;
  $1744 = $1729 + $1743;
  $1745 = $89 * $1744;
  $1746 = $1742 + $1745;
  $1747 = +HEAPF32[$599>>2];
  $1748 = $112 * $1747;
  $1749 = $1741 + $1748;
  $1750 = $105 * $1749;
  $1751 = $1746 - $1750;
  HEAPF32[$600>>2] = $1751;
  $1752 = +HEAPF32[$601>>2];
  $1753 = $55 * $1752;
  $1754 = +HEAPF32[$586>>2];
  $1755 = +HEAPF32[$587>>2];
  $1756 = $1754 + $1755;
  $1757 = $56 * $1756;
  $1758 = $1753 + $1757;
  HEAPF32[$602>>2] = $1758;
  $1759 = +HEAPF32[$603>>2];
  $1760 = $60 * $1759;
  $1761 = +HEAPF32[$604>>2];
  $1762 = $62 * $1761;
  $1763 = $1760 + $1762;
  $1764 = $50 * $1763;
  $1765 = $1758 - $1764;
  HEAPF32[$605>>2] = $1765;
  $1766 = +HEAPF32[$603>>2];
  $1767 = +HEAPF32[$604>>2];
  $1768 = $1767 * 2.0;
  $1769 = $1768 + $1765;
  $1770 = $1766 + $1769;
  $1771 = $50 * $1770;
  HEAPF32[$606>>2] = $1771;
  $1772 = +HEAPF32[$607>>2];
  $1773 = $120 * $1772;
  $1774 = +HEAPF32[$608>>2];
  $1775 = $122 * $1774;
  $1776 = $124 * $1770;
  $1777 = $1775 + $1776;
  $1778 = $121 * $1777;
  $1779 = $1773 + $1778;
  HEAPF32[$609>>2] = $1779;
  $1780 = +HEAPF32[$610>>2];
  $1781 = $80 * $1780;
  $1782 = +HEAPF32[$611>>2];
  $1783 = $77 * $1782;
  $1784 = $1781 + $1783;
  $1785 = $73 * $1784;
  $1786 = $1779 - $1785;
  HEAPF32[$612>>2] = $1786;
  $1787 = +HEAPF32[$613>>2];
  $1788 = $96 * $1787;
  $1789 = $75 * $1786;
  $1790 = +HEAPF32[$611>>2];
  $1791 = $126 * $1790;
  $1792 = $1791 + $1789;
  $1793 = +HEAPF32[$610>>2];
  $1794 = $75 * $1793;
  $1795 = $1794 + $1792;
  $1796 = $73 * $1795;
  $1797 = +HEAPF32[$614>>2];
  $1798 = $92 * $1797;
  $1799 = $1788 + $1798;
  $1800 = $89 * $1799;
  $1801 = $1796 - $1800;
  HEAPF32[$615>>2] = $1801;
  $1802 = +HEAPF32[$616>>2];
  $1803 = $109 * $1802;
  $1804 = +HEAPF32[$614>>2];
  $1805 = $92 * $1801;
  $1806 = $1788 + $1805;
  $1807 = $89 * $1806;
  $1808 = $1804 + $1807;
  $1809 = +HEAPF32[$617>>2];
  $1810 = $112 * $1809;
  $1811 = $1803 + $1810;
  $1812 = $105 * $1811;
  $1813 = $1808 - $1812;
  HEAPF32[$618>>2] = $1813;
  $1814 = +HEAPF32[$619>>2];
  $1815 = $120 * $1814;
  $1816 = +HEAPF32[$606>>2];
  $1817 = +HEAPF32[$608>>2];
  $1818 = $1816 + $1817;
  $1819 = $121 * $1818;
  $1820 = $1815 + $1819;
  HEAPF32[$620>>2] = $1820;
  $1821 = +HEAPF32[$621>>2];
  $1822 = $80 * $1821;
  $1823 = +HEAPF32[$622>>2];
  $1824 = $77 * $1823;
  $1825 = $1822 + $1824;
  $1826 = $73 * $1825;
  $1827 = $1820 - $1826;
  HEAPF32[$623>>2] = $1827;
  $1828 = +HEAPF32[$621>>2];
  $1829 = +HEAPF32[$622>>2];
  $1830 = $1829 * 2.0;
  $1831 = $1830 + $1827;
  $1832 = $1828 + $1831;
  $1833 = $73 * $1832;
  HEAPF32[$624>>2] = $1833;
  $1834 = +HEAPF32[$625>>2];
  $1835 = $134 * $1834;
  $1836 = +HEAPF32[$626>>2];
  $1837 = $136 * $1836;
  $1838 = $138 * $1832;
  $1839 = $1837 + $1838;
  $1840 = $135 * $1839;
  $1841 = $1835 + $1840;
  HEAPF32[$627>>2] = $1841;
  $1842 = +HEAPF32[$628>>2];
  $1843 = $92 * $1842;
  $1844 = +HEAPF32[$629>>2];
  $1845 = $96 * $1844;
  $1846 = $1843 + $1845;
  $1847 = $89 * $1846;
  $1848 = $1841 - $1847;
  HEAPF32[$630>>2] = $1848;
  $1849 = +HEAPF32[$631>>2];
  $1850 = $109 * $1849;
  $1851 = $94 * $1848;
  $1852 = +HEAPF32[$629>>2];
  $1853 = $140 * $1852;
  $1854 = $1853 + $1851;
  $1855 = +HEAPF32[$628>>2];
  $1856 = $94 * $1855;
  $1857 = $1856 + $1854;
  $1858 = $89 * $1857;
  $1859 = +HEAPF32[$632>>2];
  $1860 = $112 * $1859;
  $1861 = $1850 + $1860;
  $1862 = $105 * $1861;
  $1863 = $1858 - $1862;
  HEAPF32[$633>>2] = $1863;
  $1864 = +HEAPF32[$634>>2];
  $1865 = $134 * $1864;
  $1866 = +HEAPF32[$624>>2];
  $1867 = +HEAPF32[$626>>2];
  $1868 = $1866 + $1867;
  $1869 = $135 * $1868;
  $1870 = $1865 + $1869;
  HEAPF32[$635>>2] = $1870;
  $1871 = +HEAPF32[$636>>2];
  $1872 = $92 * $1871;
  $1873 = +HEAPF32[$637>>2];
  $1874 = $96 * $1873;
  $1875 = $1872 + $1874;
  $1876 = $89 * $1875;
  $1877 = $1870 - $1876;
  HEAPF32[$638>>2] = $1877;
  $1878 = +HEAPF32[$636>>2];
  $1879 = +HEAPF32[$637>>2];
  $1880 = $1879 * 2.0;
  $1881 = $1880 + $1877;
  $1882 = $1878 + $1881;
  $1883 = $89 * $1882;
  HEAPF32[$639>>2] = $1883;
  $1884 = +HEAPF32[$640>>2];
  $1885 = $148 * $1884;
  $1886 = +HEAPF32[$641>>2];
  $1887 = $150 * $1886;
  $1888 = $152 * $1882;
  $1889 = $1887 + $1888;
  $1890 = $149 * $1889;
  $1891 = $1885 + $1890;
  HEAPF32[$642>>2] = $1891;
  $1892 = +HEAPF32[$643>>2];
  $1893 = $112 * $1892;
  $1894 = +HEAPF32[$644>>2];
  $1895 = $109 * $1894;
  $1896 = $1893 + $1895;
  $1897 = $105 * $1896;
  $1898 = $1891 - $1897;
  HEAPF32[$645>>2] = $1898;
  $1899 = +HEAPF32[$646>>2];
  $1900 = $148 * $1899;
  $1901 = +HEAPF32[$639>>2];
  $1902 = +HEAPF32[$641>>2];
  $1903 = $1901 + $1902;
  $1904 = $149 * $1903;
  $1905 = $1900 + $1904;
  HEAPF32[$647>>2] = $1905;
  $1906 = +HEAPF32[$648>>2];
  $1907 = $112 * $1906;
  $1908 = +HEAPF32[$649>>2];
  $1909 = $109 * $1908;
  $1910 = $1907 + $1909;
  $1911 = $105 * $1910;
  $1912 = $1905 - $1911;
  HEAPF32[$650>>2] = $1912;
  $1913 = +HEAPF32[$599>>2];
  $1914 = +HEAPF32[$600>>2];
  $1915 = $112 * $1914;
  $1916 = $1741 + $1915;
  $1917 = $105 * $1916;
  $1918 = $1913 + $1917;
  $1919 = $39 * $1918;
  $1920 = +HEAPF32[$617>>2];
  $1921 = +HEAPF32[$618>>2];
  $1922 = $112 * $1921;
  $1923 = $1803 + $1922;
  $1924 = $105 * $1923;
  $1925 = $1920 + $1924;
  $1926 = $117 * $1925;
  $1927 = $1919 + $1926;
  $1928 = +HEAPF32[$632>>2];
  $1929 = +HEAPF32[$633>>2];
  $1930 = $112 * $1929;
  $1931 = $1850 + $1930;
  $1932 = $105 * $1931;
  $1933 = $1928 + $1932;
  $1934 = $131 * $1933;
  $1935 = $1927 + $1934;
  $1936 = +HEAPF32[$645>>2];
  $1937 = $107 * $1936;
  $1938 = +HEAPF32[$644>>2];
  $1939 = $154 * $1938;
  $1940 = $1937 + $1939;
  $1941 = +HEAPF32[$643>>2];
  $1942 = $107 * $1941;
  $1943 = $1940 + $1942;
  $1944 = $145 * $1943;
  $1945 = +HEAPF32[$648>>2];
  $1946 = +HEAPF32[$649>>2];
  $1947 = $1946 * 2.0;
  $1948 = $1912 + $1947;
  $1949 = $1945 + $1948;
  $1950 = $159 * $1949;
  $1951 = $1944 + $1950;
  $1952 = $105 * $1951;
  $1953 = $1935 + $1952;
  $1954 = +HEAPF32[$651>>2];
  $1955 = $55 * $1954;
  $1956 = +HEAPF32[$652>>2];
  $1957 = $46 * $1956;
  $1958 = +HEAPF32[$653>>2];
  $1959 = $57 * $1958;
  $1960 = $1957 + $1959;
  $1961 = $56 * $1960;
  $1962 = $1955 + $1961;
  HEAPF32[$654>>2] = $1962;
  $1963 = +HEAPF32[$655>>2];
  $1964 = $60 * $1963;
  $1965 = +HEAPF32[$656>>2];
  $1966 = $62 * $1965;
  $1967 = $1964 + $1966;
  $1968 = $50 * $1967;
  $1969 = $1962 - $1968;
  HEAPF32[$657>>2] = $1969;
  $1970 = +HEAPF32[$658>>2];
  $1971 = $77 * $1970;
  $1972 = $52 * $1969;
  $1973 = +HEAPF32[$656>>2];
  $1974 = $64 * $1973;
  $1975 = $1974 + $1972;
  $1976 = +HEAPF32[$655>>2];
  $1977 = $52 * $1976;
  $1978 = $1977 + $1975;
  $1979 = $50 * $1978;
  $1980 = +HEAPF32[$659>>2];
  $1981 = $80 * $1980;
  $1982 = $1971 + $1981;
  $1983 = $73 * $1982;
  $1984 = $1979 - $1983;
  HEAPF32[$660>>2] = $1984;
  $1985 = +HEAPF32[$661>>2];
  $1986 = $96 * $1985;
  $1987 = +HEAPF32[$659>>2];
  $1988 = $80 * $1984;
  $1989 = $1971 + $1988;
  $1990 = $73 * $1989;
  $1991 = $1987 + $1990;
  $1992 = +HEAPF32[$662>>2];
  $1993 = $92 * $1992;
  $1994 = $1986 + $1993;
  $1995 = $89 * $1994;
  $1996 = $1991 - $1995;
  HEAPF32[$663>>2] = $1996;
  $1997 = +HEAPF32[$664>>2];
  $1998 = $109 * $1997;
  $1999 = +HEAPF32[$662>>2];
  $2000 = $92 * $1996;
  $2001 = $1986 + $2000;
  $2002 = $89 * $2001;
  $2003 = $1999 + $2002;
  $2004 = +HEAPF32[$665>>2];
  $2005 = $112 * $2004;
  $2006 = $1998 + $2005;
  $2007 = $105 * $2006;
  $2008 = $2003 - $2007;
  HEAPF32[$666>>2] = $2008;
  $2009 = +HEAPF32[$667>>2];
  $2010 = $55 * $2009;
  $2011 = +HEAPF32[$652>>2];
  $2012 = +HEAPF32[$653>>2];
  $2013 = $2011 + $2012;
  $2014 = $56 * $2013;
  $2015 = $2010 + $2014;
  HEAPF32[$668>>2] = $2015;
  $2016 = +HEAPF32[$669>>2];
  $2017 = $60 * $2016;
  $2018 = +HEAPF32[$670>>2];
  $2019 = $62 * $2018;
  $2020 = $2017 + $2019;
  $2021 = $50 * $2020;
  $2022 = $2015 - $2021;
  HEAPF32[$671>>2] = $2022;
  $2023 = +HEAPF32[$669>>2];
  $2024 = +HEAPF32[$670>>2];
  $2025 = $2024 * 2.0;
  $2026 = $2025 + $2022;
  $2027 = $2023 + $2026;
  $2028 = $50 * $2027;
  HEAPF32[$672>>2] = $2028;
  $2029 = +HEAPF32[$673>>2];
  $2030 = $120 * $2029;
  $2031 = $124 * $2027;
  $2032 = +HEAPF32[$674>>2];
  $2033 = $122 * $2032;
  $2034 = $2033 + $2031;
  $2035 = $121 * $2034;
  $2036 = $2030 + $2035;
  HEAPF32[$675>>2] = $2036;
  $2037 = +HEAPF32[$676>>2];
  $2038 = $80 * $2037;
  $2039 = +HEAPF32[$677>>2];
  $2040 = $77 * $2039;
  $2041 = $2038 + $2040;
  $2042 = $73 * $2041;
  $2043 = $2036 - $2042;
  HEAPF32[$678>>2] = $2043;
  $2044 = +HEAPF32[$679>>2];
  $2045 = $96 * $2044;
  $2046 = $75 * $2043;
  $2047 = +HEAPF32[$677>>2];
  $2048 = $126 * $2047;
  $2049 = $2048 + $2046;
  $2050 = +HEAPF32[$676>>2];
  $2051 = $75 * $2050;
  $2052 = $2051 + $2049;
  $2053 = $73 * $2052;
  $2054 = +HEAPF32[$680>>2];
  $2055 = $92 * $2054;
  $2056 = $2045 + $2055;
  $2057 = $89 * $2056;
  $2058 = $2053 - $2057;
  HEAPF32[$681>>2] = $2058;
  $2059 = +HEAPF32[$682>>2];
  $2060 = $109 * $2059;
  $2061 = +HEAPF32[$680>>2];
  $2062 = $92 * $2058;
  $2063 = $2045 + $2062;
  $2064 = $89 * $2063;
  $2065 = $2061 + $2064;
  $2066 = +HEAPF32[$683>>2];
  $2067 = $112 * $2066;
  $2068 = $2060 + $2067;
  $2069 = $105 * $2068;
  $2070 = $2065 - $2069;
  HEAPF32[$684>>2] = $2070;
  $2071 = +HEAPF32[$685>>2];
  $2072 = $120 * $2071;
  $2073 = +HEAPF32[$672>>2];
  $2074 = +HEAPF32[$674>>2];
  $2075 = $2073 + $2074;
  $2076 = $121 * $2075;
  $2077 = $2072 + $2076;
  HEAPF32[$686>>2] = $2077;
  $2078 = +HEAPF32[$687>>2];
  $2079 = $80 * $2078;
  $2080 = +HEAPF32[$688>>2];
  $2081 = $77 * $2080;
  $2082 = $2079 + $2081;
  $2083 = $73 * $2082;
  $2084 = $2077 - $2083;
  HEAPF32[$689>>2] = $2084;
  $2085 = +HEAPF32[$687>>2];
  $2086 = +HEAPF32[$688>>2];
  $2087 = $2086 * 2.0;
  $2088 = $2087 + $2084;
  $2089 = $2085 + $2088;
  $2090 = $73 * $2089;
  HEAPF32[$690>>2] = $2090;
  $2091 = +HEAPF32[$691>>2];
  $2092 = $134 * $2091;
  $2093 = $138 * $2089;
  $2094 = +HEAPF32[$692>>2];
  $2095 = $136 * $2094;
  $2096 = $2095 + $2093;
  $2097 = $135 * $2096;
  $2098 = $2092 + $2097;
  HEAPF32[$693>>2] = $2098;
  $2099 = +HEAPF32[$694>>2];
  $2100 = $92 * $2099;
  $2101 = +HEAPF32[$695>>2];
  $2102 = $96 * $2101;
  $2103 = $2100 + $2102;
  $2104 = $89 * $2103;
  $2105 = $2098 - $2104;
  HEAPF32[$696>>2] = $2105;
  $2106 = +HEAPF32[$697>>2];
  $2107 = $109 * $2106;
  $2108 = $94 * $2105;
  $2109 = +HEAPF32[$695>>2];
  $2110 = $140 * $2109;
  $2111 = $2110 + $2108;
  $2112 = +HEAPF32[$694>>2];
  $2113 = $94 * $2112;
  $2114 = $2113 + $2111;
  $2115 = $89 * $2114;
  $2116 = +HEAPF32[$698>>2];
  $2117 = $112 * $2116;
  $2118 = $2107 + $2117;
  $2119 = $105 * $2118;
  $2120 = $2115 - $2119;
  HEAPF32[$699>>2] = $2120;
  $2121 = +HEAPF32[$700>>2];
  $2122 = $134 * $2121;
  $2123 = +HEAPF32[$690>>2];
  $2124 = +HEAPF32[$692>>2];
  $2125 = $2123 + $2124;
  $2126 = $135 * $2125;
  $2127 = $2122 + $2126;
  HEAPF32[$701>>2] = $2127;
  $2128 = +HEAPF32[$702>>2];
  $2129 = $92 * $2128;
  $2130 = +HEAPF32[$703>>2];
  $2131 = $96 * $2130;
  $2132 = $2129 + $2131;
  $2133 = $89 * $2132;
  $2134 = $2127 - $2133;
  HEAPF32[$704>>2] = $2134;
  $2135 = +HEAPF32[$702>>2];
  $2136 = +HEAPF32[$703>>2];
  $2137 = $2136 * 2.0;
  $2138 = $2137 + $2134;
  $2139 = $2135 + $2138;
  $2140 = $89 * $2139;
  HEAPF32[$705>>2] = $2140;
  $2141 = +HEAPF32[$706>>2];
  $2142 = $148 * $2141;
  $2143 = $152 * $2139;
  $2144 = +HEAPF32[$707>>2];
  $2145 = $150 * $2144;
  $2146 = $2145 + $2143;
  $2147 = $149 * $2146;
  $2148 = $2142 + $2147;
  HEAPF32[$708>>2] = $2148;
  $2149 = +HEAPF32[$709>>2];
  $2150 = $112 * $2149;
  $2151 = +HEAPF32[$710>>2];
  $2152 = $109 * $2151;
  $2153 = $2150 + $2152;
  $2154 = $105 * $2153;
  $2155 = $2148 - $2154;
  HEAPF32[$711>>2] = $2155;
  $2156 = +HEAPF32[$712>>2];
  $2157 = $148 * $2156;
  $2158 = +HEAPF32[$705>>2];
  $2159 = +HEAPF32[$707>>2];
  $2160 = $2158 + $2159;
  $2161 = $149 * $2160;
  $2162 = $2157 + $2161;
  HEAPF32[$713>>2] = $2162;
  $2163 = +HEAPF32[$714>>2];
  $2164 = $112 * $2163;
  $2165 = +HEAPF32[$715>>2];
  $2166 = $109 * $2165;
  $2167 = $2164 + $2166;
  $2168 = $105 * $2167;
  $2169 = $2162 - $2168;
  HEAPF32[$716>>2] = $2169;
  $2170 = +HEAPF32[$665>>2];
  $2171 = +HEAPF32[$666>>2];
  $2172 = $112 * $2171;
  $2173 = $1998 + $2172;
  $2174 = $105 * $2173;
  $2175 = $2170 + $2174;
  $2176 = $172 * $2175;
  $2177 = +HEAPF32[$683>>2];
  $2178 = +HEAPF32[$684>>2];
  $2179 = $112 * $2178;
  $2180 = $2060 + $2179;
  $2181 = $105 * $2180;
  $2182 = $2177 + $2181;
  $2183 = $175 * $2182;
  $2184 = $2176 + $2183;
  $2185 = +HEAPF32[$698>>2];
  $2186 = +HEAPF32[$699>>2];
  $2187 = $112 * $2186;
  $2188 = $2107 + $2187;
  $2189 = $105 * $2188;
  $2190 = $2185 + $2189;
  $2191 = $178 * $2190;
  $2192 = $2184 + $2191;
  $2193 = +HEAPF32[$711>>2];
  $2194 = $107 * $2193;
  $2195 = +HEAPF32[$710>>2];
  $2196 = $154 * $2195;
  $2197 = $2194 + $2196;
  $2198 = +HEAPF32[$709>>2];
  $2199 = $107 * $2198;
  $2200 = $2197 + $2199;
  $2201 = $181 * $2200;
  $2202 = +HEAPF32[$714>>2];
  $2203 = +HEAPF32[$715>>2];
  $2204 = $2203 * 2.0;
  $2205 = $2169 + $2204;
  $2206 = $2202 + $2205;
  $2207 = $184 * $2206;
  $2208 = $2201 + $2207;
  $2209 = $105 * $2208;
  $2210 = $2192 + $2209;
  $2211 = $1953 + $2210;
  $2212 = +HEAPF32[$717>>2];
  $2213 = $55 * $2212;
  $2214 = +HEAPF32[$718>>2];
  $2215 = $46 * $2214;
  $2216 = +HEAPF32[$719>>2];
  $2217 = $57 * $2216;
  $2218 = $2215 + $2217;
  $2219 = $56 * $2218;
  $2220 = $2213 + $2219;
  HEAPF32[$720>>2] = $2220;
  $2221 = +HEAPF32[$721>>2];
  $2222 = $60 * $2221;
  $2223 = +HEAPF32[$722>>2];
  $2224 = $62 * $2223;
  $2225 = $2222 + $2224;
  $2226 = $50 * $2225;
  $2227 = $2220 - $2226;
  HEAPF32[$723>>2] = $2227;
  $2228 = +HEAPF32[$724>>2];
  $2229 = $77 * $2228;
  $2230 = $52 * $2227;
  $2231 = +HEAPF32[$722>>2];
  $2232 = $64 * $2231;
  $2233 = $2232 + $2230;
  $2234 = +HEAPF32[$721>>2];
  $2235 = $52 * $2234;
  $2236 = $2235 + $2233;
  $2237 = $50 * $2236;
  $2238 = +HEAPF32[$725>>2];
  $2239 = $80 * $2238;
  $2240 = $2229 + $2239;
  $2241 = $73 * $2240;
  $2242 = $2237 - $2241;
  HEAPF32[$726>>2] = $2242;
  $2243 = +HEAPF32[$727>>2];
  $2244 = $96 * $2243;
  $2245 = +HEAPF32[$725>>2];
  $2246 = $80 * $2242;
  $2247 = $2229 + $2246;
  $2248 = $73 * $2247;
  $2249 = $2245 + $2248;
  $2250 = +HEAPF32[$728>>2];
  $2251 = $92 * $2250;
  $2252 = $2244 + $2251;
  $2253 = $89 * $2252;
  $2254 = $2249 - $2253;
  HEAPF32[$729>>2] = $2254;
  $2255 = +HEAPF32[$730>>2];
  $2256 = $109 * $2255;
  $2257 = +HEAPF32[$728>>2];
  $2258 = $92 * $2254;
  $2259 = $2244 + $2258;
  $2260 = $89 * $2259;
  $2261 = $2257 + $2260;
  $2262 = +HEAPF32[$731>>2];
  $2263 = $112 * $2262;
  $2264 = $2256 + $2263;
  $2265 = $105 * $2264;
  $2266 = $2261 - $2265;
  HEAPF32[$732>>2] = $2266;
  $2267 = +HEAPF32[$733>>2];
  $2268 = $55 * $2267;
  $2269 = +HEAPF32[$718>>2];
  $2270 = +HEAPF32[$719>>2];
  $2271 = $2269 + $2270;
  $2272 = $56 * $2271;
  $2273 = $2268 + $2272;
  HEAPF32[$734>>2] = $2273;
  $2274 = +HEAPF32[$735>>2];
  $2275 = $60 * $2274;
  $2276 = +HEAPF32[$736>>2];
  $2277 = $62 * $2276;
  $2278 = $2275 + $2277;
  $2279 = $50 * $2278;
  $2280 = $2273 - $2279;
  HEAPF32[$737>>2] = $2280;
  $2281 = +HEAPF32[$735>>2];
  $2282 = +HEAPF32[$736>>2];
  $2283 = $2282 * 2.0;
  $2284 = $2283 + $2280;
  $2285 = $2281 + $2284;
  $2286 = $50 * $2285;
  HEAPF32[$738>>2] = $2286;
  $2287 = +HEAPF32[$739>>2];
  $2288 = $120 * $2287;
  $2289 = $124 * $2285;
  $2290 = +HEAPF32[$740>>2];
  $2291 = $122 * $2290;
  $2292 = $2291 + $2289;
  $2293 = $121 * $2292;
  $2294 = $2288 + $2293;
  HEAPF32[$741>>2] = $2294;
  $2295 = +HEAPF32[$742>>2];
  $2296 = $80 * $2295;
  $2297 = +HEAPF32[$743>>2];
  $2298 = $77 * $2297;
  $2299 = $2296 + $2298;
  $2300 = $73 * $2299;
  $2301 = $2294 - $2300;
  HEAPF32[$744>>2] = $2301;
  $2302 = +HEAPF32[$745>>2];
  $2303 = $96 * $2302;
  $2304 = $75 * $2301;
  $2305 = +HEAPF32[$743>>2];
  $2306 = $126 * $2305;
  $2307 = $2306 + $2304;
  $2308 = +HEAPF32[$742>>2];
  $2309 = $75 * $2308;
  $2310 = $2309 + $2307;
  $2311 = $73 * $2310;
  $2312 = +HEAPF32[$746>>2];
  $2313 = $92 * $2312;
  $2314 = $2303 + $2313;
  $2315 = $89 * $2314;
  $2316 = $2311 - $2315;
  HEAPF32[$747>>2] = $2316;
  $2317 = +HEAPF32[$748>>2];
  $2318 = $109 * $2317;
  $2319 = +HEAPF32[$746>>2];
  $2320 = $92 * $2316;
  $2321 = $2303 + $2320;
  $2322 = $89 * $2321;
  $2323 = $2319 + $2322;
  $2324 = +HEAPF32[$749>>2];
  $2325 = $112 * $2324;
  $2326 = $2318 + $2325;
  $2327 = $105 * $2326;
  $2328 = $2323 - $2327;
  HEAPF32[$750>>2] = $2328;
  $2329 = +HEAPF32[$751>>2];
  $2330 = $120 * $2329;
  $2331 = +HEAPF32[$738>>2];
  $2332 = +HEAPF32[$740>>2];
  $2333 = $2331 + $2332;
  $2334 = $121 * $2333;
  $2335 = $2330 + $2334;
  HEAPF32[$752>>2] = $2335;
  $2336 = +HEAPF32[$753>>2];
  $2337 = $80 * $2336;
  $2338 = +HEAPF32[$754>>2];
  $2339 = $77 * $2338;
  $2340 = $2337 + $2339;
  $2341 = $73 * $2340;
  $2342 = $2335 - $2341;
  HEAPF32[$755>>2] = $2342;
  $2343 = +HEAPF32[$753>>2];
  $2344 = +HEAPF32[$754>>2];
  $2345 = $2344 * 2.0;
  $2346 = $2345 + $2342;
  $2347 = $2343 + $2346;
  $2348 = $73 * $2347;
  HEAPF32[$756>>2] = $2348;
  $2349 = +HEAPF32[$757>>2];
  $2350 = $134 * $2349;
  $2351 = $138 * $2347;
  $2352 = +HEAPF32[$758>>2];
  $2353 = $136 * $2352;
  $2354 = $2353 + $2351;
  $2355 = $135 * $2354;
  $2356 = $2350 + $2355;
  HEAPF32[$759>>2] = $2356;
  $2357 = +HEAPF32[$760>>2];
  $2358 = $92 * $2357;
  $2359 = +HEAPF32[$761>>2];
  $2360 = $96 * $2359;
  $2361 = $2358 + $2360;
  $2362 = $89 * $2361;
  $2363 = $2356 - $2362;
  HEAPF32[$762>>2] = $2363;
  $2364 = +HEAPF32[$763>>2];
  $2365 = $109 * $2364;
  $2366 = $94 * $2363;
  $2367 = +HEAPF32[$761>>2];
  $2368 = $140 * $2367;
  $2369 = $2368 + $2366;
  $2370 = +HEAPF32[$760>>2];
  $2371 = $94 * $2370;
  $2372 = $2371 + $2369;
  $2373 = $89 * $2372;
  $2374 = +HEAPF32[$764>>2];
  $2375 = $112 * $2374;
  $2376 = $2365 + $2375;
  $2377 = $105 * $2376;
  $2378 = $2373 - $2377;
  HEAPF32[$765>>2] = $2378;
  $2379 = +HEAPF32[$766>>2];
  $2380 = $134 * $2379;
  $2381 = +HEAPF32[$756>>2];
  $2382 = +HEAPF32[$758>>2];
  $2383 = $2381 + $2382;
  $2384 = $135 * $2383;
  $2385 = $2380 + $2384;
  HEAPF32[$767>>2] = $2385;
  $2386 = +HEAPF32[$768>>2];
  $2387 = $92 * $2386;
  $2388 = +HEAPF32[$769>>2];
  $2389 = $96 * $2388;
  $2390 = $2387 + $2389;
  $2391 = $89 * $2390;
  $2392 = $2385 - $2391;
  HEAPF32[$770>>2] = $2392;
  $2393 = +HEAPF32[$768>>2];
  $2394 = +HEAPF32[$769>>2];
  $2395 = $2394 * 2.0;
  $2396 = $2395 + $2392;
  $2397 = $2393 + $2396;
  $2398 = $89 * $2397;
  HEAPF32[$771>>2] = $2398;
  $2399 = +HEAPF32[$772>>2];
  $2400 = $148 * $2399;
  $2401 = $152 * $2397;
  $2402 = +HEAPF32[$773>>2];
  $2403 = $150 * $2402;
  $2404 = $2403 + $2401;
  $2405 = $149 * $2404;
  $2406 = $2400 + $2405;
  HEAPF32[$774>>2] = $2406;
  $2407 = +HEAPF32[$775>>2];
  $2408 = $112 * $2407;
  $2409 = +HEAPF32[$776>>2];
  $2410 = $109 * $2409;
  $2411 = $2408 + $2410;
  $2412 = $105 * $2411;
  $2413 = $2406 - $2412;
  HEAPF32[$777>>2] = $2413;
  $2414 = +HEAPF32[$778>>2];
  $2415 = $148 * $2414;
  $2416 = +HEAPF32[$771>>2];
  $2417 = +HEAPF32[$773>>2];
  $2418 = $2416 + $2417;
  $2419 = $149 * $2418;
  $2420 = $2415 + $2419;
  HEAPF32[$779>>2] = $2420;
  $2421 = +HEAPF32[$780>>2];
  $2422 = $112 * $2421;
  $2423 = +HEAPF32[$781>>2];
  $2424 = $109 * $2423;
  $2425 = $2422 + $2424;
  $2426 = $105 * $2425;
  $2427 = $2420 - $2426;
  HEAPF32[$782>>2] = $2427;
  $2428 = +HEAPF32[$731>>2];
  $2429 = +HEAPF32[$732>>2];
  $2430 = $112 * $2429;
  $2431 = $2256 + $2430;
  $2432 = $105 * $2431;
  $2433 = $2428 + $2432;
  $2434 = $197 * $2433;
  $2435 = +HEAPF32[$749>>2];
  $2436 = +HEAPF32[$750>>2];
  $2437 = $112 * $2436;
  $2438 = $2318 + $2437;
  $2439 = $105 * $2438;
  $2440 = $2435 + $2439;
  $2441 = $200 * $2440;
  $2442 = $2434 + $2441;
  $2443 = +HEAPF32[$764>>2];
  $2444 = +HEAPF32[$765>>2];
  $2445 = $112 * $2444;
  $2446 = $2365 + $2445;
  $2447 = $105 * $2446;
  $2448 = $2443 + $2447;
  $2449 = $203 * $2448;
  $2450 = $2442 + $2449;
  $2451 = +HEAPF32[$777>>2];
  $2452 = $107 * $2451;
  $2453 = +HEAPF32[$776>>2];
  $2454 = $154 * $2453;
  $2455 = $2452 + $2454;
  $2456 = +HEAPF32[$775>>2];
  $2457 = $107 * $2456;
  $2458 = $2455 + $2457;
  $2459 = $206 * $2458;
  $2460 = +HEAPF32[$780>>2];
  $2461 = +HEAPF32[$781>>2];
  $2462 = $2461 * 2.0;
  $2463 = $2427 + $2462;
  $2464 = $2460 + $2463;
  $2465 = $209 * $2464;
  $2466 = $2459 + $2465;
  $2467 = $105 * $2466;
  $2468 = $2450 + $2467;
  $2469 = +HEAPF32[$783>>2];
  $2470 = $55 * $2469;
  $2471 = +HEAPF32[$784>>2];
  $2472 = $46 * $2471;
  $2473 = +HEAPF32[$785>>2];
  $2474 = $57 * $2473;
  $2475 = $2472 + $2474;
  $2476 = $56 * $2475;
  $2477 = $2470 + $2476;
  HEAPF32[$786>>2] = $2477;
  $2478 = +HEAPF32[$787>>2];
  $2479 = $60 * $2478;
  $2480 = +HEAPF32[$788>>2];
  $2481 = $62 * $2480;
  $2482 = $2479 + $2481;
  $2483 = $50 * $2482;
  $2484 = $2477 - $2483;
  HEAPF32[$789>>2] = $2484;
  $2485 = +HEAPF32[$790>>2];
  $2486 = $77 * $2485;
  $2487 = $52 * $2484;
  $2488 = +HEAPF32[$788>>2];
  $2489 = $64 * $2488;
  $2490 = $2489 + $2487;
  $2491 = +HEAPF32[$787>>2];
  $2492 = $52 * $2491;
  $2493 = $2492 + $2490;
  $2494 = $50 * $2493;
  $2495 = +HEAPF32[$791>>2];
  $2496 = $80 * $2495;
  $2497 = $2486 + $2496;
  $2498 = $73 * $2497;
  $2499 = $2494 - $2498;
  HEAPF32[$792>>2] = $2499;
  $2500 = +HEAPF32[$793>>2];
  $2501 = $96 * $2500;
  $2502 = +HEAPF32[$791>>2];
  $2503 = $80 * $2499;
  $2504 = $2486 + $2503;
  $2505 = $73 * $2504;
  $2506 = $2502 + $2505;
  $2507 = +HEAPF32[$794>>2];
  $2508 = $92 * $2507;
  $2509 = $2501 + $2508;
  $2510 = $89 * $2509;
  $2511 = $2506 - $2510;
  HEAPF32[$795>>2] = $2511;
  $2512 = +HEAPF32[$796>>2];
  $2513 = $109 * $2512;
  $2514 = +HEAPF32[$794>>2];
  $2515 = $92 * $2511;
  $2516 = $2501 + $2515;
  $2517 = $89 * $2516;
  $2518 = $2514 + $2517;
  $2519 = +HEAPF32[$797>>2];
  $2520 = $112 * $2519;
  $2521 = $2513 + $2520;
  $2522 = $105 * $2521;
  $2523 = $2518 - $2522;
  HEAPF32[$798>>2] = $2523;
  $2524 = +HEAPF32[$799>>2];
  $2525 = $55 * $2524;
  $2526 = +HEAPF32[$784>>2];
  $2527 = +HEAPF32[$785>>2];
  $2528 = $2526 + $2527;
  $2529 = $56 * $2528;
  $2530 = $2525 + $2529;
  HEAPF32[$800>>2] = $2530;
  $2531 = +HEAPF32[$801>>2];
  $2532 = $60 * $2531;
  $2533 = +HEAPF32[$802>>2];
  $2534 = $62 * $2533;
  $2535 = $2532 + $2534;
  $2536 = $50 * $2535;
  $2537 = $2530 - $2536;
  HEAPF32[$803>>2] = $2537;
  $2538 = +HEAPF32[$801>>2];
  $2539 = +HEAPF32[$802>>2];
  $2540 = $2539 * 2.0;
  $2541 = $2540 + $2537;
  $2542 = $2538 + $2541;
  $2543 = $50 * $2542;
  HEAPF32[$804>>2] = $2543;
  $2544 = +HEAPF32[$805>>2];
  $2545 = $120 * $2544;
  $2546 = +HEAPF32[$806>>2];
  $2547 = $122 * $2546;
  $2548 = $124 * $2542;
  $2549 = $2547 + $2548;
  $2550 = $121 * $2549;
  $2551 = $2545 + $2550;
  HEAPF32[$807>>2] = $2551;
  $2552 = +HEAPF32[$808>>2];
  $2553 = $80 * $2552;
  $2554 = +HEAPF32[$809>>2];
  $2555 = $77 * $2554;
  $2556 = $2553 + $2555;
  $2557 = $73 * $2556;
  $2558 = $2551 - $2557;
  HEAPF32[$810>>2] = $2558;
  $2559 = +HEAPF32[$811>>2];
  $2560 = $96 * $2559;
  $2561 = $75 * $2558;
  $2562 = +HEAPF32[$809>>2];
  $2563 = $126 * $2562;
  $2564 = $2563 + $2561;
  $2565 = +HEAPF32[$808>>2];
  $2566 = $75 * $2565;
  $2567 = $2566 + $2564;
  $2568 = $73 * $2567;
  $2569 = +HEAPF32[$812>>2];
  $2570 = $92 * $2569;
  $2571 = $2560 + $2570;
  $2572 = $89 * $2571;
  $2573 = $2568 - $2572;
  HEAPF32[$813>>2] = $2573;
  $2574 = +HEAPF32[$814>>2];
  $2575 = $109 * $2574;
  $2576 = +HEAPF32[$812>>2];
  $2577 = $92 * $2573;
  $2578 = $2560 + $2577;
  $2579 = $89 * $2578;
  $2580 = $2576 + $2579;
  $2581 = +HEAPF32[$815>>2];
  $2582 = $112 * $2581;
  $2583 = $2575 + $2582;
  $2584 = $105 * $2583;
  $2585 = $2580 - $2584;
  HEAPF32[$816>>2] = $2585;
  $2586 = +HEAPF32[$817>>2];
  $2587 = $120 * $2586;
  $2588 = +HEAPF32[$804>>2];
  $2589 = +HEAPF32[$806>>2];
  $2590 = $2588 + $2589;
  $2591 = $121 * $2590;
  $2592 = $2587 + $2591;
  HEAPF32[$818>>2] = $2592;
  $2593 = +HEAPF32[$819>>2];
  $2594 = $80 * $2593;
  $2595 = +HEAPF32[$820>>2];
  $2596 = $77 * $2595;
  $2597 = $2594 + $2596;
  $2598 = $73 * $2597;
  $2599 = $2592 - $2598;
  HEAPF32[$821>>2] = $2599;
  $2600 = +HEAPF32[$819>>2];
  $2601 = +HEAPF32[$820>>2];
  $2602 = $2601 * 2.0;
  $2603 = $2602 + $2599;
  $2604 = $2600 + $2603;
  $2605 = $73 * $2604;
  HEAPF32[$822>>2] = $2605;
  $2606 = +HEAPF32[$823>>2];
  $2607 = $134 * $2606;
  $2608 = +HEAPF32[$824>>2];
  $2609 = $136 * $2608;
  $2610 = $138 * $2604;
  $2611 = $2609 + $2610;
  $2612 = $135 * $2611;
  $2613 = $2607 + $2612;
  HEAPF32[$825>>2] = $2613;
  $2614 = +HEAPF32[$826>>2];
  $2615 = $92 * $2614;
  $2616 = +HEAPF32[$827>>2];
  $2617 = $96 * $2616;
  $2618 = $2615 + $2617;
  $2619 = $89 * $2618;
  $2620 = $2613 - $2619;
  HEAPF32[$828>>2] = $2620;
  $2621 = +HEAPF32[$829>>2];
  $2622 = $109 * $2621;
  $2623 = $94 * $2620;
  $2624 = +HEAPF32[$827>>2];
  $2625 = $140 * $2624;
  $2626 = $2625 + $2623;
  $2627 = +HEAPF32[$826>>2];
  $2628 = $94 * $2627;
  $2629 = $2628 + $2626;
  $2630 = $89 * $2629;
  $2631 = +HEAPF32[$830>>2];
  $2632 = $112 * $2631;
  $2633 = $2622 + $2632;
  $2634 = $105 * $2633;
  $2635 = $2630 - $2634;
  HEAPF32[$831>>2] = $2635;
  $2636 = +HEAPF32[$832>>2];
  $2637 = $134 * $2636;
  $2638 = +HEAPF32[$822>>2];
  $2639 = +HEAPF32[$824>>2];
  $2640 = $2638 + $2639;
  $2641 = $135 * $2640;
  $2642 = $2637 + $2641;
  HEAPF32[$833>>2] = $2642;
  $2643 = +HEAPF32[$834>>2];
  $2644 = $92 * $2643;
  $2645 = +HEAPF32[$835>>2];
  $2646 = $96 * $2645;
  $2647 = $2644 + $2646;
  $2648 = $89 * $2647;
  $2649 = $2642 - $2648;
  HEAPF32[$836>>2] = $2649;
  $2650 = +HEAPF32[$834>>2];
  $2651 = +HEAPF32[$835>>2];
  $2652 = $2651 * 2.0;
  $2653 = $2652 + $2649;
  $2654 = $2650 + $2653;
  $2655 = $89 * $2654;
  HEAPF32[$837>>2] = $2655;
  $2656 = +HEAPF32[$838>>2];
  $2657 = $148 * $2656;
  $2658 = $152 * $2654;
  $2659 = +HEAPF32[$839>>2];
  $2660 = $150 * $2659;
  $2661 = $2660 + $2658;
  $2662 = $149 * $2661;
  $2663 = $2657 + $2662;
  HEAPF32[$840>>2] = $2663;
  $2664 = +HEAPF32[$841>>2];
  $2665 = $112 * $2664;
  $2666 = +HEAPF32[$842>>2];
  $2667 = $109 * $2666;
  $2668 = $2665 + $2667;
  $2669 = $105 * $2668;
  $2670 = $2663 - $2669;
  HEAPF32[$843>>2] = $2670;
  $2671 = +HEAPF32[$844>>2];
  $2672 = $148 * $2671;
  $2673 = +HEAPF32[$837>>2];
  $2674 = +HEAPF32[$839>>2];
  $2675 = $2673 + $2674;
  $2676 = $149 * $2675;
  $2677 = $2672 + $2676;
  HEAPF32[$845>>2] = $2677;
  $2678 = +HEAPF32[$846>>2];
  $2679 = $112 * $2678;
  $2680 = +HEAPF32[$847>>2];
  $2681 = $109 * $2680;
  $2682 = $2679 + $2681;
  $2683 = $105 * $2682;
  $2684 = $2677 - $2683;
  HEAPF32[$848>>2] = $2684;
  $2685 = +HEAPF32[$797>>2];
  $2686 = +HEAPF32[$798>>2];
  $2687 = $112 * $2686;
  $2688 = $2513 + $2687;
  $2689 = $105 * $2688;
  $2690 = $2685 + $2689;
  $2691 = $222 * $2690;
  $2692 = +HEAPF32[$815>>2];
  $2693 = +HEAPF32[$816>>2];
  $2694 = $112 * $2693;
  $2695 = $2575 + $2694;
  $2696 = $105 * $2695;
  $2697 = $2692 + $2696;
  $2698 = $225 * $2697;
  $2699 = $2691 + $2698;
  $2700 = +HEAPF32[$830>>2];
  $2701 = +HEAPF32[$831>>2];
  $2702 = $112 * $2701;
  $2703 = $2622 + $2702;
  $2704 = $105 * $2703;
  $2705 = $2700 + $2704;
  $2706 = $228 * $2705;
  $2707 = $2699 + $2706;
  $2708 = +HEAPF32[$843>>2];
  $2709 = $107 * $2708;
  $2710 = +HEAPF32[$842>>2];
  $2711 = $154 * $2710;
  $2712 = $2709 + $2711;
  $2713 = +HEAPF32[$841>>2];
  $2714 = $107 * $2713;
  $2715 = $2712 + $2714;
  $2716 = $231 * $2715;
  $2717 = +HEAPF32[$846>>2];
  $2718 = +HEAPF32[$847>>2];
  $2719 = $2718 * 2.0;
  $2720 = $2684 + $2719;
  $2721 = $2717 + $2720;
  $2722 = $234 * $2721;
  $2723 = $2716 + $2722;
  $2724 = $105 * $2723;
  $2725 = $2707 + $2724;
  $2726 = $2468 + $2725;
  $2727 = $2211 + $2726;
  $2728 = +HEAPF32[$849>>2];
  $2729 = $55 * $2728;
  $2730 = +HEAPF32[$850>>2];
  $2731 = $46 * $2730;
  $2732 = +HEAPF32[$851>>2];
  $2733 = $57 * $2732;
  $2734 = $2731 + $2733;
  $2735 = $56 * $2734;
  $2736 = $2729 + $2735;
  HEAPF32[$852>>2] = $2736;
  $2737 = +HEAPF32[$853>>2];
  $2738 = $60 * $2737;
  $2739 = +HEAPF32[$854>>2];
  $2740 = $62 * $2739;
  $2741 = $2738 + $2740;
  $2742 = $50 * $2741;
  $2743 = $2736 - $2742;
  HEAPF32[$855>>2] = $2743;
  $2744 = +HEAPF32[$856>>2];
  $2745 = $77 * $2744;
  $2746 = $52 * $2743;
  $2747 = +HEAPF32[$854>>2];
  $2748 = $64 * $2747;
  $2749 = $2748 + $2746;
  $2750 = +HEAPF32[$853>>2];
  $2751 = $52 * $2750;
  $2752 = $2751 + $2749;
  $2753 = $50 * $2752;
  $2754 = +HEAPF32[$857>>2];
  $2755 = $80 * $2754;
  $2756 = $2745 + $2755;
  $2757 = $73 * $2756;
  $2758 = $2753 - $2757;
  HEAPF32[$858>>2] = $2758;
  $2759 = +HEAPF32[$859>>2];
  $2760 = $96 * $2759;
  $2761 = +HEAPF32[$857>>2];
  $2762 = $80 * $2758;
  $2763 = $2745 + $2762;
  $2764 = $73 * $2763;
  $2765 = $2761 + $2764;
  $2766 = +HEAPF32[$860>>2];
  $2767 = $92 * $2766;
  $2768 = $2760 + $2767;
  $2769 = $89 * $2768;
  $2770 = $2765 - $2769;
  HEAPF32[$861>>2] = $2770;
  $2771 = +HEAPF32[$862>>2];
  $2772 = $109 * $2771;
  $2773 = +HEAPF32[$860>>2];
  $2774 = $92 * $2770;
  $2775 = $2760 + $2774;
  $2776 = $89 * $2775;
  $2777 = $2773 + $2776;
  $2778 = +HEAPF32[$863>>2];
  $2779 = $112 * $2778;
  $2780 = $2772 + $2779;
  $2781 = $105 * $2780;
  $2782 = $2777 - $2781;
  HEAPF32[$864>>2] = $2782;
  $2783 = +HEAPF32[$865>>2];
  $2784 = $55 * $2783;
  $2785 = +HEAPF32[$850>>2];
  $2786 = +HEAPF32[$851>>2];
  $2787 = $2785 + $2786;
  $2788 = $56 * $2787;
  $2789 = $2784 + $2788;
  HEAPF32[$866>>2] = $2789;
  $2790 = +HEAPF32[$867>>2];
  $2791 = $60 * $2790;
  $2792 = +HEAPF32[$868>>2];
  $2793 = $62 * $2792;
  $2794 = $2791 + $2793;
  $2795 = $50 * $2794;
  $2796 = $2789 - $2795;
  HEAPF32[$869>>2] = $2796;
  $2797 = +HEAPF32[$867>>2];
  $2798 = +HEAPF32[$868>>2];
  $2799 = $2798 * 2.0;
  $2800 = $2799 + $2796;
  $2801 = $2797 + $2800;
  $2802 = $50 * $2801;
  HEAPF32[$870>>2] = $2802;
  $2803 = +HEAPF32[$871>>2];
  $2804 = $120 * $2803;
  $2805 = $124 * $2801;
  $2806 = +HEAPF32[$872>>2];
  $2807 = $122 * $2806;
  $2808 = $2807 + $2805;
  $2809 = $121 * $2808;
  $2810 = $2804 + $2809;
  HEAPF32[$873>>2] = $2810;
  $2811 = +HEAPF32[$874>>2];
  $2812 = $80 * $2811;
  $2813 = +HEAPF32[$875>>2];
  $2814 = $77 * $2813;
  $2815 = $2812 + $2814;
  $2816 = $73 * $2815;
  $2817 = $2810 - $2816;
  HEAPF32[$876>>2] = $2817;
  $2818 = +HEAPF32[$877>>2];
  $2819 = $96 * $2818;
  $2820 = $75 * $2817;
  $2821 = +HEAPF32[$875>>2];
  $2822 = $126 * $2821;
  $2823 = $2822 + $2820;
  $2824 = +HEAPF32[$874>>2];
  $2825 = $75 * $2824;
  $2826 = $2825 + $2823;
  $2827 = $73 * $2826;
  $2828 = +HEAPF32[$878>>2];
  $2829 = $92 * $2828;
  $2830 = $2819 + $2829;
  $2831 = $89 * $2830;
  $2832 = $2827 - $2831;
  HEAPF32[$879>>2] = $2832;
  $2833 = +HEAPF32[$880>>2];
  $2834 = $109 * $2833;
  $2835 = +HEAPF32[$878>>2];
  $2836 = $92 * $2832;
  $2837 = $2819 + $2836;
  $2838 = $89 * $2837;
  $2839 = $2835 + $2838;
  $2840 = +HEAPF32[$881>>2];
  $2841 = $112 * $2840;
  $2842 = $2834 + $2841;
  $2843 = $105 * $2842;
  $2844 = $2839 - $2843;
  HEAPF32[$882>>2] = $2844;
  $2845 = +HEAPF32[$883>>2];
  $2846 = $120 * $2845;
  $2847 = +HEAPF32[$870>>2];
  $2848 = +HEAPF32[$872>>2];
  $2849 = $2847 + $2848;
  $2850 = $121 * $2849;
  $2851 = $2846 + $2850;
  HEAPF32[$884>>2] = $2851;
  $2852 = +HEAPF32[$885>>2];
  $2853 = $80 * $2852;
  $2854 = +HEAPF32[$886>>2];
  $2855 = $77 * $2854;
  $2856 = $2853 + $2855;
  $2857 = $73 * $2856;
  $2858 = $2851 - $2857;
  HEAPF32[$887>>2] = $2858;
  $2859 = +HEAPF32[$885>>2];
  $2860 = +HEAPF32[$886>>2];
  $2861 = $2860 * 2.0;
  $2862 = $2861 + $2858;
  $2863 = $2859 + $2862;
  $2864 = $73 * $2863;
  HEAPF32[$888>>2] = $2864;
  $2865 = +HEAPF32[$889>>2];
  $2866 = $134 * $2865;
  $2867 = $138 * $2863;
  $2868 = +HEAPF32[$890>>2];
  $2869 = $136 * $2868;
  $2870 = $2869 + $2867;
  $2871 = $135 * $2870;
  $2872 = $2866 + $2871;
  HEAPF32[$891>>2] = $2872;
  $2873 = +HEAPF32[$892>>2];
  $2874 = $92 * $2873;
  $2875 = +HEAPF32[$893>>2];
  $2876 = $96 * $2875;
  $2877 = $2874 + $2876;
  $2878 = $89 * $2877;
  $2879 = $2872 - $2878;
  HEAPF32[$894>>2] = $2879;
  $2880 = +HEAPF32[$895>>2];
  $2881 = $109 * $2880;
  $2882 = $94 * $2879;
  $2883 = +HEAPF32[$893>>2];
  $2884 = $140 * $2883;
  $2885 = $2884 + $2882;
  $2886 = +HEAPF32[$892>>2];
  $2887 = $94 * $2886;
  $2888 = $2887 + $2885;
  $2889 = $89 * $2888;
  $2890 = +HEAPF32[$896>>2];
  $2891 = $112 * $2890;
  $2892 = $2881 + $2891;
  $2893 = $105 * $2892;
  $2894 = $2889 - $2893;
  HEAPF32[$897>>2] = $2894;
  $2895 = +HEAPF32[$898>>2];
  $2896 = $134 * $2895;
  $2897 = +HEAPF32[$888>>2];
  $2898 = +HEAPF32[$890>>2];
  $2899 = $2897 + $2898;
  $2900 = $135 * $2899;
  $2901 = $2896 + $2900;
  HEAPF32[$899>>2] = $2901;
  $2902 = +HEAPF32[$900>>2];
  $2903 = $92 * $2902;
  $2904 = +HEAPF32[$901>>2];
  $2905 = $96 * $2904;
  $2906 = $2903 + $2905;
  $2907 = $89 * $2906;
  $2908 = $2901 - $2907;
  HEAPF32[$902>>2] = $2908;
  $2909 = +HEAPF32[$900>>2];
  $2910 = +HEAPF32[$901>>2];
  $2911 = $2910 * 2.0;
  $2912 = $2911 + $2908;
  $2913 = $2909 + $2912;
  $2914 = $89 * $2913;
  HEAPF32[$903>>2] = $2914;
  $2915 = +HEAPF32[$904>>2];
  $2916 = $148 * $2915;
  $2917 = $152 * $2913;
  $2918 = +HEAPF32[$905>>2];
  $2919 = $150 * $2918;
  $2920 = $2919 + $2917;
  $2921 = $149 * $2920;
  $2922 = $2916 + $2921;
  HEAPF32[$906>>2] = $2922;
  $2923 = +HEAPF32[$907>>2];
  $2924 = $112 * $2923;
  $2925 = +HEAPF32[$908>>2];
  $2926 = $109 * $2925;
  $2927 = $2924 + $2926;
  $2928 = $105 * $2927;
  $2929 = $2922 - $2928;
  HEAPF32[$909>>2] = $2929;
  $2930 = +HEAPF32[$910>>2];
  $2931 = $148 * $2930;
  $2932 = +HEAPF32[$903>>2];
  $2933 = +HEAPF32[$905>>2];
  $2934 = $2932 + $2933;
  $2935 = $149 * $2934;
  $2936 = $2931 + $2935;
  HEAPF32[$911>>2] = $2936;
  $2937 = +HEAPF32[$912>>2];
  $2938 = $112 * $2937;
  $2939 = +HEAPF32[$913>>2];
  $2940 = $109 * $2939;
  $2941 = $2938 + $2940;
  $2942 = $105 * $2941;
  $2943 = $2936 - $2942;
  HEAPF32[$914>>2] = $2943;
  $2944 = +HEAPF32[$863>>2];
  $2945 = +HEAPF32[$864>>2];
  $2946 = $112 * $2945;
  $2947 = $2772 + $2946;
  $2948 = $105 * $2947;
  $2949 = $2944 + $2948;
  $2950 = $247 * $2949;
  $2951 = +HEAPF32[$881>>2];
  $2952 = +HEAPF32[$882>>2];
  $2953 = $112 * $2952;
  $2954 = $2834 + $2953;
  $2955 = $105 * $2954;
  $2956 = $2951 + $2955;
  $2957 = $250 * $2956;
  $2958 = $2950 + $2957;
  $2959 = +HEAPF32[$896>>2];
  $2960 = +HEAPF32[$897>>2];
  $2961 = $112 * $2960;
  $2962 = $2881 + $2961;
  $2963 = $105 * $2962;
  $2964 = $2959 + $2963;
  $2965 = $253 * $2964;
  $2966 = $2958 + $2965;
  $2967 = +HEAPF32[$909>>2];
  $2968 = $107 * $2967;
  $2969 = +HEAPF32[$908>>2];
  $2970 = $154 * $2969;
  $2971 = $2968 + $2970;
  $2972 = +HEAPF32[$907>>2];
  $2973 = $107 * $2972;
  $2974 = $2971 + $2973;
  $2975 = $256 * $2974;
  $2976 = +HEAPF32[$912>>2];
  $2977 = +HEAPF32[$913>>2];
  $2978 = $2977 * 2.0;
  $2979 = $2943 + $2978;
  $2980 = $2976 + $2979;
  $2981 = $259 * $2980;
  $2982 = $2975 + $2981;
  $2983 = $105 * $2982;
  $2984 = $2966 + $2983;
  $2985 = +HEAPF32[$915>>2];
  $2986 = $55 * $2985;
  $2987 = +HEAPF32[$916>>2];
  $2988 = $46 * $2987;
  $2989 = +HEAPF32[$917>>2];
  $2990 = $57 * $2989;
  $2991 = $2988 + $2990;
  $2992 = $56 * $2991;
  $2993 = $2986 + $2992;
  HEAPF32[$918>>2] = $2993;
  $2994 = +HEAPF32[$919>>2];
  $2995 = $60 * $2994;
  $2996 = +HEAPF32[$920>>2];
  $2997 = $62 * $2996;
  $2998 = $2995 + $2997;
  $2999 = $50 * $2998;
  $3000 = $2993 - $2999;
  HEAPF32[$921>>2] = $3000;
  $3001 = +HEAPF32[$922>>2];
  $3002 = $77 * $3001;
  $3003 = $52 * $3000;
  $3004 = +HEAPF32[$920>>2];
  $3005 = $64 * $3004;
  $3006 = $3005 + $3003;
  $3007 = +HEAPF32[$919>>2];
  $3008 = $52 * $3007;
  $3009 = $3008 + $3006;
  $3010 = $50 * $3009;
  $3011 = +HEAPF32[$923>>2];
  $3012 = $80 * $3011;
  $3013 = $3002 + $3012;
  $3014 = $73 * $3013;
  $3015 = $3010 - $3014;
  HEAPF32[$924>>2] = $3015;
  $3016 = +HEAPF32[$925>>2];
  $3017 = $96 * $3016;
  $3018 = +HEAPF32[$923>>2];
  $3019 = $80 * $3015;
  $3020 = $3002 + $3019;
  $3021 = $73 * $3020;
  $3022 = $3018 + $3021;
  $3023 = +HEAPF32[$926>>2];
  $3024 = $92 * $3023;
  $3025 = $3017 + $3024;
  $3026 = $89 * $3025;
  $3027 = $3022 - $3026;
  HEAPF32[$927>>2] = $3027;
  $3028 = +HEAPF32[$928>>2];
  $3029 = $109 * $3028;
  $3030 = +HEAPF32[$926>>2];
  $3031 = $92 * $3027;
  $3032 = $3017 + $3031;
  $3033 = $89 * $3032;
  $3034 = $3030 + $3033;
  $3035 = +HEAPF32[$929>>2];
  $3036 = $112 * $3035;
  $3037 = $3029 + $3036;
  $3038 = $105 * $3037;
  $3039 = $3034 - $3038;
  HEAPF32[$930>>2] = $3039;
  $3040 = +HEAPF32[$931>>2];
  $3041 = $55 * $3040;
  $3042 = +HEAPF32[$916>>2];
  $3043 = +HEAPF32[$917>>2];
  $3044 = $3042 + $3043;
  $3045 = $56 * $3044;
  $3046 = $3041 + $3045;
  HEAPF32[$932>>2] = $3046;
  $3047 = +HEAPF32[$933>>2];
  $3048 = $60 * $3047;
  $3049 = +HEAPF32[$934>>2];
  $3050 = $62 * $3049;
  $3051 = $3048 + $3050;
  $3052 = $50 * $3051;
  $3053 = $3046 - $3052;
  HEAPF32[$935>>2] = $3053;
  $3054 = +HEAPF32[$933>>2];
  $3055 = +HEAPF32[$934>>2];
  $3056 = $3055 * 2.0;
  $3057 = $3056 + $3053;
  $3058 = $3054 + $3057;
  $3059 = $50 * $3058;
  HEAPF32[$936>>2] = $3059;
  $3060 = +HEAPF32[$937>>2];
  $3061 = $120 * $3060;
  $3062 = +HEAPF32[$938>>2];
  $3063 = $122 * $3062;
  $3064 = $124 * $3058;
  $3065 = $3063 + $3064;
  $3066 = $121 * $3065;
  $3067 = $3061 + $3066;
  HEAPF32[$939>>2] = $3067;
  $3068 = +HEAPF32[$940>>2];
  $3069 = $80 * $3068;
  $3070 = +HEAPF32[$941>>2];
  $3071 = $77 * $3070;
  $3072 = $3069 + $3071;
  $3073 = $73 * $3072;
  $3074 = $3067 - $3073;
  HEAPF32[$942>>2] = $3074;
  $3075 = +HEAPF32[$943>>2];
  $3076 = $96 * $3075;
  $3077 = $75 * $3074;
  $3078 = +HEAPF32[$941>>2];
  $3079 = $126 * $3078;
  $3080 = $3079 + $3077;
  $3081 = +HEAPF32[$940>>2];
  $3082 = $75 * $3081;
  $3083 = $3082 + $3080;
  $3084 = $73 * $3083;
  $3085 = +HEAPF32[$944>>2];
  $3086 = $92 * $3085;
  $3087 = $3076 + $3086;
  $3088 = $89 * $3087;
  $3089 = $3084 - $3088;
  HEAPF32[$945>>2] = $3089;
  $3090 = +HEAPF32[$946>>2];
  $3091 = $109 * $3090;
  $3092 = +HEAPF32[$944>>2];
  $3093 = $92 * $3089;
  $3094 = $3076 + $3093;
  $3095 = $89 * $3094;
  $3096 = $3092 + $3095;
  $3097 = +HEAPF32[$947>>2];
  $3098 = $112 * $3097;
  $3099 = $3091 + $3098;
  $3100 = $105 * $3099;
  $3101 = $3096 - $3100;
  HEAPF32[$948>>2] = $3101;
  $3102 = +HEAPF32[$949>>2];
  $3103 = $120 * $3102;
  $3104 = +HEAPF32[$936>>2];
  $3105 = +HEAPF32[$938>>2];
  $3106 = $3104 + $3105;
  $3107 = $121 * $3106;
  $3108 = $3103 + $3107;
  HEAPF32[$950>>2] = $3108;
  $3109 = +HEAPF32[$951>>2];
  $3110 = $80 * $3109;
  $3111 = +HEAPF32[$952>>2];
  $3112 = $77 * $3111;
  $3113 = $3110 + $3112;
  $3114 = $73 * $3113;
  $3115 = $3108 - $3114;
  HEAPF32[$953>>2] = $3115;
  $3116 = +HEAPF32[$951>>2];
  $3117 = +HEAPF32[$952>>2];
  $3118 = $3117 * 2.0;
  $3119 = $3118 + $3115;
  $3120 = $3116 + $3119;
  $3121 = $73 * $3120;
  HEAPF32[$954>>2] = $3121;
  $3122 = +HEAPF32[$955>>2];
  $3123 = $134 * $3122;
  $3124 = +HEAPF32[$956>>2];
  $3125 = $136 * $3124;
  $3126 = $138 * $3120;
  $3127 = $3125 + $3126;
  $3128 = $135 * $3127;
  $3129 = $3123 + $3128;
  HEAPF32[$957>>2] = $3129;
  $3130 = +HEAPF32[$958>>2];
  $3131 = $92 * $3130;
  $3132 = +HEAPF32[$959>>2];
  $3133 = $96 * $3132;
  $3134 = $3131 + $3133;
  $3135 = $89 * $3134;
  $3136 = $3129 - $3135;
  HEAPF32[$960>>2] = $3136;
  $3137 = +HEAPF32[$961>>2];
  $3138 = $109 * $3137;
  $3139 = $94 * $3136;
  $3140 = +HEAPF32[$959>>2];
  $3141 = $140 * $3140;
  $3142 = $3141 + $3139;
  $3143 = +HEAPF32[$958>>2];
  $3144 = $94 * $3143;
  $3145 = $3144 + $3142;
  $3146 = $89 * $3145;
  $3147 = +HEAPF32[$962>>2];
  $3148 = $112 * $3147;
  $3149 = $3138 + $3148;
  $3150 = $105 * $3149;
  $3151 = $3146 - $3150;
  HEAPF32[$963>>2] = $3151;
  $3152 = +HEAPF32[$964>>2];
  $3153 = $134 * $3152;
  $3154 = +HEAPF32[$954>>2];
  $3155 = +HEAPF32[$956>>2];
  $3156 = $3154 + $3155;
  $3157 = $135 * $3156;
  $3158 = $3153 + $3157;
  HEAPF32[$965>>2] = $3158;
  $3159 = +HEAPF32[$966>>2];
  $3160 = $92 * $3159;
  $3161 = +HEAPF32[$967>>2];
  $3162 = $96 * $3161;
  $3163 = $3160 + $3162;
  $3164 = $89 * $3163;
  $3165 = $3158 - $3164;
  HEAPF32[$968>>2] = $3165;
  $3166 = +HEAPF32[$966>>2];
  $3167 = +HEAPF32[$967>>2];
  $3168 = $3167 * 2.0;
  $3169 = $3168 + $3165;
  $3170 = $3166 + $3169;
  $3171 = $89 * $3170;
  HEAPF32[$969>>2] = $3171;
  $3172 = +HEAPF32[$970>>2];
  $3173 = $148 * $3172;
  $3174 = $152 * $3170;
  $3175 = +HEAPF32[$971>>2];
  $3176 = $150 * $3175;
  $3177 = $3176 + $3174;
  $3178 = $149 * $3177;
  $3179 = $3173 + $3178;
  HEAPF32[$972>>2] = $3179;
  $3180 = +HEAPF32[$973>>2];
  $3181 = $112 * $3180;
  $3182 = +HEAPF32[$974>>2];
  $3183 = $109 * $3182;
  $3184 = $3181 + $3183;
  $3185 = $105 * $3184;
  $3186 = $3179 - $3185;
  HEAPF32[$975>>2] = $3186;
  $3187 = +HEAPF32[$976>>2];
  $3188 = $148 * $3187;
  $3189 = +HEAPF32[$969>>2];
  $3190 = +HEAPF32[$971>>2];
  $3191 = $3189 + $3190;
  $3192 = $149 * $3191;
  $3193 = $3188 + $3192;
  HEAPF32[$977>>2] = $3193;
  $3194 = +HEAPF32[$978>>2];
  $3195 = $112 * $3194;
  $3196 = +HEAPF32[$979>>2];
  $3197 = $109 * $3196;
  $3198 = $3195 + $3197;
  $3199 = $105 * $3198;
  $3200 = $3193 - $3199;
  HEAPF32[$980>>2] = $3200;
  $3201 = +HEAPF32[$929>>2];
  $3202 = +HEAPF32[$930>>2];
  $3203 = $112 * $3202;
  $3204 = $3029 + $3203;
  $3205 = $105 * $3204;
  $3206 = $3201 + $3205;
  $3207 = $272 * $3206;
  $3208 = +HEAPF32[$947>>2];
  $3209 = +HEAPF32[$948>>2];
  $3210 = $112 * $3209;
  $3211 = $3091 + $3210;
  $3212 = $105 * $3211;
  $3213 = $3208 + $3212;
  $3214 = $275 * $3213;
  $3215 = $3207 + $3214;
  $3216 = +HEAPF32[$962>>2];
  $3217 = +HEAPF32[$963>>2];
  $3218 = $112 * $3217;
  $3219 = $3138 + $3218;
  $3220 = $105 * $3219;
  $3221 = $3216 + $3220;
  $3222 = $278 * $3221;
  $3223 = $3215 + $3222;
  $3224 = +HEAPF32[$975>>2];
  $3225 = $107 * $3224;
  $3226 = +HEAPF32[$974>>2];
  $3227 = $154 * $3226;
  $3228 = $3225 + $3227;
  $3229 = +HEAPF32[$973>>2];
  $3230 = $107 * $3229;
  $3231 = $3228 + $3230;
  $3232 = $281 * $3231;
  $3233 = +HEAPF32[$978>>2];
  $3234 = +HEAPF32[$979>>2];
  $3235 = $3234 * 2.0;
  $3236 = $3200 + $3235;
  $3237 = $3233 + $3236;
  $3238 = $284 * $3237;
  $3239 = $3232 + $3238;
  $3240 = $105 * $3239;
  $3241 = $3223 + $3240;
  $3242 = $2984 + $3241;
  $3243 = +HEAPF32[$981>>2];
  $3244 = $55 * $3243;
  $3245 = +HEAPF32[$982>>2];
  $3246 = $46 * $3245;
  $3247 = +HEAPF32[$983>>2];
  $3248 = $57 * $3247;
  $3249 = $3246 + $3248;
  $3250 = $56 * $3249;
  $3251 = $3244 + $3250;
  HEAPF32[$984>>2] = $3251;
  $3252 = +HEAPF32[$985>>2];
  $3253 = $60 * $3252;
  $3254 = +HEAPF32[$986>>2];
  $3255 = $62 * $3254;
  $3256 = $3253 + $3255;
  $3257 = $50 * $3256;
  $3258 = $3251 - $3257;
  HEAPF32[$987>>2] = $3258;
  $3259 = +HEAPF32[$988>>2];
  $3260 = $77 * $3259;
  $3261 = $52 * $3258;
  $3262 = +HEAPF32[$986>>2];
  $3263 = $64 * $3262;
  $3264 = $3263 + $3261;
  $3265 = +HEAPF32[$985>>2];
  $3266 = $52 * $3265;
  $3267 = $3266 + $3264;
  $3268 = $50 * $3267;
  $3269 = +HEAPF32[$989>>2];
  $3270 = $80 * $3269;
  $3271 = $3260 + $3270;
  $3272 = $73 * $3271;
  $3273 = $3268 - $3272;
  HEAPF32[$990>>2] = $3273;
  $3274 = +HEAPF32[$991>>2];
  $3275 = $96 * $3274;
  $3276 = +HEAPF32[$989>>2];
  $3277 = $80 * $3273;
  $3278 = $3260 + $3277;
  $3279 = $73 * $3278;
  $3280 = $3276 + $3279;
  $3281 = +HEAPF32[$992>>2];
  $3282 = $92 * $3281;
  $3283 = $3275 + $3282;
  $3284 = $89 * $3283;
  $3285 = $3280 - $3284;
  HEAPF32[$993>>2] = $3285;
  $3286 = +HEAPF32[$994>>2];
  $3287 = $109 * $3286;
  $3288 = +HEAPF32[$992>>2];
  $3289 = $92 * $3285;
  $3290 = $3275 + $3289;
  $3291 = $89 * $3290;
  $3292 = $3288 + $3291;
  $3293 = +HEAPF32[$995>>2];
  $3294 = $112 * $3293;
  $3295 = $3287 + $3294;
  $3296 = $105 * $3295;
  $3297 = $3292 - $3296;
  HEAPF32[$996>>2] = $3297;
  $3298 = +HEAPF32[$997>>2];
  $3299 = $55 * $3298;
  $3300 = +HEAPF32[$982>>2];
  $3301 = +HEAPF32[$983>>2];
  $3302 = $3300 + $3301;
  $3303 = $56 * $3302;
  $3304 = $3299 + $3303;
  HEAPF32[$998>>2] = $3304;
  $3305 = +HEAPF32[$999>>2];
  $3306 = $60 * $3305;
  $3307 = +HEAPF32[$1000>>2];
  $3308 = $62 * $3307;
  $3309 = $3306 + $3308;
  $3310 = $50 * $3309;
  $3311 = $3304 - $3310;
  HEAPF32[$1001>>2] = $3311;
  $3312 = +HEAPF32[$999>>2];
  $3313 = +HEAPF32[$1000>>2];
  $3314 = $3313 * 2.0;
  $3315 = $3314 + $3311;
  $3316 = $3312 + $3315;
  $3317 = $50 * $3316;
  HEAPF32[$1002>>2] = $3317;
  $3318 = +HEAPF32[$1003>>2];
  $3319 = $120 * $3318;
  $3320 = $124 * $3316;
  $3321 = +HEAPF32[$1004>>2];
  $3322 = $122 * $3321;
  $3323 = $3322 + $3320;
  $3324 = $121 * $3323;
  $3325 = $3319 + $3324;
  HEAPF32[$1005>>2] = $3325;
  $3326 = +HEAPF32[$1006>>2];
  $3327 = $80 * $3326;
  $3328 = +HEAPF32[$1007>>2];
  $3329 = $77 * $3328;
  $3330 = $3327 + $3329;
  $3331 = $73 * $3330;
  $3332 = $3325 - $3331;
  HEAPF32[$1008>>2] = $3332;
  $3333 = +HEAPF32[$1009>>2];
  $3334 = $96 * $3333;
  $3335 = $75 * $3332;
  $3336 = +HEAPF32[$1007>>2];
  $3337 = $126 * $3336;
  $3338 = $3337 + $3335;
  $3339 = +HEAPF32[$1006>>2];
  $3340 = $75 * $3339;
  $3341 = $3340 + $3338;
  $3342 = $73 * $3341;
  $3343 = +HEAPF32[$1010>>2];
  $3344 = $92 * $3343;
  $3345 = $3334 + $3344;
  $3346 = $89 * $3345;
  $3347 = $3342 - $3346;
  HEAPF32[$1011>>2] = $3347;
  $3348 = +HEAPF32[$1012>>2];
  $3349 = $109 * $3348;
  $3350 = +HEAPF32[$1010>>2];
  $3351 = $92 * $3347;
  $3352 = $3334 + $3351;
  $3353 = $89 * $3352;
  $3354 = $3350 + $3353;
  $3355 = +HEAPF32[$1013>>2];
  $3356 = $112 * $3355;
  $3357 = $3349 + $3356;
  $3358 = $105 * $3357;
  $3359 = $3354 - $3358;
  HEAPF32[$1014>>2] = $3359;
  $3360 = +HEAPF32[$1015>>2];
  $3361 = $120 * $3360;
  $3362 = +HEAPF32[$1002>>2];
  $3363 = +HEAPF32[$1004>>2];
  $3364 = $3362 + $3363;
  $3365 = $121 * $3364;
  $3366 = $3361 + $3365;
  HEAPF32[$1016>>2] = $3366;
  $3367 = +HEAPF32[$1017>>2];
  $3368 = $80 * $3367;
  $3369 = +HEAPF32[$1018>>2];
  $3370 = $77 * $3369;
  $3371 = $3368 + $3370;
  $3372 = $73 * $3371;
  $3373 = $3366 - $3372;
  HEAPF32[$1019>>2] = $3373;
  $3374 = +HEAPF32[$1017>>2];
  $3375 = +HEAPF32[$1018>>2];
  $3376 = $3375 * 2.0;
  $3377 = $3376 + $3373;
  $3378 = $3374 + $3377;
  $3379 = $73 * $3378;
  HEAPF32[$1020>>2] = $3379;
  $3380 = +HEAPF32[$1021>>2];
  $3381 = $134 * $3380;
  $3382 = $138 * $3378;
  $3383 = +HEAPF32[$1022>>2];
  $3384 = $136 * $3383;
  $3385 = $3384 + $3382;
  $3386 = $135 * $3385;
  $3387 = $3381 + $3386;
  HEAPF32[$1023>>2] = $3387;
  $3388 = +HEAPF32[$1024>>2];
  $3389 = $92 * $3388;
  $3390 = +HEAPF32[$1025>>2];
  $3391 = $96 * $3390;
  $3392 = $3389 + $3391;
  $3393 = $89 * $3392;
  $3394 = $3387 - $3393;
  HEAPF32[$1026>>2] = $3394;
  $3395 = +HEAPF32[$1027>>2];
  $3396 = $109 * $3395;
  $3397 = $94 * $3394;
  $3398 = +HEAPF32[$1025>>2];
  $3399 = $140 * $3398;
  $3400 = $3399 + $3397;
  $3401 = +HEAPF32[$1024>>2];
  $3402 = $94 * $3401;
  $3403 = $3402 + $3400;
  $3404 = $89 * $3403;
  $3405 = +HEAPF32[$1028>>2];
  $3406 = $112 * $3405;
  $3407 = $3396 + $3406;
  $3408 = $105 * $3407;
  $3409 = $3404 - $3408;
  HEAPF32[$1029>>2] = $3409;
  $3410 = +HEAPF32[$1030>>2];
  $3411 = $134 * $3410;
  $3412 = +HEAPF32[$1020>>2];
  $3413 = +HEAPF32[$1022>>2];
  $3414 = $3412 + $3413;
  $3415 = $135 * $3414;
  $3416 = $3411 + $3415;
  HEAPF32[$1031>>2] = $3416;
  $3417 = +HEAPF32[$1032>>2];
  $3418 = $92 * $3417;
  $3419 = +HEAPF32[$1033>>2];
  $3420 = $96 * $3419;
  $3421 = $3418 + $3420;
  $3422 = $89 * $3421;
  $3423 = $3416 - $3422;
  HEAPF32[$1034>>2] = $3423;
  $3424 = +HEAPF32[$1032>>2];
  $3425 = +HEAPF32[$1033>>2];
  $3426 = $3425 * 2.0;
  $3427 = $3426 + $3423;
  $3428 = $3424 + $3427;
  $3429 = $89 * $3428;
  HEAPF32[$1035>>2] = $3429;
  $3430 = +HEAPF32[$1036>>2];
  $3431 = $148 * $3430;
  $3432 = $152 * $3428;
  $3433 = +HEAPF32[$1037>>2];
  $3434 = $150 * $3433;
  $3435 = $3434 + $3432;
  $3436 = $149 * $3435;
  $3437 = $3431 + $3436;
  HEAPF32[$1038>>2] = $3437;
  $3438 = +HEAPF32[$1039>>2];
  $3439 = $112 * $3438;
  $3440 = +HEAPF32[$1040>>2];
  $3441 = $109 * $3440;
  $3442 = $3439 + $3441;
  $3443 = $105 * $3442;
  $3444 = $3437 - $3443;
  HEAPF32[$1041>>2] = $3444;
  $3445 = +HEAPF32[$1042>>2];
  $3446 = $148 * $3445;
  $3447 = +HEAPF32[$1035>>2];
  $3448 = +HEAPF32[$1037>>2];
  $3449 = $3447 + $3448;
  $3450 = $149 * $3449;
  $3451 = $3446 + $3450;
  HEAPF32[$1043>>2] = $3451;
  $3452 = +HEAPF32[$1044>>2];
  $3453 = $112 * $3452;
  $3454 = +HEAPF32[$1045>>2];
  $3455 = $109 * $3454;
  $3456 = $3453 + $3455;
  $3457 = $105 * $3456;
  $3458 = $3451 - $3457;
  HEAPF32[$1046>>2] = $3458;
  $3459 = +HEAPF32[$995>>2];
  $3460 = +HEAPF32[$996>>2];
  $3461 = $112 * $3460;
  $3462 = $3287 + $3461;
  $3463 = $105 * $3462;
  $3464 = $3459 + $3463;
  $3465 = $297 * $3464;
  $3466 = +HEAPF32[$1013>>2];
  $3467 = +HEAPF32[$1014>>2];
  $3468 = $112 * $3467;
  $3469 = $3349 + $3468;
  $3470 = $105 * $3469;
  $3471 = $3466 + $3470;
  $3472 = $300 * $3471;
  $3473 = $3465 + $3472;
  $3474 = +HEAPF32[$1028>>2];
  $3475 = +HEAPF32[$1029>>2];
  $3476 = $112 * $3475;
  $3477 = $3396 + $3476;
  $3478 = $105 * $3477;
  $3479 = $3474 + $3478;
  $3480 = $303 * $3479;
  $3481 = $3473 + $3480;
  $3482 = +HEAPF32[$1041>>2];
  $3483 = $107 * $3482;
  $3484 = +HEAPF32[$1040>>2];
  $3485 = $154 * $3484;
  $3486 = $3483 + $3485;
  $3487 = +HEAPF32[$1039>>2];
  $3488 = $107 * $3487;
  $3489 = $3486 + $3488;
  $3490 = $306 * $3489;
  $3491 = +HEAPF32[$1044>>2];
  $3492 = +HEAPF32[$1045>>2];
  $3493 = $3492 * 2.0;
  $3494 = $3458 + $3493;
  $3495 = $3491 + $3494;
  $3496 = $309 * $3495;
  $3497 = $3490 + $3496;
  $3498 = $105 * $3497;
  $3499 = $3481 + $3498;
  $3500 = +HEAPF32[$1047>>2];
  $3501 = $55 * $3500;
  $3502 = +HEAPF32[$1048>>2];
  $3503 = $46 * $3502;
  $3504 = +HEAPF32[$1049>>2];
  $3505 = $57 * $3504;
  $3506 = $3503 + $3505;
  $3507 = $56 * $3506;
  $3508 = $3501 + $3507;
  HEAPF32[$1050>>2] = $3508;
  $3509 = +HEAPF32[$1051>>2];
  $3510 = $60 * $3509;
  $3511 = +HEAPF32[$1052>>2];
  $3512 = $62 * $3511;
  $3513 = $3510 + $3512;
  $3514 = $50 * $3513;
  $3515 = $3508 - $3514;
  HEAPF32[$1053>>2] = $3515;
  $3516 = +HEAPF32[$1054>>2];
  $3517 = $77 * $3516;
  $3518 = $52 * $3515;
  $3519 = +HEAPF32[$1052>>2];
  $3520 = $64 * $3519;
  $3521 = $3520 + $3518;
  $3522 = +HEAPF32[$1051>>2];
  $3523 = $52 * $3522;
  $3524 = $3523 + $3521;
  $3525 = $50 * $3524;
  $3526 = +HEAPF32[$1055>>2];
  $3527 = $80 * $3526;
  $3528 = $3517 + $3527;
  $3529 = $73 * $3528;
  $3530 = $3525 - $3529;
  HEAPF32[$1056>>2] = $3530;
  $3531 = +HEAPF32[$1057>>2];
  $3532 = $96 * $3531;
  $3533 = +HEAPF32[$1055>>2];
  $3534 = $80 * $3530;
  $3535 = $3517 + $3534;
  $3536 = $73 * $3535;
  $3537 = $3533 + $3536;
  $3538 = +HEAPF32[$1058>>2];
  $3539 = $92 * $3538;
  $3540 = $3532 + $3539;
  $3541 = $89 * $3540;
  $3542 = $3537 - $3541;
  HEAPF32[$1059>>2] = $3542;
  $3543 = +HEAPF32[$1060>>2];
  $3544 = $109 * $3543;
  $3545 = +HEAPF32[$1058>>2];
  $3546 = $92 * $3542;
  $3547 = $3532 + $3546;
  $3548 = $89 * $3547;
  $3549 = $3545 + $3548;
  $3550 = +HEAPF32[$1061>>2];
  $3551 = $112 * $3550;
  $3552 = $3544 + $3551;
  $3553 = $105 * $3552;
  $3554 = $3549 - $3553;
  HEAPF32[$1062>>2] = $3554;
  $3555 = +HEAPF32[$1063>>2];
  $3556 = $55 * $3555;
  $3557 = +HEAPF32[$1048>>2];
  $3558 = +HEAPF32[$1049>>2];
  $3559 = $3557 + $3558;
  $3560 = $56 * $3559;
  $3561 = $3556 + $3560;
  HEAPF32[$1064>>2] = $3561;
  $3562 = +HEAPF32[$1065>>2];
  $3563 = $60 * $3562;
  $3564 = +HEAPF32[$1066>>2];
  $3565 = $62 * $3564;
  $3566 = $3563 + $3565;
  $3567 = $50 * $3566;
  $3568 = $3561 - $3567;
  HEAPF32[$1067>>2] = $3568;
  $3569 = +HEAPF32[$1065>>2];
  $3570 = +HEAPF32[$1066>>2];
  $3571 = $3570 * 2.0;
  $3572 = $3571 + $3568;
  $3573 = $3569 + $3572;
  $3574 = $50 * $3573;
  HEAPF32[$1068>>2] = $3574;
  $3575 = +HEAPF32[$1069>>2];
  $3576 = $120 * $3575;
  $3577 = $124 * $3573;
  $3578 = +HEAPF32[$1070>>2];
  $3579 = $122 * $3578;
  $3580 = $3579 + $3577;
  $3581 = $121 * $3580;
  $3582 = $3576 + $3581;
  HEAPF32[$1071>>2] = $3582;
  $3583 = +HEAPF32[$1072>>2];
  $3584 = $80 * $3583;
  $3585 = +HEAPF32[$1073>>2];
  $3586 = $77 * $3585;
  $3587 = $3584 + $3586;
  $3588 = $73 * $3587;
  $3589 = $3582 - $3588;
  HEAPF32[$1074>>2] = $3589;
  $3590 = +HEAPF32[$1075>>2];
  $3591 = $96 * $3590;
  $3592 = $75 * $3589;
  $3593 = +HEAPF32[$1073>>2];
  $3594 = $126 * $3593;
  $3595 = $3594 + $3592;
  $3596 = +HEAPF32[$1072>>2];
  $3597 = $75 * $3596;
  $3598 = $3597 + $3595;
  $3599 = $73 * $3598;
  $3600 = +HEAPF32[$1076>>2];
  $3601 = $92 * $3600;
  $3602 = $3591 + $3601;
  $3603 = $89 * $3602;
  $3604 = $3599 - $3603;
  HEAPF32[$1077>>2] = $3604;
  $3605 = +HEAPF32[$1078>>2];
  $3606 = $109 * $3605;
  $3607 = +HEAPF32[$1076>>2];
  $3608 = $92 * $3604;
  $3609 = $3591 + $3608;
  $3610 = $89 * $3609;
  $3611 = $3607 + $3610;
  $3612 = +HEAPF32[$1079>>2];
  $3613 = $112 * $3612;
  $3614 = $3606 + $3613;
  $3615 = $105 * $3614;
  $3616 = $3611 - $3615;
  HEAPF32[$1080>>2] = $3616;
  $3617 = +HEAPF32[$1081>>2];
  $3618 = $120 * $3617;
  $3619 = +HEAPF32[$1068>>2];
  $3620 = +HEAPF32[$1070>>2];
  $3621 = $3619 + $3620;
  $3622 = $121 * $3621;
  $3623 = $3618 + $3622;
  HEAPF32[$1082>>2] = $3623;
  $3624 = +HEAPF32[$1083>>2];
  $3625 = $80 * $3624;
  $3626 = +HEAPF32[$1084>>2];
  $3627 = $77 * $3626;
  $3628 = $3625 + $3627;
  $3629 = $73 * $3628;
  $3630 = $3623 - $3629;
  HEAPF32[$1085>>2] = $3630;
  $3631 = +HEAPF32[$1083>>2];
  $3632 = +HEAPF32[$1084>>2];
  $3633 = $3632 * 2.0;
  $3634 = $3633 + $3630;
  $3635 = $3631 + $3634;
  $3636 = $73 * $3635;
  HEAPF32[$1086>>2] = $3636;
  $3637 = +HEAPF32[$1087>>2];
  $3638 = $134 * $3637;
  $3639 = $138 * $3635;
  $3640 = +HEAPF32[$1088>>2];
  $3641 = $136 * $3640;
  $3642 = $3641 + $3639;
  $3643 = $135 * $3642;
  $3644 = $3638 + $3643;
  HEAPF32[$1089>>2] = $3644;
  $3645 = +HEAPF32[$1090>>2];
  $3646 = $92 * $3645;
  $3647 = +HEAPF32[$1091>>2];
  $3648 = $96 * $3647;
  $3649 = $3646 + $3648;
  $3650 = $89 * $3649;
  $3651 = $3644 - $3650;
  HEAPF32[$1092>>2] = $3651;
  $3652 = +HEAPF32[$1093>>2];
  $3653 = $109 * $3652;
  $3654 = $94 * $3651;
  $3655 = +HEAPF32[$1091>>2];
  $3656 = $140 * $3655;
  $3657 = $3656 + $3654;
  $3658 = +HEAPF32[$1090>>2];
  $3659 = $94 * $3658;
  $3660 = $3659 + $3657;
  $3661 = $89 * $3660;
  $3662 = +HEAPF32[$1094>>2];
  $3663 = $112 * $3662;
  $3664 = $3653 + $3663;
  $3665 = $105 * $3664;
  $3666 = $3661 - $3665;
  HEAPF32[$1095>>2] = $3666;
  $3667 = +HEAPF32[$1096>>2];
  $3668 = $134 * $3667;
  $3669 = +HEAPF32[$1086>>2];
  $3670 = +HEAPF32[$1088>>2];
  $3671 = $3669 + $3670;
  $3672 = $135 * $3671;
  $3673 = $3668 + $3672;
  HEAPF32[$1097>>2] = $3673;
  $3674 = +HEAPF32[$1098>>2];
  $3675 = $92 * $3674;
  $3676 = +HEAPF32[$1099>>2];
  $3677 = $96 * $3676;
  $3678 = $3675 + $3677;
  $3679 = $89 * $3678;
  $3680 = $3673 - $3679;
  HEAPF32[$1100>>2] = $3680;
  $3681 = +HEAPF32[$1098>>2];
  $3682 = +HEAPF32[$1099>>2];
  $3683 = $3682 * 2.0;
  $3684 = $3683 + $3680;
  $3685 = $3681 + $3684;
  $3686 = $89 * $3685;
  HEAPF32[$1101>>2] = $3686;
  $3687 = +HEAPF32[$1102>>2];
  $3688 = $148 * $3687;
  $3689 = $152 * $3685;
  $3690 = +HEAPF32[$1103>>2];
  $3691 = $150 * $3690;
  $3692 = $3691 + $3689;
  $3693 = $149 * $3692;
  $3694 = $3688 + $3693;
  HEAPF32[$1104>>2] = $3694;
  $3695 = +HEAPF32[$1105>>2];
  $3696 = $112 * $3695;
  $3697 = +HEAPF32[$1106>>2];
  $3698 = $109 * $3697;
  $3699 = $3696 + $3698;
  $3700 = $105 * $3699;
  $3701 = $3694 - $3700;
  HEAPF32[$1107>>2] = $3701;
  $3702 = +HEAPF32[$1108>>2];
  $3703 = $148 * $3702;
  $3704 = +HEAPF32[$1101>>2];
  $3705 = +HEAPF32[$1103>>2];
  $3706 = $3704 + $3705;
  $3707 = $149 * $3706;
  $3708 = $3703 + $3707;
  HEAPF32[$1109>>2] = $3708;
  $3709 = +HEAPF32[$1110>>2];
  $3710 = $112 * $3709;
  $3711 = +HEAPF32[$1111>>2];
  $3712 = $109 * $3711;
  $3713 = $3710 + $3712;
  $3714 = $105 * $3713;
  $3715 = $3708 - $3714;
  HEAPF32[$1112>>2] = $3715;
  $3716 = +HEAPF32[$1061>>2];
  $3717 = +HEAPF32[$1062>>2];
  $3718 = $112 * $3717;
  $3719 = $3544 + $3718;
  $3720 = $105 * $3719;
  $3721 = $3716 + $3720;
  $3722 = $322 * $3721;
  $3723 = +HEAPF32[$1079>>2];
  $3724 = +HEAPF32[$1080>>2];
  $3725 = $112 * $3724;
  $3726 = $3606 + $3725;
  $3727 = $105 * $3726;
  $3728 = $3723 + $3727;
  $3729 = $325 * $3728;
  $3730 = $3722 + $3729;
  $3731 = +HEAPF32[$1094>>2];
  $3732 = +HEAPF32[$1095>>2];
  $3733 = $112 * $3732;
  $3734 = $3653 + $3733;
  $3735 = $105 * $3734;
  $3736 = $3731 + $3735;
  $3737 = $328 * $3736;
  $3738 = $3730 + $3737;
  $3739 = +HEAPF32[$1107>>2];
  $3740 = $107 * $3739;
  $3741 = +HEAPF32[$1106>>2];
  $3742 = $154 * $3741;
  $3743 = $3740 + $3742;
  $3744 = +HEAPF32[$1105>>2];
  $3745 = $107 * $3744;
  $3746 = $3743 + $3745;
  $3747 = $331 * $3746;
  $3748 = +HEAPF32[$1110>>2];
  $3749 = +HEAPF32[$1111>>2];
  $3750 = $3749 * 2.0;
  $3751 = $3715 + $3750;
  $3752 = $3748 + $3751;
  $3753 = $334 * $3752;
  $3754 = $3747 + $3753;
  $3755 = $105 * $3754;
  $3756 = $3738 + $3755;
  $3757 = $3499 + $3756;
  $3758 = $3242 + $3757;
  $3759 = $2727 + $3758;
  $3760 = +HEAPF32[$1113>>2];
  $3761 = $55 * $3760;
  $3762 = +HEAPF32[$1114>>2];
  $3763 = $46 * $3762;
  $3764 = +HEAPF32[$1115>>2];
  $3765 = $57 * $3764;
  $3766 = $3763 + $3765;
  $3767 = $56 * $3766;
  $3768 = $3761 + $3767;
  HEAPF32[$1116>>2] = $3768;
  $3769 = +HEAPF32[$1117>>2];
  $3770 = $60 * $3769;
  $3771 = +HEAPF32[$1118>>2];
  $3772 = $62 * $3771;
  $3773 = $3770 + $3772;
  $3774 = $50 * $3773;
  $3775 = $3768 - $3774;
  HEAPF32[$1119>>2] = $3775;
  $3776 = +HEAPF32[$1120>>2];
  $3777 = $77 * $3776;
  $3778 = $52 * $3775;
  $3779 = +HEAPF32[$1118>>2];
  $3780 = $64 * $3779;
  $3781 = $3780 + $3778;
  $3782 = +HEAPF32[$1117>>2];
  $3783 = $52 * $3782;
  $3784 = $3783 + $3781;
  $3785 = $50 * $3784;
  $3786 = +HEAPF32[$1121>>2];
  $3787 = $80 * $3786;
  $3788 = $3777 + $3787;
  $3789 = $73 * $3788;
  $3790 = $3785 - $3789;
  HEAPF32[$1122>>2] = $3790;
  $3791 = +HEAPF32[$1123>>2];
  $3792 = $96 * $3791;
  $3793 = +HEAPF32[$1121>>2];
  $3794 = $80 * $3790;
  $3795 = $3777 + $3794;
  $3796 = $73 * $3795;
  $3797 = $3793 + $3796;
  $3798 = +HEAPF32[$1124>>2];
  $3799 = $92 * $3798;
  $3800 = $3792 + $3799;
  $3801 = $89 * $3800;
  $3802 = $3797 - $3801;
  HEAPF32[$1125>>2] = $3802;
  $3803 = +HEAPF32[$1126>>2];
  $3804 = $109 * $3803;
  $3805 = +HEAPF32[$1124>>2];
  $3806 = $92 * $3802;
  $3807 = $3792 + $3806;
  $3808 = $89 * $3807;
  $3809 = $3805 + $3808;
  $3810 = +HEAPF32[$1127>>2];
  $3811 = $112 * $3810;
  $3812 = $3804 + $3811;
  $3813 = $105 * $3812;
  $3814 = $3809 - $3813;
  HEAPF32[$1128>>2] = $3814;
  $3815 = +HEAPF32[$1129>>2];
  $3816 = $55 * $3815;
  $3817 = +HEAPF32[$1114>>2];
  $3818 = +HEAPF32[$1115>>2];
  $3819 = $3817 + $3818;
  $3820 = $56 * $3819;
  $3821 = $3816 + $3820;
  HEAPF32[$1130>>2] = $3821;
  $3822 = +HEAPF32[$1131>>2];
  $3823 = $60 * $3822;
  $3824 = +HEAPF32[$1132>>2];
  $3825 = $62 * $3824;
  $3826 = $3823 + $3825;
  $3827 = $50 * $3826;
  $3828 = $3821 - $3827;
  HEAPF32[$1133>>2] = $3828;
  $3829 = +HEAPF32[$1131>>2];
  $3830 = +HEAPF32[$1132>>2];
  $3831 = $3830 * 2.0;
  $3832 = $3831 + $3828;
  $3833 = $3829 + $3832;
  $3834 = $50 * $3833;
  HEAPF32[$1134>>2] = $3834;
  $3835 = +HEAPF32[$1135>>2];
  $3836 = $120 * $3835;
  $3837 = +HEAPF32[$1136>>2];
  $3838 = $122 * $3837;
  $3839 = $124 * $3833;
  $3840 = $3838 + $3839;
  $3841 = $121 * $3840;
  $3842 = $3836 + $3841;
  HEAPF32[$1137>>2] = $3842;
  $3843 = +HEAPF32[$1138>>2];
  $3844 = $80 * $3843;
  $3845 = +HEAPF32[$1139>>2];
  $3846 = $77 * $3845;
  $3847 = $3844 + $3846;
  $3848 = $73 * $3847;
  $3849 = $3842 - $3848;
  HEAPF32[$1140>>2] = $3849;
  $3850 = +HEAPF32[$1141>>2];
  $3851 = $96 * $3850;
  $3852 = $75 * $3849;
  $3853 = +HEAPF32[$1139>>2];
  $3854 = $126 * $3853;
  $3855 = $3854 + $3852;
  $3856 = +HEAPF32[$1138>>2];
  $3857 = $75 * $3856;
  $3858 = $3857 + $3855;
  $3859 = $73 * $3858;
  $3860 = +HEAPF32[$1142>>2];
  $3861 = $92 * $3860;
  $3862 = $3851 + $3861;
  $3863 = $89 * $3862;
  $3864 = $3859 - $3863;
  HEAPF32[$1143>>2] = $3864;
  $3865 = +HEAPF32[$1144>>2];
  $3866 = $109 * $3865;
  $3867 = +HEAPF32[$1142>>2];
  $3868 = $92 * $3864;
  $3869 = $3851 + $3868;
  $3870 = $89 * $3869;
  $3871 = $3867 + $3870;
  $3872 = +HEAPF32[$1145>>2];
  $3873 = $112 * $3872;
  $3874 = $3866 + $3873;
  $3875 = $105 * $3874;
  $3876 = $3871 - $3875;
  HEAPF32[$1146>>2] = $3876;
  $3877 = +HEAPF32[$1147>>2];
  $3878 = $120 * $3877;
  $3879 = +HEAPF32[$1134>>2];
  $3880 = +HEAPF32[$1136>>2];
  $3881 = $3879 + $3880;
  $3882 = $121 * $3881;
  $3883 = $3878 + $3882;
  HEAPF32[$1148>>2] = $3883;
  $3884 = +HEAPF32[$1149>>2];
  $3885 = $80 * $3884;
  $3886 = +HEAPF32[$1150>>2];
  $3887 = $77 * $3886;
  $3888 = $3885 + $3887;
  $3889 = $73 * $3888;
  $3890 = $3883 - $3889;
  HEAPF32[$1151>>2] = $3890;
  $3891 = +HEAPF32[$1149>>2];
  $3892 = +HEAPF32[$1150>>2];
  $3893 = $3892 * 2.0;
  $3894 = $3893 + $3890;
  $3895 = $3891 + $3894;
  $3896 = $73 * $3895;
  HEAPF32[$1152>>2] = $3896;
  $3897 = +HEAPF32[$1153>>2];
  $3898 = $134 * $3897;
  $3899 = +HEAPF32[$1154>>2];
  $3900 = $136 * $3899;
  $3901 = $138 * $3895;
  $3902 = $3900 + $3901;
  $3903 = $135 * $3902;
  $3904 = $3898 + $3903;
  HEAPF32[$1155>>2] = $3904;
  $3905 = +HEAPF32[$1156>>2];
  $3906 = $92 * $3905;
  $3907 = +HEAPF32[$1157>>2];
  $3908 = $96 * $3907;
  $3909 = $3906 + $3908;
  $3910 = $89 * $3909;
  $3911 = $3904 - $3910;
  HEAPF32[$1158>>2] = $3911;
  $3912 = +HEAPF32[$1159>>2];
  $3913 = $109 * $3912;
  $3914 = $94 * $3911;
  $3915 = +HEAPF32[$1157>>2];
  $3916 = $140 * $3915;
  $3917 = $3916 + $3914;
  $3918 = +HEAPF32[$1156>>2];
  $3919 = $94 * $3918;
  $3920 = $3919 + $3917;
  $3921 = $89 * $3920;
  $3922 = +HEAPF32[$1160>>2];
  $3923 = $112 * $3922;
  $3924 = $3913 + $3923;
  $3925 = $105 * $3924;
  $3926 = $3921 - $3925;
  HEAPF32[$1161>>2] = $3926;
  $3927 = +HEAPF32[$1162>>2];
  $3928 = $134 * $3927;
  $3929 = +HEAPF32[$1152>>2];
  $3930 = +HEAPF32[$1154>>2];
  $3931 = $3929 + $3930;
  $3932 = $135 * $3931;
  $3933 = $3928 + $3932;
  HEAPF32[$1163>>2] = $3933;
  $3934 = +HEAPF32[$1164>>2];
  $3935 = $92 * $3934;
  $3936 = +HEAPF32[$1165>>2];
  $3937 = $96 * $3936;
  $3938 = $3935 + $3937;
  $3939 = $89 * $3938;
  $3940 = $3933 - $3939;
  HEAPF32[$1166>>2] = $3940;
  $3941 = +HEAPF32[$1164>>2];
  $3942 = +HEAPF32[$1165>>2];
  $3943 = $3942 * 2.0;
  $3944 = $3943 + $3940;
  $3945 = $3941 + $3944;
  $3946 = $89 * $3945;
  HEAPF32[$1167>>2] = $3946;
  $3947 = +HEAPF32[$1168>>2];
  $3948 = $148 * $3947;
  $3949 = $152 * $3945;
  $3950 = +HEAPF32[$1169>>2];
  $3951 = $150 * $3950;
  $3952 = $3951 + $3949;
  $3953 = $149 * $3952;
  $3954 = $3948 + $3953;
  HEAPF32[$1170>>2] = $3954;
  $3955 = +HEAPF32[$1171>>2];
  $3956 = $112 * $3955;
  $3957 = +HEAPF32[$1172>>2];
  $3958 = $109 * $3957;
  $3959 = $3956 + $3958;
  $3960 = $105 * $3959;
  $3961 = $3954 - $3960;
  HEAPF32[$1173>>2] = $3961;
  $3962 = +HEAPF32[$1174>>2];
  $3963 = $148 * $3962;
  $3964 = +HEAPF32[$1167>>2];
  $3965 = +HEAPF32[$1169>>2];
  $3966 = $3964 + $3965;
  $3967 = $149 * $3966;
  $3968 = $3963 + $3967;
  HEAPF32[$1175>>2] = $3968;
  $3969 = +HEAPF32[$1176>>2];
  $3970 = $112 * $3969;
  $3971 = +HEAPF32[$1177>>2];
  $3972 = $109 * $3971;
  $3973 = $3970 + $3972;
  $3974 = $105 * $3973;
  $3975 = $3968 - $3974;
  HEAPF32[$1178>>2] = $3975;
  $3976 = +HEAPF32[$1127>>2];
  $3977 = +HEAPF32[$1128>>2];
  $3978 = $112 * $3977;
  $3979 = $3804 + $3978;
  $3980 = $105 * $3979;
  $3981 = $3976 + $3980;
  $3982 = $347 * $3981;
  $3983 = +HEAPF32[$1145>>2];
  $3984 = +HEAPF32[$1146>>2];
  $3985 = $112 * $3984;
  $3986 = $3866 + $3985;
  $3987 = $105 * $3986;
  $3988 = $3983 + $3987;
  $3989 = $350 * $3988;
  $3990 = $3982 + $3989;
  $3991 = +HEAPF32[$1160>>2];
  $3992 = +HEAPF32[$1161>>2];
  $3993 = $112 * $3992;
  $3994 = $3913 + $3993;
  $3995 = $105 * $3994;
  $3996 = $3991 + $3995;
  $3997 = $353 * $3996;
  $3998 = $3990 + $3997;
  $3999 = +HEAPF32[$1173>>2];
  $4000 = $107 * $3999;
  $4001 = +HEAPF32[$1172>>2];
  $4002 = $154 * $4001;
  $4003 = $4000 + $4002;
  $4004 = +HEAPF32[$1171>>2];
  $4005 = $107 * $4004;
  $4006 = $4003 + $4005;
  $4007 = $356 * $4006;
  $4008 = +HEAPF32[$1176>>2];
  $4009 = +HEAPF32[$1177>>2];
  $4010 = $4009 * 2.0;
  $4011 = $3975 + $4010;
  $4012 = $4008 + $4011;
  $4013 = $359 * $4012;
  $4014 = $4007 + $4013;
  $4015 = $105 * $4014;
  $4016 = $3998 + $4015;
  $4017 = +HEAPF32[$1179>>2];
  $4018 = $55 * $4017;
  $4019 = +HEAPF32[$1180>>2];
  $4020 = $46 * $4019;
  $4021 = +HEAPF32[$1181>>2];
  $4022 = $57 * $4021;
  $4023 = $4020 + $4022;
  $4024 = $56 * $4023;
  $4025 = $4018 + $4024;
  HEAPF32[$1182>>2] = $4025;
  $4026 = +HEAPF32[$1183>>2];
  $4027 = $60 * $4026;
  $4028 = +HEAPF32[$1184>>2];
  $4029 = $62 * $4028;
  $4030 = $4027 + $4029;
  $4031 = $50 * $4030;
  $4032 = $4025 - $4031;
  HEAPF32[$1185>>2] = $4032;
  $4033 = +HEAPF32[$1186>>2];
  $4034 = $77 * $4033;
  $4035 = $52 * $4032;
  $4036 = +HEAPF32[$1184>>2];
  $4037 = $64 * $4036;
  $4038 = $4037 + $4035;
  $4039 = +HEAPF32[$1183>>2];
  $4040 = $52 * $4039;
  $4041 = $4040 + $4038;
  $4042 = $50 * $4041;
  $4043 = +HEAPF32[$1187>>2];
  $4044 = $80 * $4043;
  $4045 = $4034 + $4044;
  $4046 = $73 * $4045;
  $4047 = $4042 - $4046;
  HEAPF32[$1188>>2] = $4047;
  $4048 = +HEAPF32[$1189>>2];
  $4049 = $96 * $4048;
  $4050 = +HEAPF32[$1187>>2];
  $4051 = $80 * $4047;
  $4052 = $4034 + $4051;
  $4053 = $73 * $4052;
  $4054 = $4050 + $4053;
  $4055 = +HEAPF32[$1190>>2];
  $4056 = $92 * $4055;
  $4057 = $4049 + $4056;
  $4058 = $89 * $4057;
  $4059 = $4054 - $4058;
  HEAPF32[$1191>>2] = $4059;
  $4060 = +HEAPF32[$1192>>2];
  $4061 = $109 * $4060;
  $4062 = +HEAPF32[$1190>>2];
  $4063 = $92 * $4059;
  $4064 = $4049 + $4063;
  $4065 = $89 * $4064;
  $4066 = $4062 + $4065;
  $4067 = +HEAPF32[$1193>>2];
  $4068 = $112 * $4067;
  $4069 = $4061 + $4068;
  $4070 = $105 * $4069;
  $4071 = $4066 - $4070;
  HEAPF32[$1194>>2] = $4071;
  $4072 = +HEAPF32[$1195>>2];
  $4073 = $55 * $4072;
  $4074 = +HEAPF32[$1180>>2];
  $4075 = +HEAPF32[$1181>>2];
  $4076 = $4074 + $4075;
  $4077 = $56 * $4076;
  $4078 = $4073 + $4077;
  HEAPF32[$1196>>2] = $4078;
  $4079 = +HEAPF32[$1197>>2];
  $4080 = $60 * $4079;
  $4081 = +HEAPF32[$1198>>2];
  $4082 = $62 * $4081;
  $4083 = $4080 + $4082;
  $4084 = $50 * $4083;
  $4085 = $4078 - $4084;
  HEAPF32[$1199>>2] = $4085;
  $4086 = +HEAPF32[$1197>>2];
  $4087 = +HEAPF32[$1198>>2];
  $4088 = $4087 * 2.0;
  $4089 = $4088 + $4085;
  $4090 = $4086 + $4089;
  $4091 = $50 * $4090;
  HEAPF32[$1200>>2] = $4091;
  $4092 = +HEAPF32[$1201>>2];
  $4093 = $120 * $4092;
  $4094 = +HEAPF32[$1202>>2];
  $4095 = $122 * $4094;
  $4096 = $124 * $4090;
  $4097 = $4095 + $4096;
  $4098 = $121 * $4097;
  $4099 = $4093 + $4098;
  HEAPF32[$1203>>2] = $4099;
  $4100 = +HEAPF32[$1204>>2];
  $4101 = $80 * $4100;
  $4102 = +HEAPF32[$1205>>2];
  $4103 = $77 * $4102;
  $4104 = $4101 + $4103;
  $4105 = $73 * $4104;
  $4106 = $4099 - $4105;
  HEAPF32[$1206>>2] = $4106;
  $4107 = +HEAPF32[$1207>>2];
  $4108 = $96 * $4107;
  $4109 = $75 * $4106;
  $4110 = +HEAPF32[$1205>>2];
  $4111 = $126 * $4110;
  $4112 = $4111 + $4109;
  $4113 = +HEAPF32[$1204>>2];
  $4114 = $75 * $4113;
  $4115 = $4114 + $4112;
  $4116 = $73 * $4115;
  $4117 = +HEAPF32[$1208>>2];
  $4118 = $92 * $4117;
  $4119 = $4108 + $4118;
  $4120 = $89 * $4119;
  $4121 = $4116 - $4120;
  HEAPF32[$1209>>2] = $4121;
  $4122 = +HEAPF32[$1210>>2];
  $4123 = $109 * $4122;
  $4124 = +HEAPF32[$1208>>2];
  $4125 = $92 * $4121;
  $4126 = $4108 + $4125;
  $4127 = $89 * $4126;
  $4128 = $4124 + $4127;
  $4129 = +HEAPF32[$1211>>2];
  $4130 = $112 * $4129;
  $4131 = $4123 + $4130;
  $4132 = $105 * $4131;
  $4133 = $4128 - $4132;
  HEAPF32[$1212>>2] = $4133;
  $4134 = +HEAPF32[$1213>>2];
  $4135 = $120 * $4134;
  $4136 = +HEAPF32[$1200>>2];
  $4137 = +HEAPF32[$1202>>2];
  $4138 = $4136 + $4137;
  $4139 = $121 * $4138;
  $4140 = $4135 + $4139;
  HEAPF32[$1214>>2] = $4140;
  $4141 = +HEAPF32[$1215>>2];
  $4142 = $80 * $4141;
  $4143 = +HEAPF32[$1216>>2];
  $4144 = $77 * $4143;
  $4145 = $4142 + $4144;
  $4146 = $73 * $4145;
  $4147 = $4140 - $4146;
  HEAPF32[$1217>>2] = $4147;
  $4148 = +HEAPF32[$1215>>2];
  $4149 = +HEAPF32[$1216>>2];
  $4150 = $4149 * 2.0;
  $4151 = $4150 + $4147;
  $4152 = $4148 + $4151;
  $4153 = $73 * $4152;
  HEAPF32[$1218>>2] = $4153;
  $4154 = +HEAPF32[$1219>>2];
  $4155 = $134 * $4154;
  $4156 = +HEAPF32[$1220>>2];
  $4157 = $136 * $4156;
  $4158 = $138 * $4152;
  $4159 = $4157 + $4158;
  $4160 = $135 * $4159;
  $4161 = $4155 + $4160;
  HEAPF32[$1221>>2] = $4161;
  $4162 = +HEAPF32[$1222>>2];
  $4163 = $92 * $4162;
  $4164 = +HEAPF32[$1223>>2];
  $4165 = $96 * $4164;
  $4166 = $4163 + $4165;
  $4167 = $89 * $4166;
  $4168 = $4161 - $4167;
  HEAPF32[$1224>>2] = $4168;
  $4169 = +HEAPF32[$1225>>2];
  $4170 = $109 * $4169;
  $4171 = $94 * $4168;
  $4172 = +HEAPF32[$1223>>2];
  $4173 = $140 * $4172;
  $4174 = $4173 + $4171;
  $4175 = +HEAPF32[$1222>>2];
  $4176 = $94 * $4175;
  $4177 = $4176 + $4174;
  $4178 = $89 * $4177;
  $4179 = +HEAPF32[$1226>>2];
  $4180 = $112 * $4179;
  $4181 = $4170 + $4180;
  $4182 = $105 * $4181;
  $4183 = $4178 - $4182;
  HEAPF32[$1227>>2] = $4183;
  $4184 = +HEAPF32[$1228>>2];
  $4185 = $134 * $4184;
  $4186 = +HEAPF32[$1218>>2];
  $4187 = +HEAPF32[$1220>>2];
  $4188 = $4186 + $4187;
  $4189 = $135 * $4188;
  $4190 = $4185 + $4189;
  HEAPF32[$1229>>2] = $4190;
  $4191 = +HEAPF32[$1230>>2];
  $4192 = $92 * $4191;
  $4193 = +HEAPF32[$1231>>2];
  $4194 = $96 * $4193;
  $4195 = $4192 + $4194;
  $4196 = $89 * $4195;
  $4197 = $4190 - $4196;
  HEAPF32[$1232>>2] = $4197;
  $4198 = +HEAPF32[$1230>>2];
  $4199 = +HEAPF32[$1231>>2];
  $4200 = $4199 * 2.0;
  $4201 = $4200 + $4197;
  $4202 = $4198 + $4201;
  $4203 = $89 * $4202;
  HEAPF32[$1233>>2] = $4203;
  $4204 = +HEAPF32[$1234>>2];
  $4205 = $148 * $4204;
  $4206 = +HEAPF32[$1235>>2];
  $4207 = $150 * $4206;
  $4208 = $152 * $4202;
  $4209 = $4207 + $4208;
  $4210 = $149 * $4209;
  $4211 = $4205 + $4210;
  HEAPF32[$1236>>2] = $4211;
  $4212 = +HEAPF32[$1237>>2];
  $4213 = $112 * $4212;
  $4214 = +HEAPF32[$1238>>2];
  $4215 = $109 * $4214;
  $4216 = $4213 + $4215;
  $4217 = $105 * $4216;
  $4218 = $4211 - $4217;
  HEAPF32[$1239>>2] = $4218;
  $4219 = +HEAPF32[$1240>>2];
  $4220 = $148 * $4219;
  $4221 = +HEAPF32[$1233>>2];
  $4222 = +HEAPF32[$1235>>2];
  $4223 = $4221 + $4222;
  $4224 = $149 * $4223;
  $4225 = $4220 + $4224;
  HEAPF32[$1241>>2] = $4225;
  $4226 = +HEAPF32[$1242>>2];
  $4227 = $112 * $4226;
  $4228 = +HEAPF32[$1243>>2];
  $4229 = $109 * $4228;
  $4230 = $4227 + $4229;
  $4231 = $105 * $4230;
  $4232 = $4225 - $4231;
  HEAPF32[$1244>>2] = $4232;
  $4233 = +HEAPF32[$1193>>2];
  $4234 = +HEAPF32[$1194>>2];
  $4235 = $112 * $4234;
  $4236 = $4061 + $4235;
  $4237 = $105 * $4236;
  $4238 = $4233 + $4237;
  $4239 = $372 * $4238;
  $4240 = +HEAPF32[$1211>>2];
  $4241 = +HEAPF32[$1212>>2];
  $4242 = $112 * $4241;
  $4243 = $4123 + $4242;
  $4244 = $105 * $4243;
  $4245 = $4240 + $4244;
  $4246 = $375 * $4245;
  $4247 = $4239 + $4246;
  $4248 = +HEAPF32[$1226>>2];
  $4249 = +HEAPF32[$1227>>2];
  $4250 = $112 * $4249;
  $4251 = $4170 + $4250;
  $4252 = $105 * $4251;
  $4253 = $4248 + $4252;
  $4254 = $378 * $4253;
  $4255 = $4247 + $4254;
  $4256 = +HEAPF32[$1239>>2];
  $4257 = $107 * $4256;
  $4258 = +HEAPF32[$1238>>2];
  $4259 = $154 * $4258;
  $4260 = $4257 + $4259;
  $4261 = +HEAPF32[$1237>>2];
  $4262 = $107 * $4261;
  $4263 = $4260 + $4262;
  $4264 = $381 * $4263;
  $4265 = +HEAPF32[$1242>>2];
  $4266 = +HEAPF32[$1243>>2];
  $4267 = $4266 * 2.0;
  $4268 = $4232 + $4267;
  $4269 = $4265 + $4268;
  $4270 = $384 * $4269;
  $4271 = $4264 + $4270;
  $4272 = $105 * $4271;
  $4273 = $4255 + $4272;
  $4274 = $4016 + $4273;
  $4275 = +HEAPF32[$1245>>2];
  $4276 = $55 * $4275;
  $4277 = +HEAPF32[$1246>>2];
  $4278 = $46 * $4277;
  $4279 = +HEAPF32[$1247>>2];
  $4280 = $57 * $4279;
  $4281 = $4278 + $4280;
  $4282 = $56 * $4281;
  $4283 = $4276 + $4282;
  HEAPF32[$1248>>2] = $4283;
  $4284 = +HEAPF32[$1249>>2];
  $4285 = $60 * $4284;
  $4286 = +HEAPF32[$1250>>2];
  $4287 = $62 * $4286;
  $4288 = $4285 + $4287;
  $4289 = $50 * $4288;
  $4290 = $4283 - $4289;
  HEAPF32[$1251>>2] = $4290;
  $4291 = +HEAPF32[$1252>>2];
  $4292 = $77 * $4291;
  $4293 = $52 * $4290;
  $4294 = +HEAPF32[$1250>>2];
  $4295 = $64 * $4294;
  $4296 = $4295 + $4293;
  $4297 = +HEAPF32[$1249>>2];
  $4298 = $52 * $4297;
  $4299 = $4298 + $4296;
  $4300 = $50 * $4299;
  $4301 = +HEAPF32[$1253>>2];
  $4302 = $80 * $4301;
  $4303 = $4292 + $4302;
  $4304 = $73 * $4303;
  $4305 = $4300 - $4304;
  HEAPF32[$1254>>2] = $4305;
  $4306 = +HEAPF32[$1255>>2];
  $4307 = $96 * $4306;
  $4308 = +HEAPF32[$1253>>2];
  $4309 = $80 * $4305;
  $4310 = $4292 + $4309;
  $4311 = $73 * $4310;
  $4312 = $4308 + $4311;
  $4313 = +HEAPF32[$1256>>2];
  $4314 = $92 * $4313;
  $4315 = $4307 + $4314;
  $4316 = $89 * $4315;
  $4317 = $4312 - $4316;
  HEAPF32[$1257>>2] = $4317;
  $4318 = +HEAPF32[$1258>>2];
  $4319 = $109 * $4318;
  $4320 = +HEAPF32[$1256>>2];
  $4321 = $92 * $4317;
  $4322 = $4307 + $4321;
  $4323 = $89 * $4322;
  $4324 = $4320 + $4323;
  $4325 = +HEAPF32[$1259>>2];
  $4326 = $112 * $4325;
  $4327 = $4319 + $4326;
  $4328 = $105 * $4327;
  $4329 = $4324 - $4328;
  HEAPF32[$1260>>2] = $4329;
  $4330 = +HEAPF32[$1261>>2];
  $4331 = $55 * $4330;
  $4332 = +HEAPF32[$1246>>2];
  $4333 = +HEAPF32[$1247>>2];
  $4334 = $4332 + $4333;
  $4335 = $56 * $4334;
  $4336 = $4331 + $4335;
  HEAPF32[$1262>>2] = $4336;
  $4337 = +HEAPF32[$1263>>2];
  $4338 = $60 * $4337;
  $4339 = +HEAPF32[$1264>>2];
  $4340 = $62 * $4339;
  $4341 = $4338 + $4340;
  $4342 = $50 * $4341;
  $4343 = $4336 - $4342;
  HEAPF32[$1265>>2] = $4343;
  $4344 = +HEAPF32[$1263>>2];
  $4345 = +HEAPF32[$1264>>2];
  $4346 = $4345 * 2.0;
  $4347 = $4346 + $4343;
  $4348 = $4344 + $4347;
  $4349 = $50 * $4348;
  HEAPF32[$1266>>2] = $4349;
  $4350 = +HEAPF32[$1267>>2];
  $4351 = $120 * $4350;
  $4352 = $124 * $4348;
  $4353 = +HEAPF32[$1268>>2];
  $4354 = $122 * $4353;
  $4355 = $4354 + $4352;
  $4356 = $121 * $4355;
  $4357 = $4351 + $4356;
  HEAPF32[$1269>>2] = $4357;
  $4358 = +HEAPF32[$1270>>2];
  $4359 = $80 * $4358;
  $4360 = +HEAPF32[$1271>>2];
  $4361 = $77 * $4360;
  $4362 = $4359 + $4361;
  $4363 = $73 * $4362;
  $4364 = $4357 - $4363;
  HEAPF32[$1272>>2] = $4364;
  $4365 = +HEAPF32[$1273>>2];
  $4366 = $96 * $4365;
  $4367 = $75 * $4364;
  $4368 = +HEAPF32[$1271>>2];
  $4369 = $126 * $4368;
  $4370 = $4369 + $4367;
  $4371 = +HEAPF32[$1270>>2];
  $4372 = $75 * $4371;
  $4373 = $4372 + $4370;
  $4374 = $73 * $4373;
  $4375 = +HEAPF32[$1274>>2];
  $4376 = $92 * $4375;
  $4377 = $4366 + $4376;
  $4378 = $89 * $4377;
  $4379 = $4374 - $4378;
  HEAPF32[$1275>>2] = $4379;
  $4380 = +HEAPF32[$1276>>2];
  $4381 = $109 * $4380;
  $4382 = +HEAPF32[$1274>>2];
  $4383 = $92 * $4379;
  $4384 = $4366 + $4383;
  $4385 = $89 * $4384;
  $4386 = $4382 + $4385;
  $4387 = +HEAPF32[$1277>>2];
  $4388 = $112 * $4387;
  $4389 = $4381 + $4388;
  $4390 = $105 * $4389;
  $4391 = $4386 - $4390;
  HEAPF32[$1278>>2] = $4391;
  $4392 = +HEAPF32[$1279>>2];
  $4393 = $120 * $4392;
  $4394 = +HEAPF32[$1266>>2];
  $4395 = +HEAPF32[$1268>>2];
  $4396 = $4394 + $4395;
  $4397 = $121 * $4396;
  $4398 = $4393 + $4397;
  HEAPF32[$1280>>2] = $4398;
  $4399 = +HEAPF32[$1281>>2];
  $4400 = $80 * $4399;
  $4401 = +HEAPF32[$1282>>2];
  $4402 = $77 * $4401;
  $4403 = $4400 + $4402;
  $4404 = $73 * $4403;
  $4405 = $4398 - $4404;
  HEAPF32[$1283>>2] = $4405;
  $4406 = +HEAPF32[$1281>>2];
  $4407 = +HEAPF32[$1282>>2];
  $4408 = $4407 * 2.0;
  $4409 = $4408 + $4405;
  $4410 = $4406 + $4409;
  $4411 = $73 * $4410;
  HEAPF32[$1284>>2] = $4411;
  $4412 = +HEAPF32[$1285>>2];
  $4413 = $134 * $4412;
  $4414 = $138 * $4410;
  $4415 = +HEAPF32[$1286>>2];
  $4416 = $136 * $4415;
  $4417 = $4416 + $4414;
  $4418 = $135 * $4417;
  $4419 = $4413 + $4418;
  HEAPF32[$1287>>2] = $4419;
  $4420 = +HEAPF32[$1288>>2];
  $4421 = $92 * $4420;
  $4422 = +HEAPF32[$1289>>2];
  $4423 = $96 * $4422;
  $4424 = $4421 + $4423;
  $4425 = $89 * $4424;
  $4426 = $4419 - $4425;
  HEAPF32[$1290>>2] = $4426;
  $4427 = +HEAPF32[$1291>>2];
  $4428 = $109 * $4427;
  $4429 = $94 * $4426;
  $4430 = +HEAPF32[$1289>>2];
  $4431 = $140 * $4430;
  $4432 = $4431 + $4429;
  $4433 = +HEAPF32[$1288>>2];
  $4434 = $94 * $4433;
  $4435 = $4434 + $4432;
  $4436 = $89 * $4435;
  $4437 = +HEAPF32[$1292>>2];
  $4438 = $112 * $4437;
  $4439 = $4428 + $4438;
  $4440 = $105 * $4439;
  $4441 = $4436 - $4440;
  HEAPF32[$1293>>2] = $4441;
  $4442 = +HEAPF32[$1294>>2];
  $4443 = $134 * $4442;
  $4444 = +HEAPF32[$1284>>2];
  $4445 = +HEAPF32[$1286>>2];
  $4446 = $4444 + $4445;
  $4447 = $135 * $4446;
  $4448 = $4443 + $4447;
  HEAPF32[$1295>>2] = $4448;
  $4449 = +HEAPF32[$1296>>2];
  $4450 = $92 * $4449;
  $4451 = +HEAPF32[$1297>>2];
  $4452 = $96 * $4451;
  $4453 = $4450 + $4452;
  $4454 = $89 * $4453;
  $4455 = $4448 - $4454;
  HEAPF32[$1298>>2] = $4455;
  $4456 = +HEAPF32[$1296>>2];
  $4457 = +HEAPF32[$1297>>2];
  $4458 = $4457 * 2.0;
  $4459 = $4458 + $4455;
  $4460 = $4456 + $4459;
  $4461 = $89 * $4460;
  HEAPF32[$1299>>2] = $4461;
  $4462 = +HEAPF32[$1300>>2];
  $4463 = $148 * $4462;
  $4464 = $152 * $4460;
  $4465 = +HEAPF32[$1301>>2];
  $4466 = $150 * $4465;
  $4467 = $4466 + $4464;
  $4468 = $149 * $4467;
  $4469 = $4463 + $4468;
  HEAPF32[$1302>>2] = $4469;
  $4470 = +HEAPF32[$1303>>2];
  $4471 = $112 * $4470;
  $4472 = +HEAPF32[$1304>>2];
  $4473 = $109 * $4472;
  $4474 = $4471 + $4473;
  $4475 = $105 * $4474;
  $4476 = $4469 - $4475;
  HEAPF32[$1305>>2] = $4476;
  $4477 = +HEAPF32[$1306>>2];
  $4478 = $148 * $4477;
  $4479 = +HEAPF32[$1299>>2];
  $4480 = +HEAPF32[$1301>>2];
  $4481 = $4479 + $4480;
  $4482 = $149 * $4481;
  $4483 = $4478 + $4482;
  HEAPF32[$1307>>2] = $4483;
  $4484 = +HEAPF32[$1308>>2];
  $4485 = $112 * $4484;
  $4486 = +HEAPF32[$1309>>2];
  $4487 = $109 * $4486;
  $4488 = $4485 + $4487;
  $4489 = $105 * $4488;
  $4490 = $4483 - $4489;
  HEAPF32[$1310>>2] = $4490;
  $4491 = +HEAPF32[$1259>>2];
  $4492 = +HEAPF32[$1260>>2];
  $4493 = $112 * $4492;
  $4494 = $4319 + $4493;
  $4495 = $105 * $4494;
  $4496 = $4491 + $4495;
  $4497 = $397 * $4496;
  $4498 = +HEAPF32[$1277>>2];
  $4499 = +HEAPF32[$1278>>2];
  $4500 = $112 * $4499;
  $4501 = $4381 + $4500;
  $4502 = $105 * $4501;
  $4503 = $4498 + $4502;
  $4504 = $400 * $4503;
  $4505 = $4497 + $4504;
  $4506 = +HEAPF32[$1292>>2];
  $4507 = +HEAPF32[$1293>>2];
  $4508 = $112 * $4507;
  $4509 = $4428 + $4508;
  $4510 = $105 * $4509;
  $4511 = $4506 + $4510;
  $4512 = $403 * $4511;
  $4513 = $4505 + $4512;
  $4514 = +HEAPF32[$1305>>2];
  $4515 = $107 * $4514;
  $4516 = +HEAPF32[$1304>>2];
  $4517 = $154 * $4516;
  $4518 = $4515 + $4517;
  $4519 = +HEAPF32[$1303>>2];
  $4520 = $107 * $4519;
  $4521 = $4518 + $4520;
  $4522 = $406 * $4521;
  $4523 = +HEAPF32[$1308>>2];
  $4524 = +HEAPF32[$1309>>2];
  $4525 = $4524 * 2.0;
  $4526 = $4490 + $4525;
  $4527 = $4523 + $4526;
  $4528 = $409 * $4527;
  $4529 = $4522 + $4528;
  $4530 = $105 * $4529;
  $4531 = $4513 + $4530;
  $4532 = +HEAPF32[$1311>>2];
  $4533 = $55 * $4532;
  $4534 = +HEAPF32[$1312>>2];
  $4535 = $46 * $4534;
  $4536 = +HEAPF32[$1313>>2];
  $4537 = $57 * $4536;
  $4538 = $4535 + $4537;
  $4539 = $56 * $4538;
  $4540 = $4533 + $4539;
  HEAPF32[$1314>>2] = $4540;
  $4541 = +HEAPF32[$1315>>2];
  $4542 = $60 * $4541;
  $4543 = +HEAPF32[$1316>>2];
  $4544 = $62 * $4543;
  $4545 = $4542 + $4544;
  $4546 = $50 * $4545;
  $4547 = $4540 - $4546;
  HEAPF32[$1317>>2] = $4547;
  $4548 = +HEAPF32[$1318>>2];
  $4549 = $77 * $4548;
  $4550 = $52 * $4547;
  $4551 = +HEAPF32[$1316>>2];
  $4552 = $64 * $4551;
  $4553 = $4552 + $4550;
  $4554 = +HEAPF32[$1315>>2];
  $4555 = $52 * $4554;
  $4556 = $4555 + $4553;
  $4557 = $50 * $4556;
  $4558 = +HEAPF32[$1319>>2];
  $4559 = $80 * $4558;
  $4560 = $4549 + $4559;
  $4561 = $73 * $4560;
  $4562 = $4557 - $4561;
  HEAPF32[$1320>>2] = $4562;
  $4563 = +HEAPF32[$1321>>2];
  $4564 = $96 * $4563;
  $4565 = +HEAPF32[$1319>>2];
  $4566 = $80 * $4562;
  $4567 = $4549 + $4566;
  $4568 = $73 * $4567;
  $4569 = $4565 + $4568;
  $4570 = +HEAPF32[$1322>>2];
  $4571 = $92 * $4570;
  $4572 = $4564 + $4571;
  $4573 = $89 * $4572;
  $4574 = $4569 - $4573;
  HEAPF32[$1323>>2] = $4574;
  $4575 = +HEAPF32[$1324>>2];
  $4576 = $109 * $4575;
  $4577 = +HEAPF32[$1322>>2];
  $4578 = $92 * $4574;
  $4579 = $4564 + $4578;
  $4580 = $89 * $4579;
  $4581 = $4577 + $4580;
  $4582 = +HEAPF32[$1325>>2];
  $4583 = $112 * $4582;
  $4584 = $4576 + $4583;
  $4585 = $105 * $4584;
  $4586 = $4581 - $4585;
  HEAPF32[$1326>>2] = $4586;
  $4587 = +HEAPF32[$1327>>2];
  $4588 = $55 * $4587;
  $4589 = +HEAPF32[$1312>>2];
  $4590 = +HEAPF32[$1313>>2];
  $4591 = $4589 + $4590;
  $4592 = $56 * $4591;
  $4593 = $4588 + $4592;
  HEAPF32[$1328>>2] = $4593;
  $4594 = +HEAPF32[$1329>>2];
  $4595 = $60 * $4594;
  $4596 = +HEAPF32[$1330>>2];
  $4597 = $62 * $4596;
  $4598 = $4595 + $4597;
  $4599 = $50 * $4598;
  $4600 = $4593 - $4599;
  HEAPF32[$1331>>2] = $4600;
  $4601 = +HEAPF32[$1329>>2];
  $4602 = +HEAPF32[$1330>>2];
  $4603 = $4602 * 2.0;
  $4604 = $4603 + $4600;
  $4605 = $4601 + $4604;
  $4606 = $50 * $4605;
  HEAPF32[$1332>>2] = $4606;
  $4607 = +HEAPF32[$1333>>2];
  $4608 = $120 * $4607;
  $4609 = +HEAPF32[$1334>>2];
  $4610 = $122 * $4609;
  $4611 = $124 * $4605;
  $4612 = $4610 + $4611;
  $4613 = $121 * $4612;
  $4614 = $4608 + $4613;
  HEAPF32[$1335>>2] = $4614;
  $4615 = +HEAPF32[$1336>>2];
  $4616 = $80 * $4615;
  $4617 = +HEAPF32[$1337>>2];
  $4618 = $77 * $4617;
  $4619 = $4616 + $4618;
  $4620 = $73 * $4619;
  $4621 = $4614 - $4620;
  HEAPF32[$1338>>2] = $4621;
  $4622 = +HEAPF32[$1339>>2];
  $4623 = $96 * $4622;
  $4624 = $75 * $4621;
  $4625 = +HEAPF32[$1337>>2];
  $4626 = $126 * $4625;
  $4627 = $4626 + $4624;
  $4628 = +HEAPF32[$1336>>2];
  $4629 = $75 * $4628;
  $4630 = $4629 + $4627;
  $4631 = $73 * $4630;
  $4632 = +HEAPF32[$1340>>2];
  $4633 = $92 * $4632;
  $4634 = $4623 + $4633;
  $4635 = $89 * $4634;
  $4636 = $4631 - $4635;
  HEAPF32[$1341>>2] = $4636;
  $4637 = +HEAPF32[$1342>>2];
  $4638 = $109 * $4637;
  $4639 = +HEAPF32[$1340>>2];
  $4640 = $92 * $4636;
  $4641 = $4623 + $4640;
  $4642 = $89 * $4641;
  $4643 = $4639 + $4642;
  $4644 = +HEAPF32[$1343>>2];
  $4645 = $112 * $4644;
  $4646 = $4638 + $4645;
  $4647 = $105 * $4646;
  $4648 = $4643 - $4647;
  HEAPF32[$1344>>2] = $4648;
  $4649 = +HEAPF32[$1345>>2];
  $4650 = $120 * $4649;
  $4651 = +HEAPF32[$1332>>2];
  $4652 = +HEAPF32[$1334>>2];
  $4653 = $4651 + $4652;
  $4654 = $121 * $4653;
  $4655 = $4650 + $4654;
  HEAPF32[$1346>>2] = $4655;
  $4656 = +HEAPF32[$1347>>2];
  $4657 = $80 * $4656;
  $4658 = +HEAPF32[$1348>>2];
  $4659 = $77 * $4658;
  $4660 = $4657 + $4659;
  $4661 = $73 * $4660;
  $4662 = $4655 - $4661;
  HEAPF32[$1349>>2] = $4662;
  $4663 = +HEAPF32[$1347>>2];
  $4664 = +HEAPF32[$1348>>2];
  $4665 = $4664 * 2.0;
  $4666 = $4665 + $4662;
  $4667 = $4663 + $4666;
  $4668 = $73 * $4667;
  HEAPF32[$1350>>2] = $4668;
  $4669 = +HEAPF32[$1351>>2];
  $4670 = $134 * $4669;
  $4671 = +HEAPF32[$1352>>2];
  $4672 = $136 * $4671;
  $4673 = $138 * $4667;
  $4674 = $4672 + $4673;
  $4675 = $135 * $4674;
  $4676 = $4670 + $4675;
  HEAPF32[$1353>>2] = $4676;
  $4677 = +HEAPF32[$1354>>2];
  $4678 = $92 * $4677;
  $4679 = +HEAPF32[$1355>>2];
  $4680 = $96 * $4679;
  $4681 = $4678 + $4680;
  $4682 = $89 * $4681;
  $4683 = $4676 - $4682;
  HEAPF32[$1356>>2] = $4683;
  $4684 = +HEAPF32[$1357>>2];
  $4685 = $109 * $4684;
  $4686 = $94 * $4683;
  $4687 = +HEAPF32[$1355>>2];
  $4688 = $140 * $4687;
  $4689 = $4688 + $4686;
  $4690 = +HEAPF32[$1354>>2];
  $4691 = $94 * $4690;
  $4692 = $4691 + $4689;
  $4693 = $89 * $4692;
  $4694 = +HEAPF32[$1358>>2];
  $4695 = $112 * $4694;
  $4696 = $4685 + $4695;
  $4697 = $105 * $4696;
  $4698 = $4693 - $4697;
  HEAPF32[$1359>>2] = $4698;
  $4699 = +HEAPF32[$1360>>2];
  $4700 = $134 * $4699;
  $4701 = +HEAPF32[$1350>>2];
  $4702 = +HEAPF32[$1352>>2];
  $4703 = $4701 + $4702;
  $4704 = $135 * $4703;
  $4705 = $4700 + $4704;
  HEAPF32[$1361>>2] = $4705;
  $4706 = +HEAPF32[$1362>>2];
  $4707 = $92 * $4706;
  $4708 = +HEAPF32[$1363>>2];
  $4709 = $96 * $4708;
  $4710 = $4707 + $4709;
  $4711 = $89 * $4710;
  $4712 = $4705 - $4711;
  HEAPF32[$1364>>2] = $4712;
  $4713 = +HEAPF32[$1362>>2];
  $4714 = +HEAPF32[$1363>>2];
  $4715 = $4714 * 2.0;
  $4716 = $4715 + $4712;
  $4717 = $4713 + $4716;
  $4718 = $89 * $4717;
  HEAPF32[$1365>>2] = $4718;
  $4719 = +HEAPF32[$1366>>2];
  $4720 = $148 * $4719;
  $4721 = $152 * $4717;
  $4722 = +HEAPF32[$1367>>2];
  $4723 = $150 * $4722;
  $4724 = $4723 + $4721;
  $4725 = $149 * $4724;
  $4726 = $4720 + $4725;
  HEAPF32[$1368>>2] = $4726;
  $4727 = +HEAPF32[$1369>>2];
  $4728 = $112 * $4727;
  $4729 = +HEAPF32[$1370>>2];
  $4730 = $109 * $4729;
  $4731 = $4728 + $4730;
  $4732 = $105 * $4731;
  $4733 = $4726 - $4732;
  HEAPF32[$1371>>2] = $4733;
  $4734 = +HEAPF32[$1372>>2];
  $4735 = $148 * $4734;
  $4736 = +HEAPF32[$1365>>2];
  $4737 = +HEAPF32[$1367>>2];
  $4738 = $4736 + $4737;
  $4739 = $149 * $4738;
  $4740 = $4735 + $4739;
  HEAPF32[$1373>>2] = $4740;
  $4741 = +HEAPF32[$1374>>2];
  $4742 = $112 * $4741;
  $4743 = +HEAPF32[$1375>>2];
  $4744 = $109 * $4743;
  $4745 = $4742 + $4744;
  $4746 = $105 * $4745;
  $4747 = $4740 - $4746;
  HEAPF32[$1376>>2] = $4747;
  $4748 = +HEAPF32[$1325>>2];
  $4749 = +HEAPF32[$1326>>2];
  $4750 = $112 * $4749;
  $4751 = $4576 + $4750;
  $4752 = $105 * $4751;
  $4753 = $4748 + $4752;
  $4754 = $422 * $4753;
  $4755 = +HEAPF32[$1343>>2];
  $4756 = +HEAPF32[$1344>>2];
  $4757 = $112 * $4756;
  $4758 = $4638 + $4757;
  $4759 = $105 * $4758;
  $4760 = $4755 + $4759;
  $4761 = $425 * $4760;
  $4762 = $4754 + $4761;
  $4763 = +HEAPF32[$1358>>2];
  $4764 = +HEAPF32[$1359>>2];
  $4765 = $112 * $4764;
  $4766 = $4685 + $4765;
  $4767 = $105 * $4766;
  $4768 = $4763 + $4767;
  $4769 = $428 * $4768;
  $4770 = $4762 + $4769;
  $4771 = +HEAPF32[$1371>>2];
  $4772 = $107 * $4771;
  $4773 = +HEAPF32[$1370>>2];
  $4774 = $154 * $4773;
  $4775 = $4772 + $4774;
  $4776 = +HEAPF32[$1369>>2];
  $4777 = $107 * $4776;
  $4778 = $4775 + $4777;
  $4779 = $431 * $4778;
  $4780 = +HEAPF32[$1374>>2];
  $4781 = +HEAPF32[$1375>>2];
  $4782 = $4781 * 2.0;
  $4783 = $4747 + $4782;
  $4784 = $4780 + $4783;
  $4785 = $434 * $4784;
  $4786 = $4779 + $4785;
  $4787 = $105 * $4786;
  $4788 = $4770 + $4787;
  $4789 = $4531 + $4788;
  $4790 = $4274 + $4789;
  $4791 = +HEAPF32[$1377>>2];
  $4792 = $55 * $4791;
  $4793 = +HEAPF32[$1378>>2];
  $4794 = $46 * $4793;
  $4795 = +HEAPF32[$1379>>2];
  $4796 = $57 * $4795;
  $4797 = $4794 + $4796;
  $4798 = $56 * $4797;
  $4799 = $4792 + $4798;
  HEAPF32[$1380>>2] = $4799;
  $4800 = +HEAPF32[$1381>>2];
  $4801 = $60 * $4800;
  $4802 = +HEAPF32[$1382>>2];
  $4803 = $62 * $4802;
  $4804 = $4801 + $4803;
  $4805 = $50 * $4804;
  $4806 = $4799 - $4805;
  HEAPF32[$1383>>2] = $4806;
  $4807 = +HEAPF32[$1384>>2];
  $4808 = $77 * $4807;
  $4809 = $52 * $4806;
  $4810 = +HEAPF32[$1382>>2];
  $4811 = $64 * $4810;
  $4812 = $4811 + $4809;
  $4813 = +HEAPF32[$1381>>2];
  $4814 = $52 * $4813;
  $4815 = $4814 + $4812;
  $4816 = $50 * $4815;
  $4817 = +HEAPF32[$1385>>2];
  $4818 = $80 * $4817;
  $4819 = $4808 + $4818;
  $4820 = $73 * $4819;
  $4821 = $4816 - $4820;
  HEAPF32[$1386>>2] = $4821;
  $4822 = +HEAPF32[$1387>>2];
  $4823 = $96 * $4822;
  $4824 = +HEAPF32[$1385>>2];
  $4825 = $80 * $4821;
  $4826 = $4808 + $4825;
  $4827 = $73 * $4826;
  $4828 = $4824 + $4827;
  $4829 = +HEAPF32[$1388>>2];
  $4830 = $92 * $4829;
  $4831 = $4823 + $4830;
  $4832 = $89 * $4831;
  $4833 = $4828 - $4832;
  HEAPF32[$1389>>2] = $4833;
  $4834 = +HEAPF32[$1390>>2];
  $4835 = $109 * $4834;
  $4836 = +HEAPF32[$1388>>2];
  $4837 = $92 * $4833;
  $4838 = $4823 + $4837;
  $4839 = $89 * $4838;
  $4840 = $4836 + $4839;
  $4841 = +HEAPF32[$1391>>2];
  $4842 = $112 * $4841;
  $4843 = $4835 + $4842;
  $4844 = $105 * $4843;
  $4845 = $4840 - $4844;
  HEAPF32[$1392>>2] = $4845;
  $4846 = +HEAPF32[$1393>>2];
  $4847 = $55 * $4846;
  $4848 = +HEAPF32[$1378>>2];
  $4849 = +HEAPF32[$1379>>2];
  $4850 = $4848 + $4849;
  $4851 = $56 * $4850;
  $4852 = $4847 + $4851;
  HEAPF32[$1394>>2] = $4852;
  $4853 = +HEAPF32[$1395>>2];
  $4854 = $60 * $4853;
  $4855 = +HEAPF32[$1396>>2];
  $4856 = $62 * $4855;
  $4857 = $4854 + $4856;
  $4858 = $50 * $4857;
  $4859 = $4852 - $4858;
  HEAPF32[$1397>>2] = $4859;
  $4860 = +HEAPF32[$1395>>2];
  $4861 = +HEAPF32[$1396>>2];
  $4862 = $4861 * 2.0;
  $4863 = $4862 + $4859;
  $4864 = $4860 + $4863;
  $4865 = $50 * $4864;
  HEAPF32[$1398>>2] = $4865;
  $4866 = +HEAPF32[$1399>>2];
  $4867 = $120 * $4866;
  $4868 = +HEAPF32[$1400>>2];
  $4869 = $122 * $4868;
  $4870 = $124 * $4864;
  $4871 = $4869 + $4870;
  $4872 = $121 * $4871;
  $4873 = $4867 + $4872;
  HEAPF32[$1401>>2] = $4873;
  $4874 = +HEAPF32[$1402>>2];
  $4875 = $80 * $4874;
  $4876 = +HEAPF32[$1403>>2];
  $4877 = $77 * $4876;
  $4878 = $4875 + $4877;
  $4879 = $73 * $4878;
  $4880 = $4873 - $4879;
  HEAPF32[$1404>>2] = $4880;
  $4881 = +HEAPF32[$1405>>2];
  $4882 = $96 * $4881;
  $4883 = $75 * $4880;
  $4884 = +HEAPF32[$1403>>2];
  $4885 = $126 * $4884;
  $4886 = $4885 + $4883;
  $4887 = +HEAPF32[$1402>>2];
  $4888 = $75 * $4887;
  $4889 = $4888 + $4886;
  $4890 = $73 * $4889;
  $4891 = +HEAPF32[$1406>>2];
  $4892 = $92 * $4891;
  $4893 = $4882 + $4892;
  $4894 = $89 * $4893;
  $4895 = $4890 - $4894;
  HEAPF32[$1407>>2] = $4895;
  $4896 = +HEAPF32[$1408>>2];
  $4897 = $109 * $4896;
  $4898 = +HEAPF32[$1406>>2];
  $4899 = $92 * $4895;
  $4900 = $4882 + $4899;
  $4901 = $89 * $4900;
  $4902 = $4898 + $4901;
  $4903 = +HEAPF32[$1409>>2];
  $4904 = $112 * $4903;
  $4905 = $4897 + $4904;
  $4906 = $105 * $4905;
  $4907 = $4902 - $4906;
  HEAPF32[$1410>>2] = $4907;
  $4908 = +HEAPF32[$1411>>2];
  $4909 = $120 * $4908;
  $4910 = +HEAPF32[$1398>>2];
  $4911 = +HEAPF32[$1400>>2];
  $4912 = $4910 + $4911;
  $4913 = $121 * $4912;
  $4914 = $4909 + $4913;
  HEAPF32[$1412>>2] = $4914;
  $4915 = +HEAPF32[$1413>>2];
  $4916 = $80 * $4915;
  $4917 = +HEAPF32[$1414>>2];
  $4918 = $77 * $4917;
  $4919 = $4916 + $4918;
  $4920 = $73 * $4919;
  $4921 = $4914 - $4920;
  HEAPF32[$1415>>2] = $4921;
  $4922 = +HEAPF32[$1413>>2];
  $4923 = +HEAPF32[$1414>>2];
  $4924 = $4923 * 2.0;
  $4925 = $4924 + $4921;
  $4926 = $4922 + $4925;
  $4927 = $73 * $4926;
  HEAPF32[$1416>>2] = $4927;
  $4928 = +HEAPF32[$1417>>2];
  $4929 = $134 * $4928;
  $4930 = +HEAPF32[$1418>>2];
  $4931 = $136 * $4930;
  $4932 = $138 * $4926;
  $4933 = $4931 + $4932;
  $4934 = $135 * $4933;
  $4935 = $4929 + $4934;
  HEAPF32[$1419>>2] = $4935;
  $4936 = +HEAPF32[$1420>>2];
  $4937 = $92 * $4936;
  $4938 = +HEAPF32[$1421>>2];
  $4939 = $96 * $4938;
  $4940 = $4937 + $4939;
  $4941 = $89 * $4940;
  $4942 = $4935 - $4941;
  HEAPF32[$1422>>2] = $4942;
  $4943 = +HEAPF32[$1423>>2];
  $4944 = $109 * $4943;
  $4945 = $94 * $4942;
  $4946 = +HEAPF32[$1421>>2];
  $4947 = $140 * $4946;
  $4948 = $4947 + $4945;
  $4949 = +HEAPF32[$1420>>2];
  $4950 = $94 * $4949;
  $4951 = $4950 + $4948;
  $4952 = $89 * $4951;
  $4953 = +HEAPF32[$1424>>2];
  $4954 = $112 * $4953;
  $4955 = $4944 + $4954;
  $4956 = $105 * $4955;
  $4957 = $4952 - $4956;
  HEAPF32[$1425>>2] = $4957;
  $4958 = +HEAPF32[$1426>>2];
  $4959 = $134 * $4958;
  $4960 = +HEAPF32[$1416>>2];
  $4961 = +HEAPF32[$1418>>2];
  $4962 = $4960 + $4961;
  $4963 = $135 * $4962;
  $4964 = $4959 + $4963;
  HEAPF32[$1427>>2] = $4964;
  $4965 = +HEAPF32[$1428>>2];
  $4966 = $92 * $4965;
  $4967 = +HEAPF32[$1429>>2];
  $4968 = $96 * $4967;
  $4969 = $4966 + $4968;
  $4970 = $89 * $4969;
  $4971 = $4964 - $4970;
  HEAPF32[$1430>>2] = $4971;
  $4972 = +HEAPF32[$1428>>2];
  $4973 = +HEAPF32[$1429>>2];
  $4974 = $4973 * 2.0;
  $4975 = $4974 + $4971;
  $4976 = $4972 + $4975;
  $4977 = $89 * $4976;
  HEAPF32[$1431>>2] = $4977;
  $4978 = +HEAPF32[$1432>>2];
  $4979 = $148 * $4978;
  $4980 = $152 * $4976;
  $4981 = +HEAPF32[$1433>>2];
  $4982 = $150 * $4981;
  $4983 = $4982 + $4980;
  $4984 = $149 * $4983;
  $4985 = $4979 + $4984;
  HEAPF32[$1434>>2] = $4985;
  $4986 = +HEAPF32[$1435>>2];
  $4987 = $112 * $4986;
  $4988 = +HEAPF32[$1436>>2];
  $4989 = $109 * $4988;
  $4990 = $4987 + $4989;
  $4991 = $105 * $4990;
  $4992 = $4985 - $4991;
  HEAPF32[$1437>>2] = $4992;
  $4993 = +HEAPF32[$1438>>2];
  $4994 = $148 * $4993;
  $4995 = +HEAPF32[$1431>>2];
  $4996 = +HEAPF32[$1433>>2];
  $4997 = $4995 + $4996;
  $4998 = $149 * $4997;
  $4999 = $4994 + $4998;
  HEAPF32[$1439>>2] = $4999;
  $5000 = +HEAPF32[$1440>>2];
  $5001 = $112 * $5000;
  $5002 = +HEAPF32[$1441>>2];
  $5003 = $109 * $5002;
  $5004 = $5001 + $5003;
  $5005 = $105 * $5004;
  $5006 = $4999 - $5005;
  HEAPF32[$1442>>2] = $5006;
  $5007 = +HEAPF32[$1391>>2];
  $5008 = +HEAPF32[$1392>>2];
  $5009 = $112 * $5008;
  $5010 = $4835 + $5009;
  $5011 = $105 * $5010;
  $5012 = $5007 + $5011;
  $5013 = $447 * $5012;
  $5014 = +HEAPF32[$1409>>2];
  $5015 = +HEAPF32[$1410>>2];
  $5016 = $112 * $5015;
  $5017 = $4897 + $5016;
  $5018 = $105 * $5017;
  $5019 = $5014 + $5018;
  $5020 = $450 * $5019;
  $5021 = $5013 + $5020;
  $5022 = +HEAPF32[$1424>>2];
  $5023 = +HEAPF32[$1425>>2];
  $5024 = $112 * $5023;
  $5025 = $4944 + $5024;
  $5026 = $105 * $5025;
  $5027 = $5022 + $5026;
  $5028 = $453 * $5027;
  $5029 = $5021 + $5028;
  $5030 = +HEAPF32[$1437>>2];
  $5031 = $107 * $5030;
  $5032 = +HEAPF32[$1436>>2];
  $5033 = $154 * $5032;
  $5034 = $5031 + $5033;
  $5035 = +HEAPF32[$1435>>2];
  $5036 = $107 * $5035;
  $5037 = $5034 + $5036;
  $5038 = $456 * $5037;
  $5039 = +HEAPF32[$1440>>2];
  $5040 = +HEAPF32[$1441>>2];
  $5041 = $5040 * 2.0;
  $5042 = $5006 + $5041;
  $5043 = $5039 + $5042;
  $5044 = $459 * $5043;
  $5045 = $5038 + $5044;
  $5046 = $105 * $5045;
  $5047 = $5029 + $5046;
  $5048 = +HEAPF32[$1443>>2];
  $5049 = $55 * $5048;
  $5050 = +HEAPF32[$1444>>2];
  $5051 = $46 * $5050;
  $5052 = +HEAPF32[$1445>>2];
  $5053 = $57 * $5052;
  $5054 = $5051 + $5053;
  $5055 = $56 * $5054;
  $5056 = $5049 + $5055;
  HEAPF32[$1446>>2] = $5056;
  $5057 = +HEAPF32[$1447>>2];
  $5058 = $60 * $5057;
  $5059 = +HEAPF32[$1448>>2];
  $5060 = $62 * $5059;
  $5061 = $5058 + $5060;
  $5062 = $50 * $5061;
  $5063 = $5056 - $5062;
  HEAPF32[$1449>>2] = $5063;
  $5064 = +HEAPF32[$1450>>2];
  $5065 = $77 * $5064;
  $5066 = $52 * $5063;
  $5067 = +HEAPF32[$1448>>2];
  $5068 = $64 * $5067;
  $5069 = $5068 + $5066;
  $5070 = +HEAPF32[$1447>>2];
  $5071 = $52 * $5070;
  $5072 = $5071 + $5069;
  $5073 = $50 * $5072;
  $5074 = +HEAPF32[$1451>>2];
  $5075 = $80 * $5074;
  $5076 = $5065 + $5075;
  $5077 = $73 * $5076;
  $5078 = $5073 - $5077;
  HEAPF32[$1452>>2] = $5078;
  $5079 = +HEAPF32[$1453>>2];
  $5080 = $96 * $5079;
  $5081 = +HEAPF32[$1451>>2];
  $5082 = $80 * $5078;
  $5083 = $5065 + $5082;
  $5084 = $73 * $5083;
  $5085 = $5081 + $5084;
  $5086 = +HEAPF32[$1454>>2];
  $5087 = $92 * $5086;
  $5088 = $5080 + $5087;
  $5089 = $89 * $5088;
  $5090 = $5085 - $5089;
  HEAPF32[$1455>>2] = $5090;
  $5091 = +HEAPF32[$1456>>2];
  $5092 = $109 * $5091;
  $5093 = +HEAPF32[$1454>>2];
  $5094 = $92 * $5090;
  $5095 = $5080 + $5094;
  $5096 = $89 * $5095;
  $5097 = $5093 + $5096;
  $5098 = +HEAPF32[$1457>>2];
  $5099 = $112 * $5098;
  $5100 = $5092 + $5099;
  $5101 = $105 * $5100;
  $5102 = $5097 - $5101;
  HEAPF32[$1458>>2] = $5102;
  $5103 = +HEAPF32[$1459>>2];
  $5104 = $55 * $5103;
  $5105 = +HEAPF32[$1444>>2];
  $5106 = +HEAPF32[$1445>>2];
  $5107 = $5105 + $5106;
  $5108 = $56 * $5107;
  $5109 = $5104 + $5108;
  HEAPF32[$1460>>2] = $5109;
  $5110 = +HEAPF32[$1461>>2];
  $5111 = $60 * $5110;
  $5112 = +HEAPF32[$1462>>2];
  $5113 = $62 * $5112;
  $5114 = $5111 + $5113;
  $5115 = $50 * $5114;
  $5116 = $5109 - $5115;
  HEAPF32[$1463>>2] = $5116;
  $5117 = +HEAPF32[$1461>>2];
  $5118 = +HEAPF32[$1462>>2];
  $5119 = $5118 * 2.0;
  $5120 = $5119 + $5116;
  $5121 = $5117 + $5120;
  $5122 = $50 * $5121;
  HEAPF32[$1464>>2] = $5122;
  $5123 = +HEAPF32[$1465>>2];
  $5124 = $120 * $5123;
  $5125 = +HEAPF32[$1466>>2];
  $5126 = $122 * $5125;
  $5127 = $124 * $5121;
  $5128 = $5126 + $5127;
  $5129 = $121 * $5128;
  $5130 = $5124 + $5129;
  HEAPF32[$1467>>2] = $5130;
  $5131 = +HEAPF32[$1468>>2];
  $5132 = $80 * $5131;
  $5133 = +HEAPF32[$1469>>2];
  $5134 = $77 * $5133;
  $5135 = $5132 + $5134;
  $5136 = $73 * $5135;
  $5137 = $5130 - $5136;
  HEAPF32[$1470>>2] = $5137;
  $5138 = +HEAPF32[$1471>>2];
  $5139 = $96 * $5138;
  $5140 = $75 * $5137;
  $5141 = +HEAPF32[$1469>>2];
  $5142 = $126 * $5141;
  $5143 = $5142 + $5140;
  $5144 = +HEAPF32[$1468>>2];
  $5145 = $75 * $5144;
  $5146 = $5145 + $5143;
  $5147 = $73 * $5146;
  $5148 = +HEAPF32[$1472>>2];
  $5149 = $92 * $5148;
  $5150 = $5139 + $5149;
  $5151 = $89 * $5150;
  $5152 = $5147 - $5151;
  HEAPF32[$1473>>2] = $5152;
  $5153 = +HEAPF32[$1474>>2];
  $5154 = $109 * $5153;
  $5155 = +HEAPF32[$1472>>2];
  $5156 = $92 * $5152;
  $5157 = $5139 + $5156;
  $5158 = $89 * $5157;
  $5159 = $5155 + $5158;
  $5160 = +HEAPF32[$1475>>2];
  $5161 = $112 * $5160;
  $5162 = $5154 + $5161;
  $5163 = $105 * $5162;
  $5164 = $5159 - $5163;
  HEAPF32[$1476>>2] = $5164;
  $5165 = +HEAPF32[$1477>>2];
  $5166 = $120 * $5165;
  $5167 = +HEAPF32[$1464>>2];
  $5168 = +HEAPF32[$1466>>2];
  $5169 = $5167 + $5168;
  $5170 = $121 * $5169;
  $5171 = $5166 + $5170;
  HEAPF32[$1478>>2] = $5171;
  $5172 = +HEAPF32[$1479>>2];
  $5173 = $80 * $5172;
  $5174 = +HEAPF32[$1480>>2];
  $5175 = $77 * $5174;
  $5176 = $5173 + $5175;
  $5177 = $73 * $5176;
  $5178 = $5171 - $5177;
  HEAPF32[$1481>>2] = $5178;
  $5179 = +HEAPF32[$1479>>2];
  $5180 = +HEAPF32[$1480>>2];
  $5181 = $5180 * 2.0;
  $5182 = $5181 + $5178;
  $5183 = $5179 + $5182;
  $5184 = $73 * $5183;
  HEAPF32[$1482>>2] = $5184;
  $5185 = +HEAPF32[$1483>>2];
  $5186 = $134 * $5185;
  $5187 = +HEAPF32[$1484>>2];
  $5188 = $136 * $5187;
  $5189 = $138 * $5183;
  $5190 = $5188 + $5189;
  $5191 = $135 * $5190;
  $5192 = $5186 + $5191;
  HEAPF32[$1485>>2] = $5192;
  $5193 = +HEAPF32[$1486>>2];
  $5194 = $92 * $5193;
  $5195 = +HEAPF32[$1487>>2];
  $5196 = $96 * $5195;
  $5197 = $5194 + $5196;
  $5198 = $89 * $5197;
  $5199 = $5192 - $5198;
  HEAPF32[$1488>>2] = $5199;
  $5200 = +HEAPF32[$1489>>2];
  $5201 = $109 * $5200;
  $5202 = $94 * $5199;
  $5203 = +HEAPF32[$1487>>2];
  $5204 = $140 * $5203;
  $5205 = $5204 + $5202;
  $5206 = +HEAPF32[$1486>>2];
  $5207 = $94 * $5206;
  $5208 = $5207 + $5205;
  $5209 = $89 * $5208;
  $5210 = +HEAPF32[$1490>>2];
  $5211 = $112 * $5210;
  $5212 = $5201 + $5211;
  $5213 = $105 * $5212;
  $5214 = $5209 - $5213;
  HEAPF32[$1491>>2] = $5214;
  $5215 = +HEAPF32[$1492>>2];
  $5216 = $134 * $5215;
  $5217 = +HEAPF32[$1482>>2];
  $5218 = +HEAPF32[$1484>>2];
  $5219 = $5217 + $5218;
  $5220 = $135 * $5219;
  $5221 = $5216 + $5220;
  HEAPF32[$1493>>2] = $5221;
  $5222 = +HEAPF32[$1494>>2];
  $5223 = $92 * $5222;
  $5224 = +HEAPF32[$1495>>2];
  $5225 = $96 * $5224;
  $5226 = $5223 + $5225;
  $5227 = $89 * $5226;
  $5228 = $5221 - $5227;
  HEAPF32[$1496>>2] = $5228;
  $5229 = +HEAPF32[$1494>>2];
  $5230 = +HEAPF32[$1495>>2];
  $5231 = $5230 * 2.0;
  $5232 = $5231 + $5228;
  $5233 = $5229 + $5232;
  $5234 = $89 * $5233;
  HEAPF32[$1497>>2] = $5234;
  $5235 = +HEAPF32[$1498>>2];
  $5236 = $148 * $5235;
  $5237 = $152 * $5233;
  $5238 = +HEAPF32[$1499>>2];
  $5239 = $150 * $5238;
  $5240 = $5239 + $5237;
  $5241 = $149 * $5240;
  $5242 = $5236 + $5241;
  HEAPF32[$1500>>2] = $5242;
  $5243 = +HEAPF32[$1501>>2];
  $5244 = $112 * $5243;
  $5245 = +HEAPF32[$1502>>2];
  $5246 = $109 * $5245;
  $5247 = $5244 + $5246;
  $5248 = $105 * $5247;
  $5249 = $5242 - $5248;
  HEAPF32[$1503>>2] = $5249;
  $5250 = +HEAPF32[$1504>>2];
  $5251 = $148 * $5250;
  $5252 = +HEAPF32[$1497>>2];
  $5253 = +HEAPF32[$1499>>2];
  $5254 = $5252 + $5253;
  $5255 = $149 * $5254;
  $5256 = $5251 + $5255;
  HEAPF32[$1505>>2] = $5256;
  $5257 = +HEAPF32[$1506>>2];
  $5258 = $112 * $5257;
  $5259 = +HEAPF32[$1507>>2];
  $5260 = $109 * $5259;
  $5261 = $5258 + $5260;
  $5262 = $105 * $5261;
  $5263 = $5256 - $5262;
  HEAPF32[$1508>>2] = $5263;
  $5264 = +HEAPF32[$1457>>2];
  $5265 = +HEAPF32[$1458>>2];
  $5266 = $112 * $5265;
  $5267 = $5092 + $5266;
  $5268 = $105 * $5267;
  $5269 = $5264 + $5268;
  $5270 = $472 * $5269;
  $5271 = +HEAPF32[$1475>>2];
  $5272 = +HEAPF32[$1476>>2];
  $5273 = $112 * $5272;
  $5274 = $5154 + $5273;
  $5275 = $105 * $5274;
  $5276 = $5271 + $5275;
  $5277 = $475 * $5276;
  $5278 = $5270 + $5277;
  $5279 = +HEAPF32[$1490>>2];
  $5280 = +HEAPF32[$1491>>2];
  $5281 = $112 * $5280;
  $5282 = $5201 + $5281;
  $5283 = $105 * $5282;
  $5284 = $5279 + $5283;
  $5285 = $478 * $5284;
  $5286 = $5278 + $5285;
  $5287 = +HEAPF32[$1503>>2];
  $5288 = $107 * $5287;
  $5289 = +HEAPF32[$1502>>2];
  $5290 = $154 * $5289;
  $5291 = $5288 + $5290;
  $5292 = +HEAPF32[$1501>>2];
  $5293 = $107 * $5292;
  $5294 = $5291 + $5293;
  $5295 = $481 * $5294;
  $5296 = +HEAPF32[$1506>>2];
  $5297 = +HEAPF32[$1507>>2];
  $5298 = $5297 * 2.0;
  $5299 = $5263 + $5298;
  $5300 = $5296 + $5299;
  $5301 = $484 * $5300;
  $5302 = $5295 + $5301;
  $5303 = $105 * $5302;
  $5304 = $5286 + $5303;
  $5305 = $5047 + $5304;
  $5306 = +HEAPF32[$1509>>2];
  $5307 = $55 * $5306;
  $5308 = +HEAPF32[$1510>>2];
  $5309 = $46 * $5308;
  $5310 = +HEAPF32[$1511>>2];
  $5311 = $57 * $5310;
  $5312 = $5309 + $5311;
  $5313 = $56 * $5312;
  $5314 = $5307 + $5313;
  HEAPF32[$1512>>2] = $5314;
  $5315 = +HEAPF32[$1513>>2];
  $5316 = $60 * $5315;
  $5317 = +HEAPF32[$1514>>2];
  $5318 = $62 * $5317;
  $5319 = $5316 + $5318;
  $5320 = $50 * $5319;
  $5321 = $5314 - $5320;
  HEAPF32[$1515>>2] = $5321;
  $5322 = +HEAPF32[$1516>>2];
  $5323 = $77 * $5322;
  $5324 = $52 * $5321;
  $5325 = +HEAPF32[$1514>>2];
  $5326 = $64 * $5325;
  $5327 = $5326 + $5324;
  $5328 = +HEAPF32[$1513>>2];
  $5329 = $52 * $5328;
  $5330 = $5329 + $5327;
  $5331 = $50 * $5330;
  $5332 = +HEAPF32[$1517>>2];
  $5333 = $80 * $5332;
  $5334 = $5323 + $5333;
  $5335 = $73 * $5334;
  $5336 = $5331 - $5335;
  HEAPF32[$1518>>2] = $5336;
  $5337 = +HEAPF32[$1519>>2];
  $5338 = $96 * $5337;
  $5339 = +HEAPF32[$1517>>2];
  $5340 = $80 * $5336;
  $5341 = $5323 + $5340;
  $5342 = $73 * $5341;
  $5343 = $5339 + $5342;
  $5344 = +HEAPF32[$1520>>2];
  $5345 = $92 * $5344;
  $5346 = $5338 + $5345;
  $5347 = $89 * $5346;
  $5348 = $5343 - $5347;
  HEAPF32[$1521>>2] = $5348;
  $5349 = +HEAPF32[$1522>>2];
  $5350 = $109 * $5349;
  $5351 = +HEAPF32[$1520>>2];
  $5352 = $92 * $5348;
  $5353 = $5338 + $5352;
  $5354 = $89 * $5353;
  $5355 = $5351 + $5354;
  $5356 = +HEAPF32[$1523>>2];
  $5357 = $112 * $5356;
  $5358 = $5350 + $5357;
  $5359 = $105 * $5358;
  $5360 = $5355 - $5359;
  HEAPF32[$1524>>2] = $5360;
  $5361 = +HEAPF32[$1525>>2];
  $5362 = $55 * $5361;
  $5363 = +HEAPF32[$1510>>2];
  $5364 = +HEAPF32[$1511>>2];
  $5365 = $5363 + $5364;
  $5366 = $56 * $5365;
  $5367 = $5362 + $5366;
  HEAPF32[$1526>>2] = $5367;
  $5368 = +HEAPF32[$1527>>2];
  $5369 = $60 * $5368;
  $5370 = +HEAPF32[$1528>>2];
  $5371 = $62 * $5370;
  $5372 = $5369 + $5371;
  $5373 = $50 * $5372;
  $5374 = $5367 - $5373;
  HEAPF32[$1529>>2] = $5374;
  $5375 = +HEAPF32[$1527>>2];
  $5376 = +HEAPF32[$1528>>2];
  $5377 = $5376 * 2.0;
  $5378 = $5377 + $5374;
  $5379 = $5375 + $5378;
  $5380 = $50 * $5379;
  HEAPF32[$1530>>2] = $5380;
  $5381 = +HEAPF32[$1531>>2];
  $5382 = $120 * $5381;
  $5383 = $124 * $5379;
  $5384 = +HEAPF32[$1532>>2];
  $5385 = $122 * $5384;
  $5386 = $5385 + $5383;
  $5387 = $121 * $5386;
  $5388 = $5382 + $5387;
  HEAPF32[$1533>>2] = $5388;
  $5389 = +HEAPF32[$1534>>2];
  $5390 = $80 * $5389;
  $5391 = +HEAPF32[$1535>>2];
  $5392 = $77 * $5391;
  $5393 = $5390 + $5392;
  $5394 = $73 * $5393;
  $5395 = $5388 - $5394;
  HEAPF32[$1536>>2] = $5395;
  $5396 = +HEAPF32[$1537>>2];
  $5397 = $96 * $5396;
  $5398 = $75 * $5395;
  $5399 = +HEAPF32[$1535>>2];
  $5400 = $126 * $5399;
  $5401 = $5400 + $5398;
  $5402 = +HEAPF32[$1534>>2];
  $5403 = $75 * $5402;
  $5404 = $5403 + $5401;
  $5405 = $73 * $5404;
  $5406 = +HEAPF32[$1538>>2];
  $5407 = $92 * $5406;
  $5408 = $5397 + $5407;
  $5409 = $89 * $5408;
  $5410 = $5405 - $5409;
  HEAPF32[$1539>>2] = $5410;
  $5411 = +HEAPF32[$1540>>2];
  $5412 = $109 * $5411;
  $5413 = +HEAPF32[$1538>>2];
  $5414 = $92 * $5410;
  $5415 = $5397 + $5414;
  $5416 = $89 * $5415;
  $5417 = $5413 + $5416;
  $5418 = +HEAPF32[$1541>>2];
  $5419 = $112 * $5418;
  $5420 = $5412 + $5419;
  $5421 = $105 * $5420;
  $5422 = $5417 - $5421;
  HEAPF32[$1542>>2] = $5422;
  $5423 = +HEAPF32[$1543>>2];
  $5424 = $120 * $5423;
  $5425 = +HEAPF32[$1530>>2];
  $5426 = +HEAPF32[$1532>>2];
  $5427 = $5425 + $5426;
  $5428 = $121 * $5427;
  $5429 = $5424 + $5428;
  HEAPF32[$1544>>2] = $5429;
  $5430 = +HEAPF32[$1545>>2];
  $5431 = $80 * $5430;
  $5432 = +HEAPF32[$1546>>2];
  $5433 = $77 * $5432;
  $5434 = $5431 + $5433;
  $5435 = $73 * $5434;
  $5436 = $5429 - $5435;
  HEAPF32[$1547>>2] = $5436;
  $5437 = +HEAPF32[$1545>>2];
  $5438 = +HEAPF32[$1546>>2];
  $5439 = $5438 * 2.0;
  $5440 = $5439 + $5436;
  $5441 = $5437 + $5440;
  $5442 = $73 * $5441;
  HEAPF32[$1548>>2] = $5442;
  $5443 = +HEAPF32[$1549>>2];
  $5444 = $134 * $5443;
  $5445 = $138 * $5441;
  $5446 = +HEAPF32[$1550>>2];
  $5447 = $136 * $5446;
  $5448 = $5447 + $5445;
  $5449 = $135 * $5448;
  $5450 = $5444 + $5449;
  HEAPF32[$1551>>2] = $5450;
  $5451 = +HEAPF32[$1552>>2];
  $5452 = $92 * $5451;
  $5453 = +HEAPF32[$1553>>2];
  $5454 = $96 * $5453;
  $5455 = $5452 + $5454;
  $5456 = $89 * $5455;
  $5457 = $5450 - $5456;
  HEAPF32[$1554>>2] = $5457;
  $5458 = +HEAPF32[$1555>>2];
  $5459 = $109 * $5458;
  $5460 = $94 * $5457;
  $5461 = +HEAPF32[$1553>>2];
  $5462 = $140 * $5461;
  $5463 = $5462 + $5460;
  $5464 = +HEAPF32[$1552>>2];
  $5465 = $94 * $5464;
  $5466 = $5465 + $5463;
  $5467 = $89 * $5466;
  $5468 = +HEAPF32[$1556>>2];
  $5469 = $112 * $5468;
  $5470 = $5459 + $5469;
  $5471 = $105 * $5470;
  $5472 = $5467 - $5471;
  HEAPF32[$1557>>2] = $5472;
  $5473 = +HEAPF32[$1558>>2];
  $5474 = $134 * $5473;
  $5475 = +HEAPF32[$1548>>2];
  $5476 = +HEAPF32[$1550>>2];
  $5477 = $5475 + $5476;
  $5478 = $135 * $5477;
  $5479 = $5474 + $5478;
  HEAPF32[$1559>>2] = $5479;
  $5480 = +HEAPF32[$1560>>2];
  $5481 = $92 * $5480;
  $5482 = +HEAPF32[$1561>>2];
  $5483 = $96 * $5482;
  $5484 = $5481 + $5483;
  $5485 = $89 * $5484;
  $5486 = $5479 - $5485;
  HEAPF32[$1562>>2] = $5486;
  $5487 = +HEAPF32[$1560>>2];
  $5488 = +HEAPF32[$1561>>2];
  $5489 = $5488 * 2.0;
  $5490 = $5489 + $5486;
  $5491 = $5487 + $5490;
  $5492 = $89 * $5491;
  HEAPF32[$1563>>2] = $5492;
  $5493 = +HEAPF32[$1564>>2];
  $5494 = $148 * $5493;
  $5495 = $152 * $5491;
  $5496 = +HEAPF32[$1565>>2];
  $5497 = $150 * $5496;
  $5498 = $5497 + $5495;
  $5499 = $149 * $5498;
  $5500 = $5494 + $5499;
  HEAPF32[$1566>>2] = $5500;
  $5501 = +HEAPF32[$1567>>2];
  $5502 = $112 * $5501;
  $5503 = +HEAPF32[$1568>>2];
  $5504 = $109 * $5503;
  $5505 = $5502 + $5504;
  $5506 = $105 * $5505;
  $5507 = $5500 - $5506;
  HEAPF32[$1569>>2] = $5507;
  $5508 = +HEAPF32[$1570>>2];
  $5509 = $148 * $5508;
  $5510 = +HEAPF32[$1563>>2];
  $5511 = +HEAPF32[$1565>>2];
  $5512 = $5510 + $5511;
  $5513 = $149 * $5512;
  $5514 = $5509 + $5513;
  HEAPF32[$1571>>2] = $5514;
  $5515 = +HEAPF32[$1572>>2];
  $5516 = $112 * $5515;
  $5517 = +HEAPF32[$1573>>2];
  $5518 = $109 * $5517;
  $5519 = $5516 + $5518;
  $5520 = $105 * $5519;
  $5521 = $5514 - $5520;
  HEAPF32[$1574>>2] = $5521;
  $5522 = +HEAPF32[$1523>>2];
  $5523 = +HEAPF32[$1524>>2];
  $5524 = $112 * $5523;
  $5525 = $5350 + $5524;
  $5526 = $105 * $5525;
  $5527 = $5522 + $5526;
  $5528 = $497 * $5527;
  $5529 = +HEAPF32[$1541>>2];
  $5530 = +HEAPF32[$1542>>2];
  $5531 = $112 * $5530;
  $5532 = $5412 + $5531;
  $5533 = $105 * $5532;
  $5534 = $5529 + $5533;
  $5535 = $500 * $5534;
  $5536 = $5528 + $5535;
  $5537 = +HEAPF32[$1556>>2];
  $5538 = +HEAPF32[$1557>>2];
  $5539 = $112 * $5538;
  $5540 = $5459 + $5539;
  $5541 = $105 * $5540;
  $5542 = $5537 + $5541;
  $5543 = $503 * $5542;
  $5544 = $5536 + $5543;
  $5545 = +HEAPF32[$1569>>2];
  $5546 = $107 * $5545;
  $5547 = +HEAPF32[$1568>>2];
  $5548 = $154 * $5547;
  $5549 = $5546 + $5548;
  $5550 = +HEAPF32[$1567>>2];
  $5551 = $107 * $5550;
  $5552 = $5549 + $5551;
  $5553 = $506 * $5552;
  $5554 = +HEAPF32[$1572>>2];
  $5555 = +HEAPF32[$1573>>2];
  $5556 = $5555 * 2.0;
  $5557 = $5521 + $5556;
  $5558 = $5554 + $5557;
  $5559 = $509 * $5558;
  $5560 = $5553 + $5559;
  $5561 = $105 * $5560;
  $5562 = $5544 + $5561;
  $5563 = +HEAPF32[$1575>>2];
  $5564 = $55 * $5563;
  $5565 = +HEAPF32[$1576>>2];
  $5566 = $46 * $5565;
  $5567 = +HEAPF32[$1577>>2];
  $5568 = $57 * $5567;
  $5569 = $5566 + $5568;
  $5570 = $56 * $5569;
  $5571 = $5564 + $5570;
  HEAPF32[$1578>>2] = $5571;
  $5572 = +HEAPF32[$1579>>2];
  $5573 = $60 * $5572;
  $5574 = +HEAPF32[$1580>>2];
  $5575 = $62 * $5574;
  $5576 = $5573 + $5575;
  $5577 = $50 * $5576;
  $5578 = $5571 - $5577;
  HEAPF32[$1581>>2] = $5578;
  $5579 = +HEAPF32[$1582>>2];
  $5580 = $77 * $5579;
  $5581 = $52 * $5578;
  $5582 = +HEAPF32[$1580>>2];
  $5583 = $64 * $5582;
  $5584 = $5583 + $5581;
  $5585 = +HEAPF32[$1579>>2];
  $5586 = $52 * $5585;
  $5587 = $5586 + $5584;
  $5588 = $50 * $5587;
  $5589 = +HEAPF32[$1583>>2];
  $5590 = $80 * $5589;
  $5591 = $5580 + $5590;
  $5592 = $73 * $5591;
  $5593 = $5588 - $5592;
  HEAPF32[$1584>>2] = $5593;
  $5594 = +HEAPF32[$1585>>2];
  $5595 = $96 * $5594;
  $5596 = +HEAPF32[$1583>>2];
  $5597 = $80 * $5593;
  $5598 = $5580 + $5597;
  $5599 = $73 * $5598;
  $5600 = $5596 + $5599;
  $5601 = +HEAPF32[$1586>>2];
  $5602 = $92 * $5601;
  $5603 = $5595 + $5602;
  $5604 = $89 * $5603;
  $5605 = $5600 - $5604;
  HEAPF32[$1587>>2] = $5605;
  $5606 = +HEAPF32[$1588>>2];
  $5607 = $109 * $5606;
  $5608 = +HEAPF32[$1586>>2];
  $5609 = $92 * $5605;
  $5610 = $5595 + $5609;
  $5611 = $89 * $5610;
  $5612 = $5608 + $5611;
  $5613 = +HEAPF32[$1589>>2];
  $5614 = $112 * $5613;
  $5615 = $5607 + $5614;
  $5616 = $105 * $5615;
  $5617 = $5612 - $5616;
  HEAPF32[$1590>>2] = $5617;
  $5618 = +HEAPF32[$1591>>2];
  $5619 = $55 * $5618;
  $5620 = +HEAPF32[$1576>>2];
  $5621 = +HEAPF32[$1577>>2];
  $5622 = $5620 + $5621;
  $5623 = $56 * $5622;
  $5624 = $5619 + $5623;
  HEAPF32[$1592>>2] = $5624;
  $5625 = +HEAPF32[$1593>>2];
  $5626 = $60 * $5625;
  $5627 = +HEAPF32[$1594>>2];
  $5628 = $62 * $5627;
  $5629 = $5626 + $5628;
  $5630 = $50 * $5629;
  $5631 = $5624 - $5630;
  HEAPF32[$1595>>2] = $5631;
  $5632 = +HEAPF32[$1593>>2];
  $5633 = +HEAPF32[$1594>>2];
  $5634 = $5633 * 2.0;
  $5635 = $5634 + $5631;
  $5636 = $5632 + $5635;
  $5637 = $50 * $5636;
  HEAPF32[$1596>>2] = $5637;
  $5638 = +HEAPF32[$1597>>2];
  $5639 = $120 * $5638;
  $5640 = $124 * $5636;
  $5641 = +HEAPF32[$1598>>2];
  $5642 = $122 * $5641;
  $5643 = $5642 + $5640;
  $5644 = $121 * $5643;
  $5645 = $5639 + $5644;
  HEAPF32[$1599>>2] = $5645;
  $5646 = +HEAPF32[$1600>>2];
  $5647 = $80 * $5646;
  $5648 = +HEAPF32[$1601>>2];
  $5649 = $77 * $5648;
  $5650 = $5647 + $5649;
  $5651 = $73 * $5650;
  $5652 = $5645 - $5651;
  HEAPF32[$1602>>2] = $5652;
  $5653 = +HEAPF32[$1603>>2];
  $5654 = $96 * $5653;
  $5655 = $75 * $5652;
  $5656 = +HEAPF32[$1601>>2];
  $5657 = $126 * $5656;
  $5658 = $5657 + $5655;
  $5659 = +HEAPF32[$1600>>2];
  $5660 = $75 * $5659;
  $5661 = $5660 + $5658;
  $5662 = $73 * $5661;
  $5663 = +HEAPF32[$1604>>2];
  $5664 = $92 * $5663;
  $5665 = $5654 + $5664;
  $5666 = $89 * $5665;
  $5667 = $5662 - $5666;
  HEAPF32[$1605>>2] = $5667;
  $5668 = +HEAPF32[$1606>>2];
  $5669 = $109 * $5668;
  $5670 = +HEAPF32[$1604>>2];
  $5671 = $92 * $5667;
  $5672 = $5654 + $5671;
  $5673 = $89 * $5672;
  $5674 = $5670 + $5673;
  $5675 = +HEAPF32[$1607>>2];
  $5676 = $112 * $5675;
  $5677 = $5669 + $5676;
  $5678 = $105 * $5677;
  $5679 = $5674 - $5678;
  HEAPF32[$1608>>2] = $5679;
  $5680 = +HEAPF32[$1609>>2];
  $5681 = $120 * $5680;
  $5682 = +HEAPF32[$1596>>2];
  $5683 = +HEAPF32[$1598>>2];
  $5684 = $5682 + $5683;
  $5685 = $121 * $5684;
  $5686 = $5681 + $5685;
  HEAPF32[$1610>>2] = $5686;
  $5687 = +HEAPF32[$1611>>2];
  $5688 = $80 * $5687;
  $5689 = +HEAPF32[$1612>>2];
  $5690 = $77 * $5689;
  $5691 = $5688 + $5690;
  $5692 = $73 * $5691;
  $5693 = $5686 - $5692;
  HEAPF32[$1613>>2] = $5693;
  $5694 = +HEAPF32[$1611>>2];
  $5695 = +HEAPF32[$1612>>2];
  $5696 = $5695 * 2.0;
  $5697 = $5696 + $5693;
  $5698 = $5694 + $5697;
  $5699 = $73 * $5698;
  HEAPF32[$1614>>2] = $5699;
  $5700 = +HEAPF32[$1615>>2];
  $5701 = $134 * $5700;
  $5702 = $138 * $5698;
  $5703 = +HEAPF32[$1616>>2];
  $5704 = $136 * $5703;
  $5705 = $5704 + $5702;
  $5706 = $135 * $5705;
  $5707 = $5701 + $5706;
  HEAPF32[$1617>>2] = $5707;
  $5708 = +HEAPF32[$1618>>2];
  $5709 = $92 * $5708;
  $5710 = +HEAPF32[$1619>>2];
  $5711 = $96 * $5710;
  $5712 = $5709 + $5711;
  $5713 = $89 * $5712;
  $5714 = $5707 - $5713;
  HEAPF32[$1620>>2] = $5714;
  $5715 = +HEAPF32[$1621>>2];
  $5716 = $109 * $5715;
  $5717 = $94 * $5714;
  $5718 = +HEAPF32[$1619>>2];
  $5719 = $140 * $5718;
  $5720 = $5719 + $5717;
  $5721 = +HEAPF32[$1618>>2];
  $5722 = $94 * $5721;
  $5723 = $5722 + $5720;
  $5724 = $89 * $5723;
  $5725 = +HEAPF32[$1622>>2];
  $5726 = $112 * $5725;
  $5727 = $5716 + $5726;
  $5728 = $105 * $5727;
  $5729 = $5724 - $5728;
  HEAPF32[$1623>>2] = $5729;
  $5730 = +HEAPF32[$1624>>2];
  $5731 = $134 * $5730;
  $5732 = +HEAPF32[$1614>>2];
  $5733 = +HEAPF32[$1616>>2];
  $5734 = $5732 + $5733;
  $5735 = $135 * $5734;
  $5736 = $5731 + $5735;
  HEAPF32[$1625>>2] = $5736;
  $5737 = +HEAPF32[$1626>>2];
  $5738 = $92 * $5737;
  $5739 = +HEAPF32[$1627>>2];
  $5740 = $96 * $5739;
  $5741 = $5738 + $5740;
  $5742 = $89 * $5741;
  $5743 = $5736 - $5742;
  HEAPF32[$1628>>2] = $5743;
  $5744 = +HEAPF32[$1626>>2];
  $5745 = +HEAPF32[$1627>>2];
  $5746 = $5745 * 2.0;
  $5747 = $5746 + $5743;
  $5748 = $5744 + $5747;
  $5749 = $89 * $5748;
  HEAPF32[$1629>>2] = $5749;
  $5750 = +HEAPF32[$1630>>2];
  $5751 = $148 * $5750;
  $5752 = $152 * $5748;
  $5753 = +HEAPF32[$1631>>2];
  $5754 = $150 * $5753;
  $5755 = $5754 + $5752;
  $5756 = $149 * $5755;
  $5757 = $5751 + $5756;
  HEAPF32[$1632>>2] = $5757;
  $5758 = +HEAPF32[$1633>>2];
  $5759 = $112 * $5758;
  $5760 = +HEAPF32[$1634>>2];
  $5761 = $109 * $5760;
  $5762 = $5759 + $5761;
  $5763 = $105 * $5762;
  $5764 = $5757 - $5763;
  HEAPF32[$1635>>2] = $5764;
  $5765 = +HEAPF32[$1636>>2];
  $5766 = $148 * $5765;
  $5767 = +HEAPF32[$1629>>2];
  $5768 = +HEAPF32[$1631>>2];
  $5769 = $5767 + $5768;
  $5770 = $149 * $5769;
  $5771 = $5766 + $5770;
  HEAPF32[$1637>>2] = $5771;
  $5772 = +HEAPF32[$1638>>2];
  $5773 = $112 * $5772;
  $5774 = +HEAPF32[$1639>>2];
  $5775 = $109 * $5774;
  $5776 = $5773 + $5775;
  $5777 = $105 * $5776;
  $5778 = $5771 - $5777;
  HEAPF32[$1640>>2] = $5778;
  $5779 = +HEAPF32[$1589>>2];
  $5780 = +HEAPF32[$1590>>2];
  $5781 = $112 * $5780;
  $5782 = $5607 + $5781;
  $5783 = $105 * $5782;
  $5784 = $5779 + $5783;
  $5785 = $521 * $5784;
  $5786 = +HEAPF32[$1607>>2];
  $5787 = +HEAPF32[$1608>>2];
  $5788 = $112 * $5787;
  $5789 = $5669 + $5788;
  $5790 = $105 * $5789;
  $5791 = $5786 + $5790;
  $5792 = $524 * $5791;
  $5793 = $5785 + $5792;
  $5794 = +HEAPF32[$1622>>2];
  $5795 = +HEAPF32[$1623>>2];
  $5796 = $112 * $5795;
  $5797 = $5716 + $5796;
  $5798 = $105 * $5797;
  $5799 = $5794 + $5798;
  $5800 = $527 * $5799;
  $5801 = $5793 + $5800;
  $5802 = +HEAPF32[$1635>>2];
  $5803 = $107 * $5802;
  $5804 = +HEAPF32[$1634>>2];
  $5805 = $154 * $5804;
  $5806 = $5803 + $5805;
  $5807 = +HEAPF32[$1633>>2];
  $5808 = $107 * $5807;
  $5809 = $5806 + $5808;
  $5810 = $530 * $5809;
  $5811 = +HEAPF32[$1638>>2];
  $5812 = +HEAPF32[$1639>>2];
  $5813 = $5812 * 2.0;
  $5814 = $5778 + $5813;
  $5815 = $5811 + $5814;
  $5816 = $533 * $5815;
  $5817 = $5810 + $5816;
  $5818 = $105 * $5817;
  $5819 = $5801 + $5818;
  $5820 = $5562 + $5819;
  $5821 = $5305 + $5820;
  $5822 = $4790 + $5821;
  $5823 = (+($1689|0));
  $5824 = (+($1696|0));
  $5825 = $3759 + $5822;
  $5826 = $18 * $5825;
  $5827 = $5824 + $5826;
  $5828 = $1692 + $5827;
  $5829 = $5823 + $5828;
  $5830 = $1685 + $5829;
  $5831 = HEAP32[$1641>>2]|0;
  $5832 = $5831 & 8191;
  $5833 = ((($this) + ($5832<<2)|0) + 4232|0);
  HEAPF32[$5833>>2] = $5830;
  $5834 = HEAP32[$1641>>2]|0;
  $5835 = (($5834) - ($535))|0;
  $5836 = $5835 & 8191;
  $5837 = ((($this) + ($5836<<2)|0) + 4232|0);
  $5838 = +HEAPF32[$5837>>2];
  HEAPF32[$1642>>2] = $5838;
  HEAPF32[$1643>>2] = $537;
  $5839 = +HEAPF32[$1644>>2];
  $5840 = $537 - $5839;
  $5841 = $5840 > 0.0;
  $5842 = $5841&1;
  $5843 = (($570) + ($i$02<<2)|0);
  $5844 = +HEAPF32[$5843>>2];
  $5845 = $11 * $5844;
  $5846 = $5823 + $1685;
  $5847 = $5846 + $5845;
  $5848 = (+($5842|0));
  $5849 = $3759 * 0.25;
  $5850 = $5822 * 0.25;
  $5851 = $5849 - $5850;
  $5852 = $17 * $5851;
  $5853 = $5847 + $5852;
  $5854 = $5848 + $5853;
  $5855 = HEAP32[$1641>>2]|0;
  $5856 = $5855 & 8191;
  $5857 = ((($this) + ($5856<<2)|0) + 37024|0);
  HEAPF32[$5857>>2] = $5854;
  $5858 = HEAP32[$1641>>2]|0;
  $5859 = (($5858) - ($539))|0;
  $5860 = $5859 & 8191;
  $5861 = ((($this) + ($5860<<2)|0) + 37024|0);
  $5862 = +HEAPF32[$5861>>2];
  HEAPF32[$1645>>2] = $5862;
  $5863 = $1692 + $5824;
  $5864 = $5823 + $5863;
  $5865 = $1685 + $5864;
  $5866 = $2727 * 0.25;
  $5867 = $3758 * 0.25;
  $5868 = $5866 - $5867;
  $5869 = $4790 * 0.25;
  $5870 = $5821 * 0.25;
  $5871 = $5869 - $5870;
  $5872 = $5868 + $5871;
  $5873 = $17 * $5872;
  $5874 = $5865 + $5873;
  $5875 = HEAP32[$1641>>2]|0;
  $5876 = $5875 & 8191;
  $5877 = ((($this) + ($5876<<2)|0) + 69804|0);
  HEAPF32[$5877>>2] = $5874;
  $5878 = HEAP32[$1641>>2]|0;
  $5879 = (($5878) - ($541))|0;
  $5880 = $5879 & 8191;
  $5881 = ((($this) + ($5880<<2)|0) + 69804|0);
  $5882 = +HEAPF32[$5881>>2];
  HEAPF32[$1646>>2] = $5882;
  $5883 = $5847 + $5848;
  $5884 = $5868 - $5871;
  $5885 = $17 * $5884;
  $5886 = $5883 + $5885;
  $5887 = HEAP32[$1641>>2]|0;
  $5888 = $5887 & 8191;
  $5889 = ((($this) + ($5888<<2)|0) + 102584|0);
  HEAPF32[$5889>>2] = $5886;
  $5890 = HEAP32[$1641>>2]|0;
  $5891 = (($5890) - ($543))|0;
  $5892 = $5891 & 8191;
  $5893 = ((($this) + ($5892<<2)|0) + 102584|0);
  $5894 = +HEAPF32[$5893>>2];
  HEAPF32[$1647>>2] = $5894;
  $5895 = $2211 * 0.25;
  $5896 = $2726 * 0.25;
  $5897 = $5895 - $5896;
  $5898 = $3242 * 0.25;
  $5899 = $3757 * 0.25;
  $5900 = $5898 - $5899;
  $5901 = $5897 + $5900;
  $5902 = $4274 * 0.25;
  $5903 = $4789 * 0.25;
  $5904 = $5902 - $5903;
  $5905 = $5305 * 0.25;
  $5906 = $5820 * 0.25;
  $5907 = $5905 - $5906;
  $5908 = $5904 + $5907;
  $5909 = $5901 + $5908;
  $5910 = $17 * $5909;
  $5911 = $5865 + $5910;
  $5912 = HEAP32[$1641>>2]|0;
  $5913 = $5912 & 8191;
  $5914 = ((($this) + ($5913<<2)|0) + 135364|0);
  HEAPF32[$5914>>2] = $5911;
  $5915 = HEAP32[$1641>>2]|0;
  $5916 = (($5915) - ($545))|0;
  $5917 = $5916 & 8191;
  $5918 = ((($this) + ($5917<<2)|0) + 135364|0);
  $5919 = +HEAPF32[$5918>>2];
  HEAPF32[$1648>>2] = $5919;
  $5920 = $5901 - $5908;
  $5921 = $17 * $5920;
  $5922 = $5883 + $5921;
  $5923 = HEAP32[$1641>>2]|0;
  $5924 = $5923 & 8191;
  $5925 = ((($this) + ($5924<<2)|0) + 168144|0);
  HEAPF32[$5925>>2] = $5922;
  $5926 = HEAP32[$1641>>2]|0;
  $5927 = (($5926) - ($547))|0;
  $5928 = $5927 & 8191;
  $5929 = ((($this) + ($5928<<2)|0) + 168144|0);
  $5930 = +HEAPF32[$5929>>2];
  HEAPF32[$1649>>2] = $5930;
  $5931 = $5897 - $5900;
  $5932 = $5904 - $5907;
  $5933 = $5931 + $5932;
  $5934 = $17 * $5933;
  $5935 = $5865 + $5934;
  $5936 = HEAP32[$1641>>2]|0;
  $5937 = $5936 & 8191;
  $5938 = ((($this) + ($5937<<2)|0) + 200924|0);
  HEAPF32[$5938>>2] = $5935;
  $5939 = HEAP32[$1641>>2]|0;
  $5940 = (($5939) - ($549))|0;
  $5941 = $5940 & 8191;
  $5942 = ((($this) + ($5941<<2)|0) + 200924|0);
  $5943 = +HEAPF32[$5942>>2];
  HEAPF32[$1650>>2] = $5943;
  $5944 = $5931 - $5932;
  $5945 = $17 * $5944;
  $5946 = $5883 + $5945;
  $5947 = HEAP32[$1641>>2]|0;
  $5948 = $5947 & 8191;
  $5949 = ((($this) + ($5948<<2)|0) + 233704|0);
  HEAPF32[$5949>>2] = $5946;
  $5950 = HEAP32[$1641>>2]|0;
  $5951 = (($5950) - ($551))|0;
  $5952 = $5951 & 8191;
  $5953 = ((($this) + ($5952<<2)|0) + 233704|0);
  $5954 = +HEAPF32[$5953>>2];
  HEAPF32[$1651>>2] = $5954;
  $5955 = $1953 * 0.25;
  $5956 = $2210 * 0.25;
  $5957 = $5955 - $5956;
  $5958 = $2468 * 0.25;
  $5959 = $2725 * 0.25;
  $5960 = $5958 - $5959;
  $5961 = $5957 + $5960;
  $5962 = $2984 * 0.25;
  $5963 = $3241 * 0.25;
  $5964 = $5962 - $5963;
  $5965 = $3499 * 0.25;
  $5966 = $3756 * 0.25;
  $5967 = $5965 - $5966;
  $5968 = $5964 + $5967;
  $5969 = $5961 + $5968;
  $5970 = $4016 * 0.25;
  $5971 = $4273 * 0.25;
  $5972 = $5970 - $5971;
  $5973 = $4531 * 0.25;
  $5974 = $4788 * 0.25;
  $5975 = $5973 - $5974;
  $5976 = $5972 + $5975;
  $5977 = $5047 * 0.25;
  $5978 = $5304 * 0.25;
  $5979 = $5977 - $5978;
  $5980 = $5562 * 0.25;
  $5981 = $5819 * 0.25;
  $5982 = $5980 - $5981;
  $5983 = $5979 + $5982;
  $5984 = $5976 + $5983;
  $5985 = $5969 + $5984;
  $5986 = $17 * $5985;
  $5987 = $5865 + $5986;
  $5988 = HEAP32[$1641>>2]|0;
  $5989 = $5988 & 8191;
  $5990 = ((($this) + ($5989<<2)|0) + 266484|0);
  HEAPF32[$5990>>2] = $5987;
  $5991 = HEAP32[$1641>>2]|0;
  $5992 = (($5991) - ($553))|0;
  $5993 = $5992 & 8191;
  $5994 = ((($this) + ($5993<<2)|0) + 266484|0);
  $5995 = +HEAPF32[$5994>>2];
  HEAPF32[$1652>>2] = $5995;
  $5996 = $5969 - $5984;
  $5997 = $17 * $5996;
  $5998 = $5883 + $5997;
  $5999 = HEAP32[$1641>>2]|0;
  $6000 = $5999 & 8191;
  $6001 = ((($this) + ($6000<<2)|0) + 299264|0);
  HEAPF32[$6001>>2] = $5998;
  $6002 = HEAP32[$1641>>2]|0;
  $6003 = (($6002) - ($555))|0;
  $6004 = $6003 & 8191;
  $6005 = ((($this) + ($6004<<2)|0) + 299264|0);
  $6006 = +HEAPF32[$6005>>2];
  HEAPF32[$1653>>2] = $6006;
  $6007 = $5961 - $5968;
  $6008 = $5976 - $5983;
  $6009 = $6007 + $6008;
  $6010 = $17 * $6009;
  $6011 = $5865 + $6010;
  $6012 = HEAP32[$1641>>2]|0;
  $6013 = $6012 & 8191;
  $6014 = ((($this) + ($6013<<2)|0) + 332044|0);
  HEAPF32[$6014>>2] = $6011;
  $6015 = HEAP32[$1641>>2]|0;
  $6016 = (($6015) - ($557))|0;
  $6017 = $6016 & 8191;
  $6018 = ((($this) + ($6017<<2)|0) + 332044|0);
  $6019 = +HEAPF32[$6018>>2];
  HEAPF32[$1654>>2] = $6019;
  $6020 = $6007 - $6008;
  $6021 = $17 * $6020;
  $6022 = $5883 + $6021;
  $6023 = HEAP32[$1641>>2]|0;
  $6024 = $6023 & 8191;
  $6025 = ((($this) + ($6024<<2)|0) + 364824|0);
  HEAPF32[$6025>>2] = $6022;
  $6026 = HEAP32[$1641>>2]|0;
  $6027 = (($6026) - ($559))|0;
  $6028 = $6027 & 8191;
  $6029 = ((($this) + ($6028<<2)|0) + 364824|0);
  $6030 = +HEAPF32[$6029>>2];
  HEAPF32[$1655>>2] = $6030;
  $6031 = $5957 - $5960;
  $6032 = $5964 - $5967;
  $6033 = $6031 + $6032;
  $6034 = $5972 - $5975;
  $6035 = $5979 - $5982;
  $6036 = $6034 + $6035;
  $6037 = $6033 + $6036;
  $6038 = $17 * $6037;
  $6039 = $5865 + $6038;
  $6040 = HEAP32[$1641>>2]|0;
  $6041 = $6040 & 8191;
  $6042 = ((($this) + ($6041<<2)|0) + 397604|0);
  HEAPF32[$6042>>2] = $6039;
  $6043 = HEAP32[$1641>>2]|0;
  $6044 = (($6043) - ($561))|0;
  $6045 = $6044 & 8191;
  $6046 = ((($this) + ($6045<<2)|0) + 397604|0);
  $6047 = +HEAPF32[$6046>>2];
  HEAPF32[$1656>>2] = $6047;
  $6048 = $6033 - $6036;
  $6049 = $17 * $6048;
  $6050 = $5883 + $6049;
  $6051 = HEAP32[$1641>>2]|0;
  $6052 = $6051 & 8191;
  $6053 = ((($this) + ($6052<<2)|0) + 430384|0);
  HEAPF32[$6053>>2] = $6050;
  $6054 = HEAP32[$1641>>2]|0;
  $6055 = (($6054) - ($563))|0;
  $6056 = $6055 & 8191;
  $6057 = ((($this) + ($6056<<2)|0) + 430384|0);
  $6058 = +HEAPF32[$6057>>2];
  HEAPF32[$1657>>2] = $6058;
  $6059 = $6031 - $6032;
  $6060 = $6034 - $6035;
  $6061 = $6059 + $6060;
  $6062 = $17 * $6061;
  $6063 = $5865 + $6062;
  $6064 = HEAP32[$1641>>2]|0;
  $6065 = $6064 & 8191;
  $6066 = ((($this) + ($6065<<2)|0) + 463164|0);
  HEAPF32[$6066>>2] = $6063;
  $6067 = HEAP32[$1641>>2]|0;
  $6068 = (($6067) - ($565))|0;
  $6069 = $6068 & 8191;
  $6070 = ((($this) + ($6069<<2)|0) + 463164|0);
  $6071 = +HEAPF32[$6070>>2];
  HEAPF32[$1658>>2] = $6071;
  $6072 = $6059 - $6060;
  $6073 = $17 * $6072;
  $6074 = $5883 + $6073;
  $6075 = HEAP32[$1641>>2]|0;
  $6076 = $6075 & 8191;
  $6077 = ((($this) + ($6076<<2)|0) + 495944|0);
  HEAPF32[$6077>>2] = $6074;
  $6078 = HEAP32[$1641>>2]|0;
  $6079 = (($6078) - ($567))|0;
  $6080 = $6079 & 8191;
  $6081 = ((($this) + ($6080<<2)|0) + 495944|0);
  $6082 = +HEAPF32[$6081>>2];
  HEAPF32[$1659>>2] = $6082;
  $6083 = +HEAPF32[$1642>>2];
  $6084 = +HEAPF32[$1646>>2];
  $6085 = $6083 + $6084;
  $6086 = +HEAPF32[$1648>>2];
  $6087 = $6085 + $6086;
  $6088 = +HEAPF32[$1650>>2];
  $6089 = $6087 + $6088;
  $6090 = +HEAPF32[$1652>>2];
  $6091 = $6089 + $6090;
  $6092 = +HEAPF32[$1654>>2];
  $6093 = $6091 + $6092;
  $6094 = +HEAPF32[$1656>>2];
  $6095 = $6093 + $6094;
  $6096 = +HEAPF32[$1658>>2];
  $6097 = $6095 + $6096;
  $6098 = $3 * $6097;
  $6099 = (($571) + ($i$02<<2)|0);
  HEAPF32[$6099>>2] = $6098;
  $6100 = +HEAPF32[$1645>>2];
  $6101 = +HEAPF32[$1647>>2];
  $6102 = $6100 + $6101;
  $6103 = +HEAPF32[$1649>>2];
  $6104 = $6102 + $6103;
  $6105 = +HEAPF32[$1651>>2];
  $6106 = $6104 + $6105;
  $6107 = +HEAPF32[$1653>>2];
  $6108 = $6106 + $6107;
  $6109 = +HEAPF32[$1655>>2];
  $6110 = $6108 + $6109;
  $6111 = +HEAPF32[$1657>>2];
  $6112 = $6110 + $6111;
  $6113 = +HEAPF32[$1659>>2];
  $6114 = $6112 + $6113;
  $6115 = $3 * $6114;
  $6116 = (($573) + ($i$02<<2)|0);
  HEAPF32[$6116>>2] = $6115;
  $6117 = +HEAPF32[$1576>>2];
  HEAPF32[$1577>>2] = $6117;
  $6118 = +HEAPF32[$1659>>2];
  HEAPF32[$1576>>2] = $6118;
  $6119 = +HEAPF32[$1048>>2];
  HEAPF32[$1049>>2] = $6119;
  $6120 = +HEAPF32[$1658>>2];
  HEAPF32[$1048>>2] = $6120;
  $6121 = +HEAPF32[$1312>>2];
  HEAPF32[$1313>>2] = $6121;
  $6122 = +HEAPF32[$1657>>2];
  HEAPF32[$1312>>2] = $6122;
  $6123 = +HEAPF32[$784>>2];
  HEAPF32[$785>>2] = $6123;
  $6124 = +HEAPF32[$1656>>2];
  HEAPF32[$784>>2] = $6124;
  $6125 = +HEAPF32[$1444>>2];
  HEAPF32[$1445>>2] = $6125;
  $6126 = +HEAPF32[$1655>>2];
  HEAPF32[$1444>>2] = $6126;
  $6127 = +HEAPF32[$916>>2];
  HEAPF32[$917>>2] = $6127;
  $6128 = +HEAPF32[$1654>>2];
  HEAPF32[$916>>2] = $6128;
  $6129 = +HEAPF32[$1180>>2];
  HEAPF32[$1181>>2] = $6129;
  $6130 = +HEAPF32[$1653>>2];
  HEAPF32[$1180>>2] = $6130;
  $6131 = +HEAPF32[$652>>2];
  HEAPF32[$653>>2] = $6131;
  $6132 = +HEAPF32[$1652>>2];
  HEAPF32[$652>>2] = $6132;
  $6133 = +HEAPF32[$1510>>2];
  HEAPF32[$1511>>2] = $6133;
  $6134 = +HEAPF32[$1651>>2];
  HEAPF32[$1510>>2] = $6134;
  $6135 = +HEAPF32[$982>>2];
  HEAPF32[$983>>2] = $6135;
  $6136 = +HEAPF32[$1650>>2];
  HEAPF32[$982>>2] = $6136;
  $6137 = +HEAPF32[$1246>>2];
  HEAPF32[$1247>>2] = $6137;
  $6138 = +HEAPF32[$1649>>2];
  HEAPF32[$1246>>2] = $6138;
  $6139 = +HEAPF32[$718>>2];
  HEAPF32[$719>>2] = $6139;
  $6140 = +HEAPF32[$1648>>2];
  HEAPF32[$718>>2] = $6140;
  $6141 = +HEAPF32[$1378>>2];
  HEAPF32[$1379>>2] = $6141;
  $6142 = +HEAPF32[$1647>>2];
  HEAPF32[$1378>>2] = $6142;
  $6143 = +HEAPF32[$850>>2];
  HEAPF32[$851>>2] = $6143;
  $6144 = +HEAPF32[$1646>>2];
  HEAPF32[$850>>2] = $6144;
  $6145 = +HEAPF32[$1114>>2];
  HEAPF32[$1115>>2] = $6145;
  $6146 = +HEAPF32[$1645>>2];
  HEAPF32[$1114>>2] = $6146;
  $6147 = +HEAPF32[$1643>>2];
  HEAPF32[$1644>>2] = $6147;
  $6148 = +HEAPF32[$586>>2];
  HEAPF32[$587>>2] = $6148;
  $6149 = +HEAPF32[$1642>>2];
  HEAPF32[$586>>2] = $6149;
  $6150 = HEAP32[$1641>>2]|0;
  $6151 = (($6150) + 1)|0;
  HEAP32[$1641>>2] = $6151;
  $6152 = +HEAPF32[$1639>>2];
  HEAPF32[$1638>>2] = $6152;
  $6153 = +HEAPF32[$1640>>2];
  HEAPF32[$1639>>2] = $6153;
  $6154 = +HEAPF32[$1637>>2];
  HEAPF32[$1636>>2] = $6154;
  $6155 = +HEAPF32[$1634>>2];
  HEAPF32[$1633>>2] = $6155;
  $6156 = +HEAPF32[$1635>>2];
  HEAPF32[$1634>>2] = $6156;
  $6157 = +HEAPF32[$1632>>2];
  HEAPF32[$1630>>2] = $6157;
  $6158 = +HEAPF32[$1629>>2];
  HEAPF32[$1631>>2] = $6158;
  $6159 = +HEAPF32[$1627>>2];
  HEAPF32[$1626>>2] = $6159;
  $6160 = +HEAPF32[$1628>>2];
  HEAPF32[$1627>>2] = $6160;
  $6161 = +HEAPF32[$1625>>2];
  HEAPF32[$1624>>2] = $6161;
  $6162 = +HEAPF32[$1621>>2];
  HEAPF32[$1622>>2] = $6162;
  $6163 = +HEAPF32[$1623>>2];
  HEAPF32[$1621>>2] = $6163;
  $6164 = +HEAPF32[$1619>>2];
  HEAPF32[$1618>>2] = $6164;
  $6165 = +HEAPF32[$1620>>2];
  HEAPF32[$1619>>2] = $6165;
  $6166 = +HEAPF32[$1617>>2];
  HEAPF32[$1615>>2] = $6166;
  $6167 = +HEAPF32[$1614>>2];
  HEAPF32[$1616>>2] = $6167;
  $6168 = +HEAPF32[$1612>>2];
  HEAPF32[$1611>>2] = $6168;
  $6169 = +HEAPF32[$1613>>2];
  HEAPF32[$1612>>2] = $6169;
  $6170 = +HEAPF32[$1610>>2];
  HEAPF32[$1609>>2] = $6170;
  $6171 = +HEAPF32[$1606>>2];
  HEAPF32[$1607>>2] = $6171;
  $6172 = +HEAPF32[$1608>>2];
  HEAPF32[$1606>>2] = $6172;
  $6173 = +HEAPF32[$1603>>2];
  HEAPF32[$1604>>2] = $6173;
  $6174 = +HEAPF32[$1605>>2];
  HEAPF32[$1603>>2] = $6174;
  $6175 = +HEAPF32[$1601>>2];
  HEAPF32[$1600>>2] = $6175;
  $6176 = +HEAPF32[$1602>>2];
  HEAPF32[$1601>>2] = $6176;
  $6177 = +HEAPF32[$1599>>2];
  HEAPF32[$1597>>2] = $6177;
  $6178 = +HEAPF32[$1596>>2];
  HEAPF32[$1598>>2] = $6178;
  $6179 = +HEAPF32[$1594>>2];
  HEAPF32[$1593>>2] = $6179;
  $6180 = +HEAPF32[$1595>>2];
  HEAPF32[$1594>>2] = $6180;
  $6181 = +HEAPF32[$1592>>2];
  HEAPF32[$1591>>2] = $6181;
  $6182 = +HEAPF32[$1588>>2];
  HEAPF32[$1589>>2] = $6182;
  $6183 = +HEAPF32[$1590>>2];
  HEAPF32[$1588>>2] = $6183;
  $6184 = +HEAPF32[$1585>>2];
  HEAPF32[$1586>>2] = $6184;
  $6185 = +HEAPF32[$1587>>2];
  HEAPF32[$1585>>2] = $6185;
  $6186 = +HEAPF32[$1582>>2];
  HEAPF32[$1583>>2] = $6186;
  $6187 = +HEAPF32[$1584>>2];
  HEAPF32[$1582>>2] = $6187;
  $6188 = +HEAPF32[$1580>>2];
  HEAPF32[$1579>>2] = $6188;
  $6189 = +HEAPF32[$1581>>2];
  HEAPF32[$1580>>2] = $6189;
  $6190 = +HEAPF32[$1578>>2];
  HEAPF32[$1575>>2] = $6190;
  $6191 = +HEAPF32[$1573>>2];
  HEAPF32[$1572>>2] = $6191;
  $6192 = +HEAPF32[$1574>>2];
  HEAPF32[$1573>>2] = $6192;
  $6193 = +HEAPF32[$1571>>2];
  HEAPF32[$1570>>2] = $6193;
  $6194 = +HEAPF32[$1568>>2];
  HEAPF32[$1567>>2] = $6194;
  $6195 = +HEAPF32[$1569>>2];
  HEAPF32[$1568>>2] = $6195;
  $6196 = +HEAPF32[$1566>>2];
  HEAPF32[$1564>>2] = $6196;
  $6197 = +HEAPF32[$1563>>2];
  HEAPF32[$1565>>2] = $6197;
  $6198 = +HEAPF32[$1561>>2];
  HEAPF32[$1560>>2] = $6198;
  $6199 = +HEAPF32[$1562>>2];
  HEAPF32[$1561>>2] = $6199;
  $6200 = +HEAPF32[$1559>>2];
  HEAPF32[$1558>>2] = $6200;
  $6201 = +HEAPF32[$1555>>2];
  HEAPF32[$1556>>2] = $6201;
  $6202 = +HEAPF32[$1557>>2];
  HEAPF32[$1555>>2] = $6202;
  $6203 = +HEAPF32[$1553>>2];
  HEAPF32[$1552>>2] = $6203;
  $6204 = +HEAPF32[$1554>>2];
  HEAPF32[$1553>>2] = $6204;
  $6205 = +HEAPF32[$1551>>2];
  HEAPF32[$1549>>2] = $6205;
  $6206 = +HEAPF32[$1548>>2];
  HEAPF32[$1550>>2] = $6206;
  $6207 = +HEAPF32[$1546>>2];
  HEAPF32[$1545>>2] = $6207;
  $6208 = +HEAPF32[$1547>>2];
  HEAPF32[$1546>>2] = $6208;
  $6209 = +HEAPF32[$1544>>2];
  HEAPF32[$1543>>2] = $6209;
  $6210 = +HEAPF32[$1540>>2];
  HEAPF32[$1541>>2] = $6210;
  $6211 = +HEAPF32[$1542>>2];
  HEAPF32[$1540>>2] = $6211;
  $6212 = +HEAPF32[$1537>>2];
  HEAPF32[$1538>>2] = $6212;
  $6213 = +HEAPF32[$1539>>2];
  HEAPF32[$1537>>2] = $6213;
  $6214 = +HEAPF32[$1535>>2];
  HEAPF32[$1534>>2] = $6214;
  $6215 = +HEAPF32[$1536>>2];
  HEAPF32[$1535>>2] = $6215;
  $6216 = +HEAPF32[$1533>>2];
  HEAPF32[$1531>>2] = $6216;
  $6217 = +HEAPF32[$1530>>2];
  HEAPF32[$1532>>2] = $6217;
  $6218 = +HEAPF32[$1528>>2];
  HEAPF32[$1527>>2] = $6218;
  $6219 = +HEAPF32[$1529>>2];
  HEAPF32[$1528>>2] = $6219;
  $6220 = +HEAPF32[$1526>>2];
  HEAPF32[$1525>>2] = $6220;
  $6221 = +HEAPF32[$1522>>2];
  HEAPF32[$1523>>2] = $6221;
  $6222 = +HEAPF32[$1524>>2];
  HEAPF32[$1522>>2] = $6222;
  $6223 = +HEAPF32[$1519>>2];
  HEAPF32[$1520>>2] = $6223;
  $6224 = +HEAPF32[$1521>>2];
  HEAPF32[$1519>>2] = $6224;
  $6225 = +HEAPF32[$1516>>2];
  HEAPF32[$1517>>2] = $6225;
  $6226 = +HEAPF32[$1518>>2];
  HEAPF32[$1516>>2] = $6226;
  $6227 = +HEAPF32[$1514>>2];
  HEAPF32[$1513>>2] = $6227;
  $6228 = +HEAPF32[$1515>>2];
  HEAPF32[$1514>>2] = $6228;
  $6229 = +HEAPF32[$1512>>2];
  HEAPF32[$1509>>2] = $6229;
  $6230 = +HEAPF32[$1507>>2];
  HEAPF32[$1506>>2] = $6230;
  $6231 = +HEAPF32[$1508>>2];
  HEAPF32[$1507>>2] = $6231;
  $6232 = +HEAPF32[$1505>>2];
  HEAPF32[$1504>>2] = $6232;
  $6233 = +HEAPF32[$1502>>2];
  HEAPF32[$1501>>2] = $6233;
  $6234 = +HEAPF32[$1503>>2];
  HEAPF32[$1502>>2] = $6234;
  $6235 = +HEAPF32[$1500>>2];
  HEAPF32[$1498>>2] = $6235;
  $6236 = +HEAPF32[$1497>>2];
  HEAPF32[$1499>>2] = $6236;
  $6237 = +HEAPF32[$1495>>2];
  HEAPF32[$1494>>2] = $6237;
  $6238 = +HEAPF32[$1496>>2];
  HEAPF32[$1495>>2] = $6238;
  $6239 = +HEAPF32[$1493>>2];
  HEAPF32[$1492>>2] = $6239;
  $6240 = +HEAPF32[$1489>>2];
  HEAPF32[$1490>>2] = $6240;
  $6241 = +HEAPF32[$1491>>2];
  HEAPF32[$1489>>2] = $6241;
  $6242 = +HEAPF32[$1487>>2];
  HEAPF32[$1486>>2] = $6242;
  $6243 = +HEAPF32[$1488>>2];
  HEAPF32[$1487>>2] = $6243;
  $6244 = +HEAPF32[$1485>>2];
  HEAPF32[$1483>>2] = $6244;
  $6245 = +HEAPF32[$1482>>2];
  HEAPF32[$1484>>2] = $6245;
  $6246 = +HEAPF32[$1480>>2];
  HEAPF32[$1479>>2] = $6246;
  $6247 = +HEAPF32[$1481>>2];
  HEAPF32[$1480>>2] = $6247;
  $6248 = +HEAPF32[$1478>>2];
  HEAPF32[$1477>>2] = $6248;
  $6249 = +HEAPF32[$1474>>2];
  HEAPF32[$1475>>2] = $6249;
  $6250 = +HEAPF32[$1476>>2];
  HEAPF32[$1474>>2] = $6250;
  $6251 = +HEAPF32[$1471>>2];
  HEAPF32[$1472>>2] = $6251;
  $6252 = +HEAPF32[$1473>>2];
  HEAPF32[$1471>>2] = $6252;
  $6253 = +HEAPF32[$1469>>2];
  HEAPF32[$1468>>2] = $6253;
  $6254 = +HEAPF32[$1470>>2];
  HEAPF32[$1469>>2] = $6254;
  $6255 = +HEAPF32[$1467>>2];
  HEAPF32[$1465>>2] = $6255;
  $6256 = +HEAPF32[$1464>>2];
  HEAPF32[$1466>>2] = $6256;
  $6257 = +HEAPF32[$1462>>2];
  HEAPF32[$1461>>2] = $6257;
  $6258 = +HEAPF32[$1463>>2];
  HEAPF32[$1462>>2] = $6258;
  $6259 = +HEAPF32[$1460>>2];
  HEAPF32[$1459>>2] = $6259;
  $6260 = +HEAPF32[$1456>>2];
  HEAPF32[$1457>>2] = $6260;
  $6261 = +HEAPF32[$1458>>2];
  HEAPF32[$1456>>2] = $6261;
  $6262 = +HEAPF32[$1453>>2];
  HEAPF32[$1454>>2] = $6262;
  $6263 = +HEAPF32[$1455>>2];
  HEAPF32[$1453>>2] = $6263;
  $6264 = +HEAPF32[$1450>>2];
  HEAPF32[$1451>>2] = $6264;
  $6265 = +HEAPF32[$1452>>2];
  HEAPF32[$1450>>2] = $6265;
  $6266 = +HEAPF32[$1448>>2];
  HEAPF32[$1447>>2] = $6266;
  $6267 = +HEAPF32[$1449>>2];
  HEAPF32[$1448>>2] = $6267;
  $6268 = +HEAPF32[$1446>>2];
  HEAPF32[$1443>>2] = $6268;
  $6269 = +HEAPF32[$1441>>2];
  HEAPF32[$1440>>2] = $6269;
  $6270 = +HEAPF32[$1442>>2];
  HEAPF32[$1441>>2] = $6270;
  $6271 = +HEAPF32[$1439>>2];
  HEAPF32[$1438>>2] = $6271;
  $6272 = +HEAPF32[$1436>>2];
  HEAPF32[$1435>>2] = $6272;
  $6273 = +HEAPF32[$1437>>2];
  HEAPF32[$1436>>2] = $6273;
  $6274 = +HEAPF32[$1434>>2];
  HEAPF32[$1432>>2] = $6274;
  $6275 = +HEAPF32[$1431>>2];
  HEAPF32[$1433>>2] = $6275;
  $6276 = +HEAPF32[$1429>>2];
  HEAPF32[$1428>>2] = $6276;
  $6277 = +HEAPF32[$1430>>2];
  HEAPF32[$1429>>2] = $6277;
  $6278 = +HEAPF32[$1427>>2];
  HEAPF32[$1426>>2] = $6278;
  $6279 = +HEAPF32[$1423>>2];
  HEAPF32[$1424>>2] = $6279;
  $6280 = +HEAPF32[$1425>>2];
  HEAPF32[$1423>>2] = $6280;
  $6281 = +HEAPF32[$1421>>2];
  HEAPF32[$1420>>2] = $6281;
  $6282 = +HEAPF32[$1422>>2];
  HEAPF32[$1421>>2] = $6282;
  $6283 = +HEAPF32[$1419>>2];
  HEAPF32[$1417>>2] = $6283;
  $6284 = +HEAPF32[$1416>>2];
  HEAPF32[$1418>>2] = $6284;
  $6285 = +HEAPF32[$1414>>2];
  HEAPF32[$1413>>2] = $6285;
  $6286 = +HEAPF32[$1415>>2];
  HEAPF32[$1414>>2] = $6286;
  $6287 = +HEAPF32[$1412>>2];
  HEAPF32[$1411>>2] = $6287;
  $6288 = +HEAPF32[$1408>>2];
  HEAPF32[$1409>>2] = $6288;
  $6289 = +HEAPF32[$1410>>2];
  HEAPF32[$1408>>2] = $6289;
  $6290 = +HEAPF32[$1405>>2];
  HEAPF32[$1406>>2] = $6290;
  $6291 = +HEAPF32[$1407>>2];
  HEAPF32[$1405>>2] = $6291;
  $6292 = +HEAPF32[$1403>>2];
  HEAPF32[$1402>>2] = $6292;
  $6293 = +HEAPF32[$1404>>2];
  HEAPF32[$1403>>2] = $6293;
  $6294 = +HEAPF32[$1401>>2];
  HEAPF32[$1399>>2] = $6294;
  $6295 = +HEAPF32[$1398>>2];
  HEAPF32[$1400>>2] = $6295;
  $6296 = +HEAPF32[$1396>>2];
  HEAPF32[$1395>>2] = $6296;
  $6297 = +HEAPF32[$1397>>2];
  HEAPF32[$1396>>2] = $6297;
  $6298 = +HEAPF32[$1394>>2];
  HEAPF32[$1393>>2] = $6298;
  $6299 = +HEAPF32[$1390>>2];
  HEAPF32[$1391>>2] = $6299;
  $6300 = +HEAPF32[$1392>>2];
  HEAPF32[$1390>>2] = $6300;
  $6301 = +HEAPF32[$1387>>2];
  HEAPF32[$1388>>2] = $6301;
  $6302 = +HEAPF32[$1389>>2];
  HEAPF32[$1387>>2] = $6302;
  $6303 = +HEAPF32[$1384>>2];
  HEAPF32[$1385>>2] = $6303;
  $6304 = +HEAPF32[$1386>>2];
  HEAPF32[$1384>>2] = $6304;
  $6305 = +HEAPF32[$1382>>2];
  HEAPF32[$1381>>2] = $6305;
  $6306 = +HEAPF32[$1383>>2];
  HEAPF32[$1382>>2] = $6306;
  $6307 = +HEAPF32[$1380>>2];
  HEAPF32[$1377>>2] = $6307;
  $6308 = +HEAPF32[$1375>>2];
  HEAPF32[$1374>>2] = $6308;
  $6309 = +HEAPF32[$1376>>2];
  HEAPF32[$1375>>2] = $6309;
  $6310 = +HEAPF32[$1373>>2];
  HEAPF32[$1372>>2] = $6310;
  $6311 = +HEAPF32[$1370>>2];
  HEAPF32[$1369>>2] = $6311;
  $6312 = +HEAPF32[$1371>>2];
  HEAPF32[$1370>>2] = $6312;
  $6313 = +HEAPF32[$1368>>2];
  HEAPF32[$1366>>2] = $6313;
  $6314 = +HEAPF32[$1365>>2];
  HEAPF32[$1367>>2] = $6314;
  $6315 = +HEAPF32[$1363>>2];
  HEAPF32[$1362>>2] = $6315;
  $6316 = +HEAPF32[$1364>>2];
  HEAPF32[$1363>>2] = $6316;
  $6317 = +HEAPF32[$1361>>2];
  HEAPF32[$1360>>2] = $6317;
  $6318 = +HEAPF32[$1357>>2];
  HEAPF32[$1358>>2] = $6318;
  $6319 = +HEAPF32[$1359>>2];
  HEAPF32[$1357>>2] = $6319;
  $6320 = +HEAPF32[$1355>>2];
  HEAPF32[$1354>>2] = $6320;
  $6321 = +HEAPF32[$1356>>2];
  HEAPF32[$1355>>2] = $6321;
  $6322 = +HEAPF32[$1353>>2];
  HEAPF32[$1351>>2] = $6322;
  $6323 = +HEAPF32[$1350>>2];
  HEAPF32[$1352>>2] = $6323;
  $6324 = +HEAPF32[$1348>>2];
  HEAPF32[$1347>>2] = $6324;
  $6325 = +HEAPF32[$1349>>2];
  HEAPF32[$1348>>2] = $6325;
  $6326 = +HEAPF32[$1346>>2];
  HEAPF32[$1345>>2] = $6326;
  $6327 = +HEAPF32[$1342>>2];
  HEAPF32[$1343>>2] = $6327;
  $6328 = +HEAPF32[$1344>>2];
  HEAPF32[$1342>>2] = $6328;
  $6329 = +HEAPF32[$1339>>2];
  HEAPF32[$1340>>2] = $6329;
  $6330 = +HEAPF32[$1341>>2];
  HEAPF32[$1339>>2] = $6330;
  $6331 = +HEAPF32[$1337>>2];
  HEAPF32[$1336>>2] = $6331;
  $6332 = +HEAPF32[$1338>>2];
  HEAPF32[$1337>>2] = $6332;
  $6333 = +HEAPF32[$1335>>2];
  HEAPF32[$1333>>2] = $6333;
  $6334 = +HEAPF32[$1332>>2];
  HEAPF32[$1334>>2] = $6334;
  $6335 = +HEAPF32[$1330>>2];
  HEAPF32[$1329>>2] = $6335;
  $6336 = +HEAPF32[$1331>>2];
  HEAPF32[$1330>>2] = $6336;
  $6337 = +HEAPF32[$1328>>2];
  HEAPF32[$1327>>2] = $6337;
  $6338 = +HEAPF32[$1324>>2];
  HEAPF32[$1325>>2] = $6338;
  $6339 = +HEAPF32[$1326>>2];
  HEAPF32[$1324>>2] = $6339;
  $6340 = +HEAPF32[$1321>>2];
  HEAPF32[$1322>>2] = $6340;
  $6341 = +HEAPF32[$1323>>2];
  HEAPF32[$1321>>2] = $6341;
  $6342 = +HEAPF32[$1318>>2];
  HEAPF32[$1319>>2] = $6342;
  $6343 = +HEAPF32[$1320>>2];
  HEAPF32[$1318>>2] = $6343;
  $6344 = +HEAPF32[$1316>>2];
  HEAPF32[$1315>>2] = $6344;
  $6345 = +HEAPF32[$1317>>2];
  HEAPF32[$1316>>2] = $6345;
  $6346 = +HEAPF32[$1314>>2];
  HEAPF32[$1311>>2] = $6346;
  $6347 = +HEAPF32[$1309>>2];
  HEAPF32[$1308>>2] = $6347;
  $6348 = +HEAPF32[$1310>>2];
  HEAPF32[$1309>>2] = $6348;
  $6349 = +HEAPF32[$1307>>2];
  HEAPF32[$1306>>2] = $6349;
  $6350 = +HEAPF32[$1304>>2];
  HEAPF32[$1303>>2] = $6350;
  $6351 = +HEAPF32[$1305>>2];
  HEAPF32[$1304>>2] = $6351;
  $6352 = +HEAPF32[$1302>>2];
  HEAPF32[$1300>>2] = $6352;
  $6353 = +HEAPF32[$1299>>2];
  HEAPF32[$1301>>2] = $6353;
  $6354 = +HEAPF32[$1297>>2];
  HEAPF32[$1296>>2] = $6354;
  $6355 = +HEAPF32[$1298>>2];
  HEAPF32[$1297>>2] = $6355;
  $6356 = +HEAPF32[$1295>>2];
  HEAPF32[$1294>>2] = $6356;
  $6357 = +HEAPF32[$1291>>2];
  HEAPF32[$1292>>2] = $6357;
  $6358 = +HEAPF32[$1293>>2];
  HEAPF32[$1291>>2] = $6358;
  $6359 = +HEAPF32[$1289>>2];
  HEAPF32[$1288>>2] = $6359;
  $6360 = +HEAPF32[$1290>>2];
  HEAPF32[$1289>>2] = $6360;
  $6361 = +HEAPF32[$1287>>2];
  HEAPF32[$1285>>2] = $6361;
  $6362 = +HEAPF32[$1284>>2];
  HEAPF32[$1286>>2] = $6362;
  $6363 = +HEAPF32[$1282>>2];
  HEAPF32[$1281>>2] = $6363;
  $6364 = +HEAPF32[$1283>>2];
  HEAPF32[$1282>>2] = $6364;
  $6365 = +HEAPF32[$1280>>2];
  HEAPF32[$1279>>2] = $6365;
  $6366 = +HEAPF32[$1276>>2];
  HEAPF32[$1277>>2] = $6366;
  $6367 = +HEAPF32[$1278>>2];
  HEAPF32[$1276>>2] = $6367;
  $6368 = +HEAPF32[$1273>>2];
  HEAPF32[$1274>>2] = $6368;
  $6369 = +HEAPF32[$1275>>2];
  HEAPF32[$1273>>2] = $6369;
  $6370 = +HEAPF32[$1271>>2];
  HEAPF32[$1270>>2] = $6370;
  $6371 = +HEAPF32[$1272>>2];
  HEAPF32[$1271>>2] = $6371;
  $6372 = +HEAPF32[$1269>>2];
  HEAPF32[$1267>>2] = $6372;
  $6373 = +HEAPF32[$1266>>2];
  HEAPF32[$1268>>2] = $6373;
  $6374 = +HEAPF32[$1264>>2];
  HEAPF32[$1263>>2] = $6374;
  $6375 = +HEAPF32[$1265>>2];
  HEAPF32[$1264>>2] = $6375;
  $6376 = +HEAPF32[$1262>>2];
  HEAPF32[$1261>>2] = $6376;
  $6377 = +HEAPF32[$1258>>2];
  HEAPF32[$1259>>2] = $6377;
  $6378 = +HEAPF32[$1260>>2];
  HEAPF32[$1258>>2] = $6378;
  $6379 = +HEAPF32[$1255>>2];
  HEAPF32[$1256>>2] = $6379;
  $6380 = +HEAPF32[$1257>>2];
  HEAPF32[$1255>>2] = $6380;
  $6381 = +HEAPF32[$1252>>2];
  HEAPF32[$1253>>2] = $6381;
  $6382 = +HEAPF32[$1254>>2];
  HEAPF32[$1252>>2] = $6382;
  $6383 = +HEAPF32[$1250>>2];
  HEAPF32[$1249>>2] = $6383;
  $6384 = +HEAPF32[$1251>>2];
  HEAPF32[$1250>>2] = $6384;
  $6385 = +HEAPF32[$1248>>2];
  HEAPF32[$1245>>2] = $6385;
  $6386 = +HEAPF32[$1243>>2];
  HEAPF32[$1242>>2] = $6386;
  $6387 = +HEAPF32[$1244>>2];
  HEAPF32[$1243>>2] = $6387;
  $6388 = +HEAPF32[$1241>>2];
  HEAPF32[$1240>>2] = $6388;
  $6389 = +HEAPF32[$1238>>2];
  HEAPF32[$1237>>2] = $6389;
  $6390 = +HEAPF32[$1239>>2];
  HEAPF32[$1238>>2] = $6390;
  $6391 = +HEAPF32[$1236>>2];
  HEAPF32[$1234>>2] = $6391;
  $6392 = +HEAPF32[$1233>>2];
  HEAPF32[$1235>>2] = $6392;
  $6393 = +HEAPF32[$1231>>2];
  HEAPF32[$1230>>2] = $6393;
  $6394 = +HEAPF32[$1232>>2];
  HEAPF32[$1231>>2] = $6394;
  $6395 = +HEAPF32[$1229>>2];
  HEAPF32[$1228>>2] = $6395;
  $6396 = +HEAPF32[$1225>>2];
  HEAPF32[$1226>>2] = $6396;
  $6397 = +HEAPF32[$1227>>2];
  HEAPF32[$1225>>2] = $6397;
  $6398 = +HEAPF32[$1223>>2];
  HEAPF32[$1222>>2] = $6398;
  $6399 = +HEAPF32[$1224>>2];
  HEAPF32[$1223>>2] = $6399;
  $6400 = +HEAPF32[$1221>>2];
  HEAPF32[$1219>>2] = $6400;
  $6401 = +HEAPF32[$1218>>2];
  HEAPF32[$1220>>2] = $6401;
  $6402 = +HEAPF32[$1216>>2];
  HEAPF32[$1215>>2] = $6402;
  $6403 = +HEAPF32[$1217>>2];
  HEAPF32[$1216>>2] = $6403;
  $6404 = +HEAPF32[$1214>>2];
  HEAPF32[$1213>>2] = $6404;
  $6405 = +HEAPF32[$1210>>2];
  HEAPF32[$1211>>2] = $6405;
  $6406 = +HEAPF32[$1212>>2];
  HEAPF32[$1210>>2] = $6406;
  $6407 = +HEAPF32[$1207>>2];
  HEAPF32[$1208>>2] = $6407;
  $6408 = +HEAPF32[$1209>>2];
  HEAPF32[$1207>>2] = $6408;
  $6409 = +HEAPF32[$1205>>2];
  HEAPF32[$1204>>2] = $6409;
  $6410 = +HEAPF32[$1206>>2];
  HEAPF32[$1205>>2] = $6410;
  $6411 = +HEAPF32[$1203>>2];
  HEAPF32[$1201>>2] = $6411;
  $6412 = +HEAPF32[$1200>>2];
  HEAPF32[$1202>>2] = $6412;
  $6413 = +HEAPF32[$1198>>2];
  HEAPF32[$1197>>2] = $6413;
  $6414 = +HEAPF32[$1199>>2];
  HEAPF32[$1198>>2] = $6414;
  $6415 = +HEAPF32[$1196>>2];
  HEAPF32[$1195>>2] = $6415;
  $6416 = +HEAPF32[$1192>>2];
  HEAPF32[$1193>>2] = $6416;
  $6417 = +HEAPF32[$1194>>2];
  HEAPF32[$1192>>2] = $6417;
  $6418 = +HEAPF32[$1189>>2];
  HEAPF32[$1190>>2] = $6418;
  $6419 = +HEAPF32[$1191>>2];
  HEAPF32[$1189>>2] = $6419;
  $6420 = +HEAPF32[$1186>>2];
  HEAPF32[$1187>>2] = $6420;
  $6421 = +HEAPF32[$1188>>2];
  HEAPF32[$1186>>2] = $6421;
  $6422 = +HEAPF32[$1184>>2];
  HEAPF32[$1183>>2] = $6422;
  $6423 = +HEAPF32[$1185>>2];
  HEAPF32[$1184>>2] = $6423;
  $6424 = +HEAPF32[$1182>>2];
  HEAPF32[$1179>>2] = $6424;
  $6425 = +HEAPF32[$1177>>2];
  HEAPF32[$1176>>2] = $6425;
  $6426 = +HEAPF32[$1178>>2];
  HEAPF32[$1177>>2] = $6426;
  $6427 = +HEAPF32[$1175>>2];
  HEAPF32[$1174>>2] = $6427;
  $6428 = +HEAPF32[$1172>>2];
  HEAPF32[$1171>>2] = $6428;
  $6429 = +HEAPF32[$1173>>2];
  HEAPF32[$1172>>2] = $6429;
  $6430 = +HEAPF32[$1170>>2];
  HEAPF32[$1168>>2] = $6430;
  $6431 = +HEAPF32[$1167>>2];
  HEAPF32[$1169>>2] = $6431;
  $6432 = +HEAPF32[$1165>>2];
  HEAPF32[$1164>>2] = $6432;
  $6433 = +HEAPF32[$1166>>2];
  HEAPF32[$1165>>2] = $6433;
  $6434 = +HEAPF32[$1163>>2];
  HEAPF32[$1162>>2] = $6434;
  $6435 = +HEAPF32[$1159>>2];
  HEAPF32[$1160>>2] = $6435;
  $6436 = +HEAPF32[$1161>>2];
  HEAPF32[$1159>>2] = $6436;
  $6437 = +HEAPF32[$1157>>2];
  HEAPF32[$1156>>2] = $6437;
  $6438 = +HEAPF32[$1158>>2];
  HEAPF32[$1157>>2] = $6438;
  $6439 = +HEAPF32[$1155>>2];
  HEAPF32[$1153>>2] = $6439;
  $6440 = +HEAPF32[$1152>>2];
  HEAPF32[$1154>>2] = $6440;
  $6441 = +HEAPF32[$1150>>2];
  HEAPF32[$1149>>2] = $6441;
  $6442 = +HEAPF32[$1151>>2];
  HEAPF32[$1150>>2] = $6442;
  $6443 = +HEAPF32[$1148>>2];
  HEAPF32[$1147>>2] = $6443;
  $6444 = +HEAPF32[$1144>>2];
  HEAPF32[$1145>>2] = $6444;
  $6445 = +HEAPF32[$1146>>2];
  HEAPF32[$1144>>2] = $6445;
  $6446 = +HEAPF32[$1141>>2];
  HEAPF32[$1142>>2] = $6446;
  $6447 = +HEAPF32[$1143>>2];
  HEAPF32[$1141>>2] = $6447;
  $6448 = +HEAPF32[$1139>>2];
  HEAPF32[$1138>>2] = $6448;
  $6449 = +HEAPF32[$1140>>2];
  HEAPF32[$1139>>2] = $6449;
  $6450 = +HEAPF32[$1137>>2];
  HEAPF32[$1135>>2] = $6450;
  $6451 = +HEAPF32[$1134>>2];
  HEAPF32[$1136>>2] = $6451;
  $6452 = +HEAPF32[$1132>>2];
  HEAPF32[$1131>>2] = $6452;
  $6453 = +HEAPF32[$1133>>2];
  HEAPF32[$1132>>2] = $6453;
  $6454 = +HEAPF32[$1130>>2];
  HEAPF32[$1129>>2] = $6454;
  $6455 = +HEAPF32[$1126>>2];
  HEAPF32[$1127>>2] = $6455;
  $6456 = +HEAPF32[$1128>>2];
  HEAPF32[$1126>>2] = $6456;
  $6457 = +HEAPF32[$1123>>2];
  HEAPF32[$1124>>2] = $6457;
  $6458 = +HEAPF32[$1125>>2];
  HEAPF32[$1123>>2] = $6458;
  $6459 = +HEAPF32[$1120>>2];
  HEAPF32[$1121>>2] = $6459;
  $6460 = +HEAPF32[$1122>>2];
  HEAPF32[$1120>>2] = $6460;
  $6461 = +HEAPF32[$1118>>2];
  HEAPF32[$1117>>2] = $6461;
  $6462 = +HEAPF32[$1119>>2];
  HEAPF32[$1118>>2] = $6462;
  $6463 = +HEAPF32[$1116>>2];
  HEAPF32[$1113>>2] = $6463;
  $6464 = +HEAPF32[$1111>>2];
  HEAPF32[$1110>>2] = $6464;
  $6465 = +HEAPF32[$1112>>2];
  HEAPF32[$1111>>2] = $6465;
  $6466 = +HEAPF32[$1109>>2];
  HEAPF32[$1108>>2] = $6466;
  $6467 = +HEAPF32[$1106>>2];
  HEAPF32[$1105>>2] = $6467;
  $6468 = +HEAPF32[$1107>>2];
  HEAPF32[$1106>>2] = $6468;
  $6469 = +HEAPF32[$1104>>2];
  HEAPF32[$1102>>2] = $6469;
  $6470 = +HEAPF32[$1101>>2];
  HEAPF32[$1103>>2] = $6470;
  $6471 = +HEAPF32[$1099>>2];
  HEAPF32[$1098>>2] = $6471;
  $6472 = +HEAPF32[$1100>>2];
  HEAPF32[$1099>>2] = $6472;
  $6473 = +HEAPF32[$1097>>2];
  HEAPF32[$1096>>2] = $6473;
  $6474 = +HEAPF32[$1093>>2];
  HEAPF32[$1094>>2] = $6474;
  $6475 = +HEAPF32[$1095>>2];
  HEAPF32[$1093>>2] = $6475;
  $6476 = +HEAPF32[$1091>>2];
  HEAPF32[$1090>>2] = $6476;
  $6477 = +HEAPF32[$1092>>2];
  HEAPF32[$1091>>2] = $6477;
  $6478 = +HEAPF32[$1089>>2];
  HEAPF32[$1087>>2] = $6478;
  $6479 = +HEAPF32[$1086>>2];
  HEAPF32[$1088>>2] = $6479;
  $6480 = +HEAPF32[$1084>>2];
  HEAPF32[$1083>>2] = $6480;
  $6481 = +HEAPF32[$1085>>2];
  HEAPF32[$1084>>2] = $6481;
  $6482 = +HEAPF32[$1082>>2];
  HEAPF32[$1081>>2] = $6482;
  $6483 = +HEAPF32[$1078>>2];
  HEAPF32[$1079>>2] = $6483;
  $6484 = +HEAPF32[$1080>>2];
  HEAPF32[$1078>>2] = $6484;
  $6485 = +HEAPF32[$1075>>2];
  HEAPF32[$1076>>2] = $6485;
  $6486 = +HEAPF32[$1077>>2];
  HEAPF32[$1075>>2] = $6486;
  $6487 = +HEAPF32[$1073>>2];
  HEAPF32[$1072>>2] = $6487;
  $6488 = +HEAPF32[$1074>>2];
  HEAPF32[$1073>>2] = $6488;
  $6489 = +HEAPF32[$1071>>2];
  HEAPF32[$1069>>2] = $6489;
  $6490 = +HEAPF32[$1068>>2];
  HEAPF32[$1070>>2] = $6490;
  $6491 = +HEAPF32[$1066>>2];
  HEAPF32[$1065>>2] = $6491;
  $6492 = +HEAPF32[$1067>>2];
  HEAPF32[$1066>>2] = $6492;
  $6493 = +HEAPF32[$1064>>2];
  HEAPF32[$1063>>2] = $6493;
  $6494 = +HEAPF32[$1060>>2];
  HEAPF32[$1061>>2] = $6494;
  $6495 = +HEAPF32[$1062>>2];
  HEAPF32[$1060>>2] = $6495;
  $6496 = +HEAPF32[$1057>>2];
  HEAPF32[$1058>>2] = $6496;
  $6497 = +HEAPF32[$1059>>2];
  HEAPF32[$1057>>2] = $6497;
  $6498 = +HEAPF32[$1054>>2];
  HEAPF32[$1055>>2] = $6498;
  $6499 = +HEAPF32[$1056>>2];
  HEAPF32[$1054>>2] = $6499;
  $6500 = +HEAPF32[$1052>>2];
  HEAPF32[$1051>>2] = $6500;
  $6501 = +HEAPF32[$1053>>2];
  HEAPF32[$1052>>2] = $6501;
  $6502 = +HEAPF32[$1050>>2];
  HEAPF32[$1047>>2] = $6502;
  $6503 = +HEAPF32[$1045>>2];
  HEAPF32[$1044>>2] = $6503;
  $6504 = +HEAPF32[$1046>>2];
  HEAPF32[$1045>>2] = $6504;
  $6505 = +HEAPF32[$1043>>2];
  HEAPF32[$1042>>2] = $6505;
  $6506 = +HEAPF32[$1040>>2];
  HEAPF32[$1039>>2] = $6506;
  $6507 = +HEAPF32[$1041>>2];
  HEAPF32[$1040>>2] = $6507;
  $6508 = +HEAPF32[$1038>>2];
  HEAPF32[$1036>>2] = $6508;
  $6509 = +HEAPF32[$1035>>2];
  HEAPF32[$1037>>2] = $6509;
  $6510 = +HEAPF32[$1033>>2];
  HEAPF32[$1032>>2] = $6510;
  $6511 = +HEAPF32[$1034>>2];
  HEAPF32[$1033>>2] = $6511;
  $6512 = +HEAPF32[$1031>>2];
  HEAPF32[$1030>>2] = $6512;
  $6513 = +HEAPF32[$1027>>2];
  HEAPF32[$1028>>2] = $6513;
  $6514 = +HEAPF32[$1029>>2];
  HEAPF32[$1027>>2] = $6514;
  $6515 = +HEAPF32[$1025>>2];
  HEAPF32[$1024>>2] = $6515;
  $6516 = +HEAPF32[$1026>>2];
  HEAPF32[$1025>>2] = $6516;
  $6517 = +HEAPF32[$1023>>2];
  HEAPF32[$1021>>2] = $6517;
  $6518 = +HEAPF32[$1020>>2];
  HEAPF32[$1022>>2] = $6518;
  $6519 = +HEAPF32[$1018>>2];
  HEAPF32[$1017>>2] = $6519;
  $6520 = +HEAPF32[$1019>>2];
  HEAPF32[$1018>>2] = $6520;
  $6521 = +HEAPF32[$1016>>2];
  HEAPF32[$1015>>2] = $6521;
  $6522 = +HEAPF32[$1012>>2];
  HEAPF32[$1013>>2] = $6522;
  $6523 = +HEAPF32[$1014>>2];
  HEAPF32[$1012>>2] = $6523;
  $6524 = +HEAPF32[$1009>>2];
  HEAPF32[$1010>>2] = $6524;
  $6525 = +HEAPF32[$1011>>2];
  HEAPF32[$1009>>2] = $6525;
  $6526 = +HEAPF32[$1007>>2];
  HEAPF32[$1006>>2] = $6526;
  $6527 = +HEAPF32[$1008>>2];
  HEAPF32[$1007>>2] = $6527;
  $6528 = +HEAPF32[$1005>>2];
  HEAPF32[$1003>>2] = $6528;
  $6529 = +HEAPF32[$1002>>2];
  HEAPF32[$1004>>2] = $6529;
  $6530 = +HEAPF32[$1000>>2];
  HEAPF32[$999>>2] = $6530;
  $6531 = +HEAPF32[$1001>>2];
  HEAPF32[$1000>>2] = $6531;
  $6532 = +HEAPF32[$998>>2];
  HEAPF32[$997>>2] = $6532;
  $6533 = +HEAPF32[$994>>2];
  HEAPF32[$995>>2] = $6533;
  $6534 = +HEAPF32[$996>>2];
  HEAPF32[$994>>2] = $6534;
  $6535 = +HEAPF32[$991>>2];
  HEAPF32[$992>>2] = $6535;
  $6536 = +HEAPF32[$993>>2];
  HEAPF32[$991>>2] = $6536;
  $6537 = +HEAPF32[$988>>2];
  HEAPF32[$989>>2] = $6537;
  $6538 = +HEAPF32[$990>>2];
  HEAPF32[$988>>2] = $6538;
  $6539 = +HEAPF32[$986>>2];
  HEAPF32[$985>>2] = $6539;
  $6540 = +HEAPF32[$987>>2];
  HEAPF32[$986>>2] = $6540;
  $6541 = +HEAPF32[$984>>2];
  HEAPF32[$981>>2] = $6541;
  $6542 = +HEAPF32[$979>>2];
  HEAPF32[$978>>2] = $6542;
  $6543 = +HEAPF32[$980>>2];
  HEAPF32[$979>>2] = $6543;
  $6544 = +HEAPF32[$977>>2];
  HEAPF32[$976>>2] = $6544;
  $6545 = +HEAPF32[$974>>2];
  HEAPF32[$973>>2] = $6545;
  $6546 = +HEAPF32[$975>>2];
  HEAPF32[$974>>2] = $6546;
  $6547 = +HEAPF32[$972>>2];
  HEAPF32[$970>>2] = $6547;
  $6548 = +HEAPF32[$969>>2];
  HEAPF32[$971>>2] = $6548;
  $6549 = +HEAPF32[$967>>2];
  HEAPF32[$966>>2] = $6549;
  $6550 = +HEAPF32[$968>>2];
  HEAPF32[$967>>2] = $6550;
  $6551 = +HEAPF32[$965>>2];
  HEAPF32[$964>>2] = $6551;
  $6552 = +HEAPF32[$961>>2];
  HEAPF32[$962>>2] = $6552;
  $6553 = +HEAPF32[$963>>2];
  HEAPF32[$961>>2] = $6553;
  $6554 = +HEAPF32[$959>>2];
  HEAPF32[$958>>2] = $6554;
  $6555 = +HEAPF32[$960>>2];
  HEAPF32[$959>>2] = $6555;
  $6556 = +HEAPF32[$957>>2];
  HEAPF32[$955>>2] = $6556;
  $6557 = +HEAPF32[$954>>2];
  HEAPF32[$956>>2] = $6557;
  $6558 = +HEAPF32[$952>>2];
  HEAPF32[$951>>2] = $6558;
  $6559 = +HEAPF32[$953>>2];
  HEAPF32[$952>>2] = $6559;
  $6560 = +HEAPF32[$950>>2];
  HEAPF32[$949>>2] = $6560;
  $6561 = +HEAPF32[$946>>2];
  HEAPF32[$947>>2] = $6561;
  $6562 = +HEAPF32[$948>>2];
  HEAPF32[$946>>2] = $6562;
  $6563 = +HEAPF32[$943>>2];
  HEAPF32[$944>>2] = $6563;
  $6564 = +HEAPF32[$945>>2];
  HEAPF32[$943>>2] = $6564;
  $6565 = +HEAPF32[$941>>2];
  HEAPF32[$940>>2] = $6565;
  $6566 = +HEAPF32[$942>>2];
  HEAPF32[$941>>2] = $6566;
  $6567 = +HEAPF32[$939>>2];
  HEAPF32[$937>>2] = $6567;
  $6568 = +HEAPF32[$936>>2];
  HEAPF32[$938>>2] = $6568;
  $6569 = +HEAPF32[$934>>2];
  HEAPF32[$933>>2] = $6569;
  $6570 = +HEAPF32[$935>>2];
  HEAPF32[$934>>2] = $6570;
  $6571 = +HEAPF32[$932>>2];
  HEAPF32[$931>>2] = $6571;
  $6572 = +HEAPF32[$928>>2];
  HEAPF32[$929>>2] = $6572;
  $6573 = +HEAPF32[$930>>2];
  HEAPF32[$928>>2] = $6573;
  $6574 = +HEAPF32[$925>>2];
  HEAPF32[$926>>2] = $6574;
  $6575 = +HEAPF32[$927>>2];
  HEAPF32[$925>>2] = $6575;
  $6576 = +HEAPF32[$922>>2];
  HEAPF32[$923>>2] = $6576;
  $6577 = +HEAPF32[$924>>2];
  HEAPF32[$922>>2] = $6577;
  $6578 = +HEAPF32[$920>>2];
  HEAPF32[$919>>2] = $6578;
  $6579 = +HEAPF32[$921>>2];
  HEAPF32[$920>>2] = $6579;
  $6580 = +HEAPF32[$918>>2];
  HEAPF32[$915>>2] = $6580;
  $6581 = +HEAPF32[$913>>2];
  HEAPF32[$912>>2] = $6581;
  $6582 = +HEAPF32[$914>>2];
  HEAPF32[$913>>2] = $6582;
  $6583 = +HEAPF32[$911>>2];
  HEAPF32[$910>>2] = $6583;
  $6584 = +HEAPF32[$908>>2];
  HEAPF32[$907>>2] = $6584;
  $6585 = +HEAPF32[$909>>2];
  HEAPF32[$908>>2] = $6585;
  $6586 = +HEAPF32[$906>>2];
  HEAPF32[$904>>2] = $6586;
  $6587 = +HEAPF32[$903>>2];
  HEAPF32[$905>>2] = $6587;
  $6588 = +HEAPF32[$901>>2];
  HEAPF32[$900>>2] = $6588;
  $6589 = +HEAPF32[$902>>2];
  HEAPF32[$901>>2] = $6589;
  $6590 = +HEAPF32[$899>>2];
  HEAPF32[$898>>2] = $6590;
  $6591 = +HEAPF32[$895>>2];
  HEAPF32[$896>>2] = $6591;
  $6592 = +HEAPF32[$897>>2];
  HEAPF32[$895>>2] = $6592;
  $6593 = +HEAPF32[$893>>2];
  HEAPF32[$892>>2] = $6593;
  $6594 = +HEAPF32[$894>>2];
  HEAPF32[$893>>2] = $6594;
  $6595 = +HEAPF32[$891>>2];
  HEAPF32[$889>>2] = $6595;
  $6596 = +HEAPF32[$888>>2];
  HEAPF32[$890>>2] = $6596;
  $6597 = +HEAPF32[$886>>2];
  HEAPF32[$885>>2] = $6597;
  $6598 = +HEAPF32[$887>>2];
  HEAPF32[$886>>2] = $6598;
  $6599 = +HEAPF32[$884>>2];
  HEAPF32[$883>>2] = $6599;
  $6600 = +HEAPF32[$880>>2];
  HEAPF32[$881>>2] = $6600;
  $6601 = +HEAPF32[$882>>2];
  HEAPF32[$880>>2] = $6601;
  $6602 = +HEAPF32[$877>>2];
  HEAPF32[$878>>2] = $6602;
  $6603 = +HEAPF32[$879>>2];
  HEAPF32[$877>>2] = $6603;
  $6604 = +HEAPF32[$875>>2];
  HEAPF32[$874>>2] = $6604;
  $6605 = +HEAPF32[$876>>2];
  HEAPF32[$875>>2] = $6605;
  $6606 = +HEAPF32[$873>>2];
  HEAPF32[$871>>2] = $6606;
  $6607 = +HEAPF32[$870>>2];
  HEAPF32[$872>>2] = $6607;
  $6608 = +HEAPF32[$868>>2];
  HEAPF32[$867>>2] = $6608;
  $6609 = +HEAPF32[$869>>2];
  HEAPF32[$868>>2] = $6609;
  $6610 = +HEAPF32[$866>>2];
  HEAPF32[$865>>2] = $6610;
  $6611 = +HEAPF32[$862>>2];
  HEAPF32[$863>>2] = $6611;
  $6612 = +HEAPF32[$864>>2];
  HEAPF32[$862>>2] = $6612;
  $6613 = +HEAPF32[$859>>2];
  HEAPF32[$860>>2] = $6613;
  $6614 = +HEAPF32[$861>>2];
  HEAPF32[$859>>2] = $6614;
  $6615 = +HEAPF32[$856>>2];
  HEAPF32[$857>>2] = $6615;
  $6616 = +HEAPF32[$858>>2];
  HEAPF32[$856>>2] = $6616;
  $6617 = +HEAPF32[$854>>2];
  HEAPF32[$853>>2] = $6617;
  $6618 = +HEAPF32[$855>>2];
  HEAPF32[$854>>2] = $6618;
  $6619 = +HEAPF32[$852>>2];
  HEAPF32[$849>>2] = $6619;
  $6620 = +HEAPF32[$847>>2];
  HEAPF32[$846>>2] = $6620;
  $6621 = +HEAPF32[$848>>2];
  HEAPF32[$847>>2] = $6621;
  $6622 = +HEAPF32[$845>>2];
  HEAPF32[$844>>2] = $6622;
  $6623 = +HEAPF32[$842>>2];
  HEAPF32[$841>>2] = $6623;
  $6624 = +HEAPF32[$843>>2];
  HEAPF32[$842>>2] = $6624;
  $6625 = +HEAPF32[$840>>2];
  HEAPF32[$838>>2] = $6625;
  $6626 = +HEAPF32[$837>>2];
  HEAPF32[$839>>2] = $6626;
  $6627 = +HEAPF32[$835>>2];
  HEAPF32[$834>>2] = $6627;
  $6628 = +HEAPF32[$836>>2];
  HEAPF32[$835>>2] = $6628;
  $6629 = +HEAPF32[$833>>2];
  HEAPF32[$832>>2] = $6629;
  $6630 = +HEAPF32[$829>>2];
  HEAPF32[$830>>2] = $6630;
  $6631 = +HEAPF32[$831>>2];
  HEAPF32[$829>>2] = $6631;
  $6632 = +HEAPF32[$827>>2];
  HEAPF32[$826>>2] = $6632;
  $6633 = +HEAPF32[$828>>2];
  HEAPF32[$827>>2] = $6633;
  $6634 = +HEAPF32[$825>>2];
  HEAPF32[$823>>2] = $6634;
  $6635 = +HEAPF32[$822>>2];
  HEAPF32[$824>>2] = $6635;
  $6636 = +HEAPF32[$820>>2];
  HEAPF32[$819>>2] = $6636;
  $6637 = +HEAPF32[$821>>2];
  HEAPF32[$820>>2] = $6637;
  $6638 = +HEAPF32[$818>>2];
  HEAPF32[$817>>2] = $6638;
  $6639 = +HEAPF32[$814>>2];
  HEAPF32[$815>>2] = $6639;
  $6640 = +HEAPF32[$816>>2];
  HEAPF32[$814>>2] = $6640;
  $6641 = +HEAPF32[$811>>2];
  HEAPF32[$812>>2] = $6641;
  $6642 = +HEAPF32[$813>>2];
  HEAPF32[$811>>2] = $6642;
  $6643 = +HEAPF32[$809>>2];
  HEAPF32[$808>>2] = $6643;
  $6644 = +HEAPF32[$810>>2];
  HEAPF32[$809>>2] = $6644;
  $6645 = +HEAPF32[$807>>2];
  HEAPF32[$805>>2] = $6645;
  $6646 = +HEAPF32[$804>>2];
  HEAPF32[$806>>2] = $6646;
  $6647 = +HEAPF32[$802>>2];
  HEAPF32[$801>>2] = $6647;
  $6648 = +HEAPF32[$803>>2];
  HEAPF32[$802>>2] = $6648;
  $6649 = +HEAPF32[$800>>2];
  HEAPF32[$799>>2] = $6649;
  $6650 = +HEAPF32[$796>>2];
  HEAPF32[$797>>2] = $6650;
  $6651 = +HEAPF32[$798>>2];
  HEAPF32[$796>>2] = $6651;
  $6652 = +HEAPF32[$793>>2];
  HEAPF32[$794>>2] = $6652;
  $6653 = +HEAPF32[$795>>2];
  HEAPF32[$793>>2] = $6653;
  $6654 = +HEAPF32[$790>>2];
  HEAPF32[$791>>2] = $6654;
  $6655 = +HEAPF32[$792>>2];
  HEAPF32[$790>>2] = $6655;
  $6656 = +HEAPF32[$788>>2];
  HEAPF32[$787>>2] = $6656;
  $6657 = +HEAPF32[$789>>2];
  HEAPF32[$788>>2] = $6657;
  $6658 = +HEAPF32[$786>>2];
  HEAPF32[$783>>2] = $6658;
  $6659 = +HEAPF32[$781>>2];
  HEAPF32[$780>>2] = $6659;
  $6660 = +HEAPF32[$782>>2];
  HEAPF32[$781>>2] = $6660;
  $6661 = +HEAPF32[$779>>2];
  HEAPF32[$778>>2] = $6661;
  $6662 = +HEAPF32[$776>>2];
  HEAPF32[$775>>2] = $6662;
  $6663 = +HEAPF32[$777>>2];
  HEAPF32[$776>>2] = $6663;
  $6664 = +HEAPF32[$774>>2];
  HEAPF32[$772>>2] = $6664;
  $6665 = +HEAPF32[$771>>2];
  HEAPF32[$773>>2] = $6665;
  $6666 = +HEAPF32[$769>>2];
  HEAPF32[$768>>2] = $6666;
  $6667 = +HEAPF32[$770>>2];
  HEAPF32[$769>>2] = $6667;
  $6668 = +HEAPF32[$767>>2];
  HEAPF32[$766>>2] = $6668;
  $6669 = +HEAPF32[$763>>2];
  HEAPF32[$764>>2] = $6669;
  $6670 = +HEAPF32[$765>>2];
  HEAPF32[$763>>2] = $6670;
  $6671 = +HEAPF32[$761>>2];
  HEAPF32[$760>>2] = $6671;
  $6672 = +HEAPF32[$762>>2];
  HEAPF32[$761>>2] = $6672;
  $6673 = +HEAPF32[$759>>2];
  HEAPF32[$757>>2] = $6673;
  $6674 = +HEAPF32[$756>>2];
  HEAPF32[$758>>2] = $6674;
  $6675 = +HEAPF32[$754>>2];
  HEAPF32[$753>>2] = $6675;
  $6676 = +HEAPF32[$755>>2];
  HEAPF32[$754>>2] = $6676;
  $6677 = +HEAPF32[$752>>2];
  HEAPF32[$751>>2] = $6677;
  $6678 = +HEAPF32[$748>>2];
  HEAPF32[$749>>2] = $6678;
  $6679 = +HEAPF32[$750>>2];
  HEAPF32[$748>>2] = $6679;
  $6680 = +HEAPF32[$745>>2];
  HEAPF32[$746>>2] = $6680;
  $6681 = +HEAPF32[$747>>2];
  HEAPF32[$745>>2] = $6681;
  $6682 = +HEAPF32[$743>>2];
  HEAPF32[$742>>2] = $6682;
  $6683 = +HEAPF32[$744>>2];
  HEAPF32[$743>>2] = $6683;
  $6684 = +HEAPF32[$741>>2];
  HEAPF32[$739>>2] = $6684;
  $6685 = +HEAPF32[$738>>2];
  HEAPF32[$740>>2] = $6685;
  $6686 = +HEAPF32[$736>>2];
  HEAPF32[$735>>2] = $6686;
  $6687 = +HEAPF32[$737>>2];
  HEAPF32[$736>>2] = $6687;
  $6688 = +HEAPF32[$734>>2];
  HEAPF32[$733>>2] = $6688;
  $6689 = +HEAPF32[$730>>2];
  HEAPF32[$731>>2] = $6689;
  $6690 = +HEAPF32[$732>>2];
  HEAPF32[$730>>2] = $6690;
  $6691 = +HEAPF32[$727>>2];
  HEAPF32[$728>>2] = $6691;
  $6692 = +HEAPF32[$729>>2];
  HEAPF32[$727>>2] = $6692;
  $6693 = +HEAPF32[$724>>2];
  HEAPF32[$725>>2] = $6693;
  $6694 = +HEAPF32[$726>>2];
  HEAPF32[$724>>2] = $6694;
  $6695 = +HEAPF32[$722>>2];
  HEAPF32[$721>>2] = $6695;
  $6696 = +HEAPF32[$723>>2];
  HEAPF32[$722>>2] = $6696;
  $6697 = +HEAPF32[$720>>2];
  HEAPF32[$717>>2] = $6697;
  $6698 = +HEAPF32[$715>>2];
  HEAPF32[$714>>2] = $6698;
  $6699 = +HEAPF32[$716>>2];
  HEAPF32[$715>>2] = $6699;
  $6700 = +HEAPF32[$713>>2];
  HEAPF32[$712>>2] = $6700;
  $6701 = +HEAPF32[$710>>2];
  HEAPF32[$709>>2] = $6701;
  $6702 = +HEAPF32[$711>>2];
  HEAPF32[$710>>2] = $6702;
  $6703 = +HEAPF32[$708>>2];
  HEAPF32[$706>>2] = $6703;
  $6704 = +HEAPF32[$705>>2];
  HEAPF32[$707>>2] = $6704;
  $6705 = +HEAPF32[$703>>2];
  HEAPF32[$702>>2] = $6705;
  $6706 = +HEAPF32[$704>>2];
  HEAPF32[$703>>2] = $6706;
  $6707 = +HEAPF32[$701>>2];
  HEAPF32[$700>>2] = $6707;
  $6708 = +HEAPF32[$697>>2];
  HEAPF32[$698>>2] = $6708;
  $6709 = +HEAPF32[$699>>2];
  HEAPF32[$697>>2] = $6709;
  $6710 = +HEAPF32[$695>>2];
  HEAPF32[$694>>2] = $6710;
  $6711 = +HEAPF32[$696>>2];
  HEAPF32[$695>>2] = $6711;
  $6712 = +HEAPF32[$693>>2];
  HEAPF32[$691>>2] = $6712;
  $6713 = +HEAPF32[$690>>2];
  HEAPF32[$692>>2] = $6713;
  $6714 = +HEAPF32[$688>>2];
  HEAPF32[$687>>2] = $6714;
  $6715 = +HEAPF32[$689>>2];
  HEAPF32[$688>>2] = $6715;
  $6716 = +HEAPF32[$686>>2];
  HEAPF32[$685>>2] = $6716;
  $6717 = +HEAPF32[$682>>2];
  HEAPF32[$683>>2] = $6717;
  $6718 = +HEAPF32[$684>>2];
  HEAPF32[$682>>2] = $6718;
  $6719 = +HEAPF32[$679>>2];
  HEAPF32[$680>>2] = $6719;
  $6720 = +HEAPF32[$681>>2];
  HEAPF32[$679>>2] = $6720;
  $6721 = +HEAPF32[$677>>2];
  HEAPF32[$676>>2] = $6721;
  $6722 = +HEAPF32[$678>>2];
  HEAPF32[$677>>2] = $6722;
  $6723 = +HEAPF32[$675>>2];
  HEAPF32[$673>>2] = $6723;
  $6724 = +HEAPF32[$672>>2];
  HEAPF32[$674>>2] = $6724;
  $6725 = +HEAPF32[$670>>2];
  HEAPF32[$669>>2] = $6725;
  $6726 = +HEAPF32[$671>>2];
  HEAPF32[$670>>2] = $6726;
  $6727 = +HEAPF32[$668>>2];
  HEAPF32[$667>>2] = $6727;
  $6728 = +HEAPF32[$664>>2];
  HEAPF32[$665>>2] = $6728;
  $6729 = +HEAPF32[$666>>2];
  HEAPF32[$664>>2] = $6729;
  $6730 = +HEAPF32[$661>>2];
  HEAPF32[$662>>2] = $6730;
  $6731 = +HEAPF32[$663>>2];
  HEAPF32[$661>>2] = $6731;
  $6732 = +HEAPF32[$658>>2];
  HEAPF32[$659>>2] = $6732;
  $6733 = +HEAPF32[$660>>2];
  HEAPF32[$658>>2] = $6733;
  $6734 = +HEAPF32[$656>>2];
  HEAPF32[$655>>2] = $6734;
  $6735 = +HEAPF32[$657>>2];
  HEAPF32[$656>>2] = $6735;
  $6736 = +HEAPF32[$654>>2];
  HEAPF32[$651>>2] = $6736;
  $6737 = +HEAPF32[$649>>2];
  HEAPF32[$648>>2] = $6737;
  $6738 = +HEAPF32[$650>>2];
  HEAPF32[$649>>2] = $6738;
  $6739 = +HEAPF32[$647>>2];
  HEAPF32[$646>>2] = $6739;
  $6740 = +HEAPF32[$644>>2];
  HEAPF32[$643>>2] = $6740;
  $6741 = +HEAPF32[$645>>2];
  HEAPF32[$644>>2] = $6741;
  $6742 = +HEAPF32[$642>>2];
  HEAPF32[$640>>2] = $6742;
  $6743 = +HEAPF32[$639>>2];
  HEAPF32[$641>>2] = $6743;
  $6744 = +HEAPF32[$637>>2];
  HEAPF32[$636>>2] = $6744;
  $6745 = +HEAPF32[$638>>2];
  HEAPF32[$637>>2] = $6745;
  $6746 = +HEAPF32[$635>>2];
  HEAPF32[$634>>2] = $6746;
  $6747 = +HEAPF32[$631>>2];
  HEAPF32[$632>>2] = $6747;
  $6748 = +HEAPF32[$633>>2];
  HEAPF32[$631>>2] = $6748;
  $6749 = +HEAPF32[$629>>2];
  HEAPF32[$628>>2] = $6749;
  $6750 = +HEAPF32[$630>>2];
  HEAPF32[$629>>2] = $6750;
  $6751 = +HEAPF32[$627>>2];
  HEAPF32[$625>>2] = $6751;
  $6752 = +HEAPF32[$624>>2];
  HEAPF32[$626>>2] = $6752;
  $6753 = +HEAPF32[$622>>2];
  HEAPF32[$621>>2] = $6753;
  $6754 = +HEAPF32[$623>>2];
  HEAPF32[$622>>2] = $6754;
  $6755 = +HEAPF32[$620>>2];
  HEAPF32[$619>>2] = $6755;
  $6756 = +HEAPF32[$616>>2];
  HEAPF32[$617>>2] = $6756;
  $6757 = +HEAPF32[$618>>2];
  HEAPF32[$616>>2] = $6757;
  $6758 = +HEAPF32[$613>>2];
  HEAPF32[$614>>2] = $6758;
  $6759 = +HEAPF32[$615>>2];
  HEAPF32[$613>>2] = $6759;
  $6760 = +HEAPF32[$611>>2];
  HEAPF32[$610>>2] = $6760;
  $6761 = +HEAPF32[$612>>2];
  HEAPF32[$611>>2] = $6761;
  $6762 = +HEAPF32[$609>>2];
  HEAPF32[$607>>2] = $6762;
  $6763 = +HEAPF32[$606>>2];
  HEAPF32[$608>>2] = $6763;
  $6764 = +HEAPF32[$604>>2];
  HEAPF32[$603>>2] = $6764;
  $6765 = +HEAPF32[$605>>2];
  HEAPF32[$604>>2] = $6765;
  $6766 = +HEAPF32[$602>>2];
  HEAPF32[$601>>2] = $6766;
  $6767 = +HEAPF32[$598>>2];
  HEAPF32[$599>>2] = $6767;
  $6768 = +HEAPF32[$600>>2];
  HEAPF32[$598>>2] = $6768;
  $6769 = +HEAPF32[$595>>2];
  HEAPF32[$596>>2] = $6769;
  $6770 = +HEAPF32[$597>>2];
  HEAPF32[$595>>2] = $6770;
  $6771 = +HEAPF32[$592>>2];
  HEAPF32[$593>>2] = $6771;
  $6772 = +HEAPF32[$594>>2];
  HEAPF32[$592>>2] = $6772;
  $6773 = +HEAPF32[$590>>2];
  HEAPF32[$589>>2] = $6773;
  $6774 = +HEAPF32[$591>>2];
  HEAPF32[$590>>2] = $6774;
  $6775 = +HEAPF32[$588>>2];
  HEAPF32[$585>>2] = $6775;
  $6776 = +HEAPF32[$583>>2];
  HEAPF32[$584>>2] = $6776;
  $6777 = +HEAPF32[$581>>2];
  HEAPF32[$582>>2] = $6777;
  $6778 = +HEAPF32[$1660>>2];
  $6779 = (($this) + 36|0);
  HEAPF32[$6779>>2] = $6778;
  $6780 = (($this) + 28|0);
  $6781 = +HEAPF32[$6780>>2];
  $6782 = (($this) + 32|0);
  HEAPF32[$6782>>2] = $6781;
  $6783 = (($this) + 24|0);
  $6784 = +HEAPF32[$6783>>2];
  $6785 = (($this) + 28|0);
  HEAPF32[$6785>>2] = $6784;
  $6786 = HEAP32[$576>>2]|0;
  HEAP32[$575>>2] = $6786;
  $6787 = (($i$02) + 1)|0;
  $exitcond = ($6787|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $6787;
  }
 }
 STACKTOP = sp;return;
}
function __ZN14ReverbDesigner12instanceInitEi($this,$samplingFreq) {
 $this = $this|0;
 $samplingFreq = $samplingFreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $scevgep = 0, $scevgep1001 = 0, $scevgep1003 = 0, $scevgep1005 = 0, $scevgep1007 = 0, $scevgep1009 = 0, $scevgep1011 = 0, $scevgep1013 = 0, $scevgep1015 = 0, $scevgep1017 = 0, $scevgep1019 = 0, $scevgep1021 = 0, $scevgep1023 = 0, $scevgep1025 = 0, $scevgep1027 = 0, $scevgep1029 = 0, $scevgep1031 = 0, $scevgep1033 = 0, $scevgep1035 = 0, $scevgep1037 = 0;
 var $scevgep1039 = 0, $scevgep1041 = 0, $scevgep1043 = 0, $scevgep1045 = 0, $scevgep1047 = 0, $scevgep1049 = 0, $scevgep1051 = 0, $scevgep1053 = 0, $scevgep1055 = 0, $scevgep1057 = 0, $scevgep1059 = 0, $scevgep1061 = 0, $scevgep1063 = 0, $scevgep1065 = 0, $scevgep1067 = 0, $scevgep1069 = 0, $scevgep1071 = 0, $scevgep1073 = 0, $scevgep1075 = 0, $scevgep1077 = 0;
 var $scevgep1079 = 0, $scevgep1081 = 0, $scevgep1083 = 0, $scevgep1085 = 0, $scevgep1087 = 0, $scevgep1089 = 0, $scevgep1091 = 0, $scevgep1093 = 0, $scevgep1095 = 0, $scevgep1097 = 0, $scevgep1099 = 0, $scevgep1101 = 0, $scevgep1103 = 0, $scevgep1105 = 0, $scevgep1107 = 0, $scevgep1109 = 0, $scevgep1111 = 0, $scevgep1113 = 0, $scevgep1115 = 0, $scevgep1117 = 0;
 var $scevgep1119 = 0, $scevgep1121 = 0, $scevgep1123 = 0, $scevgep1125 = 0, $scevgep1127 = 0, $scevgep1129 = 0, $scevgep1131 = 0, $scevgep1133 = 0, $scevgep1135 = 0, $scevgep1137 = 0, $scevgep1139 = 0, $scevgep1141 = 0, $scevgep1143 = 0, $scevgep1145 = 0, $scevgep1147 = 0, $scevgep1149 = 0, $scevgep1151 = 0, $scevgep1153 = 0, $scevgep1155 = 0, $scevgep1157 = 0;
 var $scevgep1159 = 0, $scevgep1161 = 0, $scevgep1163 = 0, $scevgep1165 = 0, $scevgep1167 = 0, $scevgep1169 = 0, $scevgep1171 = 0, $scevgep1173 = 0, $scevgep1175 = 0, $scevgep1177 = 0, $scevgep1179 = 0, $scevgep1181 = 0, $scevgep1183 = 0, $scevgep1185 = 0, $scevgep1187 = 0, $scevgep1189 = 0, $scevgep1191 = 0, $scevgep1193 = 0, $scevgep1195 = 0, $scevgep1197 = 0;
 var $scevgep1199 = 0, $scevgep1201 = 0, $scevgep1203 = 0, $scevgep1205 = 0, $scevgep1207 = 0, $scevgep1209 = 0, $scevgep1211 = 0, $scevgep1213 = 0, $scevgep1215 = 0, $scevgep1217 = 0, $scevgep1219 = 0, $scevgep1221 = 0, $scevgep1223 = 0, $scevgep1225 = 0, $scevgep1227 = 0, $scevgep1229 = 0, $scevgep1231 = 0, $scevgep1233 = 0, $scevgep1235 = 0, $scevgep1237 = 0;
 var $scevgep1239 = 0, $scevgep1241 = 0, $scevgep1243 = 0, $scevgep1245 = 0, $scevgep1247 = 0, $scevgep1249 = 0, $scevgep1251 = 0, $scevgep1253 = 0, $scevgep1255 = 0, $scevgep1257 = 0, $scevgep1259 = 0, $scevgep1261 = 0, $scevgep1263 = 0, $scevgep1265 = 0, $scevgep1267 = 0, $scevgep1269 = 0, $scevgep1271 = 0, $scevgep1273 = 0, $scevgep1275 = 0, $scevgep1277 = 0;
 var $scevgep1279 = 0, $scevgep1281 = 0, $scevgep1283 = 0, $scevgep1285 = 0, $scevgep1287 = 0, $scevgep1289 = 0, $scevgep1291 = 0, $scevgep1293 = 0, $scevgep1295 = 0, $scevgep1297 = 0, $scevgep1299 = 0, $scevgep1301 = 0, $scevgep1303 = 0, $scevgep1305 = 0, $scevgep1307 = 0, $scevgep1309 = 0, $scevgep1311 = 0, $scevgep1313 = 0, $scevgep1315 = 0, $scevgep1317 = 0;
 var $scevgep1319 = 0, $scevgep1321 = 0, $scevgep1323 = 0, $scevgep1325 = 0, $scevgep1327 = 0, $scevgep1329 = 0, $scevgep1331 = 0, $scevgep1333 = 0, $scevgep1335 = 0, $scevgep1337 = 0, $scevgep1339 = 0, $scevgep1341 = 0, $scevgep1343 = 0, $scevgep1345 = 0, $scevgep1347 = 0, $scevgep1349 = 0, $scevgep1351 = 0, $scevgep1353 = 0, $scevgep1355 = 0, $scevgep1357 = 0;
 var $scevgep1359 = 0, $scevgep1361 = 0, $scevgep1363 = 0, $scevgep1365 = 0, $scevgep1367 = 0, $scevgep1369 = 0, $scevgep1371 = 0, $scevgep1373 = 0, $scevgep1375 = 0, $scevgep1377 = 0, $scevgep1379 = 0, $scevgep1381 = 0, $scevgep1383 = 0, $scevgep1385 = 0, $scevgep1387 = 0, $scevgep1389 = 0, $scevgep1391 = 0, $scevgep1393 = 0, $scevgep1395 = 0, $scevgep1397 = 0;
 var $scevgep1399 = 0, $scevgep1401 = 0, $scevgep1403 = 0, $scevgep1405 = 0, $scevgep1407 = 0, $scevgep1409 = 0, $scevgep1411 = 0, $scevgep1413 = 0, $scevgep1415 = 0, $scevgep1417 = 0, $scevgep1419 = 0, $scevgep1421 = 0, $scevgep1423 = 0, $scevgep1425 = 0, $scevgep1427 = 0, $scevgep1429 = 0, $scevgep1431 = 0, $scevgep1433 = 0, $scevgep1435 = 0, $scevgep1437 = 0;
 var $scevgep1439 = 0, $scevgep1441 = 0, $scevgep1443 = 0, $scevgep1445 = 0, $scevgep1447 = 0, $scevgep1449 = 0, $scevgep1451 = 0, $scevgep1453 = 0, $scevgep1455 = 0, $scevgep1457 = 0, $scevgep1459 = 0, $scevgep1461 = 0, $scevgep1463 = 0, $scevgep1465 = 0, $scevgep1467 = 0, $scevgep1469 = 0, $scevgep1471 = 0, $scevgep1473 = 0, $scevgep1475 = 0, $scevgep1477 = 0;
 var $scevgep1479 = 0, $scevgep1481 = 0, $scevgep1483 = 0, $scevgep1485 = 0, $scevgep1487 = 0, $scevgep1489 = 0, $scevgep1491 = 0, $scevgep1493 = 0, $scevgep1495 = 0, $scevgep1497 = 0, $scevgep1499 = 0, $scevgep1501 = 0, $scevgep1503 = 0, $scevgep1505 = 0, $scevgep1507 = 0, $scevgep1509 = 0, $scevgep1511 = 0, $scevgep1513 = 0, $scevgep1515 = 0, $scevgep1517 = 0;
 var $scevgep1519 = 0, $scevgep1521 = 0, $scevgep1523 = 0, $scevgep1525 = 0, $scevgep1527 = 0, $scevgep1529 = 0, $scevgep1531 = 0, $scevgep1533 = 0, $scevgep1535 = 0, $scevgep1537 = 0, $scevgep1539 = 0, $scevgep1541 = 0, $scevgep1543 = 0, $scevgep1545 = 0, $scevgep1547 = 0, $scevgep1549 = 0, $scevgep1551 = 0, $scevgep1553 = 0, $scevgep1555 = 0, $scevgep1557 = 0;
 var $scevgep1559 = 0, $scevgep1561 = 0, $scevgep1563 = 0, $scevgep1565 = 0, $scevgep1567 = 0, $scevgep1569 = 0, $scevgep1571 = 0, $scevgep1573 = 0, $scevgep1575 = 0, $scevgep1577 = 0, $scevgep1579 = 0, $scevgep1581 = 0, $scevgep1583 = 0, $scevgep1585 = 0, $scevgep1587 = 0, $scevgep1589 = 0, $scevgep1591 = 0, $scevgep1593 = 0, $scevgep1595 = 0, $scevgep1597 = 0;
 var $scevgep1599 = 0, $scevgep1601 = 0, $scevgep1603 = 0, $scevgep1605 = 0, $scevgep1607 = 0, $scevgep1609 = 0, $scevgep1611 = 0, $scevgep1613 = 0, $scevgep1615 = 0, $scevgep1617 = 0, $scevgep1619 = 0, $scevgep1621 = 0, $scevgep1623 = 0, $scevgep1625 = 0, $scevgep1627 = 0, $scevgep1629 = 0, $scevgep1631 = 0, $scevgep1633 = 0, $scevgep1635 = 0, $scevgep1637 = 0;
 var $scevgep1639 = 0, $scevgep1641 = 0, $scevgep1643 = 0, $scevgep1645 = 0, $scevgep1647 = 0, $scevgep1649 = 0, $scevgep1651 = 0, $scevgep1653 = 0, $scevgep1655 = 0, $scevgep1657 = 0, $scevgep1659 = 0, $scevgep1661 = 0, $scevgep1663 = 0, $scevgep1665 = 0, $scevgep1667 = 0, $scevgep1669 = 0, $scevgep1671 = 0, $scevgep1673 = 0, $scevgep1675 = 0, $scevgep1677 = 0;
 var $scevgep1679 = 0, $scevgep1681 = 0, $scevgep1683 = 0, $scevgep1685 = 0, $scevgep1687 = 0, $scevgep1689 = 0, $scevgep1691 = 0, $scevgep1693 = 0, $scevgep1695 = 0, $scevgep1697 = 0, $scevgep1699 = 0, $scevgep1701 = 0, $scevgep1703 = 0, $scevgep1705 = 0, $scevgep1707 = 0, $scevgep1709 = 0, $scevgep1711 = 0, $scevgep1713 = 0, $scevgep1715 = 0, $scevgep1717 = 0;
 var $scevgep1719 = 0, $scevgep1721 = 0, $scevgep1723 = 0, $scevgep1725 = 0, $scevgep1731 = 0, $scevgep863 = 0, $scevgep865 = 0, $scevgep867 = 0, $scevgep869 = 0, $scevgep871 = 0, $scevgep873 = 0, $scevgep875 = 0, $scevgep877 = 0, $scevgep879 = 0, $scevgep881 = 0, $scevgep883 = 0, $scevgep885 = 0, $scevgep887 = 0, $scevgep889 = 0, $scevgep891 = 0;
 var $scevgep893 = 0, $scevgep895 = 0, $scevgep897 = 0, $scevgep899 = 0, $scevgep901 = 0, $scevgep903 = 0, $scevgep905 = 0, $scevgep907 = 0, $scevgep909 = 0, $scevgep911 = 0, $scevgep913 = 0, $scevgep915 = 0, $scevgep917 = 0, $scevgep919 = 0, $scevgep923 = 0, $scevgep927 = 0, $scevgep929 = 0, $scevgep931 = 0, $scevgep933 = 0, $scevgep935 = 0;
 var $scevgep937 = 0, $scevgep939 = 0, $scevgep941 = 0, $scevgep943 = 0, $scevgep945 = 0, $scevgep947 = 0, $scevgep949 = 0, $scevgep951 = 0, $scevgep953 = 0, $scevgep955 = 0, $scevgep957 = 0, $scevgep959 = 0, $scevgep961 = 0, $scevgep963 = 0, $scevgep965 = 0, $scevgep967 = 0, $scevgep969 = 0, $scevgep971 = 0, $scevgep973 = 0, $scevgep975 = 0;
 var $scevgep977 = 0, $scevgep979 = 0, $scevgep981 = 0, $scevgep983 = 0, $scevgep985 = 0, $scevgep987 = 0, $scevgep989 = 0, $scevgep991 = 0, $scevgep993 = 0, $scevgep995 = 0, $scevgep997 = 0, $scevgep999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $samplingFreq;
 $1 = (($this) + 8|0);
 HEAPF32[$1>>2] = -40.0;
 $2 = (($this) + 12|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $scevgep1731 = (($this) + 24|0);
 ;HEAP32[$scevgep1731+0>>2]=0|0;HEAP32[$scevgep1731+4>>2]=0|0;HEAP32[$scevgep1731+8>>2]=0|0;HEAP32[$scevgep1731+12>>2]=0|0;
 $3 = (($this) + 40|0);
 ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $4 = (($this) + 52|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = (($this) + 68|0);
 HEAPF32[$5>>2] = 0.0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)<(192000);
 $10 = $9 ? $8 : 192000;
 $11 = (($this) + 72|0);
 HEAP32[$11>>2] = $10;
 $12 = (+($10|0));
 $13 = 1.0 / $12;
 $14 = (($this) + 76|0);
 HEAPF32[$14>>2] = $13;
 $15 = HEAP32[$11>>2]|0;
 $16 = (+($15|0));
 $17 = $16 * 0.00291545200161635875702;
 $18 = (($this) + 80|0);
 HEAPF32[$18>>2] = $17;
 $19 = (($this) + 84|0);
 HEAPF32[$19>>2] = 46.0;
 $20 = (($this) + 88|0);
 HEAPF32[$20>>2] = 63.0;
 $21 = (($this) + 92|0);
 HEAPF32[$21>>2] = 2.70000004768371582031;
 $22 = HEAP32[$11>>2]|0;
 $23 = (+($22|0));
 $24 = 3.14159274101257324219 / $23;
 $25 = (($this) + 96|0);
 HEAPF32[$25>>2] = $24;
 $26 = (($this) + 100|0);
 HEAPF32[$26>>2] = 4000.0;
 $scevgep1725 = (($this) + 104|0);
 $27 = $scevgep1725;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 $scevgep1723 = (($this) + 112|0);
 ;HEAP32[$scevgep1723+0>>2]=0|0;HEAP32[$scevgep1723+4>>2]=0|0;HEAP32[$scevgep1723+8>>2]=0|0;
 $31 = (($this) + 124|0);
 HEAPF32[$31>>2] = 2000.0;
 $scevgep1721 = (($this) + 128|0);
 ;HEAP32[$scevgep1721+0>>2]=0|0;HEAP32[$scevgep1721+4>>2]=0|0;HEAP32[$scevgep1721+8>>2]=0|0;
 $32 = (($this) + 140|0);
 HEAPF32[$32>>2] = 1000.0;
 $scevgep1719 = (($this) + 144|0);
 ;HEAP32[$scevgep1719+0>>2]=0|0;HEAP32[$scevgep1719+4>>2]=0|0;HEAP32[$scevgep1719+8>>2]=0|0;
 $33 = (($this) + 156|0);
 HEAPF32[$33>>2] = 500.0;
 $scevgep1717 = (($this) + 160|0);
 ;HEAP32[$scevgep1717+0>>2]=0|0;HEAP32[$scevgep1717+4>>2]=0|0;HEAP32[$scevgep1717+8>>2]=0|0;
 $34 = (($this) + 172|0);
 HEAPF32[$34>>2] = 3.79999995231628417969;
 $scevgep1715 = (($this) + 176|0);
 $35 = $scevgep1715;
 $36 = $35;
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = 0;
 $scevgep1713 = (($this) + 184|0);
 ;HEAP32[$scevgep1713+0>>2]=0|0;HEAP32[$scevgep1713+4>>2]=0|0;HEAP32[$scevgep1713+8>>2]=0|0;
 $scevgep1711 = (($this) + 196|0);
 $39 = $scevgep1711;
 $40 = $39;
 HEAP32[$40>>2] = 0;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = 0;
 $scevgep1709 = (($this) + 204|0);
 $43 = $scevgep1709;
 $44 = $43;
 HEAP32[$44>>2] = 0;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = 0;
 $scevgep1707 = (($this) + 212|0);
 ;HEAP32[$scevgep1707+0>>2]=0|0;HEAP32[$scevgep1707+4>>2]=0|0;HEAP32[$scevgep1707+8>>2]=0|0;
 $scevgep1705 = (($this) + 224|0);
 ;HEAP32[$scevgep1705+0>>2]=0|0;HEAP32[$scevgep1705+4>>2]=0|0;HEAP32[$scevgep1705+8>>2]=0|0;
 $scevgep1703 = (($this) + 236|0);
 ;HEAP32[$scevgep1703+0>>2]=0|0;HEAP32[$scevgep1703+4>>2]=0|0;HEAP32[$scevgep1703+8>>2]=0|0;
 $47 = (($this) + 248|0);
 HEAPF32[$47>>2] = 5.0;
 $scevgep1701 = (($this) + 252|0);
 $48 = $scevgep1701;
 $49 = $48;
 HEAP32[$49>>2] = 0;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = 0;
 $scevgep1699 = (($this) + 260|0);
 ;HEAP32[$scevgep1699+0>>2]=0|0;HEAP32[$scevgep1699+4>>2]=0|0;HEAP32[$scevgep1699+8>>2]=0|0;
 $scevgep1697 = (($this) + 272|0);
 $52 = $scevgep1697;
 $53 = $52;
 HEAP32[$53>>2] = 0;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = 0;
 $scevgep1695 = (($this) + 280|0);
 $56 = $scevgep1695;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $58 = (($56) + 4)|0;
 $59 = $58;
 HEAP32[$59>>2] = 0;
 $scevgep1693 = (($this) + 288|0);
 ;HEAP32[$scevgep1693+0>>2]=0|0;HEAP32[$scevgep1693+4>>2]=0|0;HEAP32[$scevgep1693+8>>2]=0|0;
 $scevgep1691 = (($this) + 300|0);
 ;HEAP32[$scevgep1691+0>>2]=0|0;HEAP32[$scevgep1691+4>>2]=0|0;HEAP32[$scevgep1691+8>>2]=0|0;
 $60 = (($this) + 312|0);
 HEAPF32[$60>>2] = 6.5;
 $scevgep1689 = (($this) + 316|0);
 $61 = $scevgep1689;
 $62 = $61;
 HEAP32[$62>>2] = 0;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = 0;
 $scevgep1687 = (($this) + 324|0);
 ;HEAP32[$scevgep1687+0>>2]=0|0;HEAP32[$scevgep1687+4>>2]=0|0;HEAP32[$scevgep1687+8>>2]=0|0;
 $scevgep1685 = (($this) + 336|0);
 $65 = $scevgep1685;
 $66 = $65;
 HEAP32[$66>>2] = 0;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $scevgep1683 = (($this) + 344|0);
 $69 = $scevgep1683;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $scevgep1681 = (($this) + 352|0);
 ;HEAP32[$scevgep1681+0>>2]=0|0;HEAP32[$scevgep1681+4>>2]=0|0;HEAP32[$scevgep1681+8>>2]=0|0;
 $73 = (($this) + 364|0);
 HEAPF32[$73>>2] = 8.3999996185302734375;
 $scevgep1679 = (($this) + 368|0);
 $74 = $scevgep1679;
 $75 = $74;
 HEAP32[$75>>2] = 0;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = 0;
 $scevgep1677 = (($this) + 376|0);
 ;HEAP32[$scevgep1677+0>>2]=0|0;HEAP32[$scevgep1677+4>>2]=0|0;HEAP32[$scevgep1677+8>>2]=0|0;
 $scevgep1675 = (($this) + 388|0);
 $78 = $scevgep1675;
 $79 = $78;
 HEAP32[$79>>2] = 0;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = 0;
 $scevgep1673 = (($this) + 396|0);
 ;HEAP32[$scevgep1673+0>>2]=0|0;HEAP32[$scevgep1673+4>>2]=0|0;HEAP32[$scevgep1673+8>>2]=0|0;
 $scevgep1671 = (($this) + 408|0);
 ;HEAP32[$scevgep1671+0>>2]=0|0;HEAP32[$scevgep1671+4>>2]=0|0;HEAP32[$scevgep1671+8>>2]=0|0;
 $scevgep1669 = (($this) + 420|0);
 ;HEAP32[$scevgep1669+0>>2]=0|0;HEAP32[$scevgep1669+4>>2]=0|0;HEAP32[$scevgep1669+8>>2]=0|0;
 $scevgep1667 = (($this) + 432|0);
 ;HEAP32[$scevgep1667+0>>2]=0|0;HEAP32[$scevgep1667+4>>2]=0|0;HEAP32[$scevgep1667+8>>2]=0|0;
 $scevgep1665 = (($this) + 444|0);
 $82 = $scevgep1665;
 $83 = $82;
 HEAP32[$83>>2] = 0;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 $scevgep1663 = (($this) + 452|0);
 ;HEAP32[$scevgep1663+0>>2]=0|0;HEAP32[$scevgep1663+4>>2]=0|0;HEAP32[$scevgep1663+8>>2]=0|0;
 $scevgep1661 = (($this) + 464|0);
 $86 = $scevgep1661;
 $87 = $86;
 HEAP32[$87>>2] = 0;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = 0;
 $scevgep1659 = (($this) + 472|0);
 $90 = $scevgep1659;
 $91 = $90;
 HEAP32[$91>>2] = 0;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $scevgep1657 = (($this) + 480|0);
 ;HEAP32[$scevgep1657+0>>2]=0|0;HEAP32[$scevgep1657+4>>2]=0|0;HEAP32[$scevgep1657+8>>2]=0|0;
 $scevgep1655 = (($this) + 492|0);
 ;HEAP32[$scevgep1655+0>>2]=0|0;HEAP32[$scevgep1655+4>>2]=0|0;HEAP32[$scevgep1655+8>>2]=0|0;
 $scevgep1653 = (($this) + 504|0);
 ;HEAP32[$scevgep1653+0>>2]=0|0;HEAP32[$scevgep1653+4>>2]=0|0;HEAP32[$scevgep1653+8>>2]=0|0;
 $scevgep1651 = (($this) + 516|0);
 $94 = $scevgep1651;
 $95 = $94;
 HEAP32[$95>>2] = 0;
 $96 = (($94) + 4)|0;
 $97 = $96;
 HEAP32[$97>>2] = 0;
 $scevgep1649 = (($this) + 524|0);
 ;HEAP32[$scevgep1649+0>>2]=0|0;HEAP32[$scevgep1649+4>>2]=0|0;HEAP32[$scevgep1649+8>>2]=0|0;
 $scevgep1647 = (($this) + 536|0);
 $98 = $scevgep1647;
 $99 = $98;
 HEAP32[$99>>2] = 0;
 $100 = (($98) + 4)|0;
 $101 = $100;
 HEAP32[$101>>2] = 0;
 $scevgep1645 = (($this) + 544|0);
 $102 = $scevgep1645;
 $103 = $102;
 HEAP32[$103>>2] = 0;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = 0;
 $scevgep1643 = (($this) + 552|0);
 ;HEAP32[$scevgep1643+0>>2]=0|0;HEAP32[$scevgep1643+4>>2]=0|0;HEAP32[$scevgep1643+8>>2]=0|0;
 $scevgep1641 = (($this) + 564|0);
 ;HEAP32[$scevgep1641+0>>2]=0|0;HEAP32[$scevgep1641+4>>2]=0|0;HEAP32[$scevgep1641+8>>2]=0|0;
 $scevgep1639 = (($this) + 576|0);
 $106 = $scevgep1639;
 $107 = $106;
 HEAP32[$107>>2] = 0;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = 0;
 $scevgep1637 = (($this) + 584|0);
 ;HEAP32[$scevgep1637+0>>2]=0|0;HEAP32[$scevgep1637+4>>2]=0|0;HEAP32[$scevgep1637+8>>2]=0|0;
 $scevgep1635 = (($this) + 596|0);
 $110 = $scevgep1635;
 $111 = $110;
 HEAP32[$111>>2] = 0;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = 0;
 $scevgep1633 = (($this) + 604|0);
 $114 = $scevgep1633;
 $115 = $114;
 HEAP32[$115>>2] = 0;
 $116 = (($114) + 4)|0;
 $117 = $116;
 HEAP32[$117>>2] = 0;
 $scevgep1631 = (($this) + 612|0);
 ;HEAP32[$scevgep1631+0>>2]=0|0;HEAP32[$scevgep1631+4>>2]=0|0;HEAP32[$scevgep1631+8>>2]=0|0;
 $scevgep1629 = (($this) + 624|0);
 $118 = $scevgep1629;
 $119 = $118;
 HEAP32[$119>>2] = 0;
 $120 = (($118) + 4)|0;
 $121 = $120;
 HEAP32[$121>>2] = 0;
 $scevgep1627 = (($this) + 632|0);
 ;HEAP32[$scevgep1627+0>>2]=0|0;HEAP32[$scevgep1627+4>>2]=0|0;HEAP32[$scevgep1627+8>>2]=0|0;
 $scevgep1625 = (($this) + 644|0);
 $122 = $scevgep1625;
 $123 = $122;
 HEAP32[$123>>2] = 0;
 $124 = (($122) + 4)|0;
 $125 = $124;
 HEAP32[$125>>2] = 0;
 $scevgep1623 = (($this) + 652|0);
 ;HEAP32[$scevgep1623+0>>2]=0|0;HEAP32[$scevgep1623+4>>2]=0|0;HEAP32[$scevgep1623+8>>2]=0|0;
 $scevgep1621 = (($this) + 664|0);
 ;HEAP32[$scevgep1621+0>>2]=0|0;HEAP32[$scevgep1621+4>>2]=0|0;HEAP32[$scevgep1621+8>>2]=0|0;
 $scevgep1619 = (($this) + 676|0);
 ;HEAP32[$scevgep1619+0>>2]=0|0;HEAP32[$scevgep1619+4>>2]=0|0;HEAP32[$scevgep1619+8>>2]=0|0;
 $scevgep1617 = (($this) + 688|0);
 ;HEAP32[$scevgep1617+0>>2]=0|0;HEAP32[$scevgep1617+4>>2]=0|0;HEAP32[$scevgep1617+8>>2]=0|0;
 $scevgep1615 = (($this) + 700|0);
 $126 = $scevgep1615;
 $127 = $126;
 HEAP32[$127>>2] = 0;
 $128 = (($126) + 4)|0;
 $129 = $128;
 HEAP32[$129>>2] = 0;
 $scevgep1613 = (($this) + 708|0);
 ;HEAP32[$scevgep1613+0>>2]=0|0;HEAP32[$scevgep1613+4>>2]=0|0;HEAP32[$scevgep1613+8>>2]=0|0;
 $scevgep1611 = (($this) + 720|0);
 $130 = $scevgep1611;
 $131 = $130;
 HEAP32[$131>>2] = 0;
 $132 = (($130) + 4)|0;
 $133 = $132;
 HEAP32[$133>>2] = 0;
 $scevgep1609 = (($this) + 728|0);
 $134 = $scevgep1609;
 $135 = $134;
 HEAP32[$135>>2] = 0;
 $136 = (($134) + 4)|0;
 $137 = $136;
 HEAP32[$137>>2] = 0;
 $scevgep1607 = (($this) + 736|0);
 ;HEAP32[$scevgep1607+0>>2]=0|0;HEAP32[$scevgep1607+4>>2]=0|0;HEAP32[$scevgep1607+8>>2]=0|0;
 $scevgep1605 = (($this) + 748|0);
 ;HEAP32[$scevgep1605+0>>2]=0|0;HEAP32[$scevgep1605+4>>2]=0|0;HEAP32[$scevgep1605+8>>2]=0|0;
 $scevgep1603 = (($this) + 760|0);
 ;HEAP32[$scevgep1603+0>>2]=0|0;HEAP32[$scevgep1603+4>>2]=0|0;HEAP32[$scevgep1603+8>>2]=0|0;
 $scevgep1601 = (($this) + 772|0);
 $138 = $scevgep1601;
 $139 = $138;
 HEAP32[$139>>2] = 0;
 $140 = (($138) + 4)|0;
 $141 = $140;
 HEAP32[$141>>2] = 0;
 $scevgep1599 = (($this) + 780|0);
 ;HEAP32[$scevgep1599+0>>2]=0|0;HEAP32[$scevgep1599+4>>2]=0|0;HEAP32[$scevgep1599+8>>2]=0|0;
 $scevgep1597 = (($this) + 792|0);
 $142 = $scevgep1597;
 $143 = $142;
 HEAP32[$143>>2] = 0;
 $144 = (($142) + 4)|0;
 $145 = $144;
 HEAP32[$145>>2] = 0;
 $scevgep1595 = (($this) + 800|0);
 $146 = $scevgep1595;
 $147 = $146;
 HEAP32[$147>>2] = 0;
 $148 = (($146) + 4)|0;
 $149 = $148;
 HEAP32[$149>>2] = 0;
 $scevgep1593 = (($this) + 808|0);
 ;HEAP32[$scevgep1593+0>>2]=0|0;HEAP32[$scevgep1593+4>>2]=0|0;HEAP32[$scevgep1593+8>>2]=0|0;
 $scevgep1591 = (($this) + 820|0);
 ;HEAP32[$scevgep1591+0>>2]=0|0;HEAP32[$scevgep1591+4>>2]=0|0;HEAP32[$scevgep1591+8>>2]=0|0;
 $scevgep1589 = (($this) + 832|0);
 $150 = $scevgep1589;
 $151 = $150;
 HEAP32[$151>>2] = 0;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = 0;
 $scevgep1587 = (($this) + 840|0);
 ;HEAP32[$scevgep1587+0>>2]=0|0;HEAP32[$scevgep1587+4>>2]=0|0;HEAP32[$scevgep1587+8>>2]=0|0;
 $scevgep1585 = (($this) + 852|0);
 $154 = $scevgep1585;
 $155 = $154;
 HEAP32[$155>>2] = 0;
 $156 = (($154) + 4)|0;
 $157 = $156;
 HEAP32[$157>>2] = 0;
 $scevgep1583 = (($this) + 860|0);
 $158 = $scevgep1583;
 $159 = $158;
 HEAP32[$159>>2] = 0;
 $160 = (($158) + 4)|0;
 $161 = $160;
 HEAP32[$161>>2] = 0;
 $scevgep1581 = (($this) + 868|0);
 ;HEAP32[$scevgep1581+0>>2]=0|0;HEAP32[$scevgep1581+4>>2]=0|0;HEAP32[$scevgep1581+8>>2]=0|0;
 $scevgep1579 = (($this) + 880|0);
 $162 = $scevgep1579;
 $163 = $162;
 HEAP32[$163>>2] = 0;
 $164 = (($162) + 4)|0;
 $165 = $164;
 HEAP32[$165>>2] = 0;
 $scevgep1577 = (($this) + 888|0);
 ;HEAP32[$scevgep1577+0>>2]=0|0;HEAP32[$scevgep1577+4>>2]=0|0;HEAP32[$scevgep1577+8>>2]=0|0;
 $scevgep1575 = (($this) + 900|0);
 $166 = $scevgep1575;
 $167 = $166;
 HEAP32[$167>>2] = 0;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = 0;
 $scevgep1573 = (($this) + 908|0);
 ;HEAP32[$scevgep1573+0>>2]=0|0;HEAP32[$scevgep1573+4>>2]=0|0;HEAP32[$scevgep1573+8>>2]=0|0;
 $scevgep1571 = (($this) + 920|0);
 ;HEAP32[$scevgep1571+0>>2]=0|0;HEAP32[$scevgep1571+4>>2]=0|0;HEAP32[$scevgep1571+8>>2]=0|0;
 $scevgep1569 = (($this) + 932|0);
 ;HEAP32[$scevgep1569+0>>2]=0|0;HEAP32[$scevgep1569+4>>2]=0|0;HEAP32[$scevgep1569+8>>2]=0|0;
 $scevgep1567 = (($this) + 944|0);
 ;HEAP32[$scevgep1567+0>>2]=0|0;HEAP32[$scevgep1567+4>>2]=0|0;HEAP32[$scevgep1567+8>>2]=0|0;
 $scevgep1565 = (($this) + 956|0);
 $170 = $scevgep1565;
 $171 = $170;
 HEAP32[$171>>2] = 0;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = 0;
 $scevgep1563 = (($this) + 964|0);
 ;HEAP32[$scevgep1563+0>>2]=0|0;HEAP32[$scevgep1563+4>>2]=0|0;HEAP32[$scevgep1563+8>>2]=0|0;
 $scevgep1561 = (($this) + 976|0);
 $174 = $scevgep1561;
 $175 = $174;
 HEAP32[$175>>2] = 0;
 $176 = (($174) + 4)|0;
 $177 = $176;
 HEAP32[$177>>2] = 0;
 $scevgep1559 = (($this) + 984|0);
 $178 = $scevgep1559;
 $179 = $178;
 HEAP32[$179>>2] = 0;
 $180 = (($178) + 4)|0;
 $181 = $180;
 HEAP32[$181>>2] = 0;
 $scevgep1557 = (($this) + 992|0);
 ;HEAP32[$scevgep1557+0>>2]=0|0;HEAP32[$scevgep1557+4>>2]=0|0;HEAP32[$scevgep1557+8>>2]=0|0;
 $scevgep1555 = (($this) + 1004|0);
 ;HEAP32[$scevgep1555+0>>2]=0|0;HEAP32[$scevgep1555+4>>2]=0|0;HEAP32[$scevgep1555+8>>2]=0|0;
 $scevgep1553 = (($this) + 1016|0);
 ;HEAP32[$scevgep1553+0>>2]=0|0;HEAP32[$scevgep1553+4>>2]=0|0;HEAP32[$scevgep1553+8>>2]=0|0;
 $scevgep1551 = (($this) + 1028|0);
 $182 = $scevgep1551;
 $183 = $182;
 HEAP32[$183>>2] = 0;
 $184 = (($182) + 4)|0;
 $185 = $184;
 HEAP32[$185>>2] = 0;
 $scevgep1549 = (($this) + 1036|0);
 ;HEAP32[$scevgep1549+0>>2]=0|0;HEAP32[$scevgep1549+4>>2]=0|0;HEAP32[$scevgep1549+8>>2]=0|0;
 $scevgep1547 = (($this) + 1048|0);
 $186 = $scevgep1547;
 $187 = $186;
 HEAP32[$187>>2] = 0;
 $188 = (($186) + 4)|0;
 $189 = $188;
 HEAP32[$189>>2] = 0;
 $scevgep1545 = (($this) + 1056|0);
 $190 = $scevgep1545;
 $191 = $190;
 HEAP32[$191>>2] = 0;
 $192 = (($190) + 4)|0;
 $193 = $192;
 HEAP32[$193>>2] = 0;
 $scevgep1543 = (($this) + 1064|0);
 ;HEAP32[$scevgep1543+0>>2]=0|0;HEAP32[$scevgep1543+4>>2]=0|0;HEAP32[$scevgep1543+8>>2]=0|0;
 $scevgep1541 = (($this) + 1076|0);
 ;HEAP32[$scevgep1541+0>>2]=0|0;HEAP32[$scevgep1541+4>>2]=0|0;HEAP32[$scevgep1541+8>>2]=0|0;
 $scevgep1539 = (($this) + 1088|0);
 $194 = $scevgep1539;
 $195 = $194;
 HEAP32[$195>>2] = 0;
 $196 = (($194) + 4)|0;
 $197 = $196;
 HEAP32[$197>>2] = 0;
 $scevgep1537 = (($this) + 1096|0);
 ;HEAP32[$scevgep1537+0>>2]=0|0;HEAP32[$scevgep1537+4>>2]=0|0;HEAP32[$scevgep1537+8>>2]=0|0;
 $scevgep1535 = (($this) + 1108|0);
 $198 = $scevgep1535;
 $199 = $198;
 HEAP32[$199>>2] = 0;
 $200 = (($198) + 4)|0;
 $201 = $200;
 HEAP32[$201>>2] = 0;
 $scevgep1533 = (($this) + 1116|0);
 $202 = $scevgep1533;
 $203 = $202;
 HEAP32[$203>>2] = 0;
 $204 = (($202) + 4)|0;
 $205 = $204;
 HEAP32[$205>>2] = 0;
 $scevgep1531 = (($this) + 1124|0);
 ;HEAP32[$scevgep1531+0>>2]=0|0;HEAP32[$scevgep1531+4>>2]=0|0;HEAP32[$scevgep1531+8>>2]=0|0;
 $scevgep1529 = (($this) + 1136|0);
 $206 = $scevgep1529;
 $207 = $206;
 HEAP32[$207>>2] = 0;
 $208 = (($206) + 4)|0;
 $209 = $208;
 HEAP32[$209>>2] = 0;
 $scevgep1527 = (($this) + 1144|0);
 ;HEAP32[$scevgep1527+0>>2]=0|0;HEAP32[$scevgep1527+4>>2]=0|0;HEAP32[$scevgep1527+8>>2]=0|0;
 $scevgep1525 = (($this) + 1156|0);
 $210 = $scevgep1525;
 $211 = $210;
 HEAP32[$211>>2] = 0;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = 0;
 $scevgep1523 = (($this) + 1164|0);
 ;HEAP32[$scevgep1523+0>>2]=0|0;HEAP32[$scevgep1523+4>>2]=0|0;HEAP32[$scevgep1523+8>>2]=0|0;
 $scevgep1521 = (($this) + 1176|0);
 ;HEAP32[$scevgep1521+0>>2]=0|0;HEAP32[$scevgep1521+4>>2]=0|0;HEAP32[$scevgep1521+8>>2]=0|0;
 $scevgep1519 = (($this) + 1188|0);
 ;HEAP32[$scevgep1519+0>>2]=0|0;HEAP32[$scevgep1519+4>>2]=0|0;HEAP32[$scevgep1519+8>>2]=0|0;
 $scevgep1517 = (($this) + 1200|0);
 ;HEAP32[$scevgep1517+0>>2]=0|0;HEAP32[$scevgep1517+4>>2]=0|0;HEAP32[$scevgep1517+8>>2]=0|0;
 $scevgep1515 = (($this) + 1212|0);
 $214 = $scevgep1515;
 $215 = $214;
 HEAP32[$215>>2] = 0;
 $216 = (($214) + 4)|0;
 $217 = $216;
 HEAP32[$217>>2] = 0;
 $scevgep1513 = (($this) + 1220|0);
 ;HEAP32[$scevgep1513+0>>2]=0|0;HEAP32[$scevgep1513+4>>2]=0|0;HEAP32[$scevgep1513+8>>2]=0|0;
 $scevgep1511 = (($this) + 1232|0);
 $218 = $scevgep1511;
 $219 = $218;
 HEAP32[$219>>2] = 0;
 $220 = (($218) + 4)|0;
 $221 = $220;
 HEAP32[$221>>2] = 0;
 $scevgep1509 = (($this) + 1240|0);
 $222 = $scevgep1509;
 $223 = $222;
 HEAP32[$223>>2] = 0;
 $224 = (($222) + 4)|0;
 $225 = $224;
 HEAP32[$225>>2] = 0;
 $scevgep1507 = (($this) + 1248|0);
 ;HEAP32[$scevgep1507+0>>2]=0|0;HEAP32[$scevgep1507+4>>2]=0|0;HEAP32[$scevgep1507+8>>2]=0|0;
 $scevgep1505 = (($this) + 1260|0);
 ;HEAP32[$scevgep1505+0>>2]=0|0;HEAP32[$scevgep1505+4>>2]=0|0;HEAP32[$scevgep1505+8>>2]=0|0;
 $scevgep1503 = (($this) + 1272|0);
 ;HEAP32[$scevgep1503+0>>2]=0|0;HEAP32[$scevgep1503+4>>2]=0|0;HEAP32[$scevgep1503+8>>2]=0|0;
 $scevgep1501 = (($this) + 1284|0);
 $226 = $scevgep1501;
 $227 = $226;
 HEAP32[$227>>2] = 0;
 $228 = (($226) + 4)|0;
 $229 = $228;
 HEAP32[$229>>2] = 0;
 $scevgep1499 = (($this) + 1292|0);
 ;HEAP32[$scevgep1499+0>>2]=0|0;HEAP32[$scevgep1499+4>>2]=0|0;HEAP32[$scevgep1499+8>>2]=0|0;
 $scevgep1497 = (($this) + 1304|0);
 $230 = $scevgep1497;
 $231 = $230;
 HEAP32[$231>>2] = 0;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = 0;
 $scevgep1495 = (($this) + 1312|0);
 $234 = $scevgep1495;
 $235 = $234;
 HEAP32[$235>>2] = 0;
 $236 = (($234) + 4)|0;
 $237 = $236;
 HEAP32[$237>>2] = 0;
 $scevgep1493 = (($this) + 1320|0);
 ;HEAP32[$scevgep1493+0>>2]=0|0;HEAP32[$scevgep1493+4>>2]=0|0;HEAP32[$scevgep1493+8>>2]=0|0;
 $scevgep1491 = (($this) + 1332|0);
 ;HEAP32[$scevgep1491+0>>2]=0|0;HEAP32[$scevgep1491+4>>2]=0|0;HEAP32[$scevgep1491+8>>2]=0|0;
 $scevgep1489 = (($this) + 1344|0);
 $238 = $scevgep1489;
 $239 = $238;
 HEAP32[$239>>2] = 0;
 $240 = (($238) + 4)|0;
 $241 = $240;
 HEAP32[$241>>2] = 0;
 $scevgep1487 = (($this) + 1352|0);
 ;HEAP32[$scevgep1487+0>>2]=0|0;HEAP32[$scevgep1487+4>>2]=0|0;HEAP32[$scevgep1487+8>>2]=0|0;
 $scevgep1485 = (($this) + 1364|0);
 $242 = $scevgep1485;
 $243 = $242;
 HEAP32[$243>>2] = 0;
 $244 = (($242) + 4)|0;
 $245 = $244;
 HEAP32[$245>>2] = 0;
 $scevgep1483 = (($this) + 1372|0);
 $246 = $scevgep1483;
 $247 = $246;
 HEAP32[$247>>2] = 0;
 $248 = (($246) + 4)|0;
 $249 = $248;
 HEAP32[$249>>2] = 0;
 $scevgep1481 = (($this) + 1380|0);
 ;HEAP32[$scevgep1481+0>>2]=0|0;HEAP32[$scevgep1481+4>>2]=0|0;HEAP32[$scevgep1481+8>>2]=0|0;
 $scevgep1479 = (($this) + 1392|0);
 $250 = $scevgep1479;
 $251 = $250;
 HEAP32[$251>>2] = 0;
 $252 = (($250) + 4)|0;
 $253 = $252;
 HEAP32[$253>>2] = 0;
 $scevgep1477 = (($this) + 1400|0);
 ;HEAP32[$scevgep1477+0>>2]=0|0;HEAP32[$scevgep1477+4>>2]=0|0;HEAP32[$scevgep1477+8>>2]=0|0;
 $scevgep1475 = (($this) + 1412|0);
 $254 = $scevgep1475;
 $255 = $254;
 HEAP32[$255>>2] = 0;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = 0;
 $scevgep1473 = (($this) + 1420|0);
 ;HEAP32[$scevgep1473+0>>2]=0|0;HEAP32[$scevgep1473+4>>2]=0|0;HEAP32[$scevgep1473+8>>2]=0|0;
 $scevgep1471 = (($this) + 1432|0);
 ;HEAP32[$scevgep1471+0>>2]=0|0;HEAP32[$scevgep1471+4>>2]=0|0;HEAP32[$scevgep1471+8>>2]=0|0;
 $scevgep1469 = (($this) + 1444|0);
 ;HEAP32[$scevgep1469+0>>2]=0|0;HEAP32[$scevgep1469+4>>2]=0|0;HEAP32[$scevgep1469+8>>2]=0|0;
 $scevgep1467 = (($this) + 1456|0);
 ;HEAP32[$scevgep1467+0>>2]=0|0;HEAP32[$scevgep1467+4>>2]=0|0;HEAP32[$scevgep1467+8>>2]=0|0;
 $scevgep1465 = (($this) + 1468|0);
 $258 = $scevgep1465;
 $259 = $258;
 HEAP32[$259>>2] = 0;
 $260 = (($258) + 4)|0;
 $261 = $260;
 HEAP32[$261>>2] = 0;
 $scevgep1463 = (($this) + 1476|0);
 ;HEAP32[$scevgep1463+0>>2]=0|0;HEAP32[$scevgep1463+4>>2]=0|0;HEAP32[$scevgep1463+8>>2]=0|0;
 $scevgep1461 = (($this) + 1488|0);
 $262 = $scevgep1461;
 $263 = $262;
 HEAP32[$263>>2] = 0;
 $264 = (($262) + 4)|0;
 $265 = $264;
 HEAP32[$265>>2] = 0;
 $scevgep1459 = (($this) + 1496|0);
 $266 = $scevgep1459;
 $267 = $266;
 HEAP32[$267>>2] = 0;
 $268 = (($266) + 4)|0;
 $269 = $268;
 HEAP32[$269>>2] = 0;
 $scevgep1457 = (($this) + 1504|0);
 ;HEAP32[$scevgep1457+0>>2]=0|0;HEAP32[$scevgep1457+4>>2]=0|0;HEAP32[$scevgep1457+8>>2]=0|0;
 $scevgep1455 = (($this) + 1516|0);
 ;HEAP32[$scevgep1455+0>>2]=0|0;HEAP32[$scevgep1455+4>>2]=0|0;HEAP32[$scevgep1455+8>>2]=0|0;
 $scevgep1453 = (($this) + 1528|0);
 ;HEAP32[$scevgep1453+0>>2]=0|0;HEAP32[$scevgep1453+4>>2]=0|0;HEAP32[$scevgep1453+8>>2]=0|0;
 $scevgep1451 = (($this) + 1540|0);
 $270 = $scevgep1451;
 $271 = $270;
 HEAP32[$271>>2] = 0;
 $272 = (($270) + 4)|0;
 $273 = $272;
 HEAP32[$273>>2] = 0;
 $scevgep1449 = (($this) + 1548|0);
 ;HEAP32[$scevgep1449+0>>2]=0|0;HEAP32[$scevgep1449+4>>2]=0|0;HEAP32[$scevgep1449+8>>2]=0|0;
 $scevgep1447 = (($this) + 1560|0);
 $274 = $scevgep1447;
 $275 = $274;
 HEAP32[$275>>2] = 0;
 $276 = (($274) + 4)|0;
 $277 = $276;
 HEAP32[$277>>2] = 0;
 $scevgep1445 = (($this) + 1568|0);
 $278 = $scevgep1445;
 $279 = $278;
 HEAP32[$279>>2] = 0;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = 0;
 $scevgep1443 = (($this) + 1576|0);
 ;HEAP32[$scevgep1443+0>>2]=0|0;HEAP32[$scevgep1443+4>>2]=0|0;HEAP32[$scevgep1443+8>>2]=0|0;
 $scevgep1441 = (($this) + 1588|0);
 ;HEAP32[$scevgep1441+0>>2]=0|0;HEAP32[$scevgep1441+4>>2]=0|0;HEAP32[$scevgep1441+8>>2]=0|0;
 $scevgep1439 = (($this) + 1600|0);
 $282 = $scevgep1439;
 $283 = $282;
 HEAP32[$283>>2] = 0;
 $284 = (($282) + 4)|0;
 $285 = $284;
 HEAP32[$285>>2] = 0;
 $scevgep1437 = (($this) + 1608|0);
 ;HEAP32[$scevgep1437+0>>2]=0|0;HEAP32[$scevgep1437+4>>2]=0|0;HEAP32[$scevgep1437+8>>2]=0|0;
 $scevgep1435 = (($this) + 1620|0);
 $286 = $scevgep1435;
 $287 = $286;
 HEAP32[$287>>2] = 0;
 $288 = (($286) + 4)|0;
 $289 = $288;
 HEAP32[$289>>2] = 0;
 $scevgep1433 = (($this) + 1628|0);
 $290 = $scevgep1433;
 $291 = $290;
 HEAP32[$291>>2] = 0;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = 0;
 $scevgep1431 = (($this) + 1636|0);
 ;HEAP32[$scevgep1431+0>>2]=0|0;HEAP32[$scevgep1431+4>>2]=0|0;HEAP32[$scevgep1431+8>>2]=0|0;
 $scevgep1429 = (($this) + 1648|0);
 $294 = $scevgep1429;
 $295 = $294;
 HEAP32[$295>>2] = 0;
 $296 = (($294) + 4)|0;
 $297 = $296;
 HEAP32[$297>>2] = 0;
 $scevgep1427 = (($this) + 1656|0);
 ;HEAP32[$scevgep1427+0>>2]=0|0;HEAP32[$scevgep1427+4>>2]=0|0;HEAP32[$scevgep1427+8>>2]=0|0;
 $scevgep1425 = (($this) + 1668|0);
 $298 = $scevgep1425;
 $299 = $298;
 HEAP32[$299>>2] = 0;
 $300 = (($298) + 4)|0;
 $301 = $300;
 HEAP32[$301>>2] = 0;
 $scevgep1423 = (($this) + 1676|0);
 ;HEAP32[$scevgep1423+0>>2]=0|0;HEAP32[$scevgep1423+4>>2]=0|0;HEAP32[$scevgep1423+8>>2]=0|0;
 $scevgep1421 = (($this) + 1688|0);
 ;HEAP32[$scevgep1421+0>>2]=0|0;HEAP32[$scevgep1421+4>>2]=0|0;HEAP32[$scevgep1421+8>>2]=0|0;
 $scevgep1419 = (($this) + 1700|0);
 ;HEAP32[$scevgep1419+0>>2]=0|0;HEAP32[$scevgep1419+4>>2]=0|0;HEAP32[$scevgep1419+8>>2]=0|0;
 $scevgep1417 = (($this) + 1712|0);
 ;HEAP32[$scevgep1417+0>>2]=0|0;HEAP32[$scevgep1417+4>>2]=0|0;HEAP32[$scevgep1417+8>>2]=0|0;
 $scevgep1415 = (($this) + 1724|0);
 $302 = $scevgep1415;
 $303 = $302;
 HEAP32[$303>>2] = 0;
 $304 = (($302) + 4)|0;
 $305 = $304;
 HEAP32[$305>>2] = 0;
 $scevgep1413 = (($this) + 1732|0);
 ;HEAP32[$scevgep1413+0>>2]=0|0;HEAP32[$scevgep1413+4>>2]=0|0;HEAP32[$scevgep1413+8>>2]=0|0;
 $scevgep1411 = (($this) + 1744|0);
 $306 = $scevgep1411;
 $307 = $306;
 HEAP32[$307>>2] = 0;
 $308 = (($306) + 4)|0;
 $309 = $308;
 HEAP32[$309>>2] = 0;
 $scevgep1409 = (($this) + 1752|0);
 $310 = $scevgep1409;
 $311 = $310;
 HEAP32[$311>>2] = 0;
 $312 = (($310) + 4)|0;
 $313 = $312;
 HEAP32[$313>>2] = 0;
 $scevgep1407 = (($this) + 1760|0);
 ;HEAP32[$scevgep1407+0>>2]=0|0;HEAP32[$scevgep1407+4>>2]=0|0;HEAP32[$scevgep1407+8>>2]=0|0;
 $scevgep1405 = (($this) + 1772|0);
 ;HEAP32[$scevgep1405+0>>2]=0|0;HEAP32[$scevgep1405+4>>2]=0|0;HEAP32[$scevgep1405+8>>2]=0|0;
 $scevgep1403 = (($this) + 1784|0);
 ;HEAP32[$scevgep1403+0>>2]=0|0;HEAP32[$scevgep1403+4>>2]=0|0;HEAP32[$scevgep1403+8>>2]=0|0;
 $scevgep1401 = (($this) + 1796|0);
 $314 = $scevgep1401;
 $315 = $314;
 HEAP32[$315>>2] = 0;
 $316 = (($314) + 4)|0;
 $317 = $316;
 HEAP32[$317>>2] = 0;
 $scevgep1399 = (($this) + 1804|0);
 ;HEAP32[$scevgep1399+0>>2]=0|0;HEAP32[$scevgep1399+4>>2]=0|0;HEAP32[$scevgep1399+8>>2]=0|0;
 $scevgep1397 = (($this) + 1816|0);
 $318 = $scevgep1397;
 $319 = $318;
 HEAP32[$319>>2] = 0;
 $320 = (($318) + 4)|0;
 $321 = $320;
 HEAP32[$321>>2] = 0;
 $scevgep1395 = (($this) + 1824|0);
 $322 = $scevgep1395;
 $323 = $322;
 HEAP32[$323>>2] = 0;
 $324 = (($322) + 4)|0;
 $325 = $324;
 HEAP32[$325>>2] = 0;
 $scevgep1393 = (($this) + 1832|0);
 ;HEAP32[$scevgep1393+0>>2]=0|0;HEAP32[$scevgep1393+4>>2]=0|0;HEAP32[$scevgep1393+8>>2]=0|0;
 $scevgep1391 = (($this) + 1844|0);
 ;HEAP32[$scevgep1391+0>>2]=0|0;HEAP32[$scevgep1391+4>>2]=0|0;HEAP32[$scevgep1391+8>>2]=0|0;
 $scevgep1389 = (($this) + 1856|0);
 $326 = $scevgep1389;
 $327 = $326;
 HEAP32[$327>>2] = 0;
 $328 = (($326) + 4)|0;
 $329 = $328;
 HEAP32[$329>>2] = 0;
 $scevgep1387 = (($this) + 1864|0);
 ;HEAP32[$scevgep1387+0>>2]=0|0;HEAP32[$scevgep1387+4>>2]=0|0;HEAP32[$scevgep1387+8>>2]=0|0;
 $scevgep1385 = (($this) + 1876|0);
 $330 = $scevgep1385;
 $331 = $330;
 HEAP32[$331>>2] = 0;
 $332 = (($330) + 4)|0;
 $333 = $332;
 HEAP32[$333>>2] = 0;
 $scevgep1383 = (($this) + 1884|0);
 $334 = $scevgep1383;
 $335 = $334;
 HEAP32[$335>>2] = 0;
 $336 = (($334) + 4)|0;
 $337 = $336;
 HEAP32[$337>>2] = 0;
 $scevgep1381 = (($this) + 1892|0);
 ;HEAP32[$scevgep1381+0>>2]=0|0;HEAP32[$scevgep1381+4>>2]=0|0;HEAP32[$scevgep1381+8>>2]=0|0;
 $scevgep1379 = (($this) + 1904|0);
 $338 = $scevgep1379;
 $339 = $338;
 HEAP32[$339>>2] = 0;
 $340 = (($338) + 4)|0;
 $341 = $340;
 HEAP32[$341>>2] = 0;
 $scevgep1377 = (($this) + 1912|0);
 ;HEAP32[$scevgep1377+0>>2]=0|0;HEAP32[$scevgep1377+4>>2]=0|0;HEAP32[$scevgep1377+8>>2]=0|0;
 $scevgep1375 = (($this) + 1924|0);
 $342 = $scevgep1375;
 $343 = $342;
 HEAP32[$343>>2] = 0;
 $344 = (($342) + 4)|0;
 $345 = $344;
 HEAP32[$345>>2] = 0;
 $scevgep1373 = (($this) + 1932|0);
 ;HEAP32[$scevgep1373+0>>2]=0|0;HEAP32[$scevgep1373+4>>2]=0|0;HEAP32[$scevgep1373+8>>2]=0|0;
 $scevgep1371 = (($this) + 1944|0);
 ;HEAP32[$scevgep1371+0>>2]=0|0;HEAP32[$scevgep1371+4>>2]=0|0;HEAP32[$scevgep1371+8>>2]=0|0;
 $scevgep1369 = (($this) + 1956|0);
 ;HEAP32[$scevgep1369+0>>2]=0|0;HEAP32[$scevgep1369+4>>2]=0|0;HEAP32[$scevgep1369+8>>2]=0|0;
 $scevgep1367 = (($this) + 1968|0);
 ;HEAP32[$scevgep1367+0>>2]=0|0;HEAP32[$scevgep1367+4>>2]=0|0;HEAP32[$scevgep1367+8>>2]=0|0;
 $scevgep1365 = (($this) + 1980|0);
 $346 = $scevgep1365;
 $347 = $346;
 HEAP32[$347>>2] = 0;
 $348 = (($346) + 4)|0;
 $349 = $348;
 HEAP32[$349>>2] = 0;
 $scevgep1363 = (($this) + 1988|0);
 ;HEAP32[$scevgep1363+0>>2]=0|0;HEAP32[$scevgep1363+4>>2]=0|0;HEAP32[$scevgep1363+8>>2]=0|0;
 $scevgep1361 = (($this) + 2000|0);
 $350 = $scevgep1361;
 $351 = $350;
 HEAP32[$351>>2] = 0;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = 0;
 $scevgep1359 = (($this) + 2008|0);
 $354 = $scevgep1359;
 $355 = $354;
 HEAP32[$355>>2] = 0;
 $356 = (($354) + 4)|0;
 $357 = $356;
 HEAP32[$357>>2] = 0;
 $scevgep1357 = (($this) + 2016|0);
 ;HEAP32[$scevgep1357+0>>2]=0|0;HEAP32[$scevgep1357+4>>2]=0|0;HEAP32[$scevgep1357+8>>2]=0|0;
 $scevgep1355 = (($this) + 2028|0);
 ;HEAP32[$scevgep1355+0>>2]=0|0;HEAP32[$scevgep1355+4>>2]=0|0;HEAP32[$scevgep1355+8>>2]=0|0;
 $scevgep1353 = (($this) + 2040|0);
 ;HEAP32[$scevgep1353+0>>2]=0|0;HEAP32[$scevgep1353+4>>2]=0|0;HEAP32[$scevgep1353+8>>2]=0|0;
 $scevgep1351 = (($this) + 2052|0);
 $358 = $scevgep1351;
 $359 = $358;
 HEAP32[$359>>2] = 0;
 $360 = (($358) + 4)|0;
 $361 = $360;
 HEAP32[$361>>2] = 0;
 $scevgep1349 = (($this) + 2060|0);
 ;HEAP32[$scevgep1349+0>>2]=0|0;HEAP32[$scevgep1349+4>>2]=0|0;HEAP32[$scevgep1349+8>>2]=0|0;
 $scevgep1347 = (($this) + 2072|0);
 $362 = $scevgep1347;
 $363 = $362;
 HEAP32[$363>>2] = 0;
 $364 = (($362) + 4)|0;
 $365 = $364;
 HEAP32[$365>>2] = 0;
 $scevgep1345 = (($this) + 2080|0);
 $366 = $scevgep1345;
 $367 = $366;
 HEAP32[$367>>2] = 0;
 $368 = (($366) + 4)|0;
 $369 = $368;
 HEAP32[$369>>2] = 0;
 $scevgep1343 = (($this) + 2088|0);
 ;HEAP32[$scevgep1343+0>>2]=0|0;HEAP32[$scevgep1343+4>>2]=0|0;HEAP32[$scevgep1343+8>>2]=0|0;
 $scevgep1341 = (($this) + 2100|0);
 ;HEAP32[$scevgep1341+0>>2]=0|0;HEAP32[$scevgep1341+4>>2]=0|0;HEAP32[$scevgep1341+8>>2]=0|0;
 $scevgep1339 = (($this) + 2112|0);
 $370 = $scevgep1339;
 $371 = $370;
 HEAP32[$371>>2] = 0;
 $372 = (($370) + 4)|0;
 $373 = $372;
 HEAP32[$373>>2] = 0;
 $scevgep1337 = (($this) + 2120|0);
 ;HEAP32[$scevgep1337+0>>2]=0|0;HEAP32[$scevgep1337+4>>2]=0|0;HEAP32[$scevgep1337+8>>2]=0|0;
 $scevgep1335 = (($this) + 2132|0);
 $374 = $scevgep1335;
 $375 = $374;
 HEAP32[$375>>2] = 0;
 $376 = (($374) + 4)|0;
 $377 = $376;
 HEAP32[$377>>2] = 0;
 $scevgep1333 = (($this) + 2140|0);
 $378 = $scevgep1333;
 $379 = $378;
 HEAP32[$379>>2] = 0;
 $380 = (($378) + 4)|0;
 $381 = $380;
 HEAP32[$381>>2] = 0;
 $scevgep1331 = (($this) + 2148|0);
 ;HEAP32[$scevgep1331+0>>2]=0|0;HEAP32[$scevgep1331+4>>2]=0|0;HEAP32[$scevgep1331+8>>2]=0|0;
 $scevgep1329 = (($this) + 2160|0);
 $382 = $scevgep1329;
 $383 = $382;
 HEAP32[$383>>2] = 0;
 $384 = (($382) + 4)|0;
 $385 = $384;
 HEAP32[$385>>2] = 0;
 $scevgep1327 = (($this) + 2168|0);
 ;HEAP32[$scevgep1327+0>>2]=0|0;HEAP32[$scevgep1327+4>>2]=0|0;HEAP32[$scevgep1327+8>>2]=0|0;
 $scevgep1325 = (($this) + 2180|0);
 $386 = $scevgep1325;
 $387 = $386;
 HEAP32[$387>>2] = 0;
 $388 = (($386) + 4)|0;
 $389 = $388;
 HEAP32[$389>>2] = 0;
 $scevgep1323 = (($this) + 2188|0);
 ;HEAP32[$scevgep1323+0>>2]=0|0;HEAP32[$scevgep1323+4>>2]=0|0;HEAP32[$scevgep1323+8>>2]=0|0;
 $scevgep1321 = (($this) + 2200|0);
 ;HEAP32[$scevgep1321+0>>2]=0|0;HEAP32[$scevgep1321+4>>2]=0|0;HEAP32[$scevgep1321+8>>2]=0|0;
 $scevgep1319 = (($this) + 2212|0);
 ;HEAP32[$scevgep1319+0>>2]=0|0;HEAP32[$scevgep1319+4>>2]=0|0;HEAP32[$scevgep1319+8>>2]=0|0;
 $scevgep1317 = (($this) + 2224|0);
 ;HEAP32[$scevgep1317+0>>2]=0|0;HEAP32[$scevgep1317+4>>2]=0|0;HEAP32[$scevgep1317+8>>2]=0|0;
 $scevgep1315 = (($this) + 2236|0);
 $390 = $scevgep1315;
 $391 = $390;
 HEAP32[$391>>2] = 0;
 $392 = (($390) + 4)|0;
 $393 = $392;
 HEAP32[$393>>2] = 0;
 $scevgep1313 = (($this) + 2244|0);
 ;HEAP32[$scevgep1313+0>>2]=0|0;HEAP32[$scevgep1313+4>>2]=0|0;HEAP32[$scevgep1313+8>>2]=0|0;
 $scevgep1311 = (($this) + 2256|0);
 $394 = $scevgep1311;
 $395 = $394;
 HEAP32[$395>>2] = 0;
 $396 = (($394) + 4)|0;
 $397 = $396;
 HEAP32[$397>>2] = 0;
 $scevgep1309 = (($this) + 2264|0);
 $398 = $scevgep1309;
 $399 = $398;
 HEAP32[$399>>2] = 0;
 $400 = (($398) + 4)|0;
 $401 = $400;
 HEAP32[$401>>2] = 0;
 $scevgep1307 = (($this) + 2272|0);
 ;HEAP32[$scevgep1307+0>>2]=0|0;HEAP32[$scevgep1307+4>>2]=0|0;HEAP32[$scevgep1307+8>>2]=0|0;
 $scevgep1305 = (($this) + 2284|0);
 ;HEAP32[$scevgep1305+0>>2]=0|0;HEAP32[$scevgep1305+4>>2]=0|0;HEAP32[$scevgep1305+8>>2]=0|0;
 $scevgep1303 = (($this) + 2296|0);
 ;HEAP32[$scevgep1303+0>>2]=0|0;HEAP32[$scevgep1303+4>>2]=0|0;HEAP32[$scevgep1303+8>>2]=0|0;
 $scevgep1301 = (($this) + 2308|0);
 $402 = $scevgep1301;
 $403 = $402;
 HEAP32[$403>>2] = 0;
 $404 = (($402) + 4)|0;
 $405 = $404;
 HEAP32[$405>>2] = 0;
 $scevgep1299 = (($this) + 2316|0);
 ;HEAP32[$scevgep1299+0>>2]=0|0;HEAP32[$scevgep1299+4>>2]=0|0;HEAP32[$scevgep1299+8>>2]=0|0;
 $scevgep1297 = (($this) + 2328|0);
 $406 = $scevgep1297;
 $407 = $406;
 HEAP32[$407>>2] = 0;
 $408 = (($406) + 4)|0;
 $409 = $408;
 HEAP32[$409>>2] = 0;
 $scevgep1295 = (($this) + 2336|0);
 $410 = $scevgep1295;
 $411 = $410;
 HEAP32[$411>>2] = 0;
 $412 = (($410) + 4)|0;
 $413 = $412;
 HEAP32[$413>>2] = 0;
 $scevgep1293 = (($this) + 2344|0);
 ;HEAP32[$scevgep1293+0>>2]=0|0;HEAP32[$scevgep1293+4>>2]=0|0;HEAP32[$scevgep1293+8>>2]=0|0;
 $scevgep1291 = (($this) + 2356|0);
 ;HEAP32[$scevgep1291+0>>2]=0|0;HEAP32[$scevgep1291+4>>2]=0|0;HEAP32[$scevgep1291+8>>2]=0|0;
 $scevgep1289 = (($this) + 2368|0);
 $414 = $scevgep1289;
 $415 = $414;
 HEAP32[$415>>2] = 0;
 $416 = (($414) + 4)|0;
 $417 = $416;
 HEAP32[$417>>2] = 0;
 $scevgep1287 = (($this) + 2376|0);
 ;HEAP32[$scevgep1287+0>>2]=0|0;HEAP32[$scevgep1287+4>>2]=0|0;HEAP32[$scevgep1287+8>>2]=0|0;
 $scevgep1285 = (($this) + 2388|0);
 $418 = $scevgep1285;
 $419 = $418;
 HEAP32[$419>>2] = 0;
 $420 = (($418) + 4)|0;
 $421 = $420;
 HEAP32[$421>>2] = 0;
 $scevgep1283 = (($this) + 2396|0);
 $422 = $scevgep1283;
 $423 = $422;
 HEAP32[$423>>2] = 0;
 $424 = (($422) + 4)|0;
 $425 = $424;
 HEAP32[$425>>2] = 0;
 $scevgep1281 = (($this) + 2404|0);
 ;HEAP32[$scevgep1281+0>>2]=0|0;HEAP32[$scevgep1281+4>>2]=0|0;HEAP32[$scevgep1281+8>>2]=0|0;
 $scevgep1279 = (($this) + 2416|0);
 $426 = $scevgep1279;
 $427 = $426;
 HEAP32[$427>>2] = 0;
 $428 = (($426) + 4)|0;
 $429 = $428;
 HEAP32[$429>>2] = 0;
 $scevgep1277 = (($this) + 2424|0);
 ;HEAP32[$scevgep1277+0>>2]=0|0;HEAP32[$scevgep1277+4>>2]=0|0;HEAP32[$scevgep1277+8>>2]=0|0;
 $scevgep1275 = (($this) + 2436|0);
 $430 = $scevgep1275;
 $431 = $430;
 HEAP32[$431>>2] = 0;
 $432 = (($430) + 4)|0;
 $433 = $432;
 HEAP32[$433>>2] = 0;
 $scevgep1273 = (($this) + 2444|0);
 ;HEAP32[$scevgep1273+0>>2]=0|0;HEAP32[$scevgep1273+4>>2]=0|0;HEAP32[$scevgep1273+8>>2]=0|0;
 $scevgep1271 = (($this) + 2456|0);
 ;HEAP32[$scevgep1271+0>>2]=0|0;HEAP32[$scevgep1271+4>>2]=0|0;HEAP32[$scevgep1271+8>>2]=0|0;
 $scevgep1269 = (($this) + 2468|0);
 ;HEAP32[$scevgep1269+0>>2]=0|0;HEAP32[$scevgep1269+4>>2]=0|0;HEAP32[$scevgep1269+8>>2]=0|0;
 $scevgep1267 = (($this) + 2480|0);
 ;HEAP32[$scevgep1267+0>>2]=0|0;HEAP32[$scevgep1267+4>>2]=0|0;HEAP32[$scevgep1267+8>>2]=0|0;
 $scevgep1265 = (($this) + 2492|0);
 $434 = $scevgep1265;
 $435 = $434;
 HEAP32[$435>>2] = 0;
 $436 = (($434) + 4)|0;
 $437 = $436;
 HEAP32[$437>>2] = 0;
 $scevgep1263 = (($this) + 2500|0);
 ;HEAP32[$scevgep1263+0>>2]=0|0;HEAP32[$scevgep1263+4>>2]=0|0;HEAP32[$scevgep1263+8>>2]=0|0;
 $scevgep1261 = (($this) + 2512|0);
 $438 = $scevgep1261;
 $439 = $438;
 HEAP32[$439>>2] = 0;
 $440 = (($438) + 4)|0;
 $441 = $440;
 HEAP32[$441>>2] = 0;
 $scevgep1259 = (($this) + 2520|0);
 $442 = $scevgep1259;
 $443 = $442;
 HEAP32[$443>>2] = 0;
 $444 = (($442) + 4)|0;
 $445 = $444;
 HEAP32[$445>>2] = 0;
 $scevgep1257 = (($this) + 2528|0);
 ;HEAP32[$scevgep1257+0>>2]=0|0;HEAP32[$scevgep1257+4>>2]=0|0;HEAP32[$scevgep1257+8>>2]=0|0;
 $scevgep1255 = (($this) + 2540|0);
 ;HEAP32[$scevgep1255+0>>2]=0|0;HEAP32[$scevgep1255+4>>2]=0|0;HEAP32[$scevgep1255+8>>2]=0|0;
 $scevgep1253 = (($this) + 2552|0);
 ;HEAP32[$scevgep1253+0>>2]=0|0;HEAP32[$scevgep1253+4>>2]=0|0;HEAP32[$scevgep1253+8>>2]=0|0;
 $scevgep1251 = (($this) + 2564|0);
 $446 = $scevgep1251;
 $447 = $446;
 HEAP32[$447>>2] = 0;
 $448 = (($446) + 4)|0;
 $449 = $448;
 HEAP32[$449>>2] = 0;
 $scevgep1249 = (($this) + 2572|0);
 ;HEAP32[$scevgep1249+0>>2]=0|0;HEAP32[$scevgep1249+4>>2]=0|0;HEAP32[$scevgep1249+8>>2]=0|0;
 $scevgep1247 = (($this) + 2584|0);
 $450 = $scevgep1247;
 $451 = $450;
 HEAP32[$451>>2] = 0;
 $452 = (($450) + 4)|0;
 $453 = $452;
 HEAP32[$453>>2] = 0;
 $scevgep1245 = (($this) + 2592|0);
 $454 = $scevgep1245;
 $455 = $454;
 HEAP32[$455>>2] = 0;
 $456 = (($454) + 4)|0;
 $457 = $456;
 HEAP32[$457>>2] = 0;
 $scevgep1243 = (($this) + 2600|0);
 ;HEAP32[$scevgep1243+0>>2]=0|0;HEAP32[$scevgep1243+4>>2]=0|0;HEAP32[$scevgep1243+8>>2]=0|0;
 $scevgep1241 = (($this) + 2612|0);
 ;HEAP32[$scevgep1241+0>>2]=0|0;HEAP32[$scevgep1241+4>>2]=0|0;HEAP32[$scevgep1241+8>>2]=0|0;
 $scevgep1239 = (($this) + 2624|0);
 $458 = $scevgep1239;
 $459 = $458;
 HEAP32[$459>>2] = 0;
 $460 = (($458) + 4)|0;
 $461 = $460;
 HEAP32[$461>>2] = 0;
 $scevgep1237 = (($this) + 2632|0);
 ;HEAP32[$scevgep1237+0>>2]=0|0;HEAP32[$scevgep1237+4>>2]=0|0;HEAP32[$scevgep1237+8>>2]=0|0;
 $scevgep1235 = (($this) + 2644|0);
 $462 = $scevgep1235;
 $463 = $462;
 HEAP32[$463>>2] = 0;
 $464 = (($462) + 4)|0;
 $465 = $464;
 HEAP32[$465>>2] = 0;
 $scevgep1233 = (($this) + 2652|0);
 $466 = $scevgep1233;
 $467 = $466;
 HEAP32[$467>>2] = 0;
 $468 = (($466) + 4)|0;
 $469 = $468;
 HEAP32[$469>>2] = 0;
 $scevgep1231 = (($this) + 2660|0);
 ;HEAP32[$scevgep1231+0>>2]=0|0;HEAP32[$scevgep1231+4>>2]=0|0;HEAP32[$scevgep1231+8>>2]=0|0;
 $scevgep1229 = (($this) + 2672|0);
 $470 = $scevgep1229;
 $471 = $470;
 HEAP32[$471>>2] = 0;
 $472 = (($470) + 4)|0;
 $473 = $472;
 HEAP32[$473>>2] = 0;
 $scevgep1227 = (($this) + 2680|0);
 ;HEAP32[$scevgep1227+0>>2]=0|0;HEAP32[$scevgep1227+4>>2]=0|0;HEAP32[$scevgep1227+8>>2]=0|0;
 $scevgep1225 = (($this) + 2692|0);
 $474 = $scevgep1225;
 $475 = $474;
 HEAP32[$475>>2] = 0;
 $476 = (($474) + 4)|0;
 $477 = $476;
 HEAP32[$477>>2] = 0;
 $scevgep1223 = (($this) + 2700|0);
 ;HEAP32[$scevgep1223+0>>2]=0|0;HEAP32[$scevgep1223+4>>2]=0|0;HEAP32[$scevgep1223+8>>2]=0|0;
 $scevgep1221 = (($this) + 2712|0);
 ;HEAP32[$scevgep1221+0>>2]=0|0;HEAP32[$scevgep1221+4>>2]=0|0;HEAP32[$scevgep1221+8>>2]=0|0;
 $scevgep1219 = (($this) + 2724|0);
 ;HEAP32[$scevgep1219+0>>2]=0|0;HEAP32[$scevgep1219+4>>2]=0|0;HEAP32[$scevgep1219+8>>2]=0|0;
 $scevgep1217 = (($this) + 2736|0);
 ;HEAP32[$scevgep1217+0>>2]=0|0;HEAP32[$scevgep1217+4>>2]=0|0;HEAP32[$scevgep1217+8>>2]=0|0;
 $scevgep1215 = (($this) + 2748|0);
 $478 = $scevgep1215;
 $479 = $478;
 HEAP32[$479>>2] = 0;
 $480 = (($478) + 4)|0;
 $481 = $480;
 HEAP32[$481>>2] = 0;
 $scevgep1213 = (($this) + 2756|0);
 ;HEAP32[$scevgep1213+0>>2]=0|0;HEAP32[$scevgep1213+4>>2]=0|0;HEAP32[$scevgep1213+8>>2]=0|0;
 $scevgep1211 = (($this) + 2768|0);
 $482 = $scevgep1211;
 $483 = $482;
 HEAP32[$483>>2] = 0;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = 0;
 $scevgep1209 = (($this) + 2776|0);
 $486 = $scevgep1209;
 $487 = $486;
 HEAP32[$487>>2] = 0;
 $488 = (($486) + 4)|0;
 $489 = $488;
 HEAP32[$489>>2] = 0;
 $scevgep1207 = (($this) + 2784|0);
 ;HEAP32[$scevgep1207+0>>2]=0|0;HEAP32[$scevgep1207+4>>2]=0|0;HEAP32[$scevgep1207+8>>2]=0|0;
 $scevgep1205 = (($this) + 2796|0);
 ;HEAP32[$scevgep1205+0>>2]=0|0;HEAP32[$scevgep1205+4>>2]=0|0;HEAP32[$scevgep1205+8>>2]=0|0;
 $scevgep1203 = (($this) + 2808|0);
 ;HEAP32[$scevgep1203+0>>2]=0|0;HEAP32[$scevgep1203+4>>2]=0|0;HEAP32[$scevgep1203+8>>2]=0|0;
 $scevgep1201 = (($this) + 2820|0);
 $490 = $scevgep1201;
 $491 = $490;
 HEAP32[$491>>2] = 0;
 $492 = (($490) + 4)|0;
 $493 = $492;
 HEAP32[$493>>2] = 0;
 $scevgep1199 = (($this) + 2828|0);
 ;HEAP32[$scevgep1199+0>>2]=0|0;HEAP32[$scevgep1199+4>>2]=0|0;HEAP32[$scevgep1199+8>>2]=0|0;
 $scevgep1197 = (($this) + 2840|0);
 $494 = $scevgep1197;
 $495 = $494;
 HEAP32[$495>>2] = 0;
 $496 = (($494) + 4)|0;
 $497 = $496;
 HEAP32[$497>>2] = 0;
 $scevgep1195 = (($this) + 2848|0);
 $498 = $scevgep1195;
 $499 = $498;
 HEAP32[$499>>2] = 0;
 $500 = (($498) + 4)|0;
 $501 = $500;
 HEAP32[$501>>2] = 0;
 $scevgep1193 = (($this) + 2856|0);
 ;HEAP32[$scevgep1193+0>>2]=0|0;HEAP32[$scevgep1193+4>>2]=0|0;HEAP32[$scevgep1193+8>>2]=0|0;
 $scevgep1191 = (($this) + 2868|0);
 ;HEAP32[$scevgep1191+0>>2]=0|0;HEAP32[$scevgep1191+4>>2]=0|0;HEAP32[$scevgep1191+8>>2]=0|0;
 $scevgep1189 = (($this) + 2880|0);
 $502 = $scevgep1189;
 $503 = $502;
 HEAP32[$503>>2] = 0;
 $504 = (($502) + 4)|0;
 $505 = $504;
 HEAP32[$505>>2] = 0;
 $scevgep1187 = (($this) + 2888|0);
 ;HEAP32[$scevgep1187+0>>2]=0|0;HEAP32[$scevgep1187+4>>2]=0|0;HEAP32[$scevgep1187+8>>2]=0|0;
 $scevgep1185 = (($this) + 2900|0);
 $506 = $scevgep1185;
 $507 = $506;
 HEAP32[$507>>2] = 0;
 $508 = (($506) + 4)|0;
 $509 = $508;
 HEAP32[$509>>2] = 0;
 $scevgep1183 = (($this) + 2908|0);
 $510 = $scevgep1183;
 $511 = $510;
 HEAP32[$511>>2] = 0;
 $512 = (($510) + 4)|0;
 $513 = $512;
 HEAP32[$513>>2] = 0;
 $scevgep1181 = (($this) + 2916|0);
 ;HEAP32[$scevgep1181+0>>2]=0|0;HEAP32[$scevgep1181+4>>2]=0|0;HEAP32[$scevgep1181+8>>2]=0|0;
 $scevgep1179 = (($this) + 2928|0);
 $514 = $scevgep1179;
 $515 = $514;
 HEAP32[$515>>2] = 0;
 $516 = (($514) + 4)|0;
 $517 = $516;
 HEAP32[$517>>2] = 0;
 $scevgep1177 = (($this) + 2936|0);
 ;HEAP32[$scevgep1177+0>>2]=0|0;HEAP32[$scevgep1177+4>>2]=0|0;HEAP32[$scevgep1177+8>>2]=0|0;
 $scevgep1175 = (($this) + 2948|0);
 $518 = $scevgep1175;
 $519 = $518;
 HEAP32[$519>>2] = 0;
 $520 = (($518) + 4)|0;
 $521 = $520;
 HEAP32[$521>>2] = 0;
 $scevgep1173 = (($this) + 2956|0);
 ;HEAP32[$scevgep1173+0>>2]=0|0;HEAP32[$scevgep1173+4>>2]=0|0;HEAP32[$scevgep1173+8>>2]=0|0;
 $scevgep1171 = (($this) + 2968|0);
 ;HEAP32[$scevgep1171+0>>2]=0|0;HEAP32[$scevgep1171+4>>2]=0|0;HEAP32[$scevgep1171+8>>2]=0|0;
 $scevgep1169 = (($this) + 2980|0);
 ;HEAP32[$scevgep1169+0>>2]=0|0;HEAP32[$scevgep1169+4>>2]=0|0;HEAP32[$scevgep1169+8>>2]=0|0;
 $scevgep1167 = (($this) + 2992|0);
 ;HEAP32[$scevgep1167+0>>2]=0|0;HEAP32[$scevgep1167+4>>2]=0|0;HEAP32[$scevgep1167+8>>2]=0|0;
 $scevgep1165 = (($this) + 3004|0);
 $522 = $scevgep1165;
 $523 = $522;
 HEAP32[$523>>2] = 0;
 $524 = (($522) + 4)|0;
 $525 = $524;
 HEAP32[$525>>2] = 0;
 $scevgep1163 = (($this) + 3012|0);
 ;HEAP32[$scevgep1163+0>>2]=0|0;HEAP32[$scevgep1163+4>>2]=0|0;HEAP32[$scevgep1163+8>>2]=0|0;
 $scevgep1161 = (($this) + 3024|0);
 $526 = $scevgep1161;
 $527 = $526;
 HEAP32[$527>>2] = 0;
 $528 = (($526) + 4)|0;
 $529 = $528;
 HEAP32[$529>>2] = 0;
 $scevgep1159 = (($this) + 3032|0);
 $530 = $scevgep1159;
 $531 = $530;
 HEAP32[$531>>2] = 0;
 $532 = (($530) + 4)|0;
 $533 = $532;
 HEAP32[$533>>2] = 0;
 $scevgep1157 = (($this) + 3040|0);
 ;HEAP32[$scevgep1157+0>>2]=0|0;HEAP32[$scevgep1157+4>>2]=0|0;HEAP32[$scevgep1157+8>>2]=0|0;
 $scevgep1155 = (($this) + 3052|0);
 ;HEAP32[$scevgep1155+0>>2]=0|0;HEAP32[$scevgep1155+4>>2]=0|0;HEAP32[$scevgep1155+8>>2]=0|0;
 $scevgep1153 = (($this) + 3064|0);
 ;HEAP32[$scevgep1153+0>>2]=0|0;HEAP32[$scevgep1153+4>>2]=0|0;HEAP32[$scevgep1153+8>>2]=0|0;
 $scevgep1151 = (($this) + 3076|0);
 $534 = $scevgep1151;
 $535 = $534;
 HEAP32[$535>>2] = 0;
 $536 = (($534) + 4)|0;
 $537 = $536;
 HEAP32[$537>>2] = 0;
 $scevgep1149 = (($this) + 3084|0);
 ;HEAP32[$scevgep1149+0>>2]=0|0;HEAP32[$scevgep1149+4>>2]=0|0;HEAP32[$scevgep1149+8>>2]=0|0;
 $scevgep1147 = (($this) + 3096|0);
 $538 = $scevgep1147;
 $539 = $538;
 HEAP32[$539>>2] = 0;
 $540 = (($538) + 4)|0;
 $541 = $540;
 HEAP32[$541>>2] = 0;
 $scevgep1145 = (($this) + 3104|0);
 $542 = $scevgep1145;
 $543 = $542;
 HEAP32[$543>>2] = 0;
 $544 = (($542) + 4)|0;
 $545 = $544;
 HEAP32[$545>>2] = 0;
 $scevgep1143 = (($this) + 3112|0);
 ;HEAP32[$scevgep1143+0>>2]=0|0;HEAP32[$scevgep1143+4>>2]=0|0;HEAP32[$scevgep1143+8>>2]=0|0;
 $scevgep1141 = (($this) + 3124|0);
 ;HEAP32[$scevgep1141+0>>2]=0|0;HEAP32[$scevgep1141+4>>2]=0|0;HEAP32[$scevgep1141+8>>2]=0|0;
 $scevgep1139 = (($this) + 3136|0);
 $546 = $scevgep1139;
 $547 = $546;
 HEAP32[$547>>2] = 0;
 $548 = (($546) + 4)|0;
 $549 = $548;
 HEAP32[$549>>2] = 0;
 $scevgep1137 = (($this) + 3144|0);
 ;HEAP32[$scevgep1137+0>>2]=0|0;HEAP32[$scevgep1137+4>>2]=0|0;HEAP32[$scevgep1137+8>>2]=0|0;
 $scevgep1135 = (($this) + 3156|0);
 $550 = $scevgep1135;
 $551 = $550;
 HEAP32[$551>>2] = 0;
 $552 = (($550) + 4)|0;
 $553 = $552;
 HEAP32[$553>>2] = 0;
 $scevgep1133 = (($this) + 3164|0);
 $554 = $scevgep1133;
 $555 = $554;
 HEAP32[$555>>2] = 0;
 $556 = (($554) + 4)|0;
 $557 = $556;
 HEAP32[$557>>2] = 0;
 $scevgep1131 = (($this) + 3172|0);
 ;HEAP32[$scevgep1131+0>>2]=0|0;HEAP32[$scevgep1131+4>>2]=0|0;HEAP32[$scevgep1131+8>>2]=0|0;
 $scevgep1129 = (($this) + 3184|0);
 $558 = $scevgep1129;
 $559 = $558;
 HEAP32[$559>>2] = 0;
 $560 = (($558) + 4)|0;
 $561 = $560;
 HEAP32[$561>>2] = 0;
 $scevgep1127 = (($this) + 3192|0);
 ;HEAP32[$scevgep1127+0>>2]=0|0;HEAP32[$scevgep1127+4>>2]=0|0;HEAP32[$scevgep1127+8>>2]=0|0;
 $scevgep1125 = (($this) + 3204|0);
 $562 = $scevgep1125;
 $563 = $562;
 HEAP32[$563>>2] = 0;
 $564 = (($562) + 4)|0;
 $565 = $564;
 HEAP32[$565>>2] = 0;
 $scevgep1123 = (($this) + 3212|0);
 ;HEAP32[$scevgep1123+0>>2]=0|0;HEAP32[$scevgep1123+4>>2]=0|0;HEAP32[$scevgep1123+8>>2]=0|0;
 $scevgep1121 = (($this) + 3224|0);
 ;HEAP32[$scevgep1121+0>>2]=0|0;HEAP32[$scevgep1121+4>>2]=0|0;HEAP32[$scevgep1121+8>>2]=0|0;
 $scevgep1119 = (($this) + 3236|0);
 ;HEAP32[$scevgep1119+0>>2]=0|0;HEAP32[$scevgep1119+4>>2]=0|0;HEAP32[$scevgep1119+8>>2]=0|0;
 $scevgep1117 = (($this) + 3248|0);
 ;HEAP32[$scevgep1117+0>>2]=0|0;HEAP32[$scevgep1117+4>>2]=0|0;HEAP32[$scevgep1117+8>>2]=0|0;
 $scevgep1115 = (($this) + 3260|0);
 $566 = $scevgep1115;
 $567 = $566;
 HEAP32[$567>>2] = 0;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = 0;
 $scevgep1113 = (($this) + 3268|0);
 ;HEAP32[$scevgep1113+0>>2]=0|0;HEAP32[$scevgep1113+4>>2]=0|0;HEAP32[$scevgep1113+8>>2]=0|0;
 $scevgep1111 = (($this) + 3280|0);
 $570 = $scevgep1111;
 $571 = $570;
 HEAP32[$571>>2] = 0;
 $572 = (($570) + 4)|0;
 $573 = $572;
 HEAP32[$573>>2] = 0;
 $scevgep1109 = (($this) + 3288|0);
 $574 = $scevgep1109;
 $575 = $574;
 HEAP32[$575>>2] = 0;
 $576 = (($574) + 4)|0;
 $577 = $576;
 HEAP32[$577>>2] = 0;
 $scevgep1107 = (($this) + 3296|0);
 ;HEAP32[$scevgep1107+0>>2]=0|0;HEAP32[$scevgep1107+4>>2]=0|0;HEAP32[$scevgep1107+8>>2]=0|0;
 $scevgep1105 = (($this) + 3308|0);
 ;HEAP32[$scevgep1105+0>>2]=0|0;HEAP32[$scevgep1105+4>>2]=0|0;HEAP32[$scevgep1105+8>>2]=0|0;
 $scevgep1103 = (($this) + 3320|0);
 ;HEAP32[$scevgep1103+0>>2]=0|0;HEAP32[$scevgep1103+4>>2]=0|0;HEAP32[$scevgep1103+8>>2]=0|0;
 $scevgep1101 = (($this) + 3332|0);
 $578 = $scevgep1101;
 $579 = $578;
 HEAP32[$579>>2] = 0;
 $580 = (($578) + 4)|0;
 $581 = $580;
 HEAP32[$581>>2] = 0;
 $scevgep1099 = (($this) + 3340|0);
 ;HEAP32[$scevgep1099+0>>2]=0|0;HEAP32[$scevgep1099+4>>2]=0|0;HEAP32[$scevgep1099+8>>2]=0|0;
 $scevgep1097 = (($this) + 3352|0);
 $582 = $scevgep1097;
 $583 = $582;
 HEAP32[$583>>2] = 0;
 $584 = (($582) + 4)|0;
 $585 = $584;
 HEAP32[$585>>2] = 0;
 $scevgep1095 = (($this) + 3360|0);
 $586 = $scevgep1095;
 $587 = $586;
 HEAP32[$587>>2] = 0;
 $588 = (($586) + 4)|0;
 $589 = $588;
 HEAP32[$589>>2] = 0;
 $scevgep1093 = (($this) + 3368|0);
 ;HEAP32[$scevgep1093+0>>2]=0|0;HEAP32[$scevgep1093+4>>2]=0|0;HEAP32[$scevgep1093+8>>2]=0|0;
 $scevgep1091 = (($this) + 3380|0);
 ;HEAP32[$scevgep1091+0>>2]=0|0;HEAP32[$scevgep1091+4>>2]=0|0;HEAP32[$scevgep1091+8>>2]=0|0;
 $scevgep1089 = (($this) + 3392|0);
 $590 = $scevgep1089;
 $591 = $590;
 HEAP32[$591>>2] = 0;
 $592 = (($590) + 4)|0;
 $593 = $592;
 HEAP32[$593>>2] = 0;
 $scevgep1087 = (($this) + 3400|0);
 ;HEAP32[$scevgep1087+0>>2]=0|0;HEAP32[$scevgep1087+4>>2]=0|0;HEAP32[$scevgep1087+8>>2]=0|0;
 $scevgep1085 = (($this) + 3412|0);
 $594 = $scevgep1085;
 $595 = $594;
 HEAP32[$595>>2] = 0;
 $596 = (($594) + 4)|0;
 $597 = $596;
 HEAP32[$597>>2] = 0;
 $scevgep1083 = (($this) + 3420|0);
 $598 = $scevgep1083;
 $599 = $598;
 HEAP32[$599>>2] = 0;
 $600 = (($598) + 4)|0;
 $601 = $600;
 HEAP32[$601>>2] = 0;
 $scevgep1081 = (($this) + 3428|0);
 ;HEAP32[$scevgep1081+0>>2]=0|0;HEAP32[$scevgep1081+4>>2]=0|0;HEAP32[$scevgep1081+8>>2]=0|0;
 $scevgep1079 = (($this) + 3440|0);
 $602 = $scevgep1079;
 $603 = $602;
 HEAP32[$603>>2] = 0;
 $604 = (($602) + 4)|0;
 $605 = $604;
 HEAP32[$605>>2] = 0;
 $scevgep1077 = (($this) + 3448|0);
 ;HEAP32[$scevgep1077+0>>2]=0|0;HEAP32[$scevgep1077+4>>2]=0|0;HEAP32[$scevgep1077+8>>2]=0|0;
 $scevgep1075 = (($this) + 3460|0);
 $606 = $scevgep1075;
 $607 = $606;
 HEAP32[$607>>2] = 0;
 $608 = (($606) + 4)|0;
 $609 = $608;
 HEAP32[$609>>2] = 0;
 $scevgep1073 = (($this) + 3468|0);
 ;HEAP32[$scevgep1073+0>>2]=0|0;HEAP32[$scevgep1073+4>>2]=0|0;HEAP32[$scevgep1073+8>>2]=0|0;
 $scevgep1071 = (($this) + 3480|0);
 ;HEAP32[$scevgep1071+0>>2]=0|0;HEAP32[$scevgep1071+4>>2]=0|0;HEAP32[$scevgep1071+8>>2]=0|0;
 $scevgep1069 = (($this) + 3492|0);
 ;HEAP32[$scevgep1069+0>>2]=0|0;HEAP32[$scevgep1069+4>>2]=0|0;HEAP32[$scevgep1069+8>>2]=0|0;
 $scevgep1067 = (($this) + 3504|0);
 ;HEAP32[$scevgep1067+0>>2]=0|0;HEAP32[$scevgep1067+4>>2]=0|0;HEAP32[$scevgep1067+8>>2]=0|0;
 $scevgep1065 = (($this) + 3516|0);
 $610 = $scevgep1065;
 $611 = $610;
 HEAP32[$611>>2] = 0;
 $612 = (($610) + 4)|0;
 $613 = $612;
 HEAP32[$613>>2] = 0;
 $scevgep1063 = (($this) + 3524|0);
 ;HEAP32[$scevgep1063+0>>2]=0|0;HEAP32[$scevgep1063+4>>2]=0|0;HEAP32[$scevgep1063+8>>2]=0|0;
 $scevgep1061 = (($this) + 3536|0);
 $614 = $scevgep1061;
 $615 = $614;
 HEAP32[$615>>2] = 0;
 $616 = (($614) + 4)|0;
 $617 = $616;
 HEAP32[$617>>2] = 0;
 $scevgep1059 = (($this) + 3544|0);
 $618 = $scevgep1059;
 $619 = $618;
 HEAP32[$619>>2] = 0;
 $620 = (($618) + 4)|0;
 $621 = $620;
 HEAP32[$621>>2] = 0;
 $scevgep1057 = (($this) + 3552|0);
 ;HEAP32[$scevgep1057+0>>2]=0|0;HEAP32[$scevgep1057+4>>2]=0|0;HEAP32[$scevgep1057+8>>2]=0|0;
 $scevgep1055 = (($this) + 3564|0);
 ;HEAP32[$scevgep1055+0>>2]=0|0;HEAP32[$scevgep1055+4>>2]=0|0;HEAP32[$scevgep1055+8>>2]=0|0;
 $scevgep1053 = (($this) + 3576|0);
 ;HEAP32[$scevgep1053+0>>2]=0|0;HEAP32[$scevgep1053+4>>2]=0|0;HEAP32[$scevgep1053+8>>2]=0|0;
 $scevgep1051 = (($this) + 3588|0);
 $622 = $scevgep1051;
 $623 = $622;
 HEAP32[$623>>2] = 0;
 $624 = (($622) + 4)|0;
 $625 = $624;
 HEAP32[$625>>2] = 0;
 $scevgep1049 = (($this) + 3596|0);
 ;HEAP32[$scevgep1049+0>>2]=0|0;HEAP32[$scevgep1049+4>>2]=0|0;HEAP32[$scevgep1049+8>>2]=0|0;
 $scevgep1047 = (($this) + 3608|0);
 $626 = $scevgep1047;
 $627 = $626;
 HEAP32[$627>>2] = 0;
 $628 = (($626) + 4)|0;
 $629 = $628;
 HEAP32[$629>>2] = 0;
 $scevgep1045 = (($this) + 3616|0);
 $630 = $scevgep1045;
 $631 = $630;
 HEAP32[$631>>2] = 0;
 $632 = (($630) + 4)|0;
 $633 = $632;
 HEAP32[$633>>2] = 0;
 $scevgep1043 = (($this) + 3624|0);
 ;HEAP32[$scevgep1043+0>>2]=0|0;HEAP32[$scevgep1043+4>>2]=0|0;HEAP32[$scevgep1043+8>>2]=0|0;
 $scevgep1041 = (($this) + 3636|0);
 ;HEAP32[$scevgep1041+0>>2]=0|0;HEAP32[$scevgep1041+4>>2]=0|0;HEAP32[$scevgep1041+8>>2]=0|0;
 $scevgep1039 = (($this) + 3648|0);
 $634 = $scevgep1039;
 $635 = $634;
 HEAP32[$635>>2] = 0;
 $636 = (($634) + 4)|0;
 $637 = $636;
 HEAP32[$637>>2] = 0;
 $scevgep1037 = (($this) + 3656|0);
 ;HEAP32[$scevgep1037+0>>2]=0|0;HEAP32[$scevgep1037+4>>2]=0|0;HEAP32[$scevgep1037+8>>2]=0|0;
 $scevgep1035 = (($this) + 3668|0);
 $638 = $scevgep1035;
 $639 = $638;
 HEAP32[$639>>2] = 0;
 $640 = (($638) + 4)|0;
 $641 = $640;
 HEAP32[$641>>2] = 0;
 $scevgep1033 = (($this) + 3676|0);
 $642 = $scevgep1033;
 $643 = $642;
 HEAP32[$643>>2] = 0;
 $644 = (($642) + 4)|0;
 $645 = $644;
 HEAP32[$645>>2] = 0;
 $scevgep1031 = (($this) + 3684|0);
 ;HEAP32[$scevgep1031+0>>2]=0|0;HEAP32[$scevgep1031+4>>2]=0|0;HEAP32[$scevgep1031+8>>2]=0|0;
 $scevgep1029 = (($this) + 3696|0);
 $646 = $scevgep1029;
 $647 = $646;
 HEAP32[$647>>2] = 0;
 $648 = (($646) + 4)|0;
 $649 = $648;
 HEAP32[$649>>2] = 0;
 $scevgep1027 = (($this) + 3704|0);
 ;HEAP32[$scevgep1027+0>>2]=0|0;HEAP32[$scevgep1027+4>>2]=0|0;HEAP32[$scevgep1027+8>>2]=0|0;
 $scevgep1025 = (($this) + 3716|0);
 $650 = $scevgep1025;
 $651 = $650;
 HEAP32[$651>>2] = 0;
 $652 = (($650) + 4)|0;
 $653 = $652;
 HEAP32[$653>>2] = 0;
 $scevgep1023 = (($this) + 3724|0);
 ;HEAP32[$scevgep1023+0>>2]=0|0;HEAP32[$scevgep1023+4>>2]=0|0;HEAP32[$scevgep1023+8>>2]=0|0;
 $scevgep1021 = (($this) + 3736|0);
 ;HEAP32[$scevgep1021+0>>2]=0|0;HEAP32[$scevgep1021+4>>2]=0|0;HEAP32[$scevgep1021+8>>2]=0|0;
 $scevgep1019 = (($this) + 3748|0);
 ;HEAP32[$scevgep1019+0>>2]=0|0;HEAP32[$scevgep1019+4>>2]=0|0;HEAP32[$scevgep1019+8>>2]=0|0;
 $scevgep1017 = (($this) + 3760|0);
 ;HEAP32[$scevgep1017+0>>2]=0|0;HEAP32[$scevgep1017+4>>2]=0|0;HEAP32[$scevgep1017+8>>2]=0|0;
 $scevgep1015 = (($this) + 3772|0);
 $654 = $scevgep1015;
 $655 = $654;
 HEAP32[$655>>2] = 0;
 $656 = (($654) + 4)|0;
 $657 = $656;
 HEAP32[$657>>2] = 0;
 $scevgep1013 = (($this) + 3780|0);
 ;HEAP32[$scevgep1013+0>>2]=0|0;HEAP32[$scevgep1013+4>>2]=0|0;HEAP32[$scevgep1013+8>>2]=0|0;
 $scevgep1011 = (($this) + 3792|0);
 $658 = $scevgep1011;
 $659 = $658;
 HEAP32[$659>>2] = 0;
 $660 = (($658) + 4)|0;
 $661 = $660;
 HEAP32[$661>>2] = 0;
 $scevgep1009 = (($this) + 3800|0);
 $662 = $scevgep1009;
 $663 = $662;
 HEAP32[$663>>2] = 0;
 $664 = (($662) + 4)|0;
 $665 = $664;
 HEAP32[$665>>2] = 0;
 $scevgep1007 = (($this) + 3808|0);
 ;HEAP32[$scevgep1007+0>>2]=0|0;HEAP32[$scevgep1007+4>>2]=0|0;HEAP32[$scevgep1007+8>>2]=0|0;
 $scevgep1005 = (($this) + 3820|0);
 ;HEAP32[$scevgep1005+0>>2]=0|0;HEAP32[$scevgep1005+4>>2]=0|0;HEAP32[$scevgep1005+8>>2]=0|0;
 $scevgep1003 = (($this) + 3832|0);
 ;HEAP32[$scevgep1003+0>>2]=0|0;HEAP32[$scevgep1003+4>>2]=0|0;HEAP32[$scevgep1003+8>>2]=0|0;
 $scevgep1001 = (($this) + 3844|0);
 $666 = $scevgep1001;
 $667 = $666;
 HEAP32[$667>>2] = 0;
 $668 = (($666) + 4)|0;
 $669 = $668;
 HEAP32[$669>>2] = 0;
 $scevgep999 = (($this) + 3852|0);
 ;HEAP32[$scevgep999+0>>2]=0|0;HEAP32[$scevgep999+4>>2]=0|0;HEAP32[$scevgep999+8>>2]=0|0;
 $scevgep997 = (($this) + 3864|0);
 $670 = $scevgep997;
 $671 = $670;
 HEAP32[$671>>2] = 0;
 $672 = (($670) + 4)|0;
 $673 = $672;
 HEAP32[$673>>2] = 0;
 $scevgep995 = (($this) + 3872|0);
 $674 = $scevgep995;
 $675 = $674;
 HEAP32[$675>>2] = 0;
 $676 = (($674) + 4)|0;
 $677 = $676;
 HEAP32[$677>>2] = 0;
 $scevgep993 = (($this) + 3880|0);
 ;HEAP32[$scevgep993+0>>2]=0|0;HEAP32[$scevgep993+4>>2]=0|0;HEAP32[$scevgep993+8>>2]=0|0;
 $scevgep991 = (($this) + 3892|0);
 ;HEAP32[$scevgep991+0>>2]=0|0;HEAP32[$scevgep991+4>>2]=0|0;HEAP32[$scevgep991+8>>2]=0|0;
 $scevgep989 = (($this) + 3904|0);
 $678 = $scevgep989;
 $679 = $678;
 HEAP32[$679>>2] = 0;
 $680 = (($678) + 4)|0;
 $681 = $680;
 HEAP32[$681>>2] = 0;
 $scevgep987 = (($this) + 3912|0);
 ;HEAP32[$scevgep987+0>>2]=0|0;HEAP32[$scevgep987+4>>2]=0|0;HEAP32[$scevgep987+8>>2]=0|0;
 $scevgep985 = (($this) + 3924|0);
 $682 = $scevgep985;
 $683 = $682;
 HEAP32[$683>>2] = 0;
 $684 = (($682) + 4)|0;
 $685 = $684;
 HEAP32[$685>>2] = 0;
 $scevgep983 = (($this) + 3932|0);
 $686 = $scevgep983;
 $687 = $686;
 HEAP32[$687>>2] = 0;
 $688 = (($686) + 4)|0;
 $689 = $688;
 HEAP32[$689>>2] = 0;
 $scevgep981 = (($this) + 3940|0);
 ;HEAP32[$scevgep981+0>>2]=0|0;HEAP32[$scevgep981+4>>2]=0|0;HEAP32[$scevgep981+8>>2]=0|0;
 $scevgep979 = (($this) + 3952|0);
 $690 = $scevgep979;
 $691 = $690;
 HEAP32[$691>>2] = 0;
 $692 = (($690) + 4)|0;
 $693 = $692;
 HEAP32[$693>>2] = 0;
 $scevgep977 = (($this) + 3960|0);
 ;HEAP32[$scevgep977+0>>2]=0|0;HEAP32[$scevgep977+4>>2]=0|0;HEAP32[$scevgep977+8>>2]=0|0;
 $scevgep975 = (($this) + 3972|0);
 $694 = $scevgep975;
 $695 = $694;
 HEAP32[$695>>2] = 0;
 $696 = (($694) + 4)|0;
 $697 = $696;
 HEAP32[$697>>2] = 0;
 $scevgep973 = (($this) + 3980|0);
 ;HEAP32[$scevgep973+0>>2]=0|0;HEAP32[$scevgep973+4>>2]=0|0;HEAP32[$scevgep973+8>>2]=0|0;
 $scevgep971 = (($this) + 3992|0);
 ;HEAP32[$scevgep971+0>>2]=0|0;HEAP32[$scevgep971+4>>2]=0|0;HEAP32[$scevgep971+8>>2]=0|0;
 $scevgep969 = (($this) + 4004|0);
 ;HEAP32[$scevgep969+0>>2]=0|0;HEAP32[$scevgep969+4>>2]=0|0;HEAP32[$scevgep969+8>>2]=0|0;
 $scevgep967 = (($this) + 4016|0);
 ;HEAP32[$scevgep967+0>>2]=0|0;HEAP32[$scevgep967+4>>2]=0|0;HEAP32[$scevgep967+8>>2]=0|0;
 $scevgep965 = (($this) + 4028|0);
 $698 = $scevgep965;
 $699 = $698;
 HEAP32[$699>>2] = 0;
 $700 = (($698) + 4)|0;
 $701 = $700;
 HEAP32[$701>>2] = 0;
 $scevgep963 = (($this) + 4036|0);
 ;HEAP32[$scevgep963+0>>2]=0|0;HEAP32[$scevgep963+4>>2]=0|0;HEAP32[$scevgep963+8>>2]=0|0;
 $scevgep961 = (($this) + 4048|0);
 $702 = $scevgep961;
 $703 = $702;
 HEAP32[$703>>2] = 0;
 $704 = (($702) + 4)|0;
 $705 = $704;
 HEAP32[$705>>2] = 0;
 $scevgep959 = (($this) + 4056|0);
 $706 = $scevgep959;
 $707 = $706;
 HEAP32[$707>>2] = 0;
 $708 = (($706) + 4)|0;
 $709 = $708;
 HEAP32[$709>>2] = 0;
 $scevgep957 = (($this) + 4064|0);
 ;HEAP32[$scevgep957+0>>2]=0|0;HEAP32[$scevgep957+4>>2]=0|0;HEAP32[$scevgep957+8>>2]=0|0;
 $scevgep955 = (($this) + 4076|0);
 ;HEAP32[$scevgep955+0>>2]=0|0;HEAP32[$scevgep955+4>>2]=0|0;HEAP32[$scevgep955+8>>2]=0|0;
 $scevgep953 = (($this) + 4088|0);
 ;HEAP32[$scevgep953+0>>2]=0|0;HEAP32[$scevgep953+4>>2]=0|0;HEAP32[$scevgep953+8>>2]=0|0;
 $scevgep951 = (($this) + 4100|0);
 $710 = $scevgep951;
 $711 = $710;
 HEAP32[$711>>2] = 0;
 $712 = (($710) + 4)|0;
 $713 = $712;
 HEAP32[$713>>2] = 0;
 $scevgep949 = (($this) + 4108|0);
 ;HEAP32[$scevgep949+0>>2]=0|0;HEAP32[$scevgep949+4>>2]=0|0;HEAP32[$scevgep949+8>>2]=0|0;
 $scevgep947 = (($this) + 4120|0);
 $714 = $scevgep947;
 $715 = $714;
 HEAP32[$715>>2] = 0;
 $716 = (($714) + 4)|0;
 $717 = $716;
 HEAP32[$717>>2] = 0;
 $scevgep945 = (($this) + 4128|0);
 $718 = $scevgep945;
 $719 = $718;
 HEAP32[$719>>2] = 0;
 $720 = (($718) + 4)|0;
 $721 = $720;
 HEAP32[$721>>2] = 0;
 $scevgep943 = (($this) + 4136|0);
 ;HEAP32[$scevgep943+0>>2]=0|0;HEAP32[$scevgep943+4>>2]=0|0;HEAP32[$scevgep943+8>>2]=0|0;
 $scevgep941 = (($this) + 4148|0);
 ;HEAP32[$scevgep941+0>>2]=0|0;HEAP32[$scevgep941+4>>2]=0|0;HEAP32[$scevgep941+8>>2]=0|0;
 $scevgep939 = (($this) + 4160|0);
 $722 = $scevgep939;
 $723 = $722;
 HEAP32[$723>>2] = 0;
 $724 = (($722) + 4)|0;
 $725 = $724;
 HEAP32[$725>>2] = 0;
 $scevgep937 = (($this) + 4168|0);
 ;HEAP32[$scevgep937+0>>2]=0|0;HEAP32[$scevgep937+4>>2]=0|0;HEAP32[$scevgep937+8>>2]=0|0;
 $scevgep935 = (($this) + 4180|0);
 $726 = $scevgep935;
 $727 = $726;
 HEAP32[$727>>2] = 0;
 $728 = (($726) + 4)|0;
 $729 = $728;
 HEAP32[$729>>2] = 0;
 $scevgep933 = (($this) + 4188|0);
 $730 = $scevgep933;
 $731 = $730;
 HEAP32[$731>>2] = 0;
 $732 = (($730) + 4)|0;
 $733 = $732;
 HEAP32[$733>>2] = 0;
 $scevgep931 = (($this) + 4196|0);
 ;HEAP32[$scevgep931+0>>2]=0|0;HEAP32[$scevgep931+4>>2]=0|0;HEAP32[$scevgep931+8>>2]=0|0;
 $scevgep929 = (($this) + 4208|0);
 $734 = $scevgep929;
 $735 = $734;
 HEAP32[$735>>2] = 0;
 $736 = (($734) + 4)|0;
 $737 = $736;
 HEAP32[$737>>2] = 0;
 $scevgep927 = (($this) + 4216|0);
 ;HEAP32[$scevgep927+0>>2]=0|0;HEAP32[$scevgep927+4>>2]=0|0;HEAP32[$scevgep927+8>>2]=0|0;
 $738 = (($this) + 4228|0);
 _memset(($738|0),0,32772)|0;
 $scevgep923 = (($this) + 37000|0);
 ;HEAP32[$scevgep923+0>>2]=0|0;HEAP32[$scevgep923+4>>2]=0|0;HEAP32[$scevgep923+8>>2]=0|0;
 $739 = (($this) + 37012|0);
 ;HEAP32[$739+0>>2]=0|0;HEAP32[$739+4>>2]=0|0;HEAP32[$739+8>>2]=0|0;
 $scevgep919 = (($this) + 37024|0);
 _memset(($scevgep919|0),0,32768)|0;
 $scevgep917 = (($this) + 69792|0);
 ;HEAP32[$scevgep917+0>>2]=0|0;HEAP32[$scevgep917+4>>2]=0|0;HEAP32[$scevgep917+8>>2]=0|0;
 $scevgep915 = (($this) + 69804|0);
 _memset(($scevgep915|0),0,32768)|0;
 $scevgep913 = (($this) + 102572|0);
 ;HEAP32[$scevgep913+0>>2]=0|0;HEAP32[$scevgep913+4>>2]=0|0;HEAP32[$scevgep913+8>>2]=0|0;
 $scevgep911 = (($this) + 102584|0);
 _memset(($scevgep911|0),0,32768)|0;
 $scevgep909 = (($this) + 135352|0);
 ;HEAP32[$scevgep909+0>>2]=0|0;HEAP32[$scevgep909+4>>2]=0|0;HEAP32[$scevgep909+8>>2]=0|0;
 $scevgep907 = (($this) + 135364|0);
 _memset(($scevgep907|0),0,32768)|0;
 $scevgep905 = (($this) + 168132|0);
 ;HEAP32[$scevgep905+0>>2]=0|0;HEAP32[$scevgep905+4>>2]=0|0;HEAP32[$scevgep905+8>>2]=0|0;
 $scevgep903 = (($this) + 168144|0);
 _memset(($scevgep903|0),0,32768)|0;
 $scevgep901 = (($this) + 200912|0);
 ;HEAP32[$scevgep901+0>>2]=0|0;HEAP32[$scevgep901+4>>2]=0|0;HEAP32[$scevgep901+8>>2]=0|0;
 $scevgep899 = (($this) + 200924|0);
 _memset(($scevgep899|0),0,32768)|0;
 $scevgep897 = (($this) + 233692|0);
 ;HEAP32[$scevgep897+0>>2]=0|0;HEAP32[$scevgep897+4>>2]=0|0;HEAP32[$scevgep897+8>>2]=0|0;
 $scevgep895 = (($this) + 233704|0);
 _memset(($scevgep895|0),0,32768)|0;
 $scevgep893 = (($this) + 266472|0);
 ;HEAP32[$scevgep893+0>>2]=0|0;HEAP32[$scevgep893+4>>2]=0|0;HEAP32[$scevgep893+8>>2]=0|0;
 $scevgep891 = (($this) + 266484|0);
 _memset(($scevgep891|0),0,32768)|0;
 $scevgep889 = (($this) + 299252|0);
 ;HEAP32[$scevgep889+0>>2]=0|0;HEAP32[$scevgep889+4>>2]=0|0;HEAP32[$scevgep889+8>>2]=0|0;
 $scevgep887 = (($this) + 299264|0);
 _memset(($scevgep887|0),0,32768)|0;
 $scevgep885 = (($this) + 332032|0);
 ;HEAP32[$scevgep885+0>>2]=0|0;HEAP32[$scevgep885+4>>2]=0|0;HEAP32[$scevgep885+8>>2]=0|0;
 $scevgep883 = (($this) + 332044|0);
 _memset(($scevgep883|0),0,32768)|0;
 $scevgep881 = (($this) + 364812|0);
 ;HEAP32[$scevgep881+0>>2]=0|0;HEAP32[$scevgep881+4>>2]=0|0;HEAP32[$scevgep881+8>>2]=0|0;
 $scevgep879 = (($this) + 364824|0);
 _memset(($scevgep879|0),0,32768)|0;
 $scevgep877 = (($this) + 397592|0);
 ;HEAP32[$scevgep877+0>>2]=0|0;HEAP32[$scevgep877+4>>2]=0|0;HEAP32[$scevgep877+8>>2]=0|0;
 $scevgep875 = (($this) + 397604|0);
 _memset(($scevgep875|0),0,32768)|0;
 $scevgep873 = (($this) + 430372|0);
 ;HEAP32[$scevgep873+0>>2]=0|0;HEAP32[$scevgep873+4>>2]=0|0;HEAP32[$scevgep873+8>>2]=0|0;
 $scevgep871 = (($this) + 430384|0);
 _memset(($scevgep871|0),0,32768)|0;
 $scevgep869 = (($this) + 463152|0);
 ;HEAP32[$scevgep869+0>>2]=0|0;HEAP32[$scevgep869+4>>2]=0|0;HEAP32[$scevgep869+8>>2]=0|0;
 $scevgep867 = (($this) + 463164|0);
 _memset(($scevgep867|0),0,32768)|0;
 $scevgep865 = (($this) + 495932|0);
 ;HEAP32[$scevgep865+0>>2]=0|0;HEAP32[$scevgep865+4>>2]=0|0;HEAP32[$scevgep865+8>>2]=0|0;
 $scevgep863 = (($this) + 495944|0);
 _memset(($scevgep863|0),0,32768)|0;
 $scevgep = (($this) + 528712|0);
 ;HEAP32[$scevgep+0>>2]=0|0;HEAP32[$scevgep+4>>2]=0|0;HEAP32[$scevgep+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __Z10faustpowerILi2EEff($x) {
 $x = +$x;
 var $pow2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $pow2 = $x * $x;
 STACKTOP = sp;return (+$pow2);
}
function __ZN3dspC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2104 + 8|0));
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN14ReverbDesignerD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN3dspD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN3dspD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(2856,$1,2912);
 HEAP32[2144>>2] = ((4272 + 12|0));
 HEAP32[((2144 + 8|0))>>2] = ((4272 + 32|0));
 HEAP32[((2144 + 4|0))>>2] = 0;
 __ZNSt3__18ios_base4initEPv(((2144 + 8|0)),2856);
 HEAP32[((2144 + 80|0))>>2] = 0;
 HEAP32[((2144 + 84|0))>>2] = -1;
 $2 = HEAP32[_stdout>>2]|0;
 HEAP32[2960>>2] = ((4144 + 8|0));
 __ZNSt3__16localeC2Ev(((2960 + 4|0)));
 ;HEAP32[((2960 + 8|0))+0>>2]=0|0;HEAP32[((2960 + 8|0))+4>>2]=0|0;HEAP32[((2960 + 8|0))+8>>2]=0|0;HEAP32[((2960 + 8|0))+12>>2]=0|0;HEAP32[((2960 + 8|0))+16>>2]=0|0;HEAP32[((2960 + 8|0))+20>>2]=0|0;
 HEAP32[2960>>2] = ((3464 + 8|0));
 HEAP32[((2960 + 32|0))>>2] = $2;
 __ZNSt3__16localeC2ERKS0_($0,((2960 + 4|0)));
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6944)|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((2960 + 36|0))>>2] = $3;
 HEAP32[((2960 + 40|0))>>2] = ((2912 + 8|0));
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 127]($3)|0);
 $8 = $7&1;
 HEAP8[((2960 + 44|0))] = $8;
 HEAP32[2232>>2] = ((4352 + 12|0));
 HEAP32[((2232 + 4|0))>>2] = ((4352 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2232 + 4|0)),2960);
 HEAP32[((2232 + 76|0))>>2] = 0;
 HEAP32[((2232 + 80|0))>>2] = -1;
 $9 = HEAP32[_stderr>>2]|0;
 HEAP32[3008>>2] = ((4144 + 8|0));
 __ZNSt3__16localeC2Ev(((3008 + 4|0)));
 ;HEAP32[((3008 + 8|0))+0>>2]=0|0;HEAP32[((3008 + 8|0))+4>>2]=0|0;HEAP32[((3008 + 8|0))+8>>2]=0|0;HEAP32[((3008 + 8|0))+12>>2]=0|0;HEAP32[((3008 + 8|0))+16>>2]=0|0;HEAP32[((3008 + 8|0))+20>>2]=0|0;
 HEAP32[3008>>2] = ((3464 + 8|0));
 HEAP32[((3008 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($0,((3008 + 4|0)));
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6944)|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((3008 + 36|0))>>2] = $10;
 HEAP32[((3008 + 40|0))>>2] = ((2912 + 16|0));
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_ii[$13 & 127]($10)|0);
 $15 = $14&1;
 HEAP8[((3008 + 44|0))] = $15;
 HEAP32[2320>>2] = ((4352 + 12|0));
 HEAP32[((2320 + 4|0))>>2] = ((4352 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2320 + 4|0)),3008);
 HEAP32[((2320 + 76|0))>>2] = 0;
 HEAP32[((2320 + 80|0))>>2] = -1;
 $16 = HEAP32[2320>>2]|0;
 $17 = (($16) + -12|0);
 $18 = HEAP32[$17>>2]|0;
 $$sum = (($18) + 24)|0;
 $19 = (2320 + ($$sum)|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[2408>>2] = ((4352 + 12|0));
 HEAP32[((2408 + 4|0))>>2] = ((4352 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2408 + 4|0)),$20);
 HEAP32[((2408 + 76|0))>>2] = 0;
 HEAP32[((2408 + 80|0))>>2] = -1;
 $21 = HEAP32[2144>>2]|0;
 $22 = (($21) + -12|0);
 $23 = HEAP32[$22>>2]|0;
 $$sum7 = (($23) + 72)|0;
 $24 = (2144 + ($$sum7)|0);
 HEAP32[$24>>2] = 2232;
 $25 = HEAP32[2320>>2]|0;
 $26 = (($25) + -12|0);
 $27 = HEAP32[$26>>2]|0;
 $$sum8 = (($27) + 4)|0;
 $28 = (2320 + ($$sum8)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 | 8192;
 HEAP32[$28>>2] = $30;
 $31 = HEAP32[2320>>2]|0;
 $32 = (($31) + -12|0);
 $33 = HEAP32[$32>>2]|0;
 $$sum9 = (($33) + 72)|0;
 $34 = (2320 + ($$sum9)|0);
 HEAP32[$34>>2] = 2232;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(3056,$1,((2912 + 24|0)));
 HEAP32[2496>>2] = ((4312 + 12|0));
 HEAP32[((2496 + 8|0))>>2] = ((4312 + 32|0));
 HEAP32[((2496 + 4|0))>>2] = 0;
 __ZNSt3__18ios_base4initEPv(((2496 + 8|0)),3056);
 HEAP32[((2496 + 80|0))>>2] = 0;
 HEAP32[((2496 + 84|0))>>2] = -1;
 HEAP32[3112>>2] = ((4208 + 8|0));
 __ZNSt3__16localeC2Ev(((3112 + 4|0)));
 ;HEAP32[((3112 + 8|0))+0>>2]=0|0;HEAP32[((3112 + 8|0))+4>>2]=0|0;HEAP32[((3112 + 8|0))+8>>2]=0|0;HEAP32[((3112 + 8|0))+12>>2]=0|0;HEAP32[((3112 + 8|0))+16>>2]=0|0;HEAP32[((3112 + 8|0))+20>>2]=0|0;
 HEAP32[3112>>2] = ((3208 + 8|0));
 HEAP32[((3112 + 32|0))>>2] = $2;
 __ZNSt3__16localeC2ERKS0_($0,((3112 + 4|0)));
 $35 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6952)|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((3112 + 36|0))>>2] = $35;
 HEAP32[((3112 + 40|0))>>2] = ((2912 + 32|0));
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (FUNCTION_TABLE_ii[$38 & 127]($35)|0);
 $40 = $39&1;
 HEAP8[((3112 + 44|0))] = $40;
 HEAP32[2584>>2] = ((4392 + 12|0));
 HEAP32[((2584 + 4|0))>>2] = ((4392 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2584 + 4|0)),3112);
 HEAP32[((2584 + 76|0))>>2] = 0;
 HEAP32[((2584 + 80|0))>>2] = -1;
 HEAP32[3160>>2] = ((4208 + 8|0));
 __ZNSt3__16localeC2Ev(((3160 + 4|0)));
 ;HEAP32[((3160 + 8|0))+0>>2]=0|0;HEAP32[((3160 + 8|0))+4>>2]=0|0;HEAP32[((3160 + 8|0))+8>>2]=0|0;HEAP32[((3160 + 8|0))+12>>2]=0|0;HEAP32[((3160 + 8|0))+16>>2]=0|0;HEAP32[((3160 + 8|0))+20>>2]=0|0;
 HEAP32[3160>>2] = ((3208 + 8|0));
 HEAP32[((3160 + 32|0))>>2] = $9;
 __ZNSt3__16localeC2ERKS0_($0,((3160 + 4|0)));
 $41 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6952)|0);
 __ZNSt3__16localeD2Ev($0);
 HEAP32[((3160 + 36|0))>>2] = $41;
 HEAP32[((3160 + 40|0))>>2] = ((2912 + 40|0));
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 28|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_ii[$44 & 127]($41)|0);
 $46 = $45&1;
 HEAP8[((3160 + 44|0))] = $46;
 HEAP32[2672>>2] = ((4392 + 12|0));
 HEAP32[((2672 + 4|0))>>2] = ((4392 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2672 + 4|0)),3160);
 HEAP32[((2672 + 76|0))>>2] = 0;
 HEAP32[((2672 + 80|0))>>2] = -1;
 $47 = HEAP32[2672>>2]|0;
 $48 = (($47) + -12|0);
 $49 = HEAP32[$48>>2]|0;
 $$sum10 = (($49) + 24)|0;
 $50 = (2672 + ($$sum10)|0);
 $51 = HEAP32[$50>>2]|0;
 HEAP32[2760>>2] = ((4392 + 12|0));
 HEAP32[((2760 + 4|0))>>2] = ((4392 + 32|0));
 __ZNSt3__18ios_base4initEPv(((2760 + 4|0)),$51);
 HEAP32[((2760 + 76|0))>>2] = 0;
 HEAP32[((2760 + 80|0))>>2] = -1;
 $52 = HEAP32[2496>>2]|0;
 $53 = (($52) + -12|0);
 $54 = HEAP32[$53>>2]|0;
 $$sum11 = (($54) + 72)|0;
 $55 = (2496 + ($$sum11)|0);
 HEAP32[$55>>2] = 2584;
 $56 = HEAP32[2672>>2]|0;
 $57 = (($56) + -12|0);
 $58 = HEAP32[$57>>2]|0;
 $$sum12 = (($58) + 4)|0;
 $59 = (2672 + ($$sum12)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 | 8192;
 HEAP32[$59>>2] = $61;
 $62 = HEAP32[2672>>2]|0;
 $63 = (($62) + -12|0);
 $64 = HEAP32[$63>>2]|0;
 $$sum13 = (($64) + 72)|0;
 $65 = (2672 + ($$sum13)|0);
 HEAP32[$65>>2] = 2584;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(2232)|0);
 (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(2408)|0);
 (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(2584)|0);
 (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(2760)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6952)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $3 = ($__n|0)>(0);
   if ($3) {
    $$012 = $__s;$__i$03 = 0;
    while(1) {
     $7 = HEAP32[$this>>2]|0;
     $8 = (($7) + 52|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = HEAP32[$$012>>2]|0;
     $11 = (FUNCTION_TABLE_iii[$9 & 15]($this,$10)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      $$0 = $__i$03;
      break L1;
     }
     $13 = (($__i$03) + 1)|0;
     $14 = (($$012) + 4|0);
     $15 = ($13|0)<($__n|0);
     if ($15) {
      $$012 = $14;$__i$03 = $13;
     } else {
      $$0 = $13;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   $4 = (($this) + 32|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
   $$0 = $6;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((3320 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $7 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6952)|0);
 $8 = (($this) + 36|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($7)|0);
 $13 = (($this) + 44|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$8>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($14)|0);
 $19 = (($this) + 53|0);
 $20 = $18&1;
 HEAP8[$19] = $20;
 $21 = HEAP32[$13>>2]|0;
 $22 = ($21|0)>(8);
 if ($22) {
  __ZNSt3__121__throw_runtime_errorEPKc(3424);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6952)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(3424);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 15]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 15]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_fgetc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6944)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 15]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 15]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $1 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($1);
 $2 = (($this) + 8|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 HEAP32[$this>>2] = ((3576 + 8|0));
 $3 = (($this) + 32|0);
 HEAP32[$3>>2] = $__fp;
 $4 = (($this) + 40|0);
 HEAP32[$4>>2] = $__st;
 $5 = (($this) + 48|0);
 HEAP32[$5>>2] = -1;
 $6 = (($this) + 52|0);
 HEAP8[$6] = 0;
 __ZNSt3__16localeC2ERKS0_($0,$1);
 $7 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6944)|0);
 $8 = (($this) + 36|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($7)|0);
 $13 = (($this) + 44|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$8>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 127]($14)|0);
 $19 = (($this) + 53|0);
 $20 = $18&1;
 HEAP8[$19] = $20;
 $21 = HEAP32[$13>>2]|0;
 $22 = ($21|0)>(8);
 if ($22) {
  __ZNSt3__121__throw_runtime_errorEPKc(3424);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6944)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 127]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(3424);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 15]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   } else if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_fgetc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 15]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_fgetc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf]|0;
    HEAP8[$__1buf] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf]|0;
   HEAP8[$__1buf] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (_atexit((122|0),(2848|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znaj($1)|0);
 $3 = (($this) + 4|0);
 $4 = (($0) + 1)|0;
 $5 = (($2) + 4|0);
 HEAP32[$5>>2] = $0;
 HEAP32[$2>>2] = $0;
 $6 = (($2) + 12|0);
 HEAP32[$3>>2] = $6;
 $7 = (($2) + 8|0);
 HEAP32[$7>>2] = 0;
 _memcpy(($6|0),($msg|0),($4|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_strlen(($7|0))|0);
 $9 = (($8) + 13)|0;
 $10 = (__Znaj($9)|0);
 $11 = (($8) + 1)|0;
 $12 = (($10) + 4|0);
 HEAP32[$12>>2] = $8;
 HEAP32[$10>>2] = $8;
 $13 = (($10) + 12|0);
 HEAP32[$0>>2] = $13;
 $14 = (($10) + 8|0);
 HEAP32[$14>>2] = 0;
 _memcpy(($13|0),($7|0),($11|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znaj($1)|0);
 $3 = (($this) + 4|0);
 $4 = (($0) + 1)|0;
 $5 = (($2) + 4|0);
 HEAP32[$5>>2] = $0;
 HEAP32[$2>>2] = $0;
 $6 = (($2) + 12|0);
 HEAP32[$3>>2] = $6;
 $7 = (($2) + 8|0);
 HEAP32[$7>>2] = 0;
 _memcpy(($6|0),($msg|0),($4|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3744 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  __ZNSt9exceptionD2Ev(($this|0));
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -12|0);
 __ZdaPv($6);
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$idx$val = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3720 + 8|0));
 $0 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$0>>2]|0;
 $1 = (($this$idx$val$i$i) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + -12|0);
  __ZdaPv($6);
 }
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 7]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = ($1>>>0)<(11);
 if ($3) {
  $4 = $1 << 1;
  $5 = $4&255;
  HEAP8[$agg$result] = $5;
  $6 = (($agg$result) + 1|0);
  $__p$0$i$i$i = $6;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($1) + 16)|0;
  $8 = $7 & -16;
  $9 = (__Znwj($8)|0);
  $10 = (($agg$result) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = $8 | 1;
  HEAP32[$agg$result>>2] = $11;
  $12 = (($agg$result) + 4|0);
  HEAP32[$12>>2] = $1;
  $__p$0$i$i$i = $9;
  _memcpy(($__p$0$i$i$i|0),($0|0),($1|0))|0;
  $13 = (($__p$0$i$i$i) + ($1)|0);
  HEAP8[$13] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = HEAP8[$what_arg]|0;
  $4 = $3 & 1;
  $5 = ($4<<24>>24)==(0);
  if ($5) {
   $8 = $3&255;
   $9 = $8 >>> 1;
   $11 = $9;
  } else {
   $6 = (($what_arg) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $11 = $7;
  }
  $10 = ($11|0)==(0);
  if ($10) {
   $17 = $1;
  } else {
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,3904,2)|0);
   $$pre = HEAP32[$ec>>2]|0;
   $17 = $$pre;
  }
  $12 = (($ec) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_viii[$16 & 7]($0,$13,$17);
  $18 = HEAP8[$0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $25 = (($0) + 1|0);
   $26 = $18&255;
   $27 = $26 >>> 1;
   $28 = $25;$29 = $27;
  } else {
   $21 = (($0) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($0) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $22;$29 = $24;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,$28,$29)|0);
  $30 = HEAP8[$0]|0;
  $31 = $30 & 1;
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $33 = (($0) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   __ZdlPv($34);
  }
 }
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$1] = $6;
  $7 = (($1) + 1|0);
  $__p$0$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($1) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$1>>2] = $12;
  $13 = (($1) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$i$i$i = $10;
 }
 _memcpy(($__p$0$i$i$i|0),($what_arg|0),($2|0))|0;
 $14 = (($__p$0$i$i$i) + ($2)|0);
 HEAP8[$14] = 0;
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$ec,$1);
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$0);
 $15 = HEAP8[$0]|0;
 $16 = $15 & 1;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  $18 = (($0) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  __ZdlPv($19);
 }
 $20 = HEAP8[$1]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  $23 = (($1) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  __ZdlPv($24);
 }
 HEAP32[$this>>2] = ((3912 + 8|0));
 $25 = (($this) + 8|0);
 $26 = $ec;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $25;
 $33 = $32;
 HEAP32[$33>>2] = $28;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((4056|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((4080|0),(4056|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$flag>>2] = 1;
  (_pthread_mutex_unlock((4056|0))|0);
  FUNCTION_TABLE_vi[$func & 255]($arg);
  (_pthread_mutex_lock((4056|0))|0);
  HEAP32[$flag>>2] = -1;
  (_pthread_mutex_unlock((4056|0))|0);
  (_pthread_cond_broadcast((4080|0))|0);
  STACKTOP = sp;return;
 } else {
  (_pthread_mutex_unlock((4056|0))|0);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt11logic_errorC2EPKc($0,4128);
 HEAP32[$0>>2] = ((3800 + 8|0));
 ___cxa_throw(($0|0),(3848|0),(20|0));
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 }
 $3 = (($__str) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($__str) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6 << 1;
  $10 = $9&255;
  HEAP8[$this] = $10;
  $11 = (($this) + 1|0);
  $__p$0$i$i = $11;
 } else {
  $12 = (($6) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  $15 = (($this) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  HEAP32[$this>>2] = $16;
  $17 = (($this) + 4|0);
  HEAP32[$17>>2] = $6;
  $__p$0$i$i = $14;
 }
 _memcpy(($__p$0$i$i|0),($4|0),($6|0))|0;
 $18 = (($__p$0$i$i) + ($6)|0);
 HEAP8[$18] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $10 = $1;$8 = 10;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i$i = (($5) + -1)|0;
  $6 = $4&255;
  $10 = $6;$8 = $phitmp$i$i;
 }
 $7 = ($8>>>0)<($0>>>0);
 $9 = $10 & 1;
 $11 = ($9<<24>>24)==(0);
 if ($7) {
  if ($11) {
   $25 = $10&255;
   $26 = $25 >>> 1;
   $28 = $26;
  } else {
   $23 = (($this) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $28 = $24;
  }
  $27 = (($0) - ($8))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$8,$27,$28,0,$28,$0,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($11) {
  $14 = (($this) + 1|0);
  $15 = $14;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
 }
 _memmove(($15|0),($__s|0),($0|0))|0;
 $16 = (($15) + ($0)|0);
 HEAP8[$16] = 0;
 $17 = HEAP8[$this]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $21 = $0 << 1;
  $22 = $21&255;
  HEAP8[$this] = $22;
  STACKTOP = sp;return ($this|0);
 } else {
  $20 = (($this) + 4|0);
  HEAP32[$20>>2] = $0;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    $30 = (__Znwj($28)|0);
    $__new_data$0 = $30;
   }
   $31 = $8 & 1;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $35 = (($this) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $35;$__was_long$0$off0 = 0;
    break;
   } else {
    $33 = (($this) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $34;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $36 = $8 & 1;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  $40 = $8&255;
  $41 = $40 >>> 1;
  $43 = $41;
 } else {
  $38 = (($this) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $43 = $39;
 }
 $42 = (($43) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($42|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $44 = (($21) + 1)|0;
  $45 = $44 | 1;
  HEAP32[$this>>2] = $45;
  $46 = (($this) + 4|0);
  HEAP32[$46>>2] = $15;
  $47 = (($this) + 8|0);
  HEAP32[$47>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $48 = $15 << 1;
  $49 = $48&255;
  HEAP8[$this] = $49;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    $31 = (__Znwj($29)|0);
    $$sink = $31;
   }
   $32 = $8 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $36 = (($this) + 4|0);
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $36;$__was_long$0$off0 = 0;
    break;
   } else {
    $34 = (($this) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $35;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $37 = $8 & 1;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $41 = $8&255;
  $42 = $41 >>> 1;
  $44 = $42;
 } else {
  $39 = (($this) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $44 = $40;
 }
 $43 = (($44) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$43)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $45 = (($21) + 1)|0;
  $46 = $45 | 1;
  HEAP32[$this>>2] = $46;
  $47 = (($this) + 4|0);
  HEAP32[$47>>2] = $15;
  $48 = (($this) + 8|0);
  HEAP32[$48>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $49 = $15 << 1;
  $50 = $49&255;
  HEAP8[$this] = $50;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = HEAP8[$this]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 $14 = HEAP8[4496]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((4496|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   HEAP32[4488>>2] = ((5184 + 8|0));
   (_atexit((51|0),(4488|0),(___dso_handle|0))|0);
   ___cxa_guard_release((4496|0));
  }
 }
 $18 = $0;
 $19 = $18;
 HEAP32[$19>>2] = 1;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = (4488);
 ;HEAP32[$tmpcast$i$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$i$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($13,$tmpcast$i$byval_copy,4544);
 HEAP32[$13>>2] = ((4504 + 8|0));
 ___cxa_throw(($13|0),(4592|0),(47|0));
 // unreachable;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4528 + 8|0));
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 if (!($2)) {
  $i$01$i = $1;
  while(1) {
   $3 = (($i$01$i) + -1)|0;
   $4 = HEAP32[$$pre>>2]|0;
   $5 = (($4) + ($3<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$$pre1>>2]|0;
   $8 = (($7) + ($3<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   FUNCTION_TABLE_viii[$6 & 7](0,$this,$9);
   $10 = ($3|0)==(0);
   if ($10) {
    break;
   } else {
    $i$01$i = $3;
   }
  }
 }
 $11 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($11);
 $12 = HEAP32[$$pre>>2]|0;
 _free($12);
 $13 = HEAP32[$$pre1>>2]|0;
 _free($13);
 $14 = (($this) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 $16 = (($this) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 _free($17);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4144 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 15]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4208 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 127]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = ($13|0)<($__n|0);
  if (!($14)) {
   $__i$0$lcssa = $13;
   label = 8;
   break;
  }
  $15 = (($$01) + 4|0);
  $$01 = $15;$__i$02 = $13;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 127]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 15]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $14 = (($__i$01) + 1)|0;
  $15 = ($14|0)<($__n|0);
  if (!($15)) {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
  $16 = (($$02) + 4|0);
  $$02 = $16;$__i$01 = $14;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$sum10 = (($2) + 72)|0;
  $10 = (($this) + ($$sum10)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$pre12 = $2;
  } else {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
   $$pre$pre = HEAP32[$this>>2]|0;
   $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
   $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
   $$pre12 = $$pre12$pre;
  }
  HEAP8[$__s] = 1;
  $$sum6 = (($$pre12) + 24)|0;
  $13 = (($this) + ($$sum6)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 127]($14)|0);
  $19 = ($18|0)==(-1);
  if ($19) {
   $20 = HEAP32[$this>>2]|0;
   $21 = (($20) + -12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($this) + ($22)|0);
   $$sum9 = (($22) + 16)|0;
   $24 = (($this) + ($$sum9)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 | 1;
   __ZNSt3__18ios_base5clearEj($23,$26);
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 8)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$phi$trans$insert$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 HEAP8[$__s] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $$sum5 = (($2) + 16)|0;
 $7 = (($this) + ($$sum5)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$sum10 = (($2) + 72)|0;
  $10 = (($this) + ($$sum10)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$pre12 = $2;
  } else {
   (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($11)|0);
   $$pre$pre = HEAP32[$this>>2]|0;
   $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
   $$pre12$pre = HEAP32[$$phi$trans$insert$phi$trans$insert>>2]|0;
   $$pre12 = $$pre12$pre;
  }
  HEAP8[$__s] = 1;
  $$sum6 = (($$pre12) + 24)|0;
  $13 = (($this) + ($$sum6)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 127]($14)|0);
  $19 = ($18|0)==(-1);
  if ($19) {
   $20 = HEAP32[$this>>2]|0;
   $21 = (($20) + -12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($this) + ($22)|0);
   $$sum9 = (($22) + 16)|0;
   $24 = (($this) + ($$sum9)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 | 1;
   __ZNSt3__18ios_base5clearEj($23,$26);
  }
 }
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 127]($21)|0);
 $26 = ($25|0)==(-1);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30)|0);
 $$sum4 = (($30) + 16)|0;
 $32 = (($27) + ($$sum4)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 1;
 __ZNSt3__18ios_base5clearEj($31,$34);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 $$sum = (($2) + 4)|0;
 $4 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($4);
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 127]($21)|0);
 $26 = ($25|0)==(-1);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30)|0);
 $$sum4 = (($30) + 16)|0;
 $32 = (($27) + ($$sum4)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 1;
 __ZNSt3__18ios_base5clearEj($31,$34);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (4432|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)==(1);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4448,35);
  STACKTOP = sp;return;
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024]|0;
    $3 = HEAP8[$$015]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$agg$result] = $6;
  $7 = (($agg$result) + 1|0);
  $__p$0$ph$i$i$i = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($agg$result) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$agg$result>>2] = $12;
  $13 = (($agg$result) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph$i$i$i = $10;
 }
 $14 = ($__lo|0)==($__hi|0);
 if ($14) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $15 = HEAP8[$$02$i$i$i]|0;
  HEAP8[$__p$01$i$i$i] = $15;
  $16 = (($$02$i$i$i) + 1|0);
  $17 = (($__p$01$i$i$i) + 1|0);
  $18 = ($16|0)==($__hi|0);
  if ($18) {
   break;
  } else {
   $$02$i$i$i = $16;$__p$01$i$i$i = $17;
  }
 }
 $19 = (0 - ($0))|0;
 $scevgep$i$i$i = (($__hi) + ($19)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__lo;
 $1 = $__hi;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$agg$result] = $7;
  $8 = (($agg$result) + 4|0);
  $__p$0$ph$i$i$i = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($agg$result) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$agg$result>>2] = $14;
  $15 = (($agg$result) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph$i$i$i = $12;
 }
 $16 = ($__lo|0)==($__hi|0);
 if ($16) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $17 = (0 - ($0))|0;
 $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $18 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $18;
  $19 = (($$02$i$i$i) + 4|0);
  $20 = (($__p$01$i$i$i) + 4|0);
  $21 = ($19|0)==($__hi|0);
  if ($21) {
   break;
  } else {
   $$02$i$i$i = $19;$__p$01$i$i$i = $20;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $22 = $uglygep4$i$i$i >>> 2;
 $23 = (($22) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($23<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy2 = sp;
 $$byval_copy = sp + 24|0;
 $__lv = sp + 28|0;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 20|0;
 $4 = sp + 36|0;
 $__names = sp + 40|0;
 $5 = sp + 64|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[6880>>2]|0;
 $19 = ($18|0)==(-1);
 if (!($19)) {
  HEAP32[$$byval_copy2>>2] = 6880;
  $20 = (($$byval_copy2) + 4|0);
  HEAP32[$20>>2] = (123);
  $21 = (($$byval_copy2) + 8|0);
  HEAP32[$21>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy2,124);
 }
 $22 = HEAP32[((6880 + 4|0))>>2]|0;
 $23 = (($22) + -1)|0;
 $24 = (($17) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($17) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = $30 >> 2;
 $32 = ($31>>>0)>($23>>>0);
 if (!($32)) {
  $36 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw(($36|0),(14840|0),(112|0));
  // unreachable;
 }
 $33 = (($27) + ($23<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $36 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw(($36|0),(14840|0),(112|0));
  // unreachable;
 }
 $37 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $38 = HEAP32[$4>>2]|0;
 $39 = HEAP32[7024>>2]|0;
 $40 = ($39|0)==(-1);
 if (!($40)) {
  HEAP32[$$byval_copy2>>2] = 7024;
  $41 = (($$byval_copy2) + 4|0);
  HEAP32[$41>>2] = (123);
  $42 = (($$byval_copy2) + 8|0);
  HEAP32[$42>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$$byval_copy2,124);
 }
 $43 = HEAP32[((7024 + 4|0))>>2]|0;
 $44 = (($43) + -1)|0;
 $45 = (($38) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($38) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $46;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = $51 >> 2;
 $53 = ($52>>>0)>($44>>>0);
 if (!($53)) {
  $57 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw(($57|0),(14840|0),(112|0));
  // unreachable;
 }
 $54 = (($48) + ($44<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw(($57|0),(14840|0),(112|0));
  // unreachable;
 }
 $58 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
 $59 = HEAP32[$55>>2]|0;
 $60 = (($59) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_vii[$61 & 63]($__names,$55);
 $62 = (($__names) + 12|0);
 $63 = HEAP32[$55>>2]|0;
 $64 = (($63) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 FUNCTION_TABLE_vii[$65 & 63]($62,$55);
 $66 = HEAP32[$__e>>2]|0;
 HEAP32[$5>>2] = $66;
 $67 = (($__names) + 24|0);
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
 $68 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$67,$34,$__err,1)|0);
 $69 = ($68|0)==($__names|0);
 $70 = $69&1;
 HEAP8[$__v] = $70;
 $71 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $71;
 $72 = (($__names) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($72);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0;
 var $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0;
 var $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0, $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__statbuf = 0, $__status$0 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $183 = $5;$__status$0 = $5;
  }
 } else {
  $183 = 0;$__status$0 = $__statbuf;
 }
 $7 = ($__kb|0)==($__ke|0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $3;$__st$063 = $__status$0;
  while(1) {
   $8 = HEAP8[$__ky$064]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $8&255;
    $14 = $13 >>> 1;
    $16 = $14;
   } else {
    $11 = (($__ky$064) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $16 = $12;
   }
   $15 = ($16|0)==(0);
   if ($15) {
    HEAP8[$__st$063] = 2;
    $17 = (($__n_might_match$061) + -1)|0;
    $18 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $18;$__n_might_match$1 = $17;
   } else {
    HEAP8[$__st$063] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $19 = (($__ky$064) + 12|0);
   $20 = (($__st$063) + 1|0);
   $21 = ($19|0)==($__ke|0);
   if ($21) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $19;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $20;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $22 = HEAP32[$__b>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    $35 = 0;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $33 = ($32|0)==(-1);
     if ($33) {
      HEAP32[$__b>>2] = 0;
      $35 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $35 = $$pre$i$i$i;
      break;
     }
    } else {
     $35 = $22;
    }
   }
  } while(0);
  $34 = ($35|0)==(0|0);
  $36 = HEAP32[$__e>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $$pre$i2$i$i16 = 0;
  } else {
   $38 = (($36) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($36) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$36>>2]|0;
    $44 = (($43) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 127]($36)|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i16 = 0;
    } else {
     $$pre$i2$i$i16 = $36;
    }
   } else {
    $$pre$i2$i$i16 = $36;
   }
  }
  $48 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $34 ^ $48;
  $49 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $49;
  $50 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $51 = (($50) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)==($54|0);
  if ($55) {
   $56 = HEAP32[$50>>2]|0;
   $57 = (($56) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
   $$0$i$i = $59;
  } else {
   $60 = HEAP8[$52]|0;
   $61 = $60&255;
   $$0$i$i = $61;
  }
  $62 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $62;
  } else {
   $63 = HEAP32[$__ct>>2]|0;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (FUNCTION_TABLE_iii[$65 & 15]($__ct,$62)|0);
   $__c$0 = $66;
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($7) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L40: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     $67 = HEAP8[$__st$133$us]|0;
     $68 = ($67<<24>>24)==(1);
     do {
      if ($68) {
       $69 = HEAP8[$__ky1$036$us]|0;
       $70 = $69 & 1;
       $71 = ($70<<24>>24)==(0);
       if ($71) {
        $74 = (($__ky1$036$us) + 1|0);
        $76 = $74;
       } else {
        $72 = (($__ky1$036$us) + 8|0);
        $73 = HEAP32[$72>>2]|0;
        $76 = $73;
       }
       $75 = (($76) + ($__indx$0)|0);
       $77 = HEAP8[$75]|0;
       $78 = ($__c$0<<24>>24)==($77<<24>>24);
       if (!($78)) {
        HEAP8[$__st$133$us] = 0;
        $79 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $79;
        break;
       }
       if ($71) {
        $82 = $69&255;
        $83 = $82 >>> 1;
        $85 = $83;
       } else {
        $80 = (($__ky1$036$us) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        $85 = $81;
       }
       $84 = ($85|0)==($$pre|0);
       if ($84) {
        HEAP8[$__st$133$us] = 2;
        $86 = (($__n_might_match$331$us) + -1)|0;
        $87 = (($__n_does_match$332$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $87;$__n_might_match$4$us = $86;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $88 = (($__ky1$036$us) + 12|0);
     $89 = ($88|0)==($__ke|0);
     if ($89) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L40;
     }
     $90 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $88;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $90;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     $91 = HEAP8[$__st$133]|0;
     $92 = ($91<<24>>24)==(1);
     do {
      if ($92) {
       $93 = HEAP8[$__ky1$036]|0;
       $94 = $93 & 1;
       $95 = ($94<<24>>24)==(0);
       if ($95) {
        $98 = (($__ky1$036) + 1|0);
        $100 = $98;
       } else {
        $96 = (($__ky1$036) + 8|0);
        $97 = HEAP32[$96>>2]|0;
        $100 = $97;
       }
       $99 = (($100) + ($__indx$0)|0);
       $101 = HEAP8[$99]|0;
       $102 = HEAP32[$__ct>>2]|0;
       $103 = (($102) + 12|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = (FUNCTION_TABLE_iii[$104 & 15]($__ct,$101)|0);
       $106 = ($__c$0<<24>>24)==($105<<24>>24);
       if (!($106)) {
        HEAP8[$__st$133] = 0;
        $118 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $118;
        break;
       }
       $107 = HEAP8[$__ky1$036]|0;
       $108 = $107 & 1;
       $109 = ($108<<24>>24)==(0);
       if ($109) {
        $112 = $107&255;
        $113 = $112 >>> 1;
        $115 = $113;
       } else {
        $110 = (($__ky1$036) + 4|0);
        $111 = HEAP32[$110>>2]|0;
        $115 = $111;
       }
       $114 = ($115|0)==($$pre|0);
       if ($114) {
        HEAP8[$__st$133] = 2;
        $116 = (($__n_might_match$331) + -1)|0;
        $117 = (($__n_does_match$332) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $117;$__n_might_match$4 = $116;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $119 = (($__ky1$036) + 12|0);
     $120 = ($119|0)==($__ke|0);
     if ($120) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L40;
     }
     $121 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $119;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $121;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $122 = HEAP32[$__b>>2]|0;
  $123 = (($122) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + 16|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($124|0)==($126|0);
  if ($127) {
   $128 = HEAP32[$122>>2]|0;
   $129 = (($128) + 40|0);
   $130 = HEAP32[$129>>2]|0;
   (FUNCTION_TABLE_ii[$130 & 127]($122)|0);
  } else {
   $131 = (($124) + 1|0);
   HEAP32[$123>>2] = $131;
  }
  $132 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($132>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $133 = HEAP8[$__st$246]|0;
   $134 = ($133<<24>>24)==(2);
   if ($134) {
    $135 = HEAP8[$__ky2$047]|0;
    $136 = $135 & 1;
    $137 = ($136<<24>>24)==(0);
    if ($137) {
     $140 = $135&255;
     $141 = $140 >>> 1;
     $143 = $141;
    } else {
     $138 = (($__ky2$047) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     $143 = $139;
    }
    $142 = ($143|0)==($$pre|0);
    if ($142) {
     $__n_does_match$6 = $__n_does_match$545;
    } else {
     HEAP8[$__st$246] = 0;
     $144 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $144;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$545;
   }
   $145 = (($__ky2$047) + 12|0);
   $146 = (($__st$246) + 1|0);
   $147 = ($145|0)==($__ke|0);
   if ($147) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L17;
   } else {
    $__ky2$047 = $145;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $146;
   }
  }
 }
 $148 = ($50|0)==(0|0);
 do {
  if ($148) {
   $160 = 0;
  } else {
   $149 = (($50) + 12|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($50) + 16|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($150|0)==($152|0);
   if ($153) {
    $154 = HEAP32[$50>>2]|0;
    $155 = (($154) + 36|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (FUNCTION_TABLE_ii[$156 & 127]($50)|0);
    $158 = ($157|0)==(-1);
    if ($158) {
     HEAP32[$__b>>2] = 0;
     $160 = 0;
     break;
    } else {
     $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
     $160 = $$pre$i$i$i12;
     break;
    }
   } else {
    $160 = $50;
   }
  }
 } while(0);
 $159 = ($160|0)==(0|0);
 do {
  if ($48) {
   label = 78;
  } else {
   $161 = (($$pre$i2$i$i16) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($$pre$i2$i$i16) + 16|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($162|0)==($164|0);
   if (!($165)) {
    if ($159) {
     break;
    } else {
     label = 80;
     break;
    }
   }
   $166 = HEAP32[$$pre$i2$i$i16>>2]|0;
   $167 = (($166) + 36|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (FUNCTION_TABLE_ii[$168 & 127]($$pre$i2$i$i16)|0);
   $170 = ($169|0)==(-1);
   if ($170) {
    HEAP32[$__e>>2] = 0;
    label = 78;
    break;
   } else {
    if ($159) {
     break;
    } else {
     label = 80;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 78) {
  if ($159) {
   label = 80;
  }
 }
 if ((label|0) == 80) {
  $171 = HEAP32[$__err>>2]|0;
  $172 = $171 | 2;
  HEAP32[$__err>>2] = $172;
 }
 L114: do {
  if ($7) {
   label = 85;
  } else {
   $173 = HEAP8[$__status$0]|0;
   $174 = ($173<<24>>24)==(2);
   if ($174) {
    $$024 = $__kb;
   } else {
    $$02680 = $__kb;$__st$32581 = $__status$0;
    while(1) {
     $178 = (($$02680) + 12|0);
     $179 = ($178|0)==($__ke|0);
     $176 = (($__st$32581) + 1|0);
     if ($179) {
      label = 85;
      break L114;
     }
     $175 = HEAP8[$176]|0;
     $177 = ($175<<24>>24)==(2);
     if ($177) {
      $$024 = $178;
      break;
     } else {
      $$02680 = $178;$__st$32581 = $176;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 85) {
  $180 = HEAP32[$__err>>2]|0;
  $181 = $180 | 4;
  HEAP32[$__err>>2] = $181;
  $$024 = $__ke;
 }
 $182 = ($183|0)==(0|0);
 if ($182) {
  STACKTOP = sp;return ($$024|0);
 }
 _free($183);
 STACKTOP = sp;return ($$024|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($24|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($24) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($24) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$24>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($24)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 54;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 $108 = tempRet0;
 $109 = $__v;
 $110 = $109;
 HEAP32[$110>>2] = $107;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$113,$__err);
 $114 = ($24|0)==(0|0);
 if ($114) {
  $126 = 0;
 } else {
  $115 = (($24) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($24) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$24>>2]|0;
   $121 = (($120) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 127]($24)|0);
   $124 = ($123|0)==(-1);
   if ($124) {
    HEAP32[$__b>>2] = 0;
    $126 = 0;
   } else {
    $126 = $24;
   }
  } else {
   $126 = $24;
  }
 }
 $125 = ($126|0)==(0|0);
 $127 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($127) {
   label = 54;
  } else {
   $128 = (($$pre$i2$i$i) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($$pre$i2$i$i) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if (!($132)) {
    if (!($125)) {
     break;
    }
    HEAP32[$agg$result>>2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $133 = HEAP32[$$pre$i2$i$i>>2]|0;
   $134 = (($133) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (FUNCTION_TABLE_ii[$135 & 127]($$pre$i2$i$i)|0);
   $137 = ($136|0)==(-1);
   if ($137) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $138 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $125 ^ $138;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($125)) {
   HEAP32[$agg$result>>2] = $126;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $139 = HEAP32[$__err>>2]|0;
 $140 = $139 | 2;
 HEAP32[$__err>>2] = $140;
 HEAP32[$agg$result>>2] = $126;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 HEAP16[$__v>>1] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($24|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($24) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($24) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$24>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($24)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 54;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($24|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($24) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($24) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$24>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($24)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 54;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $136 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($24|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($24) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($24) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$24>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($24)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $24;
   }
  } else {
   $121 = $24;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 54;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre31 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre33 = (($__buf) + 8|0);
  $$pre$phi32Z2D = $8;$$pre$phi34Z2D = $$pre33;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre31 = (($__buf) + 1|0);
  $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i4|0)==(0|0);
  if ($12) {
   $24 = 0;
  } else {
   $13 = (($$pre$i$i$i4) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i4) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i4>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i4)|0);
    $22 = ($21|0)==(-1);
    if ($22) {
     HEAP32[$__b>>2] = 0;
     $24 = 0;
    } else {
     $24 = $$pre$i$i$i4;
    }
   } else {
    $24 = $$pre$i$i$i4;
   }
  }
  $23 = ($24|0)==(0|0);
  $25 = HEAP32[$__e>>2]|0;
  $26 = ($25|0)==(0|0);
  do {
   if ($26) {
    label = 18;
   } else {
    $27 = (($25) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 16|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)==($30|0);
    if (!($31)) {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
    $32 = HEAP32[$25>>2]|0;
    $33 = (($32) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_ii[$34 & 127]($25)|0);
    $36 = ($35|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 18;
     break;
    } else {
     if ($23) {
      $141 = $25;
      break;
     } else {
      $$pre$i2$i$i = $25;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   if ($23) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i19 = (($60) + -1)|0;
    $61 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi32Z2D;
   } else {
    $65 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($24) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($24) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  if ($73) {
   $74 = HEAP32[$24>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($24)|0);
   $$0$i$i = $77;
  } else {
   $78 = HEAP8[$70]|0;
   $79 = $78&255;
   $$0$i$i = $79;
  }
  $80 = $$0$i$i&255;
  $81 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($80,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $82 = ($81|0)==(0);
  if (!($82)) {
   $$pre$i2$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69>>2]|0;
  $84 = HEAP32[$71>>2]|0;
  $85 = ($83|0)==($84|0);
  if ($85) {
   $86 = HEAP32[$24>>2]|0;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   (FUNCTION_TABLE_ii[$88 & 127]($24)|0);
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  } else {
   $89 = (($83) + 1|0);
   HEAP32[$69>>2] = $89;
   $$pre$i$i$i4 = $24;$__a$0 = $__a$1;
   continue;
  }
 }
 $90 = HEAP8[$__grouping]|0;
 $91 = $90 & 1;
 $92 = ($91<<24>>24)==(0);
 if ($92) {
  $95 = $90&255;
  $96 = $95 >>> 1;
  $98 = $96;
 } else {
  $93 = (($__grouping) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $98 = $94;
 }
 $97 = ($98|0)==(0);
 if (!($97)) {
  $99 = HEAP32[$__g_end>>2]|0;
  $100 = $99;
  $101 = $__g;
  $102 = (($100) - ($101))|0;
  $103 = ($102|0)<(160);
  if ($103) {
   $104 = HEAP32[$__dc>>2]|0;
   $105 = (($99) + 4|0);
   HEAP32[$__g_end>>2] = $105;
   HEAP32[$99>>2] = $104;
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$106,$__err,$$0$i)|0);
 $108 = tempRet0;
 $109 = $__v;
 $110 = $109;
 HEAP32[$110>>2] = $107;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$113,$__err);
 $114 = ($24|0)==(0|0);
 if ($114) {
  $126 = 0;
 } else {
  $115 = (($24) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($24) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$24>>2]|0;
   $121 = (($120) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 127]($24)|0);
   $124 = ($123|0)==(-1);
   if ($124) {
    HEAP32[$__b>>2] = 0;
    $126 = 0;
   } else {
    $126 = $24;
   }
  } else {
   $126 = $24;
  }
 }
 $125 = ($126|0)==(0|0);
 $127 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($127) {
   label = 54;
  } else {
   $128 = (($$pre$i2$i$i) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($$pre$i2$i$i) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if (!($132)) {
    if (!($125)) {
     break;
    }
    HEAP32[$agg$result>>2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $133 = HEAP32[$$pre$i2$i$i>>2]|0;
   $134 = (($133) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (FUNCTION_TABLE_ii[$135 & 127]($$pre$i2$i$i)|0);
   $137 = ($136|0)==(-1);
   if ($137) {
    HEAP32[$__e>>2] = 0;
    label = 54;
    break;
   }
   $138 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $125 ^ $138;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $126;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  if (!($125)) {
   HEAP32[$agg$result>>2] = $126;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $139 = HEAP32[$__err>>2]|0;
 $140 = $139 | 2;
 HEAP32[$__err>>2] = $140;
 HEAP32[$agg$result>>2] = $126;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point]|0;
 $9 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $22 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($22) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($22) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$22>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($22)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$22>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($22)|0);
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $96 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $96 = $92;
 }
 $95 = ($96|0)==(0);
 if (!($95)) {
  $97 = HEAP8[$__in_units]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF32[$__v>>2] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($22|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($22) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($22) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$22>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($22)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point]|0;
 $9 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $22 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($22) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($22) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$22>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($22)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$22>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($22)|0);
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $96 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $96 = $92;
 }
 $95 = ($96|0)==(0);
 if (!($95)) {
  $97 = HEAP8[$__in_units]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF64[$__v>>3] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($22|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($22) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($22) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$22>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($22)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre34 = (($__buf) + 8|0);
  $$pre$phi33Z2D = $5;$$pre$phi35Z2D = $$pre34;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre32 = (($__buf) + 1|0);
  $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP8[$__decimal_point]|0;
 $9 = HEAP8[$__thousands_sep]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i4|0)==(0|0);
  if ($10) {
   $22 = 0;
  } else {
   $11 = (($$pre$i$i$i4) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i4) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i4>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i4)|0);
    $20 = ($19|0)==(-1);
    if ($20) {
     HEAP32[$__b>>2] = 0;
     $22 = 0;
    } else {
     $22 = $$pre$i$i$i4;
    }
   } else {
    $22 = $$pre$i$i$i4;
   }
  }
  $21 = ($22|0)==(0|0);
  $23 = HEAP32[$__e>>2]|0;
  $24 = ($23|0)==(0|0);
  do {
   if ($24) {
    label = 14;
   } else {
    $25 = (($23) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($23) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($26|0)==($28|0);
    if (!($29)) {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
    $30 = HEAP32[$23>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 127]($23)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 14;
     break;
    } else {
     if ($21) {
      $136 = $23;
      break;
     } else {
      $$pre$i2$i$i = $23;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   if ($21) {
    $$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i19 = (($58) + -1)|0;
    $59 = $phitmp$i19;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi33Z2D;
   } else {
    $63 = HEAP32[$$pre$phi35Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($22) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($22) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($68|0)==($70|0);
  if ($71) {
   $72 = HEAP32[$22>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($22)|0);
   $$0$i$i = $75;
  } else {
   $76 = HEAP8[$68]|0;
   $77 = $76&255;
   $$0$i$i = $77;
  }
  $78 = $$0$i$i&255;
  $79 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($78,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $$pre$i2$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $81 = HEAP32[$67>>2]|0;
  $82 = HEAP32[$69>>2]|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$22>>2]|0;
   $85 = (($84) + 40|0);
   $86 = HEAP32[$85>>2]|0;
   (FUNCTION_TABLE_ii[$86 & 127]($22)|0);
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  } else {
   $87 = (($81) + 1|0);
   HEAP32[$67>>2] = $87;
   $$pre$i$i$i4 = $22;$__a$0 = $__a$1;
   continue;
  }
 }
 $88 = HEAP8[$__grouping]|0;
 $89 = $88 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $93 = $88&255;
  $94 = $93 >>> 1;
  $96 = $94;
 } else {
  $91 = (($__grouping) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $96 = $92;
 }
 $95 = ($96|0)==(0);
 if (!($95)) {
  $97 = HEAP8[$__in_units]|0;
  $98 = ($97<<24>>24)==(0);
  if (!($98)) {
   $99 = HEAP32[$__g_end>>2]|0;
   $100 = $99;
   $101 = $__g;
   $102 = (($100) - ($101))|0;
   $103 = ($102|0)<(160);
   if ($103) {
    $104 = HEAP32[$__dc>>2]|0;
    $105 = (($99) + 4|0);
    HEAP32[$__g_end>>2] = $105;
    HEAP32[$99>>2] = $104;
   }
  }
 }
 $106 = HEAP32[$__a_end>>2]|0;
 $107 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$106,$__err));
 HEAPF64[$__v>>3] = $107;
 $108 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$108,$__err);
 $109 = ($22|0)==(0|0);
 if ($109) {
  $121 = 0;
 } else {
  $110 = (($22) + 12|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($22) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111|0)==($113|0);
  if ($114) {
   $115 = HEAP32[$22>>2]|0;
   $116 = (($115) + 36|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 127]($22)|0);
   $119 = ($118|0)==(-1);
   if ($119) {
    HEAP32[$__b>>2] = 0;
    $121 = 0;
   } else {
    $121 = $22;
   }
  } else {
   $121 = $22;
  }
 }
 $120 = ($121|0)==(0|0);
 $122 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($122) {
   label = 51;
  } else {
   $123 = (($$pre$i2$i$i) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($$pre$i2$i$i) + 16|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($124|0)==($126|0);
   if (!($127)) {
    if (!($120)) {
     break;
    }
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $128 = HEAP32[$$pre$i2$i$i>>2]|0;
   $129 = (($128) + 36|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 127]($$pre$i2$i$i)|0);
   $132 = ($131|0)==(-1);
   if ($132) {
    HEAP32[$__e>>2] = 0;
    label = 51;
    break;
   }
   $133 = ($$pre$i2$i$i|0)==(0|0);
   $tmp$i$i = $120 ^ $133;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $121;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 51) {
  if (!($120)) {
   HEAP32[$agg$result>>2] = $121;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $134 = HEAP32[$__err>>2]|0;
 $135 = $134 | 2;
 HEAP32[$__err>>2] = $135;
 HEAP32[$agg$result>>2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre38 = 0, $$pre40 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0;
 var $or$cond$i = 0, $phitmp$i22 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $__atoms = sp + 204|0;
 $__grouping = sp + 192|0;
 $0 = sp + 188|0;
 $__buf = sp + 176|0;
 $__g = sp + 16|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[6880>>2]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6880;
  $4 = (($vararg_buffer) + 4|0);
  HEAP32[$4>>2] = (123);
  $5 = (($vararg_buffer) + 8|0);
  HEAP32[$5>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$vararg_buffer,124);
 }
 $6 = HEAP32[((6880 + 4|0))>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($1) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $21 = HEAP32[$18>>2]|0;
 $22 = (($21) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 (FUNCTION_TABLE_iiiii[$23 & 7]($18,5424,((5424 + 26|0)),$__atoms)|0);
 $24 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $25 = HEAP8[$__buf]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $30 = (($__buf) + 1|0);
  $$pre40 = (($__buf) + 8|0);
  $$pre$phi39Z2D = $30;$$pre$phi41Z2D = $$pre40;$200 = $30;
 } else {
  $28 = (($__buf) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $$pre38 = (($__buf) + 1|0);
  $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $28;$200 = $29;
 }
 $31 = (($__buf) + 4|0);
 $32 = (($__atoms) + 24|0);
 $33 = (($__atoms) + 25|0);
 $34 = $__g;
 $35 = (($__atoms) + 26|0);
 $36 = $__atoms;
 $37 = (($__grouping) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i9 = $$pre;$125 = $__g;$129 = 0;$64 = $200;$__a$0 = $200;
 L14: while(1) {
  $38 = ($$pre$i$i$i9|0)==(0|0);
  if ($38) {
   $50 = 0;
  } else {
   $39 = (($$pre$i$i$i9) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($$pre$i$i$i9) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($40|0)==($42|0);
   if ($43) {
    $44 = HEAP32[$$pre$i$i$i9>>2]|0;
    $45 = (($44) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_ii[$46 & 127]($$pre$i$i$i9)|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     HEAP32[$__b>>2] = 0;
     $50 = 0;
    } else {
     $50 = $$pre$i$i$i9;
    }
   } else {
    $50 = $$pre$i$i$i9;
   }
  }
  $49 = ($50|0)==(0|0);
  $51 = HEAP32[$__e>>2]|0;
  $52 = ($51|0)==(0|0);
  do {
   if ($52) {
    label = 19;
   } else {
    $53 = (($51) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($51) + 16|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if (!($57)) {
     if ($49) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $62 = ($61|0)==(-1);
    if ($62) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($49) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($49) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $63 = $64;
  $65 = $__a$0;
  $66 = (($63) - ($65))|0;
  $67 = HEAP8[$__buf]|0;
  $68 = $67 & 1;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $71 = $67&255;
   $72 = $71 >>> 1;
   $74 = $72;
  } else {
   $70 = HEAP32[$31>>2]|0;
   $74 = $70;
  }
  $73 = ($66|0)==($74|0);
  if ($73) {
   if ($69) {
    $76 = $67&255;
    $77 = $76 >>> 1;
    $78 = $67&255;
    $79 = $78 >>> 1;
    $81 = $79;$94 = $77;
   } else {
    $75 = HEAP32[$31>>2]|0;
    $81 = $75;$94 = $75;
   }
   $80 = $81 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$80,0);
   $82 = HEAP8[$__buf]|0;
   $83 = $82 & 1;
   $84 = ($83<<24>>24)==(0);
   if ($84) {
    $87 = 10;
   } else {
    $85 = HEAP32[$__buf>>2]|0;
    $86 = $85 & -2;
    $phitmp$i22 = (($86) + -1)|0;
    $87 = $phitmp$i22;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0);
   $88 = HEAP8[$__buf]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    $93 = $$pre$phi39Z2D;
   } else {
    $91 = HEAP32[$$pre$phi41Z2D>>2]|0;
    $93 = $91;
   }
   $92 = (($93) + ($94)|0);
   $108 = $92;$__a$1 = $93;
  } else {
   $108 = $64;$__a$1 = $__a$0;
  }
  $95 = (($50) + 12|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($50) + 16|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($96|0)==($98|0);
  if ($99) {
   $100 = HEAP32[$50>>2]|0;
   $101 = (($100) + 36|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_ii[$102 & 127]($50)|0);
   $$0$i$i = $103;
  } else {
   $104 = HEAP8[$96]|0;
   $105 = $104&255;
   $$0$i$i = $105;
  }
  $106 = $$0$i$i&255;
  $107 = ($108|0)==($__a$1|0);
  do {
   if ($107) {
    $109 = HEAP8[$32]|0;
    $110 = ($109<<24>>24)==($106<<24>>24);
    if (!($110)) {
     $111 = HEAP8[$33]|0;
     $112 = ($111<<24>>24)==($106<<24>>24);
     if (!($112)) {
      label = 40;
      break;
     }
    }
    $113 = $110 ? 43 : 45;
    $114 = (($108) + 1|0);
    HEAP8[$108] = $113;
    $$ph = $114;$$ph31 = $125;$$ph32 = 0;
   } else {
    label = 40;
   }
  } while(0);
  do {
   if ((label|0) == 40) {
    label = 0;
    $115 = HEAP8[$__grouping]|0;
    $116 = $115 & 1;
    $117 = ($116<<24>>24)==(0);
    if ($117) {
     $119 = $115&255;
     $120 = $119 >>> 1;
     $122 = $120;
    } else {
     $118 = HEAP32[$37>>2]|0;
     $122 = $118;
    }
    $121 = ($122|0)!=(0);
    $123 = ($106<<24>>24)==(0);
    $or$cond$i = $121 & $123;
    if ($or$cond$i) {
     $124 = $125;
     $126 = (($124) - ($34))|0;
     $127 = ($126|0)<(160);
     if (!($127)) {
      $$ph = $108;$$ph31 = $125;$$ph32 = $129;
      break;
     }
     $128 = (($125) + 4|0);
     HEAP32[$125>>2] = $129;
     $$ph = $108;$$ph31 = $128;$$ph32 = 0;
     break;
    } else {
     $$01$i$i = $__atoms;
    }
    while(1) {
     $132 = HEAP8[$$01$i$i]|0;
     $133 = ($132<<24>>24)==($106<<24>>24);
     $131 = (($$01$i$i) + 1|0);
     if ($133) {
      $$0$lcssa$i$i = $$01$i$i;
      break;
     }
     $130 = ($131|0)==($35|0);
     if ($130) {
      $$0$lcssa$i$i = $35;
      break;
     } else {
      $$01$i$i = $131;
     }
    }
    $134 = $$0$lcssa$i$i;
    $135 = (($134) - ($36))|0;
    $136 = ($135|0)>(23);
    if ($136) {
     $__a$2 = $__a$1;
     break L14;
    }
    $137 = ($135|0)<(22);
    if ($137) {
     $148 = (5424 + ($135)|0);
     $149 = HEAP8[$148]|0;
     $150 = (($108) + 1|0);
     HEAP8[$108] = $149;
     $151 = (($129) + 1)|0;
     $$ph = $150;$$ph31 = $125;$$ph32 = $151;
     break;
    }
    if ($107) {
     $__a$2 = $108;
     break L14;
    }
    $138 = $108;
    $139 = $__a$1;
    $140 = (($138) - ($139))|0;
    $141 = ($140|0)<(3);
    if (!($141)) {
     $__a$2 = $__a$1;
     break L14;
    }
    $142 = (($108) + -1|0);
    $143 = HEAP8[$142]|0;
    $144 = ($143<<24>>24)==(48);
    if (!($144)) {
     $__a$2 = $__a$1;
     break L14;
    }
    $145 = (5424 + ($135)|0);
    $146 = HEAP8[$145]|0;
    $147 = (($108) + 1|0);
    HEAP8[$108] = $146;
    $$ph = $147;$$ph31 = $125;$$ph32 = 0;
   }
  } while(0);
  $152 = HEAP32[$__b>>2]|0;
  $153 = (($152) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + 16|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($154|0)==($156|0);
  if ($157) {
   $158 = HEAP32[$152>>2]|0;
   $159 = (($158) + 40|0);
   $160 = HEAP32[$159>>2]|0;
   (FUNCTION_TABLE_ii[$160 & 127]($152)|0);
   $$pre$i$i$i9 = $152;$125 = $$ph31;$129 = $$ph32;$64 = $$ph;$__a$0 = $__a$1;
   continue;
  } else {
   $161 = (($154) + 1|0);
   HEAP32[$153>>2] = $161;
   $$pre$i$i$i9 = $152;$125 = $$ph31;$129 = $$ph32;$64 = $$ph;$__a$0 = $__a$1;
   continue;
  }
 }
 $162 = (($__a$2) + 3|0);
 HEAP8[$162] = 0;
 $163 = HEAP8[6776]|0;
 $164 = ($163<<24>>24)==(0);
 if ($164) {
  $165 = (___cxa_guard_acquire((6776|0))|0);
  $166 = ($165|0)==(0);
  if (!($166)) {
   $167 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $167;
   ___cxa_guard_release((6776|0));
  }
 }
 $168 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $169 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2,$168,5464,$vararg_buffer)|0);
 $170 = ($169|0)==(1);
 if (!($170)) {
  HEAP32[$__err>>2] = 4;
 }
 $171 = HEAP32[$__b>>2]|0;
 $172 = ($171|0)==(0|0);
 if ($172) {
  $184 = 0;
 } else {
  $173 = (($171) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($171) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174|0)==($176|0);
  if ($177) {
   $178 = HEAP32[$171>>2]|0;
   $179 = (($178) + 36|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (FUNCTION_TABLE_ii[$180 & 127]($171)|0);
   $182 = ($181|0)==(-1);
   if ($182) {
    HEAP32[$__b>>2] = 0;
    $184 = 0;
   } else {
    $184 = $171;
   }
  } else {
   $184 = $171;
  }
 }
 $183 = ($184|0)==(0|0);
 $185 = HEAP32[$__e>>2]|0;
 $186 = ($185|0)==(0|0);
 do {
  if ($186) {
   label = 72;
  } else {
   $187 = (($185) + 12|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (($185) + 16|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($188|0)==($190|0);
   if (!($191)) {
    if (!($183)) {
     break;
    }
    HEAP32[$agg$result>>2] = $184;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $192 = HEAP32[$185>>2]|0;
   $193 = (($192) + 36|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (FUNCTION_TABLE_ii[$194 & 127]($185)|0);
   $196 = ($195|0)==(-1);
   if ($196) {
    HEAP32[$__e>>2] = 0;
    label = 72;
    break;
   }
   $197 = ($185|0)==(0|0);
   $tmp$i$i = $183 ^ $197;
   if ($tmp$i$i) {
    HEAP32[$agg$result>>2] = $184;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($183)) {
   HEAP32[$agg$result>>2] = $184;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $198 = HEAP32[$__err>>2]|0;
 $199 = $198 | 2;
 HEAP32[$__err>>2] = $199;
 HEAP32[$agg$result>>2] = $184;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (5424 + ($34)|0);
   $46 = HEAP8[$45]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (5424 + ($34)|0);
 $49 = HEAP8[$48]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf(($__s|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy2 = sp;
 $$byval_copy = sp + 24|0;
 $__lv = sp + 28|0;
 $0 = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 20|0;
 $4 = sp + 36|0;
 $__names = sp + 40|0;
 $5 = sp + 64|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v] = 1;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[6872>>2]|0;
 $19 = ($18|0)==(-1);
 if (!($19)) {
  HEAP32[$$byval_copy2>>2] = 6872;
  $20 = (($$byval_copy2) + 4|0);
  HEAP32[$20>>2] = (123);
  $21 = (($$byval_copy2) + 8|0);
  HEAP32[$21>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy2,124);
 }
 $22 = HEAP32[((6872 + 4|0))>>2]|0;
 $23 = (($22) + -1)|0;
 $24 = (($17) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($17) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = $30 >> 2;
 $32 = ($31>>>0)>($23>>>0);
 if (!($32)) {
  $36 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw(($36|0),(14840|0),(112|0));
  // unreachable;
 }
 $33 = (($27) + ($23<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $36 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw(($36|0),(14840|0),(112|0));
  // unreachable;
 }
 $37 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($37)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $38 = HEAP32[$4>>2]|0;
 $39 = HEAP32[7032>>2]|0;
 $40 = ($39|0)==(-1);
 if (!($40)) {
  HEAP32[$$byval_copy2>>2] = 7032;
  $41 = (($$byval_copy2) + 4|0);
  HEAP32[$41>>2] = (123);
  $42 = (($$byval_copy2) + 8|0);
  HEAP32[$42>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$$byval_copy2,124);
 }
 $43 = HEAP32[((7032 + 4|0))>>2]|0;
 $44 = (($43) + -1)|0;
 $45 = (($38) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($38) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $46;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = $51 >> 2;
 $53 = ($52>>>0)>($44>>>0);
 if (!($53)) {
  $57 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw(($57|0),(14840|0),(112|0));
  // unreachable;
 }
 $54 = (($48) + ($44<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($57);
  ___cxa_throw(($57|0),(14840|0),(112|0));
  // unreachable;
 }
 $58 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
 $59 = HEAP32[$55>>2]|0;
 $60 = (($59) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_vii[$61 & 63]($__names,$55);
 $62 = (($__names) + 12|0);
 $63 = HEAP32[$55>>2]|0;
 $64 = (($63) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 FUNCTION_TABLE_vii[$65 & 63]($62,$55);
 $66 = HEAP32[$__e>>2]|0;
 HEAP32[$5>>2] = $66;
 $67 = (($__names) + 24|0);
 ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
 $68 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$67,$34,$__err,1)|0);
 $69 = ($68|0)==($__names|0);
 $70 = $69&1;
 HEAP8[$__v] = $70;
 $71 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $71;
 $72 = (($__names) + 12|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($72);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0;
 var $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0;
 var $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__statbuf = 0, $__status$0 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $183 = $5;$__status$0 = $5;
  }
 } else {
  $183 = 0;$__status$0 = $__statbuf;
 }
 $7 = ($__kb|0)==($__ke|0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $3;$__st$067 = $__status$0;
  while(1) {
   $8 = HEAP8[$__ky$068]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $8&255;
    $14 = $13 >>> 1;
    $16 = $14;
   } else {
    $11 = (($__ky$068) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $16 = $12;
   }
   $15 = ($16|0)==(0);
   if ($15) {
    HEAP8[$__st$067] = 2;
    $17 = (($__n_might_match$065) + -1)|0;
    $18 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $18;$__n_might_match$1 = $17;
   } else {
    HEAP8[$__st$067] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $19 = (($__ky$068) + 12|0);
   $20 = (($__st$067) + 1|0);
   $21 = ($19|0)==($__ke|0);
   if ($21) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $19;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $20;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $22 = HEAP32[$__b>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    $48 = 1;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i$i$i = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i$i$i = $33;
    }
    $34 = ($$0$i$i$i$i|0)==(-1);
    if ($34) {
     HEAP32[$__b>>2] = 0;
     $48 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $48 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $35 = HEAP32[$__e>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $$pre$i3$i$i19 = 0;$49 = 1;
  } else {
   $37 = (($35) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38|0)==($40|0);
   if ($41) {
    $42 = HEAP32[$35>>2]|0;
    $43 = (($42) + 36|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_ii[$44 & 127]($35)|0);
    $$0$i$i1$i$i = $45;
   } else {
    $46 = HEAP32[$38>>2]|0;
    $$0$i$i1$i$i = $46;
   }
   $47 = ($$0$i$i1$i$i|0)==(-1);
   if ($47) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i19 = 0;$49 = 1;
   } else {
    $$pre$i3$i$i19 = $35;$49 = 0;
   }
  }
  $tmp$i$i = $48 ^ $49;
  $50 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $50;
  $51 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $52 = (($51) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = (($57) + 36|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (FUNCTION_TABLE_ii[$59 & 127]($51)|0);
   $$0$i$i = $60;
  } else {
   $61 = HEAP32[$53>>2]|0;
   $$0$i$i = $61;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $62 = HEAP32[$__ct>>2]|0;
   $63 = (($62) + 28|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iii[$64 & 15]($__ct,$$0$i$i)|0);
   $__c$0 = $65;
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($7) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L46: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     $66 = HEAP8[$__st$137$us]|0;
     $67 = ($66<<24>>24)==(1);
     do {
      if ($67) {
       $68 = HEAP8[$__ky1$040$us]|0;
       $69 = $68 & 1;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $73 = (($__ky1$040$us) + 4|0);
        $75 = $73;
       } else {
        $71 = (($__ky1$040$us) + 8|0);
        $72 = HEAP32[$71>>2]|0;
        $75 = $72;
       }
       $74 = (($75) + ($__indx$0<<2)|0);
       $76 = HEAP32[$74>>2]|0;
       $77 = ($__c$0|0)==($76|0);
       if (!($77)) {
        HEAP8[$__st$137$us] = 0;
        $78 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $78;
        break;
       }
       if ($70) {
        $81 = $68&255;
        $82 = $81 >>> 1;
        $84 = $82;
       } else {
        $79 = (($__ky1$040$us) + 4|0);
        $80 = HEAP32[$79>>2]|0;
        $84 = $80;
       }
       $83 = ($84|0)==($$pre|0);
       if ($83) {
        HEAP8[$__st$137$us] = 2;
        $85 = (($__n_might_match$335$us) + -1)|0;
        $86 = (($__n_does_match$336$us) + 1)|0;
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $86;$__n_might_match$4$us = $85;
       } else {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
       }
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $87 = (($__ky1$040$us) + 12|0);
     $88 = ($87|0)==($__ke|0);
     if ($88) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L46;
     }
     $89 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $87;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $89;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     $90 = HEAP8[$__st$137]|0;
     $91 = ($90<<24>>24)==(1);
     do {
      if ($91) {
       $92 = HEAP8[$__ky1$040]|0;
       $93 = $92 & 1;
       $94 = ($93<<24>>24)==(0);
       if ($94) {
        $97 = (($__ky1$040) + 4|0);
        $99 = $97;
       } else {
        $95 = (($__ky1$040) + 8|0);
        $96 = HEAP32[$95>>2]|0;
        $99 = $96;
       }
       $98 = (($99) + ($__indx$0<<2)|0);
       $100 = HEAP32[$98>>2]|0;
       $101 = HEAP32[$__ct>>2]|0;
       $102 = (($101) + 28|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (FUNCTION_TABLE_iii[$103 & 15]($__ct,$100)|0);
       $105 = ($__c$0|0)==($104|0);
       if (!($105)) {
        HEAP8[$__st$137] = 0;
        $117 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $117;
        break;
       }
       $106 = HEAP8[$__ky1$040]|0;
       $107 = $106 & 1;
       $108 = ($107<<24>>24)==(0);
       if ($108) {
        $111 = $106&255;
        $112 = $111 >>> 1;
        $114 = $112;
       } else {
        $109 = (($__ky1$040) + 4|0);
        $110 = HEAP32[$109>>2]|0;
        $114 = $110;
       }
       $113 = ($114|0)==($$pre|0);
       if ($113) {
        HEAP8[$__st$137] = 2;
        $115 = (($__n_might_match$335) + -1)|0;
        $116 = (($__n_does_match$336) + 1)|0;
        $__consume$1$off0 = 1;$__n_does_match$4 = $116;$__n_might_match$4 = $115;
       } else {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
       }
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $118 = (($__ky1$040) + 12|0);
     $119 = ($118|0)==($__ke|0);
     if ($119) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L46;
     }
     $120 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $118;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $120;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $121 = HEAP32[$__b>>2]|0;
  $122 = (($121) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 16|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($123|0)==($125|0);
  if ($126) {
   $127 = HEAP32[$121>>2]|0;
   $128 = (($127) + 40|0);
   $129 = HEAP32[$128>>2]|0;
   (FUNCTION_TABLE_ii[$129 & 127]($121)|0);
  } else {
   $130 = (($123) + 4|0);
   HEAP32[$122>>2] = $130;
  }
  $131 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($131>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $132 = HEAP8[$__st$250]|0;
   $133 = ($132<<24>>24)==(2);
   if ($133) {
    $134 = HEAP8[$__ky2$051]|0;
    $135 = $134 & 1;
    $136 = ($135<<24>>24)==(0);
    if ($136) {
     $139 = $134&255;
     $140 = $139 >>> 1;
     $142 = $140;
    } else {
     $137 = (($__ky2$051) + 4|0);
     $138 = HEAP32[$137>>2]|0;
     $142 = $138;
    }
    $141 = ($142|0)==($$pre|0);
    if ($141) {
     $__n_does_match$6 = $__n_does_match$549;
    } else {
     HEAP8[$__st$250] = 0;
     $143 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $143;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$549;
   }
   $144 = (($__ky2$051) + 12|0);
   $145 = (($__st$250) + 1|0);
   $146 = ($144|0)==($__ke|0);
   if ($146) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L17;
   } else {
    $__ky2$051 = $144;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $145;
   }
  }
 }
 $147 = ($51|0)==(0|0);
 do {
  if ($147) {
   $184 = 1;
  } else {
   $148 = (($51) + 12|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($51) + 16|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ($149|0)==($151|0);
   if ($152) {
    $153 = HEAP32[$51>>2]|0;
    $154 = (($153) + 36|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (FUNCTION_TABLE_ii[$155 & 127]($51)|0);
    $$0$i$i$i$i11 = $156;
   } else {
    $157 = HEAP32[$149>>2]|0;
    $$0$i$i$i$i11 = $157;
   }
   $158 = ($$0$i$i$i$i11|0)==(-1);
   if ($158) {
    HEAP32[$__b>>2] = 0;
    $184 = 1;
    break;
   } else {
    $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
    $184 = $phitmp$i$i$i14;
    break;
   }
  }
 } while(0);
 $159 = ($$pre$i3$i$i19|0)==(0|0);
 do {
  if ($159) {
   label = 85;
  } else {
   $160 = (($$pre$i3$i$i19) + 12|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($$pre$i3$i$i19) + 16|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($161|0)==($163|0);
   if ($164) {
    $165 = HEAP32[$$pre$i3$i$i19>>2]|0;
    $166 = (($165) + 36|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (FUNCTION_TABLE_ii[$167 & 127]($$pre$i3$i$i19)|0);
    $$0$i$i1$i$i17 = $168;
   } else {
    $169 = HEAP32[$161>>2]|0;
    $$0$i$i1$i$i17 = $169;
   }
   $170 = ($$0$i$i1$i$i17|0)==(-1);
   if ($170) {
    HEAP32[$__e>>2] = 0;
    label = 85;
    break;
   } else {
    if ($184) {
     break;
    } else {
     label = 87;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 85) {
  if ($184) {
   label = 87;
  }
 }
 if ((label|0) == 87) {
  $171 = HEAP32[$__err>>2]|0;
  $172 = $171 | 2;
  HEAP32[$__err>>2] = $172;
 }
 L124: do {
  if ($7) {
   label = 92;
  } else {
   $173 = HEAP8[$__status$0]|0;
   $174 = ($173<<24>>24)==(2);
   if ($174) {
    $$028 = $__kb;
   } else {
    $$03082 = $__kb;$__st$32983 = $__status$0;
    while(1) {
     $178 = (($$03082) + 12|0);
     $179 = ($178|0)==($__ke|0);
     $176 = (($__st$32983) + 1|0);
     if ($179) {
      label = 92;
      break L124;
     }
     $175 = HEAP8[$176]|0;
     $177 = ($175<<24>>24)==(2);
     if ($177) {
      $$028 = $178;
      break;
     } else {
      $$03082 = $178;$__st$32983 = $176;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 92) {
  $180 = HEAP32[$__err>>2]|0;
  $181 = $180 | 4;
  HEAP32[$__err>>2] = $181;
  $$028 = $__ke;
 }
 $182 = ($183|0)==(0|0);
 if ($182) {
  STACKTOP = sp;return ($$028|0);
 }
 _free($183);
 STACKTOP = sp;return ($$028|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $135 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$70 = 0;
   } else {
    $135 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($70|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($70) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($70) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$70>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($70)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $70;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 60;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $140 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $140 = 1;$70 = 0;
   } else {
    $140 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($140) {
      $141 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($140) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 $107 = tempRet0;
 $108 = $__v;
 $109 = $108;
 HEAP32[$109>>2] = $106;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = $107;
 $112 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$112,$__err);
 $113 = ($70|0)==(0|0);
 if ($113) {
  $139 = 0;$142 = 1;
 } else {
  $114 = (($70) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($70) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$70>>2]|0;
   $120 = (($119) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 127]($70)|0);
   $$0$i$i$i$i = $122;
  } else {
   $123 = HEAP32[$115>>2]|0;
   $$0$i$i$i$i = $123;
  }
  $124 = ($$0$i$i$i$i|0)==(-1);
  if ($124) {
   HEAP32[$__b>>2] = 0;
   $139 = 0;$142 = 1;
  } else {
   $139 = $70;$142 = 0;
  }
 }
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 60;
  } else {
   $126 = (($$pre$i3$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i3$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i1$i$i = $135;
   }
   $136 = ($$0$i$i1$i$i|0)==(-1);
   if ($136) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($142) {
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($142)) {
   HEAP32[$agg$result>>2] = $139;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $137 = HEAP32[$__err>>2]|0;
 $138 = $137 | 2;
 HEAP32[$__err>>2] = $138;
 HEAP32[$agg$result>>2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $135 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$70 = 0;
   } else {
    $135 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 HEAP16[$__v>>1] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($70|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($70) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($70) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$70>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($70)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $70;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 60;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $135 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$70 = 0;
   } else {
    $135 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($70|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($70) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($70) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$70>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($70)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $70;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 60;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $135 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$70 = 0;
   } else {
    $135 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($135) {
      $136 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 HEAP32[$__v>>2] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($70|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($70) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($70) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$70>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($70)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $70;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 60;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0$i = 0;
 } else if ((($2|0) == 64)) {
  $$0$i = 8;
 } else if ((($2|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $3 = HEAP8[$__buf]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = (($__buf) + 1|0);
  $$pre35 = (($__buf) + 8|0);
  $$pre$phi34Z2D = $8;$$pre$phi36Z2D = $$pre35;$9 = $8;
 } else {
  $6 = (($__buf) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $$pre33 = (($__buf) + 1|0);
  $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $6;$9 = $7;
 }
 HEAP32[$__a_end>>2] = $9;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $10 = (($__buf) + 4|0);
 $11 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $9;
 L10: while(1) {
  $12 = ($$pre$i$i$i5|0)==(0|0);
  if ($12) {
   $140 = 1;$70 = 0;
  } else {
   $13 = (($$pre$i$i$i5) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($$pre$i$i$i5) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = HEAP32[$$pre$i$i$i5>>2]|0;
    $19 = (($18) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $21;
   } else {
    $22 = HEAP32[$14>>2]|0;
    $$0$i$i$i$i3 = $22;
   }
   $23 = ($$0$i$i$i$i3|0)==(-1);
   if ($23) {
    HEAP32[$__b>>2] = 0;
    $140 = 1;$70 = 0;
   } else {
    $140 = 0;$70 = $$pre$i$i$i5;
   }
  }
  $24 = HEAP32[$__e>>2]|0;
  $25 = ($24|0)==(0|0);
  do {
   if ($25) {
    label = 21;
   } else {
    $26 = (($24) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($24) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $31 = HEAP32[$24>>2]|0;
     $32 = (($31) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (FUNCTION_TABLE_ii[$33 & 127]($24)|0);
     $$0$i$i1$i$i9 = $34;
    } else {
     $35 = HEAP32[$27>>2]|0;
     $$0$i$i1$i$i9 = $35;
    }
    $36 = ($$0$i$i1$i$i9|0)==(-1);
    if ($36) {
     HEAP32[$__e>>2] = 0;
     label = 21;
     break;
    } else {
     if ($140) {
      $141 = $24;
      break;
     } else {
      $$pre$i3$i$i = $24;$__a$2 = $__a$0;
      break L10;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   if ($140) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $37 = HEAP32[$__a_end>>2]|0;
  $38 = $37;
  $39 = $__a$0;
  $40 = (($38) - ($39))|0;
  $41 = HEAP8[$__buf]|0;
  $42 = $41 & 1;
  $43 = ($42<<24>>24)==(0);
  if ($43) {
   $45 = $41&255;
   $46 = $45 >>> 1;
   $48 = $46;
  } else {
   $44 = HEAP32[$10>>2]|0;
   $48 = $44;
  }
  $47 = ($40|0)==($48|0);
  if ($47) {
   if ($43) {
    $50 = $41&255;
    $51 = $50 >>> 1;
    $52 = $41&255;
    $53 = $52 >>> 1;
    $55 = $53;$68 = $51;
   } else {
    $49 = HEAP32[$10>>2]|0;
    $55 = $49;$68 = $49;
   }
   $54 = $55 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$54,0);
   $56 = HEAP8[$__buf]|0;
   $57 = $56 & 1;
   $58 = ($57<<24>>24)==(0);
   if ($58) {
    $61 = 10;
   } else {
    $59 = HEAP32[$__buf>>2]|0;
    $60 = $59 & -2;
    $phitmp$i23 = (($60) + -1)|0;
    $61 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$61,0);
   $62 = HEAP8[$__buf]|0;
   $63 = $62 & 1;
   $64 = ($63<<24>>24)==(0);
   if ($64) {
    $67 = $$pre$phi34Z2D;
   } else {
    $65 = HEAP32[$$pre$phi36Z2D>>2]|0;
    $67 = $65;
   }
   $66 = (($67) + ($68)|0);
   HEAP32[$__a_end>>2] = $66;
   $__a$1 = $67;
  } else {
   $__a$1 = $__a$0;
  }
  $69 = (($70) + 12|0);
  $71 = HEAP32[$69>>2]|0;
  $72 = (($70) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71|0)==($73|0);
  if ($74) {
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (FUNCTION_TABLE_ii[$77 & 127]($70)|0);
   $$0$i$i = $78;
  } else {
   $79 = HEAP32[$71>>2]|0;
   $$0$i$i = $79;
  }
  $80 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$pre$i3$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69>>2]|0;
  $83 = HEAP32[$72>>2]|0;
  $84 = ($82|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$70>>2]|0;
   $86 = (($85) + 40|0);
   $87 = HEAP32[$86>>2]|0;
   (FUNCTION_TABLE_ii[$87 & 127]($70)|0);
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  } else {
   $88 = (($82) + 4|0);
   HEAP32[$69>>2] = $88;
   $$pre$i$i$i5 = $70;$__a$0 = $__a$1;
   continue;
  }
 }
 $89 = HEAP8[$__grouping]|0;
 $90 = $89 & 1;
 $91 = ($90<<24>>24)==(0);
 if ($91) {
  $94 = $89&255;
  $95 = $94 >>> 1;
  $97 = $95;
 } else {
  $92 = (($__grouping) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $97 = $93;
 }
 $96 = ($97|0)==(0);
 if (!($96)) {
  $98 = HEAP32[$__g_end>>2]|0;
  $99 = $98;
  $100 = $__g;
  $101 = (($99) - ($100))|0;
  $102 = ($101|0)<(160);
  if ($102) {
   $103 = HEAP32[$__dc>>2]|0;
   $104 = (($98) + 4|0);
   HEAP32[$__g_end>>2] = $104;
   HEAP32[$98>>2] = $103;
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$105,$__err,$$0$i)|0);
 $107 = tempRet0;
 $108 = $__v;
 $109 = $108;
 HEAP32[$109>>2] = $106;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = $107;
 $112 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$112,$__err);
 $113 = ($70|0)==(0|0);
 if ($113) {
  $139 = 0;$142 = 1;
 } else {
  $114 = (($70) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($70) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$70>>2]|0;
   $120 = (($119) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 127]($70)|0);
   $$0$i$i$i$i = $122;
  } else {
   $123 = HEAP32[$115>>2]|0;
   $$0$i$i$i$i = $123;
  }
  $124 = ($$0$i$i$i$i|0)==(-1);
  if ($124) {
   HEAP32[$__b>>2] = 0;
   $139 = 0;$142 = 1;
  } else {
   $139 = $70;$142 = 0;
  }
 }
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 60;
  } else {
   $126 = (($$pre$i3$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i3$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i1$i$i = $135;
   }
   $136 = ($$0$i$i1$i$i|0)==(-1);
   if ($136) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($142) {
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($142)) {
   HEAP32[$agg$result>>2] = $139;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $137 = HEAP32[$__err>>2]|0;
 $138 = $137 | 2;
 HEAP32[$__err>>2] = $138;
 HEAP32[$agg$result>>2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $95 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $95 = $91;
 }
 $94 = ($95|0)==(0);
 if (!($94)) {
  $96 = HEAP8[$__in_units]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF32[$__v>>2] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $95 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $95 = $91;
 }
 $94 = ($95|0)==(0);
 if (!($94)) {
  $96 = HEAP8[$__in_units]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF64[$__v>>3] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $0 = HEAP8[$__buf]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = (($__buf) + 1|0);
  $$pre36 = (($__buf) + 8|0);
  $$pre$phi35Z2D = $5;$$pre$phi37Z2D = $$pre36;$6 = $5;
 } else {
  $3 = (($__buf) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$pre34 = (($__buf) + 1|0);
  $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $3;$6 = $4;
 }
 HEAP32[$__a_end>>2] = $6;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units] = 1;
 HEAP8[$__exp] = 69;
 $7 = (($__buf) + 4|0);
 $8 = HEAP32[$__decimal_point>>2]|0;
 $9 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $6;
 L5: while(1) {
  $10 = ($$pre$i$i$i5|0)==(0|0);
  if ($10) {
   $135 = 1;$68 = 0;
  } else {
   $11 = (($$pre$i$i$i5) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($$pre$i$i$i5) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$$pre$i$i$i5>>2]|0;
    $17 = (($16) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_ii[$18 & 127]($$pre$i$i$i5)|0);
    $$0$i$i$i$i3 = $19;
   } else {
    $20 = HEAP32[$12>>2]|0;
    $$0$i$i$i$i3 = $20;
   }
   $21 = ($$0$i$i$i$i3|0)==(-1);
   if ($21) {
    HEAP32[$__b>>2] = 0;
    $135 = 1;$68 = 0;
   } else {
    $135 = 0;$68 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    label = 17;
   } else {
    $24 = (($22) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25|0)==($27|0);
    if ($28) {
     $29 = HEAP32[$22>>2]|0;
     $30 = (($29) + 36|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_ii[$31 & 127]($22)|0);
     $$0$i$i1$i$i9 = $32;
    } else {
     $33 = HEAP32[$25>>2]|0;
     $$0$i$i1$i$i9 = $33;
    }
    $34 = ($$0$i$i1$i$i9|0)==(-1);
    if ($34) {
     HEAP32[$__e>>2] = 0;
     label = 17;
     break;
    } else {
     if ($135) {
      $136 = $22;
      break;
     } else {
      $$pre$i3$i$i = $22;$__a$2 = $__a$0;
      break L5;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   if ($135) {
    $$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $136 = 0;
   }
  }
  $35 = HEAP32[$__a_end>>2]|0;
  $36 = $35;
  $37 = $__a$0;
  $38 = (($36) - ($37))|0;
  $39 = HEAP8[$__buf]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $43 = $39&255;
   $44 = $43 >>> 1;
   $46 = $44;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $46 = $42;
  }
  $45 = ($38|0)==($46|0);
  if ($45) {
   if ($41) {
    $48 = $39&255;
    $49 = $48 >>> 1;
    $50 = $39&255;
    $51 = $50 >>> 1;
    $53 = $51;$66 = $49;
   } else {
    $47 = HEAP32[$7>>2]|0;
    $53 = $47;$66 = $47;
   }
   $52 = $53 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$52,0);
   $54 = HEAP8[$__buf]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $59 = 10;
   } else {
    $57 = HEAP32[$__buf>>2]|0;
    $58 = $57 & -2;
    $phitmp$i23 = (($58) + -1)|0;
    $59 = $phitmp$i23;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$59,0);
   $60 = HEAP8[$__buf]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = $$pre$phi35Z2D;
   } else {
    $63 = HEAP32[$$pre$phi37Z2D>>2]|0;
    $65 = $63;
   }
   $64 = (($65) + ($66)|0);
   HEAP32[$__a_end>>2] = $64;
   $__a$1 = $65;
  } else {
   $__a$1 = $__a$0;
  }
  $67 = (($68) + 12|0);
  $69 = HEAP32[$67>>2]|0;
  $70 = (($68) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)==($71|0);
  if ($72) {
   $73 = HEAP32[$68>>2]|0;
   $74 = (($73) + 36|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 127]($68)|0);
   $$0$i$i = $76;
  } else {
   $77 = HEAP32[$69>>2]|0;
   $$0$i$i = $77;
  }
  $78 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$8,$9,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $79 = ($78|0)==(0);
  if (!($79)) {
   $$pre$i3$i$i = $136;$__a$2 = $__a$1;
   break;
  }
  $80 = HEAP32[$67>>2]|0;
  $81 = HEAP32[$70>>2]|0;
  $82 = ($80|0)==($81|0);
  if ($82) {
   $83 = HEAP32[$68>>2]|0;
   $84 = (($83) + 40|0);
   $85 = HEAP32[$84>>2]|0;
   (FUNCTION_TABLE_ii[$85 & 127]($68)|0);
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  } else {
   $86 = (($80) + 4|0);
   HEAP32[$67>>2] = $86;
   $$pre$i$i$i5 = $68;$__a$0 = $__a$1;
   continue;
  }
 }
 $87 = HEAP8[$__grouping]|0;
 $88 = $87 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $92 = $87&255;
  $93 = $92 >>> 1;
  $95 = $93;
 } else {
  $90 = (($__grouping) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $95 = $91;
 }
 $94 = ($95|0)==(0);
 if (!($94)) {
  $96 = HEAP8[$__in_units]|0;
  $97 = ($96<<24>>24)==(0);
  if (!($97)) {
   $98 = HEAP32[$__g_end>>2]|0;
   $99 = $98;
   $100 = $__g;
   $101 = (($99) - ($100))|0;
   $102 = ($101|0)<(160);
   if ($102) {
    $103 = HEAP32[$__dc>>2]|0;
    $104 = (($98) + 4|0);
    HEAP32[$__g_end>>2] = $104;
    HEAP32[$98>>2] = $103;
   }
  }
 }
 $105 = HEAP32[$__a_end>>2]|0;
 $106 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$105,$__err));
 HEAPF64[$__v>>3] = $106;
 $107 = HEAP32[$__g_end>>2]|0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$107,$__err);
 $108 = ($68|0)==(0|0);
 if ($108) {
  $134 = 0;$137 = 1;
 } else {
  $109 = (($68) + 12|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($68) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($110|0)==($112|0);
  if ($113) {
   $114 = HEAP32[$68>>2]|0;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 127]($68)|0);
   $$0$i$i$i$i = $117;
  } else {
   $118 = HEAP32[$110>>2]|0;
   $$0$i$i$i$i = $118;
  }
  $119 = ($$0$i$i$i$i|0)==(-1);
  if ($119) {
   HEAP32[$__b>>2] = 0;
   $134 = 0;$137 = 1;
  } else {
   $134 = $68;$137 = 0;
  }
 }
 $120 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($120) {
   label = 57;
  } else {
   $121 = (($$pre$i3$i$i) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($$pre$i3$i$i) + 16|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122|0)==($124|0);
   if ($125) {
    $126 = HEAP32[$$pre$i3$i$i>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_ii[$128 & 127]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $129;
   } else {
    $130 = HEAP32[$122>>2]|0;
    $$0$i$i1$i$i = $130;
   }
   $131 = ($$0$i$i1$i$i|0)==(-1);
   if ($131) {
    HEAP32[$__e>>2] = 0;
    label = 57;
    break;
   }
   if ($137) {
    HEAP32[$agg$result>>2] = $134;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 57) {
  if (!($137)) {
   HEAP32[$agg$result>>2] = $134;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $132 = HEAP32[$__err>>2]|0;
 $133 = $132 | 2;
 HEAP32[$__err>>2] = $133;
 HEAP32[$agg$result>>2] = $134;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01$i$i = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $or$cond$i = 0, $phitmp$i26 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 192|0;
 $0 = sp + 188|0;
 $__buf = sp + 176|0;
 $__g = sp + 16|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[6872>>2]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = 6872;
  $4 = (($vararg_buffer) + 4|0);
  HEAP32[$4>>2] = (123);
  $5 = (($vararg_buffer) + 8|0);
  HEAP32[$5>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$vararg_buffer,124);
 }
 $6 = HEAP32[((6872 + 4|0))>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($1) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $21 = HEAP32[$18>>2]|0;
 $22 = (($21) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 (FUNCTION_TABLE_iiiii[$23 & 7]($18,5424,((5424 + 26|0)),$__atoms)|0);
 $24 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10,0);
 $25 = HEAP8[$__buf]|0;
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $30 = (($__buf) + 1|0);
  $$pre42 = (($__buf) + 8|0);
  $$pre$phi41Z2D = $30;$$pre$phi43Z2D = $$pre42;$200 = $30;
 } else {
  $28 = (($__buf) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $$pre40 = (($__buf) + 1|0);
  $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $28;$200 = $29;
 }
 $31 = (($__buf) + 4|0);
 $32 = (($__atoms) + 96|0);
 $33 = (($__atoms) + 100|0);
 $34 = $__g;
 $35 = (($__atoms) + 104|0);
 $36 = $__atoms;
 $37 = (($__grouping) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i10 = $$pre;$124 = $__g;$128 = 0;$64 = $200;$__a$0 = $200;
 L14: while(1) {
  $38 = ($$pre$i$i$i10|0)==(0|0);
  if ($38) {
   $201 = 1;$96 = 0;
  } else {
   $39 = (($$pre$i$i$i10) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($$pre$i$i$i10) + 16|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($40|0)==($42|0);
   if ($43) {
    $44 = HEAP32[$$pre$i$i$i10>>2]|0;
    $45 = (($44) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_ii[$46 & 127]($$pre$i$i$i10)|0);
    $$0$i$i$i$i8 = $47;
   } else {
    $48 = HEAP32[$40>>2]|0;
    $$0$i$i$i$i8 = $48;
   }
   $49 = ($$0$i$i$i$i8|0)==(-1);
   if ($49) {
    HEAP32[$__b>>2] = 0;
    $201 = 1;$96 = 0;
   } else {
    $201 = 0;$96 = $$pre$i$i$i10;
   }
  }
  $50 = HEAP32[$__e>>2]|0;
  $51 = ($50|0)==(0|0);
  do {
   if ($51) {
    label = 22;
   } else {
    $52 = (($50) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($50) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($53|0)==($55|0);
    if ($56) {
     $57 = HEAP32[$50>>2]|0;
     $58 = (($57) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (FUNCTION_TABLE_ii[$59 & 127]($50)|0);
     $$0$i$i1$i$i14 = $60;
    } else {
     $61 = HEAP32[$53>>2]|0;
     $$0$i$i1$i$i14 = $61;
    }
    $62 = ($$0$i$i1$i$i14|0)==(-1);
    if ($62) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($201) {
      break;
     } else {
      $__a$2 = $__a$0;
      break L14;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($201) {
    $__a$2 = $__a$0;
    break;
   }
  }
  $63 = $64;
  $65 = $__a$0;
  $66 = (($63) - ($65))|0;
  $67 = HEAP8[$__buf]|0;
  $68 = $67 & 1;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $71 = $67&255;
   $72 = $71 >>> 1;
   $74 = $72;
  } else {
   $70 = HEAP32[$31>>2]|0;
   $74 = $70;
  }
  $73 = ($66|0)==($74|0);
  if ($73) {
   if ($69) {
    $76 = $67&255;
    $77 = $76 >>> 1;
    $78 = $67&255;
    $79 = $78 >>> 1;
    $81 = $79;$94 = $77;
   } else {
    $75 = HEAP32[$31>>2]|0;
    $81 = $75;$94 = $75;
   }
   $80 = $81 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$80,0);
   $82 = HEAP8[$__buf]|0;
   $83 = $82 & 1;
   $84 = ($83<<24>>24)==(0);
   if ($84) {
    $87 = 10;
   } else {
    $85 = HEAP32[$__buf>>2]|0;
    $86 = $85 & -2;
    $phitmp$i26 = (($86) + -1)|0;
    $87 = $phitmp$i26;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$87,0);
   $88 = HEAP8[$__buf]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    $93 = $$pre$phi41Z2D;
   } else {
    $91 = HEAP32[$$pre$phi43Z2D>>2]|0;
    $93 = $91;
   }
   $92 = (($93) + ($94)|0);
   $107 = $92;$__a$1 = $93;
  } else {
   $107 = $64;$__a$1 = $__a$0;
  }
  $95 = (($96) + 12|0);
  $97 = HEAP32[$95>>2]|0;
  $98 = (($96) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97|0)==($99|0);
  if ($100) {
   $101 = HEAP32[$96>>2]|0;
   $102 = (($101) + 36|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (FUNCTION_TABLE_ii[$103 & 127]($96)|0);
   $$0$i$i = $104;
  } else {
   $105 = HEAP32[$97>>2]|0;
   $$0$i$i = $105;
  }
  $106 = ($107|0)==($__a$1|0);
  do {
   if ($106) {
    $108 = HEAP32[$32>>2]|0;
    $109 = ($108|0)==($$0$i$i|0);
    if (!($109)) {
     $110 = HEAP32[$33>>2]|0;
     $111 = ($110|0)==($$0$i$i|0);
     if (!($111)) {
      label = 43;
      break;
     }
    }
    $112 = $109 ? 43 : 45;
    $113 = (($107) + 1|0);
    HEAP8[$107] = $112;
    $$ph = $113;$$ph34 = $124;$$ph35 = 0;
   } else {
    label = 43;
   }
  } while(0);
  do {
   if ((label|0) == 43) {
    label = 0;
    $114 = HEAP8[$__grouping]|0;
    $115 = $114 & 1;
    $116 = ($115<<24>>24)==(0);
    if ($116) {
     $118 = $114&255;
     $119 = $118 >>> 1;
     $121 = $119;
    } else {
     $117 = HEAP32[$37>>2]|0;
     $121 = $117;
    }
    $120 = ($121|0)!=(0);
    $122 = ($$0$i$i|0)==(0);
    $or$cond$i = $120 & $122;
    if ($or$cond$i) {
     $123 = $124;
     $125 = (($123) - ($34))|0;
     $126 = ($125|0)<(160);
     if (!($126)) {
      $$ph = $107;$$ph34 = $124;$$ph35 = $128;
      break;
     }
     $127 = (($124) + 4|0);
     HEAP32[$124>>2] = $128;
     $$ph = $107;$$ph34 = $127;$$ph35 = 0;
     break;
    } else {
     $$01$i$i = $__atoms;
    }
    while(1) {
     $131 = HEAP32[$$01$i$i>>2]|0;
     $132 = ($131|0)==($$0$i$i|0);
     $130 = (($$01$i$i) + 4|0);
     if ($132) {
      $$0$lcssa$i$i = $$01$i$i;
      break;
     }
     $129 = ($130|0)==($35|0);
     if ($129) {
      $$0$lcssa$i$i = $35;
      break;
     } else {
      $$01$i$i = $130;
     }
    }
    $133 = $$0$lcssa$i$i;
    $134 = (($133) - ($36))|0;
    $135 = $134 >> 2;
    $136 = ($134|0)>(92);
    if ($136) {
     $__a$2 = $__a$1;
     break L14;
    }
    $137 = ($134|0)<(88);
    if ($137) {
     $148 = (5424 + ($135)|0);
     $149 = HEAP8[$148]|0;
     $150 = (($107) + 1|0);
     HEAP8[$107] = $149;
     $151 = (($128) + 1)|0;
     $$ph = $150;$$ph34 = $124;$$ph35 = $151;
     break;
    }
    if ($106) {
     $__a$2 = $107;
     break L14;
    }
    $138 = $107;
    $139 = $__a$1;
    $140 = (($138) - ($139))|0;
    $141 = ($140|0)<(3);
    if (!($141)) {
     $__a$2 = $__a$1;
     break L14;
    }
    $142 = (($107) + -1|0);
    $143 = HEAP8[$142]|0;
    $144 = ($143<<24>>24)==(48);
    if (!($144)) {
     $__a$2 = $__a$1;
     break L14;
    }
    $145 = (5424 + ($135)|0);
    $146 = HEAP8[$145]|0;
    $147 = (($107) + 1|0);
    HEAP8[$107] = $146;
    $$ph = $147;$$ph34 = $124;$$ph35 = 0;
   }
  } while(0);
  $152 = HEAP32[$__b>>2]|0;
  $153 = (($152) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($152) + 16|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($154|0)==($156|0);
  if ($157) {
   $158 = HEAP32[$152>>2]|0;
   $159 = (($158) + 40|0);
   $160 = HEAP32[$159>>2]|0;
   (FUNCTION_TABLE_ii[$160 & 127]($152)|0);
   $$pre$i$i$i10 = $152;$124 = $$ph34;$128 = $$ph35;$64 = $$ph;$__a$0 = $__a$1;
   continue;
  } else {
   $161 = (($154) + 4|0);
   HEAP32[$153>>2] = $161;
   $$pre$i$i$i10 = $152;$124 = $$ph34;$128 = $$ph35;$64 = $$ph;$__a$0 = $__a$1;
   continue;
  }
 }
 $162 = (($__a$2) + 3|0);
 HEAP8[$162] = 0;
 $163 = HEAP8[6776]|0;
 $164 = ($163<<24>>24)==(0);
 if ($164) {
  $165 = (___cxa_guard_acquire((6776|0))|0);
  $166 = ($165|0)==(0);
  if (!($166)) {
   $167 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $167;
   ___cxa_guard_release((6776|0));
  }
 }
 $168 = HEAP32[6768>>2]|0;
 HEAP32[$vararg_buffer>>2] = $__v;
 $169 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a$2,$168,5464,$vararg_buffer)|0);
 $170 = ($169|0)==(1);
 if (!($170)) {
  HEAP32[$__err>>2] = 4;
 }
 $171 = HEAP32[$__b>>2]|0;
 $172 = ($171|0)==(0|0);
 if ($172) {
  $199 = 0;$202 = 1;
 } else {
  $173 = (($171) + 12|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($171) + 16|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174|0)==($176|0);
  if ($177) {
   $178 = HEAP32[$171>>2]|0;
   $179 = (($178) + 36|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (FUNCTION_TABLE_ii[$180 & 127]($171)|0);
   $$0$i$i$i$i = $181;
  } else {
   $182 = HEAP32[$174>>2]|0;
   $$0$i$i$i$i = $182;
  }
  $183 = ($$0$i$i$i$i|0)==(-1);
  if ($183) {
   HEAP32[$__b>>2] = 0;
   $199 = 0;$202 = 1;
  } else {
   $199 = $171;$202 = 0;
  }
 }
 $184 = HEAP32[$__e>>2]|0;
 $185 = ($184|0)==(0|0);
 do {
  if ($185) {
   label = 78;
  } else {
   $186 = (($184) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (($184) + 16|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($187|0)==($189|0);
   if ($190) {
    $191 = HEAP32[$184>>2]|0;
    $192 = (($191) + 36|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (FUNCTION_TABLE_ii[$193 & 127]($184)|0);
    $$0$i$i1$i$i = $194;
   } else {
    $195 = HEAP32[$187>>2]|0;
    $$0$i$i1$i$i = $195;
   }
   $196 = ($$0$i$i1$i$i|0)==(-1);
   if ($196) {
    HEAP32[$__e>>2] = 0;
    label = 78;
    break;
   }
   if ($202) {
    HEAP32[$agg$result>>2] = $199;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 78) {
  if (!($202)) {
   HEAP32[$agg$result>>2] = $199;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 }
 $197 = HEAP32[$__err>>2]|0;
 $198 = $197 | 2;
 HEAP32[$__err>>2] = $198;
 HEAP32[$agg$result>>2] = $199;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (5424 + ($35)|0);
   $47 = HEAP8[$46]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (5424 + ($35)|0);
 $50 = HEAP8[$49]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i3>>2] = 6880;
  $3 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i3,124);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$17>>2]|0;
 $21 = (($20) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 (FUNCTION_TABLE_iiiii[$22 & 7]($17,5424,((5424 + 26|0)),$__atoms)|0);
 $23 = HEAP32[$__loc>>2]|0;
 $24 = HEAP32[7024>>2]|0;
 $25 = ($24|0)==(-1);
 if (!($25)) {
  HEAP32[$__p$i$i$i$i3>>2] = 7024;
  $26 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$26>>2] = (123);
  $27 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$27>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i3,124);
 }
 $28 = HEAP32[((7024 + 4|0))>>2]|0;
 $29 = (($28) + -1)|0;
 $30 = (($23) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($23) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $31;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($37>>>0)>($29>>>0);
 if (!($38)) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 }
 $39 = (($33) + ($29<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 } else {
  $43 = HEAP32[$40>>2]|0;
  $44 = (($43) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 127]($40)|0);
  HEAP8[$__thousands_sep] = $46;
  $47 = HEAP32[$40>>2]|0;
  $48 = (($47) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vii[$49 & 63]($agg$result,$40);
  $50 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i3>>2] = 6880;
  $3 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i3,124);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$17>>2]|0;
 $21 = (($20) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 (FUNCTION_TABLE_iiiii[$22 & 7]($17,5424,((5424 + 32|0)),$__atoms)|0);
 $23 = HEAP32[$__loc>>2]|0;
 $24 = HEAP32[7024>>2]|0;
 $25 = ($24|0)==(-1);
 if (!($25)) {
  HEAP32[$__p$i$i$i$i3>>2] = 7024;
  $26 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$26>>2] = (123);
  $27 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$27>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i3,124);
 }
 $28 = HEAP32[((7024 + 4|0))>>2]|0;
 $29 = (($28) + -1)|0;
 $30 = (($23) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($23) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $31;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($37>>>0)>($29>>>0);
 if (!($38)) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 }
 $39 = (($33) + ($29<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 } else {
  $43 = HEAP32[$40>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 127]($40)|0);
  HEAP8[$__decimal_point] = $46;
  $47 = HEAP32[$40>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 127]($40)|0);
  HEAP8[$__thousands_sep] = $50;
  $51 = HEAP32[$40>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 63]($agg$result,$40);
  $54 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (5424 + ($47)|0);
 $50 = HEAP8[$49]|0;
 if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp] = $70;
   $71 = HEAP8[$__in_units]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units] = 0;
    $73 = HEAP8[$__grouping]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i3>>2] = 6872;
  $3 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i3,124);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$17>>2]|0;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 (FUNCTION_TABLE_iiiii[$22 & 7]($17,5424,((5424 + 26|0)),$__atoms)|0);
 $23 = HEAP32[$__loc>>2]|0;
 $24 = HEAP32[7032>>2]|0;
 $25 = ($24|0)==(-1);
 if (!($25)) {
  HEAP32[$__p$i$i$i$i3>>2] = 7032;
  $26 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$26>>2] = (123);
  $27 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$27>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i3,124);
 }
 $28 = HEAP32[((7032 + 4|0))>>2]|0;
 $29 = (($28) + -1)|0;
 $30 = (($23) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($23) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $31;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($37>>>0)>($29>>>0);
 if (!($38)) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 }
 $39 = (($33) + ($29<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 } else {
  $43 = HEAP32[$40>>2]|0;
  $44 = (($43) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 127]($40)|0);
  HEAP32[$__thousands_sep>>2] = $46;
  $47 = HEAP32[$40>>2]|0;
  $48 = (($47) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vii[$49 & 63]($agg$result,$40);
  $50 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i$i3 = sp;
 $__loc = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i3>>2] = 6872;
  $3 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i3,124);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$17>>2]|0;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 (FUNCTION_TABLE_iiiii[$22 & 7]($17,5424,((5424 + 32|0)),$__atoms)|0);
 $23 = HEAP32[$__loc>>2]|0;
 $24 = HEAP32[7032>>2]|0;
 $25 = ($24|0)==(-1);
 if (!($25)) {
  HEAP32[$__p$i$i$i$i3>>2] = 7032;
  $26 = (($__p$i$i$i$i3) + 4|0);
  HEAP32[$26>>2] = (123);
  $27 = (($__p$i$i$i$i3) + 8|0);
  HEAP32[$27>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i3,124);
 }
 $28 = HEAP32[((7032 + 4|0))>>2]|0;
 $29 = (($28) + -1)|0;
 $30 = (($23) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($23) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $31;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($37>>>0)>($29>>>0);
 if (!($38)) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 }
 $39 = (($33) + ($29<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $42 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($42);
  ___cxa_throw(($42|0),(14840|0),(112|0));
  // unreachable;
 } else {
  $43 = HEAP32[$40>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 127]($40)|0);
  HEAP32[$__decimal_point>>2] = $46;
  $47 = HEAP32[$40>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 127]($40)|0);
  HEAP32[$__thousands_sep>>2] = $50;
  $51 = HEAP32[$40>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 63]($agg$result,$40);
  $54 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3] = 46;
  $5 = HEAP8[$__grouping]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (5424 + ($48)|0);
 $51 = HEAP8[$50]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp] = $69;
   $70 = HEAP8[$__in_units]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units] = 0;
    $72 = HEAP8[$__grouping]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre5 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[7024>>2]|0;
 $13 = ($12|0)==(-1);
 if (!($13)) {
  HEAP32[$$byval_copy>>2] = 7024;
  $14 = (($$byval_copy) + 4|0);
  HEAP32[$14>>2] = (123);
  $15 = (($$byval_copy) + 8|0);
  HEAP32[$15>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$$byval_copy,124);
 }
 $16 = HEAP32[((7024 + 4|0))>>2]|0;
 $17 = (($16) + -1)|0;
 $18 = (($11) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($11) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = $24 >> 2;
 $26 = ($25>>>0)>($17>>>0);
 if (!($26)) {
  $30 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw(($30|0),(14840|0),(112|0));
  // unreachable;
 }
 $27 = (($21) + ($17<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw(($30|0),(14840|0),(112|0));
  // unreachable;
 }
 $31 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$28>>2]|0;
 if ($__v) {
  $33 = (($32) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$34 & 63]($__nm,$28);
 } else {
  $35 = (($32) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($__nm,$28);
 }
 $37 = HEAP8[$__nm]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $42 = (($__nm) + 1|0);
  $$pre7 = (($__nm) + 8|0);
  $$ph = $42;$$pre$phi6Z2D = $42;$$pre$phi8Z2D = $$pre7;
 } else {
  $40 = (($__nm) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $$pre5 = (($__nm) + 1|0);
  $$ph = $41;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $40;
 }
 $43 = (($__nm) + 4|0);
 $45 = $37;$55 = $$ph;
 while(1) {
  $44 = $45 & 1;
  $46 = ($44<<24>>24)==(0);
  if ($46) {
   $49 = $45&255;
   $50 = $49 >>> 1;
   $52 = $$pre$phi6Z2D;$53 = $50;
  } else {
   $47 = HEAP32[$$pre$phi8Z2D>>2]|0;
   $48 = HEAP32[$43>>2]|0;
   $52 = $47;$53 = $48;
  }
  $51 = (($52) + ($53)|0);
  $54 = ($55|0)==($51|0);
  if ($54) {
   break;
  }
  $56 = HEAP8[$55]|0;
  $57 = HEAP32[$__s>>2]|0;
  $58 = ($57|0)==(0|0);
  do {
   if (!($58)) {
    $59 = (($57) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($57) + 28|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($60|0)==($62|0);
    if (!($63)) {
     $64 = (($60) + 1|0);
     HEAP32[$59>>2] = $64;
     HEAP8[$60] = $56;
     break;
    }
    $65 = HEAP32[$57>>2]|0;
    $66 = (($65) + 52|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $56&255;
    $69 = (FUNCTION_TABLE_iii[$67 & 15]($57,$68)|0);
    $70 = ($69|0)==(-1);
    if ($70) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $71 = (($55) + 1|0);
  $$pre = HEAP8[$__nm]|0;
  $45 = $$pre;$55 = $71;
 }
 $72 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $72;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 20|0;
 $__nar = sp + 28|0;
 $__o = sp + 40|0;
 $__op = sp + 12|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((6776|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $18;
   ___cxa_guard_release((6776|0));
  }
 }
 $19 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $20 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$19,$__fmt,$$byval_copy)|0);
 $21 = (($__nar) + ($20)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = $22 & 176;
 do {
  if ((($23|0) == 16)) {
   $24 = HEAP8[$__nar]|0;
   if ((($24<<24>>24) == 43) | (($24<<24>>24) == 45)) {
    $25 = (($__nar) + 1|0);
    $$0$i1 = $25;
    break;
   }
   $26 = ($20|0)>(1);
   $27 = ($24<<24>>24)==(48);
   $or$cond$i = $26 & $27;
   if ($or$cond$i) {
    $28 = (($__nar) + 1|0);
    $29 = HEAP8[$28]|0;
    if ((($29<<24>>24) == 88) | (($29<<24>>24) == 120)) {
     $30 = (($__nar) + 2|0);
     $$0$i1 = $30;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($23|0) == 32)) {
   $$0$i1 = $21;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$$0$i1,$21,$__o,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$33,$34,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf(($__s|0),($__n|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$16 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6880;
  $3 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i1,124);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7024>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7024;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i1,124);
 }
 $25 = HEAP32[((7024 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 if ($50) {
  $52 = HEAP32[$17>>2]|0;
  $53 = (($52) + 32|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_iiiii[$54 & 7]($17,$__nb,$__ne,$__ob)|0);
  $55 = $__ne;
  $56 = $__nb;
  $57 = (($55) - ($56))|0;
  $58 = (($__ob) + ($57)|0);
  HEAP32[$__oe>>2] = $58;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $59 = HEAP8[$__nb]|0;
  if ((($59<<24>>24) == 43) | (($59<<24>>24) == 45)) {
   $60 = HEAP32[$17>>2]|0;
   $61 = (($60) + 28|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iii[$62 & 15]($17,$59)|0);
   $64 = (($__nb) + 1|0);
   $65 = HEAP32[$__oe>>2]|0;
   $66 = (($65) + 1|0);
   HEAP32[$__oe>>2] = $66;
   HEAP8[$65] = $63;
   $__nf$0 = $64;
  } else {
   $__nf$0 = $__nb;
  }
  $67 = $__ne;
  $68 = $__nf$0;
  $69 = (($67) - ($68))|0;
  $70 = ($69|0)>(1);
  if ($70) {
   $71 = HEAP8[$__nf$0]|0;
   $72 = ($71<<24>>24)==(48);
   if ($72) {
    $73 = (($__nf$0) + 1|0);
    $74 = HEAP8[$73]|0;
    if ((($74<<24>>24) == 88) | (($74<<24>>24) == 120)) {
     $75 = HEAP32[$17>>2]|0;
     $76 = (($75) + 28|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (FUNCTION_TABLE_iii[$77 & 15]($17,48)|0);
     $79 = HEAP32[$__oe>>2]|0;
     $80 = (($79) + 1|0);
     HEAP32[$__oe>>2] = $80;
     HEAP8[$79] = $78;
     $81 = HEAP8[$73]|0;
     $82 = HEAP32[$17>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 15]($17,$81)|0);
     $86 = (($__nf$0) + 2|0);
     $87 = HEAP32[$__oe>>2]|0;
     $88 = (($87) + 1|0);
     HEAP32[$__oe>>2] = $88;
     HEAP8[$87] = $85;
     $__nf$1 = $86;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  $89 = ($__nf$1|0)==($__ne|0);
  if (!($89)) {
   $90 = (($__ne) + -1|0);
   $91 = ($90>>>0)>($__nf$1>>>0);
   if ($91) {
    $$012$i$i = $__nf$1;$94 = $90;
    while(1) {
     $92 = HEAP8[$$012$i$i]|0;
     $93 = HEAP8[$94]|0;
     HEAP8[$$012$i$i] = $93;
     HEAP8[$94] = $92;
     $95 = (($$012$i$i) + 1|0);
     $96 = (($94) + -1|0);
     $97 = ($95>>>0)<($96>>>0);
     if ($97) {
      $$012$i$i = $95;$94 = $96;
     } else {
      break;
     }
    }
   }
  }
  $98 = HEAP32[$37>>2]|0;
  $99 = (($98) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($37)|0);
  $102 = ($__nf$1>>>0)<($__ne>>>0);
  if ($102) {
   $103 = (($__grouping) + 1|0);
   $104 = (($__grouping) + 4|0);
   $105 = (($__grouping) + 8|0);
   $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
   while(1) {
    $106 = HEAP8[$__grouping]|0;
    $107 = $106 & 1;
    $108 = ($107<<24>>24)==(0);
    $109 = HEAP32[$105>>2]|0;
    $$ = $108 ? $103 : $109;
    $110 = (($$) + ($__dg$014)|0);
    $111 = HEAP8[$110]|0;
    $112 = ($111<<24>>24)==(0);
    if ($112) {
     $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
    } else {
     $113 = HEAP32[$105>>2]|0;
     $$16 = $108 ? $103 : $113;
     $114 = (($$16) + ($__dg$014)|0);
     $115 = HEAP8[$114]|0;
     $116 = $115 << 24 >> 24;
     $117 = ($__dc$013|0)==($116|0);
     if ($117) {
      $118 = HEAP32[$__oe>>2]|0;
      $119 = (($118) + 1|0);
      HEAP32[$__oe>>2] = $119;
      HEAP8[$118] = $101;
      $120 = HEAP8[$__grouping]|0;
      $121 = $120 & 1;
      $122 = ($121<<24>>24)==(0);
      if ($122) {
       $124 = $120&255;
       $125 = $124 >>> 1;
       $127 = $125;
      } else {
       $123 = HEAP32[$104>>2]|0;
       $127 = $123;
      }
      $126 = (($127) + -1)|0;
      $128 = ($__dg$014>>>0)<($126>>>0);
      $129 = $128&1;
      $$__dg$0 = (($129) + ($__dg$014))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
     }
    }
    $130 = HEAP8[$__p$015]|0;
    $131 = HEAP32[$17>>2]|0;
    $132 = (($131) + 28|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_iii[$133 & 15]($17,$130)|0);
    $135 = HEAP32[$__oe>>2]|0;
    $136 = (($135) + 1|0);
    HEAP32[$__oe>>2] = $136;
    HEAP8[$135] = $134;
    $137 = (($__dc$1) + 1)|0;
    $138 = (($__p$015) + 1|0);
    $139 = ($138>>>0)<($__ne>>>0);
    if ($139) {
     $__dc$013 = $137;$__dg$014 = $__dg$1;$__p$015 = $138;
    } else {
     break;
    }
   }
  }
  $140 = $__nf$1;
  $141 = $__nb;
  $142 = (($140) - ($141))|0;
  $143 = (($__ob) + ($142)|0);
  $144 = HEAP32[$__oe>>2]|0;
  $145 = ($143|0)==($144|0);
  if (!($145)) {
   $146 = (($144) + -1|0);
   $147 = ($146>>>0)>($143>>>0);
   if ($147) {
    $$012$i$i10 = $143;$150 = $146;
    while(1) {
     $148 = HEAP8[$$012$i$i10]|0;
     $149 = HEAP8[$150]|0;
     HEAP8[$$012$i$i10] = $149;
     HEAP8[$150] = $148;
     $151 = (($$012$i$i10) + 1|0);
     $152 = (($150) + -1|0);
     $153 = ($151>>>0)<($152>>>0);
     if ($153) {
      $$012$i$i10 = $151;$150 = $152;
     } else {
      break;
     }
    }
   }
  }
 }
 $154 = ($__np|0)==($__ne|0);
 if ($154) {
  $155 = HEAP32[$__oe>>2]|0;
  $storemerge = $155;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $156 = $__np;
  $157 = $__nb;
  $158 = (($156) - ($157))|0;
  $159 = (($__ob) + ($158)|0);
  $storemerge = $159;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 31]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP8[$__sp]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $23 = (($__sp) + 1|0);
    $27 = $23;
   } else {
    $21 = (($__sp) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $27 = $22;
   }
   $24 = HEAP32[$0>>2]|0;
   $25 = (($24) + 48|0);
   $26 = HEAP32[$25>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$26 & 31]($0,$27,$__ns$0)|0);
   $29 = ($28|0)==($__ns$0|0);
   if ($29) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $30 = (($2) - ($9))|0;
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iiii[$34 & 31]($0,$__op,$30)|0);
  $36 = ($35|0)==($30|0);
  if (!($36)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 32|0;
 $__o = sp + 54|0;
 $__op = sp + 16|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 28|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $23 = (___cxa_guard_acquire((6776|0))|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $25;
   ___cxa_guard_release((6776|0));
  }
 }
 $26 = HEAP32[6768>>2]|0;
 $27 = $$byval_copy;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $31 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$26,$__fmt,$$byval_copy)|0);
 $32 = (($__nar) + ($31)|0);
 $33 = HEAP32[$9>>2]|0;
 $34 = $33 & 176;
 do {
  if ((($34|0) == 16)) {
   $35 = HEAP8[$__nar]|0;
   if ((($35<<24>>24) == 43) | (($35<<24>>24) == 45)) {
    $36 = (($__nar) + 1|0);
    $$0$i1 = $36;
    break;
   }
   $37 = ($31|0)>(1);
   $38 = ($35<<24>>24)==(48);
   $or$cond$i = $37 & $38;
   if ($or$cond$i) {
    $39 = (($__nar) + 1|0);
    $40 = HEAP8[$39]|0;
    if ((($40<<24>>24) == 88) | (($40<<24>>24) == 120)) {
     $41 = (($__nar) + 2|0);
     $$0$i1 = $41;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($34|0) == 32)) {
   $$0$i1 = $32;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$$0$i1,$32,$__o,$__op,$__oe,$2);
 $42 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $43;
 $44 = HEAP32[$__op>>2]|0;
 $45 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$44,$45,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 20|0;
 $__nar = sp + 28|0;
 $__o = sp + 40|0;
 $__op = sp + 12|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((6776|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $18;
   ___cxa_guard_release((6776|0));
  }
 }
 $19 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $20 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$19,$__fmt,$$byval_copy)|0);
 $21 = (($__nar) + ($20)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = $22 & 176;
 do {
  if ((($23|0) == 16)) {
   $24 = HEAP8[$__nar]|0;
   if ((($24<<24>>24) == 43) | (($24<<24>>24) == 45)) {
    $25 = (($__nar) + 1|0);
    $$0$i1 = $25;
    break;
   }
   $26 = ($20|0)>(1);
   $27 = ($24<<24>>24)==(48);
   $or$cond$i = $26 & $27;
   if ($or$cond$i) {
    $28 = (($__nar) + 1|0);
    $29 = HEAP8[$28]|0;
    if ((($29<<24>>24) == 88) | (($29<<24>>24) == 120)) {
     $30 = (($__nar) + 2|0);
     $$0$i1 = $30;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($23|0) == 32)) {
   $$0$i1 = $21;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$$0$i1,$21,$__o,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$33,$34,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 32|0;
 $__o = sp + 55|0;
 $__op = sp + 16|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 28|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $23 = (___cxa_guard_acquire((6776|0))|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $25;
   ___cxa_guard_release((6776|0));
  }
 }
 $26 = HEAP32[6768>>2]|0;
 $27 = $$byval_copy;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $31 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$26,$__fmt,$$byval_copy)|0);
 $32 = (($__nar) + ($31)|0);
 $33 = HEAP32[$9>>2]|0;
 $34 = $33 & 176;
 do {
  if ((($34|0) == 16)) {
   $35 = HEAP8[$__nar]|0;
   if ((($35<<24>>24) == 43) | (($35<<24>>24) == 45)) {
    $36 = (($__nar) + 1|0);
    $$0$i1 = $36;
    break;
   }
   $37 = ($31|0)>(1);
   $38 = ($35<<24>>24)==(48);
   $or$cond$i = $37 & $38;
   if ($or$cond$i) {
    $39 = (($__nar) + 1|0);
    $40 = HEAP8[$39]|0;
    if ((($40<<24>>24) == 88) | (($40<<24>>24) == 120)) {
     $41 = (($__nar) + 2|0);
     $$0$i1 = $41;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else if ((($34|0) == 32)) {
   $$0$i1 = $32;
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$$0$i1,$32,$__o,$__op,$__oe,$2);
 $42 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $43;
 $44 = HEAP32[$__op>>2]|0;
 $45 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$44,$45,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i12 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 44|0;
 $__nb = sp + 36|0;
 $__o = sp + 74|0;
 $__op = sp + 20|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 40|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $31 = (___cxa_guard_acquire((6776|0))|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $33 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $33;
   ___cxa_guard_release((6776|0));
  }
 }
 $34 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $35 = (($__iob) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$$byval_copy>>2] = $36;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $37 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $37;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $38;
 }
 $39 = ($__nc$0|0)>(29);
 if ($39) {
  $40 = HEAP8[6776]|0;
  $41 = ($40<<24>>24)==(0);
  if ($specify_precision$0$off0$ph$i12) {
   if ($41) {
    $42 = (___cxa_guard_acquire((6776|0))|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $44;
     ___cxa_guard_release((6776|0));
    }
   }
   $45 = HEAP32[6768>>2]|0;
   $46 = (($__iob) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$$byval_copy>>2] = $47;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $48 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$45,$__fmt,$$byval_copy)|0);
   $__nc$1 = $48;
  } else {
   if ($41) {
    $49 = (___cxa_guard_acquire((6776|0))|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $51;
     ___cxa_guard_release((6776|0));
    }
   }
   $52 = HEAP32[6768>>2]|0;
   $53 = (($__iob) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$$byval_copy>>2] = $54;
   $vararg_ptr12 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $55 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$52,$__fmt,$$byval_copy)|0);
   $__nc$1 = $55;
  }
  $56 = HEAP32[$__nb>>2]|0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $59 = $56;$82 = $56;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre19 = HEAP32[$__nb>>2]|0;
  $59 = $$pre19;$82 = 0;$__nc$2 = $__nc$0;
 }
 $58 = (($59) + ($__nc$2)|0);
 $60 = HEAP32[$8>>2]|0;
 $61 = $60 & 176;
 do {
  if ((($61|0) == 32)) {
   $$0$i7 = $58;
  } else if ((($61|0) == 16)) {
   $62 = HEAP8[$59]|0;
   if ((($62<<24>>24) == 43) | (($62<<24>>24) == 45)) {
    $63 = (($59) + 1|0);
    $$0$i7 = $63;
    break;
   }
   $64 = ($__nc$2|0)>(1);
   $65 = ($62<<24>>24)==(48);
   $or$cond$i = $64 & $65;
   if ($or$cond$i) {
    $66 = (($59) + 1|0);
    $67 = HEAP8[$66]|0;
    if ((($67<<24>>24) == 88) | (($67<<24>>24) == 120)) {
     $68 = (($59) + 2|0);
     $$0$i7 = $68;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $$0$i7 = $59;
 }
 $69 = ($59|0)==($__nar|0);
 if ($69) {
  $73 = $__nar;$80 = 0;$__ob$0 = $__o;
 } else {
  $70 = $__nc$2 << 1;
  $71 = (_malloc($70)|0);
  $72 = ($71|0)==(0|0);
  if ($72) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $73 = $59;$80 = $71;$__ob$0 = $71;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($73,$$0$i7,$58,$__ob$0,$__op,$__oe,$0);
 $74 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($74)|0);
 $75 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $75;
 $76 = HEAP32[$__op>>2]|0;
 $77 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$76,$77,$__iob,$__fl);
 $78 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $78;
 HEAP32[$agg$result>>2] = $78;
 $79 = ($80|0)==(0|0);
 if (!($79)) {
  _free($80);
 }
 $81 = ($82|0)==(0|0);
 if ($81) {
  STACKTOP = sp;return;
 }
 _free($82);
 STACKTOP = sp;return;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vasprintf(($__s|0),($__format|0),($__va|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 (_uselocale(($0|0))|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$58 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0;
 var $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6880>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6880;
  $3 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i$i1,124);
 }
 $5 = HEAP32[((6880 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7024>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7024;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i$i1,124);
 }
 $25 = HEAP32[((7024 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_iii[$46 & 15]($17,$43)|0);
  $48 = (($__nb) + 1|0);
  $49 = HEAP32[$__oe>>2]|0;
  $50 = (($49) + 1|0);
  HEAP32[$__oe>>2] = $50;
  HEAP8[$49] = $47;
  $__nf$0 = $48;
 } else {
  $__nf$0 = $__nb;
 }
 $51 = $__ne;
 $52 = $__nf$0;
 $53 = (($51) - ($52))|0;
 $54 = ($53|0)>(1);
 L22: do {
  if ($54) {
   $56 = HEAP8[$__nf$0]|0;
   $57 = ($56<<24>>24)==(48);
   if ($57) {
    $58 = (($__nf$0) + 1|0);
    $59 = HEAP8[$58]|0;
    if ((($59<<24>>24) == 88) | (($59<<24>>24) == 120)) {
     $60 = HEAP32[$17>>2]|0;
     $61 = (($60) + 28|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iii[$62 & 15]($17,48)|0);
     $64 = HEAP32[$__oe>>2]|0;
     $65 = (($64) + 1|0);
     HEAP32[$__oe>>2] = $65;
     HEAP8[$64] = $63;
     $66 = (($__nf$0) + 2|0);
     $67 = HEAP8[$58]|0;
     $68 = HEAP32[$17>>2]|0;
     $69 = (($68) + 28|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (FUNCTION_TABLE_iii[$70 & 15]($17,$67)|0);
     $72 = HEAP32[$__oe>>2]|0;
     $73 = (($72) + 1|0);
     HEAP32[$__oe>>2] = $73;
     HEAP8[$72] = $71;
     $74 = ($66>>>0)<($__ne>>>0);
     if ($74) {
      $__ns$043 = $66;
      while(1) {
       $77 = HEAP8[$__ns$043]|0;
       $78 = HEAP8[6776]|0;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        $80 = (___cxa_guard_acquire((6776|0))|0);
        $81 = ($80|0)==(0);
        if (!($81)) {
         $82 = (_newlocale(2147483647,(6784|0),(0|0))|0);
         HEAP32[6768>>2] = $82;
         ___cxa_guard_release((6776|0));
        }
       }
       $83 = HEAP32[6768>>2]|0;
       $84 = $77 << 24 >> 24;
       $85 = (_isxdigit_l(($84|0),($83|0))|0);
       $86 = ($85|0)==(0);
       $76 = (($__ns$043) + 1|0);
       if ($86) {
        $__nf$1 = $66;$__ns$2 = $__ns$043;
        break L22;
       }
       $75 = ($76>>>0)<($__ne>>>0);
       if ($75) {
        $__ns$043 = $76;
       } else {
        $__nf$1 = $66;$__ns$2 = $76;
        break;
       }
      }
     } else {
      $__nf$1 = $66;$__ns$2 = $66;
     }
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } while(0);
 L33: do {
  if ((label|0) == 14) {
   $55 = ($__nf$0>>>0)<($__ne>>>0);
   if ($55) {
    $__ns$134 = $__nf$0;
    while(1) {
     $89 = HEAP8[$__ns$134]|0;
     $90 = HEAP8[6776]|0;
     $91 = ($90<<24>>24)==(0);
     if ($91) {
      $92 = (___cxa_guard_acquire((6776|0))|0);
      $93 = ($92|0)==(0);
      if (!($93)) {
       $94 = (_newlocale(2147483647,(6784|0),(0|0))|0);
       HEAP32[6768>>2] = $94;
       ___cxa_guard_release((6776|0));
      }
     }
     $95 = HEAP32[6768>>2]|0;
     $96 = $89 << 24 >> 24;
     $97 = (_isdigit_l(($96|0),($95|0))|0);
     $98 = ($97|0)==(0);
     $88 = (($__ns$134) + 1|0);
     if ($98) {
      $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
      break L33;
     }
     $87 = ($88>>>0)<($__ne>>>0);
     if ($87) {
      $__ns$134 = $88;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $88;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
   }
  }
 } while(0);
 $99 = HEAP8[$__grouping]|0;
 $100 = $99 & 1;
 $101 = ($100<<24>>24)==(0);
 if ($101) {
  $104 = $99&255;
  $105 = $104 >>> 1;
  $107 = $105;
 } else {
  $102 = (($__grouping) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $107 = $103;
 }
 $106 = ($107|0)==(0);
 if ($106) {
  $108 = HEAP32[$__oe>>2]|0;
  $109 = HEAP32[$17>>2]|0;
  $110 = (($109) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  (FUNCTION_TABLE_iiiii[$111 & 7]($17,$__nf$1,$__ns$2,$108)|0);
  $112 = $__ns$2;
  $113 = $__nf$1;
  $114 = (($112) - ($113))|0;
  $115 = HEAP32[$__oe>>2]|0;
  $116 = (($115) + ($114)|0);
  HEAP32[$__oe>>2] = $116;
 } else {
  $117 = ($__nf$1|0)==($__ns$2|0);
  if (!($117)) {
   $118 = (($__ns$2) + -1|0);
   $119 = ($118>>>0)>($__nf$1>>>0);
   if ($119) {
    $$012$i$i = $__nf$1;$122 = $118;
    while(1) {
     $120 = HEAP8[$$012$i$i]|0;
     $121 = HEAP8[$122]|0;
     HEAP8[$$012$i$i] = $121;
     HEAP8[$122] = $120;
     $123 = (($$012$i$i) + 1|0);
     $124 = (($122) + -1|0);
     $125 = ($123>>>0)<($124>>>0);
     if ($125) {
      $$012$i$i = $123;$122 = $124;
     } else {
      break;
     }
    }
   }
  }
  $126 = HEAP32[$37>>2]|0;
  $127 = (($126) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (FUNCTION_TABLE_ii[$128 & 127]($37)|0);
  $130 = ($__nf$1>>>0)<($__ns$2>>>0);
  if ($130) {
   $131 = (($__grouping) + 1|0);
   $132 = (($__grouping) + 4|0);
   $133 = (($__grouping) + 8|0);
   $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
   while(1) {
    $134 = HEAP8[$__grouping]|0;
    $135 = $134 & 1;
    $136 = ($135<<24>>24)==(0);
    $137 = HEAP32[$133>>2]|0;
    $$ = $136 ? $131 : $137;
    $138 = (($$) + ($__dg$026)|0);
    $139 = HEAP8[$138]|0;
    $140 = ($139<<24>>24)>(0);
    if ($140) {
     $141 = HEAP32[$133>>2]|0;
     $$58 = $136 ? $131 : $141;
     $142 = (($$58) + ($__dg$026)|0);
     $143 = HEAP8[$142]|0;
     $144 = $143 << 24 >> 24;
     $145 = ($__dc$025|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$__oe>>2]|0;
      $147 = (($146) + 1|0);
      HEAP32[$__oe>>2] = $147;
      HEAP8[$146] = $129;
      $148 = HEAP8[$__grouping]|0;
      $149 = $148 & 1;
      $150 = ($149<<24>>24)==(0);
      if ($150) {
       $152 = $148&255;
       $153 = $152 >>> 1;
       $155 = $153;
      } else {
       $151 = HEAP32[$132>>2]|0;
       $155 = $151;
      }
      $154 = (($155) + -1)|0;
      $156 = ($__dg$026>>>0)<($154>>>0);
      $157 = $156&1;
      $$__dg$0 = (($157) + ($__dg$026))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
     }
    } else {
     $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
    }
    $158 = HEAP8[$__p$027]|0;
    $159 = HEAP32[$17>>2]|0;
    $160 = (($159) + 28|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (FUNCTION_TABLE_iii[$161 & 15]($17,$158)|0);
    $163 = HEAP32[$__oe>>2]|0;
    $164 = (($163) + 1|0);
    HEAP32[$__oe>>2] = $164;
    HEAP8[$163] = $162;
    $165 = (($__dc$1) + 1)|0;
    $166 = (($__p$027) + 1|0);
    $167 = ($166>>>0)<($__ns$2>>>0);
    if ($167) {
     $__dc$025 = $165;$__dg$026 = $__dg$1;$__p$027 = $166;
    } else {
     break;
    }
   }
  }
  $168 = $__nf$1;
  $169 = $__nb;
  $170 = (($168) - ($169))|0;
  $171 = (($__ob) + ($170)|0);
  $172 = HEAP32[$__oe>>2]|0;
  $173 = ($171|0)==($172|0);
  if (!($173)) {
   $174 = (($172) + -1|0);
   $175 = ($174>>>0)>($171>>>0);
   if ($175) {
    $$012$i$i13 = $171;$178 = $174;
    while(1) {
     $176 = HEAP8[$$012$i$i13]|0;
     $177 = HEAP8[$178]|0;
     HEAP8[$$012$i$i13] = $177;
     HEAP8[$178] = $176;
     $179 = (($$012$i$i13) + 1|0);
     $180 = (($178) + -1|0);
     $181 = ($179>>>0)<($180>>>0);
     if ($181) {
      $$012$i$i13 = $179;$178 = $180;
     } else {
      break;
     }
    }
   }
  }
 }
 $182 = ($__ns$2>>>0)<($__ne>>>0);
 L72: do {
  if ($182) {
   $__nf$221 = $__ns$2;
   while(1) {
    $183 = HEAP8[$__nf$221]|0;
    $184 = ($183<<24>>24)==(46);
    if ($184) {
     break;
    }
    $192 = HEAP32[$17>>2]|0;
    $193 = (($192) + 28|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (FUNCTION_TABLE_iii[$194 & 15]($17,$183)|0);
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + 1|0);
    HEAP32[$__oe>>2] = $197;
    HEAP8[$196] = $195;
    $198 = (($__nf$221) + 1|0);
    $199 = ($198>>>0)<($__ne>>>0);
    if ($199) {
     $__nf$221 = $198;
    } else {
     $__nf$3 = $198;
     break L72;
    }
   }
   $185 = HEAP32[$37>>2]|0;
   $186 = (($185) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (FUNCTION_TABLE_ii[$187 & 127]($37)|0);
   $189 = HEAP32[$__oe>>2]|0;
   $190 = (($189) + 1|0);
   HEAP32[$__oe>>2] = $190;
   HEAP8[$189] = $188;
   $191 = (($__nf$221) + 1|0);
   $__nf$3 = $191;
  } else {
   $__nf$3 = $__ns$2;
  }
 } while(0);
 $200 = HEAP32[$__oe>>2]|0;
 $201 = HEAP32[$17>>2]|0;
 $202 = (($201) + 32|0);
 $203 = HEAP32[$202>>2]|0;
 (FUNCTION_TABLE_iiiii[$203 & 7]($17,$__nf$3,$__ne,$200)|0);
 $204 = $__nf$3;
 $205 = (($51) - ($204))|0;
 $206 = HEAP32[$__oe>>2]|0;
 $207 = (($206) + ($205)|0);
 HEAP32[$__oe>>2] = $207;
 $208 = ($__np|0)==($__ne|0);
 if ($208) {
  $storemerge = $207;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $209 = $__np;
 $210 = $__nb;
 $211 = (($209) - ($210))|0;
 $212 = (($__ob) + ($211)|0);
 $storemerge = $212;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 44|0;
 $__nb = sp + 36|0;
 $__o = sp + 74|0;
 $__op = sp + 20|0;
 $__oe = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 40|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep16] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $31 = (___cxa_guard_acquire((6776|0))|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $33 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $33;
   ___cxa_guard_release((6776|0));
  }
 }
 $34 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $35 = (($__iob) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$$byval_copy>>2] = $36;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $37 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $37;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $38;
 }
 $39 = ($__nc$0|0)>(29);
 if ($39) {
  $40 = HEAP8[6776]|0;
  $41 = ($40<<24>>24)==(0);
  if ($specify_precision$0$off0$ph$i17) {
   if ($41) {
    $42 = (___cxa_guard_acquire((6776|0))|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $44;
     ___cxa_guard_release((6776|0));
    }
   }
   $45 = HEAP32[6768>>2]|0;
   $46 = (($__iob) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$$byval_copy>>2] = $47;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $48 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$45,$__fmt,$$byval_copy)|0);
   $__nc$1 = $48;
  } else {
   if ($41) {
    $49 = (___cxa_guard_acquire((6776|0))|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $51;
     ___cxa_guard_release((6776|0));
    }
   }
   $52 = HEAP32[6768>>2]|0;
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $53 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$52,$__fmt,$$byval_copy)|0);
   $__nc$1 = $53;
  }
  $54 = HEAP32[$__nb>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $57 = $54;$80 = $54;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre14 = HEAP32[$__nb>>2]|0;
  $57 = $$pre14;$80 = 0;$__nc$2 = $__nc$0;
 }
 $56 = (($57) + ($__nc$2)|0);
 $58 = HEAP32[$8>>2]|0;
 $59 = $58 & 176;
 do {
  if ((($59|0) == 32)) {
   $$0$i7 = $56;
  } else if ((($59|0) == 16)) {
   $60 = HEAP8[$57]|0;
   if ((($60<<24>>24) == 43) | (($60<<24>>24) == 45)) {
    $61 = (($57) + 1|0);
    $$0$i7 = $61;
    break;
   }
   $62 = ($__nc$2|0)>(1);
   $63 = ($60<<24>>24)==(48);
   $or$cond$i = $62 & $63;
   if ($or$cond$i) {
    $64 = (($57) + 1|0);
    $65 = HEAP8[$64]|0;
    if ((($65<<24>>24) == 88) | (($65<<24>>24) == 120)) {
     $66 = (($57) + 2|0);
     $$0$i7 = $66;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $$0$i7 = $57;
 }
 $67 = ($57|0)==($__nar|0);
 if ($67) {
  $71 = $__nar;$78 = 0;$__ob$0 = $__o;
 } else {
  $68 = $__nc$2 << 1;
  $69 = (_malloc($68)|0);
  $70 = ($69|0)==(0|0);
  if ($70) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $71 = $57;$78 = $69;$__ob$0 = $69;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($71,$$0$i7,$56,$__ob$0,$__op,$__oe,$0);
 $72 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($72)|0);
 $73 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $73;
 $74 = HEAP32[$__op>>2]|0;
 $75 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$74,$75,$__iob,$__fl);
 $76 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $76;
 HEAP32[$agg$result>>2] = $76;
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  _free($78);
 }
 $79 = ($80|0)==(0|0);
 if ($79) {
  STACKTOP = sp;return;
 }
 _free($80);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp;
 $__fmt = sp + 80|0;
 $__nar = sp + 60|0;
 $__o = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5680+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5680+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5680+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5680+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5680+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5680+5|0]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $8 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$7,$__fmt,$$byval_copy)|0);
 $9 = (($__nar) + ($8)|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 176;
 do {
  if ((($12|0) == 32)) {
   $$0$i = $9;
  } else if ((($12|0) == 16)) {
   $13 = HEAP8[$__nar]|0;
   if ((($13<<24>>24) == 43) | (($13<<24>>24) == 45)) {
    $14 = (($__nar) + 1|0);
    $$0$i = $14;
    break;
   }
   $15 = ($8|0)>(1);
   $16 = ($13<<24>>24)==(48);
   $or$cond$i = $15 & $16;
   if ($or$cond$i) {
    $17 = (($__nar) + 1|0);
    $18 = HEAP8[$17]|0;
    if ((($18<<24>>24) == 88) | (($18<<24>>24) == 120)) {
     $19 = (($__nar) + 2|0);
     $$0$i = $19;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $20 = HEAP32[$0>>2]|0;
 $21 = HEAP32[6880>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $23 = (($$byval_copy) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($$byval_copy) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $25 = HEAP32[((6880 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
 $41 = HEAP32[$37>>2]|0;
 $42 = (($41) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 (FUNCTION_TABLE_iiiii[$43 & 7]($37,$__nar,$9,$__o)|0);
 $44 = (($__o) + ($8)|0);
 $45 = ($$0$i|0)==($9|0);
 if ($45) {
  $__op$0 = $44;
  $50 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $50;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$44,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $46 = $__nar;
 $47 = $$0$i;
 $48 = (($47) - ($46))|0;
 $49 = (($__o) + ($48)|0);
 $__op$0 = $49;
 $50 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $50;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$44,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__nm = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__nm = sp + 12|0;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[7032>>2]|0;
 $13 = ($12|0)==(-1);
 if (!($13)) {
  HEAP32[$$byval_copy>>2] = 7032;
  $14 = (($$byval_copy) + 4|0);
  HEAP32[$14>>2] = (123);
  $15 = (($$byval_copy) + 8|0);
  HEAP32[$15>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$$byval_copy,124);
 }
 $16 = HEAP32[((7032 + 4|0))>>2]|0;
 $17 = (($16) + -1)|0;
 $18 = (($11) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($11) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = $24 >> 2;
 $26 = ($25>>>0)>($17>>>0);
 if (!($26)) {
  $30 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw(($30|0),(14840|0),(112|0));
  // unreachable;
 }
 $27 = (($21) + ($17<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($30);
  ___cxa_throw(($30|0),(14840|0),(112|0));
  // unreachable;
 }
 $31 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$28>>2]|0;
 if ($__v) {
  $33 = (($32) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$34 & 63]($__nm,$28);
 } else {
  $35 = (($32) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($__nm,$28);
 }
 $37 = HEAP8[$__nm]|0;
 $38 = $37 & 1;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $42 = (($__nm) + 4|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $42;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $42;
 } else {
  $40 = (($__nm) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $$pre4 = (($__nm) + 4|0);
  $$ph = $41;$$pre$phi6Z2D = $40;$$pre$phiZ2D = $$pre4;
 }
 $44 = $37;$54 = $$ph;
 while(1) {
  $43 = $44 & 1;
  $45 = ($43<<24>>24)==(0);
  if ($45) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $$pre$phiZ2D;$52 = $49;
  } else {
   $46 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $47 = HEAP32[$$pre$phiZ2D>>2]|0;
   $51 = $46;$52 = $47;
  }
  $50 = (($51) + ($52<<2)|0);
  $53 = ($54|0)==($50|0);
  if ($53) {
   break;
  }
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$__s>>2]|0;
  $57 = ($56|0)==(0|0);
  if (!($57)) {
   $58 = (($56) + 24|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 52|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_iii[$65 & 15]($56,$55)|0);
    $$0$i$i = $66;
   } else {
    $67 = (($59) + 4|0);
    HEAP32[$58>>2] = $67;
    HEAP32[$59>>2] = $55;
    $$0$i$i = $55;
   }
   $68 = ($$0$i$i|0)==(-1);
   if ($68) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $69 = (($54) + 4|0);
  $$pre = HEAP8[$__nm]|0;
  $44 = $$pre;$54 = $69;
 }
 $70 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $70;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 104|0;
 $__nar = sp + 112|0;
 $__o = sp + 8|0;
 $__op = sp + 4|0;
 $__oe = sp + 96|0;
 $0 = sp + 92|0;
 $1 = sp + 100|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((6776|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $18;
   ___cxa_guard_release((6776|0));
  }
 }
 $19 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $20 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$19,$__fmt,$$byval_copy)|0);
 $21 = (($__nar) + ($20)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = $22 & 176;
 do {
  if ((($23|0) == 32)) {
   $$0$i1 = $21;
  } else if ((($23|0) == 16)) {
   $24 = HEAP8[$__nar]|0;
   if ((($24<<24>>24) == 43) | (($24<<24>>24) == 45)) {
    $25 = (($__nar) + 1|0);
    $$0$i1 = $25;
    break;
   }
   $26 = ($20|0)>(1);
   $27 = ($24<<24>>24)==(48);
   $or$cond$i = $26 & $27;
   if ($or$cond$i) {
    $28 = (($__nar) + 1|0);
    $29 = HEAP8[$28]|0;
    if ((($29<<24>>24) == 88) | (($29<<24>>24) == 120)) {
     $30 = (($__nar) + 2|0);
     $$0$i1 = $30;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$$0$i1,$21,$__o,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$33,$34,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i10 = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6872;
  $3 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i1,124);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7032>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7032;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i1,124);
 }
 $25 = HEAP32[((7032 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 $43 = HEAP8[$__grouping]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $51 = $49;
 } else {
  $46 = (($__grouping) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $51 = $47;
 }
 $50 = ($51|0)==(0);
 if ($50) {
  $52 = HEAP32[$17>>2]|0;
  $53 = (($52) + 48|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_iiiii[$54 & 7]($17,$__nb,$__ne,$__ob)|0);
  $55 = $__ne;
  $56 = $__nb;
  $57 = (($55) - ($56))|0;
  $58 = (($__ob) + ($57<<2)|0);
  HEAP32[$__oe>>2] = $58;
  $159 = $58;
 } else {
  HEAP32[$__oe>>2] = $__ob;
  $59 = HEAP8[$__nb]|0;
  if ((($59<<24>>24) == 43) | (($59<<24>>24) == 45)) {
   $60 = HEAP32[$17>>2]|0;
   $61 = (($60) + 44|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iii[$62 & 15]($17,$59)|0);
   $64 = (($__nb) + 1|0);
   $65 = HEAP32[$__oe>>2]|0;
   $66 = (($65) + 4|0);
   HEAP32[$__oe>>2] = $66;
   HEAP32[$65>>2] = $63;
   $__nf$0 = $64;
  } else {
   $__nf$0 = $__nb;
  }
  $67 = $__ne;
  $68 = $__nf$0;
  $69 = (($67) - ($68))|0;
  $70 = ($69|0)>(1);
  if ($70) {
   $71 = HEAP8[$__nf$0]|0;
   $72 = ($71<<24>>24)==(48);
   if ($72) {
    $73 = (($__nf$0) + 1|0);
    $74 = HEAP8[$73]|0;
    if ((($74<<24>>24) == 88) | (($74<<24>>24) == 120)) {
     $75 = HEAP32[$17>>2]|0;
     $76 = (($75) + 44|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (FUNCTION_TABLE_iii[$77 & 15]($17,48)|0);
     $79 = HEAP32[$__oe>>2]|0;
     $80 = (($79) + 4|0);
     HEAP32[$__oe>>2] = $80;
     HEAP32[$79>>2] = $78;
     $81 = HEAP8[$73]|0;
     $82 = HEAP32[$17>>2]|0;
     $83 = (($82) + 44|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 15]($17,$81)|0);
     $86 = (($__nf$0) + 2|0);
     $87 = HEAP32[$__oe>>2]|0;
     $88 = (($87) + 4|0);
     HEAP32[$__oe>>2] = $88;
     HEAP32[$87>>2] = $85;
     $__nf$1 = $86;
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
  } else {
   $__nf$1 = $__nf$0;
  }
  $89 = ($__nf$1|0)==($__ne|0);
  if (!($89)) {
   $90 = (($__ne) + -1|0);
   $91 = ($90>>>0)>($__nf$1>>>0);
   if ($91) {
    $$012$i$i = $__nf$1;$94 = $90;
    while(1) {
     $92 = HEAP8[$$012$i$i]|0;
     $93 = HEAP8[$94]|0;
     HEAP8[$$012$i$i] = $93;
     HEAP8[$94] = $92;
     $95 = (($$012$i$i) + 1|0);
     $96 = (($94) + -1|0);
     $97 = ($95>>>0)<($96>>>0);
     if ($97) {
      $$012$i$i = $95;$94 = $96;
     } else {
      break;
     }
    }
   }
  }
  $98 = HEAP32[$37>>2]|0;
  $99 = (($98) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (FUNCTION_TABLE_ii[$100 & 127]($37)|0);
  $102 = ($__nf$1>>>0)<($__ne>>>0);
  if ($102) {
   $103 = (($__grouping) + 1|0);
   $104 = (($__grouping) + 4|0);
   $105 = (($__grouping) + 8|0);
   $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
   while(1) {
    $106 = HEAP8[$__grouping]|0;
    $107 = $106 & 1;
    $108 = ($107<<24>>24)==(0);
    $109 = HEAP32[$105>>2]|0;
    $$ = $108 ? $103 : $109;
    $110 = (($$) + ($__dg$013)|0);
    $111 = HEAP8[$110]|0;
    $112 = ($111<<24>>24)==(0);
    if ($112) {
     $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
    } else {
     $113 = HEAP32[$105>>2]|0;
     $$15 = $108 ? $103 : $113;
     $114 = (($$15) + ($__dg$013)|0);
     $115 = HEAP8[$114]|0;
     $116 = $115 << 24 >> 24;
     $117 = ($__dc$012|0)==($116|0);
     if ($117) {
      $118 = HEAP32[$__oe>>2]|0;
      $119 = (($118) + 4|0);
      HEAP32[$__oe>>2] = $119;
      HEAP32[$118>>2] = $101;
      $120 = HEAP8[$__grouping]|0;
      $121 = $120 & 1;
      $122 = ($121<<24>>24)==(0);
      if ($122) {
       $124 = $120&255;
       $125 = $124 >>> 1;
       $127 = $125;
      } else {
       $123 = HEAP32[$104>>2]|0;
       $127 = $123;
      }
      $126 = (($127) + -1)|0;
      $128 = ($__dg$013>>>0)<($126>>>0);
      $129 = $128&1;
      $$__dg$0 = (($129) + ($__dg$013))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
     }
    }
    $130 = HEAP8[$__p$014]|0;
    $131 = HEAP32[$17>>2]|0;
    $132 = (($131) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_iii[$133 & 15]($17,$130)|0);
    $135 = HEAP32[$__oe>>2]|0;
    $136 = (($135) + 4|0);
    HEAP32[$__oe>>2] = $136;
    HEAP32[$135>>2] = $134;
    $137 = (($__dc$1) + 1)|0;
    $138 = (($__p$014) + 1|0);
    $139 = ($138>>>0)<($__ne>>>0);
    if ($139) {
     $__dc$012 = $137;$__dg$013 = $__dg$1;$__p$014 = $138;
    } else {
     $145 = $136;
     break;
    }
   }
  } else {
   $$pre = HEAP32[$__oe>>2]|0;
   $145 = $$pre;
  }
  $140 = $__nf$1;
  $141 = $__nb;
  $142 = (($140) - ($141))|0;
  $143 = (($__ob) + ($142<<2)|0);
  $144 = ($143|0)==($145|0);
  if ($144) {
   $159 = $145;
  } else {
   $146 = (($145) + -4|0);
   $147 = ($146>>>0)>($143>>>0);
   if ($147) {
    $$012$i$i10 = $143;$150 = $146;
    while(1) {
     $148 = HEAP32[$$012$i$i10>>2]|0;
     $149 = HEAP32[$150>>2]|0;
     HEAP32[$$012$i$i10>>2] = $149;
     HEAP32[$150>>2] = $148;
     $151 = (($$012$i$i10) + 4|0);
     $152 = (($150) + -4|0);
     $153 = ($151>>>0)<($152>>>0);
     if ($153) {
      $$012$i$i10 = $151;$150 = $152;
     } else {
      $159 = $145;
      break;
     }
    }
   } else {
    $159 = $145;
   }
  }
 }
 $154 = ($__np|0)==($__ne|0);
 if ($154) {
  $storemerge = $159;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $155 = $__np;
 $156 = $__nb;
 $157 = (($155) - ($156))|0;
 $158 = (($__ob) + ($157<<2)|0);
 $storemerge = $158;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 31]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   $30 = (FUNCTION_TABLE_iiii[$28 & 31]($0,$29,$__ns$0)|0);
   $31 = ($30|0)==($__ns$0|0);
   if ($31) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $32 = (($2) - ($10))|0;
 $33 = $32 >> 2;
 $34 = ($32|0)>(0);
 if ($34) {
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 48|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiii[$37 & 31]($0,$__op,$33)|0);
  $39 = ($38|0)==($33|0);
  if (!($39)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 196|0;
 $__o = sp + 24|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 188|0;
 $3 = sp + 192|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $23 = (___cxa_guard_acquire((6776|0))|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $25;
   ___cxa_guard_release((6776|0));
  }
 }
 $26 = HEAP32[6768>>2]|0;
 $27 = $$byval_copy;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $31 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$26,$__fmt,$$byval_copy)|0);
 $32 = (($__nar) + ($31)|0);
 $33 = HEAP32[$9>>2]|0;
 $34 = $33 & 176;
 do {
  if ((($34|0) == 32)) {
   $$0$i1 = $32;
  } else if ((($34|0) == 16)) {
   $35 = HEAP8[$__nar]|0;
   if ((($35<<24>>24) == 43) | (($35<<24>>24) == 45)) {
    $36 = (($__nar) + 1|0);
    $$0$i1 = $36;
    break;
   }
   $37 = ($31|0)>(1);
   $38 = ($35<<24>>24)==(48);
   $or$cond$i = $37 & $38;
   if ($or$cond$i) {
    $39 = (($__nar) + 1|0);
    $40 = HEAP8[$39]|0;
    if ((($40<<24>>24) == 88) | (($40<<24>>24) == 120)) {
     $41 = (($__nar) + 2|0);
     $$0$i1 = $41;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$$0$i1,$32,$__o,$__op,$__oe,$2);
 $42 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $43;
 $44 = HEAP32[$__op>>2]|0;
 $45 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$44,$45,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 104|0;
 $__nar = sp + 112|0;
 $__o = sp + 8|0;
 $__op = sp + 4|0;
 $__oe = sp + 96|0;
 $0 = sp + 92|0;
 $1 = sp + 100|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5672+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5672+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5672+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5672+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5672+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5672+5|0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2048;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0$i = $2;
 } else {
  $7 = (($__fmt) + 2|0);
  HEAP8[$2] = 43;
  $$0$i = $7;
 }
 $8 = $4 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $$13$i$ph = $$0$i;
 } else {
  $10 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $10;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $11 = $4 & 74;
 do {
  if ((($11|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($11|0) == 8)) {
   $12 = $4 & 16384;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $14 = HEAP8[6776]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $16 = (___cxa_guard_acquire((6776|0))|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $18;
   ___cxa_guard_release((6776|0));
  }
 }
 $19 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $20 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$19,$__fmt,$$byval_copy)|0);
 $21 = (($__nar) + ($20)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = $22 & 176;
 do {
  if ((($23|0) == 32)) {
   $$0$i1 = $21;
  } else if ((($23|0) == 16)) {
   $24 = HEAP8[$__nar]|0;
   if ((($24<<24>>24) == 43) | (($24<<24>>24) == 45)) {
    $25 = (($__nar) + 1|0);
    $$0$i1 = $25;
    break;
   }
   $26 = ($20|0)>(1);
   $27 = ($24<<24>>24)==(48);
   $or$cond$i = $26 & $27;
   if ($or$cond$i) {
    $28 = (($__nar) + 1|0);
    $29 = HEAP8[$28]|0;
    if ((($29<<24>>24) == 88) | (($29<<24>>24) == 120)) {
     $30 = (($__nar) + 2|0);
     $$0$i1 = $30;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$$0$i1,$21,$__o,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$33,$34,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 204|0;
 $__o = sp + 24|0;
 $__op = sp + 20|0;
 $__oe = sp + 16|0;
 $2 = sp + 196|0;
 $3 = sp + 200|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0$i = $8;
 } else {
  $13 = (($__fmt) + 2|0);
  HEAP8[$8] = 43;
  $$0$i = $13;
 }
 $14 = $10 & 512;
 $15 = ($14|0)==(0);
 if ($15) {
  $$13$i$ph = $$0$i;
 } else {
  $16 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $16;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $17 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$17] = 108;
 $18 = $10 & 74;
 do {
  if ((($18|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($18|0) == 8)) {
   $19 = $10 & 16384;
   $20 = ($19|0)==(0);
   if ($20) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $21 = HEAP8[6776]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $23 = (___cxa_guard_acquire((6776|0))|0);
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $25;
   ___cxa_guard_release((6776|0));
  }
 }
 $26 = HEAP32[6768>>2]|0;
 $27 = $$byval_copy;
 $28 = $27;
 HEAP32[$28>>2] = $0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $1;
 $31 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$26,$__fmt,$$byval_copy)|0);
 $32 = (($__nar) + ($31)|0);
 $33 = HEAP32[$9>>2]|0;
 $34 = $33 & 176;
 do {
  if ((($34|0) == 32)) {
   $$0$i1 = $32;
  } else if ((($34|0) == 16)) {
   $35 = HEAP8[$__nar]|0;
   if ((($35<<24>>24) == 43) | (($35<<24>>24) == 45)) {
    $36 = (($__nar) + 1|0);
    $$0$i1 = $36;
    break;
   }
   $37 = ($31|0)>(1);
   $38 = ($35<<24>>24)==(48);
   $or$cond$i = $37 & $38;
   if ($or$cond$i) {
    $39 = (($__nar) + 1|0);
    $40 = HEAP8[$39]|0;
    if ((($40<<24>>24) == 88) | (($40<<24>>24) == 120)) {
     $41 = (($__nar) + 2|0);
     $$0$i1 = $41;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $$0$i1 = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$$0$i1,$32,$__o,$__op,$__oe,$2);
 $42 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
 $43 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $43;
 $44 = HEAP32[$__op>>2]|0;
 $45 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$44,$45,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $$byval_copy = sp;
 $__fmt = sp + 16|0;
 $__nar = sp + 276|0;
 $__nb = sp + 36|0;
 $__o = sp + 44|0;
 $__op = sp + 24|0;
 $__oe = sp + 32|0;
 $0 = sp + 40|0;
 $1 = sp + 28|0;
 $2 = sp + 272|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$20] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$20] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$20] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$20] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $31 = (___cxa_guard_acquire((6776|0))|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $33 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $33;
   ___cxa_guard_release((6776|0));
  }
 }
 $34 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $35 = (($__iob) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$$byval_copy>>2] = $36;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $37 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $37;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $38;
 }
 $39 = ($__nc$0|0)>(29);
 if ($39) {
  $40 = HEAP8[6776]|0;
  $41 = ($40<<24>>24)==(0);
  if ($specify_precision$0$off0$ph$i10) {
   if ($41) {
    $42 = (___cxa_guard_acquire((6776|0))|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $44;
     ___cxa_guard_release((6776|0));
    }
   }
   $45 = HEAP32[6768>>2]|0;
   $46 = (($__iob) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$$byval_copy>>2] = $47;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $48 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$45,$__fmt,$$byval_copy)|0);
   $__nc$1 = $48;
  } else {
   if ($41) {
    $49 = (___cxa_guard_acquire((6776|0))|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $51;
     ___cxa_guard_release((6776|0));
    }
   }
   $52 = HEAP32[6768>>2]|0;
   $53 = (($__iob) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP32[$$byval_copy>>2] = $54;
   $vararg_ptr12 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $55 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$52,$__fmt,$$byval_copy)|0);
   $__nc$1 = $55;
  }
  $56 = HEAP32[$__nb>>2]|0;
  $57 = ($56|0)==(0|0);
  if ($57) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $59 = $56;$82 = $56;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre17 = HEAP32[$__nb>>2]|0;
  $59 = $$pre17;$82 = 0;$__nc$2 = $__nc$0;
 }
 $58 = (($59) + ($__nc$2)|0);
 $60 = HEAP32[$8>>2]|0;
 $61 = $60 & 176;
 do {
  if ((($61|0) == 32)) {
   $$0$i7 = $58;
  } else if ((($61|0) == 16)) {
   $62 = HEAP8[$59]|0;
   if ((($62<<24>>24) == 43) | (($62<<24>>24) == 45)) {
    $63 = (($59) + 1|0);
    $$0$i7 = $63;
    break;
   }
   $64 = ($__nc$2|0)>(1);
   $65 = ($62<<24>>24)==(48);
   $or$cond$i = $64 & $65;
   if ($or$cond$i) {
    $66 = (($59) + 1|0);
    $67 = HEAP8[$66]|0;
    if ((($67<<24>>24) == 88) | (($67<<24>>24) == 120)) {
     $68 = (($59) + 2|0);
     $$0$i7 = $68;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else {
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $$0$i7 = $59;
 }
 $69 = ($59|0)==($__nar|0);
 if ($69) {
  $73 = $__nar;$80 = 0;$__ob$0 = $__o;
 } else {
  $70 = $__nc$2 << 3;
  $71 = (_malloc($70)|0);
  $72 = ($71|0)==(0|0);
  if ($72) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $73 = $59;$80 = $71;$__ob$0 = $71;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($73,$$0$i7,$58,$__ob$0,$__op,$__oe,$0);
 $74 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($74)|0);
 $75 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $75;
 $76 = HEAP32[$__op>>2]|0;
 $77 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$76,$77,$__iob,$__fl);
 $78 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $78;
 HEAP32[$agg$result>>2] = $78;
 $79 = ($80|0)==(0|0);
 if (!($79)) {
  _free($80);
 }
 $81 = ($82|0)==(0|0);
 if ($81) {
  STACKTOP = sp;return;
 }
 _free($82);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i13 = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__p$i$i$i$i1 = sp;
 $__grouping = sp + 12|0;
 $0 = HEAP32[$__loc>>2]|0;
 $1 = HEAP32[6872>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i$i$i1>>2] = 6872;
  $3 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i$i1,124);
 }
 $5 = HEAP32[((6872 + 4|0))>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = ($14>>>0)>($6>>>0);
 if (!($15)) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $16 = (($10) + ($6<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($19);
  ___cxa_throw(($19|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = HEAP32[$__loc>>2]|0;
 $21 = HEAP32[7032>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$__p$i$i$i$i1>>2] = 7032;
  $23 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i$i1,124);
 }
 $25 = HEAP32[((7032 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_vii[$42 & 63]($__grouping,$37);
 HEAP32[$__oe>>2] = $__ob;
 $43 = HEAP8[$__nb]|0;
 if ((($43<<24>>24) == 43) | (($43<<24>>24) == 45)) {
  $44 = HEAP32[$17>>2]|0;
  $45 = (($44) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_iii[$46 & 15]($17,$43)|0);
  $48 = (($__nb) + 1|0);
  $49 = HEAP32[$__oe>>2]|0;
  $50 = (($49) + 4|0);
  HEAP32[$__oe>>2] = $50;
  HEAP32[$49>>2] = $47;
  $__nf$0 = $48;
 } else {
  $__nf$0 = $__nb;
 }
 $51 = $__ne;
 $52 = $__nf$0;
 $53 = (($51) - ($52))|0;
 $54 = ($53|0)>(1);
 L22: do {
  if ($54) {
   $56 = HEAP8[$__nf$0]|0;
   $57 = ($56<<24>>24)==(48);
   if ($57) {
    $58 = (($__nf$0) + 1|0);
    $59 = HEAP8[$58]|0;
    if ((($59<<24>>24) == 88) | (($59<<24>>24) == 120)) {
     $60 = HEAP32[$17>>2]|0;
     $61 = (($60) + 44|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iii[$62 & 15]($17,48)|0);
     $64 = HEAP32[$__oe>>2]|0;
     $65 = (($64) + 4|0);
     HEAP32[$__oe>>2] = $65;
     HEAP32[$64>>2] = $63;
     $66 = (($__nf$0) + 2|0);
     $67 = HEAP8[$58]|0;
     $68 = HEAP32[$17>>2]|0;
     $69 = (($68) + 44|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (FUNCTION_TABLE_iii[$70 & 15]($17,$67)|0);
     $72 = HEAP32[$__oe>>2]|0;
     $73 = (($72) + 4|0);
     HEAP32[$__oe>>2] = $73;
     HEAP32[$72>>2] = $71;
     $74 = ($66>>>0)<($__ne>>>0);
     if ($74) {
      $__ns$042 = $66;
      while(1) {
       $77 = HEAP8[$__ns$042]|0;
       $78 = HEAP8[6776]|0;
       $79 = ($78<<24>>24)==(0);
       if ($79) {
        $80 = (___cxa_guard_acquire((6776|0))|0);
        $81 = ($80|0)==(0);
        if (!($81)) {
         $82 = (_newlocale(2147483647,(6784|0),(0|0))|0);
         HEAP32[6768>>2] = $82;
         ___cxa_guard_release((6776|0));
        }
       }
       $83 = HEAP32[6768>>2]|0;
       $84 = $77 << 24 >> 24;
       $85 = (_isxdigit_l(($84|0),($83|0))|0);
       $86 = ($85|0)==(0);
       $76 = (($__ns$042) + 1|0);
       if ($86) {
        $__nf$1 = $66;$__ns$2 = $__ns$042;
        break L22;
       }
       $75 = ($76>>>0)<($__ne>>>0);
       if ($75) {
        $__ns$042 = $76;
       } else {
        $__nf$1 = $66;$__ns$2 = $76;
        break;
       }
      }
     } else {
      $__nf$1 = $66;$__ns$2 = $66;
     }
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
 } while(0);
 L33: do {
  if ((label|0) == 14) {
   $55 = ($__nf$0>>>0)<($__ne>>>0);
   if ($55) {
    $__ns$133 = $__nf$0;
    while(1) {
     $89 = HEAP8[$__ns$133]|0;
     $90 = HEAP8[6776]|0;
     $91 = ($90<<24>>24)==(0);
     if ($91) {
      $92 = (___cxa_guard_acquire((6776|0))|0);
      $93 = ($92|0)==(0);
      if (!($93)) {
       $94 = (_newlocale(2147483647,(6784|0),(0|0))|0);
       HEAP32[6768>>2] = $94;
       ___cxa_guard_release((6776|0));
      }
     }
     $95 = HEAP32[6768>>2]|0;
     $96 = $89 << 24 >> 24;
     $97 = (_isdigit_l(($96|0),($95|0))|0);
     $98 = ($97|0)==(0);
     $88 = (($__ns$133) + 1|0);
     if ($98) {
      $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
      break L33;
     }
     $87 = ($88>>>0)<($__ne>>>0);
     if ($87) {
      $__ns$133 = $88;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $88;
      break;
     }
    }
   } else {
    $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
   }
  }
 } while(0);
 $99 = HEAP8[$__grouping]|0;
 $100 = $99 & 1;
 $101 = ($100<<24>>24)==(0);
 if ($101) {
  $104 = $99&255;
  $105 = $104 >>> 1;
  $107 = $105;
 } else {
  $102 = (($__grouping) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $107 = $103;
 }
 $106 = ($107|0)==(0);
 if ($106) {
  $108 = HEAP32[$__oe>>2]|0;
  $109 = HEAP32[$17>>2]|0;
  $110 = (($109) + 48|0);
  $111 = HEAP32[$110>>2]|0;
  (FUNCTION_TABLE_iiiii[$111 & 7]($17,$__nf$1,$__ns$2,$108)|0);
  $112 = $__ns$2;
  $113 = $__nf$1;
  $114 = (($112) - ($113))|0;
  $115 = HEAP32[$__oe>>2]|0;
  $116 = (($115) + ($114<<2)|0);
  HEAP32[$__oe>>2] = $116;
  $213 = $116;
 } else {
  $117 = ($__nf$1|0)==($__ns$2|0);
  if (!($117)) {
   $118 = (($__ns$2) + -1|0);
   $119 = ($118>>>0)>($__nf$1>>>0);
   if ($119) {
    $$012$i$i = $__nf$1;$122 = $118;
    while(1) {
     $120 = HEAP8[$$012$i$i]|0;
     $121 = HEAP8[$122]|0;
     HEAP8[$$012$i$i] = $121;
     HEAP8[$122] = $120;
     $123 = (($$012$i$i) + 1|0);
     $124 = (($122) + -1|0);
     $125 = ($123>>>0)<($124>>>0);
     if ($125) {
      $$012$i$i = $123;$122 = $124;
     } else {
      break;
     }
    }
   }
  }
  $126 = HEAP32[$37>>2]|0;
  $127 = (($126) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (FUNCTION_TABLE_ii[$128 & 127]($37)|0);
  $130 = ($__nf$1>>>0)<($__ns$2>>>0);
  if ($130) {
   $131 = (($__grouping) + 1|0);
   $132 = (($__grouping) + 4|0);
   $133 = (($__grouping) + 8|0);
   $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
   while(1) {
    $134 = HEAP8[$__grouping]|0;
    $135 = $134 & 1;
    $136 = ($135<<24>>24)==(0);
    $137 = HEAP32[$133>>2]|0;
    $$ = $136 ? $131 : $137;
    $138 = (($$) + ($__dg$025)|0);
    $139 = HEAP8[$138]|0;
    $140 = ($139<<24>>24)>(0);
    if ($140) {
     $141 = HEAP32[$133>>2]|0;
     $$57 = $136 ? $131 : $141;
     $142 = (($$57) + ($__dg$025)|0);
     $143 = HEAP8[$142]|0;
     $144 = $143 << 24 >> 24;
     $145 = ($__dc$024|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$__oe>>2]|0;
      $147 = (($146) + 4|0);
      HEAP32[$__oe>>2] = $147;
      HEAP32[$146>>2] = $129;
      $148 = HEAP8[$__grouping]|0;
      $149 = $148 & 1;
      $150 = ($149<<24>>24)==(0);
      if ($150) {
       $152 = $148&255;
       $153 = $152 >>> 1;
       $155 = $153;
      } else {
       $151 = HEAP32[$132>>2]|0;
       $155 = $151;
      }
      $154 = (($155) + -1)|0;
      $156 = ($__dg$025>>>0)<($154>>>0);
      $157 = $156&1;
      $$__dg$0 = (($157) + ($__dg$025))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
     }
    } else {
     $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
    }
    $158 = HEAP8[$__p$026]|0;
    $159 = HEAP32[$17>>2]|0;
    $160 = (($159) + 44|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (FUNCTION_TABLE_iii[$161 & 15]($17,$158)|0);
    $163 = HEAP32[$__oe>>2]|0;
    $164 = (($163) + 4|0);
    HEAP32[$__oe>>2] = $164;
    HEAP32[$163>>2] = $162;
    $165 = (($__dc$1) + 1)|0;
    $166 = (($__p$026) + 1|0);
    $167 = ($166>>>0)<($__ns$2>>>0);
    if ($167) {
     $__dc$024 = $165;$__dg$025 = $__dg$1;$__p$026 = $166;
    } else {
     $173 = $164;
     break;
    }
   }
  } else {
   $$pre = HEAP32[$__oe>>2]|0;
   $173 = $$pre;
  }
  $168 = $__nf$1;
  $169 = $__nb;
  $170 = (($168) - ($169))|0;
  $171 = (($__ob) + ($170<<2)|0);
  $172 = ($171|0)==($173|0);
  if ($172) {
   $213 = $173;
  } else {
   $174 = (($173) + -4|0);
   $175 = ($174>>>0)>($171>>>0);
   if ($175) {
    $$012$i$i13 = $171;$178 = $174;
    while(1) {
     $176 = HEAP32[$$012$i$i13>>2]|0;
     $177 = HEAP32[$178>>2]|0;
     HEAP32[$$012$i$i13>>2] = $177;
     HEAP32[$178>>2] = $176;
     $179 = (($$012$i$i13) + 4|0);
     $180 = (($178) + -4|0);
     $181 = ($179>>>0)<($180>>>0);
     if ($181) {
      $$012$i$i13 = $179;$178 = $180;
     } else {
      $213 = $173;
      break;
     }
    }
   } else {
    $213 = $173;
   }
  }
 }
 $182 = ($__ns$2>>>0)<($__ne>>>0);
 L73: do {
  if ($182) {
   $__nf$220 = $__ns$2;
   while(1) {
    $183 = HEAP8[$__nf$220]|0;
    $184 = ($183<<24>>24)==(46);
    if ($184) {
     break;
    }
    $192 = HEAP32[$17>>2]|0;
    $193 = (($192) + 44|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (FUNCTION_TABLE_iii[$194 & 15]($17,$183)|0);
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + 4|0);
    HEAP32[$__oe>>2] = $197;
    HEAP32[$196>>2] = $195;
    $198 = (($__nf$220) + 1|0);
    $199 = ($198>>>0)<($__ne>>>0);
    if ($199) {
     $__nf$220 = $198;
    } else {
     $203 = $197;$__nf$3 = $198;
     break L73;
    }
   }
   $185 = HEAP32[$37>>2]|0;
   $186 = (($185) + 12|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (FUNCTION_TABLE_ii[$187 & 127]($37)|0);
   $189 = HEAP32[$__oe>>2]|0;
   $190 = (($189) + 4|0);
   HEAP32[$__oe>>2] = $190;
   HEAP32[$189>>2] = $188;
   $191 = (($__nf$220) + 1|0);
   $203 = $190;$__nf$3 = $191;
  } else {
   $203 = $213;$__nf$3 = $__ns$2;
  }
 } while(0);
 $200 = HEAP32[$17>>2]|0;
 $201 = (($200) + 48|0);
 $202 = HEAP32[$201>>2]|0;
 (FUNCTION_TABLE_iiiii[$202 & 7]($17,$__nf$3,$__ne,$203)|0);
 $204 = $__nf$3;
 $205 = (($51) - ($204))|0;
 $206 = HEAP32[$__oe>>2]|0;
 $207 = (($206) + ($205<<2)|0);
 HEAP32[$__oe>>2] = $207;
 $208 = ($__np|0)==($__ne|0);
 if ($208) {
  $storemerge = $207;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $209 = $__np;
 $210 = $__nb;
 $211 = (($209) - ($210))|0;
 $212 = (($__ob) + ($211<<2)|0);
 $storemerge = $212;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0$i = 0, $$0$i7 = 0, $$1$i = 0, $$byval_copy = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $$byval_copy = sp;
 $__fmt = sp + 16|0;
 $__nar = sp + 276|0;
 $__nb = sp + 36|0;
 $__o = sp + 44|0;
 $__op = sp + 24|0;
 $__oe = sp + 32|0;
 $0 = sp + 40|0;
 $1 = sp + 28|0;
 $2 = sp + 272|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2048;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0$i = $7;
 } else {
  $12 = (($__fmt) + 2|0);
  HEAP8[$7] = 43;
  $$0$i = $12;
 }
 $13 = $9 & 1024;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1$i = $$0$i;
 } else {
  $15 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $15;
 }
 $16 = $9 & 260;
 $17 = $9 >>> 14;
 $18 = ($16|0)==(260);
 do {
  if ($18) {
   HEAP8[$$1$i] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $25 = $17 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP8[$scevgep14] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $19 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $20 = (($$1$i) + 2|0);
   HEAP8[$19] = 42;
   HEAP8[$20] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($16|0) == 256)) {
    $23 = $17 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($16|0) == 4)) {
    $21 = $17 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $27 = $17 & 1;
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$__nb>>2] = $__nar;
 $29 = HEAP8[6776]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $31 = (___cxa_guard_acquire((6776|0))|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $33 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $33;
   ___cxa_guard_release((6776|0));
  }
 }
 $34 = HEAP32[6768>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $35 = (($__iob) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$$byval_copy>>2] = $36;
  $vararg_ptr1 = (($$byval_copy) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $37 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $37;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$34,$__fmt,$$byval_copy)|0);
  $__nc$0 = $38;
 }
 $39 = ($__nc$0|0)>(29);
 if ($39) {
  $40 = HEAP8[6776]|0;
  $41 = ($40<<24>>24)==(0);
  if ($specify_precision$0$off0$ph$i15) {
   if ($41) {
    $42 = (___cxa_guard_acquire((6776|0))|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $44;
     ___cxa_guard_release((6776|0));
    }
   }
   $45 = HEAP32[6768>>2]|0;
   $46 = (($__iob) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$$byval_copy>>2] = $47;
   $vararg_ptr8 = (($$byval_copy) + 4|0);
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $48 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$45,$__fmt,$$byval_copy)|0);
   $__nc$1 = $48;
  } else {
   if ($41) {
    $49 = (___cxa_guard_acquire((6776|0))|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $51;
     ___cxa_guard_release((6776|0));
    }
   }
   $52 = HEAP32[6768>>2]|0;
   HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $53 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$52,$__fmt,$$byval_copy)|0);
   $__nc$1 = $53;
  }
  $54 = HEAP32[$__nb>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $57 = $54;$80 = $54;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre12 = HEAP32[$__nb>>2]|0;
  $57 = $$pre12;$80 = 0;$__nc$2 = $__nc$0;
 }
 $56 = (($57) + ($__nc$2)|0);
 $58 = HEAP32[$8>>2]|0;
 $59 = $58 & 176;
 do {
  if ((($59|0) == 16)) {
   $60 = HEAP8[$57]|0;
   if ((($60<<24>>24) == 43) | (($60<<24>>24) == 45)) {
    $61 = (($57) + 1|0);
    $$0$i7 = $61;
    break;
   }
   $62 = ($__nc$2|0)>(1);
   $63 = ($60<<24>>24)==(48);
   $or$cond$i = $62 & $63;
   if ($or$cond$i) {
    $64 = (($57) + 1|0);
    $65 = HEAP8[$64]|0;
    if ((($65<<24>>24) == 88) | (($65<<24>>24) == 120)) {
     $66 = (($57) + 2|0);
     $$0$i7 = $66;
    } else {
     label = 44;
    }
   } else {
    label = 44;
   }
  } else if ((($59|0) == 32)) {
   $$0$i7 = $56;
  } else {
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $$0$i7 = $57;
 }
 $67 = ($57|0)==($__nar|0);
 if ($67) {
  $71 = $__nar;$78 = 0;$__ob$0 = $__o;
 } else {
  $68 = $__nc$2 << 3;
  $69 = (_malloc($68)|0);
  $70 = ($69|0)==(0|0);
  if ($70) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $71 = $57;$78 = $69;$__ob$0 = $69;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($71,$$0$i7,$56,$__ob$0,$__op,$__oe,$0);
 $72 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($72)|0);
 $73 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $73;
 $74 = HEAP32[$__op>>2]|0;
 $75 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$74,$75,$__iob,$__fl);
 $76 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $76;
 HEAP32[$agg$result>>2] = $76;
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  _free($78);
 }
 $79 = ($80|0)==(0|0);
 if ($79) {
  STACKTOP = sp;return;
 }
 _free($80);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $$byval_copy = sp;
 $__fmt = sp + 188|0;
 $__nar = sp + 168|0;
 $__o = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0|0]=HEAP8[5680+0|0]|0;HEAP8[$__fmt+1|0]=HEAP8[5680+1|0]|0;HEAP8[$__fmt+2|0]=HEAP8[5680+2|0]|0;HEAP8[$__fmt+3|0]=HEAP8[5680+3|0]|0;HEAP8[$__fmt+4|0]=HEAP8[5680+4|0]|0;HEAP8[$__fmt+5|0]=HEAP8[5680+5|0]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 HEAP32[$$byval_copy>>2] = $__v;
 $8 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$7,$__fmt,$$byval_copy)|0);
 $9 = (($__nar) + ($8)|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 176;
 do {
  if ((($12|0) == 32)) {
   $$0$i = $9;
  } else if ((($12|0) == 16)) {
   $13 = HEAP8[$__nar]|0;
   if ((($13<<24>>24) == 43) | (($13<<24>>24) == 45)) {
    $14 = (($__nar) + 1|0);
    $$0$i = $14;
    break;
   }
   $15 = ($8|0)>(1);
   $16 = ($13<<24>>24)==(48);
   $or$cond$i = $15 & $16;
   if ($or$cond$i) {
    $17 = (($__nar) + 1|0);
    $18 = HEAP8[$17]|0;
    if ((($18<<24>>24) == 88) | (($18<<24>>24) == 120)) {
     $19 = (($__nar) + 2|0);
     $$0$i = $19;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $$0$i = $__nar;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $20 = HEAP32[$0>>2]|0;
 $21 = HEAP32[6872>>2]|0;
 $22 = ($21|0)==(-1);
 if (!($22)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $23 = (($$byval_copy) + 4|0);
  HEAP32[$23>>2] = (123);
  $24 = (($$byval_copy) + 8|0);
  HEAP32[$24>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $25 = HEAP32[((6872 + 4|0))>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = (($20) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 $35 = ($34>>>0)>($26>>>0);
 if (!($35)) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $36 = (($30) + ($26<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $39 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($39);
  ___cxa_throw(($39|0),(14840|0),(112|0));
  // unreachable;
 }
 $40 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
 $41 = HEAP32[$37>>2]|0;
 $42 = (($41) + 48|0);
 $43 = HEAP32[$42>>2]|0;
 (FUNCTION_TABLE_iiiii[$43 & 7]($37,$__nar,$9,$__o)|0);
 $44 = (($__o) + ($8<<2)|0);
 $45 = ($$0$i|0)==($9|0);
 if ($45) {
  $__op$0 = $44;
  $50 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $50;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$44,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $46 = $__nar;
 $47 = $$0$i;
 $48 = (($47) - ($46))|0;
 $49 = (($__o) + ($48<<2)|0);
 $__op$0 = $49;
 $50 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $50;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$44,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $$pre39$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 28|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[6880>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$$byval_copy1>>2] = 6880;
  $7 = (($$byval_copy1) + 4|0);
  HEAP32[$7>>2] = (123);
  $8 = (($$byval_copy1) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy1,124);
 }
 $9 = HEAP32[((6880 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($4) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($4) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw(($23|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw(($23|0),(14840|0),(112|0));
  // unreachable;
 }
 $24 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 HEAP32[$__err>>2] = 0;
 $25 = ($__fmtb|0)==($__fmte|0);
 L10: do {
  if ($25) {
   label = 65;
  } else {
   $26 = (($21) + 8|0);
   $$0$ph38 = $__fmtb;$$pre39 = 0;
   L12: while(1) {
    $28 = $$pre39;
    while(1) {
     $27 = ($28|0)==(0);
     if (!($27)) {
      label = 65;
      break L10;
     }
     $29 = HEAP32[$__b>>2]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      $42 = 0;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if ($35) {
       $36 = HEAP32[$29>>2]|0;
       $37 = (($36) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (FUNCTION_TABLE_ii[$38 & 127]($29)|0);
       $40 = ($39|0)==(-1);
       if ($40) {
        HEAP32[$__b>>2] = 0;
        $42 = 0;
       } else {
        $42 = $29;
       }
      } else {
       $42 = $29;
      }
     }
     $41 = ($42|0)==(0|0);
     $43 = HEAP32[$__e>>2]|0;
     $44 = ($43|0)==(0|0);
     do {
      if ($44) {
       label = 19;
      } else {
       $45 = (($43) + 12|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = (($43) + 16|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($46|0)==($48|0);
       if ($49) {
        $50 = HEAP32[$43>>2]|0;
        $51 = (($50) + 36|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (FUNCTION_TABLE_ii[$52 & 127]($43)|0);
        $54 = ($53|0)==(-1);
        if ($54) {
         HEAP32[$__e>>2] = 0;
         label = 19;
         break;
        }
       }
       if ($41) {
        $78 = $43;
       } else {
        label = 20;
        break L12;
       }
      }
     } while(0);
     if ((label|0) == 19) {
      label = 0;
      if ($41) {
       label = 20;
       break L12;
      } else {
       $78 = 0;
      }
     }
     $55 = HEAP8[$$0$ph38]|0;
     $56 = HEAP32[$21>>2]|0;
     $57 = (($56) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (FUNCTION_TABLE_iiii[$58 & 31]($21,$55,0)|0);
     $60 = ($59<<24>>24)==(37);
     if ($60) {
      label = 22;
      break;
     }
     $82 = HEAP8[$$0$ph38]|0;
     $isascii1$i = ($82<<24>>24)>(-1);
     if ($isascii1$i) {
      $83 = $82 << 24 >> 24;
      $84 = HEAP32[$26>>2]|0;
      $85 = (($84) + ($83<<1)|0);
      $86 = HEAP16[$85>>1]|0;
      $87 = $86 & 8192;
      $88 = ($87<<16>>16)==(0);
      if (!($88)) {
       $$0$pn = $$0$ph38;
       label = 33;
       break;
      }
     }
     $147 = (($42) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($42) + 16|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($148|0)==($150|0);
     if ($151) {
      $152 = HEAP32[$42>>2]|0;
      $153 = (($152) + 36|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = (FUNCTION_TABLE_ii[$154 & 127]($42)|0);
      $$0$i$i16 = $155;
     } else {
      $156 = HEAP8[$148]|0;
      $157 = $156&255;
      $$0$i$i16 = $157;
     }
     $158 = $$0$i$i16&255;
     $159 = HEAP32[$21>>2]|0;
     $160 = (($159) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (FUNCTION_TABLE_iii[$161 & 15]($21,$158)|0);
     $163 = HEAP8[$$0$ph38]|0;
     $164 = HEAP32[$21>>2]|0;
     $165 = (($164) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (FUNCTION_TABLE_iii[$166 & 15]($21,$163)|0);
     $168 = ($162<<24>>24)==($167<<24>>24);
     if ($168) {
      label = 60;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $28 = 4;
    }
    L40: do {
     if ((label|0) == 22) {
      label = 0;
      $61 = (($$0$ph38) + 1|0);
      $62 = ($61|0)==($__fmte|0);
      if ($62) {
       label = 23;
       break L12;
      }
      $63 = HEAP8[$61]|0;
      $64 = HEAP32[$21>>2]|0;
      $65 = (($64) + 36|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (FUNCTION_TABLE_iiii[$66 & 31]($21,$63,0)|0);
      if ((($67<<24>>24) == 48) | (($67<<24>>24) == 69)) {
       $68 = (($$0$ph38) + 2|0);
       $69 = ($68|0)==($__fmte|0);
       if ($69) {
        label = 26;
        break L12;
       }
       $70 = HEAP8[$68]|0;
       $71 = HEAP32[$21>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = (FUNCTION_TABLE_iiii[$73 & 31]($21,$70,0)|0);
       $$1 = $68;$__cmd$0 = $74;$__opt$0 = $67;
      } else {
       $$1 = $61;$__cmd$0 = $67;$__opt$0 = 0;
      }
      $75 = HEAP32[$this>>2]|0;
      $76 = (($75) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      HEAP32[$2>>2] = $42;
      HEAP32[$3>>2] = $78;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$77 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $79 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $79;
      $80 = (($$1) + 1|0);
      $$0$ph$be = $80;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $89 = ($$2|0)==($__fmte|0);
       if ($89) {
        $$2$lcssa = $__fmte;
        break;
       }
       $90 = HEAP8[$$2]|0;
       $isascii1$i4 = ($90<<24>>24)>(-1);
       if (!($isascii1$i4)) {
        $$2$lcssa = $$2;
        break;
       }
       $91 = $90 << 24 >> 24;
       $92 = (($84) + ($91<<1)|0);
       $93 = HEAP16[$92>>1]|0;
       $94 = $93 & 8192;
       $95 = ($94<<16>>16)==(0);
       if ($95) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 33;
       }
      }
      $$pre$i$i$i7 = $42;$$pre$i2$i$i11 = $78;$110 = $78;
      while(1) {
       $96 = ($$pre$i$i$i7|0)==(0|0);
       if ($96) {
        $108 = 0;
       } else {
        $97 = (($$pre$i$i$i7) + 12|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (($$pre$i$i$i7) + 16|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ($98|0)==($100|0);
        if ($101) {
         $102 = HEAP32[$$pre$i$i$i7>>2]|0;
         $103 = (($102) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 127]($$pre$i$i$i7)|0);
         $106 = ($105|0)==(-1);
         if ($106) {
          HEAP32[$__b>>2] = 0;
          $108 = 0;
         } else {
          $108 = $$pre$i$i$i7;
         }
        } else {
         $108 = $$pre$i$i$i7;
        }
       }
       $107 = ($108|0)==(0|0);
       $109 = ($110|0)==(0|0);
       do {
        if ($109) {
         $$pre$i2$i$i1141 = $$pre$i2$i$i11;
         label = 46;
        } else {
         $111 = (($110) + 12|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = (($110) + 16|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         if (!($115)) {
          if ($107) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11;$204 = $110;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L40;
          }
         }
         $116 = HEAP32[$110>>2]|0;
         $117 = (($116) + 36|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = (FUNCTION_TABLE_ii[$118 & 127]($110)|0);
         $120 = ($119|0)==(-1);
         if ($120) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1141 = 0;
          label = 46;
          break;
         } else {
          $121 = ($$pre$i2$i$i11|0)==(0|0);
          $tmp$i$i13 = $107 ^ $121;
          if ($tmp$i$i13) {
           $$pre$i2$i$i1140 = $$pre$i2$i$i11;$204 = $$pre$i2$i$i11;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L40;
          }
         }
        }
       } while(0);
       if ((label|0) == 46) {
        label = 0;
        if ($107) {
         $$0$ph$be = $$2$lcssa;
         break L40;
        } else {
         $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$204 = 0;
        }
       }
       $122 = (($108) + 12|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = (($108) + 16|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ($123|0)==($125|0);
       if ($126) {
        $127 = HEAP32[$108>>2]|0;
        $128 = (($127) + 36|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = (FUNCTION_TABLE_ii[$129 & 127]($108)|0);
        $$0$i$i = $130;
       } else {
        $131 = HEAP8[$123]|0;
        $132 = $131&255;
        $$0$i$i = $132;
       }
       $133 = $$0$i$i&255;
       $isascii1$i14 = ($133<<24>>24)>(-1);
       if (!($isascii1$i14)) {
        $$0$ph$be = $$2$lcssa;
        break L40;
       }
       $sext = $$0$i$i << 24;
       $134 = $sext >> 24;
       $135 = HEAP32[$26>>2]|0;
       $136 = (($135) + ($134<<1)|0);
       $137 = HEAP16[$136>>1]|0;
       $138 = $137 & 8192;
       $139 = ($138<<16>>16)==(0);
       if ($139) {
        $$0$ph$be = $$2$lcssa;
        break L40;
       }
       $140 = HEAP32[$122>>2]|0;
       $141 = HEAP32[$124>>2]|0;
       $142 = ($140|0)==($141|0);
       if ($142) {
        $143 = HEAP32[$108>>2]|0;
        $144 = (($143) + 40|0);
        $145 = HEAP32[$144>>2]|0;
        (FUNCTION_TABLE_ii[$145 & 127]($108)|0);
        $$pre$i$i$i7 = $108;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$110 = $204;
        continue;
       } else {
        $146 = (($140) + 1|0);
        HEAP32[$122>>2] = $146;
        $$pre$i$i$i7 = $108;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$110 = $204;
        continue;
       }
      }
     }
     else if ((label|0) == 60) {
      label = 0;
      $169 = HEAP32[$147>>2]|0;
      $170 = HEAP32[$149>>2]|0;
      $171 = ($169|0)==($170|0);
      if ($171) {
       $172 = HEAP32[$42>>2]|0;
       $173 = (($172) + 40|0);
       $174 = HEAP32[$173>>2]|0;
       (FUNCTION_TABLE_ii[$174 & 127]($42)|0);
      } else {
       $175 = (($169) + 1|0);
       HEAP32[$147>>2] = $175;
      }
      $176 = (($$0$ph38) + 1|0);
      $$0$ph$be = $176;
     }
    } while(0);
    $81 = ($$0$ph$be|0)==($__fmte|0);
    if ($81) {
     label = 65;
     break L10;
    }
    $$pre39$pre = HEAP32[$__err>>2]|0;
    $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   }
   else if ((label|0) == 26) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i20 = $42;
    break;
   }
  }
 } while(0);
 if ((label|0) == 65) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i20 = $$pre;
 }
 $177 = ($$pre$i$i$i20|0)==(0|0);
 if ($177) {
  $189 = 0;
 } else {
  $178 = (($$pre$i$i$i20) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($$pre$i$i$i20) + 16|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($179|0)==($181|0);
  if ($182) {
   $183 = HEAP32[$$pre$i$i$i20>>2]|0;
   $184 = (($183) + 36|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (FUNCTION_TABLE_ii[$185 & 127]($$pre$i$i$i20)|0);
   $187 = ($186|0)==(-1);
   if ($187) {
    HEAP32[$__b>>2] = 0;
    $189 = 0;
   } else {
    $189 = $$pre$i$i$i20;
   }
  } else {
   $189 = $$pre$i$i$i20;
  }
 }
 $188 = ($189|0)==(0|0);
 $190 = HEAP32[$__e>>2]|0;
 $191 = ($190|0)==(0|0);
 do {
  if ($191) {
   label = 75;
  } else {
   $192 = (($190) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($190) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($193|0)==($195|0);
   if ($196) {
    $197 = HEAP32[$190>>2]|0;
    $198 = (($197) + 36|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (FUNCTION_TABLE_ii[$199 & 127]($190)|0);
    $201 = ($200|0)==(-1);
    if ($201) {
     HEAP32[$__e>>2] = 0;
     label = 75;
     break;
    }
   }
   if ($188) {
    HEAP32[$agg$result>>2] = $189;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 75) {
  if (!($188)) {
   HEAP32[$agg$result>>2] = $189;
   STACKTOP = sp;return;
  }
 }
 $202 = HEAP32[$__err>>2]|0;
 $203 = $202 | 2;
 HEAP32[$__err>>2] = $203;
 HEAP32[$agg$result>>2] = $189;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5784,((5784 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $7 = HEAP32[((6880 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = HEAP32[$__e>>2]|0;
 $24 = (($this) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_ii[$26 & 127]($24)|0);
 HEAP32[$0>>2] = $23;
 $28 = (($27) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$27,$28,$19,$__err,0)|0);
 $30 = $29;
 $31 = $27;
 $32 = (($30) - ($31))|0;
 $33 = ($32|0)<(168);
 if (!($33)) {
  $37 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $37;
  STACKTOP = sp;return;
 }
 $34 = (($__tm) + 24|0);
 $35 = (($32|0) / 12)&-1;
 $36 = (($35|0) % 7)&-1;
 HEAP32[$34>>2] = $36;
 $37 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $37;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $7 = HEAP32[((6880 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = HEAP32[$__e>>2]|0;
 $24 = (($this) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_ii[$27 & 127]($24)|0);
 HEAP32[$0>>2] = $23;
 $29 = (($28) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$28,$29,$19,$__err,0)|0);
 $31 = $30;
 $32 = $28;
 $33 = (($31) - ($32))|0;
 $34 = ($33|0)<(288);
 if (!($34)) {
  $38 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $38;
  STACKTOP = sp;return;
 }
 $35 = (($__tm) + 16|0);
 $36 = (($33|0) / 12)&-1;
 $37 = (($36|0) % 12)&-1;
 HEAP32[$35>>2] = $37;
 $38 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $38;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6880>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $7 = HEAP32[((6880 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = (($__tm) + 20|0);
 $24 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $24;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $25 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$19,4)|0);
 $26 = HEAP32[$__err>>2]|0;
 $27 = $26 & 4;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $34 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $34;
  STACKTOP = sp;return;
 }
 $29 = ($25|0)<(69);
 if ($29) {
  $30 = (($25) + 2000)|0;
  $__t$0$i = $30;
 } else {
  $$off$i = (($25) + -69)|0;
  $31 = ($$off$i>>>0)<(31);
  $32 = (($25) + 1900)|0;
  $$$i = $31 ? $32 : $25;
  $__t$0$i = $$$i;
 }
 $33 = (($__t$0$i) + -1900)|0;
 HEAP32[$23>>2] = $33;
 $34 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $34;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy26 = 0, $$byval_copy30 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp;
 $$byval_copy26 = sp + 12|0;
 $1 = sp + 16|0;
 $2 = sp + 120|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 124|0;
 $6 = sp + 116|0;
 $7 = sp + 52|0;
 $8 = sp + 28|0;
 $9 = sp + 32|0;
 $10 = sp + 36|0;
 $11 = sp + 40|0;
 $12 = sp + 44|0;
 $13 = sp + 48|0;
 $14 = sp + 112|0;
 $15 = sp + 108|0;
 $16 = sp + 56|0;
 $17 = sp + 60|0;
 $18 = sp + 64|0;
 $19 = sp + 68|0;
 $20 = sp + 72|0;
 $21 = sp + 76|0;
 $22 = sp + 80|0;
 $23 = sp + 84|0;
 $24 = sp + 88|0;
 $25 = sp + 92|0;
 $26 = sp + 96|0;
 $27 = sp + 100|0;
 $28 = sp + 104|0;
 $29 = sp + 128|0;
 $30 = sp + 132|0;
 $31 = sp + 136|0;
 $32 = sp + 140|0;
 $33 = sp + 144|0;
 $34 = sp + 148|0;
 $35 = sp + 152|0;
 $36 = sp + 156|0;
 $37 = sp + 160|0;
 $38 = sp + 164|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13,$__iob);
 $39 = HEAP32[$13>>2]|0;
 $40 = HEAP32[6880>>2]|0;
 $41 = ($40|0)==(-1);
 if (!($41)) {
  HEAP32[$$byval_copy30>>2] = 6880;
  $42 = (($$byval_copy30) + 4|0);
  HEAP32[$42>>2] = (123);
  $43 = (($$byval_copy30) + 8|0);
  HEAP32[$43>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy30,124);
 }
 $44 = HEAP32[((6880 + 4|0))>>2]|0;
 $45 = (($44) + -1)|0;
 $46 = (($39) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($39) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $47;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = $52 >> 2;
 $54 = ($53>>>0)>($45>>>0);
 if (!($54)) {
  $58 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw(($58|0),(14840|0),(112|0));
  // unreachable;
 }
 $55 = (($49) + ($45<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0|0);
 if ($57) {
  $58 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw(($58|0),(14840|0),(112|0));
  // unreachable;
 }
 $59 = HEAP32[$13>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
 $60 = $__fmt << 24 >> 24;
 L10: do {
  switch ($60|0) {
  case 99:  {
   $90 = (($this) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (FUNCTION_TABLE_ii[$93 & 127]($90)|0);
   $95 = HEAP32[$__b>>2]|0;
   HEAP32[$15>>2] = $95;
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $96;
   $97 = HEAP8[$94]|0;
   $98 = $97 & 1;
   $99 = ($98<<24>>24)==(0);
   if ($99) {
    $104 = (($94) + 1|0);
    $105 = (($94) + 1|0);
    $106 = $97&255;
    $107 = $106 >>> 1;
    $109 = $105;$110 = $107;$111 = $104;
   } else {
    $100 = (($94) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($94) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $109 = $101;$110 = $103;$111 = $101;
   }
   $108 = (($109) + ($110)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$15+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($14,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$111,$108);
   $112 = HEAP32[$14>>2]|0;
   HEAP32[$__b>>2] = $112;
   break;
  }
  case 109:  {
   $151 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $151;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   $152 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $153 = HEAP32[$__err>>2]|0;
   $154 = $153 & 4;
   $155 = ($154|0)==(0);
   $156 = ($152|0)<(13);
   $or$cond$i18 = $155 & $156;
   if ($or$cond$i18) {
    $157 = (($__tm) + 16|0);
    $158 = (($152) + -1)|0;
    HEAP32[$157>>2] = $158;
    break L10;
   } else {
    $159 = $153 | 4;
    HEAP32[$__err>>2] = $159;
    break L10;
   }
   break;
  }
  case 73:  {
   $135 = (($__tm) + 8|0);
   $136 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $136;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$8+0>>2]|0;
   $137 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $138 = HEAP32[$__err>>2]|0;
   $139 = $138 & 4;
   $140 = ($139|0)==(0);
   if ($140) {
    $$off$i12 = (($137) + -1)|0;
    $141 = ($$off$i12>>>0)<(12);
    if ($141) {
     HEAP32[$135>>2] = $137;
     break L10;
    }
   }
   $142 = $138 | 4;
   HEAP32[$__err>>2] = $142;
   break;
  }
  case 68:  {
   $121 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $121;
   $122 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $122;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$18+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($17,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5792,((5792 + 8|0)));
   $123 = HEAP32[$17>>2]|0;
   HEAP32[$__b>>2] = $123;
   break;
  }
  case 116: case 110:  {
   $168 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $168;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$56);
   break;
  }
  case 106:  {
   $143 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $143;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   $144 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,3)|0);
   $145 = HEAP32[$__err>>2]|0;
   $146 = $145 & 4;
   $147 = ($146|0)==(0);
   $148 = ($144|0)<(366);
   $or$cond$i15 = $147 & $148;
   if ($or$cond$i15) {
    $149 = (($__tm) + 28|0);
    HEAP32[$149>>2] = $144;
    break L10;
   } else {
    $150 = $145 | 4;
    HEAP32[$__err>>2] = $150;
    break L10;
   }
   break;
  }
  case 65: case 97:  {
   $61 = HEAP32[$__e>>2]|0;
   $62 = (($this) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_ii[$64 & 127]($62)|0);
   HEAP32[$12>>2] = $61;
   $66 = (($65) + 168|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$12+0>>2]|0;
   $67 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$65,$66,$56,$__err,0)|0);
   $68 = $67;
   $69 = $65;
   $70 = (($68) - ($69))|0;
   $71 = ($70|0)<(168);
   if ($71) {
    $72 = (($__tm) + 24|0);
    $73 = (($70|0) / 12)&-1;
    $74 = (($73|0) % 7)&-1;
    HEAP32[$72>>2] = $74;
   }
   break;
  }
  case 70:  {
   $124 = HEAP32[$__b>>2]|0;
   HEAP32[$21>>2] = $124;
   $125 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $125;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$21+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$22+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($20,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5800,((5800 + 8|0)));
   $126 = HEAP32[$20>>2]|0;
   HEAP32[$__b>>2] = $126;
   break;
  }
  case 72:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$9>>2] = $127;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$9+0>>2]|0;
   $128 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $129 = HEAP32[$__err>>2]|0;
   $130 = $129 & 4;
   $131 = ($130|0)==(0);
   $132 = ($128|0)<(24);
   $or$cond$i = $131 & $132;
   if ($or$cond$i) {
    $133 = (($__tm) + 8|0);
    HEAP32[$133>>2] = $128;
    break L10;
   } else {
    $134 = $129 | 4;
    HEAP32[$__err>>2] = $134;
    break L10;
   }
   break;
  }
  case 101: case 100:  {
   $113 = (($__tm) + 12|0);
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $114;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   $115 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $116 = HEAP32[$__err>>2]|0;
   $117 = $116 & 4;
   $118 = ($117|0)==(0);
   if ($118) {
    $$off$i = (($115) + -1)|0;
    $119 = ($$off$i>>>0)<(31);
    if ($119) {
     HEAP32[$113>>2] = $115;
     break L10;
    }
   }
   $120 = $116 | 4;
   HEAP32[$__err>>2] = $120;
   break;
  }
  case 104: case 66: case 98:  {
   $75 = HEAP32[$__e>>2]|0;
   $76 = (($this) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($76)|0);
   HEAP32[$11>>2] = $75;
   $81 = (($80) + 288|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$11+0>>2]|0;
   $82 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$80,$81,$56,$__err,0)|0);
   $83 = $82;
   $84 = $80;
   $85 = (($83) - ($84))|0;
   $86 = ($85|0)<(288);
   if ($86) {
    $87 = (($__tm) + 16|0);
    $88 = (($85|0) / 12)&-1;
    $89 = (($88|0) % 12)&-1;
    HEAP32[$87>>2] = $89;
   }
   break;
  }
  case 120:  {
   $233 = HEAP32[$this>>2]|0;
   $234 = (($233) + 20|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[$__b>>2]|0;
   HEAP32[$33>>2] = $236;
   $237 = HEAP32[$__e>>2]|0;
   HEAP32[$34>>2] = $237;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$33+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$34+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$235 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $238 = (($this) + 8|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + 24|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (FUNCTION_TABLE_ii[$241 & 127]($238)|0);
   $243 = HEAP32[$__b>>2]|0;
   HEAP32[$36>>2] = $243;
   $244 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $244;
   $245 = HEAP8[$242]|0;
   $246 = $245 & 1;
   $247 = ($246<<24>>24)==(0);
   if ($247) {
    $252 = (($242) + 1|0);
    $253 = (($242) + 1|0);
    $254 = $245&255;
    $255 = $254 >>> 1;
    $257 = $253;$258 = $255;$259 = $252;
   } else {
    $248 = (($242) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (($242) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $257 = $249;$258 = $251;$259 = $249;
   }
   $256 = (($257) + ($258)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$36+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($35,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$259,$256);
   $260 = HEAP32[$35>>2]|0;
   HEAP32[$__b>>2] = $260;
   break;
  }
  case 83:  {
   $215 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $215;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   $216 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $217 = HEAP32[$__err>>2]|0;
   $218 = $217 & 4;
   $219 = ($218|0)==(0);
   $220 = ($216|0)<(61);
   $or$cond$i26 = $219 & $220;
   if ($or$cond$i26) {
    HEAP32[$__tm>>2] = $216;
    break L10;
   } else {
    $221 = $217 | 4;
    HEAP32[$__err>>2] = $221;
    break L10;
   }
   break;
  }
  case 84:  {
   $222 = HEAP32[$__b>>2]|0;
   HEAP32[$31>>2] = $222;
   $223 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $223;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$31+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$32+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($30,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5832,((5832 + 8|0)));
   $224 = HEAP32[$30>>2]|0;
   HEAP32[$__b>>2] = $224;
   break;
  }
  case 119:  {
   $225 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $225;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   $226 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,1)|0);
   $227 = HEAP32[$__err>>2]|0;
   $228 = $227 & 4;
   $229 = ($228|0)==(0);
   $230 = ($226|0)<(7);
   $or$cond$i29 = $229 & $230;
   if ($or$cond$i29) {
    $231 = (($__tm) + 24|0);
    HEAP32[$231>>2] = $226;
    break L10;
   } else {
    $232 = $227 | 4;
    HEAP32[$__err>>2] = $232;
    break L10;
   }
   break;
  }
  case 77:  {
   $160 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $160;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$5+0>>2]|0;
   $161 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $162 = HEAP32[$__err>>2]|0;
   $163 = $162 & 4;
   $164 = ($163|0)==(0);
   $165 = ($161|0)<(60);
   $or$cond$i21 = $164 & $165;
   if ($or$cond$i21) {
    $166 = (($__tm) + 4|0);
    HEAP32[$166>>2] = $161;
    break L10;
   } else {
    $167 = $162 | 4;
    HEAP32[$__err>>2] = $167;
    break L10;
   }
   break;
  }
  case 82:  {
   $212 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $212;
   $213 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $213;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$28+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$29+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($27,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5824,((5824 + 5|0)));
   $214 = HEAP32[$27>>2]|0;
   HEAP32[$__b>>2] = $214;
   break;
  }
  case 114:  {
   $209 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $209;
   $210 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $210;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5808,((5808 + 11|0)));
   $211 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $211;
   break;
  }
  case 121:  {
   $261 = (($__tm) + 20|0);
   $262 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $262;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$1+0>>2]|0;
   $263 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,4)|0);
   $264 = HEAP32[$__err>>2]|0;
   $265 = $264 & 4;
   $266 = ($265|0)==(0);
   if ($266) {
    $267 = ($263|0)<(69);
    if ($267) {
     $268 = (($263) + 2000)|0;
     $__t$0$i = $268;
    } else {
     $$off$i35 = (($263) + -69)|0;
     $269 = ($$off$i35>>>0)<(31);
     $270 = (($263) + 1900)|0;
     $$$i = $269 ? $270 : $263;
     $__t$0$i = $$$i;
    }
    $271 = (($__t$0$i) + -1900)|0;
    HEAP32[$261>>2] = $271;
   }
   break;
  }
  case 112:  {
   $169 = (($__tm) + 8|0);
   $170 = HEAP32[$__e>>2]|0;
   $171 = (($this) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (FUNCTION_TABLE_ii[$174 & 127]($171)|0);
   $176 = HEAP8[$175]|0;
   $177 = $176 & 1;
   $178 = ($177<<24>>24)==(0);
   if ($178) {
    $181 = $176&255;
    $182 = $181 >>> 1;
    $194 = $182;
   } else {
    $179 = (($175) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $194 = $180;
   }
   $183 = (($175) + 12|0);
   $184 = HEAP8[$183]|0;
   $185 = $184 & 1;
   $186 = ($185<<24>>24)==(0);
   if ($186) {
    $189 = $184&255;
    $190 = $189 >>> 1;
    $192 = $190;
   } else {
    $187 = (($175) + 16|0);
    $188 = HEAP32[$187>>2]|0;
    $192 = $188;
   }
   $191 = (0 - ($192))|0;
   $193 = ($194|0)==($191|0);
   if ($193) {
    $195 = HEAP32[$__err>>2]|0;
    $196 = $195 | 4;
    HEAP32[$__err>>2] = $196;
    break L10;
   }
   HEAP32[$4>>2] = $170;
   $197 = (($175) + 24|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$4+0>>2]|0;
   $198 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$175,$197,$56,$__err,0)|0);
   $199 = $198;
   $200 = $175;
   $201 = (($199) - ($200))|0;
   $202 = ($198|0)==($175|0);
   if ($202) {
    $203 = HEAP32[$169>>2]|0;
    $204 = ($203|0)==(12);
    if ($204) {
     HEAP32[$169>>2] = 0;
     break L10;
    }
   }
   $205 = ($201|0)==(12);
   if ($205) {
    $206 = HEAP32[$169>>2]|0;
    $207 = ($206|0)<(12);
    if ($207) {
     $208 = (($206) + 12)|0;
     HEAP32[$169>>2] = $208;
    }
   }
   break;
  }
  case 89:  {
   $272 = HEAP32[$__e>>2]|0;
   HEAP32[$$byval_copy26>>2] = $272;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$$byval_copy26+0>>2]|0;
   $273 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,4)|0);
   $274 = HEAP32[$__err>>2]|0;
   $275 = $274 & 4;
   $276 = ($275|0)==(0);
   if ($276) {
    $277 = (($__tm) + 20|0);
    $278 = (($273) + -1900)|0;
    HEAP32[$277>>2] = $278;
   }
   break;
  }
  case 37:  {
   $279 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $279;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$56);
   break;
  }
  default: {
   $280 = HEAP32[$__err>>2]|0;
   $281 = $280 | 4;
   HEAP32[$__err>>2] = $281;
  }
  }
 } while(0);
 $282 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $282;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 127]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 127]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 127]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 127]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 31]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 127]($48)|0);
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 $59 = ($58|0)==(0|0);
 do {
  if ($59) {
   $71 = 0;
  } else {
   $60 = (($58) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($58) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 127]($58)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $58;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 127]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 127]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 31]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 127]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i3;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 127]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i20 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
      }
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i9 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 127]($94)|0);
     $$0$i$i10 = $103;
    } else {
     $104 = HEAP8[$96]|0;
     $105 = $104&255;
     $$0$i$i10 = $105;
    }
    $106 = $$0$i$i10&255;
    $isascii1$i12 = ($106<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $107 = $sext24 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 31]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 127]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 127]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i16;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i20|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i20) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i20) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i20>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 127]($$pre$i2$i$i20)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$01 = $__r$0;
       STACKTOP = sp;return ($$01|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$01 = $__r$0;
      STACKTOP = sp;return ($$01|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0;
 var $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 28|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[6872>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  HEAP32[$$byval_copy1>>2] = 6872;
  $7 = (($$byval_copy1) + 4|0);
  HEAP32[$7>>2] = (123);
  $8 = (($$byval_copy1) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy1,124);
 }
 $9 = HEAP32[((6872 + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($4) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($4) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw(($23|0),(14840|0),(112|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($23);
  ___cxa_throw(($23|0),(14840|0),(112|0));
  // unreachable;
 }
 $24 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 HEAP32[$__err>>2] = 0;
 $25 = ($__fmtb|0)==($__fmte|0);
 L10: do {
  if ($25) {
   label = 69;
  } else {
   $$0$ph43 = $__fmtb;$$pre44 = 0;
   L12: while(1) {
    $27 = $$pre44;
    while(1) {
     $26 = ($27|0)==(0);
     if (!($26)) {
      label = 69;
      break L10;
     }
     $28 = HEAP32[$__b>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      $197 = 1;$77 = 0;
     } else {
      $30 = (($28) + 12|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($28) + 16|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31|0)==($33|0);
      if ($34) {
       $35 = HEAP32[$28>>2]|0;
       $36 = (($35) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (FUNCTION_TABLE_ii[$37 & 127]($28)|0);
       $$0$i$i$i$i = $38;
      } else {
       $39 = HEAP32[$31>>2]|0;
       $$0$i$i$i$i = $39;
      }
      $40 = ($$0$i$i$i$i|0)==(-1);
      if ($40) {
       HEAP32[$__b>>2] = 0;
       $197 = 1;$77 = 0;
      } else {
       $197 = 0;$77 = $28;
      }
     }
     $41 = HEAP32[$__e>>2]|0;
     $42 = ($41|0)==(0|0);
     do {
      if ($42) {
       label = 22;
      } else {
       $43 = (($41) + 12|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($41) + 16|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($44|0)==($46|0);
       if ($47) {
        $48 = HEAP32[$41>>2]|0;
        $49 = (($48) + 36|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (FUNCTION_TABLE_ii[$50 & 127]($41)|0);
        $$0$i$i1$i$i = $51;
       } else {
        $52 = HEAP32[$44>>2]|0;
        $$0$i$i1$i$i = $52;
       }
       $53 = ($$0$i$i1$i$i|0)==(-1);
       if ($53) {
        HEAP32[$__e>>2] = 0;
        label = 22;
        break;
       } else {
        if ($197) {
         $78 = $41;
         break;
        } else {
         label = 24;
         break L12;
        }
       }
      }
     } while(0);
     if ((label|0) == 22) {
      label = 0;
      if ($197) {
       label = 24;
       break L12;
      } else {
       $78 = 0;
      }
     }
     $54 = HEAP32[$$0$ph43>>2]|0;
     $55 = HEAP32[$21>>2]|0;
     $56 = (($55) + 52|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_iiii[$57 & 31]($21,$54,0)|0);
     $59 = ($58<<24>>24)==(37);
     if ($59) {
      label = 26;
      break;
     }
     $82 = HEAP32[$$0$ph43>>2]|0;
     $83 = HEAP32[$21>>2]|0;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iiii[$85 & 31]($21,8192,$82)|0);
     if ($86) {
      $$0$pn = $$0$ph43;
      label = 36;
      break;
     }
     $141 = (($77) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($77) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$77>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (FUNCTION_TABLE_ii[$148 & 127]($77)|0);
      $$0$i$i16 = $149;
     } else {
      $150 = HEAP32[$142>>2]|0;
      $$0$i$i16 = $150;
     }
     $151 = HEAP32[$21>>2]|0;
     $152 = (($151) + 28|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (FUNCTION_TABLE_iii[$153 & 15]($21,$$0$i$i16)|0);
     $155 = HEAP32[$$0$ph43>>2]|0;
     $156 = HEAP32[$21>>2]|0;
     $157 = (($156) + 28|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (FUNCTION_TABLE_iii[$158 & 15]($21,$155)|0);
     $160 = ($154|0)==($159|0);
     if ($160) {
      label = 64;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $27 = 4;
    }
    L44: do {
     if ((label|0) == 26) {
      label = 0;
      $60 = (($$0$ph43) + 4|0);
      $61 = ($60|0)==($__fmte|0);
      if ($61) {
       label = 27;
       break L12;
      }
      $62 = HEAP32[$60>>2]|0;
      $63 = HEAP32[$21>>2]|0;
      $64 = (($63) + 52|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_iiii[$65 & 31]($21,$62,0)|0);
      if ((($66<<24>>24) == 48) | (($66<<24>>24) == 69)) {
       $67 = (($$0$ph43) + 8|0);
       $68 = ($67|0)==($__fmte|0);
       if ($68) {
        label = 30;
        break L12;
       }
       $69 = HEAP32[$67>>2]|0;
       $70 = HEAP32[$21>>2]|0;
       $71 = (($70) + 52|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (FUNCTION_TABLE_iiii[$72 & 31]($21,$69,0)|0);
       $$1 = $67;$__cmd$0 = $73;$__opt$0 = $66;
      } else {
       $$1 = $60;$__cmd$0 = $66;$__opt$0 = 0;
      }
      $74 = HEAP32[$this>>2]|0;
      $75 = (($74) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      HEAP32[$2>>2] = $77;
      HEAP32[$3>>2] = $78;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$76 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $79 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $79;
      $80 = (($$1) + 4|0);
      $$0$ph$be = $80;
     }
     else if ((label|0) == 36) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $87 = ($$2|0)==($__fmte|0);
       if ($87) {
        $$2$lcssa = $__fmte;
        break;
       }
       $88 = HEAP32[$$2>>2]|0;
       $89 = HEAP32[$21>>2]|0;
       $90 = (($89) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (FUNCTION_TABLE_iiii[$91 & 31]($21,8192,$88)|0);
       if ($92) {
        $$0$pn = $$2;
        label = 36;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i6 = $77;$$pre$i3$i$i12 = $78;$106 = $78;
      while(1) {
       $93 = ($$pre$i$i$i6|0)==(0|0);
       if ($93) {
        $118 = 1;$120 = 0;
       } else {
        $94 = (($$pre$i$i$i6) + 12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($$pre$i$i$i6) + 16|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($95|0)==($97|0);
        if ($98) {
         $99 = HEAP32[$$pre$i$i$i6>>2]|0;
         $100 = (($99) + 36|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (FUNCTION_TABLE_ii[$101 & 127]($$pre$i$i$i6)|0);
         $$0$i$i$i$i4 = $102;
        } else {
         $103 = HEAP32[$95>>2]|0;
         $$0$i$i$i$i4 = $103;
        }
        $104 = ($$0$i$i$i$i4|0)==(-1);
        if ($104) {
         HEAP32[$__b>>2] = 0;
         $118 = 1;$120 = 0;
        } else {
         $118 = 0;$120 = $$pre$i$i$i6;
        }
       }
       $105 = ($106|0)==(0|0);
       do {
        if ($105) {
         $$pre$i3$i$i1246 = $$pre$i3$i$i12;
         label = 51;
        } else {
         $107 = (($106) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($106) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if ($111) {
          $112 = HEAP32[$106>>2]|0;
          $113 = (($112) + 36|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = (FUNCTION_TABLE_ii[$114 & 127]($106)|0);
          $$0$i$i1$i$i10 = $115;
         } else {
          $116 = HEAP32[$108>>2]|0;
          $$0$i$i1$i$i10 = $116;
         }
         $117 = ($$0$i$i1$i$i10|0)==(-1);
         if ($117) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1246 = 0;
          label = 51;
          break;
         } else {
          $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
          $tmp$i$i15 = $118 ^ $phitmp$i4$i$i13;
          if ($tmp$i$i15) {
           $$pre$i3$i$i1245 = $$pre$i3$i$i12;$198 = $$pre$i3$i$i12;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L44;
          }
         }
        }
       } while(0);
       if ((label|0) == 51) {
        label = 0;
        if ($118) {
         $$0$ph$be = $$2$lcssa;
         break L44;
        } else {
         $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$198 = 0;
        }
       }
       $119 = (($120) + 12|0);
       $121 = HEAP32[$119>>2]|0;
       $122 = (($120) + 16|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = ($121|0)==($123|0);
       if ($124) {
        $125 = HEAP32[$120>>2]|0;
        $126 = (($125) + 36|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = (FUNCTION_TABLE_ii[$127 & 127]($120)|0);
        $$0$i$i = $128;
       } else {
        $129 = HEAP32[$121>>2]|0;
        $$0$i$i = $129;
       }
       $130 = HEAP32[$21>>2]|0;
       $131 = (($130) + 12|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (FUNCTION_TABLE_iiii[$132 & 31]($21,8192,$$0$i$i)|0);
       if (!($133)) {
        $$0$ph$be = $$2$lcssa;
        break L44;
       }
       $134 = HEAP32[$119>>2]|0;
       $135 = HEAP32[$122>>2]|0;
       $136 = ($134|0)==($135|0);
       if ($136) {
        $137 = HEAP32[$120>>2]|0;
        $138 = (($137) + 40|0);
        $139 = HEAP32[$138>>2]|0;
        (FUNCTION_TABLE_ii[$139 & 127]($120)|0);
        $$pre$i$i$i6 = $120;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$106 = $198;
        continue;
       } else {
        $140 = (($134) + 4|0);
        HEAP32[$119>>2] = $140;
        $$pre$i$i$i6 = $120;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$106 = $198;
        continue;
       }
      }
     }
     else if ((label|0) == 64) {
      label = 0;
      $161 = HEAP32[$141>>2]|0;
      $162 = HEAP32[$143>>2]|0;
      $163 = ($161|0)==($162|0);
      if ($163) {
       $164 = HEAP32[$77>>2]|0;
       $165 = (($164) + 40|0);
       $166 = HEAP32[$165>>2]|0;
       (FUNCTION_TABLE_ii[$166 & 127]($77)|0);
      } else {
       $167 = (($161) + 4|0);
       HEAP32[$141>>2] = $167;
      }
      $168 = (($$0$ph43) + 4|0);
      $$0$ph$be = $168;
     }
    } while(0);
    $81 = ($$0$ph$be|0)==($__fmte|0);
    if ($81) {
     label = 69;
     break L10;
    }
    $$pre44$pre = HEAP32[$__err>>2]|0;
    $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
   }
   if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   }
   else if ((label|0) == 30) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $77;
    break;
   }
  }
 } while(0);
 if ((label|0) == 69) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i21 = $$pre;
 }
 $169 = ($$pre$i$i$i21|0)==(0|0);
 if ($169) {
  $196 = 0;$199 = 1;
 } else {
  $170 = (($$pre$i$i$i21) + 12|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($$pre$i$i$i21) + 16|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($171|0)==($173|0);
  if ($174) {
   $175 = HEAP32[$$pre$i$i$i21>>2]|0;
   $176 = (($175) + 36|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (FUNCTION_TABLE_ii[$177 & 127]($$pre$i$i$i21)|0);
   $$0$i$i$i$i19 = $178;
  } else {
   $179 = HEAP32[$171>>2]|0;
   $$0$i$i$i$i19 = $179;
  }
  $180 = ($$0$i$i$i$i19|0)==(-1);
  if ($180) {
   HEAP32[$__b>>2] = 0;
   $196 = 0;$199 = 1;
  } else {
   $196 = $$pre$i$i$i21;$199 = 0;
  }
 }
 $181 = HEAP32[$__e>>2]|0;
 $182 = ($181|0)==(0|0);
 do {
  if ($182) {
   label = 82;
  } else {
   $183 = (($181) + 12|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($181) + 16|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($184|0)==($186|0);
   if ($187) {
    $188 = HEAP32[$181>>2]|0;
    $189 = (($188) + 36|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = (FUNCTION_TABLE_ii[$190 & 127]($181)|0);
    $$0$i$i1$i$i25 = $191;
   } else {
    $192 = HEAP32[$184>>2]|0;
    $$0$i$i1$i$i25 = $192;
   }
   $193 = ($$0$i$i1$i$i25|0)==(-1);
   if ($193) {
    HEAP32[$__e>>2] = 0;
    label = 82;
    break;
   }
   if ($199) {
    HEAP32[$agg$result>>2] = $196;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 82) {
  if (!($199)) {
   HEAP32[$agg$result>>2] = $196;
   STACKTOP = sp;return;
  }
 }
 $194 = HEAP32[$__err>>2]|0;
 $195 = $194 | 2;
 HEAP32[$__err>>2] = $195;
 HEAP32[$agg$result>>2] = $196;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5936,((5936 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 127]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $7 = HEAP32[((6872 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = HEAP32[$__e>>2]|0;
 $24 = (($this) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = (FUNCTION_TABLE_ii[$26 & 127]($24)|0);
 HEAP32[$0>>2] = $23;
 $28 = (($27) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$27,$28,$19,$__err,0)|0);
 $30 = $29;
 $31 = $27;
 $32 = (($30) - ($31))|0;
 $33 = ($32|0)<(168);
 if (!($33)) {
  $37 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $37;
  STACKTOP = sp;return;
 }
 $34 = (($__tm) + 24|0);
 $35 = (($32|0) / 12)&-1;
 $36 = (($35|0) % 7)&-1;
 HEAP32[$34>>2] = $36;
 $37 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $37;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $7 = HEAP32[((6872 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = HEAP32[$__e>>2]|0;
 $24 = (($this) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_ii[$27 & 127]($24)|0);
 HEAP32[$0>>2] = $23;
 $29 = (($28) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$28,$29,$19,$__err,0)|0);
 $31 = $30;
 $32 = $28;
 $33 = (($31) - ($32))|0;
 $34 = ($33|0)<(288);
 if (!($34)) {
  $38 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $38;
  STACKTOP = sp;return;
 }
 $35 = (($__tm) + 16|0);
 $36 = (($33|0) / 12)&-1;
 $37 = (($36|0) % 12)&-1;
 HEAP32[$35>>2] = $37;
 $38 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $38;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[6872>>2]|0;
 $4 = ($3|0)==(-1);
 if (!($4)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $5 = (($$byval_copy) + 4|0);
  HEAP32[$5>>2] = (123);
  $6 = (($$byval_copy) + 8|0);
  HEAP32[$6>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $7 = HEAP32[((6872 + 4|0))>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = (($2) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($16>>>0)>($8>>>0);
 if (!($17)) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $18 = (($12) + ($8<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($21);
  ___cxa_throw(($21|0),(14840|0),(112|0));
  // unreachable;
 }
 $22 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
 $23 = (($__tm) + 20|0);
 $24 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $24;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $25 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$19,4)|0);
 $26 = HEAP32[$__err>>2]|0;
 $27 = $26 & 4;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $34 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $34;
  STACKTOP = sp;return;
 }
 $29 = ($25|0)<(69);
 if ($29) {
  $30 = (($25) + 2000)|0;
  $__t$0$i = $30;
 } else {
  $$off$i = (($25) + -69)|0;
  $31 = ($$off$i>>>0)<(31);
  $32 = (($25) + 1900)|0;
  $$$i = $31 ? $32 : $25;
  $__t$0$i = $$$i;
 }
 $33 = (($__t$0$i) + -1900)|0;
 HEAP32[$23>>2] = $33;
 $34 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $34;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$$i = 0, $$byval_copy26 = 0, $$byval_copy30 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp;
 $$byval_copy26 = sp + 12|0;
 $1 = sp + 16|0;
 $2 = sp + 120|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 124|0;
 $6 = sp + 116|0;
 $7 = sp + 52|0;
 $8 = sp + 28|0;
 $9 = sp + 32|0;
 $10 = sp + 36|0;
 $11 = sp + 40|0;
 $12 = sp + 44|0;
 $13 = sp + 48|0;
 $14 = sp + 112|0;
 $15 = sp + 108|0;
 $16 = sp + 56|0;
 $17 = sp + 60|0;
 $18 = sp + 64|0;
 $19 = sp + 68|0;
 $20 = sp + 72|0;
 $21 = sp + 76|0;
 $22 = sp + 80|0;
 $23 = sp + 84|0;
 $24 = sp + 88|0;
 $25 = sp + 92|0;
 $26 = sp + 96|0;
 $27 = sp + 100|0;
 $28 = sp + 104|0;
 $29 = sp + 128|0;
 $30 = sp + 132|0;
 $31 = sp + 136|0;
 $32 = sp + 140|0;
 $33 = sp + 144|0;
 $34 = sp + 148|0;
 $35 = sp + 152|0;
 $36 = sp + 156|0;
 $37 = sp + 160|0;
 $38 = sp + 164|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($13,$__iob);
 $39 = HEAP32[$13>>2]|0;
 $40 = HEAP32[6872>>2]|0;
 $41 = ($40|0)==(-1);
 if (!($41)) {
  HEAP32[$$byval_copy30>>2] = 6872;
  $42 = (($$byval_copy30) + 4|0);
  HEAP32[$42>>2] = (123);
  $43 = (($$byval_copy30) + 8|0);
  HEAP32[$43>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy30,124);
 }
 $44 = HEAP32[((6872 + 4|0))>>2]|0;
 $45 = (($44) + -1)|0;
 $46 = (($39) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($39) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $47;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = $52 >> 2;
 $54 = ($53>>>0)>($45>>>0);
 if (!($54)) {
  $58 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw(($58|0),(14840|0),(112|0));
  // unreachable;
 }
 $55 = (($49) + ($45<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0|0);
 if ($57) {
  $58 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($58);
  ___cxa_throw(($58|0),(14840|0),(112|0));
  // unreachable;
 }
 $59 = HEAP32[$13>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
 $60 = $__fmt << 24 >> 24;
 L10: do {
  switch ($60|0) {
  case 99:  {
   $90 = (($this) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (FUNCTION_TABLE_ii[$93 & 127]($90)|0);
   $95 = HEAP32[$__b>>2]|0;
   HEAP32[$15>>2] = $95;
   $96 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $96;
   $97 = HEAP8[$94]|0;
   $98 = $97 & 1;
   $99 = ($98<<24>>24)==(0);
   if ($99) {
    $104 = (($94) + 4|0);
    $105 = (($94) + 4|0);
    $106 = $97&255;
    $107 = $106 >>> 1;
    $109 = $105;$110 = $107;$111 = $104;
   } else {
    $100 = (($94) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($94) + 4|0);
    $103 = HEAP32[$102>>2]|0;
    $109 = $101;$110 = $103;$111 = $101;
   }
   $108 = (($109) + ($110<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$15+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($14,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$111,$108);
   $112 = HEAP32[$14>>2]|0;
   HEAP32[$__b>>2] = $112;
   break;
  }
  case 106:  {
   $143 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $143;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   $144 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,3)|0);
   $145 = HEAP32[$__err>>2]|0;
   $146 = $145 & 4;
   $147 = ($146|0)==(0);
   $148 = ($144|0)<(366);
   $or$cond$i15 = $147 & $148;
   if ($or$cond$i15) {
    $149 = (($__tm) + 28|0);
    HEAP32[$149>>2] = $144;
    break L10;
   } else {
    $150 = $145 | 4;
    HEAP32[$__err>>2] = $150;
    break L10;
   }
   break;
  }
  case 70:  {
   $124 = HEAP32[$__b>>2]|0;
   HEAP32[$21>>2] = $124;
   $125 = HEAP32[$__e>>2]|0;
   HEAP32[$22>>2] = $125;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$21+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$22+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($20,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,6000,((6000 + 32|0)));
   $126 = HEAP32[$20>>2]|0;
   HEAP32[$__b>>2] = $126;
   break;
  }
  case 77:  {
   $160 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $160;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$5+0>>2]|0;
   $161 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $162 = HEAP32[$__err>>2]|0;
   $163 = $162 & 4;
   $164 = ($163|0)==(0);
   $165 = ($161|0)<(60);
   $or$cond$i21 = $164 & $165;
   if ($or$cond$i21) {
    $166 = (($__tm) + 4|0);
    HEAP32[$166>>2] = $161;
    break L10;
   } else {
    $167 = $162 | 4;
    HEAP32[$__err>>2] = $167;
    break L10;
   }
   break;
  }
  case 104: case 66: case 98:  {
   $75 = HEAP32[$__e>>2]|0;
   $76 = (($this) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (FUNCTION_TABLE_ii[$79 & 127]($76)|0);
   HEAP32[$11>>2] = $75;
   $81 = (($80) + 288|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$11+0>>2]|0;
   $82 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$80,$81,$56,$__err,0)|0);
   $83 = $82;
   $84 = $80;
   $85 = (($83) - ($84))|0;
   $86 = ($85|0)<(288);
   if ($86) {
    $87 = (($__tm) + 16|0);
    $88 = (($85|0) / 12)&-1;
    $89 = (($88|0) % 12)&-1;
    HEAP32[$87>>2] = $89;
   }
   break;
  }
  case 72:  {
   $127 = HEAP32[$__e>>2]|0;
   HEAP32[$9>>2] = $127;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$9+0>>2]|0;
   $128 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $129 = HEAP32[$__err>>2]|0;
   $130 = $129 & 4;
   $131 = ($130|0)==(0);
   $132 = ($128|0)<(24);
   $or$cond$i = $131 & $132;
   if ($or$cond$i) {
    $133 = (($__tm) + 8|0);
    HEAP32[$133>>2] = $128;
    break L10;
   } else {
    $134 = $129 | 4;
    HEAP32[$__err>>2] = $134;
    break L10;
   }
   break;
  }
  case 101: case 100:  {
   $113 = (($__tm) + 12|0);
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $114;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   $115 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $116 = HEAP32[$__err>>2]|0;
   $117 = $116 & 4;
   $118 = ($117|0)==(0);
   if ($118) {
    $$off$i = (($115) + -1)|0;
    $119 = ($$off$i>>>0)<(31);
    if ($119) {
     HEAP32[$113>>2] = $115;
     break L10;
    }
   }
   $120 = $116 | 4;
   HEAP32[$__err>>2] = $120;
   break;
  }
  case 68:  {
   $121 = HEAP32[$__b>>2]|0;
   HEAP32[$18>>2] = $121;
   $122 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $122;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$18+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($17,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5968,((5968 + 32|0)));
   $123 = HEAP32[$17>>2]|0;
   HEAP32[$__b>>2] = $123;
   break;
  }
  case 65: case 97:  {
   $61 = HEAP32[$__e>>2]|0;
   $62 = (($this) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_ii[$64 & 127]($62)|0);
   HEAP32[$12>>2] = $61;
   $66 = (($65) + 168|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$12+0>>2]|0;
   $67 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$65,$66,$56,$__err,0)|0);
   $68 = $67;
   $69 = $65;
   $70 = (($68) - ($69))|0;
   $71 = ($70|0)<(168);
   if ($71) {
    $72 = (($__tm) + 24|0);
    $73 = (($70|0) / 12)&-1;
    $74 = (($73|0) % 7)&-1;
    HEAP32[$72>>2] = $74;
   }
   break;
  }
  case 73:  {
   $135 = (($__tm) + 8|0);
   $136 = HEAP32[$__e>>2]|0;
   HEAP32[$8>>2] = $136;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$8+0>>2]|0;
   $137 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $138 = HEAP32[$__err>>2]|0;
   $139 = $138 & 4;
   $140 = ($139|0)==(0);
   if ($140) {
    $$off$i12 = (($137) + -1)|0;
    $141 = ($$off$i12>>>0)<(12);
    if ($141) {
     HEAP32[$135>>2] = $137;
     break L10;
    }
   }
   $142 = $138 | 4;
   HEAP32[$__err>>2] = $142;
   break;
  }
  case 112:  {
   $169 = (($__tm) + 8|0);
   $170 = HEAP32[$__e>>2]|0;
   $171 = (($this) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (FUNCTION_TABLE_ii[$174 & 127]($171)|0);
   $176 = HEAP8[$175]|0;
   $177 = $176 & 1;
   $178 = ($177<<24>>24)==(0);
   if ($178) {
    $181 = $176&255;
    $182 = $181 >>> 1;
    $194 = $182;
   } else {
    $179 = (($175) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $194 = $180;
   }
   $183 = (($175) + 12|0);
   $184 = HEAP8[$183]|0;
   $185 = $184 & 1;
   $186 = ($185<<24>>24)==(0);
   if ($186) {
    $189 = $184&255;
    $190 = $189 >>> 1;
    $192 = $190;
   } else {
    $187 = (($175) + 16|0);
    $188 = HEAP32[$187>>2]|0;
    $192 = $188;
   }
   $191 = (0 - ($192))|0;
   $193 = ($194|0)==($191|0);
   if ($193) {
    $195 = HEAP32[$__err>>2]|0;
    $196 = $195 | 4;
    HEAP32[$__err>>2] = $196;
    break L10;
   }
   HEAP32[$4>>2] = $170;
   $197 = (($175) + 24|0);
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$4+0>>2]|0;
   $198 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy30,$175,$197,$56,$__err,0)|0);
   $199 = $198;
   $200 = $175;
   $201 = (($199) - ($200))|0;
   $202 = ($198|0)==($175|0);
   if ($202) {
    $203 = HEAP32[$169>>2]|0;
    $204 = ($203|0)==(12);
    if ($204) {
     HEAP32[$169>>2] = 0;
     break L10;
    }
   }
   $205 = ($201|0)==(12);
   if ($205) {
    $206 = HEAP32[$169>>2]|0;
    $207 = ($206|0)<(12);
    if ($207) {
     $208 = (($206) + 12)|0;
     HEAP32[$169>>2] = $208;
    }
   }
   break;
  }
  case 84:  {
   $222 = HEAP32[$__b>>2]|0;
   HEAP32[$31>>2] = $222;
   $223 = HEAP32[$__e>>2]|0;
   HEAP32[$32>>2] = $223;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$31+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$32+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($30,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,6104,((6104 + 32|0)));
   $224 = HEAP32[$30>>2]|0;
   HEAP32[$__b>>2] = $224;
   break;
  }
  case 119:  {
   $225 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $225;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   $226 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,1)|0);
   $227 = HEAP32[$__err>>2]|0;
   $228 = $227 & 4;
   $229 = ($228|0)==(0);
   $230 = ($226|0)<(7);
   $or$cond$i29 = $229 & $230;
   if ($or$cond$i29) {
    $231 = (($__tm) + 24|0);
    HEAP32[$231>>2] = $226;
    break L10;
   } else {
    $232 = $227 | 4;
    HEAP32[$__err>>2] = $232;
    break L10;
   }
   break;
  }
  case 116: case 110:  {
   $168 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $168;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$56);
   break;
  }
  case 109:  {
   $151 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $151;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   $152 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $153 = HEAP32[$__err>>2]|0;
   $154 = $153 & 4;
   $155 = ($154|0)==(0);
   $156 = ($152|0)<(13);
   $or$cond$i18 = $155 & $156;
   if ($or$cond$i18) {
    $157 = (($__tm) + 16|0);
    $158 = (($152) + -1)|0;
    HEAP32[$157>>2] = $158;
    break L10;
   } else {
    $159 = $153 | 4;
    HEAP32[$__err>>2] = $159;
    break L10;
   }
   break;
  }
  case 114:  {
   $209 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $209;
   $210 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $210;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,6032,((6032 + 44|0)));
   $211 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $211;
   break;
  }
  case 88:  {
   $238 = (($this) + 8|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (($239) + 24|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (FUNCTION_TABLE_ii[$241 & 127]($238)|0);
   $243 = HEAP32[$__b>>2]|0;
   HEAP32[$36>>2] = $243;
   $244 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $244;
   $245 = HEAP8[$242]|0;
   $246 = $245 & 1;
   $247 = ($246<<24>>24)==(0);
   if ($247) {
    $252 = (($242) + 4|0);
    $253 = (($242) + 4|0);
    $254 = $245&255;
    $255 = $254 >>> 1;
    $257 = $253;$258 = $255;$259 = $252;
   } else {
    $248 = (($242) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = (($242) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    $257 = $249;$258 = $251;$259 = $249;
   }
   $256 = (($257) + ($258<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$36+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($35,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$259,$256);
   $260 = HEAP32[$35>>2]|0;
   HEAP32[$__b>>2] = $260;
   break;
  }
  case 82:  {
   $212 = HEAP32[$__b>>2]|0;
   HEAP32[$28>>2] = $212;
   $213 = HEAP32[$__e>>2]|0;
   HEAP32[$29>>2] = $213;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$28+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$29+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($27,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,6080,((6080 + 20|0)));
   $214 = HEAP32[$27>>2]|0;
   HEAP32[$__b>>2] = $214;
   break;
  }
  case 83:  {
   $215 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $215;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   $216 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,2)|0);
   $217 = HEAP32[$__err>>2]|0;
   $218 = $217 & 4;
   $219 = ($218|0)==(0);
   $220 = ($216|0)<(61);
   $or$cond$i26 = $219 & $220;
   if ($or$cond$i26) {
    HEAP32[$__tm>>2] = $216;
    break L10;
   } else {
    $221 = $217 | 4;
    HEAP32[$__err>>2] = $221;
    break L10;
   }
   break;
  }
  case 120:  {
   $233 = HEAP32[$this>>2]|0;
   $234 = (($233) + 20|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[$__b>>2]|0;
   HEAP32[$33>>2] = $236;
   $237 = HEAP32[$__e>>2]|0;
   HEAP32[$34>>2] = $237;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$33+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$34+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$235 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 121:  {
   $261 = (($__tm) + 20|0);
   $262 = HEAP32[$__e>>2]|0;
   HEAP32[$1>>2] = $262;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$1+0>>2]|0;
   $263 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,4)|0);
   $264 = HEAP32[$__err>>2]|0;
   $265 = $264 & 4;
   $266 = ($265|0)==(0);
   if ($266) {
    $267 = ($263|0)<(69);
    if ($267) {
     $268 = (($263) + 2000)|0;
     $__t$0$i = $268;
    } else {
     $$off$i35 = (($263) + -69)|0;
     $269 = ($$off$i35>>>0)<(31);
     $270 = (($263) + 1900)|0;
     $$$i = $269 ? $270 : $263;
     $__t$0$i = $$$i;
    }
    $271 = (($__t$0$i) + -1900)|0;
    HEAP32[$261>>2] = $271;
   }
   break;
  }
  case 89:  {
   $272 = HEAP32[$__e>>2]|0;
   HEAP32[$$byval_copy26>>2] = $272;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$$byval_copy26+0>>2]|0;
   $273 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy30,$__err,$56,4)|0);
   $274 = HEAP32[$__err>>2]|0;
   $275 = $274 & 4;
   $276 = ($275|0)==(0);
   if ($276) {
    $277 = (($__tm) + 20|0);
    $278 = (($273) + -1900)|0;
    HEAP32[$277>>2] = $278;
   }
   break;
  }
  case 37:  {
   $279 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $279;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$56);
   break;
  }
  default: {
   $280 = HEAP32[$__err>>2]|0;
   $281 = $280 | 4;
   HEAP32[$__err>>2] = $281;
  }
  }
 } while(0);
 $282 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $282;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 127]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 31]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 127]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 127]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 127]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 127]($46)|0);
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $84 = 1;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 127]($56)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 127]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 127]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 127]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 127]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 31]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 127]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 127]($60)|0);
     $$0$i$i$i$i2 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i2 = $71;
    }
    $72 = ($$0$i$i$i$i2|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($74)|0);
     $$0$i$i1$i$i8 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i8 = $84;
    }
    $85 = ($$0$i$i1$i$i8|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 127]($89)|0);
   $$0$i$i14 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i14 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 31]($__ct,2048,$$0$i$i14)|0);
  if (!($103)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 31]($__ct,$$0$i$i14,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 127]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 127]($89)|0);
    $$0$i$i$i$i17 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i17 = $131;
   }
   $132 = ($$0$i$i$i$i17|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i25) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i25) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i25>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 127]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i23 = $143;
   }
   $144 = ($$0$i$i1$i$i23|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$01 = $__r$0;
   STACKTOP = sp;return ($$01|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 $8 = ($1|0)==($7|0);
 if ($8) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 _freelocale(($9|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 $8 = ($1|0)==($7|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 _freelocale(($9|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp + 100|0;
 $__nar = sp;
 HEAP8[$fmt$i] = 37;
 $2 = (($fmt$i) + 1|0);
 HEAP8[$2] = $__fmt;
 $3 = (($fmt$i) + 2|0);
 HEAP8[$3] = $__mod;
 $4 = (($fmt$i) + 3|0);
 HEAP8[$4] = 0;
 $5 = ($__mod<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2] = $__mod;
  HEAP8[$3] = $__fmt;
 }
 $6 = (($this) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($7|0))|0);
 $9 = (($__nar) + ($8)|0);
 $10 = HEAP32[$__s>>2]|0;
 $11 = ($8|0)==(0);
 if ($11) {
  $30 = $10;
  HEAP32[$agg$result>>2] = $30;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$14 = $10;$27 = $10;
 }
 while(1) {
  $12 = HEAP8[$$01$i$i]|0;
  $13 = ($14|0)==(0|0);
  do {
   if ($13) {
    $31 = $27;$32 = 0;
   } else {
    $15 = (($14) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $21 = HEAP32[$14>>2]|0;
     $22 = (($21) + 52|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $12&255;
     $25 = (FUNCTION_TABLE_iii[$23 & 15]($14,$24)|0);
     $26 = ($25|0)==(-1);
     $$$i = $26 ? 0 : $27;
     $$7$i = $26 ? 0 : $14;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $20 = (($16) + 1|0);
     HEAP32[$15>>2] = $20;
     HEAP8[$16] = $12;
     $31 = $27;$32 = $14;
     break;
    }
   }
  } while(0);
  $28 = (($$01$i$i) + 1|0);
  $29 = ($28|0)==($9|0);
  if ($29) {
   $30 = $31;
   break;
  } else {
   $$01$i$i = $28;$14 = $32;$27 = $31;
  }
 }
 HEAP32[$agg$result>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 $8 = ($1|0)==($7|0);
 if ($8) {
  __ZdlPv($this);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 _freelocale(($9|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 $8 = ($1|0)==($7|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 _freelocale(($9|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$21 = $5;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $25 = $21;$26 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 15]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $21;
   $$7$i = $20 ? 0 : $9;
   $25 = $$$i;$26 = $$7$i;
  }
  $22 = (($$01$i$i) + 4|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$21 = $25;$9 = $26;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $fmt$i = sp + 112|0;
 $__nar = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 HEAP8[$fmt$i] = 37;
 $0 = (($fmt$i) + 1|0);
 HEAP8[$0] = $__fmt;
 $1 = (($fmt$i) + 2|0);
 HEAP8[$1] = $__mod;
 $2 = (($fmt$i) + 3|0);
 HEAP8[$2] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0] = $__mod;
  HEAP8[$1] = $__fmt;
 }
 $4 = HEAP32[$this>>2]|0;
 (_strftime_l(($__nar|0),100,($fmt$i|0),($__tm|0),($4|0))|0);
 $5 = $mb;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $9 = HEAP32[$__we>>2]|0;
 $10 = $9;
 $11 = $__wb;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 $14 = HEAP32[$this>>2]|0;
 $15 = (_uselocale(($14|0))|0);
 $16 = (_mbsrtowcs($__wb,$__nb,$13,$mb)|0);
 $17 = ($15|0)==(0|0);
 if (!($17)) {
  (_uselocale(($15|0))|0);
 }
 $18 = ($16|0)==(-1);
 if ($18) {
  __ZNSt3__121__throw_runtime_errorEPKc(7760);
  // unreachable;
 } else {
  $19 = (($__wb) + ($16<<2)|0);
  HEAP32[$__we>>2] = $19;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result]=67109634&255;HEAP8[$agg$result+1|0]=(67109634>>8)&255;HEAP8[$agg$result+2|0]=(67109634>>16)&255;HEAP8[$agg$result+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $__atoms = 0, $__loc = 0;
 var $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $$byval_copy = sp;
 $__wbuf = sp + 144|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 28|0;
 $__neg = sp + 244|0;
 $0 = sp + 24|0;
 $__atoms = sp + 132|0;
 $__nbuf = sp + 32|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 125;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = HEAP32[6880>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $6 = (($$byval_copy) + 4|0);
  HEAP32[$6>>2] = (123);
  $7 = (($$byval_copy) + 8|0);
  HEAP32[$7>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $8 = HEAP32[((6880 + 4|0))>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (($3) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)>($9>>>0);
 if (!($18)) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 $19 = (($13) + ($9<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 HEAP8[$__neg] = 0;
 $23 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = (($__iob) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $26 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$25,$__err,$__neg,$20,$__wb,$__wn,$2)|0);
 if ($26) {
  $27 = HEAP32[$20>>2]|0;
  $28 = (($27) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  (FUNCTION_TABLE_iiiii[$29 & 7]($20,6496,((6496 + 10|0)),$__atoms)|0);
  $30 = HEAP32[$__wn>>2]|0;
  $31 = HEAP32[$__wb>>2]|0;
  $32 = $30;
  $33 = $31;
  $34 = (($32) - ($33))|0;
  $35 = ($34|0)>(98);
  if ($35) {
   $36 = (($34) + 2)|0;
   $37 = (_malloc($36)|0);
   $38 = ($37|0)==(0|0);
   if ($38) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $62 = $37;$__nc$0 = $37;
   }
  } else {
   $62 = 0;$__nc$0 = $__nbuf;
  }
  $39 = HEAP8[$__neg]|0;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $__nc$1 = $__nc$0;
  } else {
   $41 = (($__nc$0) + 1|0);
   HEAP8[$__nc$0] = 45;
   $__nc$1 = $41;
  }
  $42 = ($31>>>0)<($30>>>0);
  if ($42) {
   $43 = (($__atoms) + 10|0);
   $44 = $__atoms;
   $__nc$211 = $__nc$1;$__w$012 = $31;
   while(1) {
    $45 = HEAP8[$__w$012]|0;
    $$01$i = $__atoms;
    while(1) {
     $48 = HEAP8[$$01$i]|0;
     $49 = ($48<<24>>24)==($45<<24>>24);
     $47 = (($$01$i) + 1|0);
     if ($49) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $46 = ($47|0)==($43|0);
     if ($46) {
      $$0$lcssa$i = $43;
      break;
     } else {
      $$01$i = $47;
     }
    }
    $50 = $$0$lcssa$i;
    $51 = (($50) - ($44))|0;
    $52 = (6496 + ($51)|0);
    $53 = HEAP8[$52]|0;
    HEAP8[$__nc$211] = $53;
    $54 = (($__w$012) + 1|0);
    $55 = (($__nc$211) + 1|0);
    $56 = HEAP32[$__wn>>2]|0;
    $57 = ($54>>>0)<($56>>>0);
    if ($57) {
     $__nc$211 = $55;$__w$012 = $54;
    } else {
     $__nc$2$lcssa = $55;
     break;
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1;
  }
  HEAP8[$__nc$2$lcssa] = 0;
  HEAP32[$$byval_copy>>2] = $__v;
  $58 = (_sscanf(($__nbuf|0),(6512|0),($$byval_copy|0))|0);
  $59 = ($58|0)==(1);
  if (!($59)) {
   $60 = (___cxa_allocate_exception(8)|0);
   __ZNSt13runtime_errorC2EPKc($60,6520);
   ___cxa_throw(($60|0),(3888|0),(22|0));
   // unreachable;
  }
  $61 = ($62|0)==(0|0);
  if (!($61)) {
   _free($62);
  }
 }
 $63 = HEAP32[$__b>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $76 = 0;
 } else {
  $65 = (($63) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($63) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66|0)==($68|0);
  if ($69) {
   $70 = HEAP32[$63>>2]|0;
   $71 = (($70) + 36|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (FUNCTION_TABLE_ii[$72 & 127]($63)|0);
   $74 = ($73|0)==(-1);
   if ($74) {
    HEAP32[$__b>>2] = 0;
    $76 = 0;
   } else {
    $76 = $63;
   }
  } else {
   $76 = $63;
  }
 }
 $75 = ($76|0)==(0|0);
 $77 = HEAP32[$__e>>2]|0;
 $78 = ($77|0)==(0|0);
 do {
  if ($78) {
   label = 31;
  } else {
   $79 = (($77) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($77) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($80|0)==($82|0);
   if (!($83)) {
    if ($75) {
     break;
    } else {
     label = 33;
     break;
    }
   }
   $84 = HEAP32[$77>>2]|0;
   $85 = (($84) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 127]($77)|0);
   $88 = ($87|0)==(-1);
   if ($88) {
    HEAP32[$__e>>2] = 0;
    label = 31;
    break;
   } else {
    if ($75) {
     break;
    } else {
     label = 33;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if ($75) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $89 = HEAP32[$__err>>2]|0;
  $90 = $89 | 2;
  HEAP32[$__err>>2] = $90;
 }
 HEAP32[$agg$result>>2] = $76;
 $91 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($91)|0);
 $92 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $93 = ($92|0)==(0|0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$94 & 255]($92);
 STACKTOP = sp;return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0, $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0;
 var $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0, $$pre575 = 0, $$pre577 = 0, $$sum = 0, $$sum454 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0;
 var $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0, $free203 = 0, $free204 = 0, $free205 = 0, $free208 = 0, $isascii1$i = 0, $isascii1$i136 = 0, $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $or$cond = 0, $or$cond7 = 0;
 var $or$cond8 = 0, $sext = 0, $sext230 = 0, $sext231 = 0, $sext232 = 0, $switch = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $__gbuf = sp;
 $__pat = sp + 428|0;
 $__dp = sp + 472|0;
 $__ts = sp + 473|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__psn = sp + 416|0;
 $__nsn = sp + 436|0;
 $__spaces = sp + 400|0;
 $__fd = sp + 432|0;
 $__et = sp + 412|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $0 = (($__gbuf) + 400|0);
 $1 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $1;
 $2 = (($__ct) + 8|0);
 $3 = (($__nsn) + 1|0);
 $4 = (($__nsn) + 4|0);
 $5 = (($__nsn) + 8|0);
 $6 = (($__psn) + 1|0);
 $7 = (($__psn) + 4|0);
 $8 = (($__psn) + 8|0);
 $9 = $__flags & 512;
 $10 = ($9|0)!=(0);
 $11 = (($__sym) + 1|0);
 $12 = (($__sym) + 8|0);
 $13 = (($__sym) + 4|0);
 $14 = (($__spaces) + 1|0);
 $15 = (($__spaces) + 8|0);
 $16 = (($__spaces) + 4|0);
 $17 = (($__pat) + 3|0);
 $18 = (($__wb) + 4|0);
 $19 = (($__grp) + 4|0);
 $812 = $0;$813 = $__gbuf;$814 = $__gbuf;$815 = $__we;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 125;
 L1: while(1) {
  $20 = HEAP32[$__b>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    $33 = 0;
   } else {
    $22 = (($20) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($20) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = (($27) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 127]($20)|0);
     $31 = ($30|0)==(-1);
     if ($31) {
      HEAP32[$__b>>2] = 0;
      $33 = 0;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $33 = $$pre$i$i$i19;
      break;
     }
    } else {
     $33 = $20;
    }
   }
  } while(0);
  $32 = ($33|0)==(0|0);
  $34 = HEAP32[$__e>>2]|0;
  $35 = ($34|0)==(0|0);
  do {
   if ($35) {
    label = 12;
   } else {
    $36 = (($34) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($34) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if (!($40)) {
     if ($32) {
      $816 = $34;
      break;
     } else {
      $$lcssa293 = $814;$$lcssa309 = $813;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 269;
      break L1;
     }
    }
    $41 = HEAP32[$34>>2]|0;
    $42 = (($41) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 127]($34)|0);
    $45 = ($44|0)==(-1);
    if ($45) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($32) {
      $816 = $34;
      break;
     } else {
      $$lcssa293 = $814;$$lcssa309 = $813;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 269;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($32) {
    $$lcssa293 = $814;$$lcssa309 = $813;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
    label = 269;
    break;
   } else {
    $816 = 0;
   }
  }
  $46 = (($__pat) + ($__p$0353)|0);
  $47 = HEAP8[$46]|0;
  $48 = $47 << 24 >> 24;
  L21: do {
   switch ($48|0) {
   case 1:  {
    $cond = ($__p$0353|0)==(3);
    if ($cond) {
     $$lcssa293 = $814;$$lcssa309 = $813;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
     label = 269;
     break L1;
    }
    $49 = HEAP32[$__b>>2]|0;
    $50 = (($49) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($51|0)==($53|0);
    if ($54) {
     $55 = HEAP32[$49>>2]|0;
     $56 = (($55) + 36|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (FUNCTION_TABLE_ii[$57 & 127]($49)|0);
     $$0$i$i29 = $58;
    } else {
     $59 = HEAP8[$51]|0;
     $60 = $59&255;
     $$0$i$i29 = $60;
    }
    $61 = $$0$i$i29&255;
    $isascii1$i = ($61<<24>>24)>(-1);
    if (!($isascii1$i)) {
     label = 25;
     break L1;
    }
    $sext232 = $$0$i$i29 << 24;
    $62 = $sext232 >> 24;
    $63 = HEAP32[$2>>2]|0;
    $64 = (($63) + ($62<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65 & 8192;
    $67 = ($66<<16>>16)==(0);
    if ($67) {
     label = 25;
     break L1;
    }
    $68 = HEAP32[$__b>>2]|0;
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($70|0)==($72|0);
    if ($73) {
     $74 = HEAP32[$68>>2]|0;
     $75 = (($74) + 40|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (FUNCTION_TABLE_ii[$76 & 127]($68)|0);
     $$0$i$i32 = $77;
    } else {
     $78 = (($70) + 1|0);
     HEAP32[$69>>2] = $78;
     $79 = HEAP8[$70]|0;
     $80 = $79&255;
     $$0$i$i32 = $80;
    }
    $81 = $$0$i$i32&255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$81);
    label = 26;
    break;
   }
   case 0:  {
    label = 26;
    break;
   }
   case 3:  {
    $145 = HEAP8[$__psn]|0;
    $146 = $145 & 1;
    $147 = ($146<<24>>24)==(0);
    if ($147) {
     $149 = $145&255;
     $150 = $149 >>> 1;
     $160 = $150;
    } else {
     $148 = HEAP32[$7>>2]|0;
     $160 = $148;
    }
    $151 = HEAP8[$__nsn]|0;
    $152 = $151 & 1;
    $153 = ($152<<24>>24)==(0);
    if ($153) {
     $155 = $151&255;
     $156 = $155 >>> 1;
     $158 = $156;
    } else {
     $154 = HEAP32[$4>>2]|0;
     $158 = $154;
    }
    $157 = (0 - ($158))|0;
    $159 = ($160|0)==($157|0);
    if ($159) {
     $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
    } else {
     if ($147) {
      $162 = $145&255;
      $163 = $162 >>> 1;
      $165 = $163;
     } else {
      $161 = HEAP32[$7>>2]|0;
      $165 = $161;
     }
     $164 = ($165|0)==(0);
     if (!($164)) {
      if ($153) {
       $167 = $151&255;
       $168 = $167 >>> 1;
       $170 = $168;
      } else {
       $166 = HEAP32[$4>>2]|0;
       $170 = $166;
      }
      $169 = ($170|0)==(0);
      if (!($169)) {
       $244 = HEAP32[$__b>>2]|0;
       $245 = (($244) + 12|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = (($244) + 16|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = ($246|0)==($248|0);
       if ($249) {
        $250 = HEAP32[$244>>2]|0;
        $251 = (($250) + 36|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = (FUNCTION_TABLE_ii[$252 & 127]($244)|0);
        $$pre452 = HEAP8[$__psn]|0;
        $$pre574 = HEAP32[$__b>>2]|0;
        $$phi$trans$insert = (($$pre574) + 12|0);
        $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
        $$phi$trans$insert576 = (($$pre574) + 16|0);
        $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
        $$0$i$i96 = $253;$258 = $$pre452;$264 = $$pre574;$266 = $$pre575;$267 = $$pre577;
       } else {
        $254 = HEAP8[$246]|0;
        $255 = $254&255;
        $$0$i$i96 = $255;$258 = $145;$264 = $244;$266 = $246;$267 = $248;
       }
       $256 = $$0$i$i96&255;
       $257 = $258 & 1;
       $259 = ($257<<24>>24)==(0);
       $260 = HEAP32[$8>>2]|0;
       $$463 = $259 ? $6 : $260;
       $261 = HEAP8[$$463]|0;
       $262 = ($256<<24>>24)==($261<<24>>24);
       $263 = (($264) + 12|0);
       $265 = ($266|0)==($267|0);
       if ($262) {
        if ($265) {
         $268 = HEAP32[$264>>2]|0;
         $269 = (($268) + 40|0);
         $270 = HEAP32[$269>>2]|0;
         (FUNCTION_TABLE_ii[$270 & 127]($264)|0);
        } else {
         $271 = (($266) + 1|0);
         HEAP32[$263>>2] = $271;
        }
        $272 = HEAP8[$__psn]|0;
        $273 = $272 & 1;
        $274 = ($273<<24>>24)==(0);
        if ($274) {
         $276 = $272&255;
         $277 = $276 >>> 1;
         $279 = $277;
        } else {
         $275 = HEAP32[$7>>2]|0;
         $279 = $275;
        }
        $278 = ($279>>>0)>(1);
        $__psn$__trailing_sign$05 = $278 ? $__psn : $__trailing_sign$0355;
        $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
        break L21;
       }
       if ($265) {
        $280 = HEAP32[$264>>2]|0;
        $281 = (($280) + 36|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = (FUNCTION_TABLE_ii[$282 & 127]($264)|0);
        $$0$i$i114 = $283;
       } else {
        $284 = HEAP8[$266]|0;
        $285 = $284&255;
        $$0$i$i114 = $285;
       }
       $286 = $$0$i$i114&255;
       $287 = HEAP8[$__nsn]|0;
       $288 = $287 & 1;
       $289 = ($288<<24>>24)==(0);
       $290 = HEAP32[$5>>2]|0;
       $$464 = $289 ? $3 : $290;
       $291 = HEAP8[$$464]|0;
       $292 = ($286<<24>>24)==($291<<24>>24);
       if (!($292)) {
        label = 112;
        break L1;
       }
       $293 = HEAP32[$__b>>2]|0;
       $294 = (($293) + 12|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = (($293) + 16|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ($295|0)==($297|0);
       if ($298) {
        $299 = HEAP32[$293>>2]|0;
        $300 = (($299) + 40|0);
        $301 = HEAP32[$300>>2]|0;
        (FUNCTION_TABLE_ii[$301 & 127]($293)|0);
       } else {
        $302 = (($295) + 1|0);
        HEAP32[$294>>2] = $302;
       }
       HEAP8[$__neg] = 1;
       $303 = HEAP8[$__nsn]|0;
       $304 = $303 & 1;
       $305 = ($304<<24>>24)==(0);
       if ($305) {
        $307 = $303&255;
        $308 = $307 >>> 1;
        $310 = $308;
       } else {
        $306 = HEAP32[$4>>2]|0;
        $310 = $306;
       }
       $309 = ($310>>>0)>(1);
       $__nsn$__trailing_sign$06 = $309 ? $__nsn : $__trailing_sign$0355;
       $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
       break L21;
      }
     }
     if ($147) {
      $172 = $145&255;
      $173 = $172 >>> 1;
      $175 = $173;
     } else {
      $171 = HEAP32[$7>>2]|0;
      $175 = $171;
     }
     $174 = ($175|0)==(0);
     $176 = HEAP32[$__b>>2]|0;
     $177 = (($176) + 12|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($178|0)==($180|0);
     if ($174) {
      if ($181) {
       $213 = HEAP32[$176>>2]|0;
       $214 = (($213) + 36|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = (FUNCTION_TABLE_ii[$215 & 127]($176)|0);
       $$pre450 = HEAP8[$__nsn]|0;
       $$0$i$i84 = $216;$221 = $$pre450;
      } else {
       $217 = HEAP8[$178]|0;
       $218 = $217&255;
       $$0$i$i84 = $218;$221 = $151;
      }
      $219 = $$0$i$i84&255;
      $220 = $221 & 1;
      $222 = ($220<<24>>24)==(0);
      $223 = HEAP32[$5>>2]|0;
      $$462 = $222 ? $3 : $223;
      $224 = HEAP8[$$462]|0;
      $225 = ($219<<24>>24)==($224<<24>>24);
      if (!($225)) {
       $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       break L21;
      }
      $226 = HEAP32[$__b>>2]|0;
      $227 = (($226) + 12|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (($226) + 16|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ($228|0)==($230|0);
      if ($231) {
       $232 = HEAP32[$226>>2]|0;
       $233 = (($232) + 40|0);
       $234 = HEAP32[$233>>2]|0;
       (FUNCTION_TABLE_ii[$234 & 127]($226)|0);
      } else {
       $235 = (($228) + 1|0);
       HEAP32[$227>>2] = $235;
      }
      HEAP8[$__neg] = 1;
      $236 = HEAP8[$__nsn]|0;
      $237 = $236 & 1;
      $238 = ($237<<24>>24)==(0);
      if ($238) {
       $240 = $236&255;
       $241 = $240 >>> 1;
       $243 = $241;
      } else {
       $239 = HEAP32[$4>>2]|0;
       $243 = $239;
      }
      $242 = ($243>>>0)>(1);
      $__nsn$__trailing_sign$0 = $242 ? $__nsn : $__trailing_sign$0355;
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
      break L21;
     }
     if ($181) {
      $182 = HEAP32[$176>>2]|0;
      $183 = (($182) + 36|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = (FUNCTION_TABLE_ii[$184 & 127]($176)|0);
      $$pre451 = HEAP8[$__psn]|0;
      $$0$i$i67 = $185;$190 = $$pre451;
     } else {
      $186 = HEAP8[$178]|0;
      $187 = $186&255;
      $$0$i$i67 = $187;$190 = $145;
     }
     $188 = $$0$i$i67&255;
     $189 = $190 & 1;
     $191 = ($189<<24>>24)==(0);
     $192 = HEAP32[$8>>2]|0;
     $$ = $191 ? $6 : $192;
     $193 = HEAP8[$$]|0;
     $194 = ($188<<24>>24)==($193<<24>>24);
     if (!($194)) {
      HEAP8[$__neg] = 1;
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      break L21;
     }
     $195 = HEAP32[$__b>>2]|0;
     $196 = (($195) + 12|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($195) + 16|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = ($197|0)==($199|0);
     if ($200) {
      $201 = HEAP32[$195>>2]|0;
      $202 = (($201) + 40|0);
      $203 = HEAP32[$202>>2]|0;
      (FUNCTION_TABLE_ii[$203 & 127]($195)|0);
     } else {
      $204 = (($197) + 1|0);
      HEAP32[$196>>2] = $204;
     }
     $205 = HEAP8[$__psn]|0;
     $206 = $205 & 1;
     $207 = ($206<<24>>24)==(0);
     if ($207) {
      $209 = $205&255;
      $210 = $209 >>> 1;
      $212 = $210;
     } else {
      $208 = HEAP32[$7>>2]|0;
      $212 = $208;
     }
     $211 = ($212>>>0)>(1);
     $__psn$__trailing_sign$0 = $211 ? $__psn : $__trailing_sign$0355;
     $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
    }
    break;
   }
   case 2:  {
    $313 = ($__trailing_sign$0355|0)!=(0|0);
    $314 = ($__p$0353>>>0)<(2);
    $or$cond = $313 | $314;
    if (!($or$cond)) {
     $315 = ($__p$0353|0)==(2);
     if ($315) {
      $316 = HEAP8[$17]|0;
      $317 = ($316<<24>>24)!=(0);
      $318 = $317;
     } else {
      $318 = 0;
     }
     $brmerge = $10 | $318;
     if (!($brmerge)) {
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = 0;$free203 = $free202349;
      break L21;
     }
    }
    $319 = HEAP8[$__sym]|0;
    $320 = $319 & 1;
    $321 = ($320<<24>>24)==(0);
    $322 = HEAP32[$12>>2]|0;
    $$465 = $321 ? $11 : $322;
    $323 = ($__p$0353|0)==(0);
    L126: do {
     if ($323) {
      $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$465;$398 = $816;
     } else {
      $324 = (($__p$0353) + -1)|0;
      $325 = (($__pat) + ($324)|0);
      $326 = HEAP8[$325]|0;
      $switch = ($326&255)<(2);
      if ($switch) {
       $327 = $319&255;
       $328 = $327 >>> 1;
       $329 = HEAP32[$13>>2]|0;
       $$467 = $321 ? $328 : $329;
       $330 = (($$465) + ($$467)|0);
       $332 = $$465;
       while(1) {
        $331 = ($332|0)==($330|0);
        if ($331) {
         $$lcssa535 = $330;
         break;
        }
        $333 = HEAP8[$332]|0;
        $isascii1$i136 = ($333<<24>>24)>(-1);
        if (!($isascii1$i136)) {
         $$lcssa535 = $332;
         break;
        }
        $334 = $333 << 24 >> 24;
        $335 = HEAP32[$2>>2]|0;
        $336 = (($335) + ($334<<1)|0);
        $337 = HEAP16[$336>>1]|0;
        $338 = $337 & 8192;
        $339 = ($338<<16>>16)==(0);
        $340 = (($332) + 1|0);
        if ($339) {
         $$lcssa535 = $332;
         break;
        } else {
         $332 = $340;
        }
       }
       $341 = $$lcssa535;
       $342 = $$465;
       $343 = (($341) - ($342))|0;
       $344 = HEAP8[$__spaces]|0;
       $345 = $344 & 1;
       $346 = ($345<<24>>24)==(0);
       if ($346) {
        $348 = $344&255;
        $349 = $348 >>> 1;
        $351 = $349;
       } else {
        $347 = HEAP32[$16>>2]|0;
        $351 = $347;
       }
       $350 = ($343>>>0)>($351>>>0);
       if ($350) {
        $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$465;$398 = $816;
       } else {
        if ($346) {
         $355 = $344&255;
         $356 = $355 >>> 1;
         $$sum454 = (($356) - ($343))|0;
         $357 = ((($__spaces) + ($$sum454)|0) + 1|0);
         $359 = $14;$360 = $356;$362 = $357;
        } else {
         $352 = HEAP32[$15>>2]|0;
         $353 = HEAP32[$16>>2]|0;
         $$sum = (($353) - ($343))|0;
         $354 = (($352) + ($$sum)|0);
         $359 = $352;$360 = $353;$362 = $354;
        }
        $358 = (($359) + ($360)|0);
        $361 = ($362|0)==($358|0);
        if ($361) {
         $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$lcssa535;$398 = $816;
        } else {
         $364 = $362;$366 = $$465;
         while(1) {
          $363 = HEAP8[$364]|0;
          $365 = HEAP8[$366]|0;
          $367 = ($363<<24>>24)==($365<<24>>24);
          if (!($367)) {
           $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$465;$398 = $816;
           break L126;
          }
          $368 = (($364) + 1|0);
          $369 = (($366) + 1|0);
          $370 = ($368|0)==($358|0);
          if ($370) {
           $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$lcssa535;$398 = $816;
           break;
          } else {
           $364 = $368;$366 = $369;
          }
         }
        }
       }
      } else {
       $$pre$i2$i$i180 = $816;$372 = $319;$382 = $$465;$398 = $816;
      }
     }
    } while(0);
    L146: while(1) {
     $371 = $372 & 1;
     $373 = ($371<<24>>24)==(0);
     if ($373) {
      $376 = $372&255;
      $377 = $376 >>> 1;
      $379 = $11;$380 = $377;
     } else {
      $374 = HEAP32[$12>>2]|0;
      $375 = HEAP32[$13>>2]|0;
      $379 = $374;$380 = $375;
     }
     $378 = (($379) + ($380)|0);
     $381 = ($382|0)==($378|0);
     if ($381) {
      break;
     }
     $383 = HEAP32[$__b>>2]|0;
     $384 = ($383|0)==(0|0);
     do {
      if ($384) {
       $396 = 0;
      } else {
       $385 = (($383) + 12|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = (($383) + 16|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = ($386|0)==($388|0);
       if ($389) {
        $390 = HEAP32[$383>>2]|0;
        $391 = (($390) + 36|0);
        $392 = HEAP32[$391>>2]|0;
        $393 = (FUNCTION_TABLE_ii[$392 & 127]($383)|0);
        $394 = ($393|0)==(-1);
        if ($394) {
         HEAP32[$__b>>2] = 0;
         $396 = 0;
         break;
        } else {
         $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
         $396 = $$pre$i$i$i176;
         break;
        }
       } else {
        $396 = $383;
       }
      }
     } while(0);
     $395 = ($396|0)==(0|0);
     $397 = ($398|0)==(0|0);
     do {
      if ($397) {
       $$pre$i2$i$i180428 = $$pre$i2$i$i180;
       label = 147;
      } else {
       $399 = (($398) + 12|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = (($398) + 16|0);
       $402 = HEAP32[$401>>2]|0;
       $403 = ($400|0)==($402|0);
       if (!($403)) {
        if ($395) {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180;$822 = $398;
         break;
        } else {
         break L146;
        }
       }
       $404 = HEAP32[$398>>2]|0;
       $405 = (($404) + 36|0);
       $406 = HEAP32[$405>>2]|0;
       $407 = (FUNCTION_TABLE_ii[$406 & 127]($398)|0);
       $408 = ($407|0)==(-1);
       if ($408) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i180428 = 0;
        label = 147;
        break;
       } else {
        $409 = ($$pre$i2$i$i180|0)==(0|0);
        $tmp$i$i182 = $395 ^ $409;
        if ($tmp$i$i182) {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180;$822 = $$pre$i2$i$i180;
         break;
        } else {
         break L146;
        }
       }
      }
     } while(0);
     if ((label|0) == 147) {
      label = 0;
      if ($395) {
       break;
      } else {
       $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$822 = 0;
      }
     }
     $410 = HEAP32[$__b>>2]|0;
     $411 = (($410) + 12|0);
     $412 = HEAP32[$411>>2]|0;
     $413 = (($410) + 16|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = ($412|0)==($414|0);
     if ($415) {
      $416 = HEAP32[$410>>2]|0;
      $417 = (($416) + 36|0);
      $418 = HEAP32[$417>>2]|0;
      $419 = (FUNCTION_TABLE_ii[$418 & 127]($410)|0);
      $$0$i$i172 = $419;
     } else {
      $420 = HEAP8[$412]|0;
      $421 = $420&255;
      $$0$i$i172 = $421;
     }
     $422 = $$0$i$i172&255;
     $423 = HEAP8[$382]|0;
     $424 = ($422<<24>>24)==($423<<24>>24);
     if (!($424)) {
      break;
     }
     $425 = HEAP32[$__b>>2]|0;
     $426 = (($425) + 12|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = (($425) + 16|0);
     $429 = HEAP32[$428>>2]|0;
     $430 = ($427|0)==($429|0);
     if ($430) {
      $431 = HEAP32[$425>>2]|0;
      $432 = (($431) + 40|0);
      $433 = HEAP32[$432>>2]|0;
      (FUNCTION_TABLE_ii[$433 & 127]($425)|0);
     } else {
      $434 = (($427) + 1|0);
      HEAP32[$426>>2] = $434;
     }
     $435 = (($382) + 1|0);
     $$pre = HEAP8[$__sym]|0;
     $$pre$i2$i$i180 = $$pre$i2$i$i180427;$372 = $$pre;$382 = $435;$398 = $822;
    }
    if ($10) {
     $436 = HEAP8[$__sym]|0;
     $437 = $436 & 1;
     $438 = ($437<<24>>24)==(0);
     if ($438) {
      $441 = $436&255;
      $442 = $441 >>> 1;
      $444 = $11;$445 = $442;
     } else {
      $439 = HEAP32[$12>>2]|0;
      $440 = HEAP32[$13>>2]|0;
      $444 = $439;$445 = $440;
     }
     $443 = (($444) + ($445)|0);
     $446 = ($382|0)==($443|0);
     if ($446) {
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     } else {
      label = 162;
      break L1;
     }
    } else {
     $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
    }
    break;
   }
   case 4:  {
    $496 = $815;$529 = $813;$530 = $812;$534 = $814;$__ng$0 = 0;$free201 = $free202349;
    L186: while(1) {
     $449 = HEAP32[$__b>>2]|0;
     $450 = ($449|0)==(0|0);
     do {
      if ($450) {
       $462 = 0;
      } else {
       $451 = (($449) + 12|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = (($449) + 16|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = ($452|0)==($454|0);
       if ($455) {
        $456 = HEAP32[$449>>2]|0;
        $457 = (($456) + 36|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = (FUNCTION_TABLE_ii[$458 & 127]($449)|0);
        $460 = ($459|0)==(-1);
        if ($460) {
         HEAP32[$__b>>2] = 0;
         $462 = 0;
         break;
        } else {
         $$pre$i$i$i156 = HEAP32[$__b>>2]|0;
         $462 = $$pre$i$i$i156;
         break;
        }
       } else {
        $462 = $449;
       }
      }
     } while(0);
     $461 = ($462|0)==(0|0);
     $463 = HEAP32[$__e>>2]|0;
     $464 = ($463|0)==(0|0);
     do {
      if ($464) {
       label = 173;
      } else {
       $465 = (($463) + 12|0);
       $466 = HEAP32[$465>>2]|0;
       $467 = (($463) + 16|0);
       $468 = HEAP32[$467>>2]|0;
       $469 = ($466|0)==($468|0);
       if (!($469)) {
        if ($461) {
         break;
        } else {
         break L186;
        }
       }
       $470 = HEAP32[$463>>2]|0;
       $471 = (($470) + 36|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = (FUNCTION_TABLE_ii[$472 & 127]($463)|0);
       $474 = ($473|0)==(-1);
       if ($474) {
        HEAP32[$__e>>2] = 0;
        label = 173;
        break;
       } else {
        if ($461) {
         break;
        } else {
         break L186;
        }
       }
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      if ($461) {
       break;
      }
     }
     $475 = HEAP32[$__b>>2]|0;
     $476 = (($475) + 12|0);
     $477 = HEAP32[$476>>2]|0;
     $478 = (($475) + 16|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = ($477|0)==($479|0);
     if ($480) {
      $481 = HEAP32[$475>>2]|0;
      $482 = (($481) + 36|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = (FUNCTION_TABLE_ii[$483 & 127]($475)|0);
      $$0$i$i151 = $484;
     } else {
      $485 = HEAP8[$477]|0;
      $486 = $485&255;
      $$0$i$i151 = $486;
     }
     $487 = $$0$i$i151&255;
     $isascii1$i149 = ($487<<24>>24)>(-1);
     if ($isascii1$i149) {
      $sext230 = $$0$i$i151 << 24;
      $488 = $sext230 >> 24;
      $489 = HEAP32[$2>>2]|0;
      $490 = (($489) + ($488<<1)|0);
      $491 = HEAP16[$490>>1]|0;
      $492 = $491 & 2048;
      $493 = ($492<<16>>16)==(0);
      if ($493) {
       label = 189;
      } else {
       $494 = HEAP32[$__wn>>2]|0;
       $495 = ($494|0)==($496|0);
       if ($495) {
        $497 = HEAP32[$18>>2]|0;
        $498 = ($497|0)!=(125|0);
        $499 = HEAP32[$__wb>>2]|0;
        $500 = $496;
        $501 = $499;
        $502 = (($500) - ($501))|0;
        $503 = ($502>>>0)<(2147483647);
        $504 = $502 << 1;
        $$$i140 = $503 ? $504 : -1;
        $505 = $498 ? $499 : 0;
        $506 = (_realloc($505,$$$i140)|0);
        $507 = ($506|0)==(0|0);
        if ($507) {
         label = 182;
         break L1;
        }
        if ($498) {
         HEAP32[$__wb>>2] = $506;
         $511 = $506;
        } else {
         $$pr$i142 = HEAP32[$__wb>>2]|0;
         HEAP32[$__wb>>2] = $506;
         $508 = ($$pr$i142|0)==(0|0);
         if ($508) {
          $511 = $506;
         } else {
          $509 = HEAP32[$18>>2]|0;
          FUNCTION_TABLE_vi[$509 & 255]($$pr$i142);
          $$pre$i143 = HEAP32[$__wb>>2]|0;
          $511 = $$pre$i143;
         }
        }
        HEAP32[$18>>2] = 126;
        $510 = (($511) + ($502)|0);
        HEAP32[$__wn>>2] = $510;
        $512 = HEAP32[$__wb>>2]|0;
        $513 = (($512) + ($$$i140)|0);
        $515 = $510;$823 = $513;
       } else {
        $515 = $494;$823 = $496;
       }
       $514 = (($515) + 1|0);
       HEAP32[$__wn>>2] = $514;
       HEAP8[$515] = $487;
       $516 = (($__ng$0) + 1)|0;
       $824 = $823;$825 = $534;$826 = $529;$827 = $530;$__ng$1 = $516;$free = $free201;
      }
     } else {
      label = 189;
     }
     if ((label|0) == 189) {
      label = 0;
      $517 = HEAP8[$__grp]|0;
      $518 = $517 & 1;
      $519 = ($518<<24>>24)==(0);
      if ($519) {
       $521 = $517&255;
       $522 = $521 >>> 1;
       $524 = $522;
      } else {
       $520 = HEAP32[$19>>2]|0;
       $524 = $520;
      }
      $523 = ($524|0)==(0);
      $525 = ($__ng$0|0)==(0);
      $or$cond7 = $523 | $525;
      if ($or$cond7) {
       break;
      }
      $526 = HEAP8[$__ts]|0;
      $527 = ($487<<24>>24)==($526<<24>>24);
      if (!($527)) {
       break;
      }
      $528 = ($529|0)==($530|0);
      if ($528) {
       $531 = ($free201|0)==(125|0);
       $532 = $529;
       $533 = $534;
       $535 = (($532) - ($533))|0;
       $536 = ($535>>>0)<(2147483647);
       $537 = $535 << 1;
       $$$i128 = $536 ? $537 : -1;
       $538 = $535 >> 2;
       if ($531) {
        $539 = 0;
       } else {
        $539 = $534;
       }
       $540 = (_realloc($539,$$$i128)|0);
       $541 = ($540|0)==(0|0);
       if ($541) {
        label = 198;
        break L1;
       }
       $542 = $$$i128 >>> 2;
       $543 = (($540) + ($538<<2)|0);
       $544 = (($540) + ($542<<2)|0);
       $546 = $543;$828 = $540;$829 = $544;$free200 = 126;
      } else {
       $546 = $529;$828 = $534;$829 = $530;$free200 = $free201;
      }
      $545 = (($546) + 4|0);
      HEAP32[$546>>2] = $__ng$0;
      $824 = $496;$825 = $828;$826 = $545;$827 = $829;$__ng$1 = 0;$free = $free200;
     }
     $547 = HEAP32[$__b>>2]|0;
     $548 = (($547) + 12|0);
     $549 = HEAP32[$548>>2]|0;
     $550 = (($547) + 16|0);
     $551 = HEAP32[$550>>2]|0;
     $552 = ($549|0)==($551|0);
     if ($552) {
      $553 = HEAP32[$547>>2]|0;
      $554 = (($553) + 40|0);
      $555 = HEAP32[$554>>2]|0;
      (FUNCTION_TABLE_ii[$555 & 127]($547)|0);
      $496 = $824;$529 = $826;$530 = $827;$534 = $825;$__ng$0 = $__ng$1;$free201 = $free;
      continue;
     } else {
      $556 = (($549) + 1|0);
      HEAP32[$548>>2] = $556;
      $496 = $824;$529 = $826;$530 = $827;$534 = $825;$__ng$0 = $__ng$1;$free201 = $free;
      continue;
     }
    }
    $557 = ($534|0)==($529|0);
    $558 = ($__ng$0|0)==(0);
    $or$cond8 = $557 | $558;
    if ($or$cond8) {
     $830 = $534;$831 = $529;$832 = $530;$free204 = $free201;
    } else {
     $559 = ($529|0)==($530|0);
     if ($559) {
      $560 = ($free201|0)==(125|0);
      $561 = $529;
      $562 = $534;
      $563 = (($561) - ($562))|0;
      $564 = ($563>>>0)<(2147483647);
      $565 = $563 << 1;
      $$$i118 = $564 ? $565 : -1;
      $566 = $563 >> 2;
      if ($560) {
       $567 = 0;
      } else {
       $567 = $534;
      }
      $568 = (_realloc($567,$$$i118)|0);
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 209;
       break L1;
      }
      $570 = $$$i118 >>> 2;
      $571 = (($568) + ($566<<2)|0);
      $572 = (($568) + ($570<<2)|0);
      $574 = $571;$833 = $568;$834 = $572;$free205 = 126;
     } else {
      $574 = $529;$833 = $534;$834 = $530;$free205 = $free201;
     }
     $573 = (($574) + 4|0);
     HEAP32[$574>>2] = $__ng$0;
     $830 = $833;$831 = $573;$832 = $834;$free204 = $free205;
    }
    $575 = HEAP32[$__fd>>2]|0;
    $576 = ($575|0)>(0);
    if ($576) {
     $577 = HEAP32[$__b>>2]|0;
     $578 = ($577|0)==(0|0);
     do {
      if ($578) {
       $590 = 0;
      } else {
       $579 = (($577) + 12|0);
       $580 = HEAP32[$579>>2]|0;
       $581 = (($577) + 16|0);
       $582 = HEAP32[$581>>2]|0;
       $583 = ($580|0)==($582|0);
       if ($583) {
        $584 = HEAP32[$577>>2]|0;
        $585 = (($584) + 36|0);
        $586 = HEAP32[$585>>2]|0;
        $587 = (FUNCTION_TABLE_ii[$586 & 127]($577)|0);
        $588 = ($587|0)==(-1);
        if ($588) {
         HEAP32[$__b>>2] = 0;
         $590 = 0;
         break;
        } else {
         $$pre$i$i$i101 = HEAP32[$__b>>2]|0;
         $590 = $$pre$i$i$i101;
         break;
        }
       } else {
        $590 = $577;
       }
      }
     } while(0);
     $589 = ($590|0)==(0|0);
     $591 = HEAP32[$__e>>2]|0;
     $592 = ($591|0)==(0|0);
     do {
      if ($592) {
       label = 223;
      } else {
       $593 = (($591) + 12|0);
       $594 = HEAP32[$593>>2]|0;
       $595 = (($591) + 16|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = ($594|0)==($596|0);
       if (!($597)) {
        if ($589) {
         $836 = $591;
         break;
        } else {
         label = 229;
         break L1;
        }
       }
       $598 = HEAP32[$591>>2]|0;
       $599 = (($598) + 36|0);
       $600 = HEAP32[$599>>2]|0;
       $601 = (FUNCTION_TABLE_ii[$600 & 127]($591)|0);
       $602 = ($601|0)==(-1);
       if ($602) {
        HEAP32[$__e>>2] = 0;
        label = 223;
        break;
       } else {
        if ($589) {
         $836 = $591;
         break;
        } else {
         label = 229;
         break L1;
        }
       }
      }
     } while(0);
     if ((label|0) == 223) {
      label = 0;
      if ($589) {
       label = 229;
       break L1;
      } else {
       $836 = 0;
      }
     }
     $603 = HEAP32[$__b>>2]|0;
     $604 = (($603) + 12|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = (($603) + 16|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = ($605|0)==($607|0);
     if ($608) {
      $609 = HEAP32[$603>>2]|0;
      $610 = (($609) + 36|0);
      $611 = HEAP32[$610>>2]|0;
      $612 = (FUNCTION_TABLE_ii[$611 & 127]($603)|0);
      $$0$i$i93 = $612;
     } else {
      $613 = HEAP8[$605]|0;
      $614 = $613&255;
      $$0$i$i93 = $614;
     }
     $615 = $$0$i$i93&255;
     $616 = HEAP8[$__dp]|0;
     $617 = ($615<<24>>24)==($616<<24>>24);
     if (!($617)) {
      label = 229;
      break L1;
     }
     $620 = HEAP32[$__b>>2]|0;
     $621 = (($620) + 12|0);
     $622 = HEAP32[$621>>2]|0;
     $623 = (($620) + 16|0);
     $624 = HEAP32[$623>>2]|0;
     $625 = ($622|0)==($624|0);
     if ($625) {
      $626 = HEAP32[$620>>2]|0;
      $627 = (($626) + 40|0);
      $628 = HEAP32[$627>>2]|0;
      (FUNCTION_TABLE_ii[$628 & 127]($620)|0);
      $$pre$i2$i$i75 = $836;$645 = $836;$680 = $496;$714 = $575;
     } else {
      $629 = (($622) + 1|0);
      HEAP32[$621>>2] = $629;
      $$pre$i2$i$i75 = $836;$645 = $836;$680 = $496;$714 = $575;
     }
     while(1) {
      $630 = HEAP32[$__b>>2]|0;
      $631 = ($630|0)==(0|0);
      do {
       if ($631) {
        $643 = 0;
       } else {
        $632 = (($630) + 12|0);
        $633 = HEAP32[$632>>2]|0;
        $634 = (($630) + 16|0);
        $635 = HEAP32[$634>>2]|0;
        $636 = ($633|0)==($635|0);
        if ($636) {
         $637 = HEAP32[$630>>2]|0;
         $638 = (($637) + 36|0);
         $639 = HEAP32[$638>>2]|0;
         $640 = (FUNCTION_TABLE_ii[$639 & 127]($630)|0);
         $641 = ($640|0)==(-1);
         if ($641) {
          HEAP32[$__b>>2] = 0;
          $643 = 0;
          break;
         } else {
          $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
          $643 = $$pre$i$i$i71;
          break;
         }
        } else {
         $643 = $630;
        }
       }
      } while(0);
      $642 = ($643|0)==(0|0);
      $644 = ($645|0)==(0|0);
      do {
       if ($644) {
        $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
        label = 243;
       } else {
        $646 = (($645) + 12|0);
        $647 = HEAP32[$646>>2]|0;
        $648 = (($645) + 16|0);
        $649 = HEAP32[$648>>2]|0;
        $650 = ($647|0)==($649|0);
        if (!($650)) {
         if ($642) {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$837 = $645;
          break;
         } else {
          label = 250;
          break L1;
         }
        }
        $651 = HEAP32[$645>>2]|0;
        $652 = (($651) + 36|0);
        $653 = HEAP32[$652>>2]|0;
        $654 = (FUNCTION_TABLE_ii[$653 & 127]($645)|0);
        $655 = ($654|0)==(-1);
        if ($655) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i75431$ph = 0;
         label = 243;
         break;
        } else {
         $656 = ($$pre$i2$i$i75|0)==(0|0);
         $tmp$i$i77 = $642 ^ $656;
         if ($tmp$i$i77) {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$837 = $$pre$i2$i$i75;
          break;
         } else {
          label = 250;
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 243) {
       label = 0;
       if ($642) {
        label = 250;
        break L1;
       } else {
        $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$837 = 0;
       }
      }
      $657 = HEAP32[$__b>>2]|0;
      $658 = (($657) + 12|0);
      $659 = HEAP32[$658>>2]|0;
      $660 = (($657) + 16|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($659|0)==($661|0);
      if ($662) {
       $663 = HEAP32[$657>>2]|0;
       $664 = (($663) + 36|0);
       $665 = HEAP32[$664>>2]|0;
       $666 = (FUNCTION_TABLE_ii[$665 & 127]($657)|0);
       $$0$i$i64 = $666;
      } else {
       $667 = HEAP8[$659]|0;
       $668 = $667&255;
       $$0$i$i64 = $668;
      }
      $669 = $$0$i$i64&255;
      $isascii1$i62 = ($669<<24>>24)>(-1);
      if (!($isascii1$i62)) {
       label = 250;
       break L1;
      }
      $sext = $$0$i$i64 << 24;
      $670 = $sext >> 24;
      $671 = HEAP32[$2>>2]|0;
      $672 = (($671) + ($670<<1)|0);
      $673 = HEAP16[$672>>1]|0;
      $674 = $673 & 2048;
      $675 = ($674<<16>>16)==(0);
      if ($675) {
       label = 250;
       break L1;
      }
      $678 = HEAP32[$__wn>>2]|0;
      $679 = ($678|0)==($680|0);
      if ($679) {
       $681 = HEAP32[$18>>2]|0;
       $682 = ($681|0)!=(125|0);
       $683 = HEAP32[$__wb>>2]|0;
       $684 = $680;
       $685 = $683;
       $686 = (($684) - ($685))|0;
       $687 = ($686>>>0)<(2147483647);
       $688 = $686 << 1;
       $$$i = $687 ? $688 : -1;
       $689 = $682 ? $683 : 0;
       $690 = (_realloc($689,$$$i)|0);
       $691 = ($690|0)==(0|0);
       if ($691) {
        label = 253;
        break L1;
       }
       if ($682) {
        HEAP32[$__wb>>2] = $690;
        $695 = $690;
       } else {
        $$pr$i = HEAP32[$__wb>>2]|0;
        HEAP32[$__wb>>2] = $690;
        $692 = ($$pr$i|0)==(0|0);
        if ($692) {
         $695 = $690;
        } else {
         $693 = HEAP32[$18>>2]|0;
         FUNCTION_TABLE_vi[$693 & 255]($$pr$i);
         $$pre$i = HEAP32[$__wb>>2]|0;
         $695 = $$pre$i;
        }
       }
       HEAP32[$18>>2] = 126;
       $694 = (($695) + ($686)|0);
       HEAP32[$__wn>>2] = $694;
       $696 = HEAP32[$__wb>>2]|0;
       $697 = (($696) + ($$$i)|0);
       $838 = $694;$839 = $697;
      } else {
       $838 = $678;$839 = $680;
      }
      $698 = HEAP32[$__b>>2]|0;
      $699 = (($698) + 12|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($698) + 16|0);
      $702 = HEAP32[$701>>2]|0;
      $703 = ($700|0)==($702|0);
      if ($703) {
       $704 = HEAP32[$698>>2]|0;
       $705 = (($704) + 36|0);
       $706 = HEAP32[$705>>2]|0;
       $707 = (FUNCTION_TABLE_ii[$706 & 127]($698)|0);
       $$pre453 = HEAP32[$__wn>>2]|0;
       $$0$i$i53 = $707;$712 = $$pre453;
      } else {
       $708 = HEAP8[$700]|0;
       $709 = $708&255;
       $$0$i$i53 = $709;$712 = $838;
      }
      $710 = $$0$i$i53&255;
      $711 = (($712) + 1|0);
      HEAP32[$__wn>>2] = $711;
      HEAP8[$712] = $710;
      $713 = (($714) + -1)|0;
      HEAP32[$__fd>>2] = $713;
      $715 = HEAP32[$__b>>2]|0;
      $716 = (($715) + 12|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = (($715) + 16|0);
      $719 = HEAP32[$718>>2]|0;
      $720 = ($717|0)==($719|0);
      if ($720) {
       $721 = HEAP32[$715>>2]|0;
       $722 = (($721) + 40|0);
       $723 = HEAP32[$722>>2]|0;
       (FUNCTION_TABLE_ii[$723 & 127]($715)|0);
      } else {
       $725 = (($717) + 1|0);
       HEAP32[$716>>2] = $725;
      }
      $724 = ($713|0)>(0);
      if ($724) {
       $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$645 = $837;$680 = $839;$714 = $713;
      } else {
       $835 = $839;
       break;
      }
     }
    } else {
     $835 = $496;
    }
    $726 = HEAP32[$__wn>>2]|0;
    $727 = HEAP32[$__wb>>2]|0;
    $728 = ($726|0)==($727|0);
    if ($728) {
     label = 267;
     break L1;
    } else {
     $817 = $835;$818 = $830;$819 = $831;$820 = $832;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
    }
    break;
   }
   default: {
    $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
   }
   }
  } while(0);
  L324: do {
   if ((label|0) == 26) {
    label = 0;
    $84 = ($__p$0353|0)==(3);
    if ($84) {
     $$lcssa293 = $814;$$lcssa309 = $813;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
     label = 269;
     break L1;
    } else {
     $$pre$i2$i$i39 = $816;$100 = $816;
    }
    while(1) {
     $85 = HEAP32[$__b>>2]|0;
     $86 = ($85|0)==(0|0);
     do {
      if ($86) {
       $98 = 0;
      } else {
       $87 = (($85) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($85) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88|0)==($90|0);
       if ($91) {
        $92 = HEAP32[$85>>2]|0;
        $93 = (($92) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (FUNCTION_TABLE_ii[$94 & 127]($85)|0);
        $96 = ($95|0)==(-1);
        if ($96) {
         HEAP32[$__b>>2] = 0;
         $98 = 0;
         break;
        } else {
         $$pre$i$i$i35 = HEAP32[$__b>>2]|0;
         $98 = $$pre$i$i$i35;
         break;
        }
       } else {
        $98 = $85;
       }
      }
     } while(0);
     $97 = ($98|0)==(0|0);
     $99 = ($100|0)==(0|0);
     do {
      if ($99) {
       $$pre$i2$i$i39424 = $$pre$i2$i$i39;
       label = 37;
      } else {
       $101 = (($100) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (($100) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if (!($105)) {
        if ($97) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39;$821 = $100;
         break;
        } else {
         $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L324;
        }
       }
       $106 = HEAP32[$100>>2]|0;
       $107 = (($106) + 36|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (FUNCTION_TABLE_ii[$108 & 127]($100)|0);
       $110 = ($109|0)==(-1);
       if ($110) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i39424 = 0;
        label = 37;
        break;
       } else {
        $111 = ($$pre$i2$i$i39|0)==(0|0);
        $tmp$i$i41 = $97 ^ $111;
        if ($tmp$i$i41) {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39;$821 = $$pre$i2$i$i39;
         break;
        } else {
         $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L324;
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      label = 0;
      if ($97) {
       $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       break L324;
      } else {
       $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$821 = 0;
      }
     }
     $112 = HEAP32[$__b>>2]|0;
     $113 = (($112) + 12|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($114|0)==($116|0);
     if ($117) {
      $118 = HEAP32[$112>>2]|0;
      $119 = (($118) + 36|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (FUNCTION_TABLE_ii[$120 & 127]($112)|0);
      $$0$i$i45 = $121;
     } else {
      $122 = HEAP8[$114]|0;
      $123 = $122&255;
      $$0$i$i45 = $123;
     }
     $124 = $$0$i$i45&255;
     $isascii1$i48 = ($124<<24>>24)>(-1);
     if (!($isascii1$i48)) {
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      break L324;
     }
     $sext231 = $$0$i$i45 << 24;
     $125 = $sext231 >> 24;
     $126 = HEAP32[$2>>2]|0;
     $127 = (($126) + ($125<<1)|0);
     $128 = HEAP16[$127>>1]|0;
     $129 = $128 & 8192;
     $130 = ($129<<16>>16)==(0);
     if ($130) {
      $817 = $815;$818 = $814;$819 = $813;$820 = $812;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      break L324;
     }
     $131 = HEAP32[$__b>>2]|0;
     $132 = (($131) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($131) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($133|0)==($135|0);
     if ($136) {
      $137 = HEAP32[$131>>2]|0;
      $138 = (($137) + 40|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = (FUNCTION_TABLE_ii[$139 & 127]($131)|0);
      $$0$i$i50 = $140;
     } else {
      $141 = (($133) + 1|0);
      HEAP32[$132>>2] = $141;
      $142 = HEAP8[$133]|0;
      $143 = $142&255;
      $$0$i$i50 = $143;
     }
     $144 = $$0$i$i50&255;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$144);
     $$pre$i2$i$i39 = $$pre$i2$i$i39426;$100 = $821;
    }
   }
  } while(0);
  $731 = (($__p$0353) + 1)|0;
  $732 = ($731>>>0)<(4);
  if ($732) {
   $812 = $820;$813 = $819;$814 = $818;$815 = $817;$__p$0353 = $731;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
  } else {
   $$lcssa293 = $818;$$lcssa309 = $819;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
   label = 269;
   break;
  }
 }
 L357: do {
  if ((label|0) == 25) {
   $82 = HEAP32[$__err>>2]|0;
   $83 = $82 | 4;
   HEAP32[$__err>>2] = $83;
   $$0 = 0;$811 = $814;$free208 = $free202349;
  }
  else if ((label|0) == 112) {
   $311 = HEAP32[$__err>>2]|0;
   $312 = $311 | 4;
   HEAP32[$__err>>2] = $312;
   $$0 = 0;$811 = $814;$free208 = $free202349;
  }
  else if ((label|0) == 162) {
   $447 = HEAP32[$__err>>2]|0;
   $448 = $447 | 4;
   HEAP32[$__err>>2] = $448;
   $$0 = 0;$811 = $814;$free208 = $free202349;
  }
  else if ((label|0) == 182) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 198) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 209) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 229) {
   $618 = HEAP32[$__err>>2]|0;
   $619 = $618 | 4;
   HEAP32[$__err>>2] = $619;
   $$0 = 0;$811 = $830;$free208 = $free204;
  }
  else if ((label|0) == 250) {
   $676 = HEAP32[$__err>>2]|0;
   $677 = $676 | 4;
   HEAP32[$__err>>2] = $677;
   $$0 = 0;$811 = $830;$free208 = $free204;
  }
  else if ((label|0) == 253) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 267) {
   $729 = HEAP32[$__err>>2]|0;
   $730 = $729 | 4;
   HEAP32[$__err>>2] = $730;
   $$0 = 0;$811 = $830;$free208 = $free204;
  }
  else if ((label|0) == 269) {
   $733 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L367: do {
    if (!($733)) {
     $734 = (($__trailing_sign$0$lcssa) + 1|0);
     $735 = (($__trailing_sign$0$lcssa) + 8|0);
     $736 = (($__trailing_sign$0$lcssa) + 4|0);
     $__i$0 = 1;
     L369: while(1) {
      $737 = HEAP8[$__trailing_sign$0$lcssa]|0;
      $738 = $737 & 1;
      $739 = ($738<<24>>24)==(0);
      if ($739) {
       $741 = $737&255;
       $742 = $741 >>> 1;
       $744 = $742;
      } else {
       $740 = HEAP32[$736>>2]|0;
       $744 = $740;
      }
      $743 = ($__i$0>>>0)<($744>>>0);
      if (!($743)) {
       break L367;
      }
      $745 = HEAP32[$__b>>2]|0;
      $746 = ($745|0)==(0|0);
      do {
       if ($746) {
        $758 = 0;
       } else {
        $747 = (($745) + 12|0);
        $748 = HEAP32[$747>>2]|0;
        $749 = (($745) + 16|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = ($748|0)==($750|0);
        if ($751) {
         $752 = HEAP32[$745>>2]|0;
         $753 = (($752) + 36|0);
         $754 = HEAP32[$753>>2]|0;
         $755 = (FUNCTION_TABLE_ii[$754 & 127]($745)|0);
         $756 = ($755|0)==(-1);
         if ($756) {
          HEAP32[$__b>>2] = 0;
          $758 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $758 = $$pre$i$i$i;
          break;
         }
        } else {
         $758 = $745;
        }
       }
      } while(0);
      $757 = ($758|0)==(0|0);
      $759 = HEAP32[$__e>>2]|0;
      $760 = ($759|0)==(0|0);
      do {
       if ($760) {
        label = 285;
       } else {
        $761 = (($759) + 12|0);
        $762 = HEAP32[$761>>2]|0;
        $763 = (($759) + 16|0);
        $764 = HEAP32[$763>>2]|0;
        $765 = ($762|0)==($764|0);
        if (!($765)) {
         if ($757) {
          break;
         } else {
          break L369;
         }
        }
        $766 = HEAP32[$759>>2]|0;
        $767 = (($766) + 36|0);
        $768 = HEAP32[$767>>2]|0;
        $769 = (FUNCTION_TABLE_ii[$768 & 127]($759)|0);
        $770 = ($769|0)==(-1);
        if ($770) {
         HEAP32[$__e>>2] = 0;
         label = 285;
         break;
        } else {
         if ($757) {
          break;
         } else {
          break L369;
         }
        }
       }
      } while(0);
      if ((label|0) == 285) {
       label = 0;
       if ($757) {
        break;
       }
      }
      $771 = HEAP32[$__b>>2]|0;
      $772 = (($771) + 12|0);
      $773 = HEAP32[$772>>2]|0;
      $774 = (($771) + 16|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = ($773|0)==($775|0);
      if ($776) {
       $777 = HEAP32[$771>>2]|0;
       $778 = (($777) + 36|0);
       $779 = HEAP32[$778>>2]|0;
       $780 = (FUNCTION_TABLE_ii[$779 & 127]($771)|0);
       $$0$i$i = $780;
      } else {
       $781 = HEAP8[$773]|0;
       $782 = $781&255;
       $$0$i$i = $782;
      }
      $783 = $$0$i$i&255;
      $784 = HEAP8[$__trailing_sign$0$lcssa]|0;
      $785 = $784 & 1;
      $786 = ($785<<24>>24)==(0);
      if ($786) {
       $789 = $734;
      } else {
       $787 = HEAP32[$735>>2]|0;
       $789 = $787;
      }
      $788 = (($789) + ($__i$0)|0);
      $790 = HEAP8[$788]|0;
      $791 = ($783<<24>>24)==($790<<24>>24);
      if (!($791)) {
       break;
      }
      $794 = (($__i$0) + 1)|0;
      $795 = HEAP32[$__b>>2]|0;
      $796 = (($795) + 12|0);
      $797 = HEAP32[$796>>2]|0;
      $798 = (($795) + 16|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($797|0)==($799|0);
      if ($800) {
       $801 = HEAP32[$795>>2]|0;
       $802 = (($801) + 40|0);
       $803 = HEAP32[$802>>2]|0;
       (FUNCTION_TABLE_ii[$803 & 127]($795)|0);
       $__i$0 = $794;
       continue;
      } else {
       $804 = (($797) + 1|0);
       HEAP32[$796>>2] = $804;
       $__i$0 = $794;
       continue;
      }
     }
     $792 = HEAP32[$__err>>2]|0;
     $793 = $792 | 4;
     HEAP32[$__err>>2] = $793;
     $$0 = 0;$811 = $$lcssa293;$free208 = $free202$lcssa;
     break L357;
    }
   } while(0);
   $805 = ($$lcssa293|0)==($$lcssa309|0);
   if ($805) {
    $$0 = 1;$811 = $$lcssa309;$free208 = $free202$lcssa;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
    $806 = HEAP32[$__et>>2]|0;
    $807 = ($806|0)==(0);
    if ($807) {
     $$0 = 1;$811 = $$lcssa293;$free208 = $free202$lcssa;
    } else {
     $808 = HEAP32[$__err>>2]|0;
     $809 = $808 | 4;
     HEAP32[$__err>>2] = $809;
     $$0 = 0;$811 = $$lcssa293;$free208 = $free202$lcssa;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $810 = ($811|0)==(0|0);
 if ($810) {
  STACKTOP = sp;return ($$0|0);
 }
 FUNCTION_TABLE_vi[$free208 & 255]($811);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt13runtime_errorC2EPKc($0,$msg);
 ___cxa_throw(($0|0),(3888|0),(22|0));
 // unreachable;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 $__wbuf = sp + 36|0;
 $__wb = sp + 16|0;
 $__wn = sp + 32|0;
 $__loc = sp + 28|0;
 $__neg = sp + 136|0;
 $0 = sp + 24|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 125;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = HEAP32[6880>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $6 = (($$byval_copy) + 4|0);
  HEAP32[$6>>2] = (123);
  $7 = (($$byval_copy) + 8|0);
  HEAP32[$7>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $8 = HEAP32[((6880 + 4|0))>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (($3) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)>($9>>>0);
 if (!($18)) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 $19 = (($13) + ($9<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 HEAP8[$__neg] = 0;
 $23 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = (($__iob) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $26 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$25,$__err,$__neg,$20,$__wb,$__wn,$2)|0);
 if ($26) {
  $27 = HEAP8[$__v]|0;
  $28 = $27 & 1;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $33 = (($__v) + 1|0);
   HEAP8[$33] = 0;
   HEAP8[$__v] = 0;
  } else {
   $30 = (($__v) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP8[$31] = 0;
   $32 = (($__v) + 4|0);
   HEAP32[$32>>2] = 0;
  }
  $34 = HEAP8[$__neg]|0;
  $35 = ($34<<24>>24)==(0);
  if (!($35)) {
   $36 = HEAP32[$20>>2]|0;
   $37 = (($36) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iii[$38 & 15]($20,45)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$39);
  }
  $40 = HEAP32[$20>>2]|0;
  $41 = (($40) + 28|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_iii[$42 & 15]($20,48)|0);
  $44 = HEAP32[$__wb>>2]|0;
  $45 = HEAP32[$__wn>>2]|0;
  $46 = (($45) + -1|0);
  $47 = ($44>>>0)<($46>>>0);
  L19: do {
   if ($47) {
    $__w$09 = $44;
    while(1) {
     $50 = HEAP8[$__w$09]|0;
     $51 = ($50<<24>>24)==($43<<24>>24);
     $49 = (($__w$09) + 1|0);
     if (!($51)) {
      $__w$0$lcssa = $__w$09;
      break L19;
     }
     $48 = ($49>>>0)<($46>>>0);
     if ($48) {
      $__w$09 = $49;
     } else {
      $__w$0$lcssa = $49;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $44;
   }
  } while(0);
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$45)|0);
 }
 $52 = HEAP32[$__b>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  $65 = 0;
 } else {
  $54 = (($52) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($52) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($55|0)==($57|0);
  if ($58) {
   $59 = HEAP32[$52>>2]|0;
   $60 = (($59) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (FUNCTION_TABLE_ii[$61 & 127]($52)|0);
   $63 = ($62|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $65 = 0;
   } else {
    $65 = $52;
   }
  } else {
   $65 = $52;
  }
 }
 $64 = ($65|0)==(0|0);
 $66 = ($23|0)==(0|0);
 do {
  if ($66) {
   label = 25;
  } else {
   $67 = (($23) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($23) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)==($70|0);
   if (!($71)) {
    if ($64) {
     break;
    } else {
     label = 27;
     break;
    }
   }
   $72 = HEAP32[$23>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($23)|0);
   $76 = ($75|0)==(-1);
   if ($76) {
    HEAP32[$__e>>2] = 0;
    label = 25;
    break;
   } else {
    $77 = ($23|0)==(0|0);
    $tmp$i$i = $64 ^ $77;
    if ($tmp$i$i) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($64) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $78 = HEAP32[$__err>>2]|0;
  $79 = $78 | 2;
  HEAP32[$__err>>2] = $79;
 }
 HEAP32[$agg$result>>2] = $65;
 $80 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 $81 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $83 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$83 & 255]($81);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01]|0;
  HEAP8[$__p$02] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__p$i$i$i$i8 = sp;
 $0 = sp + 24|0;
 $1 = sp + 44|0;
 $2 = sp + 32|0;
 $3 = sp + 56|0;
 $4 = sp + 12|0;
 $5 = sp + 28|0;
 $6 = sp + 68|0;
 $7 = sp + 80|0;
 $8 = sp + 92|0;
 $9 = sp + 104|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[6320>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6320;
   $13 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$13>>2] = (123);
   $14 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6320,$__p$i$i$i$i8,124);
  }
  $15 = HEAP32[((6320 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 1|0);
   HEAP8[$43] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP8[$41] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $44 = HEAP32[$27>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vii[$46 & 63]($2,$27);
  $47 = HEAP8[$__psn]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   $53 = (($__psn) + 1|0);
   HEAP8[$53] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $50 = (($__psn) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP8[$51] = 0;
   $52 = (($__psn) + 4|0);
   HEAP32[$52>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $54 = HEAP32[$27>>2]|0;
  $55 = (($54) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 127]($27)|0);
  HEAP8[$__dp] = $57;
  $58 = HEAP32[$27>>2]|0;
  $59 = (($58) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (FUNCTION_TABLE_ii[$60 & 127]($27)|0);
  HEAP8[$__ts] = $61;
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 20|0);
  $64 = HEAP32[$63>>2]|0;
  FUNCTION_TABLE_vii[$64 & 63]($3,$27);
  $65 = HEAP8[$__grp]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $71 = (($__grp) + 1|0);
   HEAP8[$71] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $68 = (($__grp) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP8[$69] = 0;
   $70 = (($__grp) + 4|0);
   HEAP32[$70>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $72 = HEAP32[$27>>2]|0;
  $73 = (($72) + 24|0);
  $74 = HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$74 & 63]($4,$27);
  $75 = HEAP8[$__sym]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $81 = (($__sym) + 1|0);
   HEAP8[$81] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $78 = (($__sym) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   HEAP8[$79] = 0;
   $80 = (($__sym) + 4|0);
   HEAP32[$80>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $82 = HEAP32[$27>>2]|0;
  $83 = (($82) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (FUNCTION_TABLE_ii[$84 & 127]($27)|0);
  $storemerge = $85;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $86 = HEAP32[$__loc>>2]|0;
  $87 = HEAP32[6256>>2]|0;
  $88 = ($87|0)==(-1);
  if (!($88)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6256;
   $89 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$89>>2] = (123);
   $90 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$90>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6256,$__p$i$i$i$i8,124);
  }
  $91 = HEAP32[((6256 + 4|0))>>2]|0;
  $92 = (($91) + -1)|0;
  $93 = (($86) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($86) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $94;
  $98 = $96;
  $99 = (($97) - ($98))|0;
  $100 = $99 >> 2;
  $101 = ($100>>>0)>($92>>>0);
  if (!($101)) {
   $105 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw(($105|0),(14840|0),(112|0));
   // unreachable;
  }
  $102 = (($96) + ($92<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0|0);
  if ($104) {
   $105 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw(($105|0),(14840|0),(112|0));
   // unreachable;
  }
  $106 = HEAP32[$103>>2]|0;
  $107 = (($106) + 44|0);
  $108 = HEAP32[$107>>2]|0;
  FUNCTION_TABLE_vii[$108 & 63]($5,$103);
  $109 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$109&255;HEAP8[$__pat+1|0]=($109>>8)&255;HEAP8[$__pat+2|0]=($109>>16)&255;HEAP8[$__pat+3|0]=$109>>24;
  $110 = HEAP32[$103>>2]|0;
  $111 = (($110) + 32|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 63]($6,$103);
  $113 = HEAP8[$__nsn]|0;
  $114 = $113 & 1;
  $115 = ($114<<24>>24)==(0);
  if ($115) {
   $119 = (($__nsn) + 1|0);
   HEAP8[$119] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $116 = (($__nsn) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP8[$117] = 0;
   $118 = (($__nsn) + 4|0);
   HEAP32[$118>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $120 = HEAP32[$103>>2]|0;
  $121 = (($120) + 28|0);
  $122 = HEAP32[$121>>2]|0;
  FUNCTION_TABLE_vii[$122 & 63]($7,$103);
  $123 = HEAP8[$__psn]|0;
  $124 = $123 & 1;
  $125 = ($124<<24>>24)==(0);
  if ($125) {
   $129 = (($__psn) + 1|0);
   HEAP8[$129] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $126 = (($__psn) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP8[$127] = 0;
   $128 = (($__psn) + 4|0);
   HEAP32[$128>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $130 = HEAP32[$103>>2]|0;
  $131 = (($130) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (FUNCTION_TABLE_ii[$132 & 127]($103)|0);
  HEAP8[$__dp] = $133;
  $134 = HEAP32[$103>>2]|0;
  $135 = (($134) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_ii[$136 & 127]($103)|0);
  HEAP8[$__ts] = $137;
  $138 = HEAP32[$103>>2]|0;
  $139 = (($138) + 20|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 63]($8,$103);
  $141 = HEAP8[$__grp]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__grp) + 1|0);
   HEAP8[$147] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $144 = (($__grp) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145] = 0;
   $146 = (($__grp) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $148 = HEAP32[$103>>2]|0;
  $149 = (($148) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  FUNCTION_TABLE_vii[$150 & 63]($9,$103);
  $151 = HEAP8[$__sym]|0;
  $152 = $151 & 1;
  $153 = ($152<<24>>24)==(0);
  if ($153) {
   $157 = (($__sym) + 1|0);
   HEAP8[$157] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $154 = (($__sym) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   HEAP8[$155] = 0;
   $156 = (($__sym) + 4|0);
   HEAP32[$156>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $158 = HEAP32[$103>>2]|0;
  $159 = (($158) + 36|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($103)|0);
  $storemerge = $161;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = ($48>>>0)<($49>>>0);
 $51 = ($49|0)==(0);
 $or$cond = $50 | $51;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $$byval_copy = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 476|0;
 $__neg = sp + 580|0;
 $0 = sp + 472|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 480|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 125;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = HEAP32[6872>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $6 = (($$byval_copy) + 4|0);
  HEAP32[$6>>2] = (123);
  $7 = (($$byval_copy) + 8|0);
  HEAP32[$7>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $8 = HEAP32[((6872 + 4|0))>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (($3) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)>($9>>>0);
 if (!($18)) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 $19 = (($13) + ($9<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 HEAP8[$__neg] = 0;
 $23 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = (($__iob) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $26 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$25,$__err,$__neg,$20,$__wb,$__wn,$2)|0);
 if ($26) {
  $27 = HEAP32[$20>>2]|0;
  $28 = (($27) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  (FUNCTION_TABLE_iiiii[$29 & 7]($20,6576,((6576 + 10|0)),$__atoms)|0);
  $30 = HEAP32[$__wn>>2]|0;
  $31 = HEAP32[$__wb>>2]|0;
  $32 = $30;
  $33 = $31;
  $34 = (($32) - ($33))|0;
  $35 = ($34|0)>(392);
  if ($35) {
   $36 = $34 >> 2;
   $37 = (($36) + 2)|0;
   $38 = (_malloc($37)|0);
   $39 = ($38|0)==(0|0);
   if ($39) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $64 = $38;$__nc$0 = $38;
   }
  } else {
   $64 = 0;$__nc$0 = $__nbuf;
  }
  $40 = HEAP8[$__neg]|0;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $__nc$1 = $__nc$0;
  } else {
   $42 = (($__nc$0) + 1|0);
   HEAP8[$__nc$0] = 45;
   $__nc$1 = $42;
  }
  $43 = ($31>>>0)<($30>>>0);
  if ($43) {
   $44 = (($__atoms) + 40|0);
   $45 = $__atoms;
   $__nc$210 = $__nc$1;$__w$011 = $31;
   while(1) {
    $46 = HEAP32[$__w$011>>2]|0;
    $$01$i = $__atoms;
    while(1) {
     $49 = HEAP32[$$01$i>>2]|0;
     $50 = ($49|0)==($46|0);
     $48 = (($$01$i) + 4|0);
     if ($50) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $47 = ($48|0)==($44|0);
     if ($47) {
      $$0$lcssa$i = $44;
      break;
     } else {
      $$01$i = $48;
     }
    }
    $51 = $$0$lcssa$i;
    $52 = (($51) - ($45))|0;
    $53 = $52 >> 2;
    $54 = (6576 + ($53)|0);
    $55 = HEAP8[$54]|0;
    HEAP8[$__nc$210] = $55;
    $56 = (($__w$011) + 4|0);
    $57 = (($__nc$210) + 1|0);
    $58 = HEAP32[$__wn>>2]|0;
    $59 = ($56>>>0)<($58>>>0);
    if ($59) {
     $__nc$210 = $57;$__w$011 = $56;
    } else {
     $__nc$2$lcssa = $57;
     break;
    }
   }
  } else {
   $__nc$2$lcssa = $__nc$1;
  }
  HEAP8[$__nc$2$lcssa] = 0;
  HEAP32[$$byval_copy>>2] = $__v;
  $60 = (_sscanf(($__nbuf|0),(6512|0),($$byval_copy|0))|0);
  $61 = ($60|0)==(1);
  if (!($61)) {
   $62 = (___cxa_allocate_exception(8)|0);
   __ZNSt13runtime_errorC2EPKc($62,6520);
   ___cxa_throw(($62|0),(3888|0),(22|0));
   // unreachable;
  }
  $63 = ($64|0)==(0|0);
  if (!($63)) {
   _free($64);
  }
 }
 $65 = HEAP32[$__b>>2]|0;
 $66 = ($65|0)==(0|0);
 do {
  if ($66) {
   $98 = 1;
  } else {
   $67 = (($65) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($65) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)==($70|0);
   if ($71) {
    $72 = HEAP32[$65>>2]|0;
    $73 = (($72) + 36|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (FUNCTION_TABLE_ii[$74 & 127]($65)|0);
    $$0$i$i$i$i = $75;
   } else {
    $76 = HEAP32[$68>>2]|0;
    $$0$i$i$i$i = $76;
   }
   $77 = ($$0$i$i$i$i|0)==(-1);
   if ($77) {
    HEAP32[$__b>>2] = 0;
    $98 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $98 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $78 = HEAP32[$__e>>2]|0;
 $79 = ($78|0)==(0|0);
 do {
  if ($79) {
   label = 35;
  } else {
   $80 = (($78) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($78) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)==($83|0);
   if ($84) {
    $85 = HEAP32[$78>>2]|0;
    $86 = (($85) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (FUNCTION_TABLE_ii[$87 & 127]($78)|0);
    $$0$i$i1$i$i = $88;
   } else {
    $89 = HEAP32[$81>>2]|0;
    $$0$i$i1$i$i = $89;
   }
   $90 = ($$0$i$i1$i$i|0)==(-1);
   if ($90) {
    HEAP32[$__e>>2] = 0;
    label = 35;
    break;
   } else {
    if ($98) {
     break;
    } else {
     label = 37;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 35) {
  if ($98) {
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $91 = HEAP32[$__err>>2]|0;
  $92 = $91 | 2;
  HEAP32[$__err>>2] = $92;
 }
 $93 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $93;
 $94 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($94)|0);
 $95 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $96 = ($95|0)==(0|0);
 if ($96) {
  STACKTOP = sp;return;
 }
 $97 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$97 & 255]($95);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$482 = 0;
 var $$483 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0, $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0;
 var $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0;
 var $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0377 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0;
 var $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0, $free234 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i98 = 0, $switch = 0, $tmp$i$i100 = 0;
 var $tmp$i$i203 = 0, $tmp$i$i50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $__gbuf = sp + 72|0;
 $__pat = sp + 24|0;
 $__dp = sp;
 $__ts = sp + 52|0;
 $__grp = sp + 56|0;
 $__sym = sp + 472|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 40|0;
 $__spaces = sp + 28|0;
 $__fd = sp + 8|0;
 $__et = sp + 4|0;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $0 = (($__gbuf) + 400|0);
 $1 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $1;
 $2 = (($__nsn) + 4|0);
 $3 = (($__nsn) + 8|0);
 $4 = (($__psn) + 4|0);
 $5 = (($__psn) + 8|0);
 $6 = $__flags & 512;
 $7 = ($6|0)!=(0);
 $8 = (($__sym) + 4|0);
 $9 = (($__sym) + 8|0);
 $10 = (($__spaces) + 4|0);
 $11 = (($__spaces) + 8|0);
 $12 = (($__pat) + 3|0);
 $13 = (($__wb) + 4|0);
 $14 = (($__grp) + 4|0);
 $788 = $0;$789 = $__gbuf;$790 = $__gbuf;$791 = $__we;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 125;
 L1: while(1) {
  $15 = HEAP32[$__b>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    $792 = 1;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if ($21) {
     $22 = HEAP32[$15>>2]|0;
     $23 = (($22) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_ii[$24 & 127]($15)|0);
     $$0$i$i$i$i18 = $25;
    } else {
     $26 = HEAP32[$18>>2]|0;
     $$0$i$i$i$i18 = $26;
    }
    $27 = ($$0$i$i$i$i18|0)==(-1);
    if ($27) {
     HEAP32[$__b>>2] = 0;
     $792 = 1;
     break;
    } else {
     $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
     $792 = $phitmp$i$i$i21;
     break;
    }
   }
  } while(0);
  $28 = HEAP32[$__e>>2]|0;
  $29 = ($28|0)==(0|0);
  do {
   if ($29) {
    label = 15;
   } else {
    $30 = (($28) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($28) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31|0)==($33|0);
    if ($34) {
     $35 = HEAP32[$28>>2]|0;
     $36 = (($35) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (FUNCTION_TABLE_ii[$37 & 127]($28)|0);
     $$0$i$i1$i$i24 = $38;
    } else {
     $39 = HEAP32[$31>>2]|0;
     $$0$i$i1$i$i24 = $39;
    }
    $40 = ($$0$i$i1$i$i24|0)==(-1);
    if ($40) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($792) {
      $793 = $28;
      break;
     } else {
      $$lcssa313 = $790;$$lcssa330 = $789;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 292;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($792) {
    $$lcssa313 = $790;$$lcssa330 = $789;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
    label = 292;
    break;
   } else {
    $793 = 0;
   }
  }
  $41 = (($__pat) + ($__p$0377)|0);
  $42 = HEAP8[$41]|0;
  $43 = $42 << 24 >> 24;
  L25: do {
   switch ($43|0) {
   case 1:  {
    $cond = ($__p$0377|0)==(3);
    if ($cond) {
     $$lcssa313 = $790;$$lcssa330 = $789;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
     label = 292;
     break L1;
    }
    $44 = HEAP32[$__b>>2]|0;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($44) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = HEAP32[$44>>2]|0;
     $51 = (($50) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_ii[$52 & 127]($44)|0);
     $$0$i$i33 = $53;
    } else {
     $54 = HEAP32[$46>>2]|0;
     $$0$i$i33 = $54;
    }
    $55 = HEAP32[$__ct>>2]|0;
    $56 = (($55) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (FUNCTION_TABLE_iiii[$57 & 31]($__ct,8192,$$0$i$i33)|0);
    if (!($58)) {
     label = 27;
     break L1;
    }
    $59 = HEAP32[$__b>>2]|0;
    $60 = (($59) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($61|0)==($63|0);
    if ($64) {
     $65 = HEAP32[$59>>2]|0;
     $66 = (($65) + 40|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_ii[$67 & 127]($59)|0);
     $$0$i$i37 = $68;
    } else {
     $69 = (($61) + 4|0);
     HEAP32[$60>>2] = $69;
     $70 = HEAP32[$61>>2]|0;
     $$0$i$i37 = $70;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i37);
    label = 28;
    break;
   }
   case 0:  {
    label = 28;
    break;
   }
   case 3:  {
    $128 = HEAP8[$__psn]|0;
    $129 = $128 & 1;
    $130 = ($129<<24>>24)==(0);
    if ($130) {
     $132 = $128&255;
     $133 = $132 >>> 1;
     $143 = $133;
    } else {
     $131 = HEAP32[$4>>2]|0;
     $143 = $131;
    }
    $134 = HEAP8[$__nsn]|0;
    $135 = $134 & 1;
    $136 = ($135<<24>>24)==(0);
    if ($136) {
     $138 = $134&255;
     $139 = $138 >>> 1;
     $141 = $139;
    } else {
     $137 = HEAP32[$2>>2]|0;
     $141 = $137;
    }
    $140 = (0 - ($141))|0;
    $142 = ($143|0)==($140|0);
    if ($142) {
     $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
    } else {
     if ($130) {
      $145 = $128&255;
      $146 = $145 >>> 1;
      $148 = $146;
     } else {
      $144 = HEAP32[$4>>2]|0;
      $148 = $144;
     }
     $147 = ($148|0)==(0);
     if (!($147)) {
      if ($136) {
       $150 = $134&255;
       $151 = $150 >>> 1;
       $153 = $151;
      } else {
       $149 = HEAP32[$2>>2]|0;
       $153 = $149;
      }
      $152 = ($153|0)==(0);
      if (!($152)) {
       $223 = HEAP32[$__b>>2]|0;
       $224 = (($223) + 12|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = (($223) + 16|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ($225|0)==($227|0);
       if ($228) {
        $229 = HEAP32[$223>>2]|0;
        $230 = (($229) + 36|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = (FUNCTION_TABLE_ii[$231 & 127]($223)|0);
        $$pre467 = HEAP8[$__psn]|0;
        $$0$i$i104 = $232;$235 = $$pre467;
       } else {
        $233 = HEAP32[$225>>2]|0;
        $$0$i$i104 = $233;$235 = $128;
       }
       $234 = $235 & 1;
       $236 = ($234<<24>>24)==(0);
       $237 = HEAP32[$5>>2]|0;
       $$478 = $236 ? $4 : $237;
       $238 = HEAP32[$$478>>2]|0;
       $239 = ($$0$i$i104|0)==($238|0);
       $240 = HEAP32[$__b>>2]|0;
       $241 = (($240) + 12|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($240) + 16|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = ($242|0)==($244|0);
       if ($239) {
        if ($245) {
         $246 = HEAP32[$240>>2]|0;
         $247 = (($246) + 40|0);
         $248 = HEAP32[$247>>2]|0;
         (FUNCTION_TABLE_ii[$248 & 127]($240)|0);
        } else {
         $249 = (($242) + 4|0);
         HEAP32[$241>>2] = $249;
        }
        $250 = HEAP8[$__psn]|0;
        $251 = $250 & 1;
        $252 = ($251<<24>>24)==(0);
        if ($252) {
         $254 = $250&255;
         $255 = $254 >>> 1;
         $257 = $255;
        } else {
         $253 = HEAP32[$4>>2]|0;
         $257 = $253;
        }
        $256 = ($257>>>0)>(1);
        $__psn$__trailing_sign$05 = $256 ? $__psn : $__trailing_sign$0379;
        $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
        break L25;
       }
       if ($245) {
        $258 = HEAP32[$240>>2]|0;
        $259 = (($258) + 36|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = (FUNCTION_TABLE_ii[$260 & 127]($240)|0);
        $$0$i$i113 = $261;
       } else {
        $262 = HEAP32[$242>>2]|0;
        $$0$i$i113 = $262;
       }
       $263 = HEAP8[$__nsn]|0;
       $264 = $263 & 1;
       $265 = ($264<<24>>24)==(0);
       $266 = HEAP32[$3>>2]|0;
       $$479 = $265 ? $2 : $266;
       $267 = HEAP32[$$479>>2]|0;
       $268 = ($$0$i$i113|0)==($267|0);
       if (!($268)) {
        label = 116;
        break L1;
       }
       $269 = HEAP32[$__b>>2]|0;
       $270 = (($269) + 12|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = (($269) + 16|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = ($271|0)==($273|0);
       if ($274) {
        $275 = HEAP32[$269>>2]|0;
        $276 = (($275) + 40|0);
        $277 = HEAP32[$276>>2]|0;
        (FUNCTION_TABLE_ii[$277 & 127]($269)|0);
       } else {
        $278 = (($271) + 4|0);
        HEAP32[$270>>2] = $278;
       }
       HEAP8[$__neg] = 1;
       $279 = HEAP8[$__nsn]|0;
       $280 = $279 & 1;
       $281 = ($280<<24>>24)==(0);
       if ($281) {
        $283 = $279&255;
        $284 = $283 >>> 1;
        $286 = $284;
       } else {
        $282 = HEAP32[$2>>2]|0;
        $286 = $282;
       }
       $285 = ($286>>>0)>(1);
       $__nsn$__trailing_sign$06 = $285 ? $__nsn : $__trailing_sign$0379;
       $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
       break L25;
      }
     }
     if ($130) {
      $155 = $128&255;
      $156 = $155 >>> 1;
      $158 = $156;
     } else {
      $154 = HEAP32[$4>>2]|0;
      $158 = $154;
     }
     $157 = ($158|0)==(0);
     $159 = HEAP32[$__b>>2]|0;
     $160 = (($159) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($159) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if ($157) {
      if ($164) {
       $194 = HEAP32[$159>>2]|0;
       $195 = (($194) + 36|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (FUNCTION_TABLE_ii[$196 & 127]($159)|0);
       $$pre465 = HEAP8[$__nsn]|0;
       $$0$i$i79 = $197;$200 = $$pre465;
      } else {
       $198 = HEAP32[$161>>2]|0;
       $$0$i$i79 = $198;$200 = $134;
      }
      $199 = $200 & 1;
      $201 = ($199<<24>>24)==(0);
      $202 = HEAP32[$3>>2]|0;
      $$477 = $201 ? $2 : $202;
      $203 = HEAP32[$$477>>2]|0;
      $204 = ($$0$i$i79|0)==($203|0);
      if (!($204)) {
       $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       break L25;
      }
      $205 = HEAP32[$__b>>2]|0;
      $206 = (($205) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($205) + 16|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($207|0)==($209|0);
      if ($210) {
       $211 = HEAP32[$205>>2]|0;
       $212 = (($211) + 40|0);
       $213 = HEAP32[$212>>2]|0;
       (FUNCTION_TABLE_ii[$213 & 127]($205)|0);
      } else {
       $214 = (($207) + 4|0);
       HEAP32[$206>>2] = $214;
      }
      HEAP8[$__neg] = 1;
      $215 = HEAP8[$__nsn]|0;
      $216 = $215 & 1;
      $217 = ($216<<24>>24)==(0);
      if ($217) {
       $219 = $215&255;
       $220 = $219 >>> 1;
       $222 = $220;
      } else {
       $218 = HEAP32[$2>>2]|0;
       $222 = $218;
      }
      $221 = ($222>>>0)>(1);
      $__nsn$__trailing_sign$0 = $221 ? $__nsn : $__trailing_sign$0379;
      $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
      break L25;
     }
     if ($164) {
      $165 = HEAP32[$159>>2]|0;
      $166 = (($165) + 36|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (FUNCTION_TABLE_ii[$167 & 127]($159)|0);
      $$pre466 = HEAP8[$__psn]|0;
      $$0$i$i71 = $168;$171 = $$pre466;
     } else {
      $169 = HEAP32[$161>>2]|0;
      $$0$i$i71 = $169;$171 = $128;
     }
     $170 = $171 & 1;
     $172 = ($170<<24>>24)==(0);
     $173 = HEAP32[$5>>2]|0;
     $$ = $172 ? $4 : $173;
     $174 = HEAP32[$$>>2]|0;
     $175 = ($$0$i$i71|0)==($174|0);
     if (!($175)) {
      HEAP8[$__neg] = 1;
      $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      break L25;
     }
     $176 = HEAP32[$__b>>2]|0;
     $177 = (($176) + 12|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 16|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($178|0)==($180|0);
     if ($181) {
      $182 = HEAP32[$176>>2]|0;
      $183 = (($182) + 40|0);
      $184 = HEAP32[$183>>2]|0;
      (FUNCTION_TABLE_ii[$184 & 127]($176)|0);
     } else {
      $185 = (($178) + 4|0);
      HEAP32[$177>>2] = $185;
     }
     $186 = HEAP8[$__psn]|0;
     $187 = $186 & 1;
     $188 = ($187<<24>>24)==(0);
     if ($188) {
      $190 = $186&255;
      $191 = $190 >>> 1;
      $193 = $191;
     } else {
      $189 = HEAP32[$4>>2]|0;
      $193 = $189;
     }
     $192 = ($193>>>0)>(1);
     $__psn$__trailing_sign$0 = $192 ? $__psn : $__trailing_sign$0379;
     $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
    }
    break;
   }
   case 4:  {
    $479 = $791;$514 = $789;$515 = $788;$519 = $790;$__ng$0 = 0;$free227 = $free228372;
    L122: while(1) {
     $436 = HEAP32[$__b>>2]|0;
     $437 = ($436|0)==(0|0);
     do {
      if ($437) {
       $800 = 1;
      } else {
       $438 = (($436) + 12|0);
       $439 = HEAP32[$438>>2]|0;
       $440 = (($436) + 16|0);
       $441 = HEAP32[$440>>2]|0;
       $442 = ($439|0)==($441|0);
       if ($442) {
        $443 = HEAP32[$436>>2]|0;
        $444 = (($443) + 36|0);
        $445 = HEAP32[$444>>2]|0;
        $446 = (FUNCTION_TABLE_ii[$445 & 127]($436)|0);
        $$0$i$i$i$i177 = $446;
       } else {
        $447 = HEAP32[$439>>2]|0;
        $$0$i$i$i$i177 = $447;
       }
       $448 = ($$0$i$i$i$i177|0)==(-1);
       if ($448) {
        HEAP32[$__b>>2] = 0;
        $800 = 1;
        break;
       } else {
        $$pre$i$i$i179 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
        $800 = $phitmp$i$i$i180;
        break;
       }
      }
     } while(0);
     $449 = HEAP32[$__e>>2]|0;
     $450 = ($449|0)==(0|0);
     do {
      if ($450) {
       label = 188;
      } else {
       $451 = (($449) + 12|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = (($449) + 16|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = ($452|0)==($454|0);
       if ($455) {
        $456 = HEAP32[$449>>2]|0;
        $457 = (($456) + 36|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = (FUNCTION_TABLE_ii[$458 & 127]($449)|0);
        $$0$i$i1$i$i183 = $459;
       } else {
        $460 = HEAP32[$452>>2]|0;
        $$0$i$i1$i$i183 = $460;
       }
       $461 = ($$0$i$i1$i$i183|0)==(-1);
       if ($461) {
        HEAP32[$__e>>2] = 0;
        label = 188;
        break;
       } else {
        if ($800) {
         break;
        } else {
         break L122;
        }
       }
      }
     } while(0);
     if ((label|0) == 188) {
      label = 0;
      if ($800) {
       break;
      }
     }
     $462 = HEAP32[$__b>>2]|0;
     $463 = (($462) + 12|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = (($462) + 16|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = ($464|0)==($466|0);
     if ($467) {
      $468 = HEAP32[$462>>2]|0;
      $469 = (($468) + 36|0);
      $470 = HEAP32[$469>>2]|0;
      $471 = (FUNCTION_TABLE_ii[$470 & 127]($462)|0);
      $$0$i$i173 = $471;
     } else {
      $472 = HEAP32[$464>>2]|0;
      $$0$i$i173 = $472;
     }
     $473 = HEAP32[$__ct>>2]|0;
     $474 = (($473) + 12|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = (FUNCTION_TABLE_iiii[$475 & 31]($__ct,2048,$$0$i$i173)|0);
     if ($476) {
      $477 = HEAP32[$__wn>>2]|0;
      $478 = ($477|0)==($479|0);
      if ($478) {
       $480 = HEAP32[$13>>2]|0;
       $481 = ($480|0)!=(125|0);
       $482 = HEAP32[$__wb>>2]|0;
       $483 = $479;
       $484 = $482;
       $485 = (($483) - ($484))|0;
       $486 = ($485>>>0)<(2147483647);
       $487 = $485 << 1;
       $$$i159 = $486 ? $487 : -1;
       $488 = $485 >> 2;
       if ($481) {
        $489 = $482;
       } else {
        $489 = 0;
       }
       $490 = (_realloc($489,$$$i159)|0);
       $491 = ($490|0)==(0|0);
       if ($491) {
        label = 198;
        break L1;
       }
       if ($481) {
        HEAP32[$__wb>>2] = $490;
        $496 = $490;
       } else {
        $$pr$i162 = HEAP32[$__wb>>2]|0;
        HEAP32[$__wb>>2] = $490;
        $492 = ($$pr$i162|0)==(0|0);
        if ($492) {
         $496 = $490;
        } else {
         $493 = HEAP32[$13>>2]|0;
         FUNCTION_TABLE_vi[$493 & 255]($$pr$i162);
         $$pre$i163 = HEAP32[$__wb>>2]|0;
         $496 = $$pre$i163;
        }
       }
       HEAP32[$13>>2] = 126;
       $494 = $$$i159 >>> 2;
       $495 = (($496) + ($488<<2)|0);
       HEAP32[$__wn>>2] = $495;
       $497 = HEAP32[$__wb>>2]|0;
       $498 = (($497) + ($494<<2)|0);
       $500 = $495;$801 = $498;
      } else {
       $500 = $477;$801 = $479;
      }
      $499 = (($500) + 4|0);
      HEAP32[$__wn>>2] = $499;
      HEAP32[$500>>2] = $$0$i$i173;
      $501 = (($__ng$0) + 1)|0;
      $802 = $801;$803 = $519;$804 = $514;$805 = $515;$__ng$1 = $501;$free = $free227;
     } else {
      $502 = HEAP8[$__grp]|0;
      $503 = $502 & 1;
      $504 = ($503<<24>>24)==(0);
      if ($504) {
       $506 = $502&255;
       $507 = $506 >>> 1;
       $509 = $507;
      } else {
       $505 = HEAP32[$14>>2]|0;
       $509 = $505;
      }
      $508 = ($509|0)==(0);
      $510 = ($__ng$0|0)==(0);
      $or$cond7 = $508 | $510;
      if ($or$cond7) {
       break;
      }
      $511 = HEAP32[$__ts>>2]|0;
      $512 = ($$0$i$i173|0)==($511|0);
      if (!($512)) {
       break;
      }
      $513 = ($514|0)==($515|0);
      if ($513) {
       $516 = ($free227|0)!=(125|0);
       $517 = $514;
       $518 = $519;
       $520 = (($517) - ($518))|0;
       $521 = ($520>>>0)<(2147483647);
       $522 = $520 << 1;
       $$$i149 = $521 ? $522 : -1;
       $523 = $520 >> 2;
       if ($516) {
        $524 = $519;
       } else {
        $524 = 0;
       }
       $525 = (_realloc($524,$$$i149)|0);
       $526 = ($525|0)==(0|0);
       if ($526) {
        label = 214;
        break L1;
       }
       $527 = $$$i149 >>> 2;
       $528 = (($525) + ($523<<2)|0);
       $529 = (($525) + ($527<<2)|0);
       $531 = $528;$806 = $525;$807 = $529;$free226 = 126;
      } else {
       $531 = $514;$806 = $519;$807 = $515;$free226 = $free227;
      }
      $530 = (($531) + 4|0);
      HEAP32[$531>>2] = $__ng$0;
      $802 = $479;$803 = $806;$804 = $530;$805 = $807;$__ng$1 = 0;$free = $free226;
     }
     $532 = HEAP32[$__b>>2]|0;
     $533 = (($532) + 12|0);
     $534 = HEAP32[$533>>2]|0;
     $535 = (($532) + 16|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = ($534|0)==($536|0);
     if ($537) {
      $538 = HEAP32[$532>>2]|0;
      $539 = (($538) + 40|0);
      $540 = HEAP32[$539>>2]|0;
      (FUNCTION_TABLE_ii[$540 & 127]($532)|0);
      $479 = $802;$514 = $804;$515 = $805;$519 = $803;$__ng$0 = $__ng$1;$free227 = $free;
      continue;
     } else {
      $541 = (($534) + 4|0);
      HEAP32[$533>>2] = $541;
      $479 = $802;$514 = $804;$515 = $805;$519 = $803;$__ng$0 = $__ng$1;$free227 = $free;
      continue;
     }
    }
    $542 = ($519|0)==($514|0);
    $543 = ($__ng$0|0)==(0);
    $or$cond8 = $542 | $543;
    if ($or$cond8) {
     $808 = $519;$809 = $514;$810 = $515;$free230 = $free227;
    } else {
     $544 = ($514|0)==($515|0);
     if ($544) {
      $545 = ($free227|0)!=(125|0);
      $546 = $514;
      $547 = $519;
      $548 = (($546) - ($547))|0;
      $549 = ($548>>>0)<(2147483647);
      $550 = $548 << 1;
      $$$i138 = $549 ? $550 : -1;
      $551 = $548 >> 2;
      if ($545) {
       $552 = $519;
      } else {
       $552 = 0;
      }
      $553 = (_realloc($552,$$$i138)|0);
      $554 = ($553|0)==(0|0);
      if ($554) {
       label = 225;
       break L1;
      }
      $555 = $$$i138 >>> 2;
      $556 = (($553) + ($551<<2)|0);
      $557 = (($553) + ($555<<2)|0);
      $559 = $556;$811 = $553;$812 = $557;$free231 = 126;
     } else {
      $559 = $514;$811 = $519;$812 = $515;$free231 = $free227;
     }
     $558 = (($559) + 4|0);
     HEAP32[$559>>2] = $__ng$0;
     $808 = $811;$809 = $558;$810 = $812;$free230 = $free231;
    }
    $560 = HEAP32[$__fd>>2]|0;
    $561 = ($560|0)>(0);
    if ($561) {
     $562 = HEAP32[$__b>>2]|0;
     $563 = ($562|0)==(0|0);
     do {
      if ($563) {
       $814 = 1;
      } else {
       $564 = (($562) + 12|0);
       $565 = HEAP32[$564>>2]|0;
       $566 = (($562) + 16|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = ($565|0)==($567|0);
       if ($568) {
        $569 = HEAP32[$562>>2]|0;
        $570 = (($569) + 36|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = (FUNCTION_TABLE_ii[$571 & 127]($562)|0);
        $$0$i$i$i$i123 = $572;
       } else {
        $573 = HEAP32[$565>>2]|0;
        $$0$i$i$i$i123 = $573;
       }
       $574 = ($$0$i$i$i$i123|0)==(-1);
       if ($574) {
        HEAP32[$__b>>2] = 0;
        $814 = 1;
        break;
       } else {
        $$pre$i$i$i125 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
        $814 = $phitmp$i$i$i126;
        break;
       }
      }
     } while(0);
     $575 = HEAP32[$__e>>2]|0;
     $576 = ($575|0)==(0|0);
     do {
      if ($576) {
       label = 242;
      } else {
       $577 = (($575) + 12|0);
       $578 = HEAP32[$577>>2]|0;
       $579 = (($575) + 16|0);
       $580 = HEAP32[$579>>2]|0;
       $581 = ($578|0)==($580|0);
       if ($581) {
        $582 = HEAP32[$575>>2]|0;
        $583 = (($582) + 36|0);
        $584 = HEAP32[$583>>2]|0;
        $585 = (FUNCTION_TABLE_ii[$584 & 127]($575)|0);
        $$0$i$i1$i$i129 = $585;
       } else {
        $586 = HEAP32[$578>>2]|0;
        $$0$i$i1$i$i129 = $586;
       }
       $587 = ($$0$i$i1$i$i129|0)==(-1);
       if ($587) {
        HEAP32[$__e>>2] = 0;
        label = 242;
        break;
       } else {
        if ($814) {
         $815 = $575;
         break;
        } else {
         label = 248;
         break L1;
        }
       }
      }
     } while(0);
     if ((label|0) == 242) {
      label = 0;
      if ($814) {
       label = 248;
       break L1;
      } else {
       $815 = 0;
      }
     }
     $588 = HEAP32[$__b>>2]|0;
     $589 = (($588) + 12|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = (($588) + 16|0);
     $592 = HEAP32[$591>>2]|0;
     $593 = ($590|0)==($592|0);
     if ($593) {
      $594 = HEAP32[$588>>2]|0;
      $595 = (($594) + 36|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = (FUNCTION_TABLE_ii[$596 & 127]($588)|0);
      $$0$i$i117 = $597;
     } else {
      $598 = HEAP32[$590>>2]|0;
      $$0$i$i117 = $598;
     }
     $599 = HEAP32[$__dp>>2]|0;
     $600 = ($$0$i$i117|0)==($599|0);
     if (!($600)) {
      label = 248;
      break L1;
     }
     $603 = HEAP32[$__b>>2]|0;
     $604 = (($603) + 12|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = (($603) + 16|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = ($605|0)==($607|0);
     if ($608) {
      $609 = HEAP32[$603>>2]|0;
      $610 = (($609) + 40|0);
      $611 = HEAP32[$610>>2]|0;
      (FUNCTION_TABLE_ii[$611 & 127]($603)|0);
      $$pre$i3$i$i97 = $815;$627 = $815;$659 = $479;$693 = $560;
     } else {
      $612 = (($605) + 4|0);
      HEAP32[$604>>2] = $612;
      $$pre$i3$i$i97 = $815;$627 = $815;$659 = $479;$693 = $560;
     }
     while(1) {
      $613 = HEAP32[$__b>>2]|0;
      $614 = ($613|0)==(0|0);
      do {
       if ($614) {
        $639 = 1;
       } else {
        $615 = (($613) + 12|0);
        $616 = HEAP32[$615>>2]|0;
        $617 = (($613) + 16|0);
        $618 = HEAP32[$617>>2]|0;
        $619 = ($616|0)==($618|0);
        if ($619) {
         $620 = HEAP32[$613>>2]|0;
         $621 = (($620) + 36|0);
         $622 = HEAP32[$621>>2]|0;
         $623 = (FUNCTION_TABLE_ii[$622 & 127]($613)|0);
         $$0$i$i$i$i89 = $623;
        } else {
         $624 = HEAP32[$616>>2]|0;
         $$0$i$i$i$i89 = $624;
        }
        $625 = ($$0$i$i$i$i89|0)==(-1);
        if ($625) {
         HEAP32[$__b>>2] = 0;
         $639 = 1;
         break;
        } else {
         $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
         $639 = $phitmp$i$i$i92;
         break;
        }
       }
      } while(0);
      $626 = ($627|0)==(0|0);
      do {
       if ($626) {
        $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
        label = 265;
       } else {
        $628 = (($627) + 12|0);
        $629 = HEAP32[$628>>2]|0;
        $630 = (($627) + 16|0);
        $631 = HEAP32[$630>>2]|0;
        $632 = ($629|0)==($631|0);
        if ($632) {
         $633 = HEAP32[$627>>2]|0;
         $634 = (($633) + 36|0);
         $635 = HEAP32[$634>>2]|0;
         $636 = (FUNCTION_TABLE_ii[$635 & 127]($627)|0);
         $$0$i$i1$i$i95 = $636;
        } else {
         $637 = HEAP32[$629>>2]|0;
         $$0$i$i1$i$i95 = $637;
        }
        $638 = ($$0$i$i1$i$i95|0)==(-1);
        if ($638) {
         HEAP32[$__e>>2] = 0;
         $$pre$i3$i$i97459$ph = 0;
         label = 265;
         break;
        } else {
         $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
         $tmp$i$i100 = $639 ^ $phitmp$i4$i$i98;
         if ($tmp$i$i100) {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$816 = $$pre$i3$i$i97;
          break;
         } else {
          label = 271;
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 265) {
       label = 0;
       if ($639) {
        label = 271;
        break L1;
       } else {
        $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$816 = 0;
       }
      }
      $640 = HEAP32[$__b>>2]|0;
      $641 = (($640) + 12|0);
      $642 = HEAP32[$641>>2]|0;
      $643 = (($640) + 16|0);
      $644 = HEAP32[$643>>2]|0;
      $645 = ($642|0)==($644|0);
      if ($645) {
       $646 = HEAP32[$640>>2]|0;
       $647 = (($646) + 36|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = (FUNCTION_TABLE_ii[$648 & 127]($640)|0);
       $$0$i$i83 = $649;
      } else {
       $650 = HEAP32[$642>>2]|0;
       $$0$i$i83 = $650;
      }
      $651 = HEAP32[$__ct>>2]|0;
      $652 = (($651) + 12|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = (FUNCTION_TABLE_iiii[$653 & 31]($__ct,2048,$$0$i$i83)|0);
      if (!($654)) {
       label = 271;
       break L1;
      }
      $657 = HEAP32[$__wn>>2]|0;
      $658 = ($657|0)==($659|0);
      if ($658) {
       $660 = HEAP32[$13>>2]|0;
       $661 = ($660|0)!=(125|0);
       $662 = HEAP32[$__wb>>2]|0;
       $663 = $659;
       $664 = $662;
       $665 = (($663) - ($664))|0;
       $666 = ($665>>>0)<(2147483647);
       $667 = $665 << 1;
       $$$i = $666 ? $667 : -1;
       $668 = $665 >> 2;
       if ($661) {
        $669 = $662;
       } else {
        $669 = 0;
       }
       $670 = (_realloc($669,$$$i)|0);
       $671 = ($670|0)==(0|0);
       if ($671) {
        label = 276;
        break L1;
       }
       if ($661) {
        HEAP32[$__wb>>2] = $670;
        $676 = $670;
       } else {
        $$pr$i = HEAP32[$__wb>>2]|0;
        HEAP32[$__wb>>2] = $670;
        $672 = ($$pr$i|0)==(0|0);
        if ($672) {
         $676 = $670;
        } else {
         $673 = HEAP32[$13>>2]|0;
         FUNCTION_TABLE_vi[$673 & 255]($$pr$i);
         $$pre$i = HEAP32[$__wb>>2]|0;
         $676 = $$pre$i;
        }
       }
       HEAP32[$13>>2] = 126;
       $674 = $$$i >>> 2;
       $675 = (($676) + ($668<<2)|0);
       HEAP32[$__wn>>2] = $675;
       $677 = HEAP32[$__wb>>2]|0;
       $678 = (($677) + ($674<<2)|0);
       $817 = $675;$818 = $678;
      } else {
       $817 = $657;$818 = $659;
      }
      $679 = HEAP32[$__b>>2]|0;
      $680 = (($679) + 12|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = (($679) + 16|0);
      $683 = HEAP32[$682>>2]|0;
      $684 = ($681|0)==($683|0);
      if ($684) {
       $685 = HEAP32[$679>>2]|0;
       $686 = (($685) + 36|0);
       $687 = HEAP32[$686>>2]|0;
       $688 = (FUNCTION_TABLE_ii[$687 & 127]($679)|0);
       $$pre470 = HEAP32[$__wn>>2]|0;
       $$0$i$i64 = $688;$691 = $$pre470;
      } else {
       $689 = HEAP32[$681>>2]|0;
       $$0$i$i64 = $689;$691 = $817;
      }
      $690 = (($691) + 4|0);
      HEAP32[$__wn>>2] = $690;
      HEAP32[$691>>2] = $$0$i$i64;
      $692 = (($693) + -1)|0;
      HEAP32[$__fd>>2] = $692;
      $694 = HEAP32[$__b>>2]|0;
      $695 = (($694) + 12|0);
      $696 = HEAP32[$695>>2]|0;
      $697 = (($694) + 16|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = ($696|0)==($698|0);
      if ($699) {
       $700 = HEAP32[$694>>2]|0;
       $701 = (($700) + 40|0);
       $702 = HEAP32[$701>>2]|0;
       (FUNCTION_TABLE_ii[$702 & 127]($694)|0);
      } else {
       $704 = (($696) + 4|0);
       HEAP32[$695>>2] = $704;
      }
      $703 = ($692|0)>(0);
      if ($703) {
       $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$627 = $816;$659 = $818;$693 = $692;
      } else {
       $813 = $818;
       break;
      }
     }
    } else {
     $813 = $479;
    }
    $705 = HEAP32[$__wn>>2]|0;
    $706 = HEAP32[$__wb>>2]|0;
    $707 = ($705|0)==($706|0);
    if ($707) {
     label = 290;
     break L1;
    } else {
     $794 = $813;$795 = $808;$796 = $809;$797 = $810;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
    }
    break;
   }
   case 2:  {
    $289 = ($__trailing_sign$0379|0)!=(0|0);
    $290 = ($__p$0377>>>0)<(2);
    $or$cond = $289 | $290;
    if (!($or$cond)) {
     $291 = ($__p$0377|0)==(2);
     if ($291) {
      $292 = HEAP8[$12]|0;
      $293 = ($292<<24>>24)!=(0);
      $294 = $293;
     } else {
      $294 = 0;
     }
     $brmerge = $7 | $294;
     if (!($brmerge)) {
      $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = 0;$free229 = $free228372;
      break L25;
     }
    }
    $295 = HEAP8[$__sym]|0;
    $296 = $295 & 1;
    $297 = ($296<<24>>24)==(0);
    $298 = HEAP32[$9>>2]|0;
    $$480 = $297 ? $8 : $298;
    $299 = ($__p$0377|0)==(0);
    L282: do {
     if ($299) {
      $$pre$i3$i$i200 = $793;$361 = $295;$371 = $$480;$386 = $793;
     } else {
      $300 = (($__p$0377) + -1)|0;
      $301 = (($__pat) + ($300)|0);
      $302 = HEAP8[$301]|0;
      $switch = ($302&255)<(2);
      if ($switch) {
       $304 = $295;$314 = $$480;
       while(1) {
        $303 = $304 & 1;
        $305 = ($303<<24>>24)==(0);
        if ($305) {
         $308 = $304&255;
         $309 = $308 >>> 1;
         $311 = $8;$312 = $309;
        } else {
         $306 = HEAP32[$9>>2]|0;
         $307 = HEAP32[$8>>2]|0;
         $311 = $306;$312 = $307;
        }
        $310 = (($311) + ($312<<2)|0);
        $313 = ($314|0)==($310|0);
        if ($313) {
         $322 = $304;
         break;
        }
        $315 = HEAP32[$314>>2]|0;
        $316 = HEAP32[$__ct>>2]|0;
        $317 = (($316) + 12|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = (FUNCTION_TABLE_iiii[$318 & 31]($__ct,8192,$315)|0);
        if (!($319)) {
         label = 129;
         break;
        }
        $320 = (($314) + 4|0);
        $$pre468 = HEAP8[$__sym]|0;
        $304 = $$pre468;$314 = $320;
       }
       if ((label|0) == 129) {
        label = 0;
        $$pre469 = HEAP8[$__sym]|0;
        $322 = $$pre469;
       }
       $321 = $322 & 1;
       $323 = ($321<<24>>24)==(0);
       $324 = HEAP32[$9>>2]|0;
       $$481 = $323 ? $8 : $324;
       $325 = $314;
       $326 = $$481;
       $327 = (($325) - ($326))|0;
       $328 = $327 >> 2;
       $329 = HEAP8[$__spaces]|0;
       $330 = $329 & 1;
       $331 = ($330<<24>>24)==(0);
       if ($331) {
        $333 = $329&255;
        $334 = $333 >>> 1;
        $336 = $334;
       } else {
        $332 = HEAP32[$10>>2]|0;
        $336 = $332;
       }
       $335 = ($328>>>0)>($336>>>0);
       L299: do {
        if (!($335)) {
         if ($331) {
          $340 = $329&255;
          $341 = $340 >>> 1;
          $$sum471 = (($341) - ($328))|0;
          $342 = (($10) + ($$sum471<<2)|0);
          $343 = $329&255;
          $344 = $343 >>> 1;
          $346 = $10;$347 = $344;$350 = $342;
         } else {
          $337 = HEAP32[$11>>2]|0;
          $338 = HEAP32[$10>>2]|0;
          $$sum = (($338) - ($328))|0;
          $339 = (($337) + ($$sum<<2)|0);
          $346 = $337;$347 = $338;$350 = $339;
         }
         $345 = (($346) + ($347<<2)|0);
         $348 = HEAP32[$9>>2]|0;
         $$482 = $323 ? $8 : $348;
         $349 = ($350|0)==($345|0);
         if ($349) {
          $$pre$i3$i$i200 = $793;$361 = $322;$371 = $314;$386 = $793;
          break L282;
         } else {
          $352 = $350;$354 = $$482;
         }
         while(1) {
          $351 = HEAP32[$352>>2]|0;
          $353 = HEAP32[$354>>2]|0;
          $355 = ($351|0)==($353|0);
          if (!($355)) {
           break L299;
          }
          $356 = (($352) + 4|0);
          $357 = ($356|0)==($345|0);
          if ($357) {
           $$pre$i3$i$i200 = $793;$361 = $322;$371 = $314;$386 = $793;
           break L282;
          }
          $358 = (($354) + 4|0);
          $352 = $356;$354 = $358;
         }
        }
       } while(0);
       $359 = HEAP32[$9>>2]|0;
       $$483 = $323 ? $8 : $359;
       $$pre$i3$i$i200 = $793;$361 = $322;$371 = $$483;$386 = $793;
      } else {
       $$pre$i3$i$i200 = $793;$361 = $295;$371 = $$480;$386 = $793;
      }
     }
    } while(0);
    L310: while(1) {
     $360 = $361 & 1;
     $362 = ($360<<24>>24)==(0);
     if ($362) {
      $365 = $361&255;
      $366 = $365 >>> 1;
      $368 = $8;$369 = $366;
     } else {
      $363 = HEAP32[$9>>2]|0;
      $364 = HEAP32[$8>>2]|0;
      $368 = $363;$369 = $364;
     }
     $367 = (($368) + ($369<<2)|0);
     $370 = ($371|0)==($367|0);
     if ($370) {
      break;
     }
     $372 = HEAP32[$__b>>2]|0;
     $373 = ($372|0)==(0|0);
     do {
      if ($373) {
       $398 = 1;
      } else {
       $374 = (($372) + 12|0);
       $375 = HEAP32[$374>>2]|0;
       $376 = (($372) + 16|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = ($375|0)==($377|0);
       if ($378) {
        $379 = HEAP32[$372>>2]|0;
        $380 = (($379) + 36|0);
        $381 = HEAP32[$380>>2]|0;
        $382 = (FUNCTION_TABLE_ii[$381 & 127]($372)|0);
        $$0$i$i$i$i192 = $382;
       } else {
        $383 = HEAP32[$375>>2]|0;
        $$0$i$i$i$i192 = $383;
       }
       $384 = ($$0$i$i$i$i192|0)==(-1);
       if ($384) {
        HEAP32[$__b>>2] = 0;
        $398 = 1;
        break;
       } else {
        $$pre$i$i$i194 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
        $398 = $phitmp$i$i$i195;
        break;
       }
      }
     } while(0);
     $385 = ($386|0)==(0|0);
     do {
      if ($385) {
       $$pre$i3$i$i200456 = $$pre$i3$i$i200;
       label = 159;
      } else {
       $387 = (($386) + 12|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = (($386) + 16|0);
       $390 = HEAP32[$389>>2]|0;
       $391 = ($388|0)==($390|0);
       if ($391) {
        $392 = HEAP32[$386>>2]|0;
        $393 = (($392) + 36|0);
        $394 = HEAP32[$393>>2]|0;
        $395 = (FUNCTION_TABLE_ii[$394 & 127]($386)|0);
        $$0$i$i1$i$i198 = $395;
       } else {
        $396 = HEAP32[$388>>2]|0;
        $$0$i$i1$i$i198 = $396;
       }
       $397 = ($$0$i$i1$i$i198|0)==(-1);
       if ($397) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i200456 = 0;
        label = 159;
        break;
       } else {
        $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
        $tmp$i$i203 = $398 ^ $phitmp$i4$i$i201;
        if ($tmp$i$i203) {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200;$799 = $$pre$i3$i$i200;
         break;
        } else {
         break L310;
        }
       }
      }
     } while(0);
     if ((label|0) == 159) {
      label = 0;
      if ($398) {
       break;
      } else {
       $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$799 = 0;
      }
     }
     $399 = HEAP32[$__b>>2]|0;
     $400 = (($399) + 12|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (($399) + 16|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ($401|0)==($403|0);
     if ($404) {
      $405 = HEAP32[$399>>2]|0;
      $406 = (($405) + 36|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = (FUNCTION_TABLE_ii[$407 & 127]($399)|0);
      $$0$i$i207 = $408;
     } else {
      $409 = HEAP32[$401>>2]|0;
      $$0$i$i207 = $409;
     }
     $410 = HEAP32[$371>>2]|0;
     $411 = ($$0$i$i207|0)==($410|0);
     if (!($411)) {
      break;
     }
     $412 = HEAP32[$__b>>2]|0;
     $413 = (($412) + 12|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = (($412) + 16|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = ($414|0)==($416|0);
     if ($417) {
      $418 = HEAP32[$412>>2]|0;
      $419 = (($418) + 40|0);
      $420 = HEAP32[$419>>2]|0;
      (FUNCTION_TABLE_ii[$420 & 127]($412)|0);
     } else {
      $421 = (($414) + 4|0);
      HEAP32[$413>>2] = $421;
     }
     $422 = (($371) + 4|0);
     $$pre = HEAP8[$__sym]|0;
     $$pre$i3$i$i200 = $$pre$i3$i$i200455;$361 = $$pre;$371 = $422;$386 = $799;
    }
    if ($7) {
     $423 = HEAP8[$__sym]|0;
     $424 = $423 & 1;
     $425 = ($424<<24>>24)==(0);
     if ($425) {
      $428 = $423&255;
      $429 = $428 >>> 1;
      $431 = $8;$432 = $429;
     } else {
      $426 = HEAP32[$9>>2]|0;
      $427 = HEAP32[$8>>2]|0;
      $431 = $426;$432 = $427;
     }
     $430 = (($431) + ($432<<2)|0);
     $433 = ($371|0)==($430|0);
     if ($433) {
      $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     } else {
      label = 174;
      break L1;
     }
    } else {
     $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
    }
    break;
   }
   default: {
    $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
   }
   }
  } while(0);
  L354: do {
   if ((label|0) == 28) {
    label = 0;
    $73 = ($__p$0377|0)==(3);
    if ($73) {
     $$lcssa313 = $790;$$lcssa330 = $789;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
     label = 292;
     break L1;
    } else {
     $$pre$i3$i$i47 = $793;$88 = $793;
    }
    while(1) {
     $74 = HEAP32[$__b>>2]|0;
     $75 = ($74|0)==(0|0);
     do {
      if ($75) {
       $100 = 1;
      } else {
       $76 = (($74) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($74) + 16|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($77|0)==($79|0);
       if ($80) {
        $81 = HEAP32[$74>>2]|0;
        $82 = (($81) + 36|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (FUNCTION_TABLE_ii[$83 & 127]($74)|0);
        $$0$i$i$i$i39 = $84;
       } else {
        $85 = HEAP32[$77>>2]|0;
        $$0$i$i$i$i39 = $85;
       }
       $86 = ($$0$i$i$i$i39|0)==(-1);
       if ($86) {
        HEAP32[$__b>>2] = 0;
        $100 = 1;
        break;
       } else {
        $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
        $100 = $phitmp$i$i$i42;
        break;
       }
      }
     } while(0);
     $87 = ($88|0)==(0|0);
     do {
      if ($87) {
       $$pre$i3$i$i47452 = $$pre$i3$i$i47;
       label = 42;
      } else {
       $89 = (($88) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($88) + 16|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($90|0)==($92|0);
       if ($93) {
        $94 = HEAP32[$88>>2]|0;
        $95 = (($94) + 36|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (FUNCTION_TABLE_ii[$96 & 127]($88)|0);
        $$0$i$i1$i$i45 = $97;
       } else {
        $98 = HEAP32[$90>>2]|0;
        $$0$i$i1$i$i45 = $98;
       }
       $99 = ($$0$i$i1$i$i45|0)==(-1);
       if ($99) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i47452 = 0;
        label = 42;
        break;
       } else {
        $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
        $tmp$i$i50 = $100 ^ $phitmp$i4$i$i48;
        if ($tmp$i$i50) {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47;$798 = $$pre$i3$i$i47;
         break;
        } else {
         $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L354;
        }
       }
      }
     } while(0);
     if ((label|0) == 42) {
      label = 0;
      if ($100) {
       $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       break L354;
      } else {
       $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$798 = 0;
      }
     }
     $101 = HEAP32[$__b>>2]|0;
     $102 = (($101) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($101) + 16|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($103|0)==($105|0);
     if ($106) {
      $107 = HEAP32[$101>>2]|0;
      $108 = (($107) + 36|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (FUNCTION_TABLE_ii[$109 & 127]($101)|0);
      $$0$i$i54 = $110;
     } else {
      $111 = HEAP32[$103>>2]|0;
      $$0$i$i54 = $111;
     }
     $112 = HEAP32[$__ct>>2]|0;
     $113 = (($112) + 12|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (FUNCTION_TABLE_iiii[$114 & 31]($__ct,8192,$$0$i$i54)|0);
     if (!($115)) {
      $794 = $791;$795 = $790;$796 = $789;$797 = $788;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      break L354;
     }
     $116 = HEAP32[$__b>>2]|0;
     $117 = (($116) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = (($116) + 16|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($118|0)==($120|0);
     if ($121) {
      $122 = HEAP32[$116>>2]|0;
      $123 = (($122) + 40|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = (FUNCTION_TABLE_ii[$124 & 127]($116)|0);
      $$0$i$i59 = $125;
     } else {
      $126 = (($118) + 4|0);
      HEAP32[$117>>2] = $126;
      $127 = HEAP32[$118>>2]|0;
      $$0$i$i59 = $127;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i59);
     $$pre$i3$i$i47 = $$pre$i3$i$i47454;$88 = $798;
    }
   }
  } while(0);
  $710 = (($__p$0377) + 1)|0;
  $711 = ($710>>>0)<(4);
  if ($711) {
   $788 = $797;$789 = $796;$790 = $795;$791 = $794;$__p$0377 = $710;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
  } else {
   $$lcssa313 = $795;$$lcssa330 = $796;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
   label = 292;
   break;
  }
 }
 L390: do {
  if ((label|0) == 27) {
   $71 = HEAP32[$__err>>2]|0;
   $72 = $71 | 4;
   HEAP32[$__err>>2] = $72;
   $$0 = 0;$787 = $790;$free234 = $free228372;
  }
  else if ((label|0) == 116) {
   $287 = HEAP32[$__err>>2]|0;
   $288 = $287 | 4;
   HEAP32[$__err>>2] = $288;
   $$0 = 0;$787 = $790;$free234 = $free228372;
  }
  else if ((label|0) == 174) {
   $434 = HEAP32[$__err>>2]|0;
   $435 = $434 | 4;
   HEAP32[$__err>>2] = $435;
   $$0 = 0;$787 = $790;$free234 = $free228372;
  }
  else if ((label|0) == 198) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 214) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 225) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 248) {
   $601 = HEAP32[$__err>>2]|0;
   $602 = $601 | 4;
   HEAP32[$__err>>2] = $602;
   $$0 = 0;$787 = $808;$free234 = $free230;
  }
  else if ((label|0) == 271) {
   $655 = HEAP32[$__err>>2]|0;
   $656 = $655 | 4;
   HEAP32[$__err>>2] = $656;
   $$0 = 0;$787 = $808;$free234 = $free230;
  }
  else if ((label|0) == 276) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  else if ((label|0) == 290) {
   $708 = HEAP32[$__err>>2]|0;
   $709 = $708 | 4;
   HEAP32[$__err>>2] = $709;
   $$0 = 0;$787 = $808;$free234 = $free230;
  }
  else if ((label|0) == 292) {
   $712 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L400: do {
    if (!($712)) {
     $713 = (($__trailing_sign$0$lcssa) + 4|0);
     $714 = (($__trailing_sign$0$lcssa) + 8|0);
     $__i$0 = 1;
     L402: while(1) {
      $715 = HEAP8[$__trailing_sign$0$lcssa]|0;
      $716 = $715 & 1;
      $717 = ($716<<24>>24)==(0);
      if ($717) {
       $719 = $715&255;
       $720 = $719 >>> 1;
       $722 = $720;
      } else {
       $718 = HEAP32[$713>>2]|0;
       $722 = $718;
      }
      $721 = ($__i$0>>>0)<($722>>>0);
      if (!($721)) {
       break L400;
      }
      $723 = HEAP32[$__b>>2]|0;
      $724 = ($723|0)==(0|0);
      do {
       if ($724) {
        $819 = 1;
       } else {
        $725 = (($723) + 12|0);
        $726 = HEAP32[$725>>2]|0;
        $727 = (($723) + 16|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = ($726|0)==($728|0);
        if ($729) {
         $730 = HEAP32[$723>>2]|0;
         $731 = (($730) + 36|0);
         $732 = HEAP32[$731>>2]|0;
         $733 = (FUNCTION_TABLE_ii[$732 & 127]($723)|0);
         $$0$i$i$i$i = $733;
        } else {
         $734 = HEAP32[$726>>2]|0;
         $$0$i$i$i$i = $734;
        }
        $735 = ($$0$i$i$i$i|0)==(-1);
        if ($735) {
         HEAP32[$__b>>2] = 0;
         $819 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $819 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $736 = HEAP32[$__e>>2]|0;
      $737 = ($736|0)==(0|0);
      do {
       if ($737) {
        label = 311;
       } else {
        $738 = (($736) + 12|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = (($736) + 16|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = ($739|0)==($741|0);
        if ($742) {
         $743 = HEAP32[$736>>2]|0;
         $744 = (($743) + 36|0);
         $745 = HEAP32[$744>>2]|0;
         $746 = (FUNCTION_TABLE_ii[$745 & 127]($736)|0);
         $$0$i$i1$i$i = $746;
        } else {
         $747 = HEAP32[$739>>2]|0;
         $$0$i$i1$i$i = $747;
        }
        $748 = ($$0$i$i1$i$i|0)==(-1);
        if ($748) {
         HEAP32[$__e>>2] = 0;
         label = 311;
         break;
        } else {
         if ($819) {
          break;
         } else {
          break L402;
         }
        }
       }
      } while(0);
      if ((label|0) == 311) {
       label = 0;
       if ($819) {
        break;
       }
      }
      $749 = HEAP32[$__b>>2]|0;
      $750 = (($749) + 12|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = (($749) + 16|0);
      $753 = HEAP32[$752>>2]|0;
      $754 = ($751|0)==($753|0);
      if ($754) {
       $755 = HEAP32[$749>>2]|0;
       $756 = (($755) + 36|0);
       $757 = HEAP32[$756>>2]|0;
       $758 = (FUNCTION_TABLE_ii[$757 & 127]($749)|0);
       $$0$i$i = $758;
      } else {
       $759 = HEAP32[$751>>2]|0;
       $$0$i$i = $759;
      }
      $760 = HEAP8[$__trailing_sign$0$lcssa]|0;
      $761 = $760 & 1;
      $762 = ($761<<24>>24)==(0);
      if ($762) {
       $765 = $713;
      } else {
       $763 = HEAP32[$714>>2]|0;
       $765 = $763;
      }
      $764 = (($765) + ($__i$0<<2)|0);
      $766 = HEAP32[$764>>2]|0;
      $767 = ($$0$i$i|0)==($766|0);
      if (!($767)) {
       break;
      }
      $770 = (($__i$0) + 1)|0;
      $771 = HEAP32[$__b>>2]|0;
      $772 = (($771) + 12|0);
      $773 = HEAP32[$772>>2]|0;
      $774 = (($771) + 16|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = ($773|0)==($775|0);
      if ($776) {
       $777 = HEAP32[$771>>2]|0;
       $778 = (($777) + 40|0);
       $779 = HEAP32[$778>>2]|0;
       (FUNCTION_TABLE_ii[$779 & 127]($771)|0);
       $__i$0 = $770;
       continue;
      } else {
       $780 = (($773) + 4|0);
       HEAP32[$772>>2] = $780;
       $__i$0 = $770;
       continue;
      }
     }
     $768 = HEAP32[$__err>>2]|0;
     $769 = $768 | 4;
     HEAP32[$__err>>2] = $769;
     $$0 = 0;$787 = $$lcssa313;$free234 = $free228$lcssa;
     break L390;
    }
   } while(0);
   $781 = ($$lcssa313|0)==($$lcssa330|0);
   if ($781) {
    $$0 = 1;$787 = $$lcssa330;$free234 = $free228$lcssa;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
    $782 = HEAP32[$__et>>2]|0;
    $783 = ($782|0)==(0);
    if ($783) {
     $$0 = 1;$787 = $$lcssa313;$free234 = $free228$lcssa;
    } else {
     $784 = HEAP32[$__err>>2]|0;
     $785 = $784 | 4;
     HEAP32[$__err>>2] = $785;
     $$0 = 0;$787 = $$lcssa313;$free234 = $free228$lcssa;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $786 = ($787|0)==(0|0);
 if ($786) {
  STACKTOP = sp;return ($$0|0);
 }
 FUNCTION_TABLE_vi[$free234 & 255]($787);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $$byval_copy = sp;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 428|0;
 $__loc = sp + 12|0;
 $__neg = sp + 432|0;
 $0 = sp + 424|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 125;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = HEAP32[$__loc>>2]|0;
 $4 = HEAP32[6872>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $6 = (($$byval_copy) + 4|0);
  HEAP32[$6>>2] = (123);
  $7 = (($$byval_copy) + 8|0);
  HEAP32[$7>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $8 = HEAP32[((6872 + 4|0))>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (($3) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)>($9>>>0);
 if (!($18)) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 $19 = (($13) + ($9<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($22);
  ___cxa_throw(($22|0),(14840|0),(112|0));
  // unreachable;
 }
 HEAP8[$__neg] = 0;
 $23 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $23;
 $24 = (($__iob) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $26 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$25,$__err,$__neg,$20,$__wb,$__wn,$2)|0);
 if ($26) {
  $27 = HEAP8[$__v]|0;
  $28 = $27 & 1;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $33 = (($__v) + 4|0);
   HEAP32[$33>>2] = 0;
   HEAP8[$__v] = 0;
  } else {
   $30 = (($__v) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$31>>2] = 0;
   $32 = (($__v) + 4|0);
   HEAP32[$32>>2] = 0;
  }
  $34 = HEAP8[$__neg]|0;
  $35 = ($34<<24>>24)==(0);
  if (!($35)) {
   $36 = HEAP32[$20>>2]|0;
   $37 = (($36) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iii[$38 & 15]($20,45)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$39);
  }
  $40 = HEAP32[$20>>2]|0;
  $41 = (($40) + 44|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_iii[$42 & 15]($20,48)|0);
  $44 = HEAP32[$__wb>>2]|0;
  $45 = HEAP32[$__wn>>2]|0;
  $46 = (($45) + -4|0);
  $47 = ($44>>>0)<($46>>>0);
  L19: do {
   if ($47) {
    $__w$09 = $44;
    while(1) {
     $50 = HEAP32[$__w$09>>2]|0;
     $51 = ($50|0)==($43|0);
     $49 = (($__w$09) + 4|0);
     if (!($51)) {
      $__w$0$lcssa = $__w$09;
      break L19;
     }
     $48 = ($49>>>0)<($46>>>0);
     if ($48) {
      $__w$09 = $49;
     } else {
      $__w$0$lcssa = $49;
      break;
     }
    }
   } else {
    $__w$0$lcssa = $44;
   }
  } while(0);
  (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$45)|0);
 }
 $52 = HEAP32[$__b>>2]|0;
 $53 = ($52|0)==(0|0);
 do {
  if ($53) {
   $84 = 1;
  } else {
   $54 = (($52) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($52) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($55|0)==($57|0);
   if ($58) {
    $59 = HEAP32[$52>>2]|0;
    $60 = (($59) + 36|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (FUNCTION_TABLE_ii[$61 & 127]($52)|0);
    $$0$i$i$i$i = $62;
   } else {
    $63 = HEAP32[$55>>2]|0;
    $$0$i$i$i$i = $63;
   }
   $64 = ($$0$i$i$i$i|0)==(-1);
   if ($64) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $84 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $65 = ($23|0)==(0|0);
 do {
  if ($65) {
   label = 29;
  } else {
   $66 = (($23) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($23) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)==($69|0);
   if ($70) {
    $71 = HEAP32[$23>>2]|0;
    $72 = (($71) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_ii[$73 & 127]($23)|0);
    $$0$i$i1$i$i = $74;
   } else {
    $75 = HEAP32[$67>>2]|0;
    $$0$i$i1$i$i = $75;
   }
   $76 = ($$0$i$i1$i$i|0)==(-1);
   if ($76) {
    HEAP32[$__e>>2] = 0;
    label = 29;
    break;
   } else {
    if ($84) {
     break;
    } else {
     label = 31;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 29) {
  if ($84) {
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $77 = HEAP32[$__err>>2]|0;
  $78 = $77 | 2;
  HEAP32[$__err>>2] = $78;
 }
 $79 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $79;
 $80 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 $81 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  STACKTOP = sp;return;
 }
 $83 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$83 & 255]($81);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$45 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$45 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this]|0;
  $22 = $$pre;
 } else {
  $22 = $45;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = (0 - ($0))|0;
  $uglygep = (($scevgep) + ($30)|0);
  $uglygep4 = $uglygep;
  $31 = $uglygep4 >>> 2;
  $32 = (($17) + ($31))|0;
  $33 = (($32) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $34 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $34;
   $35 = (($__p$02) + 4|0);
   $36 = (($$01) + 4|0);
   $37 = ($36|0)==($__last|0);
   if ($37) {
    break;
   } else {
    $$01 = $36;$__p$02 = $35;
   }
  }
  $scevgep5 = (($28) + ($33<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $38 = (($17) + ($13))|0;
 $39 = HEAP8[$this]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$this] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__p$i$i$i$i6 = sp;
 $0 = sp + 24|0;
 $1 = sp + 44|0;
 $2 = sp + 32|0;
 $3 = sp + 56|0;
 $4 = sp + 12|0;
 $5 = sp + 28|0;
 $6 = sp + 68|0;
 $7 = sp + 80|0;
 $8 = sp + 92|0;
 $9 = sp + 104|0;
 if ($__intl) {
  $10 = HEAP32[$__loc>>2]|0;
  $11 = HEAP32[6448>>2]|0;
  $12 = ($11|0)==(-1);
  if (!($12)) {
   HEAP32[$__p$i$i$i$i6>>2] = 6448;
   $13 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$13>>2] = (123);
   $14 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$14>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6448,$__p$i$i$i$i6,124);
  }
  $15 = HEAP32[((6448 + 4|0))>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = (($10) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($10) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $18;
  $22 = $20;
  $23 = (($21) - ($22))|0;
  $24 = $23 >> 2;
  $25 = ($24>>>0)>($16>>>0);
  if (!($25)) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $26 = (($20) + ($16<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $29 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($29);
   ___cxa_throw(($29|0),(14840|0),(112|0));
   // unreachable;
  }
  $30 = HEAP32[$27>>2]|0;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vii[$32 & 63]($0,$27);
  $33 = HEAP32[$0>>2]|0;
  HEAP8[$__pat]=$33&255;HEAP8[$__pat+1|0]=($33>>8)&255;HEAP8[$__pat+2|0]=($33>>16)&255;HEAP8[$__pat+3|0]=$33>>24;
  $34 = HEAP32[$27>>2]|0;
  $35 = (($34) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$36 & 63]($1,$27);
  $37 = HEAP8[$__nsn]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $43 = (($__nsn) + 4|0);
   HEAP32[$43>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $40 = (($__nsn) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$41>>2] = 0;
   $42 = (($__nsn) + 4|0);
   HEAP32[$42>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $44 = HEAP32[$27>>2]|0;
  $45 = (($44) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vii[$46 & 63]($2,$27);
  $47 = HEAP8[$__psn]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   $53 = (($__psn) + 4|0);
   HEAP32[$53>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $50 = (($__psn) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$51>>2] = 0;
   $52 = (($__psn) + 4|0);
   HEAP32[$52>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $54 = HEAP32[$27>>2]|0;
  $55 = (($54) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (FUNCTION_TABLE_ii[$56 & 127]($27)|0);
  HEAP32[$__dp>>2] = $57;
  $58 = HEAP32[$27>>2]|0;
  $59 = (($58) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (FUNCTION_TABLE_ii[$60 & 127]($27)|0);
  HEAP32[$__ts>>2] = $61;
  $62 = HEAP32[$27>>2]|0;
  $63 = (($62) + 20|0);
  $64 = HEAP32[$63>>2]|0;
  FUNCTION_TABLE_vii[$64 & 63]($3,$27);
  $65 = HEAP8[$__grp]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $71 = (($__grp) + 1|0);
   HEAP8[$71] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $68 = (($__grp) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP8[$69] = 0;
   $70 = (($__grp) + 4|0);
   HEAP32[$70>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $72 = HEAP32[$27>>2]|0;
  $73 = (($72) + 24|0);
  $74 = HEAP32[$73>>2]|0;
  FUNCTION_TABLE_vii[$74 & 63]($4,$27);
  $75 = HEAP8[$__sym]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $81 = (($__sym) + 4|0);
   HEAP32[$81>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $78 = (($__sym) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   HEAP32[$79>>2] = 0;
   $80 = (($__sym) + 4|0);
   HEAP32[$80>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $82 = HEAP32[$27>>2]|0;
  $83 = (($82) + 36|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (FUNCTION_TABLE_ii[$84 & 127]($27)|0);
  $storemerge = $85;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $86 = HEAP32[$__loc>>2]|0;
  $87 = HEAP32[6384>>2]|0;
  $88 = ($87|0)==(-1);
  if (!($88)) {
   HEAP32[$__p$i$i$i$i6>>2] = 6384;
   $89 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$89>>2] = (123);
   $90 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$90>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6384,$__p$i$i$i$i6,124);
  }
  $91 = HEAP32[((6384 + 4|0))>>2]|0;
  $92 = (($91) + -1)|0;
  $93 = (($86) + 12|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($86) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $94;
  $98 = $96;
  $99 = (($97) - ($98))|0;
  $100 = $99 >> 2;
  $101 = ($100>>>0)>($92>>>0);
  if (!($101)) {
   $105 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw(($105|0),(14840|0),(112|0));
   // unreachable;
  }
  $102 = (($96) + ($92<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0|0);
  if ($104) {
   $105 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($105);
   ___cxa_throw(($105|0),(14840|0),(112|0));
   // unreachable;
  }
  $106 = HEAP32[$103>>2]|0;
  $107 = (($106) + 44|0);
  $108 = HEAP32[$107>>2]|0;
  FUNCTION_TABLE_vii[$108 & 63]($5,$103);
  $109 = HEAP32[$5>>2]|0;
  HEAP8[$__pat]=$109&255;HEAP8[$__pat+1|0]=($109>>8)&255;HEAP8[$__pat+2|0]=($109>>16)&255;HEAP8[$__pat+3|0]=$109>>24;
  $110 = HEAP32[$103>>2]|0;
  $111 = (($110) + 32|0);
  $112 = HEAP32[$111>>2]|0;
  FUNCTION_TABLE_vii[$112 & 63]($6,$103);
  $113 = HEAP8[$__nsn]|0;
  $114 = $113 & 1;
  $115 = ($114<<24>>24)==(0);
  if ($115) {
   $119 = (($__nsn) + 4|0);
   HEAP32[$119>>2] = 0;
   HEAP8[$__nsn] = 0;
  } else {
   $116 = (($__nsn) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP32[$117>>2] = 0;
   $118 = (($__nsn) + 4|0);
   HEAP32[$118>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $120 = HEAP32[$103>>2]|0;
  $121 = (($120) + 28|0);
  $122 = HEAP32[$121>>2]|0;
  FUNCTION_TABLE_vii[$122 & 63]($7,$103);
  $123 = HEAP8[$__psn]|0;
  $124 = $123 & 1;
  $125 = ($124<<24>>24)==(0);
  if ($125) {
   $129 = (($__psn) + 4|0);
   HEAP32[$129>>2] = 0;
   HEAP8[$__psn] = 0;
  } else {
   $126 = (($__psn) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP32[$127>>2] = 0;
   $128 = (($__psn) + 4|0);
   HEAP32[$128>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $130 = HEAP32[$103>>2]|0;
  $131 = (($130) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (FUNCTION_TABLE_ii[$132 & 127]($103)|0);
  HEAP32[$__dp>>2] = $133;
  $134 = HEAP32[$103>>2]|0;
  $135 = (($134) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (FUNCTION_TABLE_ii[$136 & 127]($103)|0);
  HEAP32[$__ts>>2] = $137;
  $138 = HEAP32[$103>>2]|0;
  $139 = (($138) + 20|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 63]($8,$103);
  $141 = HEAP8[$__grp]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__grp) + 1|0);
   HEAP8[$147] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $144 = (($__grp) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145] = 0;
   $146 = (($__grp) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $148 = HEAP32[$103>>2]|0;
  $149 = (($148) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  FUNCTION_TABLE_vii[$150 & 63]($9,$103);
  $151 = HEAP8[$__sym]|0;
  $152 = $151 & 1;
  $153 = ($152<<24>>24)==(0);
  if ($153) {
   $157 = (($__sym) + 4|0);
   HEAP32[$157>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $154 = (($__sym) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   HEAP32[$155>>2] = 0;
   $156 = (($__sym) + 4|0);
   HEAP32[$156>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $158 = HEAP32[$103>>2]|0;
  $159 = (($158) + 36|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (FUNCTION_TABLE_ii[$160 & 127]($103)|0);
  $storemerge = $161;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0;
 var $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $$byval_copy = sp;
 $__buf = sp + 76|0;
 $__bb = sp + 44|0;
 $__digits = sp + 176|0;
 $__loc = sp + 40|0;
 $__pat = sp + 68|0;
 $__dp = sp + 276|0;
 $__ts = sp + 380|0;
 $__grp = sp + 56|0;
 $__sym = sp + 24|0;
 $__sn = sp + 12|0;
 $__fd = sp + 52|0;
 $__mbuf = sp + 280|0;
 $__mi = sp + 36|0;
 $__me = sp + 48|0;
 $0 = sp + 72|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(6632|0),($$byval_copy|0))|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = HEAP8[6776]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
    HEAP32[6768>>2] = $7;
    ___cxa_guard_release((6776|0));
   }
  }
  $8 = HEAP32[6768>>2]|0;
  HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $9 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$8,6632,$$byval_copy)|0);
  $10 = HEAP32[$__bb>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $12 = (_malloc($9)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $101 = $12;$103 = $10;$__db$0 = $12;$__n$0 = $9;
  }
 } else {
  $101 = 0;$103 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $14 = HEAP32[$__loc>>2]|0;
 $15 = HEAP32[6880>>2]|0;
 $16 = ($15|0)==(-1);
 if (!($16)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $17 = (($$byval_copy) + 4|0);
  HEAP32[$17>>2] = (123);
  $18 = (($$byval_copy) + 8|0);
  HEAP32[$18>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $19 = HEAP32[((6880 + 4|0))>>2]|0;
 $20 = (($19) + -1)|0;
 $21 = (($14) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($14) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $22;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 2;
 $29 = ($28>>>0)>($20>>>0);
 if (!($29)) {
  $33 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($33);
  ___cxa_throw(($33|0),(14840|0),(112|0));
  // unreachable;
 }
 $30 = (($24) + ($20<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($33);
  ___cxa_throw(($33|0),(14840|0),(112|0));
  // unreachable;
 }
 $34 = HEAP32[$__bb>>2]|0;
 $35 = (($34) + ($__n$0)|0);
 $36 = HEAP32[$31>>2]|0;
 $37 = (($36) + 32|0);
 $38 = HEAP32[$37>>2]|0;
 (FUNCTION_TABLE_iiiii[$38 & 7]($31,$34,$35,$__db$0)|0);
 $39 = ($__n$0|0)==(0);
 if ($39) {
  $43 = 0;
 } else {
  $40 = HEAP32[$__bb>>2]|0;
  $41 = HEAP8[$40]|0;
  $42 = ($41<<24>>24)==(45);
  $43 = $42;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$43,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $44 = HEAP32[$__fd>>2]|0;
 $45 = ($__n$0|0)>($44|0);
 if ($45) {
  $46 = (($__n$0) - ($44))|0;
  $47 = $46 << 1;
  $48 = HEAP8[$__sn]|0;
  $49 = $48 & 1;
  $50 = ($49<<24>>24)==(0);
  if ($50) {
   $53 = $48&255;
   $54 = $53 >>> 1;
   $64 = $54;
  } else {
   $51 = (($__sn) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $64 = $52;
  }
  $55 = HEAP8[$__sym]|0;
  $56 = $55 & 1;
  $57 = ($56<<24>>24)==(0);
  if ($57) {
   $60 = $55&255;
   $61 = $60 >>> 1;
   $66 = $61;
  } else {
   $58 = (($__sym) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $66 = $59;
  }
  $62 = $47 | 1;
  $63 = (($64) + ($62))|0;
  $65 = (($63) + ($66))|0;
  $$pn = $65;
 } else {
  $67 = HEAP8[$__sn]|0;
  $68 = $67 & 1;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $72 = $67&255;
   $73 = $72 >>> 1;
   $82 = $73;
  } else {
   $70 = (($__sn) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $82 = $71;
  }
  $74 = HEAP8[$__sym]|0;
  $75 = $74 & 1;
  $76 = ($75<<24>>24)==(0);
  if ($76) {
   $79 = $74&255;
   $80 = $79 >>> 1;
   $84 = $80;
  } else {
   $77 = (($__sym) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $84 = $78;
  }
  $81 = (($82) + 2)|0;
  $83 = (($81) + ($84))|0;
  $$pn = $83;
 }
 $85 = (($$pn) + ($44))|0;
 $86 = ($85>>>0)>(100);
 if ($86) {
  $87 = (_malloc($85)|0);
  $88 = ($87|0)==(0|0);
  if ($88) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $98 = $87;$__mb$0 = $87;
  }
 } else {
  $98 = 0;$__mb$0 = $__mbuf;
 }
 $89 = (($__iob) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($__db$0) + ($__n$0)|0);
 $92 = HEAP8[$__dp]|0;
 $93 = HEAP8[$__ts]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$90,$__db$0,$91,$31,$43,$__pat,$92,$93,$__grp,$__sym,$__sn,$44);
 $94 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $94;
 $95 = HEAP32[$__mi>>2]|0;
 $96 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$95,$96,$__iob,$__fl);
 $97 = ($98|0)==(0|0);
 if (!($97)) {
  _free($98);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $99 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($99)|0);
 $100 = ($101|0)==(0|0);
 if (!($100)) {
  _free($101);
 }
 $102 = ($103|0)==(0|0);
 if ($102) {
  STACKTOP = sp;return;
 }
 _free($103);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__p$i$i$i$i10 = sp;
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 52|0;
 $3 = sp + 56|0;
 $4 = sp + 16|0;
 $5 = sp + 28|0;
 $6 = sp + 68|0;
 $7 = sp + 72|0;
 $8 = sp + 84|0;
 $9 = sp + 88|0;
 $10 = sp + 100|0;
 $11 = sp + 112|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[6320>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i10>>2] = 6320;
   $15 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$15>>2] = (123);
   $16 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6320,$__p$i$i$i$i10,124);
  }
  $17 = HEAP32[((6320 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  if ($__neg) {
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 63]($0,$29);
   $35 = HEAP32[$0>>2]|0;
   HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
   $36 = HEAP32[$29>>2]|0;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 63]($1,$29);
   $39 = HEAP8[$__sn]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $45 = (($__sn) + 1|0);
    HEAP8[$45] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $42 = (($__sn) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP8[$43] = 0;
    $44 = (($__sn) + 4|0);
    HEAP32[$44>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  } else {
   $46 = (($32) + 40|0);
   $47 = HEAP32[$46>>2]|0;
   FUNCTION_TABLE_vii[$47 & 63]($2,$29);
   $48 = HEAP32[$2>>2]|0;
   HEAP8[$__pat]=$48&255;HEAP8[$__pat+1|0]=($48>>8)&255;HEAP8[$__pat+2|0]=($48>>16)&255;HEAP8[$__pat+3|0]=$48>>24;
   $49 = HEAP32[$29>>2]|0;
   $50 = (($49) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   FUNCTION_TABLE_vii[$51 & 63]($3,$29);
   $52 = HEAP8[$__sn]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    $58 = (($__sn) + 1|0);
    HEAP8[$58] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $55 = (($__sn) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP8[$56] = 0;
    $57 = (($__sn) + 4|0);
    HEAP32[$57>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  }
  $59 = HEAP32[$29>>2]|0;
  $60 = (($59) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_ii[$61 & 127]($29)|0);
  HEAP8[$__dp] = $62;
  $63 = HEAP32[$29>>2]|0;
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 127]($29)|0);
  HEAP8[$__ts] = $66;
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vii[$69 & 63]($4,$29);
  $70 = HEAP8[$__grp]|0;
  $71 = $70 & 1;
  $72 = ($71<<24>>24)==(0);
  if ($72) {
   $76 = (($__grp) + 1|0);
   HEAP8[$76] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $73 = (($__grp) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   HEAP8[$74] = 0;
   $75 = (($__grp) + 4|0);
   HEAP32[$75>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $77 = HEAP32[$29>>2]|0;
  $78 = (($77) + 24|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 63]($5,$29);
  $80 = HEAP8[$__sym]|0;
  $81 = $80 & 1;
  $82 = ($81<<24>>24)==(0);
  if ($82) {
   $86 = (($__sym) + 1|0);
   HEAP8[$86] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $83 = (($__sym) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   HEAP8[$84] = 0;
   $85 = (($__sym) + 4|0);
   HEAP32[$85>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $87 = HEAP32[$29>>2]|0;
  $88 = (($87) + 36|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 127]($29)|0);
  $storemerge = $90;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $91 = HEAP32[6256>>2]|0;
  $92 = ($91|0)==(-1);
  if (!($92)) {
   HEAP32[$__p$i$i$i$i10>>2] = 6256;
   $93 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$93>>2] = (123);
   $94 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$94>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6256,$__p$i$i$i$i10,124);
  }
  $95 = HEAP32[((6256 + 4|0))>>2]|0;
  $96 = (($95) + -1)|0;
  $97 = (($12) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($12) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $98;
  $102 = $100;
  $103 = (($101) - ($102))|0;
  $104 = $103 >> 2;
  $105 = ($104>>>0)>($96>>>0);
  if (!($105)) {
   $109 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw(($109|0),(14840|0),(112|0));
   // unreachable;
  }
  $106 = (($100) + ($96<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0|0);
  if ($108) {
   $109 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw(($109|0),(14840|0),(112|0));
   // unreachable;
  }
  $110 = HEAP32[$107>>2]|0;
  if ($__neg) {
   $111 = (($110) + 44|0);
   $112 = HEAP32[$111>>2]|0;
   FUNCTION_TABLE_vii[$112 & 63]($6,$107);
   $113 = HEAP32[$6>>2]|0;
   HEAP8[$__pat]=$113&255;HEAP8[$__pat+1|0]=($113>>8)&255;HEAP8[$__pat+2|0]=($113>>16)&255;HEAP8[$__pat+3|0]=$113>>24;
   $114 = HEAP32[$107>>2]|0;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vii[$116 & 63]($7,$107);
   $117 = HEAP8[$__sn]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $123 = (($__sn) + 1|0);
    HEAP8[$123] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $120 = (($__sn) + 8|0);
    $121 = HEAP32[$120>>2]|0;
    HEAP8[$121] = 0;
    $122 = (($__sn) + 4|0);
    HEAP32[$122>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  } else {
   $124 = (($110) + 40|0);
   $125 = HEAP32[$124>>2]|0;
   FUNCTION_TABLE_vii[$125 & 63]($8,$107);
   $126 = HEAP32[$8>>2]|0;
   HEAP8[$__pat]=$126&255;HEAP8[$__pat+1|0]=($126>>8)&255;HEAP8[$__pat+2|0]=($126>>16)&255;HEAP8[$__pat+3|0]=$126>>24;
   $127 = HEAP32[$107>>2]|0;
   $128 = (($127) + 28|0);
   $129 = HEAP32[$128>>2]|0;
   FUNCTION_TABLE_vii[$129 & 63]($9,$107);
   $130 = HEAP8[$__sn]|0;
   $131 = $130 & 1;
   $132 = ($131<<24>>24)==(0);
   if ($132) {
    $136 = (($__sn) + 1|0);
    HEAP8[$136] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $133 = (($__sn) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP8[$134] = 0;
    $135 = (($__sn) + 4|0);
    HEAP32[$135>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  }
  $137 = HEAP32[$107>>2]|0;
  $138 = (($137) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (FUNCTION_TABLE_ii[$139 & 127]($107)|0);
  HEAP8[$__dp] = $140;
  $141 = HEAP32[$107>>2]|0;
  $142 = (($141) + 16|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (FUNCTION_TABLE_ii[$143 & 127]($107)|0);
  HEAP8[$__ts] = $144;
  $145 = HEAP32[$107>>2]|0;
  $146 = (($145) + 20|0);
  $147 = HEAP32[$146>>2]|0;
  FUNCTION_TABLE_vii[$147 & 63]($10,$107);
  $148 = HEAP8[$__grp]|0;
  $149 = $148 & 1;
  $150 = ($149<<24>>24)==(0);
  if ($150) {
   $154 = (($__grp) + 1|0);
   HEAP8[$154] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $151 = (($__grp) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   HEAP8[$152] = 0;
   $153 = (($__grp) + 4|0);
   HEAP32[$153>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $155 = HEAP32[$107>>2]|0;
  $156 = (($155) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 63]($11,$107);
  $158 = HEAP8[$__sym]|0;
  $159 = $158 & 1;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   $164 = (($__sym) + 1|0);
   HEAP8[$164] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $161 = (($__sym) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   HEAP8[$162] = 0;
   $163 = (($__sym) + 4|0);
   HEAP32[$163>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $165 = HEAP32[$107>>2]|0;
  $166 = (($165) + 36|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($107)|0);
  $storemerge = $168;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$139 = 0;
 var $__gl$046 = 0, $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$049)|0);
  $15 = HEAP8[$14]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 2:  {
   $38 = HEAP8[$__sym]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $brmerge = $44 | $4;
   if ($brmerge) {
    $$2 = $$050;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($51|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i17 = $53;
    } else {
     $$01$i$i15 = $53;$56 = $51;
     while(1) {
      $55 = HEAP8[$56]|0;
      HEAP8[$$01$i$i15] = $55;
      $57 = (($56) + 1|0);
      $58 = (($$01$i$i15) + 1|0);
      $59 = ($57|0)==($50|0);
      if ($59) {
       $$0$lcssa$i$i17 = $58;
       break;
      } else {
       $$01$i$i15 = $58;$56 = $57;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 15]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23] = $22;
   $$2 = $$050;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$050;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36] = $34;
    $$2 = $$050;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$050;
   break;
  }
  case 4:  {
   $60 = HEAP32[$__me>>2]|0;
   $61 = (($$050) + 1|0);
   $$$0 = $__neg ? $61 : $$050;
   $62 = ($$$0>>>0)<($__de>>>0);
   L30: do {
    if ($62) {
     $__d$029 = $$$0;
     while(1) {
      $65 = HEAP8[$__d$029]|0;
      $isascii1$i = ($65<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $66 = $65 << 24 >> 24;
      $67 = HEAP32[$12>>2]|0;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 & 2048;
      $71 = ($70<<16>>16)==(0);
      $64 = (($__d$029) + 1|0);
      if ($71) {
       $__d$0$lcssa = $__d$029;
       break L30;
      }
      $63 = ($64>>>0)<($__de>>>0);
      if ($63) {
       $__d$029 = $64;
      } else {
       $__d$0$lcssa = $64;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa58 = $__d$0$lcssa;
   if ($8) {
    $72 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($72) {
     $73 = (0 - ($__d$0$lcssa58))|0;
     $scevgep = (($$$0) + ($73)|0);
     $scevgep59 = $scevgep;
     $74 = ($scevgep59>>>0)<($13>>>0);
     $umax = $74 ? $13 : $scevgep59;
     $umax60 = $umax;
     $scevgep61 = (($umax60) + ($__fd)|0);
     $scevgep6162 = $scevgep61;
     $78 = $60;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
     while(1) {
      $75 = (($__d$132) + -1|0);
      $76 = HEAP8[$75]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78] = $76;
      $79 = (($__f$033) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$132 = $75;$__f$033 = $79;
     }
     $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
     if ($81) {
      $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
      label = 32;
     } else {
      $89 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
     }
    } else {
     $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 15]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
    }
    $86 = ($__f$0$lcssa71|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$139 = $__f$0$lcssa71;
     while(1) {
      HEAP8[$90] = $89;
      $91 = (($__f$139) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$139 = $91;
      } else {
       $$lcssa38 = $93;
       break;
      }
     }
    } else {
     $$lcssa38 = $87;
    }
    HEAP8[$$lcssa38] = $__dp;
    $__d$2 = $__d$1$lcssa73;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 15]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100] = $99;
   } else {
    $102 = HEAP8[$__grp]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $109 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $109 = $105;
    }
    $108 = ($109|0)==(0);
    if ($108) {
     $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
    } else {
     if ($104) {
      $112 = $9;
     } else {
      $110 = HEAP32[$10>>2]|0;
      $112 = $110;
     }
     $111 = HEAP8[$112]|0;
     $113 = $111 << 24 >> 24;
     $__d$343 = $__d$2;$__gl$046 = $113;$__ig$045 = 0;$__ng$044 = 0;
    }
    while(1) {
     $114 = ($__ng$044|0)==($__gl$046|0);
     if ($114) {
      $115 = HEAP32[$__me>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$__me>>2] = $116;
      HEAP8[$115] = $__ts;
      $117 = (($__ig$045) + 1)|0;
      $118 = HEAP8[$__grp]|0;
      $119 = $118 & 1;
      $120 = ($119<<24>>24)==(0);
      if ($120) {
       $122 = $118&255;
       $123 = $122 >>> 1;
       $125 = $123;
      } else {
       $121 = HEAP32[$11>>2]|0;
       $125 = $121;
      }
      $124 = ($117>>>0)<($125>>>0);
      if ($124) {
       if ($120) {
        $128 = $9;
       } else {
        $126 = HEAP32[$10>>2]|0;
        $128 = $126;
       }
       $127 = (($128) + ($117)|0);
       $129 = HEAP8[$127]|0;
       $130 = ($129<<24>>24)==(127);
       if ($130) {
        $__gl$1 = -1;$__ig$1 = $117;$__ng$1 = 0;
       } else {
        if ($120) {
         $133 = $9;
        } else {
         $131 = HEAP32[$10>>2]|0;
         $133 = $131;
        }
        $132 = (($133) + ($117)|0);
        $134 = HEAP8[$132]|0;
        $135 = $134 << 24 >> 24;
        $__gl$1 = $135;$__ig$1 = $117;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$046;$__ig$1 = $117;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
     }
     $136 = (($__d$343) + -1|0);
     $137 = HEAP8[$136]|0;
     $138 = HEAP32[$__me>>2]|0;
     $139 = (($138) + 1|0);
     HEAP32[$__me>>2] = $139;
     HEAP8[$138] = $137;
     $140 = (($__ng$1) + 1)|0;
     $141 = ($136|0)==($$$0|0);
     if ($141) {
      break;
     } else {
      $__d$343 = $136;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $140;
     }
    }
   }
   $142 = HEAP32[$__me>>2]|0;
   $143 = ($60|0)==($142|0);
   if ($143) {
    $$2 = $$$0;
   } else {
    $144 = (($142) + -1|0);
    $145 = ($144>>>0)>($60>>>0);
    if ($145) {
     $$012$i$i = $60;$148 = $144;
     while(1) {
      $146 = HEAP8[$$012$i$i]|0;
      $147 = HEAP8[$148]|0;
      HEAP8[$$012$i$i] = $147;
      HEAP8[$148] = $146;
      $149 = (($$012$i$i) + 1|0);
      $150 = (($148) + -1|0);
      $151 = ($149>>>0)<($150>>>0);
      if ($151) {
       $$012$i$i = $149;$148 = $150;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$050;
  }
  }
  $152 = (($__p$049) + 1)|0;
  $exitcond = ($152|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $152;
  }
 }
 $153 = HEAP8[$__sn]|0;
 $154 = $153 & 1;
 $155 = ($154<<24>>24)==(0);
 if ($155) {
  $157 = $153&255;
  $158 = $157 >>> 1;
  $160 = $158;
 } else {
  $156 = HEAP32[$2>>2]|0;
  $160 = $156;
 }
 $159 = ($160>>>0)>(1);
 if ($159) {
  if ($155) {
   $163 = $153&255;
   $164 = $163 >>> 1;
   $$pn = $0;$167 = $164;
  } else {
   $161 = HEAP32[$1>>2]|0;
   $162 = HEAP32[$2>>2]|0;
   $$pn = $161;$167 = $162;
  }
  $165 = (($$pn) + 1|0);
  $166 = (($$pn) + ($167)|0);
  $168 = HEAP32[$__me>>2]|0;
  $169 = ($165|0)==($166|0);
  if ($169) {
   $$0$lcssa$i$i = $168;
  } else {
   $$01$i$i = $168;$171 = $165;
   while(1) {
    $170 = HEAP8[$171]|0;
    HEAP8[$$01$i$i] = $170;
    $172 = (($171) + 1|0);
    $173 = (($$01$i$i) + 1|0);
    $174 = ($172|0)==($166|0);
    if ($174) {
     $$0$lcssa$i$i = $173;
     break;
    } else {
     $$01$i$i = $173;$171 = $172;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $175 = $__flags & 176;
 if ((($175|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($175|0) == 32)) {
  $176 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $176;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp;
 $__loc = sp + 40|0;
 $__pat = sp + 24|0;
 $__dp = sp + 72|0;
 $__ts = sp + 73|0;
 $__grp = sp + 12|0;
 $__sym = sp + 28|0;
 $__sn = sp + 48|0;
 $__fd = sp + 44|0;
 $__mbuf = sp + 76|0;
 $__mi = sp + 60|0;
 $__me = sp + 64|0;
 $0 = sp + 68|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[6880>>2]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$$byval_copy>>2] = 6880;
  $4 = (($$byval_copy) + 4|0);
  HEAP32[$4>>2] = (123);
  $5 = (($$byval_copy) + 8|0);
  HEAP32[$5>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$$byval_copy,124);
 }
 $6 = HEAP32[((6880 + 4|0))>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($1) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $21 = HEAP8[$__digits]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $26 = $21&255;
  $27 = $26 >>> 1;
  $29 = $27;
 } else {
  $24 = (($__digits) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $29 = $25;
 }
 $28 = ($29|0)==(0);
 if ($28) {
  $40 = 0;
 } else {
  if ($23) {
   $32 = (($__digits) + 1|0);
   $34 = $32;
  } else {
   $30 = (($__digits) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $34 = $31;
  }
  $33 = HEAP8[$34]|0;
  $35 = HEAP32[$18>>2]|0;
  $36 = (($35) + 28|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 15]($18,45)|0);
  $39 = ($33<<24>>24)==($38<<24>>24);
  $40 = $39;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$40,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $41 = HEAP8[$__digits]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $46 = $41&255;
  $47 = $46 >>> 1;
  $50 = $47;
 } else {
  $44 = (($__digits) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $50 = $45;
 }
 $48 = HEAP32[$__fd>>2]|0;
 $49 = ($50|0)>($48|0);
 if ($49) {
  if ($43) {
   $53 = $41&255;
   $54 = $53 >>> 1;
   $56 = $54;
  } else {
   $51 = (($__digits) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $56 = $52;
  }
  $55 = (($56) - ($48))|0;
  $57 = $55 << 1;
  $58 = HEAP8[$__sn]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = $58&255;
   $64 = $63 >>> 1;
   $74 = $64;
  } else {
   $61 = (($__sn) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $74 = $62;
  }
  $65 = HEAP8[$__sym]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $70 = $65&255;
   $71 = $70 >>> 1;
   $76 = $71;
  } else {
   $68 = (($__sym) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $76 = $69;
  }
  $72 = $57 | 1;
  $73 = (($74) + ($72))|0;
  $75 = (($73) + ($76))|0;
  $$pn = $75;
 } else {
  $77 = HEAP8[$__sn]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   $82 = $77&255;
   $83 = $82 >>> 1;
   $92 = $83;
  } else {
   $80 = (($__sn) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $92 = $81;
  }
  $84 = HEAP8[$__sym]|0;
  $85 = $84 & 1;
  $86 = ($85<<24>>24)==(0);
  if ($86) {
   $89 = $84&255;
   $90 = $89 >>> 1;
   $94 = $90;
  } else {
   $87 = (($__sym) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $94 = $88;
  }
  $91 = (($92) + 2)|0;
  $93 = (($91) + ($94))|0;
  $$pn = $93;
 }
 $95 = (($$pn) + ($48))|0;
 $96 = ($95>>>0)>(100);
 if ($96) {
  $97 = (_malloc($95)|0);
  $98 = ($97|0)==(0|0);
  if ($98) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $119 = $97;$__mb$0 = $97;
  }
 } else {
  $119 = 0;$__mb$0 = $__mbuf;
 }
 $99 = (($__iob) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $41 & 1;
 $102 = ($101<<24>>24)==(0);
 if ($102) {
  $107 = (($__digits) + 1|0);
  $108 = $41&255;
  $109 = $108 >>> 1;
  $111 = $107;$112 = $109;
 } else {
  $103 = (($__digits) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($__digits) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $111 = $104;$112 = $106;
 }
 $110 = (($111) + ($112)|0);
 $113 = HEAP8[$__dp]|0;
 $114 = HEAP8[$__ts]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$100,$111,$110,$18,$40,$__pat,$113,$114,$__grp,$__sym,$__sn,$48);
 $115 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $115;
 $116 = HEAP32[$__mi>>2]|0;
 $117 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$116,$117,$__iob,$__fl);
 $118 = ($119|0)==(0|0);
 if ($118) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
  $120 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($120)|0);
  STACKTOP = sp;return;
 }
 _free($119);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $120 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($120)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0;
 var $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0;
 $$byval_copy = sp;
 $__buf = sp + 888|0;
 $__bb = sp + 424|0;
 $__digits = sp + 16|0;
 $__loc = sp + 428|0;
 $__pat = sp + 416|0;
 $__dp = sp + 420|0;
 $__ts = sp + 880|0;
 $__grp = sp + 440|0;
 $__sym = sp + 452|0;
 $__sn = sp + 464|0;
 $__fd = sp + 476|0;
 $__mbuf = sp + 480|0;
 $__mi = sp + 432|0;
 $__me = sp + 436|0;
 $0 = sp + 884|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf(($__buf|0),100,(6632|0),($$byval_copy|0))|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = HEAP8[6776]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = (___cxa_guard_acquire((6776|0))|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
    HEAP32[6768>>2] = $7;
    ___cxa_guard_release((6776|0));
   }
  }
  $8 = HEAP32[6768>>2]|0;
  HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $9 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$8,6632,$$byval_copy)|0);
  $10 = HEAP32[$__bb>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $12 = $9 << 2;
  $13 = (_malloc($12)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $103 = $13;$105 = $10;$__db$0 = $13;$__n$0 = $9;
  }
 } else {
  $103 = 0;$105 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $15 = HEAP32[$__loc>>2]|0;
 $16 = HEAP32[6872>>2]|0;
 $17 = ($16|0)==(-1);
 if (!($17)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $18 = (($$byval_copy) + 4|0);
  HEAP32[$18>>2] = (123);
  $19 = (($$byval_copy) + 8|0);
  HEAP32[$19>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $20 = HEAP32[((6872 + 4|0))>>2]|0;
 $21 = (($20) + -1)|0;
 $22 = (($15) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($15) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $23;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = $28 >> 2;
 $30 = ($29>>>0)>($21>>>0);
 if (!($30)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(14840|0),(112|0));
  // unreachable;
 }
 $31 = (($25) + ($21<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(14840|0),(112|0));
  // unreachable;
 }
 $35 = HEAP32[$__bb>>2]|0;
 $36 = (($35) + ($__n$0)|0);
 $37 = HEAP32[$32>>2]|0;
 $38 = (($37) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 (FUNCTION_TABLE_iiiii[$39 & 7]($32,$35,$36,$__db$0)|0);
 $40 = ($__n$0|0)==(0);
 if ($40) {
  $44 = 0;
 } else {
  $41 = HEAP32[$__bb>>2]|0;
  $42 = HEAP8[$41]|0;
  $43 = ($42<<24>>24)==(45);
  $44 = $43;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$44,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $45 = HEAP32[$__fd>>2]|0;
 $46 = ($__n$0|0)>($45|0);
 if ($46) {
  $47 = (($__n$0) - ($45))|0;
  $48 = $47 << 1;
  $49 = HEAP8[$__sn]|0;
  $50 = $49 & 1;
  $51 = ($50<<24>>24)==(0);
  if ($51) {
   $54 = $49&255;
   $55 = $54 >>> 1;
   $65 = $55;
  } else {
   $52 = (($__sn) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $65 = $53;
  }
  $56 = HEAP8[$__sym]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $61 = $56&255;
   $62 = $61 >>> 1;
   $67 = $62;
  } else {
   $59 = (($__sym) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $67 = $60;
  }
  $63 = $48 | 1;
  $64 = (($65) + ($63))|0;
  $66 = (($64) + ($67))|0;
  $$pn = $66;
 } else {
  $68 = HEAP8[$__sn]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $73 = $68&255;
   $74 = $73 >>> 1;
   $83 = $74;
  } else {
   $71 = (($__sn) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $83 = $72;
  }
  $75 = HEAP8[$__sym]|0;
  $76 = $75 & 1;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $80 = $75&255;
   $81 = $80 >>> 1;
   $85 = $81;
  } else {
   $78 = (($__sym) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $85 = $79;
  }
  $82 = (($83) + 2)|0;
  $84 = (($82) + ($85))|0;
  $$pn = $84;
 }
 $86 = (($$pn) + ($45))|0;
 $87 = ($86>>>0)>(100);
 if ($87) {
  $88 = $86 << 2;
  $89 = (_malloc($88)|0);
  $90 = ($89|0)==(0|0);
  if ($90) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $100 = $89;$__mb$0 = $89;
  }
 } else {
  $100 = 0;$__mb$0 = $__mbuf;
 }
 $91 = (($__iob) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($__db$0) + ($__n$0<<2)|0);
 $94 = HEAP32[$__dp>>2]|0;
 $95 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$92,$__db$0,$93,$32,$44,$__pat,$94,$95,$__grp,$__sym,$__sn,$45);
 $96 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $96;
 $97 = HEAP32[$__mi>>2]|0;
 $98 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$97,$98,$__iob,$__fl);
 $99 = ($100|0)==(0|0);
 if (!($99)) {
  _free($100);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $101 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($101)|0);
 $102 = ($103|0)==(0|0);
 if (!($102)) {
  _free($103);
 }
 $104 = ($105|0)==(0|0);
 if ($104) {
  STACKTOP = sp;return;
 }
 _free($105);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__p$i$i$i$i8 = sp;
 $0 = sp + 12|0;
 $1 = sp + 40|0;
 $2 = sp + 52|0;
 $3 = sp + 56|0;
 $4 = sp + 16|0;
 $5 = sp + 28|0;
 $6 = sp + 68|0;
 $7 = sp + 72|0;
 $8 = sp + 84|0;
 $9 = sp + 88|0;
 $10 = sp + 100|0;
 $11 = sp + 112|0;
 $12 = HEAP32[$__loc>>2]|0;
 if ($__intl) {
  $13 = HEAP32[6448>>2]|0;
  $14 = ($13|0)==(-1);
  if (!($14)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6448;
   $15 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$15>>2] = (123);
   $16 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$16>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6448,$__p$i$i$i$i8,124);
  }
  $17 = HEAP32[((6448 + 4|0))>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = (($12) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($12) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($23) - ($24))|0;
  $26 = $25 >> 2;
  $27 = ($26>>>0)>($18>>>0);
  if (!($27)) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $28 = (($22) + ($18<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $31 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($31);
   ___cxa_throw(($31|0),(14840|0),(112|0));
   // unreachable;
  }
  $32 = HEAP32[$29>>2]|0;
  if ($__neg) {
   $33 = (($32) + 44|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 63]($0,$29);
   $35 = HEAP32[$0>>2]|0;
   HEAP8[$__pat]=$35&255;HEAP8[$__pat+1|0]=($35>>8)&255;HEAP8[$__pat+2|0]=($35>>16)&255;HEAP8[$__pat+3|0]=$35>>24;
   $36 = HEAP32[$29>>2]|0;
   $37 = (($36) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 63]($1,$29);
   $39 = HEAP8[$__sn]|0;
   $40 = $39 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $45 = (($__sn) + 4|0);
    HEAP32[$45>>2] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $42 = (($__sn) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$43>>2] = 0;
    $44 = (($__sn) + 4|0);
    HEAP32[$44>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  } else {
   $46 = (($32) + 40|0);
   $47 = HEAP32[$46>>2]|0;
   FUNCTION_TABLE_vii[$47 & 63]($2,$29);
   $48 = HEAP32[$2>>2]|0;
   HEAP8[$__pat]=$48&255;HEAP8[$__pat+1|0]=($48>>8)&255;HEAP8[$__pat+2|0]=($48>>16)&255;HEAP8[$__pat+3|0]=$48>>24;
   $49 = HEAP32[$29>>2]|0;
   $50 = (($49) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   FUNCTION_TABLE_vii[$51 & 63]($3,$29);
   $52 = HEAP8[$__sn]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    $58 = (($__sn) + 4|0);
    HEAP32[$58>>2] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $55 = (($__sn) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP32[$56>>2] = 0;
    $57 = (($__sn) + 4|0);
    HEAP32[$57>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  }
  $59 = HEAP32[$29>>2]|0;
  $60 = (($59) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (FUNCTION_TABLE_ii[$61 & 127]($29)|0);
  HEAP32[$__dp>>2] = $62;
  $63 = HEAP32[$29>>2]|0;
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (FUNCTION_TABLE_ii[$65 & 127]($29)|0);
  HEAP32[$__ts>>2] = $66;
  $67 = HEAP32[$29>>2]|0;
  $68 = (($67) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vii[$69 & 63]($4,$29);
  $70 = HEAP8[$__grp]|0;
  $71 = $70 & 1;
  $72 = ($71<<24>>24)==(0);
  if ($72) {
   $76 = (($__grp) + 1|0);
   HEAP8[$76] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $73 = (($__grp) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   HEAP8[$74] = 0;
   $75 = (($__grp) + 4|0);
   HEAP32[$75>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $77 = HEAP32[$29>>2]|0;
  $78 = (($77) + 24|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 63]($5,$29);
  $80 = HEAP8[$__sym]|0;
  $81 = $80 & 1;
  $82 = ($81<<24>>24)==(0);
  if ($82) {
   $86 = (($__sym) + 4|0);
   HEAP32[$86>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $83 = (($__sym) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   HEAP32[$84>>2] = 0;
   $85 = (($__sym) + 4|0);
   HEAP32[$85>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $87 = HEAP32[$29>>2]|0;
  $88 = (($87) + 36|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 127]($29)|0);
  $storemerge = $90;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $91 = HEAP32[6384>>2]|0;
  $92 = ($91|0)==(-1);
  if (!($92)) {
   HEAP32[$__p$i$i$i$i8>>2] = 6384;
   $93 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$93>>2] = (123);
   $94 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$94>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(6384,$__p$i$i$i$i8,124);
  }
  $95 = HEAP32[((6384 + 4|0))>>2]|0;
  $96 = (($95) + -1)|0;
  $97 = (($12) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($12) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $98;
  $102 = $100;
  $103 = (($101) - ($102))|0;
  $104 = $103 >> 2;
  $105 = ($104>>>0)>($96>>>0);
  if (!($105)) {
   $109 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw(($109|0),(14840|0),(112|0));
   // unreachable;
  }
  $106 = (($100) + ($96<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0|0);
  if ($108) {
   $109 = (___cxa_allocate_exception(4)|0);
   __ZNSt8bad_castC2Ev($109);
   ___cxa_throw(($109|0),(14840|0),(112|0));
   // unreachable;
  }
  $110 = HEAP32[$107>>2]|0;
  if ($__neg) {
   $111 = (($110) + 44|0);
   $112 = HEAP32[$111>>2]|0;
   FUNCTION_TABLE_vii[$112 & 63]($6,$107);
   $113 = HEAP32[$6>>2]|0;
   HEAP8[$__pat]=$113&255;HEAP8[$__pat+1|0]=($113>>8)&255;HEAP8[$__pat+2|0]=($113>>16)&255;HEAP8[$__pat+3|0]=$113>>24;
   $114 = HEAP32[$107>>2]|0;
   $115 = (($114) + 32|0);
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vii[$116 & 63]($7,$107);
   $117 = HEAP8[$__sn]|0;
   $118 = $117 & 1;
   $119 = ($118<<24>>24)==(0);
   if ($119) {
    $123 = (($__sn) + 4|0);
    HEAP32[$123>>2] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $120 = (($__sn) + 8|0);
    $121 = HEAP32[$120>>2]|0;
    HEAP32[$121>>2] = 0;
    $122 = (($__sn) + 4|0);
    HEAP32[$122>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  } else {
   $124 = (($110) + 40|0);
   $125 = HEAP32[$124>>2]|0;
   FUNCTION_TABLE_vii[$125 & 63]($8,$107);
   $126 = HEAP32[$8>>2]|0;
   HEAP8[$__pat]=$126&255;HEAP8[$__pat+1|0]=($126>>8)&255;HEAP8[$__pat+2|0]=($126>>16)&255;HEAP8[$__pat+3|0]=$126>>24;
   $127 = HEAP32[$107>>2]|0;
   $128 = (($127) + 28|0);
   $129 = HEAP32[$128>>2]|0;
   FUNCTION_TABLE_vii[$129 & 63]($9,$107);
   $130 = HEAP8[$__sn]|0;
   $131 = $130 & 1;
   $132 = ($131<<24>>24)==(0);
   if ($132) {
    $136 = (($__sn) + 4|0);
    HEAP32[$136>>2] = 0;
    HEAP8[$__sn] = 0;
   } else {
    $133 = (($__sn) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP32[$134>>2] = 0;
    $135 = (($__sn) + 4|0);
    HEAP32[$135>>2] = 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  }
  $137 = HEAP32[$107>>2]|0;
  $138 = (($137) + 12|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (FUNCTION_TABLE_ii[$139 & 127]($107)|0);
  HEAP32[$__dp>>2] = $140;
  $141 = HEAP32[$107>>2]|0;
  $142 = (($141) + 16|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (FUNCTION_TABLE_ii[$143 & 127]($107)|0);
  HEAP32[$__ts>>2] = $144;
  $145 = HEAP32[$107>>2]|0;
  $146 = (($145) + 20|0);
  $147 = HEAP32[$146>>2]|0;
  FUNCTION_TABLE_vii[$147 & 63]($10,$107);
  $148 = HEAP8[$__grp]|0;
  $149 = $148 & 1;
  $150 = ($149<<24>>24)==(0);
  if ($150) {
   $154 = (($__grp) + 1|0);
   HEAP8[$154] = 0;
   HEAP8[$__grp] = 0;
  } else {
   $151 = (($__grp) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   HEAP8[$152] = 0;
   $153 = (($__grp) + 4|0);
   HEAP32[$153>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $155 = HEAP32[$107>>2]|0;
  $156 = (($155) + 24|0);
  $157 = HEAP32[$156>>2]|0;
  FUNCTION_TABLE_vii[$157 & 63]($11,$107);
  $158 = HEAP8[$__sym]|0;
  $159 = $158 & 1;
  $160 = ($159<<24>>24)==(0);
  if ($160) {
   $164 = (($__sym) + 4|0);
   HEAP32[$164>>2] = 0;
   HEAP8[$__sym] = 0;
  } else {
   $161 = (($__sym) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   HEAP32[$162>>2] = 0;
   $163 = (($__sym) + 4|0);
   HEAP32[$163>>2] = 0;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $165 = HEAP32[$107>>2]|0;
  $166 = (($165) + 36|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_ii[$167 & 127]($107)|0);
  $storemerge = $168;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0;
 var $__f$038 = 0, $__f$145 = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0, $uglygep$i$i = 0;
 var $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$058)|0);
  $11 = HEAP8[$10]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 3:  {
   $21 = HEAP8[$__sn]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$059;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$059;
   }
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $brmerge = $40 | $3;
   if ($brmerge) {
    $$2 = $$059;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($47|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i13 = $47;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i14 = (($47) + ($$sum33<<2)|0);
     $51 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep$i$i14) + ($51)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $52 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $49;$54 = $47;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i19>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = ($55|0)==($46|0);
      if ($56) {
       break;
      }
      $57 = (($$01$i$i19) + 4|0);
      $$01$i$i19 = $57;$54 = $55;
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($58<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$059;
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 15]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$059;
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$059) + 4|0);
   $$$0 = $__neg ? $60 : $$059;
   $61 = ($$$0>>>0)<($__de>>>0);
   L33: do {
    if ($61) {
     $__d$034 = $$$0;
     while(1) {
      $64 = HEAP32[$__d$034>>2]|0;
      $65 = HEAP32[$__ct>>2]|0;
      $66 = (($65) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_iiii[$67 & 31]($__ct,2048,$64)|0);
      $63 = (($__d$034) + 4|0);
      if (!($68)) {
       $__d$0$lcssa = $__d$034;
       break L33;
      }
      $62 = ($63>>>0)<($__de>>>0);
      if ($62) {
       $__d$034 = $63;
      } else {
       $__d$0$lcssa = $63;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $70 = (($__d$137) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$038) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$137 = $70;$__f$038 = $74;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $72;
     if ($76) {
      $__d$1$lcssa79 = $70;$__f$0$lcssa77 = $74;
      label = 34;
     } else {
      $77 = HEAP32[$__me>>2]|0;
      $78 = (($77) + 4|0);
      HEAP32[$__me>>2] = $78;
      $$lcssa44 = $77;$__d$1$lcssa7880 = $70;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $79 = HEAP32[$__ct>>2]|0;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$81 & 15]($__ct,48)|0);
     $83 = ($__f$0$lcssa77|0)>(0);
     $84 = HEAP32[$__me>>2]|0;
     $85 = (($84) + 4|0);
     HEAP32[$__me>>2] = $85;
     if ($83) {
      $86 = $84;$90 = $85;$__f$145 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$86>>2] = $82;
       $87 = (($__f$145) + -1)|0;
       $88 = ($87|0)>(0);
       $89 = (($90) + 4|0);
       if ($88) {
        $86$phi = $90;$90 = $89;$__f$145 = $87;$86 = $86$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($84) + ($$sum75<<2)|0);
      $scevgep70 = (($84) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa44 = $84;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa44>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $91 = ($__d$2|0)==($$$0|0);
   if ($91) {
    $92 = HEAP32[$__ct>>2]|0;
    $93 = (($92) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (FUNCTION_TABLE_iii[$94 & 15]($__ct,48)|0);
    $96 = HEAP32[$__me>>2]|0;
    $97 = (($96) + 4|0);
    HEAP32[$__me>>2] = $97;
    HEAP32[$96>>2] = $95;
    $139 = $97;
   } else {
    $98 = HEAP8[$__grp]|0;
    $99 = $98 & 1;
    $100 = ($99<<24>>24)==(0);
    if ($100) {
     $102 = $98&255;
     $103 = $102 >>> 1;
     $105 = $103;
    } else {
     $101 = HEAP32[$9>>2]|0;
     $105 = $101;
    }
    $104 = ($105|0)==(0);
    if ($104) {
     $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
    } else {
     if ($100) {
      $108 = $7;
     } else {
      $106 = HEAP32[$8>>2]|0;
      $108 = $106;
     }
     $107 = HEAP8[$108]|0;
     $109 = $107 << 24 >> 24;
     $__d$353 = $__d$2;$__gl$056 = $109;$__ig$055 = 0;$__ng$054 = 0;
    }
    while(1) {
     $110 = ($__ng$054|0)==($__gl$056|0);
     $111 = HEAP32[$__me>>2]|0;
     if ($110) {
      $112 = (($111) + 4|0);
      HEAP32[$__me>>2] = $112;
      HEAP32[$111>>2] = $__ts;
      $113 = (($__ig$055) + 1)|0;
      $114 = HEAP8[$__grp]|0;
      $115 = $114 & 1;
      $116 = ($115<<24>>24)==(0);
      if ($116) {
       $118 = $114&255;
       $119 = $118 >>> 1;
       $121 = $119;
      } else {
       $117 = HEAP32[$9>>2]|0;
       $121 = $117;
      }
      $120 = ($113>>>0)<($121>>>0);
      if ($120) {
       if ($116) {
        $124 = $7;
       } else {
        $122 = HEAP32[$8>>2]|0;
        $124 = $122;
       }
       $123 = (($124) + ($113)|0);
       $125 = HEAP8[$123]|0;
       $126 = ($125<<24>>24)==(127);
       if ($126) {
        $135 = $112;$__gl$1 = -1;$__ig$1 = $113;$__ng$1 = 0;
       } else {
        if ($116) {
         $129 = $7;
        } else {
         $127 = HEAP32[$8>>2]|0;
         $129 = $127;
        }
        $128 = (($129) + ($113)|0);
        $130 = HEAP8[$128]|0;
        $131 = $130 << 24 >> 24;
        $135 = $112;$__gl$1 = $131;$__ig$1 = $113;$__ng$1 = 0;
       }
      } else {
       $135 = $112;$__gl$1 = $__gl$056;$__ig$1 = $113;$__ng$1 = 0;
      }
     } else {
      $135 = $111;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
     }
     $132 = (($__d$353) + -4|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($135) + 4|0);
     HEAP32[$__me>>2] = $134;
     HEAP32[$135>>2] = $133;
     $136 = (($__ng$1) + 1)|0;
     $137 = ($132|0)==($$$0|0);
     if ($137) {
      $139 = $134;
      break;
     } else {
      $__d$353 = $132;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $136;
     }
    }
   }
   $138 = ($59|0)==($139|0);
   if ($138) {
    $$2 = $$$0;
   } else {
    $140 = (($139) + -4|0);
    $141 = ($140>>>0)>($59>>>0);
    if ($141) {
     $$012$i$i = $59;$144 = $140;
     while(1) {
      $142 = HEAP32[$$012$i$i>>2]|0;
      $143 = HEAP32[$144>>2]|0;
      HEAP32[$$012$i$i>>2] = $143;
      HEAP32[$144>>2] = $142;
      $145 = (($$012$i$i) + 4|0);
      $146 = (($144) + -4|0);
      $147 = ($145>>>0)<($146>>>0);
      if ($147) {
       $$012$i$i = $145;$144 = $146;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$059;
  }
  }
  $148 = (($__p$058) + 1)|0;
  $exitcond = ($148|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $148;
  }
 }
 $149 = HEAP8[$__sn]|0;
 $150 = $149 & 1;
 $151 = ($150<<24>>24)==(0);
 if ($151) {
  $153 = $149&255;
  $154 = $153 >>> 1;
  $156 = $154;
 } else {
  $152 = HEAP32[$0>>2]|0;
  $156 = $152;
 }
 $155 = ($156>>>0)>(1);
 if ($155) {
  if ($151) {
   $159 = $149&255;
   $160 = $159 >>> 1;
   $$pn = $0;$163 = $160;
  } else {
   $157 = HEAP32[$1>>2]|0;
   $158 = HEAP32[$0>>2]|0;
   $$pn = $157;$163 = $158;
  }
  $161 = (($$pn) + 4|0);
  $162 = (($$pn) + ($163<<2)|0);
  $164 = HEAP32[$__me>>2]|0;
  $165 = ($161|0)==($162|0);
  if ($165) {
   $$0$lcssa$i$i = $164;
  } else {
   $$promoted4$i$i = $161;
   $$sum = (($163) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $166 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep$i$i) + ($166)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $167 = $uglygep5$i$i >>> 2;
   $$01$i$i = $164;$169 = $161;
   while(1) {
    $168 = HEAP32[$169>>2]|0;
    HEAP32[$$01$i$i>>2] = $168;
    $170 = (($169) + 4|0);
    $171 = (($$01$i$i) + 4|0);
    $172 = ($170|0)==($162|0);
    if ($172) {
     break;
    } else {
     $$01$i$i = $171;$169 = $170;
    }
   }
   $173 = (($167) + 1)|0;
   $scevgep6$i$i = (($164) + ($173<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if ((($174|0) == 16)) {
  STACKTOP = sp;return;
 } else if ((($174|0) == 32)) {
  $175 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $175;
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $$byval_copy = sp;
 $__loc = sp + 12|0;
 $__pat = sp + 40|0;
 $__dp = sp + 44|0;
 $__ts = sp + 48|0;
 $__grp = sp + 16|0;
 $__sym = sp + 28|0;
 $__sn = sp + 52|0;
 $__fd = sp + 64|0;
 $__mbuf = sp + 72|0;
 $__mi = sp + 472|0;
 $__me = sp + 476|0;
 $0 = sp + 480|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = HEAP32[$__loc>>2]|0;
 $2 = HEAP32[6872>>2]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$$byval_copy>>2] = 6872;
  $4 = (($$byval_copy) + 4|0);
  HEAP32[$4>>2] = (123);
  $5 = (($$byval_copy) + 8|0);
  HEAP32[$5>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$$byval_copy,124);
 }
 $6 = HEAP32[((6872 + 4|0))>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($1) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $21 = HEAP8[$__digits]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $26 = $21&255;
  $27 = $26 >>> 1;
  $29 = $27;
 } else {
  $24 = (($__digits) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $29 = $25;
 }
 $28 = ($29|0)==(0);
 if ($28) {
  $40 = 0;
 } else {
  if ($23) {
   $32 = (($__digits) + 4|0);
   $34 = $32;
  } else {
   $30 = (($__digits) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $34 = $31;
  }
  $33 = HEAP32[$34>>2]|0;
  $35 = HEAP32[$18>>2]|0;
  $36 = (($35) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 15]($18,45)|0);
  $39 = ($33|0)==($38|0);
  $40 = $39;
 }
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$40,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $41 = HEAP8[$__digits]|0;
 $42 = $41 & 1;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $46 = $41&255;
  $47 = $46 >>> 1;
  $50 = $47;
 } else {
  $44 = (($__digits) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $50 = $45;
 }
 $48 = HEAP32[$__fd>>2]|0;
 $49 = ($50|0)>($48|0);
 if ($49) {
  if ($43) {
   $53 = $41&255;
   $54 = $53 >>> 1;
   $56 = $54;
  } else {
   $51 = (($__digits) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $56 = $52;
  }
  $55 = (($56) - ($48))|0;
  $57 = $55 << 1;
  $58 = HEAP8[$__sn]|0;
  $59 = $58 & 1;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   $63 = $58&255;
   $64 = $63 >>> 1;
   $74 = $64;
  } else {
   $61 = (($__sn) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $74 = $62;
  }
  $65 = HEAP8[$__sym]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   $70 = $65&255;
   $71 = $70 >>> 1;
   $76 = $71;
  } else {
   $68 = (($__sym) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $76 = $69;
  }
  $72 = $57 | 1;
  $73 = (($74) + ($72))|0;
  $75 = (($73) + ($76))|0;
  $$pn = $75;
 } else {
  $77 = HEAP8[$__sn]|0;
  $78 = $77 & 1;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   $82 = $77&255;
   $83 = $82 >>> 1;
   $92 = $83;
  } else {
   $80 = (($__sn) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $92 = $81;
  }
  $84 = HEAP8[$__sym]|0;
  $85 = $84 & 1;
  $86 = ($85<<24>>24)==(0);
  if ($86) {
   $89 = $84&255;
   $90 = $89 >>> 1;
   $94 = $90;
  } else {
   $87 = (($__sym) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $94 = $88;
  }
  $91 = (($92) + 2)|0;
  $93 = (($91) + ($94))|0;
  $$pn = $93;
 }
 $95 = (($$pn) + ($48))|0;
 $96 = ($95>>>0)>(100);
 if ($96) {
  $97 = $95 << 2;
  $98 = (_malloc($97)|0);
  $99 = ($98|0)==(0|0);
  if ($99) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $120 = $98;$__mb$0 = $98;
  }
 } else {
  $120 = 0;$__mb$0 = $__mbuf;
 }
 $100 = (($__iob) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $41 & 1;
 $103 = ($102<<24>>24)==(0);
 if ($103) {
  $108 = (($__digits) + 4|0);
  $109 = $41&255;
  $110 = $109 >>> 1;
  $112 = $108;$113 = $110;
 } else {
  $104 = (($__digits) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($__digits) + 4|0);
  $107 = HEAP32[$106>>2]|0;
  $112 = $105;$113 = $107;
 }
 $111 = (($112) + ($113<<2)|0);
 $114 = HEAP32[$__dp>>2]|0;
 $115 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$101,$112,$111,$18,$40,$__pat,$114,$115,$__grp,$__sym,$__sn,$48);
 $116 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $116;
 $117 = HEAP32[$__mi>>2]|0;
 $118 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$117,$118,$__iob,$__fl);
 $119 = ($120|0)==(0|0);
 if ($119) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
  $121 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
  STACKTOP = sp;return;
 }
 _free($120);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $121 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01$i = 0, $$01$i7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 if ($14) {
  $$01$i7 = $15;
  while(1) {
   $20 = HEAP8[$$01$i7]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$20);
   $21 = (($$01$i7) + 1|0);
   $exitcond$i8 = ($21|0)==($11|0);
   if ($exitcond$i8) {
    break;
   } else {
    $$01$i7 = $21;
   }
  }
  $$pre = HEAP8[$__ndflt]|0;
  $phitmp = $$pre & 1;
  $phitmp18 = ($phitmp<<24>>24)==(0);
  $22 = ($__c|0)==(-1);
  $23 = $__c << 1;
  $24 = $23;
  $25 = $22 ? (-1) : $24;
  if ($phitmp18) {
   $37 = $25;
   label = 9;
  } else {
   $26 = (($__ndflt) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $29 = $25;$30 = $27;
  }
 } else {
  $16 = ($__c|0)==(-1);
  $17 = $__c << 1;
  $18 = $17;
  $19 = $16 ? (-1) : $18;
  $37 = $19;
  label = 9;
 }
 if ((label|0) == 9) {
  $28 = (($__ndflt) + 1|0);
  $29 = $37;$30 = $28;
 }
 $31 = (_catgets(($29|0),($__set|0),($__msgid|0),($30|0))|0);
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $32 = (_strlen(($31|0))|0);
 $33 = (($31) + ($32)|0);
 $34 = ($32|0)>(0);
 if ($34) {
  $$01$i = $31;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 while(1) {
  $35 = HEAP8[$$01$i]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$35);
  $36 = (($$01$i) + 1|0);
  $exitcond$i = ($36|0)==($33|0);
  if ($exitcond$i) {
   break;
  } else {
   $$01$i = $36;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__bn$i14 = 0, $__buf$i13 = 0, $__mb$i11 = 0, $__ndflt = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__mb$i11 = sp;
 $__buf$i13 = sp + 40|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 172|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 32|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((8528 + 8|0));
 $3 = HEAP8[$__dflt]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$04$i16 = $22;$25 = ((8528 + 8|0));
   while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    $27 = (FUNCTION_TABLE_iiiiiiiii[$26 & 15]($0,$__mb$i11,$$04$i16,$14,$__wn$i,$__buf$i13,$23,$__bn$i14)|0);
    $28 = ($27|0)==(2);
    $29 = HEAP32[$__wn$i>>2]|0;
    $30 = ($29|0)==($$04$i16|0);
    $or$cond2$i17 = $28 | $30;
    if ($or$cond2$i17) {
     break;
    }
    $31 = HEAP32[$__bn$i14>>2]|0;
    $32 = ($__buf$i13>>>0)<($31>>>0);
    if ($32) {
     $__p$03$i20 = $__buf$i13;
     while(1) {
      $33 = HEAP8[$__p$03$i20]|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$33);
      $34 = (($__p$03$i20) + 1|0);
      $35 = HEAP32[$__bn$i14>>2]|0;
      $36 = ($34>>>0)<($35>>>0);
      if ($36) {
       $__p$03$i20 = $34;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $38 = $$pre$i21;
    } else {
     $38 = $29;
    }
    $37 = ($38>>>0)<($14>>>0);
    if (!($37)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$04$i16 = $38;$25 = $$pre;
   }
   __ZNSt3__121__throw_runtime_errorEPKc(7760);
   // unreachable;
  }
 } while(0);
 $39 = ($__c|0)==(-1);
 $40 = $__c << 1;
 $41 = $40;
 $42 = $39 ? (-1) : $41;
 $43 = HEAP8[$__ndflt]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = (($__ndflt) + 1|0);
  $49 = $48;
 } else {
  $46 = (($__ndflt) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $49 = $47;
 }
 $50 = (_catgets(($42|0),($__set|0),($__msgid|0),($49|0))|0);
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $51 = (($1) + 4|0);
 HEAP32[$51>>2] = 0;
 HEAP32[$1>>2] = ((8632 + 8|0));
 $52 = (_strlen(($50|0))|0);
 $53 = (($50) + ($52)|0);
 $54 = $__mb$i11;
 $55 = $54;
 HEAP32[$55>>2] = 0;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = 0;
 $58 = ($52|0)>(0);
 if (!($58)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $59 = $53;
 $60 = (($__buf$i13) + 128|0);
 $$04$i = $50;$62 = ((8632 + 8|0));
 while(1) {
  HEAP32[$__wn$i>>2] = $$04$i;
  $61 = (($62) + 16|0);
  $63 = HEAP32[$61>>2]|0;
  $64 = $$04$i;
  $65 = (($59) - ($64))|0;
  $66 = ($65|0)>(32);
  $67 = (($$04$i) + 32|0);
  $68 = $66 ? $67 : $53;
  $69 = (FUNCTION_TABLE_iiiiiiiii[$63 & 15]($1,$__mb$i11,$$04$i,$68,$__wn$i,$__buf$i13,$60,$__bn$i14)|0);
  $70 = ($69|0)==(2);
  $71 = HEAP32[$__wn$i>>2]|0;
  $72 = ($71|0)==($$04$i|0);
  $or$cond2$i = $70 | $72;
  if ($or$cond2$i) {
   label = 20;
   break;
  }
  $73 = HEAP32[$__bn$i14>>2]|0;
  $74 = ($__buf$i13>>>0)<($73>>>0);
  if ($74) {
   $__p$03$i = $__buf$i13;
   while(1) {
    $75 = HEAP32[$__p$03$i>>2]|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result,$75);
    $76 = (($__p$03$i) + 4|0);
    $77 = HEAP32[$__bn$i14>>2]|0;
    $78 = ($76>>>0)<($77>>>0);
    if ($78) {
     $__p$03$i = $76;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__wn$i>>2]|0;
   $80 = $$pre$i;
  } else {
   $80 = $71;
  }
  $79 = ($80>>>0)<($53>>>0);
  if (!($79)) {
   label = 25;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$04$i = $80;$62 = $$pre44;
 }
 if ((label|0) == 20) {
  __ZNSt3__121__throw_runtime_errorEPKc(7760);
  // unreachable;
 }
 else if ((label|0) == 25) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6960 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[6776]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = (___cxa_guard_acquire((6776|0))|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $6;
   ___cxa_guard_release((6776|0));
  }
 }
 $7 = HEAP32[6768>>2]|0;
 $8 = ($1|0)==($7|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 _freelocale(($9|0));
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __ZNSt11logic_errorC2EPKc($0,6760);
 HEAP32[$0>>2] = ((3800 + 8|0));
 ___cxa_throw(($0|0),(3848|0),(20|0));
 // unreachable;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0$i$i = 0, $$pre1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__p$i$i$i113 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i$i113 = sp;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6792 + 8|0));
 $2 = (($this) + 8|0);
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $5 = (($this) + 136|0);
 $6 = (($this) + 24|0);
 HEAP8[$5] = 1;
 HEAP32[$3>>2] = $6;
 HEAP32[$2>>2] = $6;
 HEAP32[$4>>2] = $5;
 $$0$i$i = 28;$8 = $6;
 while(1) {
  $7 = ($8|0)==(0|0);
  if ($7) {
   $10 = 0;
  } else {
   HEAP32[$8>>2] = 0;
   $$pre1$i$i = HEAP32[$3>>2]|0;
   $10 = $$pre1$i$i;
  }
  $9 = (($10) + 4|0);
  HEAP32[$3>>2] = $9;
  $11 = (($$0$i$i) + -1)|0;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i$i = $11;$8 = $9;
  }
 }
 $13 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($13,6784,1);
 $14 = HEAP32[$2>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = ($15|0)==($14|0);
 if (!($16)) {
  $__new_last2$i$i$i = $14;
  $scevgep$i$i$i = (($15) + -4|0);
  $17 = (0 - ($__new_last2$i$i$i))|0;
  $uglygep$i$i$i = (($scevgep$i$i$i) + ($17)|0);
  $uglygep3$i$i$i = $uglygep$i$i$i;
  $18 = $uglygep3$i$i$i >>> 2;
  $19 = $18 ^ -1;
  $scevgep4$i$i$i = (($15) + ($19<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 HEAP32[((11688 + 4|0))>>2] = 0;
 HEAP32[11688>>2] = ((5272 + 8|0));
 $20 = HEAP32[5304>>2]|0;
 $21 = ($20|0)==(-1);
 if (!($21)) {
  HEAP32[$__p$i$i$i113>>2] = 5304;
  $22 = (($__p$i$i$i113) + 4|0);
  HEAP32[$22>>2] = (123);
  $23 = (($__p$i$i$i113) + 8|0);
  HEAP32[$23>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5304,$__p$i$i$i113,124);
 }
 $24 = HEAP32[((5304 + 4|0))>>2]|0;
 $25 = (($24) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11688,$25);
 HEAP32[((11680 + 4|0))>>2] = 0;
 HEAP32[11680>>2] = ((5312 + 8|0));
 $26 = HEAP32[5344>>2]|0;
 $27 = ($26|0)==(-1);
 if (!($27)) {
  HEAP32[$__p$i$i$i113>>2] = 5344;
  $28 = (($__p$i$i$i113) + 4|0);
  HEAP32[$28>>2] = (123);
  $29 = (($__p$i$i$i113) + 8|0);
  HEAP32[$29>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5344,$__p$i$i$i113,124);
 }
 $30 = HEAP32[((5344 + 4|0))>>2]|0;
 $31 = (($30) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11680,$31);
 HEAP32[((11664 + 4|0))>>2] = 0;
 HEAP32[11664>>2] = ((6888 + 8|0));
 HEAP32[((11664 + 8|0))>>2] = 0;
 HEAP8[((11664 + 12|0))] = 0;
 $32 = (___ctype_b_loc()|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[((11664 + 8|0))>>2] = $33;
 $34 = HEAP32[6880>>2]|0;
 $35 = ($34|0)==(-1);
 if (!($35)) {
  HEAP32[$__p$i$i$i113>>2] = 6880;
  $36 = (($__p$i$i$i113) + 4|0);
  HEAP32[$36>>2] = (123);
  $37 = (($__p$i$i$i113) + 8|0);
  HEAP32[$37>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6880,$__p$i$i$i113,124);
 }
 $38 = HEAP32[((6880 + 4|0))>>2]|0;
 $39 = (($38) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11664,$39);
 HEAP32[((11656 + 4|0))>>2] = 0;
 HEAP32[11656>>2] = ((7848 + 8|0));
 $40 = HEAP32[6872>>2]|0;
 $41 = ($40|0)==(-1);
 if (!($41)) {
  HEAP32[$__p$i$i$i113>>2] = 6872;
  $42 = (($__p$i$i$i113) + 4|0);
  HEAP32[$42>>2] = (123);
  $43 = (($__p$i$i$i113) + 8|0);
  HEAP32[$43>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6872,$__p$i$i$i113,124);
 }
 $44 = HEAP32[((6872 + 4|0))>>2]|0;
 $45 = (($44) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11656,$45);
 HEAP32[((11648 + 4|0))>>2] = 0;
 HEAP32[11648>>2] = ((8064 + 8|0));
 $46 = HEAP32[6944>>2]|0;
 $47 = ($46|0)==(-1);
 if (!($47)) {
  HEAP32[$__p$i$i$i113>>2] = 6944;
  $48 = (($__p$i$i$i113) + 4|0);
  HEAP32[$48>>2] = (123);
  $49 = (($__p$i$i$i113) + 8|0);
  HEAP32[$49>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6944,$__p$i$i$i113,124);
 }
 $50 = HEAP32[((6944 + 4|0))>>2]|0;
 $51 = (($50) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11648,$51);
 HEAP32[((11632 + 4|0))>>2] = 0;
 HEAP32[11632>>2] = ((6960 + 8|0));
 $52 = HEAP8[6776]|0;
 $53 = ($52<<24>>24)==(0);
 if ($53) {
  $54 = (___cxa_guard_acquire((6776|0))|0);
  $55 = ($54|0)==(0);
  if (!($55)) {
   $56 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $56;
   ___cxa_guard_release((6776|0));
  }
 }
 $57 = HEAP32[6768>>2]|0;
 HEAP32[((11632 + 8|0))>>2] = $57;
 $58 = HEAP32[6952>>2]|0;
 $59 = ($58|0)==(-1);
 if (!($59)) {
  HEAP32[$__p$i$i$i113>>2] = 6952;
  $60 = (($__p$i$i$i113) + 4|0);
  HEAP32[$60>>2] = (123);
  $61 = (($__p$i$i$i113) + 8|0);
  HEAP32[$61>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6952,$__p$i$i$i113,124);
 }
 $62 = HEAP32[((6952 + 4|0))>>2]|0;
 $63 = (($62) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11632,$63);
 HEAP32[((11624 + 4|0))>>2] = 0;
 HEAP32[11624>>2] = ((8288 + 8|0));
 $64 = HEAP32[7008>>2]|0;
 $65 = ($64|0)==(-1);
 if (!($65)) {
  HEAP32[$__p$i$i$i113>>2] = 7008;
  $66 = (($__p$i$i$i113) + 4|0);
  HEAP32[$66>>2] = (123);
  $67 = (($__p$i$i$i113) + 8|0);
  HEAP32[$67>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7008,$__p$i$i$i113,124);
 }
 $68 = HEAP32[((7008 + 4|0))>>2]|0;
 $69 = (($68) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11624,$69);
 HEAP32[((11616 + 4|0))>>2] = 0;
 HEAP32[11616>>2] = ((8408 + 8|0));
 $70 = HEAP32[7016>>2]|0;
 $71 = ($70|0)==(-1);
 if (!($71)) {
  HEAP32[$__p$i$i$i113>>2] = 7016;
  $72 = (($__p$i$i$i113) + 4|0);
  HEAP32[$72>>2] = (123);
  $73 = (($__p$i$i$i113) + 8|0);
  HEAP32[$73>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7016,$__p$i$i$i113,124);
 }
 $74 = HEAP32[((7016 + 4|0))>>2]|0;
 $75 = (($74) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11616,$75);
 HEAP32[((11592 + 4|0))>>2] = 0;
 HEAP32[11592>>2] = ((7040 + 8|0));
 HEAP8[((11592 + 8|0))] = 46;
 HEAP8[((11592 + 9|0))] = 44;
 ;HEAP32[((11592 + 12|0))+0>>2]=0|0;HEAP32[((11592 + 12|0))+4>>2]=0|0;HEAP32[((11592 + 12|0))+8>>2]=0|0;
 $76 = HEAP32[7024>>2]|0;
 $77 = ($76|0)==(-1);
 if (!($77)) {
  HEAP32[$__p$i$i$i113>>2] = 7024;
  $78 = (($__p$i$i$i113) + 4|0);
  HEAP32[$78>>2] = (123);
  $79 = (($__p$i$i$i113) + 8|0);
  HEAP32[$79>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7024,$__p$i$i$i113,124);
 }
 $80 = HEAP32[((7024 + 4|0))>>2]|0;
 $81 = (($80) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11592,$81);
 HEAP32[((11560 + 4|0))>>2] = 0;
 HEAP32[11560>>2] = ((7080 + 8|0));
 HEAP32[((11560 + 8|0))>>2] = 46;
 HEAP32[((11560 + 12|0))>>2] = 44;
 ;HEAP32[((11560 + 16|0))+0>>2]=0|0;HEAP32[((11560 + 16|0))+4>>2]=0|0;HEAP32[((11560 + 16|0))+8>>2]=0|0;
 $82 = HEAP32[7032>>2]|0;
 $83 = ($82|0)==(-1);
 if (!($83)) {
  HEAP32[$__p$i$i$i113>>2] = 7032;
  $84 = (($__p$i$i$i113) + 4|0);
  HEAP32[$84>>2] = (123);
  $85 = (($__p$i$i$i113) + 8|0);
  HEAP32[$85>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(7032,$__p$i$i$i113,124);
 }
 $86 = HEAP32[((7032 + 4|0))>>2]|0;
 $87 = (($86) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11560,$87);
 HEAP32[((11552 + 4|0))>>2] = 0;
 HEAP32[11552>>2] = ((5352 + 8|0));
 $88 = HEAP32[5416>>2]|0;
 $89 = ($88|0)==(-1);
 if (!($89)) {
  HEAP32[$__p$i$i$i113>>2] = 5416;
  $90 = (($__p$i$i$i113) + 4|0);
  HEAP32[$90>>2] = (123);
  $91 = (($__p$i$i$i113) + 8|0);
  HEAP32[$91>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5416,$__p$i$i$i113,124);
 }
 $92 = HEAP32[((5416 + 4|0))>>2]|0;
 $93 = (($92) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11552,$93);
 HEAP32[((11544 + 4|0))>>2] = 0;
 HEAP32[11544>>2] = ((5472 + 8|0));
 $94 = HEAP32[5536>>2]|0;
 $95 = ($94|0)==(-1);
 if (!($95)) {
  HEAP32[$__p$i$i$i113>>2] = 5536;
  $96 = (($__p$i$i$i113) + 4|0);
  HEAP32[$96>>2] = (123);
  $97 = (($__p$i$i$i113) + 8|0);
  HEAP32[$97>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5536,$__p$i$i$i113,124);
 }
 $98 = HEAP32[((5536 + 4|0))>>2]|0;
 $99 = (($98) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11544,$99);
 HEAP32[((11536 + 4|0))>>2] = 0;
 HEAP32[11536>>2] = ((5544 + 8|0));
 $100 = HEAP32[5600>>2]|0;
 $101 = ($100|0)==(-1);
 if (!($101)) {
  HEAP32[$__p$i$i$i113>>2] = 5600;
  $102 = (($__p$i$i$i113) + 4|0);
  HEAP32[$102>>2] = (123);
  $103 = (($__p$i$i$i113) + 8|0);
  HEAP32[$103>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5600,$__p$i$i$i113,124);
 }
 $104 = HEAP32[((5600 + 4|0))>>2]|0;
 $105 = (($104) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11536,$105);
 HEAP32[((11528 + 4|0))>>2] = 0;
 HEAP32[11528>>2] = ((5608 + 8|0));
 $106 = HEAP32[5664>>2]|0;
 $107 = ($106|0)==(-1);
 if (!($107)) {
  HEAP32[$__p$i$i$i113>>2] = 5664;
  $108 = (($__p$i$i$i113) + 4|0);
  HEAP32[$108>>2] = (123);
  $109 = (($__p$i$i$i113) + 8|0);
  HEAP32[$109>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5664,$__p$i$i$i113,124);
 }
 $110 = HEAP32[((5664 + 4|0))>>2]|0;
 $111 = (($110) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11528,$111);
 HEAP32[((11520 + 4|0))>>2] = 0;
 HEAP32[11520>>2] = ((6200 + 8|0));
 $112 = HEAP32[6256>>2]|0;
 $113 = ($112|0)==(-1);
 if (!($113)) {
  HEAP32[$__p$i$i$i113>>2] = 6256;
  $114 = (($__p$i$i$i113) + 4|0);
  HEAP32[$114>>2] = (123);
  $115 = (($__p$i$i$i113) + 8|0);
  HEAP32[$115>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6256,$__p$i$i$i113,124);
 }
 $116 = HEAP32[((6256 + 4|0))>>2]|0;
 $117 = (($116) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11520,$117);
 HEAP32[((11512 + 4|0))>>2] = 0;
 HEAP32[11512>>2] = ((6264 + 8|0));
 $118 = HEAP32[6320>>2]|0;
 $119 = ($118|0)==(-1);
 if (!($119)) {
  HEAP32[$__p$i$i$i113>>2] = 6320;
  $120 = (($__p$i$i$i113) + 4|0);
  HEAP32[$120>>2] = (123);
  $121 = (($__p$i$i$i113) + 8|0);
  HEAP32[$121>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6320,$__p$i$i$i113,124);
 }
 $122 = HEAP32[((6320 + 4|0))>>2]|0;
 $123 = (($122) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11512,$123);
 HEAP32[((11504 + 4|0))>>2] = 0;
 HEAP32[11504>>2] = ((6328 + 8|0));
 $124 = HEAP32[6384>>2]|0;
 $125 = ($124|0)==(-1);
 if (!($125)) {
  HEAP32[$__p$i$i$i113>>2] = 6384;
  $126 = (($__p$i$i$i113) + 4|0);
  HEAP32[$126>>2] = (123);
  $127 = (($__p$i$i$i113) + 8|0);
  HEAP32[$127>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6384,$__p$i$i$i113,124);
 }
 $128 = HEAP32[((6384 + 4|0))>>2]|0;
 $129 = (($128) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11504,$129);
 HEAP32[((11496 + 4|0))>>2] = 0;
 HEAP32[11496>>2] = ((6392 + 8|0));
 $130 = HEAP32[6448>>2]|0;
 $131 = ($130|0)==(-1);
 if (!($131)) {
  HEAP32[$__p$i$i$i113>>2] = 6448;
  $132 = (($__p$i$i$i113) + 4|0);
  HEAP32[$132>>2] = (123);
  $133 = (($__p$i$i$i113) + 8|0);
  HEAP32[$133>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6448,$__p$i$i$i113,124);
 }
 $134 = HEAP32[((6448 + 4|0))>>2]|0;
 $135 = (($134) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11496,$135);
 HEAP32[((11488 + 4|0))>>2] = 0;
 HEAP32[11488>>2] = ((6456 + 8|0));
 $136 = HEAP32[6488>>2]|0;
 $137 = ($136|0)==(-1);
 if (!($137)) {
  HEAP32[$__p$i$i$i113>>2] = 6488;
  $138 = (($__p$i$i$i113) + 4|0);
  HEAP32[$138>>2] = (123);
  $139 = (($__p$i$i$i113) + 8|0);
  HEAP32[$139>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6488,$__p$i$i$i113,124);
 }
 $140 = HEAP32[((6488 + 4|0))>>2]|0;
 $141 = (($140) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11488,$141);
 HEAP32[((11480 + 4|0))>>2] = 0;
 HEAP32[11480>>2] = ((6536 + 8|0));
 $142 = HEAP32[6568>>2]|0;
 $143 = ($142|0)==(-1);
 if (!($143)) {
  HEAP32[$__p$i$i$i113>>2] = 6568;
  $144 = (($__p$i$i$i113) + 4|0);
  HEAP32[$144>>2] = (123);
  $145 = (($__p$i$i$i113) + 8|0);
  HEAP32[$145>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6568,$__p$i$i$i113,124);
 }
 $146 = HEAP32[((6568 + 4|0))>>2]|0;
 $147 = (($146) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11480,$147);
 HEAP32[((11472 + 4|0))>>2] = 0;
 HEAP32[11472>>2] = ((6592 + 8|0));
 $148 = HEAP32[6624>>2]|0;
 $149 = ($148|0)==(-1);
 if (!($149)) {
  HEAP32[$__p$i$i$i113>>2] = 6624;
  $150 = (($__p$i$i$i113) + 4|0);
  HEAP32[$150>>2] = (123);
  $151 = (($__p$i$i$i113) + 8|0);
  HEAP32[$151>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6624,$__p$i$i$i113,124);
 }
 $152 = HEAP32[((6624 + 4|0))>>2]|0;
 $153 = (($152) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11472,$153);
 HEAP32[((11464 + 4|0))>>2] = 0;
 HEAP32[11464>>2] = ((6640 + 8|0));
 $154 = HEAP32[6672>>2]|0;
 $155 = ($154|0)==(-1);
 if (!($155)) {
  HEAP32[$__p$i$i$i113>>2] = 6672;
  $156 = (($__p$i$i$i113) + 4|0);
  HEAP32[$156>>2] = (123);
  $157 = (($__p$i$i$i113) + 8|0);
  HEAP32[$157>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6672,$__p$i$i$i113,124);
 }
 $158 = HEAP32[((6672 + 4|0))>>2]|0;
 $159 = (($158) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11464,$159);
 HEAP32[((11448 + 4|0))>>2] = 0;
 HEAP32[11448>>2] = ((5688 + 8|0));
 HEAP32[((11448 + 8|0))>>2] = ((5688 + 56|0));
 $160 = HEAP32[5776>>2]|0;
 $161 = ($160|0)==(-1);
 if (!($161)) {
  HEAP32[$__p$i$i$i113>>2] = 5776;
  $162 = (($__p$i$i$i113) + 4|0);
  HEAP32[$162>>2] = (123);
  $163 = (($__p$i$i$i113) + 8|0);
  HEAP32[$163>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5776,$__p$i$i$i113,124);
 }
 $164 = HEAP32[((5776 + 4|0))>>2]|0;
 $165 = (($164) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11448,$165);
 HEAP32[((11432 + 4|0))>>2] = 0;
 HEAP32[11432>>2] = ((5840 + 8|0));
 HEAP32[((11432 + 8|0))>>2] = ((5840 + 56|0));
 $166 = HEAP32[5928>>2]|0;
 $167 = ($166|0)==(-1);
 if (!($167)) {
  HEAP32[$__p$i$i$i113>>2] = 5928;
  $168 = (($__p$i$i$i113) + 4|0);
  HEAP32[$168>>2] = (123);
  $169 = (($__p$i$i$i113) + 8|0);
  HEAP32[$169>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(5928,$__p$i$i$i113,124);
 }
 $170 = HEAP32[((5928 + 4|0))>>2]|0;
 $171 = (($170) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11432,$171);
 HEAP32[((11416 + 4|0))>>2] = 0;
 HEAP32[11416>>2] = ((7784 + 8|0));
 $172 = HEAP8[6776]|0;
 $173 = ($172<<24>>24)==(0);
 if ($173) {
  $174 = (___cxa_guard_acquire((6776|0))|0);
  $175 = ($174|0)==(0);
  if (!($175)) {
   $176 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $176;
   ___cxa_guard_release((6776|0));
  }
 }
 $177 = HEAP32[6768>>2]|0;
 HEAP32[((11416 + 8|0))>>2] = $177;
 HEAP32[11416>>2] = ((6136 + 8|0));
 $178 = HEAP32[6160>>2]|0;
 $179 = ($178|0)==(-1);
 if (!($179)) {
  HEAP32[$__p$i$i$i113>>2] = 6160;
  $180 = (($__p$i$i$i113) + 4|0);
  HEAP32[$180>>2] = (123);
  $181 = (($__p$i$i$i113) + 8|0);
  HEAP32[$181>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6160,$__p$i$i$i113,124);
 }
 $182 = HEAP32[((6160 + 4|0))>>2]|0;
 $183 = (($182) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11416,$183);
 HEAP32[((11400 + 4|0))>>2] = 0;
 HEAP32[11400>>2] = ((7784 + 8|0));
 $184 = HEAP8[6776]|0;
 $185 = ($184<<24>>24)==(0);
 if ($185) {
  $186 = (___cxa_guard_acquire((6776|0))|0);
  $187 = ($186|0)==(0);
  if (!($187)) {
   $188 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $188;
   ___cxa_guard_release((6776|0));
  }
 }
 $189 = HEAP32[6768>>2]|0;
 HEAP32[((11400 + 8|0))>>2] = $189;
 HEAP32[11400>>2] = ((6168 + 8|0));
 $190 = HEAP32[6192>>2]|0;
 $191 = ($190|0)==(-1);
 if (!($191)) {
  HEAP32[$__p$i$i$i113>>2] = 6192;
  $192 = (($__p$i$i$i113) + 4|0);
  HEAP32[$192>>2] = (123);
  $193 = (($__p$i$i$i113) + 8|0);
  HEAP32[$193>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6192,$__p$i$i$i113,124);
 }
 $194 = HEAP32[((6192 + 4|0))>>2]|0;
 $195 = (($194) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11400,$195);
 HEAP32[((11392 + 4|0))>>2] = 0;
 HEAP32[11392>>2] = ((6680 + 8|0));
 $196 = HEAP32[6712>>2]|0;
 $197 = ($196|0)==(-1);
 if (!($197)) {
  HEAP32[$__p$i$i$i113>>2] = 6712;
  $198 = (($__p$i$i$i113) + 4|0);
  HEAP32[$198>>2] = (123);
  $199 = (($__p$i$i$i113) + 8|0);
  HEAP32[$199>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(6712,$__p$i$i$i113,124);
 }
 $200 = HEAP32[((6712 + 4|0))>>2]|0;
 $201 = (($200) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11392,$201);
 HEAP32[((11384 + 4|0))>>2] = 0;
 HEAP32[11384>>2] = ((6720 + 8|0));
 $202 = HEAP32[6752>>2]|0;
 $203 = ($202|0)==(-1);
 if ($203) {
  $206 = HEAP32[((6752 + 4|0))>>2]|0;
  $207 = (($206) + -1)|0;
  __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11384,$207);
  STACKTOP = sp;return;
 }
 HEAP32[$__p$i$i$i113>>2] = 6752;
 $204 = (($__p$i$i$i113) + 4|0);
 HEAP32[$204>>2] = (123);
 $205 = (($__p$i$i$i113) + 8|0);
 HEAP32[$205>>2] = 0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(6752,$__p$i$i$i113,124);
 $206 = HEAP32[((6752 + 4|0))>>2]|0;
 $207 = (($206) + -1)|0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,11384,$207);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $19 = $3;
  } else {
   $9 = (($id) + 1)|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = (($9) - ($7))|0;
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($0,$11);
    $$pre2 = HEAP32[$0>>2]|0;
    $19 = $$pre2;
    break;
   }
   $12 = ($7>>>0)>($9>>>0);
   if ($12) {
    $13 = (($3) + ($9<<2)|0);
    $14 = ($2|0)==($13|0);
    if ($14) {
     $19 = $3;
    } else {
     $__new_last2$i$i$i = $13;
     $scevgep$i$i$i = (($2) + -4|0);
     $15 = (0 - ($__new_last2$i$i$i))|0;
     $uglygep$i$i$i = (($scevgep$i$i$i) + ($15)|0);
     $uglygep3$i$i$i = $uglygep$i$i$i;
     $16 = $uglygep3$i$i$i >>> 2;
     $17 = $16 ^ -1;
     $scevgep4$i$i$i = (($2) + ($17<<2)|0);
     HEAP32[$1>>2] = $scevgep4$i$i$i;
     $19 = $3;
    }
   } else {
    $19 = $3;
   }
  }
 } while(0);
 $18 = (($19) + ($id<<2)|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $23 = $19;
  $22 = (($23) + ($id<<2)|0);
  HEAP32[$22>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 $$pre = HEAP32[$0>>2]|0;
 $23 = $$pre;
 $22 = (($23) + ($id<<2)|0);
 HEAP32[$22>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6792 + 8|0));
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $28 = $1;$6 = $3;$i$02 = 0;
  while(1) {
   $5 = (($6) + ($i$02<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $28;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$0>>2]|0;
    $$pre4 = HEAP32[$2>>2]|0;
    $11 = $$pre;$13 = $$pre4;
   }
   $9 = (($i$02) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $28 = $11;$6 = $13;$i$02 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==($18|0);
 if (!($21)) {
  $__new_last2$i$i$i$i$i = $18;
  $scevgep$i$i$i$i$i = (($20) + -4|0);
  $22 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep$i$i$i$i$i) + ($22)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $23 = $uglygep3$i$i$i$i$i >>> 2;
  $24 = $23 ^ -1;
  $scevgep4$i$i$i$i$i = (($20) + ($24<<2)|0);
  HEAP32[$0>>2] = $scevgep4$i$i$i$i$i;
 }
 $25 = (($this) + 24|0);
 $26 = ($25|0)==($18|0);
 if ($26) {
  $27 = (($this) + 136|0);
  HEAP8[$27] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($18);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6856]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $10 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 $2 = (___cxa_guard_acquire((6856|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $10 = HEAP32[6848>>2]|0;
  STACKTOP = sp;return ($10|0);
 }
 $4 = HEAP8[6832]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((6832|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   __ZNSt3__16locale5__impC2Ej(11224,1);
   HEAP32[6816>>2] = 11224;
   HEAP32[6824>>2] = 6816;
   ___cxa_guard_release((6832|0));
  }
 }
 $8 = HEAP32[6824>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[6840>>2] = $9;
 __ZNSt3__114__shared_count12__add_sharedEv($9);
 HEAP32[6848>>2] = 6840;
 ___cxa_guard_release((6856|0));
 $10 = HEAP32[6848>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale8__globalEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$this>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$x>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$__p$i$i>>2] = $x;
  $3 = (($__p$i$i) + 4|0);
  HEAP32[$3>>2] = (123);
  $4 = (($__p$i$i) + 8|0);
  HEAP32[$4>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($x,$__p$i$i,124);
 }
 $5 = (($x) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = (($0) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($0) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 2;
 $16 = ($15>>>0)>($7>>>0);
 if (!($16)) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 }
 $17 = (($11) + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($20);
  ___cxa_throw(($20|0),(14840|0),(112|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 255]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6864>>2]|0;HEAP32[6864>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $6 = 0;
  STACKTOP = sp;return ($6|0);
 }
 $0 = (___ctype_b_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($c<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & $m;
 $5 = ($4<<16>>16)!=(0);
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $1 = HEAP32[$$013>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (___ctype_b_loc()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($1<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5;
  } else {
   $6 = 0;
  }
  HEAP16[$$04>>1] = $6;
  $7 = (($$013) + 4|0);
  $8 = (($$04) + 2|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $7;$$04 = $8;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $1 = HEAP32[$$02>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (___ctype_b_loc()|0);
     $3 = HEAP32[$2>>2]|0;
     $4 = (($3) + ($1<<1)|0);
     $5 = HEAP16[$4>>1]|0;
     $6 = $5 & $m;
     $7 = ($6<<16>>16)==(0);
     if (!($7)) {
      $$0$lcssa = $$02;
      break L1;
     }
    }
    $8 = (($$02) + 4|0);
    $9 = ($8|0)==($high|0);
    if ($9) {
     $$0$lcssa = $high;
     break;
    } else {
     $$02 = $8;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    $4 = (___ctype_b_loc()|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (($5) + ($3<<1)|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7 & $m;
    $9 = ($8<<16>>16)==(0);
    $2 = (($$02) + 4|0);
    if ($9) {
     $$0$lcssa = $$02;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break;
    } else {
     $$02 = $2;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $4 = $c;
  STACKTOP = sp;return ($4|0);
 }
 $0 = (___ctype_toupper_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($c<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (___ctype_toupper_loc()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($1<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5;
  } else {
   $6 = $1;
  }
  HEAP32[$$02>>2] = $6;
  $7 = (($$02) + 4|0);
  $8 = ($7|0)==($high|0);
  if ($8) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $7;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $4 = $c;
  STACKTOP = sp;return ($4|0);
 }
 $0 = (___ctype_tolower_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($c<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP32[$$02>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (___ctype_tolower_loc()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($1<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5;
  } else {
   $6 = $1;
  }
  HEAP32[$$02>>2] = $6;
  $7 = (($$02) + 4|0);
  $8 = ($7|0)==($high|0);
  if ($8) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $7;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, $uglygep = 0, $uglygep6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = (0 - ($low5))|0;
 $uglygep = (($scevgep) + ($1)|0);
 $uglygep6 = $uglygep;
 $2 = $uglygep6 >>> 2;
 $3 = (($2) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $4 = HEAP32[$$012>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$03] = $$dfault;
  $6 = (($$012) + 4|0);
  $7 = (($$03) + 1|0);
  $8 = ($6|0)==($high|0);
  if ($8) {
   break;
  } else {
   $$012 = $6;$$03 = $7;
  }
 }
 $scevgep7 = (($low) + ($3<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6888 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $6 = $c;
  STACKTOP = sp;return ($6|0);
 }
 $0 = (___ctype_toupper_loc()|0);
 $1 = $c&255;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4&255;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = (___ctype_toupper_loc()|0);
   $3 = $1 << 24 >> 24;
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($3<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6&255;
   $8 = $7;
  } else {
   $8 = $1;
  }
  HEAP8[$$03] = $8;
  $9 = (($$03) + 1|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   $$0$lcssa = $high;
   break;
  } else {
   $$03 = $9;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $6 = $c;
  STACKTOP = sp;return ($6|0);
 }
 $0 = (___ctype_tolower_loc()|0);
 $1 = $c << 24 >> 24;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4&255;
 $6 = $5;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $1 = HEAP8[$$03]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = (___ctype_tolower_loc()|0);
   $3 = $1 << 24 >> 24;
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($3<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6&255;
   $8 = $7;
  } else {
   $8 = $1;
  }
  HEAP8[$$03] = $8;
  $9 = (($$03) + 1|0);
  $10 = ($9|0)==($high|0);
  if ($10) {
   $$0$lcssa = $high;
   break;
  } else {
   $$03 = $9;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012]|0;
   HEAP8[$$03] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$052 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $73 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $73 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = (_wcsnrtombs($$0247,$frm_nxt,$21,$23,$st)|0);
     $27 = ($25|0)==(0|0);
     if (!($27)) {
      (_uselocale(($25|0))|0);
     }
     if ((($26|0) == -1)) {
      label = 10;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 33;
      break;
     }
     $42 = HEAP32[$to_nxt>>2]|0;
     $43 = (($42) + ($26)|0);
     HEAP32[$to_nxt>>2] = $43;
     $44 = ($43|0)==($to_end|0);
     if ($44) {
      label = 31;
      break;
     }
     $45 = ($fend$149|0)==($frm_end|0);
     if ($45) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $70 = $$pre98;$72 = $43;$fend$3 = $frm_end;
     } else {
      $46 = HEAP32[$7>>2]|0;
      $47 = (_uselocale(($46|0))|0);
      $48 = (_wcrtomb($tmp,0,$st)|0);
      $49 = ($47|0)==(0|0);
      if (!($49)) {
       (_uselocale(($47|0))|0);
      }
      $50 = ($48|0)==(-1);
      if ($50) {
       $$0 = 2;
       label = 33;
       break;
      }
      $51 = HEAP32[$to_nxt>>2]|0;
      $52 = $51;
      $53 = (($6) - ($52))|0;
      $54 = ($48>>>0)>($53>>>0);
      if ($54) {
       $$0 = 1;
       label = 33;
       break;
      }
      $55 = ($48|0)==(0);
      L23: do {
       if (!($55)) {
        $58 = $51;$n$011 = $48;$p$012 = $tmp;
        while(1) {
         $56 = HEAP8[$p$012]|0;
         $57 = (($58) + 1|0);
         HEAP32[$to_nxt>>2] = $57;
         HEAP8[$58] = $56;
         $59 = (($n$011) + -1)|0;
         $60 = ($59|0)==(0);
         if ($60) {
          break L23;
         }
         $61 = (($p$012) + 1|0);
         $$pre99 = HEAP32[$to_nxt>>2]|0;
         $58 = $$pre99;$n$011 = $59;$p$012 = $61;
        }
       }
      } while(0);
      $62 = HEAP32[$frm_nxt>>2]|0;
      $63 = (($62) + 4|0);
      HEAP32[$frm_nxt>>2] = $63;
      $64 = ($63|0)==($frm_end|0);
      L28: do {
       if ($64) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $63;
        while(1) {
         $67 = HEAP32[$fend$215>>2]|0;
         $68 = ($67|0)==(0);
         $66 = (($fend$215) + 4|0);
         if ($68) {
          $fend$2$lcssa = $fend$215;
          break L28;
         }
         $65 = ($66|0)==($frm_end|0);
         if ($65) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $66;
         }
        }
       }
      } while(0);
      $$pre95 = HEAP32[$to_nxt>>2]|0;
      $70 = $63;$72 = $$pre95;$fend$3 = $fend$2$lcssa;
     }
     $69 = ($70|0)==($frm_end|0);
     $71 = ($72|0)==($to_end|0);
     $or$cond = $69 | $71;
     if ($or$cond) {
      $73 = $70;
      break L1;
     } else {
      $$0148 = $70;$$0247 = $72;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     HEAP32[$to_nxt>>2] = $$0247;
     $28 = HEAP32[$frm_nxt>>2]|0;
     $29 = ($$0148|0)==($28|0);
     L36: do {
      if ($29) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$33 = $$0247;
       while(1) {
        $30 = HEAP32[$$19>>2]|0;
        $31 = HEAP32[$7>>2]|0;
        $32 = (_uselocale(($31|0))|0);
        $34 = (_wcrtomb($33,$30,$save_state)|0);
        $35 = ($32|0)==(0|0);
        if (!($35)) {
         (_uselocale(($32|0))|0);
        }
        $36 = ($34|0)==(-1);
        if ($36) {
         $$1$lcssa = $$19;
         break L36;
        }
        $37 = HEAP32[$to_nxt>>2]|0;
        $38 = (($37) + ($34)|0);
        HEAP32[$to_nxt>>2] = $38;
        $39 = (($$19) + 4|0);
        $40 = HEAP32[$frm_nxt>>2]|0;
        $41 = ($39|0)==($40|0);
        if ($41) {
         $$1$lcssa = $39;
         break;
        } else {
         $$19 = $39;$33 = $38;
        }
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 31) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $73 = $$pre;
     break;
    }
    else if ((label|0) == 33) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($73|0)!=($frm_end|0);
 $74 = $not$&1;
 $$0 = $74;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$156 = 0, $fend$2$lcssa = 0;
 var $fend$216 = 0, $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $65 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $65 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     $26 = (_mbsnrtowcs($$0254,$frm_nxt,$20,$23,$st)|0);
     $27 = ($25|0)==(0|0);
     if (!($27)) {
      (_uselocale(($25|0))|0);
     }
     if ((($26|0) == -1)) {
      label = 10;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 32;
      break;
     }
     $43 = HEAP32[$to_nxt>>2]|0;
     $44 = (($43) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $44;
     $45 = ($44|0)==($to_end|0);
     if ($45) {
      label = 30;
      break;
     }
     $46 = ($fend$156|0)==($frm_end|0);
     $$pre113 = HEAP32[$frm_nxt>>2]|0;
     if ($46) {
      $62 = $$pre113;$64 = $44;$fend$3 = $frm_end;
     } else {
      $47 = HEAP32[$7>>2]|0;
      $48 = (_uselocale(($47|0))|0);
      $49 = (_mbrtowc($44,$$pre113,1,$st)|0);
      $50 = ($48|0)==(0|0);
      if (!($50)) {
       (_uselocale(($48|0))|0);
      }
      $51 = ($49|0)==(0);
      if (!($51)) {
       $$0 = 2;
       label = 32;
       break;
      }
      $52 = HEAP32[$to_nxt>>2]|0;
      $53 = (($52) + 4|0);
      HEAP32[$to_nxt>>2] = $53;
      $54 = HEAP32[$frm_nxt>>2]|0;
      $55 = (($54) + 1|0);
      HEAP32[$frm_nxt>>2] = $55;
      $56 = ($55|0)==($frm_end|0);
      L20: do {
       if ($56) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $55;
        while(1) {
         $59 = HEAP8[$fend$216]|0;
         $60 = ($59<<24>>24)==(0);
         $58 = (($fend$216) + 1|0);
         if ($60) {
          $fend$2$lcssa = $fend$216;
          break L20;
         }
         $57 = ($58|0)==($frm_end|0);
         if ($57) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $58;
         }
        }
       }
      } while(0);
      $$pre111 = HEAP32[$to_nxt>>2]|0;
      $62 = $55;$64 = $$pre111;$fend$3 = $fend$2$lcssa;
     }
     $61 = ($62|0)==($frm_end|0);
     $63 = ($64|0)==($to_end|0);
     $or$cond = $61 | $63;
     if ($or$cond) {
      $65 = $62;
      break L1;
     } else {
      $$0155 = $62;$$0254 = $64;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     HEAP32[$to_nxt>>2] = $$0254;
     $28 = HEAP32[$frm_nxt>>2]|0;
     $29 = ($$0155|0)==($28|0);
     L28: do {
      if ($29) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $30 = $$115;
        $31 = (($18) - ($30))|0;
        $32 = HEAP32[$7>>2]|0;
        $33 = (_uselocale(($32|0))|0);
        $34 = (_mbrtowc($storemerge14,$$115,$31,$save_state)|0);
        $35 = ($33|0)==(0|0);
        if (!($35)) {
         (_uselocale(($33|0))|0);
        }
        if ((($34|0) == -1)) {
         label = 15;
         break;
        } else if ((($34|0) == -2)) {
         label = 16;
         break;
        } else if ((($34|0) == 0)) {
         $36 = (($$115) + 1|0);
         $$2 = $36;
        } else {
         $37 = (($$115) + ($34)|0);
         $$2 = $37;
        }
        $38 = HEAP32[$to_nxt>>2]|0;
        $39 = (($38) + 4|0);
        HEAP32[$to_nxt>>2] = $39;
        $40 = HEAP32[$frm_nxt>>2]|0;
        $41 = ($$2|0)==($40|0);
        if ($41) {
         $$1$lcssa = $$2;
         break L28;
        } else {
         $$115 = $$2;$storemerge14 = $39;
        }
       }
       if ((label|0) == 15) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 16) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $42 = $not$3&1;
     $$0 = $42;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 30) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $65 = $$pre;
     break;
    }
    else if ((label|0) == 32) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($65|0)!=($frm_end|0);
 $66 = $not$&1;
 $$0 = $66;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_wcrtomb($tmp,0,$st)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($3) + -1)|0;
 $6 = HEAP32[$to_nxt>>2]|0;
 $7 = $to_end;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ($5>>>0)>($9>>>0);
 if ($10) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $14 = $6;$n$02 = $5;$p$03 = $tmp;
 }
 while(1) {
  $12 = HEAP8[$p$03]|0;
  $13 = (($14) + 1|0);
  HEAP32[$to_nxt>>2] = $13;
  HEAP8[$14] = $12;
  $15 = (($n$02) + -1)|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = 0;
   break;
  }
  $17 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $14 = $$pre;$n$02 = $15;$p$03 = $17;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_mbtowc(0,0,4)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 1;
  } else {
   $8 = (_uselocale(($6|0))|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    (_uselocale(($8|0))|0);
    $$0 = 0;
   }
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0;
 var $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  $8 = (_mbrlen($$016,$5,$st)|0);
  $9 = ($7|0)==(0|0);
  if (!($9)) {
   (_uselocale(($7|0))|0);
  }
  if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 9;
   break;
  } else if ((($8|0) == 0)) {
   $10 = (($$016) + 1|0);
   $$1 = $10;$$pn = 1;
  } else {
   $11 = (($$016) + ($8)|0);
   $$1 = $11;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $12 = (($nwchar_t$08) + 1)|0;
  $13 = ($12>>>0)>=($mx>>>0);
  $14 = ($$1|0)==($frm_end|0);
  $or$cond = $13 | $14;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 9;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $12;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = 1;
 } else {
  $3 = (_uselocale(($1|0))|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = 4;
  } else {
   (_uselocale(($3|0))|0);
   $5 = 4;
  }
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51]|0;
       if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($mx) - ($nchar16_t$014))|0;
      $77 = ($76>>>0)<(2);
      if ($77) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $78 = (($frm_nxt$115) + 1|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 2|0);
      $81 = HEAP8[$80]|0;
      $82 = (($frm_nxt$115) + 3|0);
      $83 = HEAP8[$82]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 36;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 34;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 38;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $113 = (($nchar16_t$014) + 1)|0;
      $114 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre5;
 } else {
  $2 = $frm_end;
  $3 = $$pre5;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre5]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre5) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre5) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre5) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre5;
     }
    } else {
     $16 = $$pre5;
    }
   } else {
    $16 = $$pre5;
   }
  } else {
   $16 = $$pre5;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48]|0;
       if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80]|0;
      if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $113 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $112 & $113;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $114 = $frm_nxt$1$lcssa;
 $115 = $frm;
 $116 = (($114) - ($115))|0;
 $$0 = $116;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7040 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7040 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((7080 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,7120,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(7128)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,7128,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,7152,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(7160)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,7160,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7192]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7184>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7192|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7184>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[14392]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((14392|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((14224|0),0,168)|0;
   (_atexit((127|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((14392|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14224,14400)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 12|0)),14408)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 24|0)),14416)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 36|0)),14424)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 48|0)),14440)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 60|0)),14456)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 72|0)),14464)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 84|0)),14480)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 96|0)),14488)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 108|0)),14496)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 120|0)),14504)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 132|0)),14512)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 144|0)),14520)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14224 + 156|0)),14528)|0);
 HEAP32[7184>>2] = 14224;
 ___cxa_guard_release((7192|0));
 $8 = HEAP32[7184>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7208]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7200>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7208|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7200>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[13856]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13856|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13688|0),0,168)|0;
   (_atexit((128|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13856|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13688,13864)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 12|0)),13896)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 24|0)),13928)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 36|0)),13960)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 48|0)),14000)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 60|0)),14040)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 72|0)),14072)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 84|0)),14112)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 96|0)),14128)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 108|0)),14144)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 120|0)),14160)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 132|0)),14176)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 144|0)),14192)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13688 + 156|0)),14208)|0);
 HEAP32[7200>>2] = 13688;
 ___cxa_guard_release((7208|0));
 $8 = HEAP32[7200>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7224]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7216>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7224|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7216>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[13464]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((13464|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((13176|0),0,288)|0;
   (_atexit((129|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13464|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(13176,13472)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 12|0)),13480)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 24|0)),13496)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 36|0)),13504)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 48|0)),13512)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 60|0)),13520)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 72|0)),13528)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 84|0)),13536)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 96|0)),13544)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 108|0)),13560)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 120|0)),13568)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 132|0)),13584)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 144|0)),13600)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 156|0)),13608)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 168|0)),13616)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 180|0)),13624)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 192|0)),13512)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 204|0)),13632)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 216|0)),13640)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 228|0)),13648)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 240|0)),13656)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 252|0)),13664)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 264|0)),13672)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((13176 + 276|0)),13680)|0);
 HEAP32[7216>>2] = 13176;
 ___cxa_guard_release((7224|0));
 $8 = HEAP32[7216>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7240]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7232>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7240|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7232>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[12624]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12624|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12336|0),0,288)|0;
   (_atexit((130|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12624|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12336,12632)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 12|0)),12664)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 24|0)),12704)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 36|0)),12728)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 48|0)),13048)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 60|0)),12752)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 72|0)),12776)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 84|0)),12800)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 96|0)),12832)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 108|0)),12872)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 120|0)),12904)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 132|0)),12944)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 144|0)),12984)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 156|0)),13000)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 168|0)),13016)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 180|0)),13032)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 192|0)),13048)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 204|0)),13064)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 216|0)),13080)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 228|0)),13096)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 240|0)),13112)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 252|0)),13128)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 264|0)),13144)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12336 + 276|0)),13160)|0);
 HEAP32[7232>>2] = 12336;
 ___cxa_guard_release((7240|0));
 $8 = HEAP32[7232>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7256]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7248>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7256|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7248>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[12312]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((12312|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((12024|0),0,288)|0;
   (_atexit((131|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12312|0));
  }
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12024,12320)|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12024 + 12|0)),12328)|0);
 HEAP32[7248>>2] = 12024;
 ___cxa_guard_release((7256|0));
 $8 = HEAP32[7248>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7272]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $8 = HEAP32[7264>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $2 = (___cxa_guard_acquire((7272|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $8 = HEAP32[7264>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $4 = HEAP8[11984]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((11984|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((11696|0),0,288)|0;
   (_atexit((132|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11984|0));
  }
 }
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11696,11992)|0);
 (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11696 + 12|0)),12008)|0);
 HEAP32[7264>>2] = 11696;
 ___cxa_guard_release((7272|0));
 $8 = HEAP32[7264>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7296]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7296|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7280,7304,8);
   (_atexit((133|0),(7280|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7296|0));
  }
 }
 STACKTOP = sp;return (7280|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7336]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7320|0);
 }
 $2 = (___cxa_guard_acquire((7336|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7320|0);
 }
 $4 = (_wcslen(7344)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7320,7344,$4);
 (_atexit((134|0),(7320|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7336|0));
 STACKTOP = sp;return (7320|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7400]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7400|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7384,7408,8);
   (_atexit((133|0),(7384|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7400|0));
  }
 }
 STACKTOP = sp;return (7384|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7440]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7424|0);
 }
 $2 = (___cxa_guard_acquire((7440|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7424|0);
 }
 $4 = (_wcslen(7448)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7424,7448,$4);
 (_atexit((134|0),(7424|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7440|0));
 STACKTOP = sp;return (7424|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7504]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7504|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7488,7512,20);
   (_atexit((133|0),(7488|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7504|0));
  }
 }
 STACKTOP = sp;return (7488|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7552]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7536|0);
 }
 $2 = (___cxa_guard_acquire((7552|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7536|0);
 }
 $4 = (_wcslen(7560)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7536,7560,$4);
 (_atexit((134|0),(7536|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7552|0));
 STACKTOP = sp;return (7536|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7664]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7664|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7648,7672,11);
   (_atexit((133|0),(7648|0),(___dso_handle|0))|0);
   ___cxa_guard_release((7664|0));
  }
 }
 STACKTOP = sp;return (7648|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7704]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (7688|0);
 }
 $2 = (___cxa_guard_acquire((7704|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (7688|0);
 }
 $4 = (_wcslen(7712)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7688,7712,$4);
 (_atexit((134|0),(7688|0),(___dso_handle|0))|0);
 ___cxa_guard_release((7704|0));
 STACKTOP = sp;return (7688|0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (___cxa_guard_acquire((6776|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $7;
   ___cxa_guard_release((6776|0));
  }
 }
 $8 = HEAP32[6768>>2]|0;
 $9 = (+_strtold_l($__a,$__p2,$8));
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$1>>2] = $2;
 }
 $12 = HEAP32[$__p2>>2]|0;
 $13 = ($12|0)==($__a_end|0);
 if (!($13)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $14 = ($10|0)==(34);
 if (!($14)) {
  $$0 = $9;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $9;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (___cxa_guard_acquire((6776|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $7;
   ___cxa_guard_release((6776|0));
  }
 }
 $8 = HEAP32[6768>>2]|0;
 $9 = (+_strtold_l($__a,$__p2,$8));
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$1>>2] = $2;
 }
 $12 = HEAP32[$__p2>>2]|0;
 $13 = ($12|0)==($__a_end|0);
 if (!($13)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $14 = ($10|0)==(34);
 if (!($14)) {
  $$0 = $9;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $9;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (___cxa_guard_acquire((6776|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $7;
   ___cxa_guard_release((6776|0));
  }
 }
 $8 = HEAP32[6768>>2]|0;
 $9 = (+_strtold_l($__a,$__p2,$8));
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  HEAP32[$1>>2] = $2;
 }
 $12 = HEAP32[$__p2>>2]|0;
 $13 = ($12|0)==($__a_end|0);
 if (!($13)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $14 = ($10|0)==(34);
 if ($14) {
  HEAP32[$__err>>2] = 4;
 }
 $15 = $9;
 $$0 = $15;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = HEAP8[$__a]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = HEAP8[6776]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (___cxa_guard_acquire((6776|0))|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = (_newlocale(2147483647,(6784|0),(0|0))|0);
     HEAP32[6768>>2] = $9;
     ___cxa_guard_release((6776|0));
    }
   }
   $10 = HEAP32[6768>>2]|0;
   $11 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($10|0))|0);
   $12 = tempRet0;
   $13 = HEAP32[$3>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$3>>2] = $4;
   }
   $15 = HEAP32[$__p2>>2]|0;
   $16 = ($15|0)==($__a_end|0);
   if (!($16)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $17 = ($13|0)==(34);
   if ($17) {
    HEAP32[$__err>>2] = 4;
    $18 = -1;$19 = -1;
   } else {
    $18 = $12;$19 = $11;
   }
  }
 } while(0);
 tempRet0 = $18;
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = (___cxa_guard_acquire((6776|0))|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $9;
   ___cxa_guard_release((6776|0));
  }
 }
 $10 = HEAP32[6768>>2]|0;
 $11 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($10|0))|0);
 $12 = tempRet0;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$3>>2] = $4;
 }
 $15 = HEAP32[$__p2>>2]|0;
 $16 = ($15|0)==($__a_end|0);
 if (!($16)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($13|0)==(34);
 $18 = ($12>>>0)>(0);
 $19 = ($12|0)==(0);
 $20 = ($11>>>0)>(4294967295);
 $21 = $19 & $20;
 $22 = $18 | $21;
 $or$cond = $17 | $22;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = (___cxa_guard_acquire((6776|0))|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $9;
   ___cxa_guard_release((6776|0));
  }
 }
 $10 = HEAP32[6768>>2]|0;
 $11 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($10|0))|0);
 $12 = tempRet0;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$3>>2] = $4;
 }
 $15 = HEAP32[$__p2>>2]|0;
 $16 = ($15|0)==($__a_end|0);
 if (!($16)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($13|0)==(34);
 $18 = ($12>>>0)>(0);
 $19 = ($12|0)==(0);
 $20 = ($11>>>0)>(4294967295);
 $21 = $19 & $20;
 $22 = $18 | $21;
 $or$cond = $17 | $22;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = HEAP8[6776]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = (___cxa_guard_acquire((6776|0))|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $9;
   ___cxa_guard_release((6776|0));
  }
 }
 $10 = HEAP32[6768>>2]|0;
 $11 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($10|0))|0);
 $12 = tempRet0;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$3>>2] = $4;
 }
 $15 = HEAP32[$__p2>>2]|0;
 $16 = ($15|0)==($__a_end|0);
 if (!($16)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($13|0)==(34);
 $18 = ($12>>>0)>(0);
 $19 = ($12|0)==(0);
 $20 = ($11>>>0)>(65535);
 $21 = $19 & $20;
 $22 = $18 | $21;
 $or$cond = $17 | $22;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $23 = $11&65535;
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $23 = 0;$24 = 0;
  tempRet0 = $23;
  STACKTOP = sp;return ($24|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (___cxa_guard_acquire((6776|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $7;
   ___cxa_guard_release((6776|0));
  }
 }
 $8 = HEAP32[6768>>2]|0;
 $9 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($8|0))|0);
 $10 = tempRet0;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  HEAP32[$1>>2] = $2;
 }
 $13 = HEAP32[$__p2>>2]|0;
 $14 = ($13|0)==($__a_end|0);
 if (!($14)) {
  HEAP32[$__err>>2] = 4;
  $23 = 0;$24 = 0;
  tempRet0 = $23;
  STACKTOP = sp;return ($24|0);
 }
 $15 = ($11|0)==(34);
 if ($15) {
  HEAP32[$__err>>2] = 4;
  $16 = ($10|0)>(0);
  $17 = ($10|0)==(0);
  $18 = ($9>>>0)>(0);
  $19 = $17 & $18;
  $20 = $16 | $19;
  $21 = $20 ? -1 : 0;
  $22 = $20 ? 2147483647 : -2147483648;
  tempRet0 = $22;
  STACKTOP = sp;return ($21|0);
 } else {
  $23 = $10;$24 = $9;
  tempRet0 = $23;
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = HEAP8[6776]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (___cxa_guard_acquire((6776|0))|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (_newlocale(2147483647,(6784|0),(0|0))|0);
   HEAP32[6768>>2] = $7;
   ___cxa_guard_release((6776|0));
  }
 }
 $8 = HEAP32[6768>>2]|0;
 $9 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($8|0))|0);
 $10 = tempRet0;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  HEAP32[$1>>2] = $2;
 }
 $13 = HEAP32[$__p2>>2]|0;
 $14 = ($13|0)==($__a_end|0);
 if (!($14)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($11|0)==(34);
 do {
  if ($15) {
   HEAP32[$__err>>2] = 4;
   $26 = ($10|0)>(0);
   $27 = ($10|0)==(0);
   $28 = ($9>>>0)>(0);
   $29 = $27 & $28;
   $30 = $26 | $29;
   if ($30) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $16 = ($10|0)<(-1);
   $17 = ($10|0)==(-1);
   $18 = ($9>>>0)<(2147483648);
   $19 = $17 & $18;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $21 = ($10|0)>(0);
   $22 = ($10|0)==(0);
   $23 = ($9>>>0)>(2147483647);
   $24 = $22 & $23;
   $25 = $21 | $24;
   if ($25) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$__vp>>2]|0;
 $$idx1 = (($__vp) + 4|0);
 $$idx1$val$field = HEAPU8[$$idx1]|(HEAPU8[$$idx1+1|0]<<8)|(HEAPU8[$$idx1+2|0]<<16)|(HEAPU8[$$idx1+3|0]<<24);
 $$idx1$val$index1 = (($$idx1) + 4|0);
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1]|(HEAPU8[$$idx1$val$index1+1|0]<<8)|(HEAPU8[$$idx1$val$index1+2|0]<<16)|(HEAPU8[$$idx1$val$index1+3|0]<<24);
 $0 = $$idx1$val$field2 >> 1;
 $1 = (($$idx$val) + ($0)|0);
 $2 = $$idx1$val$field2 & 1;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = $$idx1$val$field;
  $8 = $7;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$idx1$val$field)|0);
  $6 = HEAP32[$5>>2]|0;
  $8 = $6;
  FUNCTION_TABLE_vi[$8 & 255]($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  $$0$i = $__n;$10 = $3;
  while(1) {
   $9 = ($10|0)==(0|0);
   if ($9) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$2>>2]|0;
    $12 = $$pre1$i;
   }
   $11 = (($12) + 4|0);
   HEAP32[$2>>2] = $11;
   $13 = (($$0$i) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    break;
   } else {
    $$0$i = $13;$10 = $11;
   }
  }
  STACKTOP = sp;return;
 }
 $15 = (($this) + 16|0);
 $16 = HEAP32[$this>>2]|0;
 $17 = $16;
 $18 = (($5) - ($17))|0;
 $19 = $18 >> 2;
 $20 = (($19) + ($__n))|0;
 $21 = ($20>>>0)>(1073741823);
 if ($21) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $22 = (($4) - ($17))|0;
 $23 = $22 >> 2;
 $24 = ($23>>>0)<(536870911);
 if ($24) {
  $25 = $22 >> 1;
  $26 = ($25>>>0)<($20>>>0);
  $27 = $26 ? $20 : $25;
  $28 = ($27|0)==(0);
  if ($28) {
   $$0$i57 = 0;$36 = 0;
  } else {
   $29 = (($this) + 128|0);
   $30 = HEAP8[$29]|0;
   $31 = ($30<<24>>24)==(0);
   $32 = ($27>>>0)<(29);
   $or$cond$i$i$i$i = $31 & $32;
   if ($or$cond$i$i$i$i) {
    HEAP8[$29] = 1;
    $$0$i57 = $27;$36 = $15;
   } else {
    $$0$i569 = $27;
    label = 11;
   }
  }
 } else {
  $$0$i569 = 1073741823;
  label = 11;
 }
 if ((label|0) == 11) {
  $33 = $$0$i569 << 2;
  $34 = (__Znwj($33)|0);
  $$0$i57 = $$0$i569;$36 = $34;
 }
 $35 = (($36) + ($19<<2)|0);
 $$0$i2 = $__n;$38 = $35;
 while(1) {
  $37 = ($38|0)==(0|0);
  if ($37) {
   $40 = 0;
  } else {
   HEAP32[$38>>2] = 0;
   $40 = $38;
  }
  $39 = (($40) + 4|0);
  $41 = (($$0$i2) + -1)|0;
  $42 = ($41|0)==(0);
  if ($42) {
   break;
  } else {
   $$0$i2 = $41;$38 = $39;
  }
 }
 $43 = (($36) + ($$0$i57<<2)|0);
 $44 = HEAP32[$this>>2]|0;
 $45 = HEAP32[$2>>2]|0;
 $46 = $45;
 $47 = $44;
 $48 = (($46) - ($47))|0;
 $49 = $48 >> 2;
 $$sum = (($19) - ($49))|0;
 $50 = (($36) + ($$sum<<2)|0);
 _memcpy(($50|0),($44|0),($48|0))|0;
 HEAP32[$this>>2] = $50;
 HEAP32[$2>>2] = $39;
 HEAP32[$0>>2] = $43;
 $51 = ($44|0)==(0|0);
 if ($51) {
  STACKTOP = sp;return;
 }
 $52 = ($15|0)==($44|0);
 if ($52) {
  $53 = (($this) + 128|0);
  HEAP8[$53] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($44);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11696 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11696);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((12024 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12024);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12336 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12336);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13176 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13176);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13688 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13688);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14224 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14224);
 STACKTOP = sp;return;
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 14744;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 14752 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (14536 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$018 = 0, $ws$025 = 0, $ws$1 = 0;
 var $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)==(0|0);
 $3 = ($wn$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$18 = $0;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $0;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $4 = $$026 >>> 2;
    $5 = ($4>>>0)>=($$0423>>>0);
    $6 = ($$026>>>0)>(131);
    $or$cond7 = $5 | $6;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $5 ? $$0423 : $4;
    $7 = (($$026) - ($$04$))|0;
    $8 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     break;
    }
    $10 = ($ws$025|0)==($wbuf|0);
    if ($10) {
     $$15 = $$0423;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$025) + ($8<<2)|0);
     $12 = (($$0423) - ($8))|0;
     $$15 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$024))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)==(0|0);
    $16 = ($$15|0)==(0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$1 = $7;$$26 = $$15;$18 = $14;$cnt$1 = $13;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $7;$$0423 = $$15;$$pr41 = $14;$cnt$024 = $13;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $7;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $17 = ($18|0)==(0|0);
 L11: do {
  if ($17) {
   $cnt$3 = $cnt$1;
  } else {
   $19 = ($$26|0)==(0);
   $20 = ($$1|0)==(0);
   $or$cond810 = $19 | $20;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $18;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
    while(1) {
     $22 = (_mbrtowc($ws$213,$21,$$214,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$214) - ($22))|0;
     $28 = (($ws$213) + 4|0);
     $29 = (($$311) + -1)|0;
     $30 = (($cnt$212) + 1)|0;
     $31 = ($29|0)==(0);
     $32 = ($$214|0)==($22|0);
     $or$cond8 = $31 | $32;
     if ($or$cond8) {
      $cnt$3 = $30;
      break L11;
     } else {
      $$214 = $27;$$311 = $29;$21 = $26;$cnt$212 = $30;$ws$213 = $28;
     }
    }
    if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    } else if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$212;
     break;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $33 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $33;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$840 = 0, $$in = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$35 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$02 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$46$ph|0)==(0);
   if ($6) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $65 = HEAP8[$s$524]|0;
    $66 = $65&255;
    $67 = (($66) + -1)|0;
    $68 = ($67>>>0)<(127);
    do {
     if ($68) {
      $69 = $s$524;
      $70 = $69 & 3;
      $71 = ($70|0)==(0);
      $72 = ($$4622>>>0)>(3);
      $or$cond = $71 & $72;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
       while(1) {
        $73 = HEAP32[$s$614>>2]|0;
        $74 = (($73) + -16843009)|0;
        $75 = $74 | $73;
        $76 = $75 & -2139062144;
        $77 = ($76|0)==(0);
        if (!($77)) {
         label = 30;
         break;
        }
        $78 = (($s$614) + 1|0);
        $79 = $73 & 255;
        $80 = (($$113) + 4|0);
        HEAP32[$$113>>2] = $79;
        $81 = (($s$614) + 2|0);
        $82 = HEAP8[$78]|0;
        $83 = $82&255;
        $84 = (($$113) + 8|0);
        HEAP32[$80>>2] = $83;
        $85 = (($s$614) + 3|0);
        $86 = HEAP8[$81]|0;
        $87 = $86&255;
        $88 = (($$113) + 12|0);
        HEAP32[$84>>2] = $87;
        $89 = (($s$614) + 4|0);
        $90 = HEAP8[$85]|0;
        $91 = $90&255;
        $92 = (($$113) + 16|0);
        HEAP32[$88>>2] = $91;
        $93 = (($$512) + -4)|0;
        $94 = ($93>>>0)>(3);
        if ($94) {
         $$113 = $92;$$512 = $93;$s$614 = $89;
        } else {
         label = 31;
         break;
        }
       }
       if ((label|0) == 30) {
        label = 0;
        $95 = $73&255;
        $$2 = $$113;$$6 = $$512;$97 = $95;$s$7 = $s$614;
        break;
       }
       else if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$89]|0;
        $$2 = $92;$$6 = $93;$97 = $$pre$pre;$s$7 = $89;
        break;
       }
      } else {
       $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$97 = $65;$s$7 = $s$524;
     }
    } while(0);
    $96 = $97&255;
    $98 = (($96) + -1)|0;
    $99 = ($98>>>0)<(127);
    if (!($99)) {
     break;
    }
    $100 = (($s$7) + 1|0);
    $101 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $96;
    $102 = (($$6) + -1)|0;
    $103 = ($102|0)==(0);
    if ($103) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $101;$$4622 = $102;$s$524 = $100;
    }
   }
   $104 = (($96) + -194)|0;
   $105 = ($104>>>0)>(50);
   if ($105) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $106 = (($s$7) + 1|0);
   $107 = (14536 + ($104<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $108;$s$8 = $106;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $19 = (($s$18) + 4|0);
       $20 = (($$137) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$137 = $20;$s$18 = $19;
       } else {
        $$13$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$24 = $$13$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$24 = $$02;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$24) + -1)|0;
    $$02 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (14536 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$35 = $$24;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47]|0;
    $51 = $50&255;
    $52 = (($51) + -128)|0;
    $53 = ($52>>>0)>(63);
    if ($53) {
     label = 20;
     break;
    }
    $55 = (($s$3) + 2|0);
    $56 = $c$2 & 524288;
    $57 = ($56|0)==(0);
    if ($57) {
     $s$4 = $55;
    } else {
     $58 = HEAP8[$55]|0;
     $59 = $58&255;
     $60 = (($59) + -128)|0;
     $61 = ($60>>>0)>(63);
     if ($61) {
      label = 23;
      break;
     }
     $63 = (($s$3) + 3|0);
     $s$4 = $63;
    }
   }
   $64 = (($$35) + -1)|0;
   $$02 = $64;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $109 = HEAP8[$s$8]|0;
   $110 = $109&255;
   $111 = $110 >>> 3;
   $112 = (($111) + -16)|0;
   $113 = $c$4 >> 26;
   $114 = (($111) + ($113))|0;
   $115 = $112 | $114;
   $116 = ($115>>>0)>(7);
   if ($116) {
    label = 37;
    break;
   }
   $118 = $c$4 << 6;
   $119 = (($s$8) + 1|0);
   $120 = (($110) + -128)|0;
   $121 = $120 | $118;
   $122 = ($121|0)<(0);
   if ($122) {
    $123 = HEAP8[$119]|0;
    $124 = $123&255;
    $125 = (($124) + -128)|0;
    $126 = ($125>>>0)>(63);
    if ($126) {
     label = 40;
     break;
    }
    $128 = $121 << 6;
    $129 = (($s$8) + 2|0);
    $130 = $125 | $128;
    $131 = ($130|0)<(0);
    if ($131) {
     $132 = HEAP8[$129]|0;
     $133 = $132&255;
     $134 = (($133) + -128)|0;
     $135 = ($134>>>0)>(63);
     if ($135) {
      label = 43;
      break;
     }
     $137 = $130 << 6;
     $138 = (($s$8) + 3|0);
     $139 = $134 | $137;
     $c$5 = $139;$s$9 = $138;
    } else {
     $c$5 = $130;$s$9 = $129;
    }
   } else {
    $c$5 = $121;$s$9 = $119;
   }
   $140 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $141 = (($$7) + -1)|0;
   $$01$ph = $140;$$46$ph = $141;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $54 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $54;
  label = 46;
 }
 else if ((label|0) == 23) {
  $62 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $62;
  label = 46;
 }
 else if ((label|0) == 37) {
  $117 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $117;
  label = 46;
 }
 else if ((label|0) == 40) {
  $127 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $121;$s$10 = $127;
  label = 46;
 }
 else if ((label|0) == 43) {
  $136 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $130;$s$10 = $136;
  label = 46;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 46) {
  $142 = ($c$6|0)==(0);
  if ($142) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $143 = HEAP8[$s$1044]|0;
  $144 = ($143<<24>>24)==(0);
  if ($144) {
   $145 = ($$442|0)==(0|0);
   if (!($145)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $146 = (($wn) - ($$840))|0;
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$441 = $$442;$s$1043 = $s$1044;
  }
 }
 $147 = (___errno_location()|0);
 HEAP32[$147>>2] = 84;
 $148 = ($$441|0)==(0|0);
 if ($148) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (14536 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0, $s$1 = 0;
 var $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)==(0|0);
 $3 = ($n$|0)==(0);
 $or$cond22 = $2 | $3;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$17 = $0;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $0;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $4 = ($$026>>>0)>=($$0423>>>0);
    $5 = ($$026>>>0)>(32);
    $or$cond7 = $4 | $5;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$17 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $4 ? $$0423 : $$026;
    $6 = (($$026) - ($$04$$0))|0;
    $7 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     break;
    }
    $9 = ($s$025|0)==($buf|0);
    if ($9) {
     $$15 = $$0423;$s$1 = $buf;
    } else {
     $10 = (($s$025) + ($7)|0);
     $11 = (($$0423) - ($7))|0;
     $$15 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$024))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)==(0|0);
    $15 = ($$15|0)==(0);
    $or$cond = $14 | $15;
    if ($or$cond) {
     $$1 = $6;$$26 = $$15;$17 = $13;$cnt$1 = $12;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $6;$$0423 = $$15;$$pr41 = $13;$cnt$024 = $12;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $6;$$26 = 0;$17 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $16 = ($17|0)==(0|0);
 L11: do {
  if ($16) {
   $cnt$3 = $cnt$1;
  } else {
   $18 = ($$26|0)==(0);
   $19 = ($$1|0)==(0);
   $or$cond810 = $18 | $19;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
   } else {
    $$214 = $$1;$$311 = $$26;$21 = $17;$cnt$212 = $cnt$1;$s$213 = $s$018;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$213,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$214) + -1)|0;
     $29 = (($s$213) + ($22)|0);
     $30 = (($$311) - ($22))|0;
     $31 = (($cnt$212) + 1)|0;
     $32 = ($$311|0)==($22|0);
     $33 = ($28|0)==(0);
     $or$cond8 = $32 | $33;
     if ($or$cond8) {
      $cnt$3 = $31;
      break L11;
     } else {
      $$214 = $28;$$311 = $30;$21 = $27;$cnt$212 = $31;$s$213 = $29;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$212;
    } else {
     $cnt$3 = -1;
    }
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $34 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $34;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$038 = 0;$6 = $3;$ws2$09 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$14 = (($$pn) + ($$038))|0;
   $9 = (($ws2$09) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$6 = $10;$ws2$09 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre41 = HEAP32[$ws>>2]|0;
   $$0226 = $s;$$2525 = $n;$13 = $$pre41;
   while(1) {
    $12 = HEAP32[$13>>2]|0;
    $14 = ($12|0)==(0);
    if ($14) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $16 = ($12>>>0)>(127);
    if ($16) {
     $17 = (_wcrtomb($$0226,$12,0)|0);
     $18 = ($17|0)==(-1);
     if ($18) {
      $$0 = -1;
      break;
     }
     $19 = (($$0226) + ($17)|0);
     $20 = (($$2525) - ($17))|0;
     $$1 = $19;$$36 = $20;$25 = $13;
    } else {
     $21 = $12&255;
     $22 = (($$0226) + 1|0);
     HEAP8[$$0226] = $21;
     $23 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     $$1 = $22;$$36 = $23;$25 = $$pre42;
    }
    $24 = (($25) + 4|0);
    HEAP32[$ws>>2] = $24;
    $26 = ($$36>>>0)>(3);
    if ($26) {
     $$0226 = $$1;$$2525 = $$36;$13 = $24;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 $15 = ($$25$lcssa|0)==(0);
 L26: do {
  if ($15) {
   $$414 = 0;
  } else {
   $$pre = HEAP32[$ws>>2]|0;
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$28 = $$pre;
   while(1) {
    $27 = HEAP32[$28>>2]|0;
    $29 = ($27|0)==(0);
    if ($29) {
     label = 24;
     break;
    }
    $30 = ($27>>>0)>(127);
    if ($30) {
     $31 = (_wcrtomb($buf,$27,0)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      $$0 = -1;
      label = 26;
      break;
     }
     $33 = ($31>>>0)>($$418>>>0);
     if ($33) {
      label = 20;
      break;
     }
     $35 = HEAP32[$28>>2]|0;
     (_wcrtomb($$219,$35,0)|0);
     $36 = (($$219) + ($31)|0);
     $37 = (($$418) - ($31))|0;
     $$3 = $36;$$5 = $37;$42 = $28;
    } else {
     $38 = $27&255;
     $39 = (($$219) + 1|0);
     HEAP8[$$219] = $38;
     $40 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     $$3 = $39;$$5 = $40;$42 = $$pre40;
    }
    $41 = (($42) + 4|0);
    HEAP32[$ws>>2] = $41;
    $43 = ($$5|0)==(0);
    if ($43) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$28 = $41;
    }
   }
   if ((label|0) == 20) {
    $34 = (($n) - ($$418))|0;
    $$0 = $34;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 24) {
    HEAP8[$$219] = 0;
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$ws>>2] = 0;
 $44 = (($n) - ($$414))|0;
 $$0 = $44;
 STACKTOP = sp;return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14760 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (14784|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,14896,14952,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 15]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $17 = (($this) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_viiii[$21 & 15]($18,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$3>>2] = $adjustedPtr;
  $6 = (($info) + 24|0);
  HEAP32[$6>>2] = $path_below;
  $7 = (($info) + 36|0);
  HEAP32[$7>>2] = 1;
  STACKTOP = sp;return;
 }
 $8 = ($4|0)==($adjustedPtr|0);
 if (!($8)) {
  $12 = (($info) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$12>>2] = $14;
  $15 = (($info) + 24|0);
  HEAP32[$15>>2] = 2;
  $16 = (($info) + 54|0);
  HEAP8[$16] = 1;
  STACKTOP = sp;return;
 }
 $9 = (($info) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$9>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   HEAP32[$3>>2] = $adjustedPtr;
   $6 = (($info) + 24|0);
   HEAP32[$6>>2] = $path_below;
   $7 = (($info) + 36|0);
   HEAP32[$7>>2] = 1;
   STACKTOP = sp;return;
  }
  $8 = ($4|0)==($adjustedPtr|0);
  if (!($8)) {
   $12 = (($info) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   HEAP32[$12>>2] = $14;
   $15 = (($info) + 24|0);
   HEAP32[$15>>2] = 2;
   $16 = (($info) + 54|0);
   HEAP8[$16] = 1;
   STACKTOP = sp;return;
  }
  $9 = (($info) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(2);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $17 = (($this) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($this) + ($18<<3)|0) + 16|0);
 $20 = (($this) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >> 8;
 $23 = $21 & 1;
 $24 = ($23|0)==(0);
 if ($24) {
  $offset_to_base$0$i1 = $22;
 } else {
  $25 = HEAP32[$adjustedPtr>>2]|0;
  $26 = (($25) + ($22)|0);
  $27 = HEAP32[$26>>2]|0;
  $offset_to_base$0$i1 = $27;
 }
 $28 = (($this) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $34 = $21 & 2;
 $35 = ($34|0)!=(0);
 $36 = $35 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$32 & 15]($29,$info,$33,$36);
 $37 = ($18|0)>(1);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = (($this) + 24|0);
 $39 = (($info) + 54|0);
 $p$0 = $38;
 while(1) {
  $40 = (($p$0) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >> 8;
  $43 = $41 & 1;
  $44 = ($43|0)==(0);
  if ($44) {
   $offset_to_base$0$i = $42;
  } else {
   $45 = HEAP32[$adjustedPtr>>2]|0;
   $46 = (($45) + ($42)|0);
   $47 = HEAP32[$46>>2]|0;
   $offset_to_base$0$i = $47;
  }
  $48 = HEAP32[$p$0>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 28|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $53 = $41 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$51 & 15]($48,$info,$52,$55);
  $56 = HEAP8[$39]|0;
  $57 = ($56<<24>>24)==(0);
  if (!($57)) {
   label = 16;
   break;
  }
  $58 = (($p$0) + 8|0);
  $59 = ($58>>>0)<($19>>>0);
  if ($59) {
   $p$0 = $58;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38|0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 15]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 3]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   if (!($42)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  if (!($29)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  if (!($31)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $34 = HEAP32[$11>>2]|0;
  $$1 = $33 ? $34 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if ($10) {
  $11 = (($info) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($current_ptr|0);
  if (!($13)) {
   $14 = (($info) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($current_ptr|0);
   if (!($16)) {
    $19 = (($info) + 32|0);
    HEAP32[$19>>2] = $path_below;
    $20 = (($info) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(4);
    if ($22) {
     STACKTOP = sp;return;
    }
    $23 = (($this) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($this) + ($24<<3)|0) + 16|0);
    $26 = ($24|0)>(0);
    L19: do {
     if ($26) {
      $27 = (($this) + 16|0);
      $28 = (($info) + 52|0);
      $29 = (($info) + 53|0);
      $30 = (($info) + 54|0);
      $31 = (($this) + 8|0);
      $32 = (($info) + 24|0);
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $27;
      L21: while(1) {
       HEAP8[$28] = 0;
       HEAP8[$29] = 0;
       $33 = (($p$020) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 >> 8;
       $36 = $34 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        $offset_to_base$0$i13 = $35;
       } else {
        $38 = HEAP32[$current_ptr>>2]|0;
        $39 = (($38) + ($35)|0);
        $40 = HEAP32[$39>>2]|0;
        $offset_to_base$0$i13 = $40;
       }
       $41 = HEAP32[$p$020>>2]|0;
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 20|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $46 = $34 >>> 1;
       $47 = $46 & 1;
       $48 = (2 - ($47))|0;
       FUNCTION_TABLE_viiiiii[$44 & 15]($41,$info,$current_ptr,$45,$48,$use_strcmp);
       $49 = HEAP8[$30]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $51 = HEAP8[$29]|0;
       $52 = ($51<<24>>24)==(0);
       do {
        if ($52) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $53 = HEAP8[$28]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $60 = HEAP32[$31>>2]|0;
          $61 = $60 & 1;
          $62 = ($61|0)==(0);
          if ($62) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $55 = HEAP32[$32>>2]|0;
         $56 = ($55|0)==(1);
         if ($56) {
          label = 27;
          break L19;
         }
         $57 = HEAP32[$31>>2]|0;
         $58 = $57 & 2;
         $59 = ($58|0)==(0);
         if ($59) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $63 = (($p$020) + 8|0);
       $64 = ($63>>>0)<($25>>>0);
       if ($64) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $63;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    if ((label|0) == 23) {
     HEAP32[$14>>2] = $current_ptr;
     $65 = (($info) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 1)|0;
     HEAP32[$65>>2] = $67;
     $68 = (($info) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(1);
     if ($70) {
      $71 = (($info) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(2);
      if ($73) {
       $74 = (($info) + 54|0);
       HEAP8[$74] = 1;
       if ($is_dst_type_derived_from_static_type$2$off030) {
        label = 27;
       } else {
        label = 28;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
      label = 26;
     }
    }
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$20>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  }
  $17 = ($path_below|0)==(1);
  if (!($17)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 32|0);
  HEAP32[$18>>2] = 1;
  STACKTOP = sp;return;
 }
 $75 = (($this) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($this) + ($76<<3)|0) + 16|0);
 $78 = (($this) + 20|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = $79 & 1;
 $82 = ($81|0)==(0);
 if ($82) {
  $offset_to_base$0$i14 = $80;
 } else {
  $83 = HEAP32[$current_ptr>>2]|0;
  $84 = (($83) + ($80)|0);
  $85 = HEAP32[$84>>2]|0;
  $offset_to_base$0$i14 = $85;
 }
 $86 = (($this) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $92 = $79 & 2;
 $93 = ($92|0)!=(0);
 $94 = $93 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$90 & 3]($87,$info,$91,$94,$use_strcmp);
 $95 = (($this) + 24|0);
 $96 = ($76|0)>(1);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $97 = (($this) + 8|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98 & 2;
 $100 = ($99|0)==(0);
 if ($100) {
  $101 = (($info) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(1);
  if (!($103)) {
   $125 = $98 & 1;
   $126 = ($125|0)==(0);
   if ($126) {
    $129 = (($info) + 54|0);
    $p2$2 = $95;
    while(1) {
     $154 = HEAP8[$129]|0;
     $155 = ($154<<24>>24)==(0);
     if (!($155)) {
      label = 53;
      break;
     }
     $156 = HEAP32[$101>>2]|0;
     $157 = ($156|0)==(1);
     if ($157) {
      label = 53;
      break;
     }
     $158 = (($p2$2) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 >> 8;
     $161 = $159 & 1;
     $162 = ($161|0)==(0);
     if ($162) {
      $offset_to_base$0$i = $160;
     } else {
      $163 = HEAP32[$current_ptr>>2]|0;
      $164 = (($163) + ($160)|0);
      $165 = HEAP32[$164>>2]|0;
      $offset_to_base$0$i = $165;
     }
     $166 = HEAP32[$p2$2>>2]|0;
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + 24|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $171 = $159 & 2;
     $172 = ($171|0)!=(0);
     $173 = $172 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$169 & 3]($166,$info,$170,$173,$use_strcmp);
     $174 = (($p2$2) + 8|0);
     $175 = ($174>>>0)<($77>>>0);
     if ($175) {
      $p2$2 = $174;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $127 = (($info) + 24|0);
   $128 = (($info) + 54|0);
   $p2$1 = $95;
   while(1) {
    $130 = HEAP8[$128]|0;
    $131 = ($130<<24>>24)==(0);
    if (!($131)) {
     label = 53;
     break;
    }
    $132 = HEAP32[$101>>2]|0;
    $133 = ($132|0)==(1);
    if ($133) {
     $134 = HEAP32[$127>>2]|0;
     $135 = ($134|0)==(1);
     if ($135) {
      label = 53;
      break;
     }
    }
    $136 = (($p2$1) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 >> 8;
    $139 = $137 & 1;
    $140 = ($139|0)==(0);
    if ($140) {
     $offset_to_base$0$i9 = $138;
    } else {
     $141 = HEAP32[$current_ptr>>2]|0;
     $142 = (($141) + ($138)|0);
     $143 = HEAP32[$142>>2]|0;
     $offset_to_base$0$i9 = $143;
    }
    $144 = HEAP32[$p2$1>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + 24|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $149 = $137 & 2;
    $150 = ($149|0)!=(0);
    $151 = $150 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$147 & 3]($144,$info,$148,$151,$use_strcmp);
    $152 = (($p2$1) + 8|0);
    $153 = ($152>>>0)<($77>>>0);
    if ($153) {
     $p2$1 = $152;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 }
 $104 = (($info) + 54|0);
 $p2$0 = $95;
 while(1) {
  $105 = HEAP8[$104]|0;
  $106 = ($105<<24>>24)==(0);
  if (!($106)) {
   label = 53;
   break;
  }
  $107 = (($p2$0) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 >> 8;
  $110 = $108 & 1;
  $111 = ($110|0)==(0);
  if ($111) {
   $offset_to_base$0$i11 = $109;
  } else {
   $112 = HEAP32[$current_ptr>>2]|0;
   $113 = (($112) + ($109)|0);
   $114 = HEAP32[$113>>2]|0;
   $offset_to_base$0$i11 = $114;
  }
  $115 = HEAP32[$p2$0>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $120 = $108 & 2;
  $121 = ($120|0)!=(0);
  $122 = $121 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$118 & 3]($115,$info,$119,$122,$use_strcmp);
  $123 = (($p2$0) + 8|0);
  $124 = ($123>>>0)<($77>>>0);
  if ($124) {
   $p2$0 = $123;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 3]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 15]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($info) + 52|0);
  $33 = HEAP8[$32]|0;
  $34 = (($info) + 53|0);
  $35 = HEAP8[$34]|0;
  $36 = (($this) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($this) + ($37<<3)|0) + 16|0);
  HEAP8[$32] = 0;
  HEAP8[$34] = 0;
  $39 = (($this) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >> 8;
  $42 = $40 & 1;
  $43 = ($42|0)==(0);
  if ($43) {
   $offset_to_base$0$i1 = $41;
  } else {
   $44 = HEAP32[$current_ptr>>2]|0;
   $45 = (($44) + ($41)|0);
   $46 = HEAP32[$45>>2]|0;
   $offset_to_base$0$i1 = $46;
  }
  $47 = (($this) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $53 = $40 & 2;
  $54 = ($53|0)!=(0);
  $55 = $54 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$51 & 15]($48,$info,$dst_ptr,$52,$55,$use_strcmp);
  $56 = ($37|0)>(1);
  L6: do {
   if ($56) {
    $57 = (($this) + 24|0);
    $58 = (($info) + 24|0);
    $59 = (($this) + 8|0);
    $60 = (($info) + 54|0);
    $p$0 = $57;
    while(1) {
     $61 = HEAP8[$60]|0;
     $62 = ($61<<24>>24)==(0);
     if (!($62)) {
      break L6;
     }
     $63 = HEAP8[$32]|0;
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      $70 = HEAP8[$34]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       $72 = HEAP32[$59>>2]|0;
       $73 = $72 & 1;
       $74 = ($73|0)==(0);
       if ($74) {
        break L6;
       }
      }
     } else {
      $65 = HEAP32[$58>>2]|0;
      $66 = ($65|0)==(1);
      if ($66) {
       break L6;
      }
      $67 = HEAP32[$59>>2]|0;
      $68 = $67 & 2;
      $69 = ($68|0)==(0);
      if ($69) {
       break L6;
      }
     }
     HEAP8[$32] = 0;
     HEAP8[$34] = 0;
     $75 = (($p$0) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $76 >> 8;
     $78 = $76 & 1;
     $79 = ($78|0)==(0);
     if ($79) {
      $offset_to_base$0$i = $77;
     } else {
      $80 = HEAP32[$current_ptr>>2]|0;
      $81 = (($80) + ($77)|0);
      $82 = HEAP32[$81>>2]|0;
      $offset_to_base$0$i = $82;
     }
     $83 = HEAP32[$p$0>>2]|0;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 20|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $88 = $76 & 2;
     $89 = ($88|0)!=(0);
     $90 = $89 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$86 & 15]($83,$info,$dst_ptr,$87,$90,$use_strcmp);
     $91 = (($p$0) + 8|0);
     $92 = ($91>>>0)<($38>>>0);
     if ($92) {
      $p$0 = $91;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$32] = $33;
  HEAP8[$34] = $35;
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if (!($2)) {
  $32 = (($this) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_viiiiii[$36 & 15]($33,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($info) + 53|0);
 HEAP8[$3] = 1;
 $4 = (($info) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($current_ptr|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($info) + 52|0);
 HEAP8[$7] = 1;
 $8 = (($info) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$8>>2] = $dst_ptr;
  $11 = (($info) + 24|0);
  HEAP32[$11>>2] = $path_below;
  $12 = (($info) + 36|0);
  HEAP32[$12>>2] = 1;
  $13 = (($info) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  $16 = ($path_below|0)==(1);
  $or$cond$i = $15 & $16;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $18 = ($9|0)==($dst_ptr|0);
 if (!($18)) {
  $28 = (($info) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = (($info) + 54|0);
  HEAP8[$31] = 1;
  STACKTOP = sp;return;
 }
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$19>>2] = $path_below;
  $26 = $path_below;
 } else {
  $26 = $20;
 }
 $22 = (($info) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 $25 = ($26|0)==(1);
 $or$cond1$i = $24 & $25;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $27 = (($info) + 54|0);
 HEAP8[$27] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[15200>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((15200 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((15200 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[15200>>2] = $22;
     } else {
      $23 = HEAP32[((15200 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((15200 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((15200 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((15200 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[15200>>2] = $74;
      } else {
       $75 = HEAP32[((15200 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((15200 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((15200 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((15200 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[15200>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[15200>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((15200 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((15200 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((15200 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((15200 + 8|0))>>2] = $81;
     HEAP32[((15200 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((15200 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((15200 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((15200 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((15200 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((15200 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((15200 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((15200 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((15200 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((15200 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((15200 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((15200 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((15200 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((15200 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[15200>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[15200>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((15200 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((15200 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((15200 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((15200 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((15200 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((15200 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((15200 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((15200 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((15200 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((15200 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((15200 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((15200 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((15200 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((15200 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((15200 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((15200 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((15200 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((15200 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[15200>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          if ($431) {
           $432 = $428 | $429;
           HEAP32[15200>>2] = $432;
           $$sum14$pre$i = (($426) + 2)|0;
           $$pre$i25 = ((15200 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
          } else {
           $$sum17$i = (($426) + 2)|0;
           $433 = ((15200 + ($$sum17$i<<2)|0) + 40|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = HEAP32[((15200 + 16|0))>>2]|0;
           $436 = ($434>>>0)<($435>>>0);
           if ($436) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((15200 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((15200 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((15200 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((15200 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((15200 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((15200 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((15200 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((15200 + 20|0))>>2] = $516;
   HEAP32[((15200 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((15200 + 8|0))>>2] = 0;
   HEAP32[((15200 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((15200 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((15200 + 12|0))>>2] = $530;
  $531 = HEAP32[((15200 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((15200 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[15672>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((15672 + 8|0))>>2] = $540;
    HEAP32[((15672 + 4|0))>>2] = $540;
    HEAP32[((15672 + 12|0))>>2] = -1;
    HEAP32[((15672 + 16|0))>>2] = -1;
    HEAP32[((15672 + 20|0))>>2] = 0;
    HEAP32[((15200 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[15672>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((15672 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((15200 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((15200 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((15200 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((15200 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((15200 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((15200 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((15672 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((15200 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((15200 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((15672 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((15200 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((15200 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((15200 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((15200 + 432|0))>>2] = $633;
  $634 = HEAP32[((15200 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((15200 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((15200 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((15200 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((15200 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((15200 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15200 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15200 + 460|0))>>2] = 0;
    $641 = HEAP32[15672>>2]|0;
    HEAP32[((15200 + 36|0))>>2] = $641;
    HEAP32[((15200 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((15200 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((15200 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((15200 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((15200 + 24|0))>>2] = $654;
    HEAP32[((15200 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((15672 + 16|0))>>2]|0;
    HEAP32[((15200 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((15200 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((15200 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((15200 + 24|0))>>2] = $684;
       HEAP32[((15200 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((15672 + 16|0))>>2]|0;
       HEAP32[((15200 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((15200 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((15200 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((15200 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((15200 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((15200 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((15200 + 12|0))>>2] = $732;
        HEAP32[((15200 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((15200 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((15200 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((15200 + 8|0))>>2] = $738;
         HEAP32[((15200 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((15200 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           if (!($755)) {
            $756 = HEAP32[((15200 + 16|0))>>2]|0;
            $757 = ($750>>>0)<($756>>>0);
            if ($757) {
             _abort();
             // unreachable;
            }
            $758 = (($750) + 12|0);
            $759 = HEAP32[$758>>2]|0;
            $760 = ($759|0)==($721|0);
            if (!($760)) {
             _abort();
             // unreachable;
            }
           }
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[15200>>2]|0;
            $765 = $764 & $763;
            HEAP32[15200>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           if ($766) {
            $$pre57$i$i = (($752) + 8|0);
            $$pre$phi58$i$iZ2D = $$pre57$i$i;
           } else {
            $767 = HEAP32[((15200 + 16|0))>>2]|0;
            $768 = ($752>>>0)<($767>>>0);
            if ($768) {
             _abort();
             // unreachable;
            }
            $769 = (($752) + 8|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = ($770|0)==($721|0);
            if ($771) {
             $$pre$phi58$i$iZ2D = $769;
            } else {
             _abort();
             // unreachable;
            }
           }
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((15200 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((15200 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if (!($802)) {
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($720))|0;
            $803 = (($tbase$247$i) + ($$sum113$i)|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = ((15200 + ($804<<2)|0) + 304|0);
            $806 = HEAP32[$805>>2]|0;
            $807 = ($721|0)==($806|0);
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if ($cond$i$i) {
              $808 = 1 << $804;
              $809 = $808 ^ -1;
              $810 = HEAP32[((15200 + 4|0))>>2]|0;
              $811 = $810 & $809;
              HEAP32[((15200 + 4|0))>>2] = $811;
              break;
             }
            } else {
             $812 = HEAP32[((15200 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break;
             }
            }
            $819 = HEAP32[((15200 + 16|0))>>2]|0;
            $820 = ($R$1$i$i>>>0)<($819>>>0);
            if ($820) {
             _abort();
             // unreachable;
            }
            $821 = (($R$1$i$i) + 24|0);
            HEAP32[$821>>2] = $774;
            $$sum3132$i$i = $720 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $822 = (($tbase$247$i) + ($$sum114$i)|0);
            $823 = HEAP32[$822>>2]|0;
            $824 = ($823|0)==(0|0);
            do {
             if (!($824)) {
              $825 = HEAP32[((15200 + 16|0))>>2]|0;
              $826 = ($823>>>0)<($825>>>0);
              if ($826) {
               _abort();
               // unreachable;
              } else {
               $827 = (($R$1$i$i) + 16|0);
               HEAP32[$827>>2] = $823;
               $828 = (($823) + 24|0);
               HEAP32[$828>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $829 = (($tbase$247$i) + ($$sum115$i)|0);
            $830 = HEAP32[$829>>2]|0;
            $831 = ($830|0)==(0|0);
            if (!($831)) {
             $832 = HEAP32[((15200 + 16|0))>>2]|0;
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              _abort();
              // unreachable;
             } else {
              $834 = (($R$1$i$i) + 20|0);
              HEAP32[$834>>2] = $830;
              $835 = (($830) + 24|0);
              HEAP32[$835>>2] = $R$1$i$i;
              break;
             }
            }
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((15200 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[15200>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         if ($851) {
          $852 = $848 | $849;
          HEAP32[15200>>2] = $852;
          $$sum26$pre$i$i = (($846) + 2)|0;
          $$pre$i25$i = ((15200 + ($$sum26$pre$i$i<<2)|0) + 40|0);
          $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
         } else {
          $$sum29$i$i = (($846) + 2)|0;
          $853 = ((15200 + ($$sum29$i$i<<2)|0) + 40|0);
          $854 = HEAP32[$853>>2]|0;
          $855 = HEAP32[((15200 + 16|0))>>2]|0;
          $856 = ($854>>>0)<($855>>>0);
          if ($856) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
          }
         }
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        if ($861) {
         $I7$0$i$i = 0;
        } else {
         $862 = ($qsize$0$i$i>>>0)>(16777215);
         if ($862) {
          $I7$0$i$i = 31;
         } else {
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        }
        $885 = ((15200 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((15200 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((15200 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((15200 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((15200 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((15200 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((15200 + 24|0))>>2] = $958;
    HEAP32[((15200 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((15672 + 16|0))>>2]|0;
    HEAP32[((15200 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((15200 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((15200 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((15200 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((15200 + 448|0))+12>>2]|0;
    HEAP32[((15200 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((15200 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((15200 + 460|0))>>2] = 0;
    HEAP32[((15200 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((15200 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[15200>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      if ($990) {
       $991 = $987 | $988;
       HEAP32[15200>>2] = $991;
       $$sum10$pre$i$i = (($985) + 2)|0;
       $$pre$i$i = ((15200 + ($$sum10$pre$i$i<<2)|0) + 40|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
      } else {
       $$sum11$i$i = (($985) + 2)|0;
       $992 = ((15200 + ($$sum11$i$i<<2)|0) + 40|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = HEAP32[((15200 + 16|0))>>2]|0;
       $995 = ($993>>>0)<($994>>>0);
       if ($995) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((15200 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((15200 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((15200 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((15200 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((15200 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((15200 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((15200 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((15200 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((15200 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((15200 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((15200 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((15200 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((15200 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[15200>>2]|0;
     $36 = $35 & $34;
     HEAP32[15200>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((15200 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((15200 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((15200 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((15200 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((15200 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((15200 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((15200 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((15200 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((15200 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((15200 + 12|0))>>2] = $122;
   HEAP32[((15200 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((15200 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15200 + 20|0))>>2] = 0;
   HEAP32[((15200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((15200 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((15200 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((15200 + 8|0))>>2] = $130;
   HEAP32[((15200 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((15200 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((15200 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[15200>>2]|0;
     $154 = $153 & $152;
     HEAP32[15200>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((15200 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((15200 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((15200 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((15200 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((15200 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((15200 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((15200 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((15200 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((15200 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((15200 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((15200 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((15200 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((15200 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[15200>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[15200>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((15200 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((15200 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((15200 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((15200 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((15200 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((15200 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((15200 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((15200 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((15200 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((15200 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((15200 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((15200 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((15200 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((15672 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((15200 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((15200 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((15200 + 24|0))>>2] = $38;
  HEAP32[((15200 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((15200 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((15200 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((15200 + 8|0))>>2] = $storemerge21;
  HEAP32[((15200 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((15200 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[15200>>2]|0;
    $90 = $89 & $88;
    HEAP32[15200>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((15200 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((15200 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((15200 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((15200 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((15200 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((15200 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((15200 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((15200 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((15200 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((15200 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((15200 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[15200>>2]|0;
     $32 = $31 & $30;
     HEAP32[15200>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((15200 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((15200 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((15200 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((15200 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((15200 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((15200 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((15200 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((15200 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((15200 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((15200 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((15200 + 12|0))>>2] = $117;
   HEAP32[((15200 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((15200 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((15200 + 20|0))>>2] = 0;
   HEAP32[((15200 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((15200 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((15200 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((15200 + 8|0))>>2] = $125;
   HEAP32[((15200 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((15200 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[15200>>2]|0;
     $148 = $147 & $146;
     HEAP32[15200>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((15200 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((15200 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((15200 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((15200 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((15200 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((15200 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((15200 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((15200 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((15200 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((15200 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[15200>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[15200>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((15200 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((15200 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((15200 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((15200 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((15200 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((15200 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((15200 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((15200 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   label = 6;
   break;
  }
  $3 = HEAP32[15696>>2]|0;HEAP32[15696>>2] = (($3+0)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 5;
   break;
  }
  $5 = $3;
  FUNCTION_TABLE_v[$5 & 1]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  HEAP32[$6>>2] = ((15704 + 8|0));
  ___cxa_throw(($6|0),(15760|0),(120|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ptr|0)==(0|0);
 if (!($0)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9exceptionD2Ev(($this|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (15728|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 HEAP32[$0>>2] = ((15704 + 8|0));
 ___cxa_throw(($0|0),(15760|0),(120|0));
 // unreachable;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace(($9|0))|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (15776 + ($i$068)|0);
  $25 = HEAP8[$24]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (15792 + ($i$263)|0);
      $55 = HEAP8[$54]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L66: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L66;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L79: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L79;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L79;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      if ($302) {
       $303 = (84 - ($$02$i))|0;
       $304 = (+_scalbn(1.0,$303));
       $305 = (+($sign$0|0));
       $306 = (+_copysign((+$304),(+$305)));
       $307 = ($$02$i|0)<(32);
       $308 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $308;
       if ($or$cond4$i) {
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } else {
       $$pre$i = (+($sign$0|0));
       $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
      }
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L168: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L168;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L182: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L182;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (15808 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (15808 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (15808 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L280: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L280;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L311: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (15800 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L311;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysign((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmod((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    if ($658) {
     $frac$2$i = $frac$0$i;
    } else {
     $659 = (($x$i) + ($657<<2)|0);
     $660 = HEAP32[$659>>2]|0;
     $661 = ($660>>>0)<(500000000);
     do {
      if ($661) {
       $662 = ($660|0)==(0);
       if ($662) {
        $663 = (($a$3$i) + 3)|0;
        $664 = $663 & 127;
        $665 = ($664|0)==($z$7$1$i|0);
        if ($665) {
         $frac$1$i = $frac$0$i;
         break;
        }
       }
       $666 = $667 * 0.25;
       $668 = $666 + $frac$0$i;
       $frac$1$i = $668;
      } else {
       $669 = ($660>>>0)>(500000000);
       if ($669) {
        $670 = $667 * 0.75;
        $671 = $670 + $frac$0$i;
        $frac$1$i = $671;
        break;
       }
       $672 = (($a$3$i) + 3)|0;
       $673 = $672 & 127;
       $674 = ($673|0)==($z$7$1$i|0);
       if ($674) {
        $675 = $667 * 0.5;
        $676 = $675 + $frac$0$i;
        $frac$1$i = $676;
        break;
       } else {
        $677 = $667 * 0.75;
        $678 = $677 + $frac$0$i;
        $frac$1$i = $678;
        break;
       }
      }
     } while(0);
     $679 = (53 - ($$09$i))|0;
     $680 = ($679|0)>(1);
     if ($680) {
      $681 = (+_fmod((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
      } else {
       $683 = $frac$1$i + 1.0;
       $frac$2$i = $683;
      }
     } else {
      $frac$2$i = $frac$1$i;
     }
    }
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04]|0;
    $2 = HEAP8[$r$05]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function runPostSets() {
 HEAP32[948] = __ZTISt9exception;HEAP32[974] = __ZTISt9exception;HEAP32[3712] = __ZTISt9exception;HEAP32[3942] = __ZTISt9exception;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiidddd(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
    FUNCTION_TABLE_viiidddd[index&3](a1|0,a2|0,a3|0,+a4,+a5,+a6,+a7);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiidd(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5;
    FUNCTION_TABLE_viiidd[index&3](a1|0,a2|0,a3|0,+a4,+a5);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
  function b1(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(1); }
  function b2(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; abort(2); }
  function b3(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(3); }
  function b4(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4; abort(4); }
  function b5(p0) { p0 = p0|0; abort(5); }
  function b6(p0,p1) { p0 = p0|0;p1 = p1|0; abort(6); }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(7); }
  function b8(p0) { p0 = p0|0; abort(8);return 0; }
  function b9(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; abort(9); }
  function b10(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; abort(11); }
  function b12() { ; abort(12); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(13);return 0; }
  function b14(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(14);return 0; }
  function b15(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(15); }
  function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(16); }
  function b17(p0,p1) { p0 = p0|0;p1 = p1|0; abort(17);return 0; }
  function b18(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(18);return 0; }
  function b19(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(19); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiiii = [b1,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
  var FUNCTION_TABLE_viiidddd = [b2,__ZN4JSUI17addVerticalSliderEPKcPfffff,__ZN4JSUI19addHorizontalSliderEPKcPfffff,__ZN4JSUI11addNumEntryEPKcPfffff];
  var FUNCTION_TABLE_viiiiiii = [b3,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_viiidd = [b4,__ZN4JSUI21addHorizontalBargraphEPKcPfff,__ZN4JSUI19addVerticalBargraphEPKcPfff,b4];
  var FUNCTION_TABLE_vi = [b5,__ZN4JSUID1Ev,__ZN4JSUID0Ev,__ZN4JSUI8closeBoxEv,__ZN2UID1Ev,__ZN2UID0Ev,__ZN19ReverbDesigner_wrapD1Ev,__ZN19ReverbDesigner_wrapD0Ev,__ZN14ReverbDesignerD1Ev,__ZN14ReverbDesignerD0Ev,__ZN3dspD1Ev,__ZN3dspD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev
  ,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev
  ,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__112__do_nothingEPv,_free,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_vii = [b6,__ZN4JSUI10openTabBoxEPKc,__ZN4JSUI17openHorizontalBoxEPKc,__ZN4JSUI15openVerticalBoxEPKc,__ZN14ReverbDesigner18buildUserInterfaceEP2UI,__ZN14ReverbDesigner4initEi,__ZN14ReverbDesigner12instanceInitEi,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv
  ,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiii = [b7,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b7];
  var FUNCTION_TABLE_ii = [b8,__ZN14ReverbDesigner12getNumInputsEv,__ZN14ReverbDesigner13getNumOutputsEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
  ,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv
  ,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiid = [b9,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b9];
  var FUNCTION_TABLE_viii = [b10,__ZN4JSUI9addButtonEPKcPf,__ZN4JSUI14addCheckButtonEPKcPf,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,b10,b10,b10];
  var FUNCTION_TABLE_viiiiid = [b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b11,b11,b11];
  var FUNCTION_TABLE_v = [b12,___cxa_pure_virtual__wrapper];
  var FUNCTION_TABLE_iiiiiiiii = [b13,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_iiiii = [b14,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b14,b14];
  var FUNCTION_TABLE_viiiiiiii = [b15,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b15];
  var FUNCTION_TABLE_viiiii = [b16,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
  var FUNCTION_TABLE_iii = [b17,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b17];
  var FUNCTION_TABLE_iiiiii = [b18,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b18,b18,b18];
  var FUNCTION_TABLE_viiii = [b19,__ZN4JSUI7declareEPfPKcS2_,__ZN2UI7declareEPfPKcS2_,__ZN14ReverbDesigner7computeEiPPfS1_,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b19,b19,b19,b19,b19];

  return { _REVERBDESIGNER_getNumInputs: _REVERBDESIGNER_getNumInputs, _i64Subtract: _i64Subtract, _free: _free, _memset: _memset, _realloc: _realloc, _i64Add: _i64Add, _REVERBDESIGNER_getNumParams: _REVERBDESIGNER_getNumParams, _REVERBDESIGNER_destructor: _REVERBDESIGNER_destructor, _REVERBDESIGNER_getNextParam: _REVERBDESIGNER_getNextParam, _REVERBDESIGNER_compute: _REVERBDESIGNER_compute, _malloc: _malloc, _REVERBDESIGNER_constructor: _REVERBDESIGNER_constructor, _memcpy: _memcpy, _strlen: _strlen, _memmove: _memmove, _strcpy: _strcpy, _REVERBDESIGNER_getNumOutputs: _REVERBDESIGNER_getNumOutputs, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiidddd: dynCall_viiidddd, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiidd: dynCall_viiidd, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiidddd": invoke_viiidddd, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiidd": invoke_viiidd, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "__addDays": __addDays, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exp2": _exp2, "_sysconf": _sysconf, "_tanf": _tanf, "_fileno": _fileno, "_fread": _fread, "_write": _write, "__isLeapYear": __isLeapYear, "_expf": _expf, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "_catclose": _catclose, "_send": _send, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "___cxa_guard_release": ___cxa_guard_release, "_strerror_r": _strerror_r, "___setErrNo": ___setErrNo, "_llvm_pow_f32": _llvm_pow_f32, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "_freelocale": _freelocale, "_sprintf": _sprintf, "_vasprintf": _vasprintf, "_logf": _logf, "_vsnprintf": _vsnprintf, "_strtoull_l": _strtoull_l, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_catopen": _catopen, "_exit": _exit, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "___cxa_allocate_exception": ___cxa_allocate_exception, "_strtoll": _strtoll, "_pwrite": _pwrite, "_uselocale": _uselocale, "_snprintf": _snprintf, "__scanString": __scanString, "_strtoull": _strtoull, "_strftime": _strftime, "_isxdigit": _isxdigit, "_floorf": _floorf, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_recv": _recv, "_fgetc": _fgetc, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_abort": _abort, "_isspace": _isspace, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_cond_wait": _pthread_cond_wait, "_ungetc": _ungetc, "_fflush": _fflush, "_strftime_l": _strftime_l, "_sscanf": _sscanf, "_catgets": _catgets, "_asprintf": _asprintf, "_strtoll_l": _strtoll_l, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "___errno_location": ___errno_location, "_copysign": _copysign, "___cxa_throw": ___cxa_throw, "_isdigit": _isdigit, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _REVERBDESIGNER_getNumInputs = Module["_REVERBDESIGNER_getNumInputs"] = asm["_REVERBDESIGNER_getNumInputs"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _REVERBDESIGNER_getNumParams = Module["_REVERBDESIGNER_getNumParams"] = asm["_REVERBDESIGNER_getNumParams"];
var _REVERBDESIGNER_destructor = Module["_REVERBDESIGNER_destructor"] = asm["_REVERBDESIGNER_destructor"];
var _REVERBDESIGNER_getNextParam = Module["_REVERBDESIGNER_getNextParam"] = asm["_REVERBDESIGNER_getNextParam"];
var _REVERBDESIGNER_compute = Module["_REVERBDESIGNER_compute"] = asm["_REVERBDESIGNER_compute"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _REVERBDESIGNER_constructor = Module["_REVERBDESIGNER_constructor"] = asm["_REVERBDESIGNER_constructor"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _REVERBDESIGNER_getNumOutputs = Module["_REVERBDESIGNER_getNumOutputs"] = asm["_REVERBDESIGNER_getNumOutputs"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiidddd = Module["dynCall_viiidddd"] = asm["dynCall_viiidddd"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiidd = Module["dynCall_viiidd"] = asm["dynCall_viiidd"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




  // This should be made to only make a new context if one does not exist

  if (!faust.context)
  {
    faust.context = new AudioContext();
  }

  var REVERBDESIGNER_constructor = Module.cwrap('REVERBDESIGNER_constructor', 'number', 'number');
  var REVERBDESIGNER_destructor = Module.cwrap('REVERBDESIGNER_destructor', null, ['number']);
  var REVERBDESIGNER_compute = Module.cwrap('REVERBDESIGNER_compute', ['number'], ['number', 'number', 'number', 'number']);
  var REVERBDESIGNER_getNumInputs = Module.cwrap('REVERBDESIGNER_getNumInputs', 'number', 'number');
  var REVERBDESIGNER_getNumOutputs = Module.cwrap('REVERBDESIGNER_getNumOutputs', 'number', 'number');
  var REVERBDESIGNER_getNumParams = Module.cwrap('REVERBDESIGNER_getNumParams', 'number', 'number');
  var REVERBDESIGNER_getNextParam = Module.cwrap('REVERBDESIGNER_getNextParam', 'number', ['number', 'number']);

  faust.reverbDesigner = function () {
    var that = {};
    
    that.model = {
      playing: false
    };

    that.ptr = REVERBDESIGNER_constructor(faust.context.sampleRate);

    // Bind to C++ Member Functions

    that.getNumInputs = function () {
      return REVERBDESIGNER_getNumInputs(that.ptr);
    };

    that.getNumOutputs = function () {
      return REVERBDESIGNER_getNumOutputs(that.ptr);
    };

    that.compute = function (e) {
      var reverbDesignerOutChans = HEAP32.subarray(that.outs >> 2, (that.outs + that.numOut * that.ptrsize) >> 2);
      var reverbDesignerInChans = HEAP32.subarray(that.ins >> 2, (that.ins + that.ins * that.ptrsize) >> 2);
      var i, j;
      for (i = 0; i < that.numIn; i++)
      {
        var input = e.inputBuffer.getChannelData(i);
        var reverbDesignerInput = HEAPF32.subarray(reverbDesignerInChans[i] >> 2, (reverbDesignerInChans[i] + that.vectorsize * that.ptrsize) >> 2);

        for (j = 0; j < input.length; j++) {
          reverbDesignerInput[j] = input[j];
        }
      }

      REVERBDESIGNER_compute(that.ptr, that.vectorsize, that.ins, that.outs);

      for (i = 0; i < that.numOut; i++)
      {
        var output = e.outputBuffer.getChannelData(i);
        var reverbDesignerOutput = HEAPF32.subarray(reverbDesignerOutChans[i] >> 2, (reverbDesignerOutChans[i] + that.vectorsize * that.ptrsize) >> 2);

        for (j = 0; j < output.length; j++) {
          output[j] = reverbDesignerOutput[j];
        }
      }
      return that;
    };

    that.destroy = function () {
      REVERBDESIGNER_destructor(that.ptr);
      return that;
    };

    // Connect to another node
    that.connect = function (node) {
      if (node.scriptProcessor)
      {
        that.scriptProcessor.connect(node.scriptProcessor);
      }
      else {
        that.scriptProcessor.connect(node);
      }
      return that;
    };

    // Bind to Web Audio

    that.play = function () {
      that.scriptProcessor.connect(faust.context.destination);
      that.model.playing = true;
      return that;
    };

    that.pause = function () {
      that.scriptProcessor.disconnect(faust.context.destination);
      that.model.playing = false;
      return that;
    };

    that.toggle = function() {
      if (that.model.playing) {
        that.pause()
      }
      else {
        that.play();
      }
      return that;
    }

    that.setupModel = function () {
      var i;
      var numParams = REVERBDESIGNER_getNumParams(that.ptr);
      for (i = 0; i < numParams; i++) {
        //TODO keyptr is allocated on stack, but is it properly freed?
        var keyPtr = allocate(intArrayFromString(''), 'i8', ALLOC_STACK);
        var valPtr = REVERBDESIGNER_getNextParam(that.ptr, keyPtr);
        var key = Pointer_stringify(keyPtr);
        that.model[key] = {
          value: HEAPF32[valPtr >> 2],
          pointer: valPtr
        };
      }
      return that;
    };

    that.update = function (key, val) {
      that.model[key].value = val;
      HEAPF32[that.model[key].pointer >> 2] = val;
      return that;
    };

    that.init = function () {
      var i;
      that.ptrsize = 4; //assuming pointer in emscripten are 32bits
      that.vectorsize = 2048;
      that.samplesize = 4;

      // Get input / output counts
      that.numIn = that.getNumInputs();
      that.numOut = that.getNumOutputs();

      // Setup web audio context
      that.scriptProcessor = faust.context.createScriptProcessor(that.vectorsize, that.numIn, that.numOut);
      that.scriptProcessor.onaudioprocess = that.compute;

      // TODO the below calls to malloc are not yet being freed, potential memory leak
      // allocate memory for input / output arrays
      that.ins = Module._malloc(that.ptrsize * that.numIn);

      // assign to our array of pointer elements an array of 32bit floats, one for each channel. currently we assume pointers are 32bits
      for (i = 0; i < that.numIn; i++) { 
        // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
        HEAP32[(that.ins >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize); 
      }

      //ptrsize, change to eight or use Runtime.QUANTUM? or what?
      that.outs = Module._malloc(that.ptrsize * that.numOut); 

      // assign to our array of pointer elements an array of 64bit floats, one for each channel. currently we assume pointers are 32bits
      for (i = 0; i < that.numOut; i++) { 
        // assign memory at that.ins[i] to a new ptr value. maybe there's an easier way, but this is clearer to me than any typedarray magic beyond the presumably TypedArray HEAP32
        HEAP32[(that.outs >> 2) + i] = Module._malloc(that.vectorsize * that.samplesize);
      }
      that.setupModel();
      return that;
    };

    that.init();

    return that;
  };
}());
